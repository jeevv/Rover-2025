
HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018494  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f94  08018638  08018638  00019638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080195cc  080195cc  0001b2b8  2**0
                  CONTENTS
  4 .ARM          00000008  080195cc  080195cc  0001a5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080195d4  080195d4  0001b2b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080195d4  080195d4  0001a5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080195e0  080195e0  0001a5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b8  20000000  080195e4  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dc84  200002b8  0801989c  0001b2b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000df3c  0801989c  0001bf3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b2b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3ef  00000000  00000000  0001b2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004049  00000000  00000000  000386d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  0003c720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000138b  00000000  00000000  0003e028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008e1e  00000000  00000000  0003f3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e2d2  00000000  00000000  000481d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6be7  00000000  00000000  000664a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0010d08a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a1c  00000000  00000000  0010d100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00114b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b8 	.word	0x200002b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801861c 	.word	0x0801861c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002bc 	.word	0x200002bc
 80001dc:	0801861c 	.word	0x0801861c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_ldivmod>:
 8000bec:	b97b      	cbnz	r3, 8000c0e <__aeabi_ldivmod+0x22>
 8000bee:	b972      	cbnz	r2, 8000c0e <__aeabi_ldivmod+0x22>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bfbe      	ittt	lt
 8000bf4:	2000      	movlt	r0, #0
 8000bf6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bfa:	e006      	blt.n	8000c0a <__aeabi_ldivmod+0x1e>
 8000bfc:	bf08      	it	eq
 8000bfe:	2800      	cmpeq	r0, #0
 8000c00:	bf1c      	itt	ne
 8000c02:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c06:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0a:	f000 b9b5 	b.w	8000f78 <__aeabi_idiv0>
 8000c0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c16:	2900      	cmp	r1, #0
 8000c18:	db09      	blt.n	8000c2e <__aeabi_ldivmod+0x42>
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db1a      	blt.n	8000c54 <__aeabi_ldivmod+0x68>
 8000c1e:	f000 f84d 	bl	8000cbc <__udivmoddi4>
 8000c22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2a:	b004      	add	sp, #16
 8000c2c:	4770      	bx	lr
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db1b      	blt.n	8000c70 <__aeabi_ldivmod+0x84>
 8000c38:	f000 f840 	bl	8000cbc <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4240      	negs	r0, r0
 8000c48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	4770      	bx	lr
 8000c54:	4252      	negs	r2, r2
 8000c56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5a:	f000 f82f 	bl	8000cbc <__udivmoddi4>
 8000c5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c66:	b004      	add	sp, #16
 8000c68:	4240      	negs	r0, r0
 8000c6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f821 	bl	8000cbc <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ca0:	f000 b96a 	b.w	8000f78 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f806 	bl	8000cbc <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9d08      	ldr	r5, [sp, #32]
 8000cc2:	460c      	mov	r4, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14e      	bne.n	8000d66 <__udivmoddi4+0xaa>
 8000cc8:	4694      	mov	ip, r2
 8000cca:	458c      	cmp	ip, r1
 8000ccc:	4686      	mov	lr, r0
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	d962      	bls.n	8000d9a <__udivmoddi4+0xde>
 8000cd4:	b14a      	cbz	r2, 8000cea <__udivmoddi4+0x2e>
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	4091      	lsls	r1, r2
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	4319      	orrs	r1, r3
 8000ce6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f f68c 	uxth.w	r6, ip
 8000cf2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d02:	fb04 f106 	mul.w	r1, r4, r6
 8000d06:	4299      	cmp	r1, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x64>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d12:	f080 8112 	bcs.w	8000f3a <__udivmoddi4+0x27e>
 8000d16:	4299      	cmp	r1, r3
 8000d18:	f240 810f 	bls.w	8000f3a <__udivmoddi4+0x27e>
 8000d1c:	3c02      	subs	r4, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a59      	subs	r1, r3, r1
 8000d22:	fa1f f38e 	uxth.w	r3, lr
 8000d26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d32:	fb00 f606 	mul.w	r6, r0, r6
 8000d36:	429e      	cmp	r6, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x94>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d42:	f080 80fc 	bcs.w	8000f3e <__udivmoddi4+0x282>
 8000d46:	429e      	cmp	r6, r3
 8000d48:	f240 80f9 	bls.w	8000f3e <__udivmoddi4+0x282>
 8000d4c:	4463      	add	r3, ip
 8000d4e:	3802      	subs	r0, #2
 8000d50:	1b9b      	subs	r3, r3, r6
 8000d52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d56:	2100      	movs	r1, #0
 8000d58:	b11d      	cbz	r5, 8000d62 <__udivmoddi4+0xa6>
 8000d5a:	40d3      	lsrs	r3, r2
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d905      	bls.n	8000d76 <__udivmoddi4+0xba>
 8000d6a:	b10d      	cbz	r5, 8000d70 <__udivmoddi4+0xb4>
 8000d6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	4608      	mov	r0, r1
 8000d74:	e7f5      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000d76:	fab3 f183 	clz	r1, r3
 8000d7a:	2900      	cmp	r1, #0
 8000d7c:	d146      	bne.n	8000e0c <__udivmoddi4+0x150>
 8000d7e:	42a3      	cmp	r3, r4
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xcc>
 8000d82:	4290      	cmp	r0, r2
 8000d84:	f0c0 80f0 	bcc.w	8000f68 <__udivmoddi4+0x2ac>
 8000d88:	1a86      	subs	r6, r0, r2
 8000d8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	d0e6      	beq.n	8000d62 <__udivmoddi4+0xa6>
 8000d94:	e9c5 6300 	strd	r6, r3, [r5]
 8000d98:	e7e3      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	f040 8090 	bne.w	8000ec0 <__udivmoddi4+0x204>
 8000da0:	eba1 040c 	sub.w	r4, r1, ip
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	2101      	movs	r1, #1
 8000dae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000db2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dbe:	fb07 f006 	mul.w	r0, r7, r6
 8000dc2:	4298      	cmp	r0, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x11c>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x11a>
 8000dd0:	4298      	cmp	r0, r3
 8000dd2:	f200 80cd 	bhi.w	8000f70 <__udivmoddi4+0x2b4>
 8000dd6:	4626      	mov	r6, r4
 8000dd8:	1a1c      	subs	r4, r3, r0
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000de2:	fb08 4410 	mls	r4, r8, r0, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb00 f707 	mul.w	r7, r0, r7
 8000dee:	429f      	cmp	r7, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x148>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x146>
 8000dfc:	429f      	cmp	r7, r3
 8000dfe:	f200 80b0 	bhi.w	8000f62 <__udivmoddi4+0x2a6>
 8000e02:	4620      	mov	r0, r4
 8000e04:	1bdb      	subs	r3, r3, r7
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0x9c>
 8000e0c:	f1c1 0620 	rsb	r6, r1, #32
 8000e10:	408b      	lsls	r3, r1
 8000e12:	fa22 f706 	lsr.w	r7, r2, r6
 8000e16:	431f      	orrs	r7, r3
 8000e18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e20:	ea43 030c 	orr.w	r3, r3, ip
 8000e24:	40f4      	lsrs	r4, r6
 8000e26:	fa00 f801 	lsl.w	r8, r0, r1
 8000e2a:	0c38      	lsrs	r0, r7, #16
 8000e2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e30:	fbb4 fef0 	udiv	lr, r4, r0
 8000e34:	fa1f fc87 	uxth.w	ip, r7
 8000e38:	fb00 441e 	mls	r4, r0, lr, r4
 8000e3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e40:	fb0e f90c 	mul.w	r9, lr, ip
 8000e44:	45a1      	cmp	r9, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	d90a      	bls.n	8000e62 <__udivmoddi4+0x1a6>
 8000e4c:	193c      	adds	r4, r7, r4
 8000e4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e52:	f080 8084 	bcs.w	8000f5e <__udivmoddi4+0x2a2>
 8000e56:	45a1      	cmp	r9, r4
 8000e58:	f240 8081 	bls.w	8000f5e <__udivmoddi4+0x2a2>
 8000e5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e60:	443c      	add	r4, r7
 8000e62:	eba4 0409 	sub.w	r4, r4, r9
 8000e66:	fa1f f983 	uxth.w	r9, r3
 8000e6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e7a:	45a4      	cmp	ip, r4
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x1d2>
 8000e7e:	193c      	adds	r4, r7, r4
 8000e80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e84:	d267      	bcs.n	8000f56 <__udivmoddi4+0x29a>
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d965      	bls.n	8000f56 <__udivmoddi4+0x29a>
 8000e8a:	3b02      	subs	r3, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e92:	fba0 9302 	umull	r9, r3, r0, r2
 8000e96:	eba4 040c 	sub.w	r4, r4, ip
 8000e9a:	429c      	cmp	r4, r3
 8000e9c:	46ce      	mov	lr, r9
 8000e9e:	469c      	mov	ip, r3
 8000ea0:	d351      	bcc.n	8000f46 <__udivmoddi4+0x28a>
 8000ea2:	d04e      	beq.n	8000f42 <__udivmoddi4+0x286>
 8000ea4:	b155      	cbz	r5, 8000ebc <__udivmoddi4+0x200>
 8000ea6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000eae:	fa04 f606 	lsl.w	r6, r4, r6
 8000eb2:	40cb      	lsrs	r3, r1
 8000eb4:	431e      	orrs	r6, r3
 8000eb6:	40cc      	lsrs	r4, r1
 8000eb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	e750      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000ec0:	f1c2 0320 	rsb	r3, r2, #32
 8000ec4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ed0:	4094      	lsls	r4, r2
 8000ed2:	430c      	orrs	r4, r1
 8000ed4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000edc:	fa1f f78c 	uxth.w	r7, ip
 8000ee0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee8:	0c23      	lsrs	r3, r4, #16
 8000eea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eee:	fb00 f107 	mul.w	r1, r0, r7
 8000ef2:	4299      	cmp	r1, r3
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x24c>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efe:	d22c      	bcs.n	8000f5a <__udivmoddi4+0x29e>
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d92a      	bls.n	8000f5a <__udivmoddi4+0x29e>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1a5b      	subs	r3, r3, r1
 8000f0a:	b2a4      	uxth	r4, r4
 8000f0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f10:	fb08 3311 	mls	r3, r8, r1, r3
 8000f14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f18:	fb01 f307 	mul.w	r3, r1, r7
 8000f1c:	42a3      	cmp	r3, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x276>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f28:	d213      	bcs.n	8000f52 <__udivmoddi4+0x296>
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	d911      	bls.n	8000f52 <__udivmoddi4+0x296>
 8000f2e:	3902      	subs	r1, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	1ae4      	subs	r4, r4, r3
 8000f34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f38:	e739      	b.n	8000dae <__udivmoddi4+0xf2>
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	e6f0      	b.n	8000d20 <__udivmoddi4+0x64>
 8000f3e:	4608      	mov	r0, r1
 8000f40:	e706      	b.n	8000d50 <__udivmoddi4+0x94>
 8000f42:	45c8      	cmp	r8, r9
 8000f44:	d2ae      	bcs.n	8000ea4 <__udivmoddi4+0x1e8>
 8000f46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4e:	3801      	subs	r0, #1
 8000f50:	e7a8      	b.n	8000ea4 <__udivmoddi4+0x1e8>
 8000f52:	4631      	mov	r1, r6
 8000f54:	e7ed      	b.n	8000f32 <__udivmoddi4+0x276>
 8000f56:	4603      	mov	r3, r0
 8000f58:	e799      	b.n	8000e8e <__udivmoddi4+0x1d2>
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	e7d4      	b.n	8000f08 <__udivmoddi4+0x24c>
 8000f5e:	46d6      	mov	lr, sl
 8000f60:	e77f      	b.n	8000e62 <__udivmoddi4+0x1a6>
 8000f62:	4463      	add	r3, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e74d      	b.n	8000e04 <__udivmoddi4+0x148>
 8000f68:	4606      	mov	r6, r0
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	e70f      	b.n	8000d90 <__udivmoddi4+0xd4>
 8000f70:	3e02      	subs	r6, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	e730      	b.n	8000dd8 <__udivmoddi4+0x11c>
 8000f76:	bf00      	nop

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f88:	f007 fca4 	bl	80088d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80010f8 <pvPortMallocMicroROS+0x17c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000f94:	f000 f986 	bl	80012a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f98:	4b58      	ldr	r3, [pc, #352]	@ (80010fc <pvPortMallocMicroROS+0x180>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f040 8090 	bne.w	80010c6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d01e      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fac:	2208      	movs	r2, #8
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d015      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f023 0307 	bic.w	r3, r3, #7
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fd6:	f383 8811 	msr	BASEPRI, r3
 8000fda:	f3bf 8f6f 	isb	sy
 8000fde:	f3bf 8f4f 	dsb	sy
 8000fe2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	e7fd      	b.n	8000fe6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d06a      	beq.n	80010c6 <pvPortMallocMicroROS+0x14a>
 8000ff0:	4b43      	ldr	r3, [pc, #268]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d865      	bhi.n	80010c6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000ffa:	4b42      	ldr	r3, [pc, #264]	@ (8001104 <pvPortMallocMicroROS+0x188>)
 8000ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000ffe:	4b41      	ldr	r3, [pc, #260]	@ (8001104 <pvPortMallocMicroROS+0x188>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001004:	e004      	b.n	8001010 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	d903      	bls.n	8001022 <pvPortMallocMicroROS+0xa6>
 800101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f1      	bne.n	8001006 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001022:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <pvPortMallocMicroROS+0x17c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001028:	429a      	cmp	r2, r3
 800102a:	d04c      	beq.n	80010c6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2208      	movs	r2, #8
 8001032:	4413      	add	r3, r2
 8001034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	1ad2      	subs	r2, r2, r3
 8001046:	2308      	movs	r3, #8
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	429a      	cmp	r2, r3
 800104c:	d920      	bls.n	8001090 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800104e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00b      	beq.n	8001078 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001064:	f383 8811 	msr	BASEPRI, r3
 8001068:	f3bf 8f6f 	isb	sy
 800106c:	f3bf 8f4f 	dsb	sy
 8001070:	613b      	str	r3, [r7, #16]
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	1ad2      	subs	r2, r2, r3
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800108a:	69b8      	ldr	r0, [r7, #24]
 800108c:	f000 f96c 	bl	8001368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 800109c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <pvPortMallocMicroROS+0x18c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d203      	bcs.n	80010b2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a16      	ldr	r2, [pc, #88]	@ (8001108 <pvPortMallocMicroROS+0x18c>)
 80010b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <pvPortMallocMicroROS+0x180>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010c6:	f007 fc13 	bl	80088f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <pvPortMallocMicroROS+0x170>
	__asm volatile
 80010d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d8:	f383 8811 	msr	BASEPRI, r3
 80010dc:	f3bf 8f6f 	isb	sy
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	60fb      	str	r3, [r7, #12]
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80010ec:	69fb      	ldr	r3, [r7, #28]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3728      	adds	r7, #40	@ 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20003edc 	.word	0x20003edc
 80010fc:	20003ee8 	.word	0x20003ee8
 8001100:	20003ee0 	.word	0x20003ee0
 8001104:	20003ed4 	.word	0x20003ed4
 8001108:	20003ee4 	.word	0x20003ee4

0800110c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d04a      	beq.n	80011b4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800111e:	2308      	movs	r3, #8
 8001120:	425b      	negs	r3, r3
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4413      	add	r3, r2
 8001126:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10b      	bne.n	8001152 <vPortFreeMicroROS+0x46>
	__asm volatile
 800113a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800113e:	f383 8811 	msr	BASEPRI, r3
 8001142:	f3bf 8f6f 	isb	sy
 8001146:	f3bf 8f4f 	dsb	sy
 800114a:	60fb      	str	r3, [r7, #12]
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	e7fd      	b.n	800114e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <vPortFreeMicroROS+0x66>
	__asm volatile
 800115a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800115e:	f383 8811 	msr	BASEPRI, r3
 8001162:	f3bf 8f6f 	isb	sy
 8001166:	f3bf 8f4f 	dsb	sy
 800116a:	60bb      	str	r3, [r7, #8]
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	e7fd      	b.n	800116e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4013      	ands	r3, r2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d019      	beq.n	80011b4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d115      	bne.n	80011b4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001198:	f007 fb9c 	bl	80088d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <vPortFreeMicroROS+0xb4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <vPortFreeMicroROS+0xb4>)
 80011a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011aa:	6938      	ldr	r0, [r7, #16]
 80011ac:	f000 f8dc 	bl	8001368 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011b0:	f007 fb9e 	bl	80088f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20003ee8 	.word	0x20003ee8
 80011c0:	20003ee0 	.word	0x20003ee0

080011c4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011d0:	2308      	movs	r3, #8
 80011d2:	425b      	negs	r3, r3
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	4413      	add	r3, r2
 80011d8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <getBlockSize+0x38>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]

	return count;
 80011ec:	68fb      	ldr	r3, [r7, #12]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20003ee8 	.word	0x20003ee8

08001200 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800120a:	f007 fb63 	bl	80088d4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800120e:	6838      	ldr	r0, [r7, #0]
 8001210:	f7ff feb4 	bl	8000f7c <pvPortMallocMicroROS>
 8001214:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d017      	beq.n	800124c <pvPortReallocMicroROS+0x4c>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d014      	beq.n	800124c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffce 	bl	80011c4 <getBlockSize>
 8001228:	4603      	mov	r3, r0
 800122a:	2208      	movs	r2, #8
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d201      	bcs.n	800123c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	68b8      	ldr	r0, [r7, #8]
 8001242:	f016 fb16 	bl	8017872 <memcpy>

		vPortFreeMicroROS(pv);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff60 	bl	800110c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800124c:	f007 fb50 	bl	80088f0 <xTaskResumeAll>

	return newmem;
 8001250:	68bb      	ldr	r3, [r7, #8]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001264:	f007 fb36 	bl	80088d4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff fe82 	bl	8000f7c <pvPortMallocMicroROS>
 8001278:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800127e:	e004      	b.n	800128a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	613a      	str	r2, [r7, #16]
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	1e5a      	subs	r2, r3, #1
 800128e:	617a      	str	r2, [r7, #20]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f5      	bne.n	8001280 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001294:	f007 fb2c 	bl	80088f0 <xTaskResumeAll>
  	return mem;
 8001298:	68fb      	ldr	r3, [r7, #12]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012aa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80012ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012b0:	4b27      	ldr	r3, [pc, #156]	@ (8001350 <prvHeapInit+0xac>)
 80012b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00c      	beq.n	80012d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3307      	adds	r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f023 0307 	bic.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001350 <prvHeapInit+0xac>)
 80012d4:	4413      	add	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <prvHeapInit+0xb0>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <prvHeapInit+0xb0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80012f0:	2208      	movs	r2, #8
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f023 0307 	bic.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4a15      	ldr	r2, [pc, #84]	@ (8001358 <prvHeapInit+0xb4>)
 8001304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <prvHeapInit+0xb4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800130e:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <prvHeapInit+0xb4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	1ad2      	subs	r2, r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <prvHeapInit+0xb4>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <prvHeapInit+0xb8>)
 8001332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <prvHeapInit+0xbc>)
 800133a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800133c:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <prvHeapInit+0xc0>)
 800133e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	200002d4 	.word	0x200002d4
 8001354:	20003ed4 	.word	0x20003ed4
 8001358:	20003edc 	.word	0x20003edc
 800135c:	20003ee4 	.word	0x20003ee4
 8001360:	20003ee0 	.word	0x20003ee0
 8001364:	20003ee8 	.word	0x20003ee8

08001368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <prvInsertBlockIntoFreeList+0xac>)
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e002      	b.n	800137c <prvInsertBlockIntoFreeList+0x14>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	d8f7      	bhi.n	8001376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	4413      	add	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	d108      	bne.n	80013aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	441a      	add	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	441a      	add	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d118      	bne.n	80013f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <prvInsertBlockIntoFreeList+0xb0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d00d      	beq.n	80013e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	441a      	add	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e008      	b.n	80013f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <prvInsertBlockIntoFreeList+0xb0>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e003      	b.n	80013f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d002      	beq.n	8001406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20003ed4 	.word	0x20003ed4
 8001418:	20003edc 	.word	0x20003edc
 800141c:	00000000 	.word	0x00000000

08001420 <subscription_cmd_vel_callback>:
#define GYRO_XOUT_H_REG 0x43
#define PWR_MGMT_1_REG 0x6B
#define WHO_AM_I_REG 0x75

void subscription_cmd_vel_callback(const void * msgin)
{
 8001420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001424:	b088      	sub	sp, #32
 8001426:	af00      	add	r7, sp, #0
 8001428:	6178      	str	r0, [r7, #20]
	geometry_msgs__msg__Twist * msg = (geometry_msgs__msg__Twist *)msgin;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	61fb      	str	r3, [r7, #28]

	LeftWheelVelocity = msg->linear.x - msg->angular.z*Length;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800143a:	a3af      	add	r3, pc, #700	@ (adr r3, 80016f8 <subscription_cmd_vel_callback+0x2d8>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff f8f2 	bl	8000628 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4620      	mov	r0, r4
 800144a:	4629      	mov	r1, r5
 800144c:	f7fe ff34 	bl	80002b8 <__aeabi_dsub>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	49b0      	ldr	r1, [pc, #704]	@ (8001718 <subscription_cmd_vel_callback+0x2f8>)
 8001456:	e9c1 2300 	strd	r2, r3, [r1]
	RightWheelVelocity = msg->linear.x + msg->angular.z*Length;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001466:	a3a4      	add	r3, pc, #656	@ (adr r3, 80016f8 <subscription_cmd_vel_callback+0x2d8>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f8dc 	bl	8000628 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7fe ff20 	bl	80002bc <__adddf3>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	49a6      	ldr	r1, [pc, #664]	@ (800171c <subscription_cmd_vel_callback+0x2fc>)
 8001482:	e9c1 2300 	strd	r2, r3, [r1]


	LeftMotorSpeed = (int)(LeftWheelVelocity/WheelRadius) * 60/6.2831;            //w of motor in rpm
 8001486:	4ba4      	ldr	r3, [pc, #656]	@ (8001718 <subscription_cmd_vel_callback+0x2f8>)
 8001488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148c:	a39c      	add	r3, pc, #624	@ (adr r3, 8001700 <subscription_cmd_vel_callback+0x2e0>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f9f3 	bl	800087c <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fb5d 	bl	8000b5c <__aeabi_d2iz>
 80014a2:	4602      	mov	r2, r0
 80014a4:	4613      	mov	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f851 	bl	8000554 <__aeabi_i2d>
 80014b2:	a395      	add	r3, pc, #596	@ (adr r3, 8001708 <subscription_cmd_vel_callback+0x2e8>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7ff f9e0 	bl	800087c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4997      	ldr	r1, [pc, #604]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 80014c2:	e9c1 2300 	strd	r2, r3, [r1]
	RightMotorSpeed = (int)(RightWheelVelocity/WheelRadius) * 60/6.2831;
 80014c6:	4b95      	ldr	r3, [pc, #596]	@ (800171c <subscription_cmd_vel_callback+0x2fc>)
 80014c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014cc:	a38c      	add	r3, pc, #560	@ (adr r3, 8001700 <subscription_cmd_vel_callback+0x2e0>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f9d3 	bl	800087c <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fb3d 	bl	8000b5c <__aeabi_d2iz>
 80014e2:	4602      	mov	r2, r0
 80014e4:	4613      	mov	r3, r2
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f831 	bl	8000554 <__aeabi_i2d>
 80014f2:	a385      	add	r3, pc, #532	@ (adr r3, 8001708 <subscription_cmd_vel_callback+0x2e8>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f9c0 	bl	800087c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4988      	ldr	r1, [pc, #544]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 8001502:	e9c1 2300 	strd	r2, r3, [r1]
	//PWM2 Right motor PA6
	//PWM1 Right motor PA7
	//PWM2 Left motor PB1
	//PWM1 Left motor PB0

	if (LeftMotorSpeed>=0 && LeftMotorSpeed<=1000 && RightMotorSpeed>=0 && RightMotorSpeed<=1000)	//front
 8001506:	4b86      	ldr	r3, [pc, #536]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 8001508:	e9d3 0100 	ldrd	r0, r1, [r3]
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f7ff fb0e 	bl	8000b34 <__aeabi_dcmpge>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d042      	beq.n	80015a4 <subscription_cmd_vel_callback+0x184>
 800151e:	4b80      	ldr	r3, [pc, #512]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 8001520:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b7f      	ldr	r3, [pc, #508]	@ (8001728 <subscription_cmd_vel_callback+0x308>)
 800152a:	f7ff faf9 	bl	8000b20 <__aeabi_dcmple>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d037      	beq.n	80015a4 <subscription_cmd_vel_callback+0x184>
 8001534:	4b7b      	ldr	r3, [pc, #492]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 8001536:	e9d3 0100 	ldrd	r0, r1, [r3]
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	f7ff faf7 	bl	8000b34 <__aeabi_dcmpge>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d02b      	beq.n	80015a4 <subscription_cmd_vel_callback+0x184>
 800154c:	4b75      	ldr	r3, [pc, #468]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 800154e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b74      	ldr	r3, [pc, #464]	@ (8001728 <subscription_cmd_vel_callback+0x308>)
 8001558:	f7ff fae2 	bl	8000b20 <__aeabi_dcmple>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d020      	beq.n	80015a4 <subscription_cmd_vel_callback+0x184>
	{
 		TIM3->CCR1 = LeftMotorSpeed;
 8001562:	4b6f      	ldr	r3, [pc, #444]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	4c70      	ldr	r4, [pc, #448]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb1d 	bl	8000bac <__aeabi_d2uiz>
 8001572:	4603      	mov	r3, r0
 8001574:	6363      	str	r3, [r4, #52]	@ 0x34
//		TIM3->CCR2 = 0;
		TIM3->CCR3 = RightMotorSpeed;
 8001576:	4b6b      	ldr	r3, [pc, #428]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	4c6b      	ldr	r4, [pc, #428]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f7ff fb13 	bl	8000bac <__aeabi_d2uiz>
 8001586:	4603      	mov	r3, r0
 8001588:	63e3      	str	r3, [r4, #60]	@ 0x3c
//		TIM3->CCR4 = 0;
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 800158a:	2201      	movs	r2, #1
 800158c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001590:	4867      	ldr	r0, [pc, #412]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 8001592:	f002 fad5 	bl	8003b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800159c:	4864      	ldr	r0, [pc, #400]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 800159e:	f002 facf 	bl	8003b40 <HAL_GPIO_WritePin>
 80015a2:	e126      	b.n	80017f2 <subscription_cmd_vel_callback+0x3d2>
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
	}
	else if (LeftMotorSpeed<=0 && LeftMotorSpeed>=-1000 && RightMotorSpeed<=0 && RightMotorSpeed>=-1000)	//back
 80015a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 80015a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	f7ff fab5 	bl	8000b20 <__aeabi_dcmple>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d04a      	beq.n	8001652 <subscription_cmd_vel_callback+0x232>
 80015bc:	4b58      	ldr	r3, [pc, #352]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 80015be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c2:	a353      	add	r3, pc, #332	@ (adr r3, 8001710 <subscription_cmd_vel_callback+0x2f0>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7ff fab4 	bl	8000b34 <__aeabi_dcmpge>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d03f      	beq.n	8001652 <subscription_cmd_vel_callback+0x232>
 80015d2:	4b54      	ldr	r3, [pc, #336]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 80015d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	f7ff fa9e 	bl	8000b20 <__aeabi_dcmple>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d033      	beq.n	8001652 <subscription_cmd_vel_callback+0x232>
 80015ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 80015ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f0:	a347      	add	r3, pc, #284	@ (adr r3, 8001710 <subscription_cmd_vel_callback+0x2f0>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff fa9d 	bl	8000b34 <__aeabi_dcmpge>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d028      	beq.n	8001652 <subscription_cmd_vel_callback+0x232>
//		TIM3->CCR4 = -RightMotorSpeed;
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
		TIM3->CCR1 = -LeftMotorSpeed;
 8001600:	4b47      	ldr	r3, [pc, #284]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	60ba      	str	r2, [r7, #8]
 8001608:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4c47      	ldr	r4, [pc, #284]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 8001610:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001614:	f7ff faca 	bl	8000bac <__aeabi_d2uiz>
 8001618:	4603      	mov	r3, r0
 800161a:	6363      	str	r3, [r4, #52]	@ 0x34
//		TIM3->CCR2 = 0;
		TIM3->CCR3 = -RightMotorSpeed;
 800161c:	4b41      	ldr	r3, [pc, #260]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	603a      	str	r2, [r7, #0]
 8001624:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4c40      	ldr	r4, [pc, #256]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 800162c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001630:	f7ff fabc 	bl	8000bac <__aeabi_d2uiz>
 8001634:	4603      	mov	r3, r0
 8001636:	63e3      	str	r3, [r4, #60]	@ 0x3c
//		TIM3->CCR4 = 0;
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800163e:	483c      	ldr	r0, [pc, #240]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 8001640:	f002 fa7e 	bl	8003b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8001644:	2201      	movs	r2, #1
 8001646:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800164a:	4839      	ldr	r0, [pc, #228]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 800164c:	f002 fa78 	bl	8003b40 <HAL_GPIO_WritePin>
 8001650:	e0cf      	b.n	80017f2 <subscription_cmd_vel_callback+0x3d2>
	}
	else if (LeftMotorSpeed<=0 && LeftMotorSpeed>=-1000 && RightMotorSpeed>=0 && RightMotorSpeed<=1000)		//left
 8001652:	4b33      	ldr	r3, [pc, #204]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 8001654:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	f7ff fa5e 	bl	8000b20 <__aeabi_dcmple>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d064      	beq.n	8001734 <subscription_cmd_vel_callback+0x314>
 800166a:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 800166c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001670:	a327      	add	r3, pc, #156	@ (adr r3, 8001710 <subscription_cmd_vel_callback+0x2f0>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7ff fa5d 	bl	8000b34 <__aeabi_dcmpge>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d059      	beq.n	8001734 <subscription_cmd_vel_callback+0x314>
 8001680:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 8001682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	f7ff fa51 	bl	8000b34 <__aeabi_dcmpge>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d04d      	beq.n	8001734 <subscription_cmd_vel_callback+0x314>
 8001698:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 800169a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <subscription_cmd_vel_callback+0x308>)
 80016a4:	f7ff fa3c 	bl	8000b20 <__aeabi_dcmple>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d042      	beq.n	8001734 <subscription_cmd_vel_callback+0x314>
//		TIM3->CCR4 = RightMotorSpeed;
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
		TIM3->CCR1 = -LeftMotorSpeed;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	4692      	mov	sl, r2
 80016b6:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80016ba:	4c1c      	ldr	r4, [pc, #112]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 80016bc:	4650      	mov	r0, sl
 80016be:	4659      	mov	r1, fp
 80016c0:	f7ff fa74 	bl	8000bac <__aeabi_d2uiz>
 80016c4:	4603      	mov	r3, r0
 80016c6:	6363      	str	r3, [r4, #52]	@ 0x34
//		TIM3->CCR2 = 0;
		TIM3->CCR3 = RightMotorSpeed;
 80016c8:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	4c17      	ldr	r4, [pc, #92]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f7ff fa6a 	bl	8000bac <__aeabi_d2uiz>
 80016d8:	4603      	mov	r3, r0
 80016da:	63e3      	str	r3, [r4, #60]	@ 0x3c
//		TIM3->CCR4 = 0;
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016e2:	4813      	ldr	r0, [pc, #76]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 80016e4:	f002 fa2c 	bl	8003b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016ee:	4810      	ldr	r0, [pc, #64]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 80016f0:	f002 fa26 	bl	8003b40 <HAL_GPIO_WritePin>
 80016f4:	e07d      	b.n	80017f2 <subscription_cmd_vel_callback+0x3d2>
 80016f6:	bf00      	nop
 80016f8:	cccccccd 	.word	0xcccccccd
 80016fc:	3fcccccc 	.word	0x3fcccccc
 8001700:	1eb851ec 	.word	0x1eb851ec
 8001704:	3fb1eb85 	.word	0x3fb1eb85
 8001708:	f765fd8b 	.word	0xf765fd8b
 800170c:	401921e4 	.word	0x401921e4
 8001710:	00000000 	.word	0x00000000
 8001714:	c08f4000 	.word	0xc08f4000
 8001718:	200040a0 	.word	0x200040a0
 800171c:	200040a8 	.word	0x200040a8
 8001720:	200040b0 	.word	0x200040b0
 8001724:	200040b8 	.word	0x200040b8
 8001728:	408f4000 	.word	0x408f4000
 800172c:	40000400 	.word	0x40000400
 8001730:	40020c00 	.word	0x40020c00
	}
	else if (LeftMotorSpeed>=0 && LeftMotorSpeed<=1000 && RightMotorSpeed<=0 && RightMotorSpeed>=-1000)		//right
 8001734:	4b34      	ldr	r3, [pc, #208]	@ (8001808 <subscription_cmd_vel_callback+0x3e8>)
 8001736:	e9d3 0100 	ldrd	r0, r1, [r3]
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	f7ff f9f7 	bl	8000b34 <__aeabi_dcmpge>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d045      	beq.n	80017d8 <subscription_cmd_vel_callback+0x3b8>
 800174c:	4b2e      	ldr	r3, [pc, #184]	@ (8001808 <subscription_cmd_vel_callback+0x3e8>)
 800174e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <subscription_cmd_vel_callback+0x3ec>)
 8001758:	f7ff f9e2 	bl	8000b20 <__aeabi_dcmple>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d03a      	beq.n	80017d8 <subscription_cmd_vel_callback+0x3b8>
 8001762:	4b2b      	ldr	r3, [pc, #172]	@ (8001810 <subscription_cmd_vel_callback+0x3f0>)
 8001764:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	f7ff f9d6 	bl	8000b20 <__aeabi_dcmple>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d02e      	beq.n	80017d8 <subscription_cmd_vel_callback+0x3b8>
 800177a:	4b25      	ldr	r3, [pc, #148]	@ (8001810 <subscription_cmd_vel_callback+0x3f0>)
 800177c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001780:	a31f      	add	r3, pc, #124	@ (adr r3, 8001800 <subscription_cmd_vel_callback+0x3e0>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7ff f9d5 	bl	8000b34 <__aeabi_dcmpge>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d023      	beq.n	80017d8 <subscription_cmd_vel_callback+0x3b8>
//		TIM3->CCR4 = 0;
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
		TIM3->CCR1 = LeftMotorSpeed;
 8001790:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <subscription_cmd_vel_callback+0x3e8>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	4c1f      	ldr	r4, [pc, #124]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff fa06 	bl	8000bac <__aeabi_d2uiz>
 80017a0:	4603      	mov	r3, r0
 80017a2:	6363      	str	r3, [r4, #52]	@ 0x34
//		TIM3->CCR2 = 0;
		TIM3->CCR3 = -RightMotorSpeed;
 80017a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <subscription_cmd_vel_callback+0x3f0>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017aa:	4690      	mov	r8, r2
 80017ac:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80017b0:	4c18      	ldr	r4, [pc, #96]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 80017b2:	4640      	mov	r0, r8
 80017b4:	4649      	mov	r1, r9
 80017b6:	f7ff f9f9 	bl	8000bac <__aeabi_d2uiz>
 80017ba:	4603      	mov	r3, r0
 80017bc:	63e3      	str	r3, [r4, #60]	@ 0x3c
//		TIM3->CCR4 = 0;
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 80017be:	2201      	movs	r2, #1
 80017c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017c4:	4814      	ldr	r0, [pc, #80]	@ (8001818 <subscription_cmd_vel_callback+0x3f8>)
 80017c6:	f002 f9bb 	bl	8003b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80017ca:	2201      	movs	r2, #1
 80017cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017d0:	4811      	ldr	r0, [pc, #68]	@ (8001818 <subscription_cmd_vel_callback+0x3f8>)
 80017d2:	f002 f9b5 	bl	8003b40 <HAL_GPIO_WritePin>
 80017d6:	e00c      	b.n	80017f2 <subscription_cmd_vel_callback+0x3d2>
	}
	else
	{
		TIM3->CCR1 = 0;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = 0;
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = 0;
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = 0;
 80017ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	641a      	str	r2, [r3, #64]	@ 0x40
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
	}
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3720      	adds	r7, #32
 80017f6:	46bd      	mov	sp, r7
 80017f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017fc:	f3af 8000 	nop.w
 8001800:	00000000 	.word	0x00000000
 8001804:	c08f4000 	.word	0xc08f4000
 8001808:	200040b0 	.word	0x200040b0
 800180c:	408f4000 	.word	0x408f4000
 8001810:	200040b8 	.word	0x200040b8
 8001814:	40000400 	.word	0x40000400
 8001818:	40020c00 	.word	0x40020c00

0800181c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)					//PA0 LeftWheelEncoderChannelA  PE11 LeftWheelEncoderChannelB
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d11b      	bne.n	8001864 <HAL_GPIO_EXTI_Callback+0x48>
	{
//		LeftWheelEncoder++;
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == 1) LeftWheelEncoder++;
 800182c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001830:	481d      	ldr	r0, [pc, #116]	@ (80018a8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001832:	f002 f96d 	bl	8003b10 <HAL_GPIO_ReadPin>
 8001836:	4603      	mov	r3, r0
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_GPIO_EXTI_Callback+0x2c>
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_GPIO_EXTI_Callback+0x90>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	4a1a      	ldr	r2, [pc, #104]	@ (80018ac <HAL_GPIO_EXTI_Callback+0x90>)
 8001844:	6013      	str	r3, [r2, #0]
	{
//		RightWheelEncoder++;
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 0) RightWheelEncoder++;
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 1) RightWheelEncoder--;
	}
}
 8001846:	e02b      	b.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == 0) LeftWheelEncoder--;
 8001848:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800184c:	4816      	ldr	r0, [pc, #88]	@ (80018a8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800184e:	f002 f95f 	bl	8003b10 <HAL_GPIO_ReadPin>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d123      	bne.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_GPIO_EXTI_Callback+0x90>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3b01      	subs	r3, #1
 800185e:	4a13      	ldr	r2, [pc, #76]	@ (80018ac <HAL_GPIO_EXTI_Callback+0x90>)
 8001860:	6013      	str	r3, [r2, #0]
}
 8001862:	e01d      	b.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
	else if (GPIO_Pin == GPIO_PIN_1)					//PA1 RightWheelEncoderChannelA  PE12 RightWheelEncoderChannelB
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d11a      	bne.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 0) RightWheelEncoder++;
 800186a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800186e:	480e      	ldr	r0, [pc, #56]	@ (80018a8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001870:	f002 f94e 	bl	8003b10 <HAL_GPIO_ReadPin>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d105      	bne.n	8001886 <HAL_GPIO_EXTI_Callback+0x6a>
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x94>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	4a0b      	ldr	r2, [pc, #44]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	e00c      	b.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 1) RightWheelEncoder--;
 8001886:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800188a:	4807      	ldr	r0, [pc, #28]	@ (80018a8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800188c:	f002 f940 	bl	8003b10 <HAL_GPIO_ReadPin>
 8001890:	4603      	mov	r3, r0
 8001892:	2b01      	cmp	r3, #1
 8001894:	d104      	bne.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3b01      	subs	r3, #1
 800189c:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x94>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40021000 	.word	0x40021000
 80018ac:	20004094 	.word	0x20004094
 80018b0:	20004098 	.word	0x20004098

080018b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b8:	f001 fa20 	bl	8002cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018bc:	f000 f838 	bl	8001930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c0:	f000 f9b6 	bl	8001c30 <MX_GPIO_Init>
  MX_DMA_Init();
 80018c4:	f000 f98c 	bl	8001be0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018c8:	f000 f960 	bl	8001b8c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80018cc:	f000 f8c6 	bl	8001a5c <MX_TIM3_Init>
  MX_I2C2_Init();
 80018d0:	f000 f896 	bl	8001a00 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  mpu_init(&mpu,&hi2c2);
 80018d4:	4910      	ldr	r1, [pc, #64]	@ (8001918 <main+0x64>)
 80018d6:	4811      	ldr	r0, [pc, #68]	@ (800191c <main+0x68>)
 80018d8:	f000 fced 	bl	80022b6 <mpu_init>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80018dc:	2100      	movs	r1, #0
 80018de:	4810      	ldr	r0, [pc, #64]	@ (8001920 <main+0x6c>)
 80018e0:	f003 fec4 	bl	800566c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80018e4:	2104      	movs	r1, #4
 80018e6:	480e      	ldr	r0, [pc, #56]	@ (8001920 <main+0x6c>)
 80018e8:	f003 fec0 	bl	800566c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80018ec:	2108      	movs	r1, #8
 80018ee:	480c      	ldr	r0, [pc, #48]	@ (8001920 <main+0x6c>)
 80018f0:	f003 febc 	bl	800566c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80018f4:	210c      	movs	r1, #12
 80018f6:	480a      	ldr	r0, [pc, #40]	@ (8001920 <main+0x6c>)
 80018f8:	f003 feb8 	bl	800566c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018fc:	f005 fecc 	bl	8007698 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001900:	4a08      	ldr	r2, [pc, #32]	@ (8001924 <main+0x70>)
 8001902:	2100      	movs	r1, #0
 8001904:	4808      	ldr	r0, [pc, #32]	@ (8001928 <main+0x74>)
 8001906:	f005 ff11 	bl	800772c <osThreadNew>
 800190a:	4603      	mov	r3, r0
 800190c:	4a07      	ldr	r2, [pc, #28]	@ (800192c <main+0x78>)
 800190e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001910:	f005 fee6 	bl	80076e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <main+0x60>
 8001918:	20003eec 	.word	0x20003eec
 800191c:	200040c0 	.word	0x200040c0
 8001920:	20003f40 	.word	0x20003f40
 8001924:	080186f0 	.word	0x080186f0
 8001928:	08001da1 	.word	0x08001da1
 800192c:	20004090 	.word	0x20004090

08001930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b094      	sub	sp, #80	@ 0x50
 8001934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001936:	f107 0320 	add.w	r3, r7, #32
 800193a:	2230      	movs	r2, #48	@ 0x30
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f015 fece 	bl	80176e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	4b27      	ldr	r3, [pc, #156]	@ (80019f8 <SystemClock_Config+0xc8>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	4a26      	ldr	r2, [pc, #152]	@ (80019f8 <SystemClock_Config+0xc8>)
 800195e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001962:	6413      	str	r3, [r2, #64]	@ 0x40
 8001964:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <SystemClock_Config+0xc8>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001970:	2300      	movs	r3, #0
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <SystemClock_Config+0xcc>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a20      	ldr	r2, [pc, #128]	@ (80019fc <SystemClock_Config+0xcc>)
 800197a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <SystemClock_Config+0xcc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800198c:	2301      	movs	r3, #1
 800198e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001990:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001996:	2302      	movs	r3, #2
 8001998:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800199a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800199e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019a0:	2304      	movs	r3, #4
 80019a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80019a4:	23c0      	movs	r3, #192	@ 0xc0
 80019a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019a8:	2304      	movs	r3, #4
 80019aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80019ac:	2308      	movs	r3, #8
 80019ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b0:	f107 0320 	add.w	r3, r7, #32
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 f919 	bl	8004bec <HAL_RCC_OscConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019c0:	f000 fb0e 	bl	8001fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c4:	230f      	movs	r3, #15
 80019c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c8:	2302      	movs	r3, #2
 80019ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	2103      	movs	r1, #3
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fb7b 	bl	80050dc <HAL_RCC_ClockConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019ec:	f000 faf8 	bl	8001fe0 <Error_Handler>
  }
}
 80019f0:	bf00      	nop
 80019f2:	3750      	adds	r7, #80	@ 0x50
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40007000 	.word	0x40007000

08001a00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <MX_I2C2_Init+0x50>)
 8001a06:	4a13      	ldr	r2, [pc, #76]	@ (8001a54 <MX_I2C2_Init+0x54>)
 8001a08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <MX_I2C2_Init+0x50>)
 8001a0c:	4a12      	ldr	r2, [pc, #72]	@ (8001a58 <MX_I2C2_Init+0x58>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <MX_I2C2_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <MX_I2C2_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <MX_I2C2_Init+0x50>)
 8001a1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <MX_I2C2_Init+0x50>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <MX_I2C2_Init+0x50>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <MX_I2C2_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <MX_I2C2_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a3c:	4804      	ldr	r0, [pc, #16]	@ (8001a50 <MX_I2C2_Init+0x50>)
 8001a3e:	f002 f8b1 	bl	8003ba4 <HAL_I2C_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a48:	f000 faca 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20003eec 	.word	0x20003eec
 8001a54:	40005800 	.word	0x40005800
 8001a58:	000186a0 	.word	0x000186a0

08001a5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08e      	sub	sp, #56	@ 0x38
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a70:	f107 0320 	add.w	r3, r7, #32
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
 8001a88:	615a      	str	r2, [r3, #20]
 8001a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b84 <MX_TIM3_Init+0x128>)
 8001a8e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b88 <MX_TIM3_Init+0x12c>)
 8001a90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001a92:	4b3c      	ldr	r3, [pc, #240]	@ (8001b84 <MX_TIM3_Init+0x128>)
 8001a94:	2209      	movs	r2, #9
 8001a96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	4b3a      	ldr	r3, [pc, #232]	@ (8001b84 <MX_TIM3_Init+0x128>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001a9e:	4b39      	ldr	r3, [pc, #228]	@ (8001b84 <MX_TIM3_Init+0x128>)
 8001aa0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001aa4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa6:	4b37      	ldr	r3, [pc, #220]	@ (8001b84 <MX_TIM3_Init+0x128>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aac:	4b35      	ldr	r3, [pc, #212]	@ (8001b84 <MX_TIM3_Init+0x128>)
 8001aae:	2280      	movs	r2, #128	@ 0x80
 8001ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ab2:	4834      	ldr	r0, [pc, #208]	@ (8001b84 <MX_TIM3_Init+0x128>)
 8001ab4:	f003 fd32 	bl	800551c <HAL_TIM_Base_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001abe:	f000 fa8f 	bl	8001fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ac8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001acc:	4619      	mov	r1, r3
 8001ace:	482d      	ldr	r0, [pc, #180]	@ (8001b84 <MX_TIM3_Init+0x128>)
 8001ad0:	f003 ff3e 	bl	8005950 <HAL_TIM_ConfigClockSource>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001ada:	f000 fa81 	bl	8001fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ade:	4829      	ldr	r0, [pc, #164]	@ (8001b84 <MX_TIM3_Init+0x128>)
 8001ae0:	f003 fd6b 	bl	80055ba <HAL_TIM_PWM_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001aea:	f000 fa79 	bl	8001fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001af6:	f107 0320 	add.w	r3, r7, #32
 8001afa:	4619      	mov	r1, r3
 8001afc:	4821      	ldr	r0, [pc, #132]	@ (8001b84 <MX_TIM3_Init+0x128>)
 8001afe:	f004 fac7 	bl	8006090 <HAL_TIMEx_MasterConfigSynchronization>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b08:	f000 fa6a 	bl	8001fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b0c:	2360      	movs	r3, #96	@ 0x60
 8001b0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4619      	mov	r1, r3
 8001b22:	4818      	ldr	r0, [pc, #96]	@ (8001b84 <MX_TIM3_Init+0x128>)
 8001b24:	f003 fe52 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b2e:	f000 fa57 	bl	8001fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2204      	movs	r2, #4
 8001b36:	4619      	mov	r1, r3
 8001b38:	4812      	ldr	r0, [pc, #72]	@ (8001b84 <MX_TIM3_Init+0x128>)
 8001b3a:	f003 fe47 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001b44:	f000 fa4c 	bl	8001fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <MX_TIM3_Init+0x128>)
 8001b50:	f003 fe3c 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001b5a:	f000 fa41 	bl	8001fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	220c      	movs	r2, #12
 8001b62:	4619      	mov	r1, r3
 8001b64:	4807      	ldr	r0, [pc, #28]	@ (8001b84 <MX_TIM3_Init+0x128>)
 8001b66:	f003 fe31 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001b70:	f000 fa36 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b74:	4803      	ldr	r0, [pc, #12]	@ (8001b84 <MX_TIM3_Init+0x128>)
 8001b76:	f000 fdab 	bl	80026d0 <HAL_TIM_MspPostInit>

}
 8001b7a:	bf00      	nop
 8001b7c:	3738      	adds	r7, #56	@ 0x38
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20003f40 	.word	0x20003f40
 8001b88:	40000400 	.word	0x40000400

08001b8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	@ (8001bdc <MX_USART2_UART_Init+0x50>)
 8001b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001b98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	@ (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001bc4:	f004 fad2 	bl	800616c <HAL_UART_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bce:	f000 fa07 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20003f88 	.word	0x20003f88
 8001bdc:	40004400 	.word	0x40004400

08001be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <MX_DMA_Init+0x4c>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	4a0f      	ldr	r2, [pc, #60]	@ (8001c2c <MX_DMA_Init+0x4c>)
 8001bf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <MX_DMA_Init+0x4c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2105      	movs	r1, #5
 8001c06:	2010      	movs	r0, #16
 8001c08:	f001 f9c5 	bl	8002f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001c0c:	2010      	movs	r0, #16
 8001c0e:	f001 f9de 	bl	8002fce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2105      	movs	r1, #5
 8001c16:	2011      	movs	r0, #17
 8001c18:	f001 f9bd 	bl	8002f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001c1c:	2011      	movs	r0, #17
 8001c1e:	f001 f9d6 	bl	8002fce <HAL_NVIC_EnableIRQ>

}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800

08001c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	@ 0x30
 8001c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
 8001c44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	4b51      	ldr	r3, [pc, #324]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	4a50      	ldr	r2, [pc, #320]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c56:	4b4e      	ldr	r3, [pc, #312]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	4b4a      	ldr	r3, [pc, #296]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	4a49      	ldr	r2, [pc, #292]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c72:	4b47      	ldr	r3, [pc, #284]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b43      	ldr	r3, [pc, #268]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a42      	ldr	r2, [pc, #264]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b40      	ldr	r3, [pc, #256]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a3b      	ldr	r2, [pc, #236]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b39      	ldr	r3, [pc, #228]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	4b35      	ldr	r3, [pc, #212]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	4a34      	ldr	r2, [pc, #208]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001cc0:	f043 0310 	orr.w	r3, r3, #16
 8001cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc6:	4b32      	ldr	r3, [pc, #200]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	4a2d      	ldr	r2, [pc, #180]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d90 <MX_GPIO_Init+0x160>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001cf4:	4827      	ldr	r0, [pc, #156]	@ (8001d94 <MX_GPIO_Init+0x164>)
 8001cf6:	f001 ff23 	bl	8003b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cfe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4822      	ldr	r0, [pc, #136]	@ (8001d98 <MX_GPIO_Init+0x168>)
 8001d10:	f001 fd7a 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d14:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	481c      	ldr	r0, [pc, #112]	@ (8001d9c <MX_GPIO_Init+0x16c>)
 8001d2a:	f001 fd6d 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d2e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d3c:	f107 031c 	add.w	r3, r7, #28
 8001d40:	4619      	mov	r1, r3
 8001d42:	4814      	ldr	r0, [pc, #80]	@ (8001d94 <MX_GPIO_Init+0x164>)
 8001d44:	f001 fd60 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d48:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <MX_GPIO_Init+0x164>)
 8001d62:	f001 fd51 	bl	8003808 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2105      	movs	r1, #5
 8001d6a:	2006      	movs	r0, #6
 8001d6c:	f001 f913 	bl	8002f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d70:	2006      	movs	r0, #6
 8001d72:	f001 f92c 	bl	8002fce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2105      	movs	r1, #5
 8001d7a:	2007      	movs	r0, #7
 8001d7c:	f001 f90b 	bl	8002f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d80:	2007      	movs	r0, #7
 8001d82:	f001 f924 	bl	8002fce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d86:	bf00      	nop
 8001d88:	3730      	adds	r7, #48	@ 0x30
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020c00 	.word	0x40020c00
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40021000 	.word	0x40021000

08001da0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001da0:	b5b0      	push	{r4, r5, r7, lr}
 8001da2:	b0e6      	sub	sp, #408	@ 0x198
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001daa:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001dae:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	  // micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8001db0:	4b76      	ldr	r3, [pc, #472]	@ (8001f8c <StartDefaultTask+0x1ec>)
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	4b76      	ldr	r3, [pc, #472]	@ (8001f90 <StartDefaultTask+0x1f0>)
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	4b76      	ldr	r3, [pc, #472]	@ (8001f94 <StartDefaultTask+0x1f4>)
 8001dba:	4a77      	ldr	r2, [pc, #476]	@ (8001f98 <StartDefaultTask+0x1f8>)
 8001dbc:	4977      	ldr	r1, [pc, #476]	@ (8001f9c <StartDefaultTask+0x1fc>)
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f00a fe1e 	bl	800ca00 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001dc4:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00a fd4b 	bl	800c864 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001dce:	4b74      	ldr	r3, [pc, #464]	@ (8001fa0 <StartDefaultTask+0x200>)
 8001dd0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001dd4:	4b73      	ldr	r3, [pc, #460]	@ (8001fa4 <StartDefaultTask+0x204>)
 8001dd6:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001dda:	4b73      	ldr	r3, [pc, #460]	@ (8001fa8 <StartDefaultTask+0x208>)
 8001ddc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001de0:	4b72      	ldr	r3, [pc, #456]	@ (8001fac <StartDefaultTask+0x20c>)
 8001de2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001de6:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001dea:	4618      	mov	r0, r3
 8001dec:	f00a fd48 	bl	800c880 <rcutils_set_default_allocator>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f083 0301 	eor.w	r3, r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <StartDefaultTask+0x66>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001dfc:	f240 216b 	movw	r1, #619	@ 0x26b
 8001e00:	486b      	ldr	r0, [pc, #428]	@ (8001fb0 <StartDefaultTask+0x210>)
 8001e02:	f015 fb81 	bl	8017508 <iprintf>
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  geometry_msgs__msg__Twist imu;
     rcl_publisher_t imu_pub;

	  allocator = rcl_get_default_allocator();
 8001e06:	463b      	mov	r3, r7
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00a fd57 	bl	800c8bc <rcutils_get_default_allocator>
 8001e0e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e12:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e16:	f107 04e8 	add.w	r4, r7, #232	@ 0xe8
 8001e1a:	461d      	mov	r5, r3
 8001e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e20:	682b      	ldr	r3, [r5, #0]
 8001e22:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8001e24:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001e28:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2100      	movs	r1, #0
 8001e30:	f00a fc22 	bl	800c678 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "stm32_microros", "", &support);
 8001e34:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001e38:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8001e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8001fb4 <StartDefaultTask+0x214>)
 8001e3e:	495e      	ldr	r1, [pc, #376]	@ (8001fb8 <StartDefaultTask+0x218>)
 8001e40:	f00a fc64 	bl	800c70c <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8001e44:	f00b fb36 	bl	800d4b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001e4e:	f507 70b8 	add.w	r0, r7, #368	@ 0x170
 8001e52:	4b5a      	ldr	r3, [pc, #360]	@ (8001fbc <StartDefaultTask+0x21c>)
 8001e54:	f00a fc96 	bl	800c784 <rclc_publisher_init_default>
	    &publisher1,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int16),
	    "lwheel");

	  rclc_publisher_init_default(
 8001e58:	f00b fb2c 	bl	800d4b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001e62:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8001e66:	4b56      	ldr	r3, [pc, #344]	@ (8001fc0 <StartDefaultTask+0x220>)
 8001e68:	f00a fc8c 	bl	800c784 <rclc_publisher_init_default>
	  	    &publisher2,
	  	    &node,
	  	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int16),
	  	    "rwheel");
	  rclc_publisher_init_default(
 8001e6c:	f008 f9bc 	bl	800a1e8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001e76:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8001e7a:	4b52      	ldr	r3, [pc, #328]	@ (8001fc4 <StartDefaultTask+0x224>)
 8001e7c:	f00a fc82 	bl	800c784 <rclc_publisher_init_default>
	  		ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	  		"imu_raw");

	  // create subscriber

	  	  rclc_subscription_init_default(
 8001e80:	f008 f9b2 	bl	800a1e8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001e8a:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8001e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8001fc8 <StartDefaultTask+0x228>)
 8001e90:	f00a fcac 	bl	800c7ec <rclc_subscription_init_default>
	  	     &node,
	  	     ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	  	     "cmd_vel");

	  	// create executor
	  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001e94:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e98:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f00a f917 	bl	800c0d0 <rclc_executor_get_zero_initialized_executor>
	  	rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001ea2:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001ea6:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8001eaa:	f107 0020 	add.w	r0, r7, #32
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f00a f91a 	bl	800c0e8 <rclc_executor_init>
	  	rclc_executor_add_subscription(&executor, &subscriber_cmd_vel, &sub_cmd_vel_msg, &subscription_cmd_vel_callback, ON_NEW_DATA);
 8001eb4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001eb8:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8001ebc:	f107 0020 	add.w	r0, r7, #32
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	4b41      	ldr	r3, [pc, #260]	@ (8001fcc <StartDefaultTask+0x22c>)
 8001ec6:	f00a f97f 	bl	800c1c8 <rclc_executor_add_subscription>

	  for(;;)
	  {
		msg1.data = LeftWheelEncoder;
 8001eca:	4b41      	ldr	r3, [pc, #260]	@ (8001fd0 <StartDefaultTask+0x230>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	f8a7 3164 	strh.w	r3, [r7, #356]	@ 0x164
		msg2.data = RightWheelEncoder;
 8001ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8001fd4 <StartDefaultTask+0x234>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	f8a7 3160 	strh.w	r3, [r7, #352]	@ 0x160

		mpu_read(&mpu);
 8001ede:	483e      	ldr	r0, [pc, #248]	@ (8001fd8 <StartDefaultTask+0x238>)
 8001ee0:	f000 fa4e 	bl	8002380 <mpu_read>

		imu.linear.x = mpu.ax;
 8001ee4:	4b3c      	ldr	r3, [pc, #240]	@ (8001fd8 <StartDefaultTask+0x238>)
 8001ee6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001eea:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		imu.linear.y = mpu.ay;
 8001eee:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd8 <StartDefaultTask+0x238>)
 8001ef0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ef4:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
		imu.linear.z = mpu.az;
 8001ef8:	4b37      	ldr	r3, [pc, #220]	@ (8001fd8 <StartDefaultTask+0x238>)
 8001efa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001efe:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0

		imu.angular.x = mpu.gx;
 8001f02:	4b35      	ldr	r3, [pc, #212]	@ (8001fd8 <StartDefaultTask+0x238>)
 8001f04:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001f08:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
		imu.angular.y = mpu.gy;
 8001f0c:	4b32      	ldr	r3, [pc, #200]	@ (8001fd8 <StartDefaultTask+0x238>)
 8001f0e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001f12:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
		imu.angular.z = mpu.gz;
 8001f16:	4b30      	ldr	r3, [pc, #192]	@ (8001fd8 <StartDefaultTask+0x238>)
 8001f18:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001f1c:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8


	    rcl_ret_t ret1 = rcl_publish(&publisher1, &msg1, NULL);
 8001f20:	f507 71b2 	add.w	r1, r7, #356	@ 0x164
 8001f24:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001f28:	2200      	movs	r2, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f009 fd42 	bl	800b9b4 <rcl_publish>
 8001f30:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c
	    rcl_ret_t ret2 = rcl_publish(&publisher2, &msg2, NULL);
 8001f34:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001f38:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f009 fd38 	bl	800b9b4 <rcl_publish>
 8001f44:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188

	    rcl_publish(&imu_pub, &imu, NULL);
 8001f48:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001f4c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f50:	2200      	movs	r2, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f009 fd2e 	bl	800b9b4 <rcl_publish>

	    rclc_executor_spin_some(&executor, 1000);    	// waits for 1000ns for ros data, theres no data it continues, if there is data then it executes subscription callback
 8001f58:	f107 0120 	add.w	r1, r7, #32
 8001f5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	4608      	mov	r0, r1
 8001f66:	f00a fb4f 	bl	800c608 <rclc_executor_spin_some>



	    if ((ret1 | ret2) != RCL_RET_OK)
 8001f6a:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8001f6e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001f72:	4313      	orrs	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d004      	beq.n	8001f82 <StartDefaultTask+0x1e2>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 8001f78:	f240 21be 	movw	r1, #702	@ 0x2be
 8001f7c:	4817      	ldr	r0, [pc, #92]	@ (8001fdc <StartDefaultTask+0x23c>)
 8001f7e:	f015 fac3 	bl	8017508 <iprintf>
	    }
	    osDelay(10);
 8001f82:	200a      	movs	r0, #10
 8001f84:	f005 fc64 	bl	8007850 <osDelay>
	  {
 8001f88:	e79f      	b.n	8001eca <StartDefaultTask+0x12a>
 8001f8a:	bf00      	nop
 8001f8c:	08002c01 	.word	0x08002c01
 8001f90:	08002b99 	.word	0x08002b99
 8001f94:	08002b79 	.word	0x08002b79
 8001f98:	08002b4d 	.word	0x08002b4d
 8001f9c:	20003f88 	.word	0x20003f88
 8001fa0:	08001fed 	.word	0x08001fed
 8001fa4:	08002031 	.word	0x08002031
 8001fa8:	08002069 	.word	0x08002069
 8001fac:	080020d5 	.word	0x080020d5
 8001fb0:	08018644 	.word	0x08018644
 8001fb4:	0801866c 	.word	0x0801866c
 8001fb8:	08018670 	.word	0x08018670
 8001fbc:	08018680 	.word	0x08018680
 8001fc0:	08018688 	.word	0x08018688
 8001fc4:	08018690 	.word	0x08018690
 8001fc8:	08018698 	.word	0x08018698
 8001fcc:	08001421 	.word	0x08001421
 8001fd0:	20004094 	.word	0x20004094
 8001fd4:	20004098 	.word	0x20004098
 8001fd8:	200040c0 	.word	0x200040c0
 8001fdc:	080186a0 	.word	0x080186a0

08001fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe4:	b672      	cpsid	i
}
 8001fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <Error_Handler+0x8>

08001fec <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <microros_allocate+0x3c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	461a      	mov	r2, r3
 8002002:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <microros_allocate+0x3c>)
 8002004:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002006:	4b09      	ldr	r3, [pc, #36]	@ (800202c <microros_allocate+0x40>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <microros_allocate+0x40>)
 8002014:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe ffb0 	bl	8000f7c <pvPortMallocMicroROS>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20004108 	.word	0x20004108
 800202c:	2000410c 	.word	0x2000410c

08002030 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00c      	beq.n	800205a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff f8bf 	bl	80011c4 <getBlockSize>
 8002046:	4603      	mov	r3, r0
 8002048:	4a06      	ldr	r2, [pc, #24]	@ (8002064 <microros_deallocate+0x34>)
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	461a      	mov	r2, r3
 8002050:	4b04      	ldr	r3, [pc, #16]	@ (8002064 <microros_deallocate+0x34>)
 8002052:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff f859 	bl	800110c <vPortFreeMicroROS>
  }
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000410c 	.word	0x2000410c

08002068 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002074:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <microros_reallocate+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4413      	add	r3, r2
 800207e:	461a      	mov	r2, r3
 8002080:	4b12      	ldr	r3, [pc, #72]	@ (80020cc <microros_reallocate+0x64>)
 8002082:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002084:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <microros_reallocate+0x68>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4413      	add	r3, r2
 800208e:	461a      	mov	r2, r3
 8002090:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <microros_reallocate+0x68>)
 8002092:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d104      	bne.n	80020a4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800209a:	68b8      	ldr	r0, [r7, #8]
 800209c:	f7fe ff6e 	bl	8000f7c <pvPortMallocMicroROS>
 80020a0:	4603      	mov	r3, r0
 80020a2:	e00e      	b.n	80020c2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7ff f88d 	bl	80011c4 <getBlockSize>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a08      	ldr	r2, [pc, #32]	@ (80020d0 <microros_reallocate+0x68>)
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <microros_reallocate+0x68>)
 80020b6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f7ff f8a0 	bl	8001200 <pvPortReallocMicroROS>
 80020c0:	4603      	mov	r3, r0
  }
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20004108 	.word	0x20004108
 80020d0:	2000410c 	.word	0x2000410c

080020d4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	4a0c      	ldr	r2, [pc, #48]	@ (800211c <microros_zero_allocate+0x48>)
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	4413      	add	r3, r2
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <microros_zero_allocate+0x48>)
 80020f2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	4a08      	ldr	r2, [pc, #32]	@ (8002120 <microros_zero_allocate+0x4c>)
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	4413      	add	r3, r2
 8002102:	461a      	mov	r2, r3
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <microros_zero_allocate+0x4c>)
 8002106:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7ff f8a5 	bl	800125a <pvPortCallocMicroROS>
 8002110:	4603      	mov	r3, r0
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20004108 	.word	0x20004108
 8002120:	2000410c 	.word	0x2000410c
 8002124:	00000000 	.word	0x00000000

08002128 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002128:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800213a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800213e:	a320      	add	r3, pc, #128	@ (adr r3, 80021c0 <UTILS_NanosecondsToTimespec+0x98>)
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	f7fe fd52 	bl	8000bec <__aeabi_ldivmod>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002152:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002156:	a31a      	add	r3, pc, #104	@ (adr r3, 80021c0 <UTILS_NanosecondsToTimespec+0x98>)
 8002158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215c:	f7fe fd46 	bl	8000bec <__aeabi_ldivmod>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	da20      	bge.n	80021ae <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a11      	ldr	r2, [pc, #68]	@ (80021b8 <UTILS_NanosecondsToTimespec+0x90>)
 8002172:	fb82 1203 	smull	r1, r2, r2, r3
 8002176:	1712      	asrs	r2, r2, #28
 8002178:	17db      	asrs	r3, r3, #31
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	3301      	adds	r3, #1
 800217e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002186:	6979      	ldr	r1, [r7, #20]
 8002188:	17c8      	asrs	r0, r1, #31
 800218a:	460c      	mov	r4, r1
 800218c:	4605      	mov	r5, r0
 800218e:	ebb2 0804 	subs.w	r8, r2, r4
 8002192:	eb63 0905 	sbc.w	r9, r3, r5
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4906      	ldr	r1, [pc, #24]	@ (80021bc <UTILS_NanosecondsToTimespec+0x94>)
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	441a      	add	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	609a      	str	r2, [r3, #8]
    }
}
 80021ae:	bf00      	nop
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021b8:	44b82fa1 	.word	0x44b82fa1
 80021bc:	3b9aca00 	.word	0x3b9aca00
 80021c0:	3b9aca00 	.word	0x3b9aca00
 80021c4:	00000000 	.word	0x00000000

080021c8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80021c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021cc:	b08e      	sub	sp, #56	@ 0x38
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80021d2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80021d4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80021d8:	2300      	movs	r3, #0
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80021ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021ee:	4618      	mov	r0, r3
 80021f0:	f006 fdfa 	bl	8008de8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80021f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f6:	17da      	asrs	r2, r3, #31
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	61fa      	str	r2, [r7, #28]
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	69b9      	ldr	r1, [r7, #24]
 8002206:	000b      	movs	r3, r1
 8002208:	2200      	movs	r2, #0
 800220a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800220e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002210:	2200      	movs	r2, #0
 8002212:	461c      	mov	r4, r3
 8002214:	4615      	mov	r5, r2
 8002216:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800221a:	1911      	adds	r1, r2, r4
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	416b      	adcs	r3, r5
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002226:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800222a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	f04f 0400 	mov.w	r4, #0
 8002236:	f04f 0500 	mov.w	r5, #0
 800223a:	015d      	lsls	r5, r3, #5
 800223c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002240:	0154      	lsls	r4, r2, #5
 8002242:	4622      	mov	r2, r4
 8002244:	462b      	mov	r3, r5
 8002246:	ebb2 0800 	subs.w	r8, r2, r0
 800224a:	eb63 0901 	sbc.w	r9, r3, r1
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800225a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800225e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002262:	4690      	mov	r8, r2
 8002264:	4699      	mov	r9, r3
 8002266:	eb18 0a00 	adds.w	sl, r8, r0
 800226a:	eb49 0b01 	adc.w	fp, r9, r1
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800227a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800227e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002282:	ebb2 040a 	subs.w	r4, r2, sl
 8002286:	603c      	str	r4, [r7, #0]
 8002288:	eb63 030b 	sbc.w	r3, r3, fp
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002292:	4623      	mov	r3, r4
 8002294:	181b      	adds	r3, r3, r0
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	462b      	mov	r3, r5
 800229a:	eb41 0303 	adc.w	r3, r1, r3
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	6a3a      	ldr	r2, [r7, #32]
 80022a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022a6:	f7ff ff3f 	bl	8002128 <UTILS_NanosecondsToTimespec>

    return 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	3738      	adds	r7, #56	@ 0x38
 80022b0:	46bd      	mov	sp, r7
 80022b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080022b6 <mpu_init>:
 *      Author: bala
 */
#include "mpu.h"

void mpu_init(mpu_struct *mpu, I2C_HandleTypeDef *hi2c)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b088      	sub	sp, #32
 80022ba:	af04      	add	r7, sp, #16
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
	mpu->hi2c = hi2c;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	601a      	str	r2, [r3, #0]

	uint8_t tx_data;
	uint8_t rx_data;


	HAL_I2C_Mem_Read (hi2c, MPU6050_ADDR,WHO_AM_I_REG,1, &rx_data, 1, 1000);
 80022c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	2301      	movs	r3, #1
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	f107 030e 	add.w	r3, r7, #14
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2301      	movs	r3, #1
 80022d8:	2275      	movs	r2, #117	@ 0x75
 80022da:	21d0      	movs	r1, #208	@ 0xd0
 80022dc:	6838      	ldr	r0, [r7, #0]
 80022de:	f001 fe9f 	bl	8004020 <HAL_I2C_Mem_Read>

	if (rx_data == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 80022e2:	7bbb      	ldrb	r3, [r7, #14]
 80022e4:	2b68      	cmp	r3, #104	@ 0x68
 80022e6:	d143      	bne.n	8002370 <mpu_init+0xba>
	{
		mpu->status = 1;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	711a      	strb	r2, [r3, #4]
		// power management register 0X6B we should write all 0's to wake the sensor up
		tx_data = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&tx_data, 1, 1000);
 80022f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022f6:	9302      	str	r3, [sp, #8]
 80022f8:	2301      	movs	r3, #1
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	f107 030f 	add.w	r3, r7, #15
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2301      	movs	r3, #1
 8002304:	226b      	movs	r2, #107	@ 0x6b
 8002306:	21d0      	movs	r1, #208	@ 0xd0
 8002308:	6838      	ldr	r0, [r7, #0]
 800230a:	f001 fd8f 	bl	8003e2c <HAL_I2C_Mem_Write>

		// Set tx_data RATE of 1KHz by writing SMPLRT_DIV register
		tx_data = 0x07;
 800230e:	2307      	movs	r3, #7
 8002310:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &tx_data, 1, 1000);
 8002312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	2301      	movs	r3, #1
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	f107 030f 	add.w	r3, r7, #15
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2301      	movs	r3, #1
 8002324:	2219      	movs	r2, #25
 8002326:	21d0      	movs	r1, #208	@ 0xd0
 8002328:	6838      	ldr	r0, [r7, #0]
 800232a:	f001 fd7f 	bl	8003e2c <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 ->   2g
		tx_data = 0x00;
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &tx_data, 1, 1000);
 8002332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002336:	9302      	str	r3, [sp, #8]
 8002338:	2301      	movs	r3, #1
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	f107 030f 	add.w	r3, r7, #15
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	2301      	movs	r3, #1
 8002344:	221c      	movs	r2, #28
 8002346:	21d0      	movs	r1, #208	@ 0xd0
 8002348:	6838      	ldr	r0, [r7, #0]
 800234a:	f001 fd6f 	bl	8003e2c <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->   250  /s
		tx_data = 0x00;
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &tx_data, 1, 1000);
 8002352:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002356:	9302      	str	r3, [sp, #8]
 8002358:	2301      	movs	r3, #1
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	f107 030f 	add.w	r3, r7, #15
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2301      	movs	r3, #1
 8002364:	221b      	movs	r2, #27
 8002366:	21d0      	movs	r1, #208	@ 0xd0
 8002368:	6838      	ldr	r0, [r7, #0]
 800236a:	f001 fd5f 	bl	8003e2c <HAL_I2C_Mem_Write>
	{
		mpu->status = 0;
	}


}
 800236e:	e002      	b.n	8002376 <mpu_init+0xc0>
		mpu->status = 0;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	711a      	strb	r2, [r3, #4]
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <mpu_read>:
	mpu->gz = (mpu->gz_raw * 0.0174) / 131.0;

}

void mpu_read(mpu_struct *mpu)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af04      	add	r7, sp, #16
 8002386:	6078      	str	r0, [r7, #4]
	uint8_t tx_data[6];

	// Read 6 BYTES of tx_data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (mpu->hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, tx_data, 6, 1000);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2306      	movs	r3, #6
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	f107 0308 	add.w	r3, r7, #8
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2301      	movs	r3, #1
 800239e:	223b      	movs	r2, #59	@ 0x3b
 80023a0:	21d0      	movs	r1, #208	@ 0xd0
 80023a2:	f001 fe3d 	bl	8004020 <HAL_I2C_Mem_Read>

	mpu->ax_raw = (uint16_t)(tx_data[0] << 8 | tx_data [1]);
 80023a6:	7a3b      	ldrb	r3, [r7, #8]
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	b21a      	sxth	r2, r3
 80023ac:	7a7b      	ldrb	r3, [r7, #9]
 80023ae:	b21b      	sxth	r3, r3
 80023b0:	4313      	orrs	r3, r2
 80023b2:	b21b      	sxth	r3, r3
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	80da      	strh	r2, [r3, #6]
	mpu->ay_raw = (uint16_t)(tx_data[2] << 8 | tx_data [3]);
 80023ba:	7abb      	ldrb	r3, [r7, #10]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	b21a      	sxth	r2, r3
 80023c0:	7afb      	ldrb	r3, [r7, #11]
 80023c2:	b21b      	sxth	r3, r3
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	811a      	strh	r2, [r3, #8]
	mpu->az_raw = (uint16_t)(tx_data[4] << 8 | tx_data [5]);
 80023ce:	7b3b      	ldrb	r3, [r7, #12]
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	b21a      	sxth	r2, r3
 80023d4:	7b7b      	ldrb	r3, [r7, #13]
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	4313      	orrs	r3, r2
 80023da:	b21b      	sxth	r3, r3
 80023dc:	b29a      	uxth	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	815a      	strh	r2, [r3, #10]
			/*** convert the RAW values into acceleration in 'g'
			     we have to divide according to the Full scale value set in FS_SEL
			     I have configured FS_SEL = 0. So I am dividing by 16384.0
			     for more details check ACCEL_CONFIG Register              ****/

	mpu->ax = (mpu->ax_raw * 9.81) / 16384.0;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	88db      	ldrh	r3, [r3, #6]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f8b4 	bl	8000554 <__aeabi_i2d>
 80023ec:	a35e      	add	r3, pc, #376	@ (adr r3, 8002568 <mpu_read+0x1e8>)
 80023ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f2:	f7fe f919 	bl	8000628 <__aeabi_dmul>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	4b5f      	ldr	r3, [pc, #380]	@ (8002580 <mpu_read+0x200>)
 8002404:	f7fe fa3a 	bl	800087c <__aeabi_ddiv>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	mpu->ay = (mpu->ay_raw * 9.81) / 16384.0;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	891b      	ldrh	r3, [r3, #8]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe f89c 	bl	8000554 <__aeabi_i2d>
 800241c:	a352      	add	r3, pc, #328	@ (adr r3, 8002568 <mpu_read+0x1e8>)
 800241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002422:	f7fe f901 	bl	8000628 <__aeabi_dmul>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4610      	mov	r0, r2
 800242c:	4619      	mov	r1, r3
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	4b53      	ldr	r3, [pc, #332]	@ (8002580 <mpu_read+0x200>)
 8002434:	f7fe fa22 	bl	800087c <__aeabi_ddiv>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	mpu->az = (mpu->az_raw * 9.81) / 16384.0;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	895b      	ldrh	r3, [r3, #10]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe f884 	bl	8000554 <__aeabi_i2d>
 800244c:	a346      	add	r3, pc, #280	@ (adr r3, 8002568 <mpu_read+0x1e8>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	f7fe f8e9 	bl	8000628 <__aeabi_dmul>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	4b47      	ldr	r3, [pc, #284]	@ (8002580 <mpu_read+0x200>)
 8002464:	f7fe fa0a 	bl	800087c <__aeabi_ddiv>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28


		// Read 6 BYTES of tx_data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (mpu->hi2c, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, tx_data, 6, 1000);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800247a:	9302      	str	r3, [sp, #8]
 800247c:	2306      	movs	r3, #6
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	f107 0308 	add.w	r3, r7, #8
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2301      	movs	r3, #1
 8002488:	2243      	movs	r2, #67	@ 0x43
 800248a:	21d0      	movs	r1, #208	@ 0xd0
 800248c:	f001 fdc8 	bl	8004020 <HAL_I2C_Mem_Read>

	mpu->gx_raw = (uint16_t)(tx_data[0] << 8 | tx_data [1]);
 8002490:	7a3b      	ldrb	r3, [r7, #8]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	b21a      	sxth	r2, r3
 8002496:	7a7b      	ldrb	r3, [r7, #9]
 8002498:	b21b      	sxth	r3, r3
 800249a:	4313      	orrs	r3, r2
 800249c:	b21b      	sxth	r3, r3
 800249e:	b29a      	uxth	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	819a      	strh	r2, [r3, #12]
	mpu->gy_raw = (uint16_t)(tx_data[2] << 8 | tx_data [3]);
 80024a4:	7abb      	ldrb	r3, [r7, #10]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	b21a      	sxth	r2, r3
 80024aa:	7afb      	ldrb	r3, [r7, #11]
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	4313      	orrs	r3, r2
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	81da      	strh	r2, [r3, #14]
	mpu->gz_raw = (uint16_t)(tx_data[4] << 8 | tx_data [5]);
 80024b8:	7b3b      	ldrb	r3, [r7, #12]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	b21a      	sxth	r2, r3
 80024be:	7b7b      	ldrb	r3, [r7, #13]
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	4313      	orrs	r3, r2
 80024c4:	b21b      	sxth	r3, r3
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	821a      	strh	r2, [r3, #16]
			/* convert the RAW values into dps ( /s)
			     we have to divide according to the Full scale value set in FS_SEL
			     I have configured FS_SEL = 0. So I am dividing by 131.0
			     for more details check GYRO_CONFIG Register              **/

	mpu->gx = (mpu->gx_raw * 0.0174) / 131.0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	899b      	ldrh	r3, [r3, #12]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe f83f 	bl	8000554 <__aeabi_i2d>
 80024d6:	a326      	add	r3, pc, #152	@ (adr r3, 8002570 <mpu_read+0x1f0>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f7fe f8a4 	bl	8000628 <__aeabi_dmul>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	a323      	add	r3, pc, #140	@ (adr r3, 8002578 <mpu_read+0x1f8>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	f7fe f9c5 	bl	800087c <__aeabi_ddiv>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	mpu->gy = (mpu->gy_raw * 0.0174) / 131.0;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	89db      	ldrh	r3, [r3, #14]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f827 	bl	8000554 <__aeabi_i2d>
 8002506:	a31a      	add	r3, pc, #104	@ (adr r3, 8002570 <mpu_read+0x1f0>)
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	f7fe f88c 	bl	8000628 <__aeabi_dmul>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	a317      	add	r3, pc, #92	@ (adr r3, 8002578 <mpu_read+0x1f8>)
 800251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251e:	f7fe f9ad 	bl	800087c <__aeabi_ddiv>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	mpu->gz = (mpu->gz_raw * 0.0174) / 131.0;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	8a1b      	ldrh	r3, [r3, #16]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe f80f 	bl	8000554 <__aeabi_i2d>
 8002536:	a30e      	add	r3, pc, #56	@ (adr r3, 8002570 <mpu_read+0x1f0>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f874 	bl	8000628 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	a30b      	add	r3, pc, #44	@ (adr r3, 8002578 <mpu_read+0x1f8>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f7fe f995 	bl	800087c <__aeabi_ddiv>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
}
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	f3af 8000 	nop.w
 8002568:	51eb851f 	.word	0x51eb851f
 800256c:	40239eb8 	.word	0x40239eb8
 8002570:	3bcd35a8 	.word	0x3bcd35a8
 8002574:	3f91d14e 	.word	0x3f91d14e
 8002578:	00000000 	.word	0x00000000
 800257c:	40606000 	.word	0x40606000
 8002580:	40d00000 	.word	0x40d00000

08002584 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_MspInit+0x54>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	4a11      	ldr	r2, [pc, #68]	@ (80025d8 <HAL_MspInit+0x54>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002598:	6453      	str	r3, [r2, #68]	@ 0x44
 800259a:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <HAL_MspInit+0x54>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <HAL_MspInit+0x54>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	4a0a      	ldr	r2, [pc, #40]	@ (80025d8 <HAL_MspInit+0x54>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b6:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <HAL_MspInit+0x54>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	210f      	movs	r1, #15
 80025c6:	f06f 0001 	mvn.w	r0, #1
 80025ca:	f000 fce4 	bl	8002f96 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800

080025dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	@ 0x28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a21      	ldr	r2, [pc, #132]	@ (8002680 <HAL_I2C_MspInit+0xa4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d13c      	bne.n	8002678 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	4b20      	ldr	r3, [pc, #128]	@ (8002684 <HAL_I2C_MspInit+0xa8>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	4a1f      	ldr	r2, [pc, #124]	@ (8002684 <HAL_I2C_MspInit+0xa8>)
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	6313      	str	r3, [r2, #48]	@ 0x30
 800260e:	4b1d      	ldr	r3, [pc, #116]	@ (8002684 <HAL_I2C_MspInit+0xa8>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800261a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800261e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002620:	2312      	movs	r3, #18
 8002622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800262c:	2304      	movs	r3, #4
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	4619      	mov	r1, r3
 8002636:	4814      	ldr	r0, [pc, #80]	@ (8002688 <HAL_I2C_MspInit+0xac>)
 8002638:	f001 f8e6 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800263c:	2308      	movs	r3, #8
 800263e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002640:	2312      	movs	r3, #18
 8002642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002648:	2303      	movs	r3, #3
 800264a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800264c:	2309      	movs	r3, #9
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	480c      	ldr	r0, [pc, #48]	@ (8002688 <HAL_I2C_MspInit+0xac>)
 8002658:	f001 f8d6 	bl	8003808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <HAL_I2C_MspInit+0xa8>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	4a07      	ldr	r2, [pc, #28]	@ (8002684 <HAL_I2C_MspInit+0xa8>)
 8002666:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800266a:	6413      	str	r3, [r2, #64]	@ 0x40
 800266c:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <HAL_I2C_MspInit+0xa8>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002670:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002678:	bf00      	nop
 800267a:	3728      	adds	r7, #40	@ 0x28
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40005800 	.word	0x40005800
 8002684:	40023800 	.word	0x40023800
 8002688:	40020400 	.word	0x40020400

0800268c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0b      	ldr	r2, [pc, #44]	@ (80026c8 <HAL_TIM_Base_MspInit+0x3c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10d      	bne.n	80026ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b0a      	ldr	r3, [pc, #40]	@ (80026cc <HAL_TIM_Base_MspInit+0x40>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	4a09      	ldr	r2, [pc, #36]	@ (80026cc <HAL_TIM_Base_MspInit+0x40>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ae:	4b07      	ldr	r3, [pc, #28]	@ (80026cc <HAL_TIM_Base_MspInit+0x40>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40023800 	.word	0x40023800

080026d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	@ 0x28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a21      	ldr	r2, [pc, #132]	@ (8002774 <HAL_TIM_MspPostInit+0xa4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d13b      	bne.n	800276a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	4b20      	ldr	r3, [pc, #128]	@ (8002778 <HAL_TIM_MspPostInit+0xa8>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002778 <HAL_TIM_MspPostInit+0xa8>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6313      	str	r3, [r2, #48]	@ 0x30
 8002702:	4b1d      	ldr	r3, [pc, #116]	@ (8002778 <HAL_TIM_MspPostInit+0xa8>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <HAL_TIM_MspPostInit+0xa8>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	4a18      	ldr	r2, [pc, #96]	@ (8002778 <HAL_TIM_MspPostInit+0xa8>)
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	6313      	str	r3, [r2, #48]	@ 0x30
 800271e:	4b16      	ldr	r3, [pc, #88]	@ (8002778 <HAL_TIM_MspPostInit+0xa8>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800272a:	23c0      	movs	r3, #192	@ 0xc0
 800272c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272e:	2302      	movs	r3, #2
 8002730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800273a:	2302      	movs	r3, #2
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	480d      	ldr	r0, [pc, #52]	@ (800277c <HAL_TIM_MspPostInit+0xac>)
 8002746:	f001 f85f 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800274a:	2303      	movs	r3, #3
 800274c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800275a:	2302      	movs	r3, #2
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	4619      	mov	r1, r3
 8002764:	4806      	ldr	r0, [pc, #24]	@ (8002780 <HAL_TIM_MspPostInit+0xb0>)
 8002766:	f001 f84f 	bl	8003808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800276a:	bf00      	nop
 800276c:	3728      	adds	r7, #40	@ 0x28
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40000400 	.word	0x40000400
 8002778:	40023800 	.word	0x40023800
 800277c:	40020000 	.word	0x40020000
 8002780:	40020400 	.word	0x40020400

08002784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	@ 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a4d      	ldr	r2, [pc, #308]	@ (80028d8 <HAL_UART_MspInit+0x154>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	f040 8093 	bne.w	80028ce <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	4b4b      	ldr	r3, [pc, #300]	@ (80028dc <HAL_UART_MspInit+0x158>)
 80027ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b0:	4a4a      	ldr	r2, [pc, #296]	@ (80028dc <HAL_UART_MspInit+0x158>)
 80027b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b8:	4b48      	ldr	r3, [pc, #288]	@ (80028dc <HAL_UART_MspInit+0x158>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	4b44      	ldr	r3, [pc, #272]	@ (80028dc <HAL_UART_MspInit+0x158>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	4a43      	ldr	r2, [pc, #268]	@ (80028dc <HAL_UART_MspInit+0x158>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d4:	4b41      	ldr	r3, [pc, #260]	@ (80028dc <HAL_UART_MspInit+0x158>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027e0:	230c      	movs	r3, #12
 80027e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ec:	2303      	movs	r3, #3
 80027ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027f0:	2307      	movs	r3, #7
 80027f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4619      	mov	r1, r3
 80027fa:	4839      	ldr	r0, [pc, #228]	@ (80028e0 <HAL_UART_MspInit+0x15c>)
 80027fc:	f001 f804 	bl	8003808 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002800:	4b38      	ldr	r3, [pc, #224]	@ (80028e4 <HAL_UART_MspInit+0x160>)
 8002802:	4a39      	ldr	r2, [pc, #228]	@ (80028e8 <HAL_UART_MspInit+0x164>)
 8002804:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002806:	4b37      	ldr	r3, [pc, #220]	@ (80028e4 <HAL_UART_MspInit+0x160>)
 8002808:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800280c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800280e:	4b35      	ldr	r3, [pc, #212]	@ (80028e4 <HAL_UART_MspInit+0x160>)
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002814:	4b33      	ldr	r3, [pc, #204]	@ (80028e4 <HAL_UART_MspInit+0x160>)
 8002816:	2200      	movs	r2, #0
 8002818:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800281a:	4b32      	ldr	r3, [pc, #200]	@ (80028e4 <HAL_UART_MspInit+0x160>)
 800281c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002820:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002822:	4b30      	ldr	r3, [pc, #192]	@ (80028e4 <HAL_UART_MspInit+0x160>)
 8002824:	2200      	movs	r2, #0
 8002826:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002828:	4b2e      	ldr	r3, [pc, #184]	@ (80028e4 <HAL_UART_MspInit+0x160>)
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800282e:	4b2d      	ldr	r3, [pc, #180]	@ (80028e4 <HAL_UART_MspInit+0x160>)
 8002830:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002834:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002836:	4b2b      	ldr	r3, [pc, #172]	@ (80028e4 <HAL_UART_MspInit+0x160>)
 8002838:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800283c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800283e:	4b29      	ldr	r3, [pc, #164]	@ (80028e4 <HAL_UART_MspInit+0x160>)
 8002840:	2200      	movs	r2, #0
 8002842:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002844:	4827      	ldr	r0, [pc, #156]	@ (80028e4 <HAL_UART_MspInit+0x160>)
 8002846:	f000 fbdd 	bl	8003004 <HAL_DMA_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002850:	f7ff fbc6 	bl	8001fe0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a23      	ldr	r2, [pc, #140]	@ (80028e4 <HAL_UART_MspInit+0x160>)
 8002858:	63da      	str	r2, [r3, #60]	@ 0x3c
 800285a:	4a22      	ldr	r2, [pc, #136]	@ (80028e4 <HAL_UART_MspInit+0x160>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002860:	4b22      	ldr	r3, [pc, #136]	@ (80028ec <HAL_UART_MspInit+0x168>)
 8002862:	4a23      	ldr	r2, [pc, #140]	@ (80028f0 <HAL_UART_MspInit+0x16c>)
 8002864:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002866:	4b21      	ldr	r3, [pc, #132]	@ (80028ec <HAL_UART_MspInit+0x168>)
 8002868:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800286c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800286e:	4b1f      	ldr	r3, [pc, #124]	@ (80028ec <HAL_UART_MspInit+0x168>)
 8002870:	2240      	movs	r2, #64	@ 0x40
 8002872:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002874:	4b1d      	ldr	r3, [pc, #116]	@ (80028ec <HAL_UART_MspInit+0x168>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800287a:	4b1c      	ldr	r3, [pc, #112]	@ (80028ec <HAL_UART_MspInit+0x168>)
 800287c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002880:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002882:	4b1a      	ldr	r3, [pc, #104]	@ (80028ec <HAL_UART_MspInit+0x168>)
 8002884:	2200      	movs	r2, #0
 8002886:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002888:	4b18      	ldr	r3, [pc, #96]	@ (80028ec <HAL_UART_MspInit+0x168>)
 800288a:	2200      	movs	r2, #0
 800288c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800288e:	4b17      	ldr	r3, [pc, #92]	@ (80028ec <HAL_UART_MspInit+0x168>)
 8002890:	2200      	movs	r2, #0
 8002892:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002894:	4b15      	ldr	r3, [pc, #84]	@ (80028ec <HAL_UART_MspInit+0x168>)
 8002896:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800289a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800289c:	4b13      	ldr	r3, [pc, #76]	@ (80028ec <HAL_UART_MspInit+0x168>)
 800289e:	2200      	movs	r2, #0
 80028a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028a2:	4812      	ldr	r0, [pc, #72]	@ (80028ec <HAL_UART_MspInit+0x168>)
 80028a4:	f000 fbae 	bl	8003004 <HAL_DMA_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80028ae:	f7ff fb97 	bl	8001fe0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a0d      	ldr	r2, [pc, #52]	@ (80028ec <HAL_UART_MspInit+0x168>)
 80028b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80028b8:	4a0c      	ldr	r2, [pc, #48]	@ (80028ec <HAL_UART_MspInit+0x168>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2105      	movs	r1, #5
 80028c2:	2026      	movs	r0, #38	@ 0x26
 80028c4:	f000 fb67 	bl	8002f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028c8:	2026      	movs	r0, #38	@ 0x26
 80028ca:	f000 fb80 	bl	8002fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028ce:	bf00      	nop
 80028d0:	3728      	adds	r7, #40	@ 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40004400 	.word	0x40004400
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020000 	.word	0x40020000
 80028e4:	20003fd0 	.word	0x20003fd0
 80028e8:	40026088 	.word	0x40026088
 80028ec:	20004030 	.word	0x20004030
 80028f0:	400260a0 	.word	0x400260a0

080028f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <NMI_Handler+0x4>

080028fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <HardFault_Handler+0x4>

08002904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <MemManage_Handler+0x4>

0800290c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <BusFault_Handler+0x4>

08002914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <UsageFault_Handler+0x4>

0800291c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800292e:	f000 fa37 	bl	8002da0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002932:	f006 fbdd 	bl	80090f0 <xTaskGetSchedulerState>
 8002936:	4603      	mov	r3, r0
 8002938:	2b01      	cmp	r3, #1
 800293a:	d001      	beq.n	8002940 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800293c:	f007 f9d4 	bl	8009ce8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}

08002944 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002948:	2001      	movs	r0, #1
 800294a:	f001 f913 	bl	8003b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}

08002952 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002956:	2002      	movs	r0, #2
 8002958:	f001 f90c 	bl	8003b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}

08002960 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002964:	4802      	ldr	r0, [pc, #8]	@ (8002970 <DMA1_Stream5_IRQHandler+0x10>)
 8002966:	f000 fce5 	bl	8003334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20003fd0 	.word	0x20003fd0

08002974 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002978:	4802      	ldr	r0, [pc, #8]	@ (8002984 <DMA1_Stream6_IRQHandler+0x10>)
 800297a:	f000 fcdb 	bl	8003334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20004030 	.word	0x20004030

08002988 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800298c:	4802      	ldr	r0, [pc, #8]	@ (8002998 <USART2_IRQHandler+0x10>)
 800298e:	f003 fd51 	bl	8006434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20003f88 	.word	0x20003f88

0800299c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return 1;
 80029a0:	2301      	movs	r3, #1
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <_kill>:

int _kill(int pid, int sig)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029b6:	f014 ff27 	bl	8017808 <__errno>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2216      	movs	r2, #22
 80029be:	601a      	str	r2, [r3, #0]
  return -1;
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <_exit>:

void _exit (int status)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff ffe7 	bl	80029ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80029de:	bf00      	nop
 80029e0:	e7fd      	b.n	80029de <_exit+0x12>

080029e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	e00a      	b.n	8002a0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029f4:	f3af 8000 	nop.w
 80029f8:	4601      	mov	r1, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	60ba      	str	r2, [r7, #8]
 8002a00:	b2ca      	uxtb	r2, r1
 8002a02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	3301      	adds	r3, #1
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	dbf0      	blt.n	80029f4 <_read+0x12>
  }

  return len;
 8002a12:	687b      	ldr	r3, [r7, #4]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	e009      	b.n	8002a42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	60ba      	str	r2, [r7, #8]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	dbf1      	blt.n	8002a2e <_write+0x12>
  }
  return len;
 8002a4a:	687b      	ldr	r3, [r7, #4]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <_close>:

int _close(int file)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a7c:	605a      	str	r2, [r3, #4]
  return 0;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <_isatty>:

int _isatty(int file)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a94:	2301      	movs	r3, #1
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ac4:	4a14      	ldr	r2, [pc, #80]	@ (8002b18 <_sbrk+0x5c>)
 8002ac6:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <_sbrk+0x60>)
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ad0:	4b13      	ldr	r3, [pc, #76]	@ (8002b20 <_sbrk+0x64>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d102      	bne.n	8002ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ad8:	4b11      	ldr	r3, [pc, #68]	@ (8002b20 <_sbrk+0x64>)
 8002ada:	4a12      	ldr	r2, [pc, #72]	@ (8002b24 <_sbrk+0x68>)
 8002adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ade:	4b10      	ldr	r3, [pc, #64]	@ (8002b20 <_sbrk+0x64>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d207      	bcs.n	8002afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aec:	f014 fe8c 	bl	8017808 <__errno>
 8002af0:	4603      	mov	r3, r0
 8002af2:	220c      	movs	r2, #12
 8002af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002afa:	e009      	b.n	8002b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002afc:	4b08      	ldr	r3, [pc, #32]	@ (8002b20 <_sbrk+0x64>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b02:	4b07      	ldr	r3, [pc, #28]	@ (8002b20 <_sbrk+0x64>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	4a05      	ldr	r2, [pc, #20]	@ (8002b20 <_sbrk+0x64>)
 8002b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20020000 	.word	0x20020000
 8002b1c:	00000400 	.word	0x00000400
 8002b20:	20004114 	.word	0x20004114
 8002b24:	2000df40 	.word	0x2000df40

08002b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b2c:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <SystemInit+0x20>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b32:	4a05      	ldr	r2, [pc, #20]	@ (8002b48 <SystemInit+0x20>)
 8002b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b5a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002b5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b60:	4904      	ldr	r1, [pc, #16]	@ (8002b74 <cubemx_transport_open+0x28>)
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f003 fbc2 	bl	80062ec <HAL_UART_Receive_DMA>
    return true;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20004118 	.word	0x20004118

08002b78 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b86:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f003 fbd4 	bl	8006336 <HAL_UART_DMAStop>
    return true;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002bac:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d11c      	bne.n	8002bf4 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	6978      	ldr	r0, [r7, #20]
 8002bc4:	f003 fb22 	bl	800620c <HAL_UART_Transmit_DMA>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002bcc:	e002      	b.n	8002bd4 <cubemx_transport_write+0x3c>
            osDelay(1);
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f004 fe3e 	bl	8007850 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002bd4:	7cfb      	ldrb	r3, [r7, #19]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d105      	bne.n	8002be6 <cubemx_transport_write+0x4e>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d1f3      	bne.n	8002bce <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002be6:	7cfb      	ldrb	r3, [r7, #19]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <cubemx_transport_write+0x58>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	e002      	b.n	8002bf6 <cubemx_transport_write+0x5e>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e000      	b.n	8002bf6 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002bf4:	2300      	movs	r3, #0
    }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002c14:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c1a:	b672      	cpsid	i
}
 8002c1c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c9c <cubemx_transport_read+0x9c>)
 8002c2c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c2e:	b662      	cpsie	i
}
 8002c30:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3301      	adds	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f004 fe09 	bl	8007850 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002c3e:	4b18      	ldr	r3, [pc, #96]	@ (8002ca0 <cubemx_transport_read+0xa0>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4b16      	ldr	r3, [pc, #88]	@ (8002c9c <cubemx_transport_read+0x9c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d103      	bne.n	8002c52 <cubemx_transport_read+0x52>
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	dbe3      	blt.n	8002c1a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002c56:	e011      	b.n	8002c7c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002c58:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <cubemx_transport_read+0xa0>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	440b      	add	r3, r1
 8002c62:	4910      	ldr	r1, [pc, #64]	@ (8002ca4 <cubemx_transport_read+0xa4>)
 8002c64:	5c8a      	ldrb	r2, [r1, r2]
 8002c66:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002c68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca0 <cubemx_transport_read+0xa0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c72:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca0 <cubemx_transport_read+0xa0>)
 8002c74:	6013      	str	r3, [r2, #0]
        wrote++;
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002c7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <cubemx_transport_read+0xa0>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <cubemx_transport_read+0x9c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d003      	beq.n	8002c90 <cubemx_transport_read+0x90>
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d3e3      	bcc.n	8002c58 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002c90:	69bb      	ldr	r3, [r7, #24]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	2000491c 	.word	0x2000491c
 8002ca0:	20004918 	.word	0x20004918
 8002ca4:	20004118 	.word	0x20004118

08002ca8 <Reset_Handler>:
 8002ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ce0 <LoopFillZerobss+0xe>
 8002cac:	f7ff ff3c 	bl	8002b28 <SystemInit>
 8002cb0:	480c      	ldr	r0, [pc, #48]	@ (8002ce4 <LoopFillZerobss+0x12>)
 8002cb2:	490d      	ldr	r1, [pc, #52]	@ (8002ce8 <LoopFillZerobss+0x16>)
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cec <LoopFillZerobss+0x1a>)
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e002      	b.n	8002cc0 <LoopCopyDataInit>

08002cba <CopyDataInit>:
 8002cba:	58d4      	ldr	r4, [r2, r3]
 8002cbc:	50c4      	str	r4, [r0, r3]
 8002cbe:	3304      	adds	r3, #4

08002cc0 <LoopCopyDataInit>:
 8002cc0:	18c4      	adds	r4, r0, r3
 8002cc2:	428c      	cmp	r4, r1
 8002cc4:	d3f9      	bcc.n	8002cba <CopyDataInit>
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf0 <LoopFillZerobss+0x1e>)
 8002cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8002cf4 <LoopFillZerobss+0x22>)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e001      	b.n	8002cd2 <LoopFillZerobss>

08002cce <FillZerobss>:
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	3204      	adds	r2, #4

08002cd2 <LoopFillZerobss>:
 8002cd2:	42a2      	cmp	r2, r4
 8002cd4:	d3fb      	bcc.n	8002cce <FillZerobss>
 8002cd6:	f014 fd9d 	bl	8017814 <__libc_init_array>
 8002cda:	f7fe fdeb 	bl	80018b4 <main>
 8002cde:	4770      	bx	lr
 8002ce0:	20020000 	.word	0x20020000
 8002ce4:	20000000 	.word	0x20000000
 8002ce8:	200002b8 	.word	0x200002b8
 8002cec:	080195e4 	.word	0x080195e4
 8002cf0:	200002b8 	.word	0x200002b8
 8002cf4:	2000df3c 	.word	0x2000df3c

08002cf8 <ADC_IRQHandler>:
 8002cf8:	e7fe      	b.n	8002cf8 <ADC_IRQHandler>
	...

08002cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d00:	4b0e      	ldr	r3, [pc, #56]	@ (8002d3c <HAL_Init+0x40>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0d      	ldr	r2, [pc, #52]	@ (8002d3c <HAL_Init+0x40>)
 8002d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_Init+0x40>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0a      	ldr	r2, [pc, #40]	@ (8002d3c <HAL_Init+0x40>)
 8002d12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d18:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <HAL_Init+0x40>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a07      	ldr	r2, [pc, #28]	@ (8002d3c <HAL_Init+0x40>)
 8002d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d24:	2003      	movs	r0, #3
 8002d26:	f000 f92b 	bl	8002f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d2a:	200f      	movs	r0, #15
 8002d2c:	f000 f808 	bl	8002d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d30:	f7ff fc28 	bl	8002584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023c00 	.word	0x40023c00

08002d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d48:	4b12      	ldr	r3, [pc, #72]	@ (8002d94 <HAL_InitTick+0x54>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <HAL_InitTick+0x58>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f943 	bl	8002fea <HAL_SYSTICK_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00e      	b.n	8002d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b0f      	cmp	r3, #15
 8002d72:	d80a      	bhi.n	8002d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d74:	2200      	movs	r2, #0
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d7c:	f000 f90b 	bl	8002f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d80:	4a06      	ldr	r2, [pc, #24]	@ (8002d9c <HAL_InitTick+0x5c>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e000      	b.n	8002d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000004 	.word	0x20000004
 8002d98:	2000000c 	.word	0x2000000c
 8002d9c:	20000008 	.word	0x20000008

08002da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da4:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <HAL_IncTick+0x20>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <HAL_IncTick+0x24>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	4a04      	ldr	r2, [pc, #16]	@ (8002dc4 <HAL_IncTick+0x24>)
 8002db2:	6013      	str	r3, [r2, #0]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	2000000c 	.word	0x2000000c
 8002dc4:	20004920 	.word	0x20004920

08002dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return uwTick;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	@ (8002ddc <HAL_GetTick+0x14>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20004920 	.word	0x20004920

08002de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e24 <__NVIC_SetPriorityGrouping+0x44>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e12:	4a04      	ldr	r2, [pc, #16]	@ (8002e24 <__NVIC_SetPriorityGrouping+0x44>)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	60d3      	str	r3, [r2, #12]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e2c:	4b04      	ldr	r3, [pc, #16]	@ (8002e40 <__NVIC_GetPriorityGrouping+0x18>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	0a1b      	lsrs	r3, r3, #8
 8002e32:	f003 0307 	and.w	r3, r3, #7
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	db0b      	blt.n	8002e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	f003 021f 	and.w	r2, r3, #31
 8002e5c:	4907      	ldr	r1, [pc, #28]	@ (8002e7c <__NVIC_EnableIRQ+0x38>)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	2001      	movs	r0, #1
 8002e66:	fa00 f202 	lsl.w	r2, r0, r2
 8002e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000e100 	.word	0xe000e100

08002e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	6039      	str	r1, [r7, #0]
 8002e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	db0a      	blt.n	8002eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	490c      	ldr	r1, [pc, #48]	@ (8002ecc <__NVIC_SetPriority+0x4c>)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	0112      	lsls	r2, r2, #4
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea8:	e00a      	b.n	8002ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4908      	ldr	r1, [pc, #32]	@ (8002ed0 <__NVIC_SetPriority+0x50>)
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	3b04      	subs	r3, #4
 8002eb8:	0112      	lsls	r2, r2, #4
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	761a      	strb	r2, [r3, #24]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000e100 	.word	0xe000e100
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b089      	sub	sp, #36	@ 0x24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f1c3 0307 	rsb	r3, r3, #7
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	bf28      	it	cs
 8002ef2:	2304      	movcs	r3, #4
 8002ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d902      	bls.n	8002f04 <NVIC_EncodePriority+0x30>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3b03      	subs	r3, #3
 8002f02:	e000      	b.n	8002f06 <NVIC_EncodePriority+0x32>
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43da      	mvns	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	401a      	ands	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	fa01 f303 	lsl.w	r3, r1, r3
 8002f26:	43d9      	mvns	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	4313      	orrs	r3, r2
         );
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3724      	adds	r7, #36	@ 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f4c:	d301      	bcc.n	8002f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e00f      	b.n	8002f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f52:	4a0a      	ldr	r2, [pc, #40]	@ (8002f7c <SysTick_Config+0x40>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5a:	210f      	movs	r1, #15
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f60:	f7ff ff8e 	bl	8002e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f64:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <SysTick_Config+0x40>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6a:	4b04      	ldr	r3, [pc, #16]	@ (8002f7c <SysTick_Config+0x40>)
 8002f6c:	2207      	movs	r2, #7
 8002f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	e000e010 	.word	0xe000e010

08002f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ff29 	bl	8002de0 <__NVIC_SetPriorityGrouping>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa8:	f7ff ff3e 	bl	8002e28 <__NVIC_GetPriorityGrouping>
 8002fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	6978      	ldr	r0, [r7, #20]
 8002fb4:	f7ff ff8e 	bl	8002ed4 <NVIC_EncodePriority>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff5d 	bl	8002e80 <__NVIC_SetPriority>
}
 8002fc6:	bf00      	nop
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff31 	bl	8002e44 <__NVIC_EnableIRQ>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff ffa2 	bl	8002f3c <SysTick_Config>
 8002ff8:	4603      	mov	r3, r0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003010:	f7ff feda 	bl	8002dc8 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e099      	b.n	8003154 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003040:	e00f      	b.n	8003062 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003042:	f7ff fec1 	bl	8002dc8 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b05      	cmp	r3, #5
 800304e:	d908      	bls.n	8003062 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2203      	movs	r2, #3
 800305a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e078      	b.n	8003154 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e8      	bne.n	8003042 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4b38      	ldr	r3, [pc, #224]	@ (800315c <HAL_DMA_Init+0x158>)
 800307c:	4013      	ands	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800308e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d107      	bne.n	80030cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c4:	4313      	orrs	r3, r2
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f023 0307 	bic.w	r3, r3, #7
 80030e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d117      	bne.n	8003126 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00e      	beq.n	8003126 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fb01 	bl	8003710 <DMA_CheckFifoParam>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2240      	movs	r2, #64	@ 0x40
 8003118:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003122:	2301      	movs	r3, #1
 8003124:	e016      	b.n	8003154 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fab8 	bl	80036a4 <DMA_CalcBaseAndBitshift>
 8003134:	4603      	mov	r3, r0
 8003136:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313c:	223f      	movs	r2, #63	@ 0x3f
 800313e:	409a      	lsls	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	f010803f 	.word	0xf010803f

08003160 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003176:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_DMA_Start_IT+0x26>
 8003182:	2302      	movs	r3, #2
 8003184:	e040      	b.n	8003208 <HAL_DMA_Start_IT+0xa8>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d12f      	bne.n	80031fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fa4a 	bl	8003648 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b8:	223f      	movs	r2, #63	@ 0x3f
 80031ba:	409a      	lsls	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0216 	orr.w	r2, r2, #22
 80031ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d007      	beq.n	80031e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0208 	orr.w	r2, r2, #8
 80031e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e005      	b.n	8003206 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003202:	2302      	movs	r3, #2
 8003204:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003206:	7dfb      	ldrb	r3, [r7, #23]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800321e:	f7ff fdd3 	bl	8002dc8 <HAL_GetTick>
 8003222:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d008      	beq.n	8003242 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2280      	movs	r2, #128	@ 0x80
 8003234:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e052      	b.n	80032e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0216 	bic.w	r2, r2, #22
 8003250:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003260:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_DMA_Abort+0x62>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0208 	bic.w	r2, r2, #8
 8003280:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003292:	e013      	b.n	80032bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003294:	f7ff fd98 	bl	8002dc8 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b05      	cmp	r3, #5
 80032a0:	d90c      	bls.n	80032bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2203      	movs	r2, #3
 80032ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e015      	b.n	80032e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e4      	bne.n	8003294 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ce:	223f      	movs	r2, #63	@ 0x3f
 80032d0:	409a      	lsls	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d004      	beq.n	800330e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2280      	movs	r2, #128	@ 0x80
 8003308:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00c      	b.n	8003328 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2205      	movs	r2, #5
 8003312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003340:	4b8e      	ldr	r3, [pc, #568]	@ (800357c <HAL_DMA_IRQHandler+0x248>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a8e      	ldr	r2, [pc, #568]	@ (8003580 <HAL_DMA_IRQHandler+0x24c>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0a9b      	lsrs	r3, r3, #10
 800334c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335e:	2208      	movs	r2, #8
 8003360:	409a      	lsls	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01a      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d013      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0204 	bic.w	r2, r2, #4
 8003386:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338c:	2208      	movs	r2, #8
 800338e:	409a      	lsls	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a4:	2201      	movs	r2, #1
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d012      	beq.n	80033d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c2:	2201      	movs	r2, #1
 80033c4:	409a      	lsls	r2, r3
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ce:	f043 0202 	orr.w	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033da:	2204      	movs	r2, #4
 80033dc:	409a      	lsls	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d012      	beq.n	800340c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00b      	beq.n	800340c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f8:	2204      	movs	r2, #4
 80033fa:	409a      	lsls	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003410:	2210      	movs	r2, #16
 8003412:	409a      	lsls	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d043      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d03c      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342e:	2210      	movs	r2, #16
 8003430:	409a      	lsls	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d018      	beq.n	8003476 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d108      	bne.n	8003464 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d024      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
 8003462:	e01f      	b.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01b      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	e016      	b.n	80034a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0208 	bic.w	r2, r2, #8
 8003492:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a8:	2220      	movs	r2, #32
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 808f 	beq.w	80035d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8087 	beq.w	80035d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ca:	2220      	movs	r2, #32
 80034cc:	409a      	lsls	r2, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d136      	bne.n	800354c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0216 	bic.w	r2, r2, #22
 80034ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <HAL_DMA_IRQHandler+0x1da>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0208 	bic.w	r2, r2, #8
 800351c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003522:	223f      	movs	r2, #63	@ 0x3f
 8003524:	409a      	lsls	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353e:	2b00      	cmp	r3, #0
 8003540:	d07e      	beq.n	8003640 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
        }
        return;
 800354a:	e079      	b.n	8003640 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01d      	beq.n	8003596 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10d      	bne.n	8003584 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356c:	2b00      	cmp	r3, #0
 800356e:	d031      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
 8003578:	e02c      	b.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
 800357a:	bf00      	nop
 800357c:	20000004 	.word	0x20000004
 8003580:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d023      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4798      	blx	r3
 8003594:	e01e      	b.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10f      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0210 	bic.w	r2, r2, #16
 80035b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d032      	beq.n	8003642 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d022      	beq.n	800362e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2205      	movs	r2, #5
 80035ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	3301      	adds	r3, #1
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	429a      	cmp	r2, r3
 800360a:	d307      	bcc.n	800361c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f2      	bne.n	8003600 <HAL_DMA_IRQHandler+0x2cc>
 800361a:	e000      	b.n	800361e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800361c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
 800363e:	e000      	b.n	8003642 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003640:	bf00      	nop
    }
  }
}
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003664:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b40      	cmp	r3, #64	@ 0x40
 8003674:	d108      	bne.n	8003688 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003686:	e007      	b.n	8003698 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	60da      	str	r2, [r3, #12]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	3b10      	subs	r3, #16
 80036b4:	4a14      	ldr	r2, [pc, #80]	@ (8003708 <DMA_CalcBaseAndBitshift+0x64>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036be:	4a13      	ldr	r2, [pc, #76]	@ (800370c <DMA_CalcBaseAndBitshift+0x68>)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d909      	bls.n	80036e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	1d1a      	adds	r2, r3, #4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80036e4:	e007      	b.n	80036f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036ee:	f023 0303 	bic.w	r3, r3, #3
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	aaaaaaab 	.word	0xaaaaaaab
 800370c:	0801872c 	.word	0x0801872c

08003710 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003720:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d11f      	bne.n	800376a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d856      	bhi.n	80037de <DMA_CheckFifoParam+0xce>
 8003730:	a201      	add	r2, pc, #4	@ (adr r2, 8003738 <DMA_CheckFifoParam+0x28>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	08003749 	.word	0x08003749
 800373c:	0800375b 	.word	0x0800375b
 8003740:	08003749 	.word	0x08003749
 8003744:	080037df 	.word	0x080037df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d046      	beq.n	80037e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003758:	e043      	b.n	80037e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003762:	d140      	bne.n	80037e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003768:	e03d      	b.n	80037e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003772:	d121      	bne.n	80037b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d837      	bhi.n	80037ea <DMA_CheckFifoParam+0xda>
 800377a:	a201      	add	r2, pc, #4	@ (adr r2, 8003780 <DMA_CheckFifoParam+0x70>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	08003791 	.word	0x08003791
 8003784:	08003797 	.word	0x08003797
 8003788:	08003791 	.word	0x08003791
 800378c:	080037a9 	.word	0x080037a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      break;
 8003794:	e030      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d025      	beq.n	80037ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a6:	e022      	b.n	80037ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037b0:	d11f      	bne.n	80037f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037b6:	e01c      	b.n	80037f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d903      	bls.n	80037c6 <DMA_CheckFifoParam+0xb6>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d003      	beq.n	80037cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037c4:	e018      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
      break;
 80037ca:	e015      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00e      	beq.n	80037f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
      break;
 80037dc:	e00b      	b.n	80037f6 <DMA_CheckFifoParam+0xe6>
      break;
 80037de:	bf00      	nop
 80037e0:	e00a      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037e2:	bf00      	nop
 80037e4:	e008      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
 80037e8:	e006      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ea:	bf00      	nop
 80037ec:	e004      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ee:	bf00      	nop
 80037f0:	e002      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80037f2:	bf00      	nop
 80037f4:	e000      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037f6:	bf00      	nop
    }
  } 
  
  return status; 
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop

08003808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	@ 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	e159      	b.n	8003ad8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003824:	2201      	movs	r2, #1
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	429a      	cmp	r2, r3
 800383e:	f040 8148 	bne.w	8003ad2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d005      	beq.n	800385a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003856:	2b02      	cmp	r3, #2
 8003858:	d130      	bne.n	80038bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	2203      	movs	r2, #3
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003890:	2201      	movs	r2, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 0201 	and.w	r2, r3, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d017      	beq.n	80038f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	2203      	movs	r2, #3
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d123      	bne.n	800394c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	08da      	lsrs	r2, r3, #3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3208      	adds	r2, #8
 800390c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	220f      	movs	r2, #15
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	08da      	lsrs	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3208      	adds	r2, #8
 8003946:	69b9      	ldr	r1, [r7, #24]
 8003948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2203      	movs	r2, #3
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0203 	and.w	r2, r3, #3
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80a2 	beq.w	8003ad2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	4b57      	ldr	r3, [pc, #348]	@ (8003af0 <HAL_GPIO_Init+0x2e8>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	4a56      	ldr	r2, [pc, #344]	@ (8003af0 <HAL_GPIO_Init+0x2e8>)
 8003998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800399c:	6453      	str	r3, [r2, #68]	@ 0x44
 800399e:	4b54      	ldr	r3, [pc, #336]	@ (8003af0 <HAL_GPIO_Init+0x2e8>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039aa:	4a52      	ldr	r2, [pc, #328]	@ (8003af4 <HAL_GPIO_Init+0x2ec>)
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	3302      	adds	r3, #2
 80039b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	220f      	movs	r2, #15
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a49      	ldr	r2, [pc, #292]	@ (8003af8 <HAL_GPIO_Init+0x2f0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d019      	beq.n	8003a0a <HAL_GPIO_Init+0x202>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a48      	ldr	r2, [pc, #288]	@ (8003afc <HAL_GPIO_Init+0x2f4>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d013      	beq.n	8003a06 <HAL_GPIO_Init+0x1fe>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a47      	ldr	r2, [pc, #284]	@ (8003b00 <HAL_GPIO_Init+0x2f8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00d      	beq.n	8003a02 <HAL_GPIO_Init+0x1fa>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a46      	ldr	r2, [pc, #280]	@ (8003b04 <HAL_GPIO_Init+0x2fc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d007      	beq.n	80039fe <HAL_GPIO_Init+0x1f6>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a45      	ldr	r2, [pc, #276]	@ (8003b08 <HAL_GPIO_Init+0x300>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d101      	bne.n	80039fa <HAL_GPIO_Init+0x1f2>
 80039f6:	2304      	movs	r3, #4
 80039f8:	e008      	b.n	8003a0c <HAL_GPIO_Init+0x204>
 80039fa:	2307      	movs	r3, #7
 80039fc:	e006      	b.n	8003a0c <HAL_GPIO_Init+0x204>
 80039fe:	2303      	movs	r3, #3
 8003a00:	e004      	b.n	8003a0c <HAL_GPIO_Init+0x204>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e002      	b.n	8003a0c <HAL_GPIO_Init+0x204>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_GPIO_Init+0x204>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	f002 0203 	and.w	r2, r2, #3
 8003a12:	0092      	lsls	r2, r2, #2
 8003a14:	4093      	lsls	r3, r2
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a1c:	4935      	ldr	r1, [pc, #212]	@ (8003af4 <HAL_GPIO_Init+0x2ec>)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	089b      	lsrs	r3, r3, #2
 8003a22:	3302      	adds	r3, #2
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a2a:	4b38      	ldr	r3, [pc, #224]	@ (8003b0c <HAL_GPIO_Init+0x304>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b0c <HAL_GPIO_Init+0x304>)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a54:	4b2d      	ldr	r3, [pc, #180]	@ (8003b0c <HAL_GPIO_Init+0x304>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a78:	4a24      	ldr	r2, [pc, #144]	@ (8003b0c <HAL_GPIO_Init+0x304>)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a7e:	4b23      	ldr	r3, [pc, #140]	@ (8003b0c <HAL_GPIO_Init+0x304>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8003b0c <HAL_GPIO_Init+0x304>)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aa8:	4b18      	ldr	r3, [pc, #96]	@ (8003b0c <HAL_GPIO_Init+0x304>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003acc:	4a0f      	ldr	r2, [pc, #60]	@ (8003b0c <HAL_GPIO_Init+0x304>)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b0f      	cmp	r3, #15
 8003adc:	f67f aea2 	bls.w	8003824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	3724      	adds	r7, #36	@ 0x24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800
 8003af4:	40013800 	.word	0x40013800
 8003af8:	40020000 	.word	0x40020000
 8003afc:	40020400 	.word	0x40020400
 8003b00:	40020800 	.word	0x40020800
 8003b04:	40020c00 	.word	0x40020c00
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40013c00 	.word	0x40013c00

08003b10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	887b      	ldrh	r3, [r7, #2]
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
 8003b2c:	e001      	b.n	8003b32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	807b      	strh	r3, [r7, #2]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b50:	787b      	ldrb	r3, [r7, #1]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b56:	887a      	ldrh	r2, [r7, #2]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b5c:	e003      	b.n	8003b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b5e:	887b      	ldrh	r3, [r7, #2]
 8003b60:	041a      	lsls	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	619a      	str	r2, [r3, #24]
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	4013      	ands	r3, r2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d006      	beq.n	8003b98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b8a:	4a05      	ldr	r2, [pc, #20]	@ (8003ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fd fe42 	bl	800181c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40013c00 	.word	0x40013c00

08003ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e12b      	b.n	8003e0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fe fd06 	bl	80025dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2224      	movs	r2, #36	@ 0x24
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c08:	f001 fc60 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 8003c0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4a81      	ldr	r2, [pc, #516]	@ (8003e18 <HAL_I2C_Init+0x274>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d807      	bhi.n	8003c28 <HAL_I2C_Init+0x84>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a80      	ldr	r2, [pc, #512]	@ (8003e1c <HAL_I2C_Init+0x278>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	bf94      	ite	ls
 8003c20:	2301      	movls	r3, #1
 8003c22:	2300      	movhi	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e006      	b.n	8003c36 <HAL_I2C_Init+0x92>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e20 <HAL_I2C_Init+0x27c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	bf94      	ite	ls
 8003c30:	2301      	movls	r3, #1
 8003c32:	2300      	movhi	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e0e7      	b.n	8003e0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4a78      	ldr	r2, [pc, #480]	@ (8003e24 <HAL_I2C_Init+0x280>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	0c9b      	lsrs	r3, r3, #18
 8003c48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a6a      	ldr	r2, [pc, #424]	@ (8003e18 <HAL_I2C_Init+0x274>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d802      	bhi.n	8003c78 <HAL_I2C_Init+0xd4>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	3301      	adds	r3, #1
 8003c76:	e009      	b.n	8003c8c <HAL_I2C_Init+0xe8>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	4a69      	ldr	r2, [pc, #420]	@ (8003e28 <HAL_I2C_Init+0x284>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	099b      	lsrs	r3, r3, #6
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	495c      	ldr	r1, [pc, #368]	@ (8003e18 <HAL_I2C_Init+0x274>)
 8003ca8:	428b      	cmp	r3, r1
 8003caa:	d819      	bhi.n	8003ce0 <HAL_I2C_Init+0x13c>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	1e59      	subs	r1, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cba:	1c59      	adds	r1, r3, #1
 8003cbc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cc0:	400b      	ands	r3, r1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_I2C_Init+0x138>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1e59      	subs	r1, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cda:	e051      	b.n	8003d80 <HAL_I2C_Init+0x1dc>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	e04f      	b.n	8003d80 <HAL_I2C_Init+0x1dc>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d111      	bne.n	8003d0c <HAL_I2C_Init+0x168>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1e58      	subs	r0, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6859      	ldr	r1, [r3, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	440b      	add	r3, r1
 8003cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e012      	b.n	8003d32 <HAL_I2C_Init+0x18e>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1e58      	subs	r0, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	0099      	lsls	r1, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d22:	3301      	adds	r3, #1
 8003d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf0c      	ite	eq
 8003d2c:	2301      	moveq	r3, #1
 8003d2e:	2300      	movne	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_Init+0x196>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e022      	b.n	8003d80 <HAL_I2C_Init+0x1dc>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10e      	bne.n	8003d60 <HAL_I2C_Init+0x1bc>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1e58      	subs	r0, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6859      	ldr	r1, [r3, #4]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	440b      	add	r3, r1
 8003d50:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d54:	3301      	adds	r3, #1
 8003d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d5e:	e00f      	b.n	8003d80 <HAL_I2C_Init+0x1dc>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1e58      	subs	r0, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	0099      	lsls	r1, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d76:	3301      	adds	r3, #1
 8003d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	6809      	ldr	r1, [r1, #0]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69da      	ldr	r2, [r3, #28]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003dae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6911      	ldr	r1, [r2, #16]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68d2      	ldr	r2, [r2, #12]
 8003dba:	4311      	orrs	r1, r2
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	000186a0 	.word	0x000186a0
 8003e1c:	001e847f 	.word	0x001e847f
 8003e20:	003d08ff 	.word	0x003d08ff
 8003e24:	431bde83 	.word	0x431bde83
 8003e28:	10624dd3 	.word	0x10624dd3

08003e2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	4608      	mov	r0, r1
 8003e36:	4611      	mov	r1, r2
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	817b      	strh	r3, [r7, #10]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	813b      	strh	r3, [r7, #8]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e46:	f7fe ffbf 	bl	8002dc8 <HAL_GetTick>
 8003e4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	f040 80d9 	bne.w	800400c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	2319      	movs	r3, #25
 8003e60:	2201      	movs	r2, #1
 8003e62:	496d      	ldr	r1, [pc, #436]	@ (8004018 <HAL_I2C_Mem_Write+0x1ec>)
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fc8b 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e70:	2302      	movs	r3, #2
 8003e72:	e0cc      	b.n	800400e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_I2C_Mem_Write+0x56>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e0c5      	b.n	800400e <HAL_I2C_Mem_Write+0x1e2>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d007      	beq.n	8003ea8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2221      	movs	r2, #33	@ 0x21
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2240      	movs	r2, #64	@ 0x40
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a3a      	ldr	r2, [r7, #32]
 8003ed2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4a4d      	ldr	r2, [pc, #308]	@ (800401c <HAL_I2C_Mem_Write+0x1f0>)
 8003ee8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eea:	88f8      	ldrh	r0, [r7, #6]
 8003eec:	893a      	ldrh	r2, [r7, #8]
 8003eee:	8979      	ldrh	r1, [r7, #10]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	4603      	mov	r3, r0
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 fac2 	bl	8004484 <I2C_RequestMemoryWrite>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d052      	beq.n	8003fac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e081      	b.n	800400e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fd50 	bl	80049b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00d      	beq.n	8003f36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d107      	bne.n	8003f32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e06b      	b.n	800400e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	781a      	ldrb	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d11b      	bne.n	8003fac <HAL_I2C_Mem_Write+0x180>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d017      	beq.n	8003fac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	781a      	ldrb	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1aa      	bne.n	8003f0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fd43 	bl	8004a44 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00d      	beq.n	8003fe0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d107      	bne.n	8003fdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e016      	b.n	800400e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e000      	b.n	800400e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800400c:	2302      	movs	r3, #2
  }
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	00100002 	.word	0x00100002
 800401c:	ffff0000 	.word	0xffff0000

08004020 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08c      	sub	sp, #48	@ 0x30
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	4608      	mov	r0, r1
 800402a:	4611      	mov	r1, r2
 800402c:	461a      	mov	r2, r3
 800402e:	4603      	mov	r3, r0
 8004030:	817b      	strh	r3, [r7, #10]
 8004032:	460b      	mov	r3, r1
 8004034:	813b      	strh	r3, [r7, #8]
 8004036:	4613      	mov	r3, r2
 8004038:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800403a:	f7fe fec5 	bl	8002dc8 <HAL_GetTick>
 800403e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b20      	cmp	r3, #32
 800404a:	f040 8214 	bne.w	8004476 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	2319      	movs	r3, #25
 8004054:	2201      	movs	r2, #1
 8004056:	497b      	ldr	r1, [pc, #492]	@ (8004244 <HAL_I2C_Mem_Read+0x224>)
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 fb91 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004064:	2302      	movs	r3, #2
 8004066:	e207      	b.n	8004478 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_I2C_Mem_Read+0x56>
 8004072:	2302      	movs	r3, #2
 8004074:	e200      	b.n	8004478 <HAL_I2C_Mem_Read+0x458>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d007      	beq.n	800409c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2222      	movs	r2, #34	@ 0x22
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2240      	movs	r2, #64	@ 0x40
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80040cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4a5b      	ldr	r2, [pc, #364]	@ (8004248 <HAL_I2C_Mem_Read+0x228>)
 80040dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040de:	88f8      	ldrh	r0, [r7, #6]
 80040e0:	893a      	ldrh	r2, [r7, #8]
 80040e2:	8979      	ldrh	r1, [r7, #10]
 80040e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	4603      	mov	r3, r0
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fa5e 	bl	80045b0 <I2C_RequestMemoryRead>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e1bc      	b.n	8004478 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004102:	2b00      	cmp	r3, #0
 8004104:	d113      	bne.n	800412e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004106:	2300      	movs	r3, #0
 8004108:	623b      	str	r3, [r7, #32]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	623b      	str	r3, [r7, #32]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	623b      	str	r3, [r7, #32]
 800411a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	e190      	b.n	8004450 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004132:	2b01      	cmp	r3, #1
 8004134:	d11b      	bne.n	800416e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004144:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e170      	b.n	8004450 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004172:	2b02      	cmp	r3, #2
 8004174:	d11b      	bne.n	80041ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004184:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004194:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004196:	2300      	movs	r3, #0
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	e150      	b.n	8004450 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041c4:	e144      	b.n	8004450 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	f200 80f1 	bhi.w	80043b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d123      	bne.n	8004220 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fc79 	bl	8004ad4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e145      	b.n	8004478 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800421e:	e117      	b.n	8004450 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004224:	2b02      	cmp	r3, #2
 8004226:	d14e      	bne.n	80042c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422e:	2200      	movs	r2, #0
 8004230:	4906      	ldr	r1, [pc, #24]	@ (800424c <HAL_I2C_Mem_Read+0x22c>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 faa4 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e11a      	b.n	8004478 <HAL_I2C_Mem_Read+0x458>
 8004242:	bf00      	nop
 8004244:	00100002 	.word	0x00100002
 8004248:	ffff0000 	.word	0xffff0000
 800424c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800425e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042c4:	e0c4      	b.n	8004450 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042cc:	2200      	movs	r2, #0
 80042ce:	496c      	ldr	r1, [pc, #432]	@ (8004480 <HAL_I2C_Mem_Read+0x460>)
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fa55 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0cb      	b.n	8004478 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004328:	2200      	movs	r2, #0
 800432a:	4955      	ldr	r1, [pc, #340]	@ (8004480 <HAL_I2C_Mem_Read+0x460>)
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 fa27 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e09d      	b.n	8004478 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800434a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043b0:	e04e      	b.n	8004450 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fb8c 	bl	8004ad4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e058      	b.n	8004478 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b04      	cmp	r3, #4
 8004404:	d124      	bne.n	8004450 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440a:	2b03      	cmp	r3, #3
 800440c:	d107      	bne.n	800441e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800441c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004454:	2b00      	cmp	r3, #0
 8004456:	f47f aeb6 	bne.w	80041c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e000      	b.n	8004478 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004476:	2302      	movs	r3, #2
  }
}
 8004478:	4618      	mov	r0, r3
 800447a:	3728      	adds	r7, #40	@ 0x28
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	00010004 	.word	0x00010004

08004484 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	4608      	mov	r0, r1
 800448e:	4611      	mov	r1, r2
 8004490:	461a      	mov	r2, r3
 8004492:	4603      	mov	r3, r0
 8004494:	817b      	strh	r3, [r7, #10]
 8004496:	460b      	mov	r3, r1
 8004498:	813b      	strh	r3, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 f960 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00d      	beq.n	80044e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d4:	d103      	bne.n	80044de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e05f      	b.n	80045a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044e2:	897b      	ldrh	r3, [r7, #10]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	6a3a      	ldr	r2, [r7, #32]
 80044f6:	492d      	ldr	r1, [pc, #180]	@ (80045ac <I2C_RequestMemoryWrite+0x128>)
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f9bb 	bl	8004874 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e04c      	b.n	80045a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800451e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004520:	6a39      	ldr	r1, [r7, #32]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fa46 	bl	80049b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	2b04      	cmp	r3, #4
 8004534:	d107      	bne.n	8004546 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004544:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e02b      	b.n	80045a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d105      	bne.n	800455c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004550:	893b      	ldrh	r3, [r7, #8]
 8004552:	b2da      	uxtb	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	611a      	str	r2, [r3, #16]
 800455a:	e021      	b.n	80045a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800455c:	893b      	ldrh	r3, [r7, #8]
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	b29b      	uxth	r3, r3
 8004562:	b2da      	uxtb	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800456a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800456c:	6a39      	ldr	r1, [r7, #32]
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 fa20 	bl	80049b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00d      	beq.n	8004596 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	2b04      	cmp	r3, #4
 8004580:	d107      	bne.n	8004592 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004590:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e005      	b.n	80045a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004596:	893b      	ldrh	r3, [r7, #8]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	00010002 	.word	0x00010002

080045b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	4608      	mov	r0, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	461a      	mov	r2, r3
 80045be:	4603      	mov	r3, r0
 80045c0:	817b      	strh	r3, [r7, #10]
 80045c2:	460b      	mov	r3, r1
 80045c4:	813b      	strh	r3, [r7, #8]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f8c2 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00d      	beq.n	800461e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004610:	d103      	bne.n	800461a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004618:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e0aa      	b.n	8004774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800461e:	897b      	ldrh	r3, [r7, #10]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800462c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	6a3a      	ldr	r2, [r7, #32]
 8004632:	4952      	ldr	r1, [pc, #328]	@ (800477c <I2C_RequestMemoryRead+0x1cc>)
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f91d 	bl	8004874 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e097      	b.n	8004774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800465a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800465c:	6a39      	ldr	r1, [r7, #32]
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f9a8 	bl	80049b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00d      	beq.n	8004686 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	2b04      	cmp	r3, #4
 8004670:	d107      	bne.n	8004682 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004680:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e076      	b.n	8004774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d105      	bne.n	8004698 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800468c:	893b      	ldrh	r3, [r7, #8]
 800468e:	b2da      	uxtb	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	611a      	str	r2, [r3, #16]
 8004696:	e021      	b.n	80046dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004698:	893b      	ldrh	r3, [r7, #8]
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	b29b      	uxth	r3, r3
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a8:	6a39      	ldr	r1, [r7, #32]
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f982 	bl	80049b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00d      	beq.n	80046d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d107      	bne.n	80046ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e050      	b.n	8004774 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046d2:	893b      	ldrh	r3, [r7, #8]
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046de:	6a39      	ldr	r1, [r7, #32]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f967 	bl	80049b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00d      	beq.n	8004708 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d107      	bne.n	8004704 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004702:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e035      	b.n	8004774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004716:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	2200      	movs	r2, #0
 8004720:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f82b 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00d      	beq.n	800474c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800473e:	d103      	bne.n	8004748 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004746:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e013      	b.n	8004774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800474c:	897b      	ldrh	r3, [r7, #10]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	b2da      	uxtb	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	6a3a      	ldr	r2, [r7, #32]
 8004760:	4906      	ldr	r1, [pc, #24]	@ (800477c <I2C_RequestMemoryRead+0x1cc>)
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f886 	bl	8004874 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	00010002 	.word	0x00010002

08004780 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004790:	e048      	b.n	8004824 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004798:	d044      	beq.n	8004824 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800479a:	f7fe fb15 	bl	8002dc8 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d302      	bcc.n	80047b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d139      	bne.n	8004824 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	0c1b      	lsrs	r3, r3, #16
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d10d      	bne.n	80047d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	43da      	mvns	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	4013      	ands	r3, r2
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	e00c      	b.n	80047f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	43da      	mvns	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4013      	ands	r3, r2
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d116      	bne.n	8004824 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004810:	f043 0220 	orr.w	r2, r3, #32
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e023      	b.n	800486c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	0c1b      	lsrs	r3, r3, #16
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	d10d      	bne.n	800484a <I2C_WaitOnFlagUntilTimeout+0xca>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	43da      	mvns	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	e00c      	b.n	8004864 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	43da      	mvns	r2, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	4013      	ands	r3, r2
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	bf0c      	ite	eq
 800485c:	2301      	moveq	r3, #1
 800485e:	2300      	movne	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	429a      	cmp	r2, r3
 8004868:	d093      	beq.n	8004792 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004882:	e071      	b.n	8004968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800488e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004892:	d123      	bne.n	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c8:	f043 0204 	orr.w	r2, r3, #4
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e067      	b.n	80049ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048e2:	d041      	beq.n	8004968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e4:	f7fe fa70 	bl	8002dc8 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d302      	bcc.n	80048fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d136      	bne.n	8004968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	0c1b      	lsrs	r3, r3, #16
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d10c      	bne.n	800491e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	43da      	mvns	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4013      	ands	r3, r2
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	bf14      	ite	ne
 8004916:	2301      	movne	r3, #1
 8004918:	2300      	moveq	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	e00b      	b.n	8004936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	43da      	mvns	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	4013      	ands	r3, r2
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d016      	beq.n	8004968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e021      	b.n	80049ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	0c1b      	lsrs	r3, r3, #16
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d10c      	bne.n	800498c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	43da      	mvns	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4013      	ands	r3, r2
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	bf14      	ite	ne
 8004984:	2301      	movne	r3, #1
 8004986:	2300      	moveq	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	e00b      	b.n	80049a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	43da      	mvns	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4013      	ands	r3, r2
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	bf14      	ite	ne
 800499e:	2301      	movne	r3, #1
 80049a0:	2300      	moveq	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f47f af6d 	bne.w	8004884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049c0:	e034      	b.n	8004a2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f8e3 	bl	8004b8e <I2C_IsAcknowledgeFailed>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e034      	b.n	8004a3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049d8:	d028      	beq.n	8004a2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049da:	f7fe f9f5 	bl	8002dc8 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d302      	bcc.n	80049f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d11d      	bne.n	8004a2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049fa:	2b80      	cmp	r3, #128	@ 0x80
 80049fc:	d016      	beq.n	8004a2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a18:	f043 0220 	orr.w	r2, r3, #32
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e007      	b.n	8004a3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a36:	2b80      	cmp	r3, #128	@ 0x80
 8004a38:	d1c3      	bne.n	80049c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a50:	e034      	b.n	8004abc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f89b 	bl	8004b8e <I2C_IsAcknowledgeFailed>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e034      	b.n	8004acc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a68:	d028      	beq.n	8004abc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6a:	f7fe f9ad 	bl	8002dc8 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d302      	bcc.n	8004a80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d11d      	bne.n	8004abc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d016      	beq.n	8004abc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa8:	f043 0220 	orr.w	r2, r3, #32
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e007      	b.n	8004acc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d1c3      	bne.n	8004a52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ae0:	e049      	b.n	8004b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d119      	bne.n	8004b24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0210 	mvn.w	r2, #16
 8004af8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e030      	b.n	8004b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b24:	f7fe f950 	bl	8002dc8 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d302      	bcc.n	8004b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d11d      	bne.n	8004b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b44:	2b40      	cmp	r3, #64	@ 0x40
 8004b46:	d016      	beq.n	8004b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	f043 0220 	orr.w	r2, r3, #32
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e007      	b.n	8004b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b80:	2b40      	cmp	r3, #64	@ 0x40
 8004b82:	d1ae      	bne.n	8004ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba4:	d11b      	bne.n	8004bde <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bca:	f043 0204 	orr.w	r2, r3, #4
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e267      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d075      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c0a:	4b88      	ldr	r3, [pc, #544]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d00c      	beq.n	8004c30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c16:	4b85      	ldr	r3, [pc, #532]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d112      	bne.n	8004c48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c22:	4b82      	ldr	r3, [pc, #520]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c2e:	d10b      	bne.n	8004c48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c30:	4b7e      	ldr	r3, [pc, #504]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d05b      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x108>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d157      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e242      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c50:	d106      	bne.n	8004c60 <HAL_RCC_OscConfig+0x74>
 8004c52:	4b76      	ldr	r3, [pc, #472]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a75      	ldr	r2, [pc, #468]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e01d      	b.n	8004c9c <HAL_RCC_OscConfig+0xb0>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c68:	d10c      	bne.n	8004c84 <HAL_RCC_OscConfig+0x98>
 8004c6a:	4b70      	ldr	r3, [pc, #448]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a6f      	ldr	r2, [pc, #444]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	4b6d      	ldr	r3, [pc, #436]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a6c      	ldr	r2, [pc, #432]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	e00b      	b.n	8004c9c <HAL_RCC_OscConfig+0xb0>
 8004c84:	4b69      	ldr	r3, [pc, #420]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a68      	ldr	r2, [pc, #416]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	4b66      	ldr	r3, [pc, #408]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a65      	ldr	r2, [pc, #404]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d013      	beq.n	8004ccc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca4:	f7fe f890 	bl	8002dc8 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cac:	f7fe f88c 	bl	8002dc8 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	@ 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e207      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0xc0>
 8004cca:	e014      	b.n	8004cf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ccc:	f7fe f87c 	bl	8002dc8 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cd4:	f7fe f878 	bl	8002dc8 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b64      	cmp	r3, #100	@ 0x64
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e1f3      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ce6:	4b51      	ldr	r3, [pc, #324]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f0      	bne.n	8004cd4 <HAL_RCC_OscConfig+0xe8>
 8004cf2:	e000      	b.n	8004cf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d063      	beq.n	8004dca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d02:	4b4a      	ldr	r3, [pc, #296]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 030c 	and.w	r3, r3, #12
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00b      	beq.n	8004d26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d0e:	4b47      	ldr	r3, [pc, #284]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d11c      	bne.n	8004d54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d1a:	4b44      	ldr	r3, [pc, #272]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d116      	bne.n	8004d54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d26:	4b41      	ldr	r3, [pc, #260]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d005      	beq.n	8004d3e <HAL_RCC_OscConfig+0x152>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d001      	beq.n	8004d3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e1c7      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	4937      	ldr	r1, [pc, #220]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d52:	e03a      	b.n	8004dca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d020      	beq.n	8004d9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d5c:	4b34      	ldr	r3, [pc, #208]	@ (8004e30 <HAL_RCC_OscConfig+0x244>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d62:	f7fe f831 	bl	8002dc8 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d6a:	f7fe f82d 	bl	8002dc8 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e1a8      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f0      	beq.n	8004d6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d88:	4b28      	ldr	r3, [pc, #160]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	4925      	ldr	r1, [pc, #148]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	600b      	str	r3, [r1, #0]
 8004d9c:	e015      	b.n	8004dca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d9e:	4b24      	ldr	r3, [pc, #144]	@ (8004e30 <HAL_RCC_OscConfig+0x244>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da4:	f7fe f810 	bl	8002dc8 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dac:	f7fe f80c 	bl	8002dc8 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e187      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d036      	beq.n	8004e44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dde:	4b15      	ldr	r3, [pc, #84]	@ (8004e34 <HAL_RCC_OscConfig+0x248>)
 8004de0:	2201      	movs	r2, #1
 8004de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de4:	f7fd fff0 	bl	8002dc8 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dec:	f7fd ffec 	bl	8002dc8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e167      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0x200>
 8004e0a:	e01b      	b.n	8004e44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e0c:	4b09      	ldr	r3, [pc, #36]	@ (8004e34 <HAL_RCC_OscConfig+0x248>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e12:	f7fd ffd9 	bl	8002dc8 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e18:	e00e      	b.n	8004e38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e1a:	f7fd ffd5 	bl	8002dc8 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d907      	bls.n	8004e38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e150      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	42470000 	.word	0x42470000
 8004e34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e38:	4b88      	ldr	r3, [pc, #544]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1ea      	bne.n	8004e1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 8097 	beq.w	8004f80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e52:	2300      	movs	r3, #0
 8004e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e56:	4b81      	ldr	r3, [pc, #516]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10f      	bne.n	8004e82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e62:	2300      	movs	r3, #0
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	4b7d      	ldr	r3, [pc, #500]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	4a7c      	ldr	r2, [pc, #496]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e72:	4b7a      	ldr	r3, [pc, #488]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e7a:	60bb      	str	r3, [r7, #8]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e82:	4b77      	ldr	r3, [pc, #476]	@ (8005060 <HAL_RCC_OscConfig+0x474>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d118      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e8e:	4b74      	ldr	r3, [pc, #464]	@ (8005060 <HAL_RCC_OscConfig+0x474>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a73      	ldr	r2, [pc, #460]	@ (8005060 <HAL_RCC_OscConfig+0x474>)
 8004e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e9a:	f7fd ff95 	bl	8002dc8 <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea2:	f7fd ff91 	bl	8002dc8 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e10c      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb4:	4b6a      	ldr	r3, [pc, #424]	@ (8005060 <HAL_RCC_OscConfig+0x474>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0f0      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d106      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x2ea>
 8004ec8:	4b64      	ldr	r3, [pc, #400]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ecc:	4a63      	ldr	r2, [pc, #396]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed4:	e01c      	b.n	8004f10 <HAL_RCC_OscConfig+0x324>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	d10c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x30c>
 8004ede:	4b5f      	ldr	r3, [pc, #380]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee2:	4a5e      	ldr	r2, [pc, #376]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004ee4:	f043 0304 	orr.w	r3, r3, #4
 8004ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eea:	4b5c      	ldr	r3, [pc, #368]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eee:	4a5b      	ldr	r2, [pc, #364]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ef6:	e00b      	b.n	8004f10 <HAL_RCC_OscConfig+0x324>
 8004ef8:	4b58      	ldr	r3, [pc, #352]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efc:	4a57      	ldr	r2, [pc, #348]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004efe:	f023 0301 	bic.w	r3, r3, #1
 8004f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f04:	4b55      	ldr	r3, [pc, #340]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f08:	4a54      	ldr	r2, [pc, #336]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004f0a:	f023 0304 	bic.w	r3, r3, #4
 8004f0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d015      	beq.n	8004f44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f18:	f7fd ff56 	bl	8002dc8 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f20:	f7fd ff52 	bl	8002dc8 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e0cb      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f36:	4b49      	ldr	r3, [pc, #292]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0ee      	beq.n	8004f20 <HAL_RCC_OscConfig+0x334>
 8004f42:	e014      	b.n	8004f6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f44:	f7fd ff40 	bl	8002dc8 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f4a:	e00a      	b.n	8004f62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f4c:	f7fd ff3c 	bl	8002dc8 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e0b5      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f62:	4b3e      	ldr	r3, [pc, #248]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1ee      	bne.n	8004f4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d105      	bne.n	8004f80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f74:	4b39      	ldr	r3, [pc, #228]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f78:	4a38      	ldr	r2, [pc, #224]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004f7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80a1 	beq.w	80050cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f8a:	4b34      	ldr	r3, [pc, #208]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d05c      	beq.n	8005050 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d141      	bne.n	8005022 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9e:	4b31      	ldr	r3, [pc, #196]	@ (8005064 <HAL_RCC_OscConfig+0x478>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa4:	f7fd ff10 	bl	8002dc8 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fac:	f7fd ff0c 	bl	8002dc8 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e087      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fbe:	4b27      	ldr	r3, [pc, #156]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69da      	ldr	r2, [r3, #28]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd8:	019b      	lsls	r3, r3, #6
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe0:	085b      	lsrs	r3, r3, #1
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	041b      	lsls	r3, r3, #16
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fec:	061b      	lsls	r3, r3, #24
 8004fee:	491b      	ldr	r1, [pc, #108]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8005064 <HAL_RCC_OscConfig+0x478>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffa:	f7fd fee5 	bl	8002dc8 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005002:	f7fd fee1 	bl	8002dc8 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e05c      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005014:	4b11      	ldr	r3, [pc, #68]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <HAL_RCC_OscConfig+0x416>
 8005020:	e054      	b.n	80050cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005022:	4b10      	ldr	r3, [pc, #64]	@ (8005064 <HAL_RCC_OscConfig+0x478>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005028:	f7fd fece 	bl	8002dc8 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005030:	f7fd feca 	bl	8002dc8 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e045      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005042:	4b06      	ldr	r3, [pc, #24]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_OscConfig+0x444>
 800504e:	e03d      	b.n	80050cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d107      	bne.n	8005068 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e038      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
 800505c:	40023800 	.word	0x40023800
 8005060:	40007000 	.word	0x40007000
 8005064:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005068:	4b1b      	ldr	r3, [pc, #108]	@ (80050d8 <HAL_RCC_OscConfig+0x4ec>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d028      	beq.n	80050c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005080:	429a      	cmp	r2, r3
 8005082:	d121      	bne.n	80050c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508e:	429a      	cmp	r2, r3
 8005090:	d11a      	bne.n	80050c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005098:	4013      	ands	r3, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800509e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d111      	bne.n	80050c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ae:	085b      	lsrs	r3, r3, #1
 80050b0:	3b01      	subs	r3, #1
 80050b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d107      	bne.n	80050c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d001      	beq.n	80050cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	40023800 	.word	0x40023800

080050dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0cc      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050f0:	4b68      	ldr	r3, [pc, #416]	@ (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d90c      	bls.n	8005118 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fe:	4b65      	ldr	r3, [pc, #404]	@ (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005106:	4b63      	ldr	r3, [pc, #396]	@ (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d001      	beq.n	8005118 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0b8      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d020      	beq.n	8005166 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005130:	4b59      	ldr	r3, [pc, #356]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	4a58      	ldr	r2, [pc, #352]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800513a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005148:	4b53      	ldr	r3, [pc, #332]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4a52      	ldr	r2, [pc, #328]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005152:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005154:	4b50      	ldr	r3, [pc, #320]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	494d      	ldr	r1, [pc, #308]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	4313      	orrs	r3, r2
 8005164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d044      	beq.n	80051fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d107      	bne.n	800518a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517a:	4b47      	ldr	r3, [pc, #284]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d119      	bne.n	80051ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e07f      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d003      	beq.n	800519a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005196:	2b03      	cmp	r3, #3
 8005198:	d107      	bne.n	80051aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519a:	4b3f      	ldr	r3, [pc, #252]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d109      	bne.n	80051ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e06f      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e067      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ba:	4b37      	ldr	r3, [pc, #220]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f023 0203 	bic.w	r2, r3, #3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	4934      	ldr	r1, [pc, #208]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051cc:	f7fd fdfc 	bl	8002dc8 <HAL_GetTick>
 80051d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d2:	e00a      	b.n	80051ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d4:	f7fd fdf8 	bl	8002dc8 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e04f      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 020c 	and.w	r2, r3, #12
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d1eb      	bne.n	80051d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051fc:	4b25      	ldr	r3, [pc, #148]	@ (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d20c      	bcs.n	8005224 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520a:	4b22      	ldr	r3, [pc, #136]	@ (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005212:	4b20      	ldr	r3, [pc, #128]	@ (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d001      	beq.n	8005224 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e032      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005230:	4b19      	ldr	r3, [pc, #100]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4916      	ldr	r1, [pc, #88]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	4313      	orrs	r3, r2
 8005240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d009      	beq.n	8005262 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800524e:	4b12      	ldr	r3, [pc, #72]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	490e      	ldr	r1, [pc, #56]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800525e:	4313      	orrs	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005262:	f000 f821 	bl	80052a8 <HAL_RCC_GetSysClockFreq>
 8005266:	4602      	mov	r2, r0
 8005268:	4b0b      	ldr	r3, [pc, #44]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	490a      	ldr	r1, [pc, #40]	@ (800529c <HAL_RCC_ClockConfig+0x1c0>)
 8005274:	5ccb      	ldrb	r3, [r1, r3]
 8005276:	fa22 f303 	lsr.w	r3, r2, r3
 800527a:	4a09      	ldr	r2, [pc, #36]	@ (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 800527c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800527e:	4b09      	ldr	r3, [pc, #36]	@ (80052a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f7fd fd5c 	bl	8002d40 <HAL_InitTick>

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40023c00 	.word	0x40023c00
 8005298:	40023800 	.word	0x40023800
 800529c:	08018714 	.word	0x08018714
 80052a0:	20000004 	.word	0x20000004
 80052a4:	20000008 	.word	0x20000008

080052a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052ac:	b094      	sub	sp, #80	@ 0x50
 80052ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80052b4:	2300      	movs	r3, #0
 80052b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052b8:	2300      	movs	r3, #0
 80052ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052c0:	4b79      	ldr	r3, [pc, #484]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 030c 	and.w	r3, r3, #12
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d00d      	beq.n	80052e8 <HAL_RCC_GetSysClockFreq+0x40>
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	f200 80e1 	bhi.w	8005494 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_RCC_GetSysClockFreq+0x34>
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d003      	beq.n	80052e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80052da:	e0db      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052dc:	4b73      	ldr	r3, [pc, #460]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x204>)
 80052de:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80052e0:	e0db      	b.n	800549a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052e2:	4b73      	ldr	r3, [pc, #460]	@ (80054b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80052e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052e6:	e0d8      	b.n	800549a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052e8:	4b6f      	ldr	r3, [pc, #444]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052f2:	4b6d      	ldr	r3, [pc, #436]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d063      	beq.n	80053c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052fe:	4b6a      	ldr	r3, [pc, #424]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	099b      	lsrs	r3, r3, #6
 8005304:	2200      	movs	r2, #0
 8005306:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005308:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800530a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005310:	633b      	str	r3, [r7, #48]	@ 0x30
 8005312:	2300      	movs	r3, #0
 8005314:	637b      	str	r3, [r7, #52]	@ 0x34
 8005316:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800531a:	4622      	mov	r2, r4
 800531c:	462b      	mov	r3, r5
 800531e:	f04f 0000 	mov.w	r0, #0
 8005322:	f04f 0100 	mov.w	r1, #0
 8005326:	0159      	lsls	r1, r3, #5
 8005328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800532c:	0150      	lsls	r0, r2, #5
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4621      	mov	r1, r4
 8005334:	1a51      	subs	r1, r2, r1
 8005336:	6139      	str	r1, [r7, #16]
 8005338:	4629      	mov	r1, r5
 800533a:	eb63 0301 	sbc.w	r3, r3, r1
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800534c:	4659      	mov	r1, fp
 800534e:	018b      	lsls	r3, r1, #6
 8005350:	4651      	mov	r1, sl
 8005352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005356:	4651      	mov	r1, sl
 8005358:	018a      	lsls	r2, r1, #6
 800535a:	4651      	mov	r1, sl
 800535c:	ebb2 0801 	subs.w	r8, r2, r1
 8005360:	4659      	mov	r1, fp
 8005362:	eb63 0901 	sbc.w	r9, r3, r1
 8005366:	f04f 0200 	mov.w	r2, #0
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800537a:	4690      	mov	r8, r2
 800537c:	4699      	mov	r9, r3
 800537e:	4623      	mov	r3, r4
 8005380:	eb18 0303 	adds.w	r3, r8, r3
 8005384:	60bb      	str	r3, [r7, #8]
 8005386:	462b      	mov	r3, r5
 8005388:	eb49 0303 	adc.w	r3, r9, r3
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800539a:	4629      	mov	r1, r5
 800539c:	024b      	lsls	r3, r1, #9
 800539e:	4621      	mov	r1, r4
 80053a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053a4:	4621      	mov	r1, r4
 80053a6:	024a      	lsls	r2, r1, #9
 80053a8:	4610      	mov	r0, r2
 80053aa:	4619      	mov	r1, r3
 80053ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ae:	2200      	movs	r2, #0
 80053b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053b8:	f7fb fc68 	bl	8000c8c <__aeabi_uldivmod>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4613      	mov	r3, r2
 80053c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053c4:	e058      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053c6:	4b38      	ldr	r3, [pc, #224]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	099b      	lsrs	r3, r3, #6
 80053cc:	2200      	movs	r2, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	4611      	mov	r1, r2
 80053d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053d6:	623b      	str	r3, [r7, #32]
 80053d8:	2300      	movs	r3, #0
 80053da:	627b      	str	r3, [r7, #36]	@ 0x24
 80053dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053e0:	4642      	mov	r2, r8
 80053e2:	464b      	mov	r3, r9
 80053e4:	f04f 0000 	mov.w	r0, #0
 80053e8:	f04f 0100 	mov.w	r1, #0
 80053ec:	0159      	lsls	r1, r3, #5
 80053ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053f2:	0150      	lsls	r0, r2, #5
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4641      	mov	r1, r8
 80053fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80053fe:	4649      	mov	r1, r9
 8005400:	eb63 0b01 	sbc.w	fp, r3, r1
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005410:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005414:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005418:	ebb2 040a 	subs.w	r4, r2, sl
 800541c:	eb63 050b 	sbc.w	r5, r3, fp
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	00eb      	lsls	r3, r5, #3
 800542a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800542e:	00e2      	lsls	r2, r4, #3
 8005430:	4614      	mov	r4, r2
 8005432:	461d      	mov	r5, r3
 8005434:	4643      	mov	r3, r8
 8005436:	18e3      	adds	r3, r4, r3
 8005438:	603b      	str	r3, [r7, #0]
 800543a:	464b      	mov	r3, r9
 800543c:	eb45 0303 	adc.w	r3, r5, r3
 8005440:	607b      	str	r3, [r7, #4]
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800544e:	4629      	mov	r1, r5
 8005450:	028b      	lsls	r3, r1, #10
 8005452:	4621      	mov	r1, r4
 8005454:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005458:	4621      	mov	r1, r4
 800545a:	028a      	lsls	r2, r1, #10
 800545c:	4610      	mov	r0, r2
 800545e:	4619      	mov	r1, r3
 8005460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005462:	2200      	movs	r2, #0
 8005464:	61bb      	str	r3, [r7, #24]
 8005466:	61fa      	str	r2, [r7, #28]
 8005468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800546c:	f7fb fc0e 	bl	8000c8c <__aeabi_uldivmod>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4613      	mov	r3, r2
 8005476:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005478:	4b0b      	ldr	r3, [pc, #44]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	0c1b      	lsrs	r3, r3, #16
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	3301      	adds	r3, #1
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005488:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800548a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800548c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005490:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005492:	e002      	b.n	800549a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005494:	4b05      	ldr	r3, [pc, #20]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x204>)
 8005496:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800549a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800549c:	4618      	mov	r0, r3
 800549e:	3750      	adds	r7, #80	@ 0x50
 80054a0:	46bd      	mov	sp, r7
 80054a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054a6:	bf00      	nop
 80054a8:	40023800 	.word	0x40023800
 80054ac:	00f42400 	.word	0x00f42400
 80054b0:	007a1200 	.word	0x007a1200

080054b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054b8:	4b03      	ldr	r3, [pc, #12]	@ (80054c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054ba:	681b      	ldr	r3, [r3, #0]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	20000004 	.word	0x20000004

080054cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054d0:	f7ff fff0 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 80054d4:	4602      	mov	r2, r0
 80054d6:	4b05      	ldr	r3, [pc, #20]	@ (80054ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	0a9b      	lsrs	r3, r3, #10
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	4903      	ldr	r1, [pc, #12]	@ (80054f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054e2:	5ccb      	ldrb	r3, [r1, r3]
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40023800 	.word	0x40023800
 80054f0:	08018724 	.word	0x08018724

080054f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054f8:	f7ff ffdc 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b05      	ldr	r3, [pc, #20]	@ (8005514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	0b5b      	lsrs	r3, r3, #13
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4903      	ldr	r1, [pc, #12]	@ (8005518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40023800 	.word	0x40023800
 8005518:	08018724 	.word	0x08018724

0800551c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e041      	b.n	80055b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fd f8a2 	bl	800268c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3304      	adds	r3, #4
 8005558:	4619      	mov	r1, r3
 800555a:	4610      	mov	r0, r2
 800555c:	f000 fac0 	bl	8005ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e041      	b.n	8005650 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d106      	bne.n	80055e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f839 	bl	8005658 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2202      	movs	r2, #2
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f000 fa71 	bl	8005ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d109      	bne.n	8005690 <HAL_TIM_PWM_Start+0x24>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	bf14      	ite	ne
 8005688:	2301      	movne	r3, #1
 800568a:	2300      	moveq	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	e022      	b.n	80056d6 <HAL_TIM_PWM_Start+0x6a>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b04      	cmp	r3, #4
 8005694:	d109      	bne.n	80056aa <HAL_TIM_PWM_Start+0x3e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b01      	cmp	r3, #1
 80056a0:	bf14      	ite	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	2300      	moveq	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	e015      	b.n	80056d6 <HAL_TIM_PWM_Start+0x6a>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d109      	bne.n	80056c4 <HAL_TIM_PWM_Start+0x58>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	bf14      	ite	ne
 80056bc:	2301      	movne	r3, #1
 80056be:	2300      	moveq	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	e008      	b.n	80056d6 <HAL_TIM_PWM_Start+0x6a>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	bf14      	ite	ne
 80056d0:	2301      	movne	r3, #1
 80056d2:	2300      	moveq	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e068      	b.n	80057b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <HAL_TIM_PWM_Start+0x82>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056ec:	e013      	b.n	8005716 <HAL_TIM_PWM_Start+0xaa>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d104      	bne.n	80056fe <HAL_TIM_PWM_Start+0x92>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056fc:	e00b      	b.n	8005716 <HAL_TIM_PWM_Start+0xaa>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b08      	cmp	r3, #8
 8005702:	d104      	bne.n	800570e <HAL_TIM_PWM_Start+0xa2>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800570c:	e003      	b.n	8005716 <HAL_TIM_PWM_Start+0xaa>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2202      	movs	r2, #2
 8005712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2201      	movs	r2, #1
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fc90 	bl	8006044 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a23      	ldr	r2, [pc, #140]	@ (80057b8 <HAL_TIM_PWM_Start+0x14c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d107      	bne.n	800573e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800573c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1d      	ldr	r2, [pc, #116]	@ (80057b8 <HAL_TIM_PWM_Start+0x14c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d018      	beq.n	800577a <HAL_TIM_PWM_Start+0x10e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005750:	d013      	beq.n	800577a <HAL_TIM_PWM_Start+0x10e>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a19      	ldr	r2, [pc, #100]	@ (80057bc <HAL_TIM_PWM_Start+0x150>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00e      	beq.n	800577a <HAL_TIM_PWM_Start+0x10e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a17      	ldr	r2, [pc, #92]	@ (80057c0 <HAL_TIM_PWM_Start+0x154>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d009      	beq.n	800577a <HAL_TIM_PWM_Start+0x10e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a16      	ldr	r2, [pc, #88]	@ (80057c4 <HAL_TIM_PWM_Start+0x158>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d004      	beq.n	800577a <HAL_TIM_PWM_Start+0x10e>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a14      	ldr	r2, [pc, #80]	@ (80057c8 <HAL_TIM_PWM_Start+0x15c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d111      	bne.n	800579e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b06      	cmp	r3, #6
 800578a:	d010      	beq.n	80057ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579c:	e007      	b.n	80057ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0201 	orr.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40010000 	.word	0x40010000
 80057bc:	40000400 	.word	0x40000400
 80057c0:	40000800 	.word	0x40000800
 80057c4:	40000c00 	.word	0x40000c00
 80057c8:	40014000 	.word	0x40014000

080057cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e0ae      	b.n	8005948 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b0c      	cmp	r3, #12
 80057f6:	f200 809f 	bhi.w	8005938 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005800 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005800:	08005835 	.word	0x08005835
 8005804:	08005939 	.word	0x08005939
 8005808:	08005939 	.word	0x08005939
 800580c:	08005939 	.word	0x08005939
 8005810:	08005875 	.word	0x08005875
 8005814:	08005939 	.word	0x08005939
 8005818:	08005939 	.word	0x08005939
 800581c:	08005939 	.word	0x08005939
 8005820:	080058b7 	.word	0x080058b7
 8005824:	08005939 	.word	0x08005939
 8005828:	08005939 	.word	0x08005939
 800582c:	08005939 	.word	0x08005939
 8005830:	080058f7 	.word	0x080058f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f9dc 	bl	8005bf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0208 	orr.w	r2, r2, #8
 800584e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0204 	bic.w	r2, r2, #4
 800585e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6999      	ldr	r1, [r3, #24]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	691a      	ldr	r2, [r3, #16]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	619a      	str	r2, [r3, #24]
      break;
 8005872:	e064      	b.n	800593e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fa22 	bl	8005cc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800588e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800589e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6999      	ldr	r1, [r3, #24]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	021a      	lsls	r2, r3, #8
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	619a      	str	r2, [r3, #24]
      break;
 80058b4:	e043      	b.n	800593e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fa6d 	bl	8005d9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69da      	ldr	r2, [r3, #28]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0208 	orr.w	r2, r2, #8
 80058d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0204 	bic.w	r2, r2, #4
 80058e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69d9      	ldr	r1, [r3, #28]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	61da      	str	r2, [r3, #28]
      break;
 80058f4:	e023      	b.n	800593e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fab7 	bl	8005e70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69d9      	ldr	r1, [r3, #28]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	021a      	lsls	r2, r3, #8
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	61da      	str	r2, [r3, #28]
      break;
 8005936:	e002      	b.n	800593e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	75fb      	strb	r3, [r7, #23]
      break;
 800593c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005946:	7dfb      	ldrb	r3, [r7, #23]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_TIM_ConfigClockSource+0x1c>
 8005968:	2302      	movs	r3, #2
 800596a:	e0b4      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x186>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800598a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059a4:	d03e      	beq.n	8005a24 <HAL_TIM_ConfigClockSource+0xd4>
 80059a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059aa:	f200 8087 	bhi.w	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059b2:	f000 8086 	beq.w	8005ac2 <HAL_TIM_ConfigClockSource+0x172>
 80059b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ba:	d87f      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059bc:	2b70      	cmp	r3, #112	@ 0x70
 80059be:	d01a      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0xa6>
 80059c0:	2b70      	cmp	r3, #112	@ 0x70
 80059c2:	d87b      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059c4:	2b60      	cmp	r3, #96	@ 0x60
 80059c6:	d050      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x11a>
 80059c8:	2b60      	cmp	r3, #96	@ 0x60
 80059ca:	d877      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059cc:	2b50      	cmp	r3, #80	@ 0x50
 80059ce:	d03c      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0xfa>
 80059d0:	2b50      	cmp	r3, #80	@ 0x50
 80059d2:	d873      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059d4:	2b40      	cmp	r3, #64	@ 0x40
 80059d6:	d058      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x13a>
 80059d8:	2b40      	cmp	r3, #64	@ 0x40
 80059da:	d86f      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059dc:	2b30      	cmp	r3, #48	@ 0x30
 80059de:	d064      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059e0:	2b30      	cmp	r3, #48	@ 0x30
 80059e2:	d86b      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d060      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d867      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d05c      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059f0:	2b10      	cmp	r3, #16
 80059f2:	d05a      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059f4:	e062      	b.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a06:	f000 fafd 	bl	8006004 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	609a      	str	r2, [r3, #8]
      break;
 8005a22:	e04f      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a34:	f000 fae6 	bl	8006004 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a46:	609a      	str	r2, [r3, #8]
      break;
 8005a48:	e03c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a56:	461a      	mov	r2, r3
 8005a58:	f000 fa5a 	bl	8005f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2150      	movs	r1, #80	@ 0x50
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fab3 	bl	8005fce <TIM_ITRx_SetConfig>
      break;
 8005a68:	e02c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a76:	461a      	mov	r2, r3
 8005a78:	f000 fa79 	bl	8005f6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2160      	movs	r1, #96	@ 0x60
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 faa3 	bl	8005fce <TIM_ITRx_SetConfig>
      break;
 8005a88:	e01c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a96:	461a      	mov	r2, r3
 8005a98:	f000 fa3a 	bl	8005f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2140      	movs	r1, #64	@ 0x40
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 fa93 	bl	8005fce <TIM_ITRx_SetConfig>
      break;
 8005aa8:	e00c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f000 fa8a 	bl	8005fce <TIM_ITRx_SetConfig>
      break;
 8005aba:	e003      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac0:	e000      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a3a      	ldr	r2, [pc, #232]	@ (8005bdc <TIM_Base_SetConfig+0xfc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00f      	beq.n	8005b18 <TIM_Base_SetConfig+0x38>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005afe:	d00b      	beq.n	8005b18 <TIM_Base_SetConfig+0x38>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a37      	ldr	r2, [pc, #220]	@ (8005be0 <TIM_Base_SetConfig+0x100>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d007      	beq.n	8005b18 <TIM_Base_SetConfig+0x38>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a36      	ldr	r2, [pc, #216]	@ (8005be4 <TIM_Base_SetConfig+0x104>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_Base_SetConfig+0x38>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a35      	ldr	r2, [pc, #212]	@ (8005be8 <TIM_Base_SetConfig+0x108>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d108      	bne.n	8005b2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8005bdc <TIM_Base_SetConfig+0xfc>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01b      	beq.n	8005b6a <TIM_Base_SetConfig+0x8a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b38:	d017      	beq.n	8005b6a <TIM_Base_SetConfig+0x8a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a28      	ldr	r2, [pc, #160]	@ (8005be0 <TIM_Base_SetConfig+0x100>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <TIM_Base_SetConfig+0x8a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a27      	ldr	r2, [pc, #156]	@ (8005be4 <TIM_Base_SetConfig+0x104>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00f      	beq.n	8005b6a <TIM_Base_SetConfig+0x8a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a26      	ldr	r2, [pc, #152]	@ (8005be8 <TIM_Base_SetConfig+0x108>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00b      	beq.n	8005b6a <TIM_Base_SetConfig+0x8a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a25      	ldr	r2, [pc, #148]	@ (8005bec <TIM_Base_SetConfig+0x10c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d007      	beq.n	8005b6a <TIM_Base_SetConfig+0x8a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a24      	ldr	r2, [pc, #144]	@ (8005bf0 <TIM_Base_SetConfig+0x110>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_Base_SetConfig+0x8a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a23      	ldr	r2, [pc, #140]	@ (8005bf4 <TIM_Base_SetConfig+0x114>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d108      	bne.n	8005b7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8005bdc <TIM_Base_SetConfig+0xfc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d103      	bne.n	8005bb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d105      	bne.n	8005bce <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f023 0201 	bic.w	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	611a      	str	r2, [r3, #16]
  }
}
 8005bce:	bf00      	nop
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40010000 	.word	0x40010000
 8005be0:	40000400 	.word	0x40000400
 8005be4:	40000800 	.word	0x40000800
 8005be8:	40000c00 	.word	0x40000c00
 8005bec:	40014000 	.word	0x40014000
 8005bf0:	40014400 	.word	0x40014400
 8005bf4:	40014800 	.word	0x40014800

08005bf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	f023 0201 	bic.w	r2, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0303 	bic.w	r3, r3, #3
 8005c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f023 0302 	bic.w	r3, r3, #2
 8005c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005cc0 <TIM_OC1_SetConfig+0xc8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d10c      	bne.n	8005c6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0308 	bic.w	r3, r3, #8
 8005c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f023 0304 	bic.w	r3, r3, #4
 8005c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a13      	ldr	r2, [pc, #76]	@ (8005cc0 <TIM_OC1_SetConfig+0xc8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d111      	bne.n	8005c9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	621a      	str	r2, [r3, #32]
}
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	40010000 	.word	0x40010000

08005cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	f023 0210 	bic.w	r2, r3, #16
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	021b      	lsls	r3, r3, #8
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f023 0320 	bic.w	r3, r3, #32
 8005d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005d98 <TIM_OC2_SetConfig+0xd4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d10d      	bne.n	8005d40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a15      	ldr	r2, [pc, #84]	@ (8005d98 <TIM_OC2_SetConfig+0xd4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d113      	bne.n	8005d70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40010000 	.word	0x40010000

08005d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0303 	bic.w	r3, r3, #3
 8005dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e6c <TIM_OC3_SetConfig+0xd0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d10d      	bne.n	8005e16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a14      	ldr	r2, [pc, #80]	@ (8005e6c <TIM_OC3_SetConfig+0xd0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d113      	bne.n	8005e46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	621a      	str	r2, [r3, #32]
}
 8005e60:	bf00      	nop
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	40010000 	.word	0x40010000

08005e70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	021b      	lsls	r3, r3, #8
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	031b      	lsls	r3, r3, #12
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a10      	ldr	r2, [pc, #64]	@ (8005f0c <TIM_OC4_SetConfig+0x9c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d109      	bne.n	8005ee4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	019b      	lsls	r3, r3, #6
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	621a      	str	r2, [r3, #32]
}
 8005efe:	bf00      	nop
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40010000 	.word	0x40010000

08005f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f023 0201 	bic.w	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f023 030a 	bic.w	r3, r3, #10
 8005f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	621a      	str	r2, [r3, #32]
}
 8005f62:	bf00      	nop
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b087      	sub	sp, #28
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	f023 0210 	bic.w	r2, r3, #16
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	031b      	lsls	r3, r3, #12
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005faa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	621a      	str	r2, [r3, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f043 0307 	orr.w	r3, r3, #7
 8005ff0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	609a      	str	r2, [r3, #8]
}
 8005ff8:	bf00      	nop
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800601e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	021a      	lsls	r2, r3, #8
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	431a      	orrs	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4313      	orrs	r3, r2
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	609a      	str	r2, [r3, #8]
}
 8006038:	bf00      	nop
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	2201      	movs	r2, #1
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a1a      	ldr	r2, [r3, #32]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	43db      	mvns	r3, r3
 8006066:	401a      	ands	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a1a      	ldr	r2, [r3, #32]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 031f 	and.w	r3, r3, #31
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	fa01 f303 	lsl.w	r3, r1, r3
 800607c:	431a      	orrs	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
	...

08006090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e050      	b.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d018      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060f4:	d013      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a18      	ldr	r2, [pc, #96]	@ (800615c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d00e      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a16      	ldr	r2, [pc, #88]	@ (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d009      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a15      	ldr	r2, [pc, #84]	@ (8006164 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d004      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a13      	ldr	r2, [pc, #76]	@ (8006168 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d10c      	bne.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	4313      	orrs	r3, r2
 800612e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40010000 	.word	0x40010000
 800615c:	40000400 	.word	0x40000400
 8006160:	40000800 	.word	0x40000800
 8006164:	40000c00 	.word	0x40000c00
 8006168:	40014000 	.word	0x40014000

0800616c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e042      	b.n	8006204 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7fc faf6 	bl	8002784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2224      	movs	r2, #36	@ 0x24
 800619c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 ffc9 	bl	8007148 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695a      	ldr	r2, [r3, #20]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08c      	sub	sp, #48	@ 0x30
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	4613      	mov	r3, r2
 8006218:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b20      	cmp	r3, #32
 8006224:	d156      	bne.n	80062d4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_UART_Transmit_DMA+0x26>
 800622c:	88fb      	ldrh	r3, [r7, #6]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e04f      	b.n	80062d6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	88fa      	ldrh	r2, [r7, #6]
 8006240:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	88fa      	ldrh	r2, [r7, #6]
 8006246:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2221      	movs	r2, #33	@ 0x21
 8006252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625a:	4a21      	ldr	r2, [pc, #132]	@ (80062e0 <HAL_UART_Transmit_DMA+0xd4>)
 800625c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006262:	4a20      	ldr	r2, [pc, #128]	@ (80062e4 <HAL_UART_Transmit_DMA+0xd8>)
 8006264:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626a:	4a1f      	ldr	r2, [pc, #124]	@ (80062e8 <HAL_UART_Transmit_DMA+0xdc>)
 800626c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006272:	2200      	movs	r2, #0
 8006274:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006276:	f107 0308 	add.w	r3, r7, #8
 800627a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006282:	6819      	ldr	r1, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3304      	adds	r3, #4
 800628a:	461a      	mov	r2, r3
 800628c:	88fb      	ldrh	r3, [r7, #6]
 800628e:	f7fc ff67 	bl	8003160 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800629a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3314      	adds	r3, #20
 80062a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	617b      	str	r3, [r7, #20]
   return(result);
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3314      	adds	r3, #20
 80062ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80062be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6a39      	ldr	r1, [r7, #32]
 80062c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e5      	bne.n	800629c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	e000      	b.n	80062d6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80062d4:	2302      	movs	r3, #2
  }
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3730      	adds	r7, #48	@ 0x30
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	080069d5 	.word	0x080069d5
 80062e4:	08006a6f 	.word	0x08006a6f
 80062e8:	08006bf3 	.word	0x08006bf3

080062ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	4613      	mov	r3, r2
 80062f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b20      	cmp	r3, #32
 8006304:	d112      	bne.n	800632c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <HAL_UART_Receive_DMA+0x26>
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e00b      	b.n	800632e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	461a      	mov	r2, r3
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 fcb0 	bl	8006c88 <UART_Start_Receive_DMA>
 8006328:	4603      	mov	r3, r0
 800632a:	e000      	b.n	800632e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800632c:	2302      	movs	r3, #2
  }
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b090      	sub	sp, #64	@ 0x40
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800633e:	2300      	movs	r3, #0
 8006340:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800634c:	2b80      	cmp	r3, #128	@ 0x80
 800634e:	bf0c      	ite	eq
 8006350:	2301      	moveq	r3, #1
 8006352:	2300      	movne	r3, #0
 8006354:	b2db      	uxtb	r3, r3
 8006356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b21      	cmp	r3, #33	@ 0x21
 8006362:	d128      	bne.n	80063b6 <HAL_UART_DMAStop+0x80>
 8006364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d025      	beq.n	80063b6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3314      	adds	r3, #20
 8006370:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	623b      	str	r3, [r7, #32]
   return(result);
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006380:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3314      	adds	r3, #20
 8006388:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800638a:	633a      	str	r2, [r7, #48]	@ 0x30
 800638c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e5      	bne.n	800636a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d004      	beq.n	80063b0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fc ff30 	bl	8003210 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fd03 	bl	8006dbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c0:	2b40      	cmp	r3, #64	@ 0x40
 80063c2:	bf0c      	ite	eq
 80063c4:	2301      	moveq	r3, #1
 80063c6:	2300      	movne	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b22      	cmp	r3, #34	@ 0x22
 80063d6:	d128      	bne.n	800642a <HAL_UART_DMAStop+0xf4>
 80063d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d025      	beq.n	800642a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3314      	adds	r3, #20
 80063e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3314      	adds	r3, #20
 80063fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063fe:	61fa      	str	r2, [r7, #28]
 8006400:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	69b9      	ldr	r1, [r7, #24]
 8006404:	69fa      	ldr	r2, [r7, #28]
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	617b      	str	r3, [r7, #20]
   return(result);
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e5      	bne.n	80063de <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006416:	2b00      	cmp	r3, #0
 8006418:	d004      	beq.n	8006424 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641e:	4618      	mov	r0, r3
 8006420:	f7fc fef6 	bl	8003210 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fcf1 	bl	8006e0c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3740      	adds	r7, #64	@ 0x40
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b0ba      	sub	sp, #232	@ 0xe8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800645a:	2300      	movs	r3, #0
 800645c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006460:	2300      	movs	r3, #0
 8006462:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006472:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10f      	bne.n	800649a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800647a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <HAL_UART_IRQHandler+0x66>
 8006486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fd99 	bl	8006fca <UART_Receive_IT>
      return;
 8006498:	e25b      	b.n	8006952 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800649a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 80de 	beq.w	8006660 <HAL_UART_IRQHandler+0x22c>
 80064a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d106      	bne.n	80064be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 80d1 	beq.w	8006660 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00b      	beq.n	80064e2 <HAL_UART_IRQHandler+0xae>
 80064ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d005      	beq.n	80064e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064da:	f043 0201 	orr.w	r2, r3, #1
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <HAL_UART_IRQHandler+0xd2>
 80064ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064fe:	f043 0202 	orr.w	r2, r3, #2
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00b      	beq.n	800652a <HAL_UART_IRQHandler+0xf6>
 8006512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006522:	f043 0204 	orr.w	r2, r3, #4
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800652a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800652e:	f003 0308 	and.w	r3, r3, #8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d011      	beq.n	800655a <HAL_UART_IRQHandler+0x126>
 8006536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b00      	cmp	r3, #0
 8006540:	d105      	bne.n	800654e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d005      	beq.n	800655a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006552:	f043 0208 	orr.w	r2, r3, #8
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 81f2 	beq.w	8006948 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b00      	cmp	r3, #0
 800656e:	d008      	beq.n	8006582 <HAL_UART_IRQHandler+0x14e>
 8006570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fd24 	bl	8006fca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658c:	2b40      	cmp	r3, #64	@ 0x40
 800658e:	bf0c      	ite	eq
 8006590:	2301      	moveq	r3, #1
 8006592:	2300      	movne	r3, #0
 8006594:	b2db      	uxtb	r3, r3
 8006596:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d103      	bne.n	80065ae <HAL_UART_IRQHandler+0x17a>
 80065a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d04f      	beq.n	800664e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fc2c 	bl	8006e0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065be:	2b40      	cmp	r3, #64	@ 0x40
 80065c0:	d141      	bne.n	8006646 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3314      	adds	r3, #20
 80065c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80065d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3314      	adds	r3, #20
 80065ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80065ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80065f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80065fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006606:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1d9      	bne.n	80065c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006612:	2b00      	cmp	r3, #0
 8006614:	d013      	beq.n	800663e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800661a:	4a7e      	ldr	r2, [pc, #504]	@ (8006814 <HAL_UART_IRQHandler+0x3e0>)
 800661c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006622:	4618      	mov	r0, r3
 8006624:	f7fc fe64 	bl	80032f0 <HAL_DMA_Abort_IT>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d016      	beq.n	800665c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006638:	4610      	mov	r0, r2
 800663a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663c:	e00e      	b.n	800665c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f9b2 	bl	80069a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006644:	e00a      	b.n	800665c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f9ae 	bl	80069a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800664c:	e006      	b.n	800665c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f9aa 	bl	80069a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800665a:	e175      	b.n	8006948 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800665c:	bf00      	nop
    return;
 800665e:	e173      	b.n	8006948 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006664:	2b01      	cmp	r3, #1
 8006666:	f040 814f 	bne.w	8006908 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800666a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800666e:	f003 0310 	and.w	r3, r3, #16
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 8148 	beq.w	8006908 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800667c:	f003 0310 	and.w	r3, r3, #16
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 8141 	beq.w	8006908 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006686:	2300      	movs	r3, #0
 8006688:	60bb      	str	r3, [r7, #8]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60bb      	str	r3, [r7, #8]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	60bb      	str	r3, [r7, #8]
 800669a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a6:	2b40      	cmp	r3, #64	@ 0x40
 80066a8:	f040 80b6 	bne.w	8006818 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 8145 	beq.w	800694c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066ca:	429a      	cmp	r2, r3
 80066cc:	f080 813e 	bcs.w	800694c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066e2:	f000 8088 	beq.w	80067f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	330c      	adds	r3, #12
 80066ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80066fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006700:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006704:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	330c      	adds	r3, #12
 800670e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006712:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006716:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800671e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800672a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1d9      	bne.n	80066e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3314      	adds	r3, #20
 8006738:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006742:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006744:	f023 0301 	bic.w	r3, r3, #1
 8006748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3314      	adds	r3, #20
 8006752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006756:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800675a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800675e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006768:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e1      	bne.n	8006732 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3314      	adds	r3, #20
 8006774:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800677e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006784:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3314      	adds	r3, #20
 800678e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006792:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006794:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006798:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80067a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e3      	bne.n	800676e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	330c      	adds	r3, #12
 80067ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067c6:	f023 0310 	bic.w	r3, r3, #16
 80067ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	330c      	adds	r3, #12
 80067d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80067d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80067da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e3      	bne.n	80067b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7fc fd0d 	bl	8003210 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2202      	movs	r2, #2
 80067fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006804:	b29b      	uxth	r3, r3
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	b29b      	uxth	r3, r3
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f8d5 	bl	80069bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006812:	e09b      	b.n	800694c <HAL_UART_IRQHandler+0x518>
 8006814:	08006ed3 	.word	0x08006ed3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006820:	b29b      	uxth	r3, r3
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 808e 	beq.w	8006950 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 8089 	beq.w	8006950 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800684e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006850:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006854:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	330c      	adds	r3, #12
 800685e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006862:	647a      	str	r2, [r7, #68]	@ 0x44
 8006864:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006868:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e3      	bne.n	800683e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3314      	adds	r3, #20
 800687c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	623b      	str	r3, [r7, #32]
   return(result);
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	f023 0301 	bic.w	r3, r3, #1
 800688c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3314      	adds	r3, #20
 8006896:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800689a:	633a      	str	r2, [r7, #48]	@ 0x30
 800689c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e3      	bne.n	8006876 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	330c      	adds	r3, #12
 80068c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0310 	bic.w	r3, r3, #16
 80068d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	330c      	adds	r3, #12
 80068dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80068e0:	61fa      	str	r2, [r7, #28]
 80068e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	69b9      	ldr	r1, [r7, #24]
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	617b      	str	r3, [r7, #20]
   return(result);
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e3      	bne.n	80068bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f85b 	bl	80069bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006906:	e023      	b.n	8006950 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800690c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006910:	2b00      	cmp	r3, #0
 8006912:	d009      	beq.n	8006928 <HAL_UART_IRQHandler+0x4f4>
 8006914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 faea 	bl	8006efa <UART_Transmit_IT>
    return;
 8006926:	e014      	b.n	8006952 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800692c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00e      	beq.n	8006952 <HAL_UART_IRQHandler+0x51e>
 8006934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800693c:	2b00      	cmp	r3, #0
 800693e:	d008      	beq.n	8006952 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fb2a 	bl	8006f9a <UART_EndTransmit_IT>
    return;
 8006946:	e004      	b.n	8006952 <HAL_UART_IRQHandler+0x51e>
    return;
 8006948:	bf00      	nop
 800694a:	e002      	b.n	8006952 <HAL_UART_IRQHandler+0x51e>
      return;
 800694c:	bf00      	nop
 800694e:	e000      	b.n	8006952 <HAL_UART_IRQHandler+0x51e>
      return;
 8006950:	bf00      	nop
  }
}
 8006952:	37e8      	adds	r7, #232	@ 0xe8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b090      	sub	sp, #64	@ 0x40
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d137      	bne.n	8006a60 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80069f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f2:	2200      	movs	r2, #0
 80069f4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3314      	adds	r3, #20
 80069fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	623b      	str	r3, [r7, #32]
   return(result);
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3314      	adds	r3, #20
 8006a14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a16:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e5      	bne.n	80069f6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	330c      	adds	r3, #12
 8006a30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a4a:	61fa      	str	r2, [r7, #28]
 8006a4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	69b9      	ldr	r1, [r7, #24]
 8006a50:	69fa      	ldr	r2, [r7, #28]
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	617b      	str	r3, [r7, #20]
   return(result);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e5      	bne.n	8006a2a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a5e:	e002      	b.n	8006a66 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006a60:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006a62:	f7ff ff79 	bl	8006958 <HAL_UART_TxCpltCallback>
}
 8006a66:	bf00      	nop
 8006a68:	3740      	adds	r7, #64	@ 0x40
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f7ff ff75 	bl	800696c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a82:	bf00      	nop
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b09c      	sub	sp, #112	@ 0x70
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a96:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d172      	bne.n	8006b8c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006abc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006abe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ac2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006acc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006ace:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ad2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e5      	bne.n	8006aac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3314      	adds	r3, #20
 8006ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af2:	f023 0301 	bic.w	r3, r3, #1
 8006af6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006af8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3314      	adds	r3, #20
 8006afe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006b00:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b02:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e5      	bne.n	8006ae0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3314      	adds	r3, #20
 8006b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	623b      	str	r3, [r7, #32]
   return(result);
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3314      	adds	r3, #20
 8006b32:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b34:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e5      	bne.n	8006b14 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d119      	bne.n	8006b8c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0310 	bic.w	r3, r3, #16
 8006b6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006b78:	61fa      	str	r2, [r7, #28]
 8006b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	69b9      	ldr	r1, [r7, #24]
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	617b      	str	r3, [r7, #20]
   return(result);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e5      	bne.n	8006b58 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b8e:	2200      	movs	r2, #0
 8006b90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d106      	bne.n	8006ba8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ba2:	f7ff ff0b 	bl	80069bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ba6:	e002      	b.n	8006bae <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006ba8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006baa:	f7ff fee9 	bl	8006980 <HAL_UART_RxCpltCallback>
}
 8006bae:	bf00      	nop
 8006bb0:	3770      	adds	r7, #112	@ 0x70
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d108      	bne.n	8006be4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	4619      	mov	r1, r3
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f7ff feed 	bl	80069bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006be2:	e002      	b.n	8006bea <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7ff fed5 	bl	8006994 <HAL_UART_RxHalfCpltCallback>
}
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c02:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c0e:	2b80      	cmp	r3, #128	@ 0x80
 8006c10:	bf0c      	ite	eq
 8006c12:	2301      	moveq	r3, #1
 8006c14:	2300      	movne	r3, #0
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b21      	cmp	r3, #33	@ 0x21
 8006c24:	d108      	bne.n	8006c38 <UART_DMAError+0x46>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d005      	beq.n	8006c38 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006c32:	68b8      	ldr	r0, [r7, #8]
 8006c34:	f000 f8c2 	bl	8006dbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c42:	2b40      	cmp	r3, #64	@ 0x40
 8006c44:	bf0c      	ite	eq
 8006c46:	2301      	moveq	r3, #1
 8006c48:	2300      	movne	r3, #0
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b22      	cmp	r3, #34	@ 0x22
 8006c58:	d108      	bne.n	8006c6c <UART_DMAError+0x7a>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d005      	beq.n	8006c6c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2200      	movs	r2, #0
 8006c64:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006c66:	68b8      	ldr	r0, [r7, #8]
 8006c68:	f000 f8d0 	bl	8006e0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c70:	f043 0210 	orr.w	r2, r3, #16
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c78:	68b8      	ldr	r0, [r7, #8]
 8006c7a:	f7ff fe95 	bl	80069a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b098      	sub	sp, #96	@ 0x60
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	4613      	mov	r3, r2
 8006c94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	88fa      	ldrh	r2, [r7, #6]
 8006ca0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2222      	movs	r2, #34	@ 0x22
 8006cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb4:	4a3e      	ldr	r2, [pc, #248]	@ (8006db0 <UART_Start_Receive_DMA+0x128>)
 8006cb6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cbc:	4a3d      	ldr	r2, [pc, #244]	@ (8006db4 <UART_Start_Receive_DMA+0x12c>)
 8006cbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc4:	4a3c      	ldr	r2, [pc, #240]	@ (8006db8 <UART_Start_Receive_DMA+0x130>)
 8006cc6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ccc:	2200      	movs	r2, #0
 8006cce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006cd0:	f107 0308 	add.w	r3, r7, #8
 8006cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	88fb      	ldrh	r3, [r7, #6]
 8006ce8:	f7fc fa3a 	bl	8003160 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006cec:	2300      	movs	r3, #0
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	613b      	str	r3, [r7, #16]
 8006d00:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d019      	beq.n	8006d3e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	330c      	adds	r3, #12
 8006d10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d2a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006d30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e5      	bne.n	8006d0a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3314      	adds	r3, #20
 8006d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d50:	f043 0301 	orr.w	r3, r3, #1
 8006d54:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3314      	adds	r3, #20
 8006d5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d5e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006d60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d62:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006d64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e5      	bne.n	8006d3e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3314      	adds	r3, #20
 8006d78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	617b      	str	r3, [r7, #20]
   return(result);
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d88:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3314      	adds	r3, #20
 8006d90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d92:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	6a39      	ldr	r1, [r7, #32]
 8006d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e5      	bne.n	8006d72 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3760      	adds	r7, #96	@ 0x60
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	08006a8b 	.word	0x08006a8b
 8006db4:	08006bb7 	.word	0x08006bb7
 8006db8:	08006bf3 	.word	0x08006bf3

08006dbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b089      	sub	sp, #36	@ 0x24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	330c      	adds	r3, #12
 8006dca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	e853 3f00 	ldrex	r3, [r3]
 8006dd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006dda:	61fb      	str	r3, [r7, #28]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	330c      	adds	r3, #12
 8006de2:	69fa      	ldr	r2, [r7, #28]
 8006de4:	61ba      	str	r2, [r7, #24]
 8006de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6979      	ldr	r1, [r7, #20]
 8006dea:	69ba      	ldr	r2, [r7, #24]
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	613b      	str	r3, [r7, #16]
   return(result);
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e5      	bne.n	8006dc4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006e00:	bf00      	nop
 8006e02:	3724      	adds	r7, #36	@ 0x24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b095      	sub	sp, #84	@ 0x54
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	330c      	adds	r3, #12
 8006e1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	330c      	adds	r3, #12
 8006e32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e34:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e5      	bne.n	8006e14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3314      	adds	r3, #20
 8006e4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	f023 0301 	bic.w	r3, r3, #1
 8006e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3314      	adds	r3, #20
 8006e66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e5      	bne.n	8006e48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d119      	bne.n	8006eb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	330c      	adds	r3, #12
 8006e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f023 0310 	bic.w	r3, r3, #16
 8006e9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ea4:	61ba      	str	r2, [r7, #24]
 8006ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	6979      	ldr	r1, [r7, #20]
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e5      	bne.n	8006e84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ec6:	bf00      	nop
 8006ec8:	3754      	adds	r7, #84	@ 0x54
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ede:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f7ff fd5b 	bl	80069a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b085      	sub	sp, #20
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b21      	cmp	r3, #33	@ 0x21
 8006f0c:	d13e      	bne.n	8006f8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f16:	d114      	bne.n	8006f42 <UART_Transmit_IT+0x48>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d110      	bne.n	8006f42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	1c9a      	adds	r2, r3, #2
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	621a      	str	r2, [r3, #32]
 8006f40:	e008      	b.n	8006f54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	1c59      	adds	r1, r3, #1
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6211      	str	r1, [r2, #32]
 8006f4c:	781a      	ldrb	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	4619      	mov	r1, r3
 8006f62:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10f      	bne.n	8006f88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e000      	b.n	8006f8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f8c:	2302      	movs	r3, #2
  }
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fccc 	bl	8006958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b08c      	sub	sp, #48	@ 0x30
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b22      	cmp	r3, #34	@ 0x22
 8006fdc:	f040 80ae 	bne.w	800713c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fe8:	d117      	bne.n	800701a <UART_Receive_IT+0x50>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d113      	bne.n	800701a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	b29b      	uxth	r3, r3
 8007004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007008:	b29a      	uxth	r2, r3
 800700a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007012:	1c9a      	adds	r2, r3, #2
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	629a      	str	r2, [r3, #40]	@ 0x28
 8007018:	e026      	b.n	8007068 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007020:	2300      	movs	r3, #0
 8007022:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800702c:	d007      	beq.n	800703e <UART_Receive_IT+0x74>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10a      	bne.n	800704c <UART_Receive_IT+0x82>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d106      	bne.n	800704c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	e008      	b.n	800705e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007058:	b2da      	uxtb	r2, r3
 800705a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29b      	uxth	r3, r3
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	4619      	mov	r1, r3
 8007076:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007078:	2b00      	cmp	r3, #0
 800707a:	d15d      	bne.n	8007138 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0220 	bic.w	r2, r2, #32
 800708a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800709a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695a      	ldr	r2, [r3, #20]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0201 	bic.w	r2, r2, #1
 80070aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d135      	bne.n	800712e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	330c      	adds	r3, #12
 80070ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	613b      	str	r3, [r7, #16]
   return(result);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f023 0310 	bic.w	r3, r3, #16
 80070de:	627b      	str	r3, [r7, #36]	@ 0x24
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	330c      	adds	r3, #12
 80070e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070e8:	623a      	str	r2, [r7, #32]
 80070ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	69f9      	ldr	r1, [r7, #28]
 80070ee:	6a3a      	ldr	r2, [r7, #32]
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e5      	bne.n	80070c8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0310 	and.w	r3, r3, #16
 8007106:	2b10      	cmp	r3, #16
 8007108:	d10a      	bne.n	8007120 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff fc48 	bl	80069bc <HAL_UARTEx_RxEventCallback>
 800712c:	e002      	b.n	8007134 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff fc26 	bl	8006980 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	e002      	b.n	800713e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	e000      	b.n	800713e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800713c:	2302      	movs	r3, #2
  }
}
 800713e:	4618      	mov	r0, r3
 8007140:	3730      	adds	r7, #48	@ 0x30
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800714c:	b0c0      	sub	sp, #256	@ 0x100
 800714e:	af00      	add	r7, sp, #0
 8007150:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007164:	68d9      	ldr	r1, [r3, #12]
 8007166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	ea40 0301 	orr.w	r3, r0, r1
 8007170:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	431a      	orrs	r2, r3
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	431a      	orrs	r2, r3
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	4313      	orrs	r3, r2
 8007190:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071a0:	f021 010c 	bic.w	r1, r1, #12
 80071a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071ae:	430b      	orrs	r3, r1
 80071b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c2:	6999      	ldr	r1, [r3, #24]
 80071c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	ea40 0301 	orr.w	r3, r0, r1
 80071ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	4b8f      	ldr	r3, [pc, #572]	@ (8007414 <UART_SetConfig+0x2cc>)
 80071d8:	429a      	cmp	r2, r3
 80071da:	d005      	beq.n	80071e8 <UART_SetConfig+0xa0>
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007418 <UART_SetConfig+0x2d0>)
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d104      	bne.n	80071f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071e8:	f7fe f984 	bl	80054f4 <HAL_RCC_GetPCLK2Freq>
 80071ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80071f0:	e003      	b.n	80071fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071f2:	f7fe f96b 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 80071f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007204:	f040 810c 	bne.w	8007420 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800720c:	2200      	movs	r2, #0
 800720e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007212:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007216:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800721a:	4622      	mov	r2, r4
 800721c:	462b      	mov	r3, r5
 800721e:	1891      	adds	r1, r2, r2
 8007220:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007222:	415b      	adcs	r3, r3
 8007224:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007226:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800722a:	4621      	mov	r1, r4
 800722c:	eb12 0801 	adds.w	r8, r2, r1
 8007230:	4629      	mov	r1, r5
 8007232:	eb43 0901 	adc.w	r9, r3, r1
 8007236:	f04f 0200 	mov.w	r2, #0
 800723a:	f04f 0300 	mov.w	r3, #0
 800723e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800724a:	4690      	mov	r8, r2
 800724c:	4699      	mov	r9, r3
 800724e:	4623      	mov	r3, r4
 8007250:	eb18 0303 	adds.w	r3, r8, r3
 8007254:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007258:	462b      	mov	r3, r5
 800725a:	eb49 0303 	adc.w	r3, r9, r3
 800725e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800726e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007272:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007276:	460b      	mov	r3, r1
 8007278:	18db      	adds	r3, r3, r3
 800727a:	653b      	str	r3, [r7, #80]	@ 0x50
 800727c:	4613      	mov	r3, r2
 800727e:	eb42 0303 	adc.w	r3, r2, r3
 8007282:	657b      	str	r3, [r7, #84]	@ 0x54
 8007284:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007288:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800728c:	f7f9 fcfe 	bl	8000c8c <__aeabi_uldivmod>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4b61      	ldr	r3, [pc, #388]	@ (800741c <UART_SetConfig+0x2d4>)
 8007296:	fba3 2302 	umull	r2, r3, r3, r2
 800729a:	095b      	lsrs	r3, r3, #5
 800729c:	011c      	lsls	r4, r3, #4
 800729e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072b0:	4642      	mov	r2, r8
 80072b2:	464b      	mov	r3, r9
 80072b4:	1891      	adds	r1, r2, r2
 80072b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072b8:	415b      	adcs	r3, r3
 80072ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072c0:	4641      	mov	r1, r8
 80072c2:	eb12 0a01 	adds.w	sl, r2, r1
 80072c6:	4649      	mov	r1, r9
 80072c8:	eb43 0b01 	adc.w	fp, r3, r1
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	f04f 0300 	mov.w	r3, #0
 80072d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072e0:	4692      	mov	sl, r2
 80072e2:	469b      	mov	fp, r3
 80072e4:	4643      	mov	r3, r8
 80072e6:	eb1a 0303 	adds.w	r3, sl, r3
 80072ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072ee:	464b      	mov	r3, r9
 80072f0:	eb4b 0303 	adc.w	r3, fp, r3
 80072f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007304:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007308:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800730c:	460b      	mov	r3, r1
 800730e:	18db      	adds	r3, r3, r3
 8007310:	643b      	str	r3, [r7, #64]	@ 0x40
 8007312:	4613      	mov	r3, r2
 8007314:	eb42 0303 	adc.w	r3, r2, r3
 8007318:	647b      	str	r3, [r7, #68]	@ 0x44
 800731a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800731e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007322:	f7f9 fcb3 	bl	8000c8c <__aeabi_uldivmod>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4611      	mov	r1, r2
 800732c:	4b3b      	ldr	r3, [pc, #236]	@ (800741c <UART_SetConfig+0x2d4>)
 800732e:	fba3 2301 	umull	r2, r3, r3, r1
 8007332:	095b      	lsrs	r3, r3, #5
 8007334:	2264      	movs	r2, #100	@ 0x64
 8007336:	fb02 f303 	mul.w	r3, r2, r3
 800733a:	1acb      	subs	r3, r1, r3
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007342:	4b36      	ldr	r3, [pc, #216]	@ (800741c <UART_SetConfig+0x2d4>)
 8007344:	fba3 2302 	umull	r2, r3, r3, r2
 8007348:	095b      	lsrs	r3, r3, #5
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007350:	441c      	add	r4, r3
 8007352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007356:	2200      	movs	r2, #0
 8007358:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800735c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007360:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007364:	4642      	mov	r2, r8
 8007366:	464b      	mov	r3, r9
 8007368:	1891      	adds	r1, r2, r2
 800736a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800736c:	415b      	adcs	r3, r3
 800736e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007370:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007374:	4641      	mov	r1, r8
 8007376:	1851      	adds	r1, r2, r1
 8007378:	6339      	str	r1, [r7, #48]	@ 0x30
 800737a:	4649      	mov	r1, r9
 800737c:	414b      	adcs	r3, r1
 800737e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800738c:	4659      	mov	r1, fp
 800738e:	00cb      	lsls	r3, r1, #3
 8007390:	4651      	mov	r1, sl
 8007392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007396:	4651      	mov	r1, sl
 8007398:	00ca      	lsls	r2, r1, #3
 800739a:	4610      	mov	r0, r2
 800739c:	4619      	mov	r1, r3
 800739e:	4603      	mov	r3, r0
 80073a0:	4642      	mov	r2, r8
 80073a2:	189b      	adds	r3, r3, r2
 80073a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073a8:	464b      	mov	r3, r9
 80073aa:	460a      	mov	r2, r1
 80073ac:	eb42 0303 	adc.w	r3, r2, r3
 80073b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073c8:	460b      	mov	r3, r1
 80073ca:	18db      	adds	r3, r3, r3
 80073cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073ce:	4613      	mov	r3, r2
 80073d0:	eb42 0303 	adc.w	r3, r2, r3
 80073d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80073de:	f7f9 fc55 	bl	8000c8c <__aeabi_uldivmod>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4b0d      	ldr	r3, [pc, #52]	@ (800741c <UART_SetConfig+0x2d4>)
 80073e8:	fba3 1302 	umull	r1, r3, r3, r2
 80073ec:	095b      	lsrs	r3, r3, #5
 80073ee:	2164      	movs	r1, #100	@ 0x64
 80073f0:	fb01 f303 	mul.w	r3, r1, r3
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	3332      	adds	r3, #50	@ 0x32
 80073fa:	4a08      	ldr	r2, [pc, #32]	@ (800741c <UART_SetConfig+0x2d4>)
 80073fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007400:	095b      	lsrs	r3, r3, #5
 8007402:	f003 0207 	and.w	r2, r3, #7
 8007406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4422      	add	r2, r4
 800740e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007410:	e106      	b.n	8007620 <UART_SetConfig+0x4d8>
 8007412:	bf00      	nop
 8007414:	40011000 	.word	0x40011000
 8007418:	40011400 	.word	0x40011400
 800741c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007424:	2200      	movs	r2, #0
 8007426:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800742a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800742e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007432:	4642      	mov	r2, r8
 8007434:	464b      	mov	r3, r9
 8007436:	1891      	adds	r1, r2, r2
 8007438:	6239      	str	r1, [r7, #32]
 800743a:	415b      	adcs	r3, r3
 800743c:	627b      	str	r3, [r7, #36]	@ 0x24
 800743e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007442:	4641      	mov	r1, r8
 8007444:	1854      	adds	r4, r2, r1
 8007446:	4649      	mov	r1, r9
 8007448:	eb43 0501 	adc.w	r5, r3, r1
 800744c:	f04f 0200 	mov.w	r2, #0
 8007450:	f04f 0300 	mov.w	r3, #0
 8007454:	00eb      	lsls	r3, r5, #3
 8007456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800745a:	00e2      	lsls	r2, r4, #3
 800745c:	4614      	mov	r4, r2
 800745e:	461d      	mov	r5, r3
 8007460:	4643      	mov	r3, r8
 8007462:	18e3      	adds	r3, r4, r3
 8007464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007468:	464b      	mov	r3, r9
 800746a:	eb45 0303 	adc.w	r3, r5, r3
 800746e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800747e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	f04f 0300 	mov.w	r3, #0
 800748a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800748e:	4629      	mov	r1, r5
 8007490:	008b      	lsls	r3, r1, #2
 8007492:	4621      	mov	r1, r4
 8007494:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007498:	4621      	mov	r1, r4
 800749a:	008a      	lsls	r2, r1, #2
 800749c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074a0:	f7f9 fbf4 	bl	8000c8c <__aeabi_uldivmod>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4b60      	ldr	r3, [pc, #384]	@ (800762c <UART_SetConfig+0x4e4>)
 80074aa:	fba3 2302 	umull	r2, r3, r3, r2
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	011c      	lsls	r4, r3, #4
 80074b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074c4:	4642      	mov	r2, r8
 80074c6:	464b      	mov	r3, r9
 80074c8:	1891      	adds	r1, r2, r2
 80074ca:	61b9      	str	r1, [r7, #24]
 80074cc:	415b      	adcs	r3, r3
 80074ce:	61fb      	str	r3, [r7, #28]
 80074d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074d4:	4641      	mov	r1, r8
 80074d6:	1851      	adds	r1, r2, r1
 80074d8:	6139      	str	r1, [r7, #16]
 80074da:	4649      	mov	r1, r9
 80074dc:	414b      	adcs	r3, r1
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074ec:	4659      	mov	r1, fp
 80074ee:	00cb      	lsls	r3, r1, #3
 80074f0:	4651      	mov	r1, sl
 80074f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074f6:	4651      	mov	r1, sl
 80074f8:	00ca      	lsls	r2, r1, #3
 80074fa:	4610      	mov	r0, r2
 80074fc:	4619      	mov	r1, r3
 80074fe:	4603      	mov	r3, r0
 8007500:	4642      	mov	r2, r8
 8007502:	189b      	adds	r3, r3, r2
 8007504:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007508:	464b      	mov	r3, r9
 800750a:	460a      	mov	r2, r1
 800750c:	eb42 0303 	adc.w	r3, r2, r3
 8007510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800751e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007520:	f04f 0200 	mov.w	r2, #0
 8007524:	f04f 0300 	mov.w	r3, #0
 8007528:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800752c:	4649      	mov	r1, r9
 800752e:	008b      	lsls	r3, r1, #2
 8007530:	4641      	mov	r1, r8
 8007532:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007536:	4641      	mov	r1, r8
 8007538:	008a      	lsls	r2, r1, #2
 800753a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800753e:	f7f9 fba5 	bl	8000c8c <__aeabi_uldivmod>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4611      	mov	r1, r2
 8007548:	4b38      	ldr	r3, [pc, #224]	@ (800762c <UART_SetConfig+0x4e4>)
 800754a:	fba3 2301 	umull	r2, r3, r3, r1
 800754e:	095b      	lsrs	r3, r3, #5
 8007550:	2264      	movs	r2, #100	@ 0x64
 8007552:	fb02 f303 	mul.w	r3, r2, r3
 8007556:	1acb      	subs	r3, r1, r3
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	3332      	adds	r3, #50	@ 0x32
 800755c:	4a33      	ldr	r2, [pc, #204]	@ (800762c <UART_SetConfig+0x4e4>)
 800755e:	fba2 2303 	umull	r2, r3, r2, r3
 8007562:	095b      	lsrs	r3, r3, #5
 8007564:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007568:	441c      	add	r4, r3
 800756a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800756e:	2200      	movs	r2, #0
 8007570:	673b      	str	r3, [r7, #112]	@ 0x70
 8007572:	677a      	str	r2, [r7, #116]	@ 0x74
 8007574:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007578:	4642      	mov	r2, r8
 800757a:	464b      	mov	r3, r9
 800757c:	1891      	adds	r1, r2, r2
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	415b      	adcs	r3, r3
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007588:	4641      	mov	r1, r8
 800758a:	1851      	adds	r1, r2, r1
 800758c:	6039      	str	r1, [r7, #0]
 800758e:	4649      	mov	r1, r9
 8007590:	414b      	adcs	r3, r1
 8007592:	607b      	str	r3, [r7, #4]
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	f04f 0300 	mov.w	r3, #0
 800759c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075a0:	4659      	mov	r1, fp
 80075a2:	00cb      	lsls	r3, r1, #3
 80075a4:	4651      	mov	r1, sl
 80075a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075aa:	4651      	mov	r1, sl
 80075ac:	00ca      	lsls	r2, r1, #3
 80075ae:	4610      	mov	r0, r2
 80075b0:	4619      	mov	r1, r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	4642      	mov	r2, r8
 80075b6:	189b      	adds	r3, r3, r2
 80075b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075ba:	464b      	mov	r3, r9
 80075bc:	460a      	mov	r2, r1
 80075be:	eb42 0303 	adc.w	r3, r2, r3
 80075c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80075ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80075d0:	f04f 0200 	mov.w	r2, #0
 80075d4:	f04f 0300 	mov.w	r3, #0
 80075d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80075dc:	4649      	mov	r1, r9
 80075de:	008b      	lsls	r3, r1, #2
 80075e0:	4641      	mov	r1, r8
 80075e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075e6:	4641      	mov	r1, r8
 80075e8:	008a      	lsls	r2, r1, #2
 80075ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80075ee:	f7f9 fb4d 	bl	8000c8c <__aeabi_uldivmod>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	4b0d      	ldr	r3, [pc, #52]	@ (800762c <UART_SetConfig+0x4e4>)
 80075f8:	fba3 1302 	umull	r1, r3, r3, r2
 80075fc:	095b      	lsrs	r3, r3, #5
 80075fe:	2164      	movs	r1, #100	@ 0x64
 8007600:	fb01 f303 	mul.w	r3, r1, r3
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	3332      	adds	r3, #50	@ 0x32
 800760a:	4a08      	ldr	r2, [pc, #32]	@ (800762c <UART_SetConfig+0x4e4>)
 800760c:	fba2 2303 	umull	r2, r3, r2, r3
 8007610:	095b      	lsrs	r3, r3, #5
 8007612:	f003 020f 	and.w	r2, r3, #15
 8007616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4422      	add	r2, r4
 800761e:	609a      	str	r2, [r3, #8]
}
 8007620:	bf00      	nop
 8007622:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007626:	46bd      	mov	sp, r7
 8007628:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800762c:	51eb851f 	.word	0x51eb851f

08007630 <__NVIC_SetPriority>:
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	6039      	str	r1, [r7, #0]
 800763a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800763c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007640:	2b00      	cmp	r3, #0
 8007642:	db0a      	blt.n	800765a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	b2da      	uxtb	r2, r3
 8007648:	490c      	ldr	r1, [pc, #48]	@ (800767c <__NVIC_SetPriority+0x4c>)
 800764a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800764e:	0112      	lsls	r2, r2, #4
 8007650:	b2d2      	uxtb	r2, r2
 8007652:	440b      	add	r3, r1
 8007654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007658:	e00a      	b.n	8007670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	b2da      	uxtb	r2, r3
 800765e:	4908      	ldr	r1, [pc, #32]	@ (8007680 <__NVIC_SetPriority+0x50>)
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	f003 030f 	and.w	r3, r3, #15
 8007666:	3b04      	subs	r3, #4
 8007668:	0112      	lsls	r2, r2, #4
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	440b      	add	r3, r1
 800766e:	761a      	strb	r2, [r3, #24]
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	e000e100 	.word	0xe000e100
 8007680:	e000ed00 	.word	0xe000ed00

08007684 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007688:	2100      	movs	r1, #0
 800768a:	f06f 0004 	mvn.w	r0, #4
 800768e:	f7ff ffcf 	bl	8007630 <__NVIC_SetPriority>
#endif
}
 8007692:	bf00      	nop
 8007694:	bd80      	pop	{r7, pc}
	...

08007698 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800769e:	f3ef 8305 	mrs	r3, IPSR
 80076a2:	603b      	str	r3, [r7, #0]
  return(result);
 80076a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80076aa:	f06f 0305 	mvn.w	r3, #5
 80076ae:	607b      	str	r3, [r7, #4]
 80076b0:	e00c      	b.n	80076cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80076b2:	4b0a      	ldr	r3, [pc, #40]	@ (80076dc <osKernelInitialize+0x44>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d105      	bne.n	80076c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80076ba:	4b08      	ldr	r3, [pc, #32]	@ (80076dc <osKernelInitialize+0x44>)
 80076bc:	2201      	movs	r2, #1
 80076be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	607b      	str	r3, [r7, #4]
 80076c4:	e002      	b.n	80076cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80076c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076cc:	687b      	ldr	r3, [r7, #4]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	20004924 	.word	0x20004924

080076e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076e6:	f3ef 8305 	mrs	r3, IPSR
 80076ea:	603b      	str	r3, [r7, #0]
  return(result);
 80076ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80076f2:	f06f 0305 	mvn.w	r3, #5
 80076f6:	607b      	str	r3, [r7, #4]
 80076f8:	e010      	b.n	800771c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80076fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007728 <osKernelStart+0x48>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d109      	bne.n	8007716 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007702:	f7ff ffbf 	bl	8007684 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007706:	4b08      	ldr	r3, [pc, #32]	@ (8007728 <osKernelStart+0x48>)
 8007708:	2202      	movs	r2, #2
 800770a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800770c:	f001 f87a 	bl	8008804 <vTaskStartScheduler>
      stat = osOK;
 8007710:	2300      	movs	r3, #0
 8007712:	607b      	str	r3, [r7, #4]
 8007714:	e002      	b.n	800771c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007716:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800771a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800771c:	687b      	ldr	r3, [r7, #4]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20004924 	.word	0x20004924

0800772c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800772c:	b580      	push	{r7, lr}
 800772e:	b08e      	sub	sp, #56	@ 0x38
 8007730:	af04      	add	r7, sp, #16
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007738:	2300      	movs	r3, #0
 800773a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800773c:	f3ef 8305 	mrs	r3, IPSR
 8007740:	617b      	str	r3, [r7, #20]
  return(result);
 8007742:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007744:	2b00      	cmp	r3, #0
 8007746:	d17e      	bne.n	8007846 <osThreadNew+0x11a>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d07b      	beq.n	8007846 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800774e:	2380      	movs	r3, #128	@ 0x80
 8007750:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007752:	2318      	movs	r3, #24
 8007754:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007756:	2300      	movs	r3, #0
 8007758:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800775a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800775e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d045      	beq.n	80077f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <osThreadNew+0x48>
        name = attr->name;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d008      	beq.n	800779a <osThreadNew+0x6e>
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	2b38      	cmp	r3, #56	@ 0x38
 800778c:	d805      	bhi.n	800779a <osThreadNew+0x6e>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <osThreadNew+0x72>
        return (NULL);
 800779a:	2300      	movs	r3, #0
 800779c:	e054      	b.n	8007848 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	089b      	lsrs	r3, r3, #2
 80077ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00e      	beq.n	80077d4 <osThreadNew+0xa8>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	2b5b      	cmp	r3, #91	@ 0x5b
 80077bc:	d90a      	bls.n	80077d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d006      	beq.n	80077d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <osThreadNew+0xa8>
        mem = 1;
 80077ce:	2301      	movs	r3, #1
 80077d0:	61bb      	str	r3, [r7, #24]
 80077d2:	e010      	b.n	80077f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10c      	bne.n	80077f6 <osThreadNew+0xca>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d108      	bne.n	80077f6 <osThreadNew+0xca>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d104      	bne.n	80077f6 <osThreadNew+0xca>
          mem = 0;
 80077ec:	2300      	movs	r3, #0
 80077ee:	61bb      	str	r3, [r7, #24]
 80077f0:	e001      	b.n	80077f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d110      	bne.n	800781e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007804:	9202      	str	r2, [sp, #8]
 8007806:	9301      	str	r3, [sp, #4]
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	6a3a      	ldr	r2, [r7, #32]
 8007810:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 fe1a 	bl	800844c <xTaskCreateStatic>
 8007818:	4603      	mov	r3, r0
 800781a:	613b      	str	r3, [r7, #16]
 800781c:	e013      	b.n	8007846 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d110      	bne.n	8007846 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	b29a      	uxth	r2, r3
 8007828:	f107 0310 	add.w	r3, r7, #16
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 fe68 	bl	800850c <xTaskCreate>
 800783c:	4603      	mov	r3, r0
 800783e:	2b01      	cmp	r3, #1
 8007840:	d001      	beq.n	8007846 <osThreadNew+0x11a>
            hTask = NULL;
 8007842:	2300      	movs	r3, #0
 8007844:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007846:	693b      	ldr	r3, [r7, #16]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3728      	adds	r7, #40	@ 0x28
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007858:	f3ef 8305 	mrs	r3, IPSR
 800785c:	60bb      	str	r3, [r7, #8]
  return(result);
 800785e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <osDelay+0x1c>
    stat = osErrorISR;
 8007864:	f06f 0305 	mvn.w	r3, #5
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	e007      	b.n	800787c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800786c:	2300      	movs	r3, #0
 800786e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 ff8e 	bl	8008798 <vTaskDelay>
    }
  }

  return (stat);
 800787c:	68fb      	ldr	r3, [r7, #12]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4a07      	ldr	r2, [pc, #28]	@ (80078b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007898:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	4a06      	ldr	r2, [pc, #24]	@ (80078b8 <vApplicationGetIdleTaskMemory+0x30>)
 800789e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2280      	movs	r2, #128	@ 0x80
 80078a4:	601a      	str	r2, [r3, #0]
}
 80078a6:	bf00      	nop
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	20004928 	.word	0x20004928
 80078b8:	20004984 	.word	0x20004984

080078bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4a07      	ldr	r2, [pc, #28]	@ (80078e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80078cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	4a06      	ldr	r2, [pc, #24]	@ (80078ec <vApplicationGetTimerTaskMemory+0x30>)
 80078d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078da:	601a      	str	r2, [r3, #0]
}
 80078dc:	bf00      	nop
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	20004b84 	.word	0x20004b84
 80078ec:	20004be0 	.word	0x20004be0

080078f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f103 0208 	add.w	r2, r3, #8
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007908:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f103 0208 	add.w	r2, r3, #8
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f103 0208 	add.w	r2, r3, #8
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800794a:	b480      	push	{r7}
 800794c:	b085      	sub	sp, #20
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	689a      	ldr	r2, [r3, #8]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	1c5a      	adds	r2, r3, #1
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	601a      	str	r2, [r3, #0]
}
 8007986:	bf00      	nop
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007992:	b480      	push	{r7}
 8007994:	b085      	sub	sp, #20
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079a8:	d103      	bne.n	80079b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	e00c      	b.n	80079cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	3308      	adds	r3, #8
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	e002      	b.n	80079c0 <vListInsert+0x2e>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d2f6      	bcs.n	80079ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	601a      	str	r2, [r3, #0]
}
 80079f8:	bf00      	nop
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6892      	ldr	r2, [r2, #8]
 8007a1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	6852      	ldr	r2, [r2, #4]
 8007a24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d103      	bne.n	8007a38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	1e5a      	subs	r2, r3, #1
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10b      	bne.n	8007a84 <xQueueGenericReset+0x2c>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	60bb      	str	r3, [r7, #8]
}
 8007a7e:	bf00      	nop
 8007a80:	bf00      	nop
 8007a82:	e7fd      	b.n	8007a80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a84:	f002 f8a0 	bl	8009bc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a90:	68f9      	ldr	r1, [r7, #12]
 8007a92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a94:	fb01 f303 	mul.w	r3, r1, r3
 8007a98:	441a      	add	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	68f9      	ldr	r1, [r7, #12]
 8007ab8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007aba:	fb01 f303 	mul.w	r3, r1, r3
 8007abe:	441a      	add	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	22ff      	movs	r2, #255	@ 0xff
 8007ac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	22ff      	movs	r2, #255	@ 0xff
 8007ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d114      	bne.n	8007b04 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d01a      	beq.n	8007b18 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3310      	adds	r3, #16
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f001 f91a 	bl	8008d20 <xTaskRemoveFromEventList>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d012      	beq.n	8007b18 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007af2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b28 <xQueueGenericReset+0xd0>)
 8007af4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	e009      	b.n	8007b18 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	3310      	adds	r3, #16
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff fef1 	bl	80078f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3324      	adds	r3, #36	@ 0x24
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff feec 	bl	80078f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b18:	f002 f888 	bl	8009c2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b1c:	2301      	movs	r3, #1
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	e000ed04 	.word	0xe000ed04

08007b2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08e      	sub	sp, #56	@ 0x38
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10b      	bne.n	8007b58 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b52:	bf00      	nop
 8007b54:	bf00      	nop
 8007b56:	e7fd      	b.n	8007b54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10b      	bne.n	8007b76 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	e7fd      	b.n	8007b72 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <xQueueGenericCreateStatic+0x56>
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <xQueueGenericCreateStatic+0x5a>
 8007b82:	2301      	movs	r3, #1
 8007b84:	e000      	b.n	8007b88 <xQueueGenericCreateStatic+0x5c>
 8007b86:	2300      	movs	r3, #0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10b      	bne.n	8007ba4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	623b      	str	r3, [r7, #32]
}
 8007b9e:	bf00      	nop
 8007ba0:	bf00      	nop
 8007ba2:	e7fd      	b.n	8007ba0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d102      	bne.n	8007bb0 <xQueueGenericCreateStatic+0x84>
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <xQueueGenericCreateStatic+0x88>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e000      	b.n	8007bb6 <xQueueGenericCreateStatic+0x8a>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10b      	bne.n	8007bd2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	61fb      	str	r3, [r7, #28]
}
 8007bcc:	bf00      	nop
 8007bce:	bf00      	nop
 8007bd0:	e7fd      	b.n	8007bce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bd2:	2350      	movs	r3, #80	@ 0x50
 8007bd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2b50      	cmp	r3, #80	@ 0x50
 8007bda:	d00b      	beq.n	8007bf4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	61bb      	str	r3, [r7, #24]
}
 8007bee:	bf00      	nop
 8007bf0:	bf00      	nop
 8007bf2:	e7fd      	b.n	8007bf0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bf4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00d      	beq.n	8007c1c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c08:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	4613      	mov	r3, r2
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 f805 	bl	8007c26 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3730      	adds	r7, #48	@ 0x30
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	607a      	str	r2, [r7, #4]
 8007c32:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d103      	bne.n	8007c42 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	e002      	b.n	8007c48 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c54:	2101      	movs	r1, #1
 8007c56:	69b8      	ldr	r0, [r7, #24]
 8007c58:	f7ff fefe 	bl	8007a58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	78fa      	ldrb	r2, [r7, #3]
 8007c60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c64:	bf00      	nop
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08e      	sub	sp, #56	@ 0x38
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10b      	bne.n	8007ca0 <xQueueGenericSend+0x34>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c9a:	bf00      	nop
 8007c9c:	bf00      	nop
 8007c9e:	e7fd      	b.n	8007c9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d103      	bne.n	8007cae <xQueueGenericSend+0x42>
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <xQueueGenericSend+0x46>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e000      	b.n	8007cb4 <xQueueGenericSend+0x48>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10b      	bne.n	8007cd0 <xQueueGenericSend+0x64>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007cca:	bf00      	nop
 8007ccc:	bf00      	nop
 8007cce:	e7fd      	b.n	8007ccc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d103      	bne.n	8007cde <xQueueGenericSend+0x72>
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d101      	bne.n	8007ce2 <xQueueGenericSend+0x76>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e000      	b.n	8007ce4 <xQueueGenericSend+0x78>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10b      	bne.n	8007d00 <xQueueGenericSend+0x94>
	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	623b      	str	r3, [r7, #32]
}
 8007cfa:	bf00      	nop
 8007cfc:	bf00      	nop
 8007cfe:	e7fd      	b.n	8007cfc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d00:	f001 f9f6 	bl	80090f0 <xTaskGetSchedulerState>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d102      	bne.n	8007d10 <xQueueGenericSend+0xa4>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <xQueueGenericSend+0xa8>
 8007d10:	2301      	movs	r3, #1
 8007d12:	e000      	b.n	8007d16 <xQueueGenericSend+0xaa>
 8007d14:	2300      	movs	r3, #0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <xQueueGenericSend+0xc6>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	61fb      	str	r3, [r7, #28]
}
 8007d2c:	bf00      	nop
 8007d2e:	bf00      	nop
 8007d30:	e7fd      	b.n	8007d2e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d32:	f001 ff49 	bl	8009bc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d302      	bcc.n	8007d48 <xQueueGenericSend+0xdc>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d129      	bne.n	8007d9c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	68b9      	ldr	r1, [r7, #8]
 8007d4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d4e:	f000 fa0f 	bl	8008170 <prvCopyDataToQueue>
 8007d52:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d010      	beq.n	8007d7e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5e:	3324      	adds	r3, #36	@ 0x24
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 ffdd 	bl	8008d20 <xTaskRemoveFromEventList>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d013      	beq.n	8007d94 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8007e6c <xQueueGenericSend+0x200>)
 8007d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	e00a      	b.n	8007d94 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d007      	beq.n	8007d94 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d84:	4b39      	ldr	r3, [pc, #228]	@ (8007e6c <xQueueGenericSend+0x200>)
 8007d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d94:	f001 ff4a 	bl	8009c2c <vPortExitCritical>
				return pdPASS;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e063      	b.n	8007e64 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d103      	bne.n	8007daa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007da2:	f001 ff43 	bl	8009c2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	e05c      	b.n	8007e64 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d106      	bne.n	8007dbe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007db0:	f107 0314 	add.w	r3, r7, #20
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 f83f 	bl	8008e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dbe:	f001 ff35 	bl	8009c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dc2:	f000 fd87 	bl	80088d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dc6:	f001 feff 	bl	8009bc8 <vPortEnterCritical>
 8007dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007dd0:	b25b      	sxtb	r3, r3
 8007dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dd6:	d103      	bne.n	8007de0 <xQueueGenericSend+0x174>
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007de6:	b25b      	sxtb	r3, r3
 8007de8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dec:	d103      	bne.n	8007df6 <xQueueGenericSend+0x18a>
 8007dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007df6:	f001 ff19 	bl	8009c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dfa:	1d3a      	adds	r2, r7, #4
 8007dfc:	f107 0314 	add.w	r3, r7, #20
 8007e00:	4611      	mov	r1, r2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f001 f82e 	bl	8008e64 <xTaskCheckForTimeOut>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d124      	bne.n	8007e58 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e10:	f000 faa6 	bl	8008360 <prvIsQueueFull>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d018      	beq.n	8007e4c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1c:	3310      	adds	r3, #16
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	4611      	mov	r1, r2
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 ff2a 	bl	8008c7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e2a:	f000 fa31 	bl	8008290 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e2e:	f000 fd5f 	bl	80088f0 <xTaskResumeAll>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f47f af7c 	bne.w	8007d32 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e6c <xQueueGenericSend+0x200>)
 8007e3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	e772      	b.n	8007d32 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e4e:	f000 fa1f 	bl	8008290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e52:	f000 fd4d 	bl	80088f0 <xTaskResumeAll>
 8007e56:	e76c      	b.n	8007d32 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e5a:	f000 fa19 	bl	8008290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e5e:	f000 fd47 	bl	80088f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3738      	adds	r7, #56	@ 0x38
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	e000ed04 	.word	0xe000ed04

08007e70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b090      	sub	sp, #64	@ 0x40
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10b      	bne.n	8007ea0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e9a:	bf00      	nop
 8007e9c:	bf00      	nop
 8007e9e:	e7fd      	b.n	8007e9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d103      	bne.n	8007eae <xQueueGenericSendFromISR+0x3e>
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <xQueueGenericSendFromISR+0x42>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e000      	b.n	8007eb4 <xQueueGenericSendFromISR+0x44>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10b      	bne.n	8007ed0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	e7fd      	b.n	8007ecc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d103      	bne.n	8007ede <xQueueGenericSendFromISR+0x6e>
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d101      	bne.n	8007ee2 <xQueueGenericSendFromISR+0x72>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e000      	b.n	8007ee4 <xQueueGenericSendFromISR+0x74>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10b      	bne.n	8007f00 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	623b      	str	r3, [r7, #32]
}
 8007efa:	bf00      	nop
 8007efc:	bf00      	nop
 8007efe:	e7fd      	b.n	8007efc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f00:	f001 ff42 	bl	8009d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f04:	f3ef 8211 	mrs	r2, BASEPRI
 8007f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	61fa      	str	r2, [r7, #28]
 8007f1a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f1c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f1e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d302      	bcc.n	8007f32 <xQueueGenericSendFromISR+0xc2>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d12f      	bne.n	8007f92 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	68b9      	ldr	r1, [r7, #8]
 8007f46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f48:	f000 f912 	bl	8008170 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f4c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007f50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f54:	d112      	bne.n	8007f7c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d016      	beq.n	8007f8c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f60:	3324      	adds	r3, #36	@ 0x24
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 fedc 	bl	8008d20 <xTaskRemoveFromEventList>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00e      	beq.n	8007f8c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00b      	beq.n	8007f8c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	e007      	b.n	8007f8c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007f80:	3301      	adds	r3, #1
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	b25a      	sxtb	r2, r3
 8007f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007f90:	e001      	b.n	8007f96 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f98:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fa0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3740      	adds	r7, #64	@ 0x40
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08c      	sub	sp, #48	@ 0x30
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10b      	bne.n	8007fde <xQueueReceive+0x32>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	623b      	str	r3, [r7, #32]
}
 8007fd8:	bf00      	nop
 8007fda:	bf00      	nop
 8007fdc:	e7fd      	b.n	8007fda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d103      	bne.n	8007fec <xQueueReceive+0x40>
 8007fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <xQueueReceive+0x44>
 8007fec:	2301      	movs	r3, #1
 8007fee:	e000      	b.n	8007ff2 <xQueueReceive+0x46>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10b      	bne.n	800800e <xQueueReceive+0x62>
	__asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	61fb      	str	r3, [r7, #28]
}
 8008008:	bf00      	nop
 800800a:	bf00      	nop
 800800c:	e7fd      	b.n	800800a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800800e:	f001 f86f 	bl	80090f0 <xTaskGetSchedulerState>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d102      	bne.n	800801e <xQueueReceive+0x72>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <xQueueReceive+0x76>
 800801e:	2301      	movs	r3, #1
 8008020:	e000      	b.n	8008024 <xQueueReceive+0x78>
 8008022:	2300      	movs	r3, #0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10b      	bne.n	8008040 <xQueueReceive+0x94>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	61bb      	str	r3, [r7, #24]
}
 800803a:	bf00      	nop
 800803c:	bf00      	nop
 800803e:	e7fd      	b.n	800803c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008040:	f001 fdc2 	bl	8009bc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008048:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01f      	beq.n	8008090 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008050:	68b9      	ldr	r1, [r7, #8]
 8008052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008054:	f000 f8f6 	bl	8008244 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805a:	1e5a      	subs	r2, r3, #1
 800805c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00f      	beq.n	8008088 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806a:	3310      	adds	r3, #16
 800806c:	4618      	mov	r0, r3
 800806e:	f000 fe57 	bl	8008d20 <xTaskRemoveFromEventList>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d007      	beq.n	8008088 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008078:	4b3c      	ldr	r3, [pc, #240]	@ (800816c <xQueueReceive+0x1c0>)
 800807a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008088:	f001 fdd0 	bl	8009c2c <vPortExitCritical>
				return pdPASS;
 800808c:	2301      	movs	r3, #1
 800808e:	e069      	b.n	8008164 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d103      	bne.n	800809e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008096:	f001 fdc9 	bl	8009c2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800809a:	2300      	movs	r3, #0
 800809c:	e062      	b.n	8008164 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800809e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d106      	bne.n	80080b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080a4:	f107 0310 	add.w	r3, r7, #16
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 fec5 	bl	8008e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080ae:	2301      	movs	r3, #1
 80080b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080b2:	f001 fdbb 	bl	8009c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080b6:	f000 fc0d 	bl	80088d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080ba:	f001 fd85 	bl	8009bc8 <vPortEnterCritical>
 80080be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080c4:	b25b      	sxtb	r3, r3
 80080c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080ca:	d103      	bne.n	80080d4 <xQueueReceive+0x128>
 80080cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080da:	b25b      	sxtb	r3, r3
 80080dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080e0:	d103      	bne.n	80080ea <xQueueReceive+0x13e>
 80080e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080ea:	f001 fd9f 	bl	8009c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080ee:	1d3a      	adds	r2, r7, #4
 80080f0:	f107 0310 	add.w	r3, r7, #16
 80080f4:	4611      	mov	r1, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 feb4 	bl	8008e64 <xTaskCheckForTimeOut>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d123      	bne.n	800814a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008104:	f000 f916 	bl	8008334 <prvIsQueueEmpty>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d017      	beq.n	800813e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800810e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008110:	3324      	adds	r3, #36	@ 0x24
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	4611      	mov	r1, r2
 8008116:	4618      	mov	r0, r3
 8008118:	f000 fdb0 	bl	8008c7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800811c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800811e:	f000 f8b7 	bl	8008290 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008122:	f000 fbe5 	bl	80088f0 <xTaskResumeAll>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d189      	bne.n	8008040 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800812c:	4b0f      	ldr	r3, [pc, #60]	@ (800816c <xQueueReceive+0x1c0>)
 800812e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	e780      	b.n	8008040 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800813e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008140:	f000 f8a6 	bl	8008290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008144:	f000 fbd4 	bl	80088f0 <xTaskResumeAll>
 8008148:	e77a      	b.n	8008040 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800814a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800814c:	f000 f8a0 	bl	8008290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008150:	f000 fbce 	bl	80088f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008154:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008156:	f000 f8ed 	bl	8008334 <prvIsQueueEmpty>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	f43f af6f 	beq.w	8008040 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008162:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008164:	4618      	mov	r0, r3
 8008166:	3730      	adds	r7, #48	@ 0x30
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	e000ed04 	.word	0xe000ed04

08008170 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800817c:	2300      	movs	r3, #0
 800817e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008184:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10d      	bne.n	80081aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d14d      	bne.n	8008232 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 ffc6 	bl	800912c <xTaskPriorityDisinherit>
 80081a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	609a      	str	r2, [r3, #8]
 80081a8:	e043      	b.n	8008232 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d119      	bne.n	80081e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6858      	ldr	r0, [r3, #4]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b8:	461a      	mov	r2, r3
 80081ba:	68b9      	ldr	r1, [r7, #8]
 80081bc:	f00f fb59 	bl	8017872 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c8:	441a      	add	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d32b      	bcc.n	8008232 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	605a      	str	r2, [r3, #4]
 80081e2:	e026      	b.n	8008232 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	68d8      	ldr	r0, [r3, #12]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ec:	461a      	mov	r2, r3
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	f00f fb3f 	bl	8017872 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081fc:	425b      	negs	r3, r3
 80081fe:	441a      	add	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d207      	bcs.n	8008220 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008218:	425b      	negs	r3, r3
 800821a:	441a      	add	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d105      	bne.n	8008232 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	3b01      	subs	r3, #1
 8008230:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800823a:	697b      	ldr	r3, [r7, #20]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008252:	2b00      	cmp	r3, #0
 8008254:	d018      	beq.n	8008288 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68da      	ldr	r2, [r3, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825e:	441a      	add	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	429a      	cmp	r2, r3
 800826e:	d303      	bcc.n	8008278 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68d9      	ldr	r1, [r3, #12]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008280:	461a      	mov	r2, r3
 8008282:	6838      	ldr	r0, [r7, #0]
 8008284:	f00f faf5 	bl	8017872 <memcpy>
	}
}
 8008288:	bf00      	nop
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008298:	f001 fc96 	bl	8009bc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082a4:	e011      	b.n	80082ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d012      	beq.n	80082d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3324      	adds	r3, #36	@ 0x24
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fd34 	bl	8008d20 <xTaskRemoveFromEventList>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082be:	f000 fe35 	bl	8008f2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	dce9      	bgt.n	80082a6 <prvUnlockQueue+0x16>
 80082d2:	e000      	b.n	80082d6 <prvUnlockQueue+0x46>
					break;
 80082d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	22ff      	movs	r2, #255	@ 0xff
 80082da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80082de:	f001 fca5 	bl	8009c2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082e2:	f001 fc71 	bl	8009bc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082ee:	e011      	b.n	8008314 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d012      	beq.n	800831e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3310      	adds	r3, #16
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fd0f 	bl	8008d20 <xTaskRemoveFromEventList>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008308:	f000 fe10 	bl	8008f2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800830c:	7bbb      	ldrb	r3, [r7, #14]
 800830e:	3b01      	subs	r3, #1
 8008310:	b2db      	uxtb	r3, r3
 8008312:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008318:	2b00      	cmp	r3, #0
 800831a:	dce9      	bgt.n	80082f0 <prvUnlockQueue+0x60>
 800831c:	e000      	b.n	8008320 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800831e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	22ff      	movs	r2, #255	@ 0xff
 8008324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008328:	f001 fc80 	bl	8009c2c <vPortExitCritical>
}
 800832c:	bf00      	nop
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800833c:	f001 fc44 	bl	8009bc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008344:	2b00      	cmp	r3, #0
 8008346:	d102      	bne.n	800834e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008348:	2301      	movs	r3, #1
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	e001      	b.n	8008352 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800834e:	2300      	movs	r3, #0
 8008350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008352:	f001 fc6b 	bl	8009c2c <vPortExitCritical>

	return xReturn;
 8008356:	68fb      	ldr	r3, [r7, #12]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008368:	f001 fc2e 	bl	8009bc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008374:	429a      	cmp	r2, r3
 8008376:	d102      	bne.n	800837e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008378:	2301      	movs	r3, #1
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	e001      	b.n	8008382 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800837e:	2300      	movs	r3, #0
 8008380:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008382:	f001 fc53 	bl	8009c2c <vPortExitCritical>

	return xReturn;
 8008386:	68fb      	ldr	r3, [r7, #12]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	e014      	b.n	80083ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083a0:	4a0f      	ldr	r2, [pc, #60]	@ (80083e0 <vQueueAddToRegistry+0x50>)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10b      	bne.n	80083c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083ac:	490c      	ldr	r1, [pc, #48]	@ (80083e0 <vQueueAddToRegistry+0x50>)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083b6:	4a0a      	ldr	r2, [pc, #40]	@ (80083e0 <vQueueAddToRegistry+0x50>)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	4413      	add	r3, r2
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083c2:	e006      	b.n	80083d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3301      	adds	r3, #1
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b07      	cmp	r3, #7
 80083ce:	d9e7      	bls.n	80083a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083d0:	bf00      	nop
 80083d2:	bf00      	nop
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	20004fe0 	.word	0x20004fe0

080083e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083f4:	f001 fbe8 	bl	8009bc8 <vPortEnterCritical>
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083fe:	b25b      	sxtb	r3, r3
 8008400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008404:	d103      	bne.n	800840e <vQueueWaitForMessageRestricted+0x2a>
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008414:	b25b      	sxtb	r3, r3
 8008416:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800841a:	d103      	bne.n	8008424 <vQueueWaitForMessageRestricted+0x40>
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008424:	f001 fc02 	bl	8009c2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800842c:	2b00      	cmp	r3, #0
 800842e:	d106      	bne.n	800843e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	3324      	adds	r3, #36	@ 0x24
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	68b9      	ldr	r1, [r7, #8]
 8008438:	4618      	mov	r0, r3
 800843a:	f000 fc45 	bl	8008cc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800843e:	6978      	ldr	r0, [r7, #20]
 8008440:	f7ff ff26 	bl	8008290 <prvUnlockQueue>
	}
 8008444:	bf00      	nop
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08e      	sub	sp, #56	@ 0x38
 8008450:	af04      	add	r7, sp, #16
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800845a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10b      	bne.n	8008478 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	623b      	str	r3, [r7, #32]
}
 8008472:	bf00      	nop
 8008474:	bf00      	nop
 8008476:	e7fd      	b.n	8008474 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10b      	bne.n	8008496 <xTaskCreateStatic+0x4a>
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	61fb      	str	r3, [r7, #28]
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	e7fd      	b.n	8008492 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008496:	235c      	movs	r3, #92	@ 0x5c
 8008498:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	2b5c      	cmp	r3, #92	@ 0x5c
 800849e:	d00b      	beq.n	80084b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	61bb      	str	r3, [r7, #24]
}
 80084b2:	bf00      	nop
 80084b4:	bf00      	nop
 80084b6:	e7fd      	b.n	80084b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d01e      	beq.n	80084fe <xTaskCreateStatic+0xb2>
 80084c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d01b      	beq.n	80084fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084d8:	2300      	movs	r3, #0
 80084da:	9303      	str	r3, [sp, #12]
 80084dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084de:	9302      	str	r3, [sp, #8]
 80084e0:	f107 0314 	add.w	r3, r7, #20
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	68b9      	ldr	r1, [r7, #8]
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 f850 	bl	8008596 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80084f8:	f000 f8de 	bl	80086b8 <prvAddNewTaskToReadyList>
 80084fc:	e001      	b.n	8008502 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80084fe:	2300      	movs	r3, #0
 8008500:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008502:	697b      	ldr	r3, [r7, #20]
	}
 8008504:	4618      	mov	r0, r3
 8008506:	3728      	adds	r7, #40	@ 0x28
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800850c:	b580      	push	{r7, lr}
 800850e:	b08c      	sub	sp, #48	@ 0x30
 8008510:	af04      	add	r7, sp, #16
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	603b      	str	r3, [r7, #0]
 8008518:	4613      	mov	r3, r2
 800851a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800851c:	88fb      	ldrh	r3, [r7, #6]
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4618      	mov	r0, r3
 8008522:	f001 fc73 	bl	8009e0c <pvPortMalloc>
 8008526:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00e      	beq.n	800854c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800852e:	205c      	movs	r0, #92	@ 0x5c
 8008530:	f001 fc6c 	bl	8009e0c <pvPortMalloc>
 8008534:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	631a      	str	r2, [r3, #48]	@ 0x30
 8008542:	e005      	b.n	8008550 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008544:	6978      	ldr	r0, [r7, #20]
 8008546:	f001 fd2f 	bl	8009fa8 <vPortFree>
 800854a:	e001      	b.n	8008550 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800854c:	2300      	movs	r3, #0
 800854e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d017      	beq.n	8008586 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800855e:	88fa      	ldrh	r2, [r7, #6]
 8008560:	2300      	movs	r3, #0
 8008562:	9303      	str	r3, [sp, #12]
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	9302      	str	r3, [sp, #8]
 8008568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800856a:	9301      	str	r3, [sp, #4]
 800856c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856e:	9300      	str	r3, [sp, #0]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	68b9      	ldr	r1, [r7, #8]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 f80e 	bl	8008596 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800857a:	69f8      	ldr	r0, [r7, #28]
 800857c:	f000 f89c 	bl	80086b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008580:	2301      	movs	r3, #1
 8008582:	61bb      	str	r3, [r7, #24]
 8008584:	e002      	b.n	800858c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800858a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800858c:	69bb      	ldr	r3, [r7, #24]
	}
 800858e:	4618      	mov	r0, r3
 8008590:	3720      	adds	r7, #32
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b088      	sub	sp, #32
 800859a:	af00      	add	r7, sp, #0
 800859c:	60f8      	str	r0, [r7, #12]
 800859e:	60b9      	str	r1, [r7, #8]
 80085a0:	607a      	str	r2, [r7, #4]
 80085a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	461a      	mov	r2, r3
 80085ae:	21a5      	movs	r1, #165	@ 0xa5
 80085b0:	f00f f896 	bl	80176e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80085be:	3b01      	subs	r3, #1
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	f023 0307 	bic.w	r3, r3, #7
 80085cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00b      	beq.n	80085f0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80085d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	617b      	str	r3, [r7, #20]
}
 80085ea:	bf00      	nop
 80085ec:	bf00      	nop
 80085ee:	e7fd      	b.n	80085ec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d01f      	beq.n	8008636 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085f6:	2300      	movs	r3, #0
 80085f8:	61fb      	str	r3, [r7, #28]
 80085fa:	e012      	b.n	8008622 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	4413      	add	r3, r2
 8008602:	7819      	ldrb	r1, [r3, #0]
 8008604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	4413      	add	r3, r2
 800860a:	3334      	adds	r3, #52	@ 0x34
 800860c:	460a      	mov	r2, r1
 800860e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	4413      	add	r3, r2
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d006      	beq.n	800862a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	3301      	adds	r3, #1
 8008620:	61fb      	str	r3, [r7, #28]
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	2b0f      	cmp	r3, #15
 8008626:	d9e9      	bls.n	80085fc <prvInitialiseNewTask+0x66>
 8008628:	e000      	b.n	800862c <prvInitialiseNewTask+0x96>
			{
				break;
 800862a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800862c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862e:	2200      	movs	r2, #0
 8008630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008634:	e003      	b.n	800863e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800863e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008640:	2b37      	cmp	r3, #55	@ 0x37
 8008642:	d901      	bls.n	8008648 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008644:	2337      	movs	r3, #55	@ 0x37
 8008646:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800864c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008650:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008652:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008656:	2200      	movs	r2, #0
 8008658:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865c:	3304      	adds	r3, #4
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff f966 	bl	8007930 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008666:	3318      	adds	r3, #24
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff f961 	bl	8007930 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008672:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008676:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800867e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008682:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008686:	2200      	movs	r2, #0
 8008688:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800868a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	68f9      	ldr	r1, [r7, #12]
 8008696:	69b8      	ldr	r0, [r7, #24]
 8008698:	f001 f966 	bl	8009968 <pxPortInitialiseStack>
 800869c:	4602      	mov	r2, r0
 800869e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086ae:	bf00      	nop
 80086b0:	3720      	adds	r7, #32
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086c0:	f001 fa82 	bl	8009bc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086c4:	4b2d      	ldr	r3, [pc, #180]	@ (800877c <prvAddNewTaskToReadyList+0xc4>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3301      	adds	r3, #1
 80086ca:	4a2c      	ldr	r2, [pc, #176]	@ (800877c <prvAddNewTaskToReadyList+0xc4>)
 80086cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086ce:	4b2c      	ldr	r3, [pc, #176]	@ (8008780 <prvAddNewTaskToReadyList+0xc8>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d109      	bne.n	80086ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008780 <prvAddNewTaskToReadyList+0xc8>)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086dc:	4b27      	ldr	r3, [pc, #156]	@ (800877c <prvAddNewTaskToReadyList+0xc4>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d110      	bne.n	8008706 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086e4:	f000 fc46 	bl	8008f74 <prvInitialiseTaskLists>
 80086e8:	e00d      	b.n	8008706 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086ea:	4b26      	ldr	r3, [pc, #152]	@ (8008784 <prvAddNewTaskToReadyList+0xcc>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d109      	bne.n	8008706 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086f2:	4b23      	ldr	r3, [pc, #140]	@ (8008780 <prvAddNewTaskToReadyList+0xc8>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d802      	bhi.n	8008706 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008700:	4a1f      	ldr	r2, [pc, #124]	@ (8008780 <prvAddNewTaskToReadyList+0xc8>)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008706:	4b20      	ldr	r3, [pc, #128]	@ (8008788 <prvAddNewTaskToReadyList+0xd0>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3301      	adds	r3, #1
 800870c:	4a1e      	ldr	r2, [pc, #120]	@ (8008788 <prvAddNewTaskToReadyList+0xd0>)
 800870e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008710:	4b1d      	ldr	r3, [pc, #116]	@ (8008788 <prvAddNewTaskToReadyList+0xd0>)
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800871c:	4b1b      	ldr	r3, [pc, #108]	@ (800878c <prvAddNewTaskToReadyList+0xd4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	429a      	cmp	r2, r3
 8008722:	d903      	bls.n	800872c <prvAddNewTaskToReadyList+0x74>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008728:	4a18      	ldr	r2, [pc, #96]	@ (800878c <prvAddNewTaskToReadyList+0xd4>)
 800872a:	6013      	str	r3, [r2, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4a15      	ldr	r2, [pc, #84]	@ (8008790 <prvAddNewTaskToReadyList+0xd8>)
 800873a:	441a      	add	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	3304      	adds	r3, #4
 8008740:	4619      	mov	r1, r3
 8008742:	4610      	mov	r0, r2
 8008744:	f7ff f901 	bl	800794a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008748:	f001 fa70 	bl	8009c2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800874c:	4b0d      	ldr	r3, [pc, #52]	@ (8008784 <prvAddNewTaskToReadyList+0xcc>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00e      	beq.n	8008772 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008754:	4b0a      	ldr	r3, [pc, #40]	@ (8008780 <prvAddNewTaskToReadyList+0xc8>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875e:	429a      	cmp	r2, r3
 8008760:	d207      	bcs.n	8008772 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008762:	4b0c      	ldr	r3, [pc, #48]	@ (8008794 <prvAddNewTaskToReadyList+0xdc>)
 8008764:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008772:	bf00      	nop
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	200054f4 	.word	0x200054f4
 8008780:	20005020 	.word	0x20005020
 8008784:	20005500 	.word	0x20005500
 8008788:	20005510 	.word	0x20005510
 800878c:	200054fc 	.word	0x200054fc
 8008790:	20005024 	.word	0x20005024
 8008794:	e000ed04 	.word	0xe000ed04

08008798 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087a0:	2300      	movs	r3, #0
 80087a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d018      	beq.n	80087dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087aa:	4b14      	ldr	r3, [pc, #80]	@ (80087fc <vTaskDelay+0x64>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00b      	beq.n	80087ca <vTaskDelay+0x32>
	__asm volatile
 80087b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	60bb      	str	r3, [r7, #8]
}
 80087c4:	bf00      	nop
 80087c6:	bf00      	nop
 80087c8:	e7fd      	b.n	80087c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087ca:	f000 f883 	bl	80088d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087ce:	2100      	movs	r1, #0
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fd1b 	bl	800920c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087d6:	f000 f88b 	bl	80088f0 <xTaskResumeAll>
 80087da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d107      	bne.n	80087f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80087e2:	4b07      	ldr	r3, [pc, #28]	@ (8008800 <vTaskDelay+0x68>)
 80087e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087f2:	bf00      	nop
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	2000551c 	.word	0x2000551c
 8008800:	e000ed04 	.word	0xe000ed04

08008804 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08a      	sub	sp, #40	@ 0x28
 8008808:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800880a:	2300      	movs	r3, #0
 800880c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800880e:	2300      	movs	r3, #0
 8008810:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008812:	463a      	mov	r2, r7
 8008814:	1d39      	adds	r1, r7, #4
 8008816:	f107 0308 	add.w	r3, r7, #8
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff f834 	bl	8007888 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	9202      	str	r2, [sp, #8]
 8008828:	9301      	str	r3, [sp, #4]
 800882a:	2300      	movs	r3, #0
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	2300      	movs	r3, #0
 8008830:	460a      	mov	r2, r1
 8008832:	4922      	ldr	r1, [pc, #136]	@ (80088bc <vTaskStartScheduler+0xb8>)
 8008834:	4822      	ldr	r0, [pc, #136]	@ (80088c0 <vTaskStartScheduler+0xbc>)
 8008836:	f7ff fe09 	bl	800844c <xTaskCreateStatic>
 800883a:	4603      	mov	r3, r0
 800883c:	4a21      	ldr	r2, [pc, #132]	@ (80088c4 <vTaskStartScheduler+0xc0>)
 800883e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008840:	4b20      	ldr	r3, [pc, #128]	@ (80088c4 <vTaskStartScheduler+0xc0>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008848:	2301      	movs	r3, #1
 800884a:	617b      	str	r3, [r7, #20]
 800884c:	e001      	b.n	8008852 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800884e:	2300      	movs	r3, #0
 8008850:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d102      	bne.n	800885e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008858:	f000 fd2c 	bl	80092b4 <xTimerCreateTimerTask>
 800885c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d116      	bne.n	8008892 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	613b      	str	r3, [r7, #16]
}
 8008876:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008878:	4b13      	ldr	r3, [pc, #76]	@ (80088c8 <vTaskStartScheduler+0xc4>)
 800887a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800887e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008880:	4b12      	ldr	r3, [pc, #72]	@ (80088cc <vTaskStartScheduler+0xc8>)
 8008882:	2201      	movs	r2, #1
 8008884:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008886:	4b12      	ldr	r3, [pc, #72]	@ (80088d0 <vTaskStartScheduler+0xcc>)
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800888c:	f001 f8f8 	bl	8009a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008890:	e00f      	b.n	80088b2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008898:	d10b      	bne.n	80088b2 <vTaskStartScheduler+0xae>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	60fb      	str	r3, [r7, #12]
}
 80088ac:	bf00      	nop
 80088ae:	bf00      	nop
 80088b0:	e7fd      	b.n	80088ae <vTaskStartScheduler+0xaa>
}
 80088b2:	bf00      	nop
 80088b4:	3718      	adds	r7, #24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	080186bc 	.word	0x080186bc
 80088c0:	08008f45 	.word	0x08008f45
 80088c4:	20005518 	.word	0x20005518
 80088c8:	20005514 	.word	0x20005514
 80088cc:	20005500 	.word	0x20005500
 80088d0:	200054f8 	.word	0x200054f8

080088d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088d8:	4b04      	ldr	r3, [pc, #16]	@ (80088ec <vTaskSuspendAll+0x18>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3301      	adds	r3, #1
 80088de:	4a03      	ldr	r2, [pc, #12]	@ (80088ec <vTaskSuspendAll+0x18>)
 80088e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088e2:	bf00      	nop
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	2000551c 	.word	0x2000551c

080088f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088fa:	2300      	movs	r3, #0
 80088fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088fe:	4b42      	ldr	r3, [pc, #264]	@ (8008a08 <xTaskResumeAll+0x118>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10b      	bne.n	800891e <xTaskResumeAll+0x2e>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	603b      	str	r3, [r7, #0]
}
 8008918:	bf00      	nop
 800891a:	bf00      	nop
 800891c:	e7fd      	b.n	800891a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800891e:	f001 f953 	bl	8009bc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008922:	4b39      	ldr	r3, [pc, #228]	@ (8008a08 <xTaskResumeAll+0x118>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3b01      	subs	r3, #1
 8008928:	4a37      	ldr	r2, [pc, #220]	@ (8008a08 <xTaskResumeAll+0x118>)
 800892a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800892c:	4b36      	ldr	r3, [pc, #216]	@ (8008a08 <xTaskResumeAll+0x118>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d162      	bne.n	80089fa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008934:	4b35      	ldr	r3, [pc, #212]	@ (8008a0c <xTaskResumeAll+0x11c>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d05e      	beq.n	80089fa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800893c:	e02f      	b.n	800899e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800893e:	4b34      	ldr	r3, [pc, #208]	@ (8008a10 <xTaskResumeAll+0x120>)
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3318      	adds	r3, #24
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff f85a 	bl	8007a04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3304      	adds	r3, #4
 8008954:	4618      	mov	r0, r3
 8008956:	f7ff f855 	bl	8007a04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800895e:	4b2d      	ldr	r3, [pc, #180]	@ (8008a14 <xTaskResumeAll+0x124>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d903      	bls.n	800896e <xTaskResumeAll+0x7e>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896a:	4a2a      	ldr	r2, [pc, #168]	@ (8008a14 <xTaskResumeAll+0x124>)
 800896c:	6013      	str	r3, [r2, #0]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008972:	4613      	mov	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4a27      	ldr	r2, [pc, #156]	@ (8008a18 <xTaskResumeAll+0x128>)
 800897c:	441a      	add	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3304      	adds	r3, #4
 8008982:	4619      	mov	r1, r3
 8008984:	4610      	mov	r0, r2
 8008986:	f7fe ffe0 	bl	800794a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800898e:	4b23      	ldr	r3, [pc, #140]	@ (8008a1c <xTaskResumeAll+0x12c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008994:	429a      	cmp	r2, r3
 8008996:	d302      	bcc.n	800899e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008998:	4b21      	ldr	r3, [pc, #132]	@ (8008a20 <xTaskResumeAll+0x130>)
 800899a:	2201      	movs	r2, #1
 800899c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800899e:	4b1c      	ldr	r3, [pc, #112]	@ (8008a10 <xTaskResumeAll+0x120>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1cb      	bne.n	800893e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089ac:	f000 fb80 	bl	80090b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008a24 <xTaskResumeAll+0x134>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d010      	beq.n	80089de <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089bc:	f000 f846 	bl	8008a4c <xTaskIncrementTick>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80089c6:	4b16      	ldr	r3, [pc, #88]	@ (8008a20 <xTaskResumeAll+0x130>)
 80089c8:	2201      	movs	r2, #1
 80089ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1f1      	bne.n	80089bc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80089d8:	4b12      	ldr	r3, [pc, #72]	@ (8008a24 <xTaskResumeAll+0x134>)
 80089da:	2200      	movs	r2, #0
 80089dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089de:	4b10      	ldr	r3, [pc, #64]	@ (8008a20 <xTaskResumeAll+0x130>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d009      	beq.n	80089fa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089e6:	2301      	movs	r3, #1
 80089e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008a28 <xTaskResumeAll+0x138>)
 80089ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089fa:	f001 f917 	bl	8009c2c <vPortExitCritical>

	return xAlreadyYielded;
 80089fe:	68bb      	ldr	r3, [r7, #8]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	2000551c 	.word	0x2000551c
 8008a0c:	200054f4 	.word	0x200054f4
 8008a10:	200054b4 	.word	0x200054b4
 8008a14:	200054fc 	.word	0x200054fc
 8008a18:	20005024 	.word	0x20005024
 8008a1c:	20005020 	.word	0x20005020
 8008a20:	20005508 	.word	0x20005508
 8008a24:	20005504 	.word	0x20005504
 8008a28:	e000ed04 	.word	0xe000ed04

08008a2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a32:	4b05      	ldr	r3, [pc, #20]	@ (8008a48 <xTaskGetTickCount+0x1c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a38:	687b      	ldr	r3, [r7, #4]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	200054f8 	.word	0x200054f8

08008a4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a52:	2300      	movs	r3, #0
 8008a54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a56:	4b4f      	ldr	r3, [pc, #316]	@ (8008b94 <xTaskIncrementTick+0x148>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f040 8090 	bne.w	8008b80 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a60:	4b4d      	ldr	r3, [pc, #308]	@ (8008b98 <xTaskIncrementTick+0x14c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3301      	adds	r3, #1
 8008a66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a68:	4a4b      	ldr	r2, [pc, #300]	@ (8008b98 <xTaskIncrementTick+0x14c>)
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d121      	bne.n	8008ab8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a74:	4b49      	ldr	r3, [pc, #292]	@ (8008b9c <xTaskIncrementTick+0x150>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00b      	beq.n	8008a96 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	603b      	str	r3, [r7, #0]
}
 8008a90:	bf00      	nop
 8008a92:	bf00      	nop
 8008a94:	e7fd      	b.n	8008a92 <xTaskIncrementTick+0x46>
 8008a96:	4b41      	ldr	r3, [pc, #260]	@ (8008b9c <xTaskIncrementTick+0x150>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	60fb      	str	r3, [r7, #12]
 8008a9c:	4b40      	ldr	r3, [pc, #256]	@ (8008ba0 <xTaskIncrementTick+0x154>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a3e      	ldr	r2, [pc, #248]	@ (8008b9c <xTaskIncrementTick+0x150>)
 8008aa2:	6013      	str	r3, [r2, #0]
 8008aa4:	4a3e      	ldr	r2, [pc, #248]	@ (8008ba0 <xTaskIncrementTick+0x154>)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6013      	str	r3, [r2, #0]
 8008aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8008ba4 <xTaskIncrementTick+0x158>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	4a3c      	ldr	r2, [pc, #240]	@ (8008ba4 <xTaskIncrementTick+0x158>)
 8008ab2:	6013      	str	r3, [r2, #0]
 8008ab4:	f000 fafc 	bl	80090b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ab8:	4b3b      	ldr	r3, [pc, #236]	@ (8008ba8 <xTaskIncrementTick+0x15c>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d349      	bcc.n	8008b56 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ac2:	4b36      	ldr	r3, [pc, #216]	@ (8008b9c <xTaskIncrementTick+0x150>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d104      	bne.n	8008ad6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008acc:	4b36      	ldr	r3, [pc, #216]	@ (8008ba8 <xTaskIncrementTick+0x15c>)
 8008ace:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ad2:	601a      	str	r2, [r3, #0]
					break;
 8008ad4:	e03f      	b.n	8008b56 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad6:	4b31      	ldr	r3, [pc, #196]	@ (8008b9c <xTaskIncrementTick+0x150>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d203      	bcs.n	8008af6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008aee:	4a2e      	ldr	r2, [pc, #184]	@ (8008ba8 <xTaskIncrementTick+0x15c>)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008af4:	e02f      	b.n	8008b56 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	3304      	adds	r3, #4
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fe ff82 	bl	8007a04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d004      	beq.n	8008b12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	3318      	adds	r3, #24
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fe ff79 	bl	8007a04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b16:	4b25      	ldr	r3, [pc, #148]	@ (8008bac <xTaskIncrementTick+0x160>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d903      	bls.n	8008b26 <xTaskIncrementTick+0xda>
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b22:	4a22      	ldr	r2, [pc, #136]	@ (8008bac <xTaskIncrementTick+0x160>)
 8008b24:	6013      	str	r3, [r2, #0]
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4a1f      	ldr	r2, [pc, #124]	@ (8008bb0 <xTaskIncrementTick+0x164>)
 8008b34:	441a      	add	r2, r3
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	f7fe ff04 	bl	800794a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b46:	4b1b      	ldr	r3, [pc, #108]	@ (8008bb4 <xTaskIncrementTick+0x168>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d3b8      	bcc.n	8008ac2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008b50:	2301      	movs	r3, #1
 8008b52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b54:	e7b5      	b.n	8008ac2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b56:	4b17      	ldr	r3, [pc, #92]	@ (8008bb4 <xTaskIncrementTick+0x168>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b5c:	4914      	ldr	r1, [pc, #80]	@ (8008bb0 <xTaskIncrementTick+0x164>)
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	440b      	add	r3, r1
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d901      	bls.n	8008b72 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b72:	4b11      	ldr	r3, [pc, #68]	@ (8008bb8 <xTaskIncrementTick+0x16c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d007      	beq.n	8008b8a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	e004      	b.n	8008b8a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b80:	4b0e      	ldr	r3, [pc, #56]	@ (8008bbc <xTaskIncrementTick+0x170>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3301      	adds	r3, #1
 8008b86:	4a0d      	ldr	r2, [pc, #52]	@ (8008bbc <xTaskIncrementTick+0x170>)
 8008b88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b8a:	697b      	ldr	r3, [r7, #20]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3718      	adds	r7, #24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	2000551c 	.word	0x2000551c
 8008b98:	200054f8 	.word	0x200054f8
 8008b9c:	200054ac 	.word	0x200054ac
 8008ba0:	200054b0 	.word	0x200054b0
 8008ba4:	2000550c 	.word	0x2000550c
 8008ba8:	20005514 	.word	0x20005514
 8008bac:	200054fc 	.word	0x200054fc
 8008bb0:	20005024 	.word	0x20005024
 8008bb4:	20005020 	.word	0x20005020
 8008bb8:	20005508 	.word	0x20005508
 8008bbc:	20005504 	.word	0x20005504

08008bc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bc6:	4b28      	ldr	r3, [pc, #160]	@ (8008c68 <vTaskSwitchContext+0xa8>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bce:	4b27      	ldr	r3, [pc, #156]	@ (8008c6c <vTaskSwitchContext+0xac>)
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bd4:	e042      	b.n	8008c5c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008bd6:	4b25      	ldr	r3, [pc, #148]	@ (8008c6c <vTaskSwitchContext+0xac>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bdc:	4b24      	ldr	r3, [pc, #144]	@ (8008c70 <vTaskSwitchContext+0xb0>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	60fb      	str	r3, [r7, #12]
 8008be2:	e011      	b.n	8008c08 <vTaskSwitchContext+0x48>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10b      	bne.n	8008c02 <vTaskSwitchContext+0x42>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	607b      	str	r3, [r7, #4]
}
 8008bfc:	bf00      	nop
 8008bfe:	bf00      	nop
 8008c00:	e7fd      	b.n	8008bfe <vTaskSwitchContext+0x3e>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	491a      	ldr	r1, [pc, #104]	@ (8008c74 <vTaskSwitchContext+0xb4>)
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0e3      	beq.n	8008be4 <vTaskSwitchContext+0x24>
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4a13      	ldr	r2, [pc, #76]	@ (8008c74 <vTaskSwitchContext+0xb4>)
 8008c28:	4413      	add	r3, r2
 8008c2a:	60bb      	str	r3, [r7, #8]
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	605a      	str	r2, [r3, #4]
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d104      	bne.n	8008c4c <vTaskSwitchContext+0x8c>
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	605a      	str	r2, [r3, #4]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	4a09      	ldr	r2, [pc, #36]	@ (8008c78 <vTaskSwitchContext+0xb8>)
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	4a06      	ldr	r2, [pc, #24]	@ (8008c70 <vTaskSwitchContext+0xb0>)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6013      	str	r3, [r2, #0]
}
 8008c5c:	bf00      	nop
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	2000551c 	.word	0x2000551c
 8008c6c:	20005508 	.word	0x20005508
 8008c70:	200054fc 	.word	0x200054fc
 8008c74:	20005024 	.word	0x20005024
 8008c78:	20005020 	.word	0x20005020

08008c7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10b      	bne.n	8008ca4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	60fb      	str	r3, [r7, #12]
}
 8008c9e:	bf00      	nop
 8008ca0:	bf00      	nop
 8008ca2:	e7fd      	b.n	8008ca0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ca4:	4b07      	ldr	r3, [pc, #28]	@ (8008cc4 <vTaskPlaceOnEventList+0x48>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	3318      	adds	r3, #24
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7fe fe70 	bl	8007992 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	6838      	ldr	r0, [r7, #0]
 8008cb6:	f000 faa9 	bl	800920c <prvAddCurrentTaskToDelayedList>
}
 8008cba:	bf00      	nop
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20005020 	.word	0x20005020

08008cc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10b      	bne.n	8008cf2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	617b      	str	r3, [r7, #20]
}
 8008cec:	bf00      	nop
 8008cee:	bf00      	nop
 8008cf0:	e7fd      	b.n	8008cee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8008d1c <vTaskPlaceOnEventListRestricted+0x54>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3318      	adds	r3, #24
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f7fe fe25 	bl	800794a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d002      	beq.n	8008d0c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008d06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d0a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d0c:	6879      	ldr	r1, [r7, #4]
 8008d0e:	68b8      	ldr	r0, [r7, #8]
 8008d10:	f000 fa7c 	bl	800920c <prvAddCurrentTaskToDelayedList>
	}
 8008d14:	bf00      	nop
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	20005020 	.word	0x20005020

08008d20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10b      	bne.n	8008d4e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	60fb      	str	r3, [r7, #12]
}
 8008d48:	bf00      	nop
 8008d4a:	bf00      	nop
 8008d4c:	e7fd      	b.n	8008d4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	3318      	adds	r3, #24
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe fe56 	bl	8007a04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d58:	4b1d      	ldr	r3, [pc, #116]	@ (8008dd0 <xTaskRemoveFromEventList+0xb0>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d11d      	bne.n	8008d9c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	3304      	adds	r3, #4
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fe fe4d 	bl	8007a04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d6e:	4b19      	ldr	r3, [pc, #100]	@ (8008dd4 <xTaskRemoveFromEventList+0xb4>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d903      	bls.n	8008d7e <xTaskRemoveFromEventList+0x5e>
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7a:	4a16      	ldr	r2, [pc, #88]	@ (8008dd4 <xTaskRemoveFromEventList+0xb4>)
 8008d7c:	6013      	str	r3, [r2, #0]
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4a13      	ldr	r2, [pc, #76]	@ (8008dd8 <xTaskRemoveFromEventList+0xb8>)
 8008d8c:	441a      	add	r2, r3
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	3304      	adds	r3, #4
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f7fe fdd8 	bl	800794a <vListInsertEnd>
 8008d9a:	e005      	b.n	8008da8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	3318      	adds	r3, #24
 8008da0:	4619      	mov	r1, r3
 8008da2:	480e      	ldr	r0, [pc, #56]	@ (8008ddc <xTaskRemoveFromEventList+0xbc>)
 8008da4:	f7fe fdd1 	bl	800794a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dac:	4b0c      	ldr	r3, [pc, #48]	@ (8008de0 <xTaskRemoveFromEventList+0xc0>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d905      	bls.n	8008dc2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008db6:	2301      	movs	r3, #1
 8008db8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008dba:	4b0a      	ldr	r3, [pc, #40]	@ (8008de4 <xTaskRemoveFromEventList+0xc4>)
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	e001      	b.n	8008dc6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008dc6:	697b      	ldr	r3, [r7, #20]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	2000551c 	.word	0x2000551c
 8008dd4:	200054fc 	.word	0x200054fc
 8008dd8:	20005024 	.word	0x20005024
 8008ddc:	200054b4 	.word	0x200054b4
 8008de0:	20005020 	.word	0x20005020
 8008de4:	20005508 	.word	0x20005508

08008de8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10b      	bne.n	8008e0e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	60fb      	str	r3, [r7, #12]
}
 8008e08:	bf00      	nop
 8008e0a:	bf00      	nop
 8008e0c:	e7fd      	b.n	8008e0a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008e0e:	f000 fedb 	bl	8009bc8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e12:	4b07      	ldr	r3, [pc, #28]	@ (8008e30 <vTaskSetTimeOutState+0x48>)
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008e1a:	4b06      	ldr	r3, [pc, #24]	@ (8008e34 <vTaskSetTimeOutState+0x4c>)
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008e22:	f000 ff03 	bl	8009c2c <vPortExitCritical>
}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	2000550c 	.word	0x2000550c
 8008e34:	200054f8 	.word	0x200054f8

08008e38 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e40:	4b06      	ldr	r3, [pc, #24]	@ (8008e5c <vTaskInternalSetTimeOutState+0x24>)
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e48:	4b05      	ldr	r3, [pc, #20]	@ (8008e60 <vTaskInternalSetTimeOutState+0x28>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	605a      	str	r2, [r3, #4]
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	2000550c 	.word	0x2000550c
 8008e60:	200054f8 	.word	0x200054f8

08008e64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10b      	bne.n	8008e8c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	613b      	str	r3, [r7, #16]
}
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	e7fd      	b.n	8008e88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10b      	bne.n	8008eaa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	60fb      	str	r3, [r7, #12]
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop
 8008ea8:	e7fd      	b.n	8008ea6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008eaa:	f000 fe8d 	bl	8009bc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008eae:	4b1d      	ldr	r3, [pc, #116]	@ (8008f24 <xTaskCheckForTimeOut+0xc0>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ec6:	d102      	bne.n	8008ece <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61fb      	str	r3, [r7, #28]
 8008ecc:	e023      	b.n	8008f16 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	4b15      	ldr	r3, [pc, #84]	@ (8008f28 <xTaskCheckForTimeOut+0xc4>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d007      	beq.n	8008eea <xTaskCheckForTimeOut+0x86>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	69ba      	ldr	r2, [r7, #24]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d302      	bcc.n	8008eea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	61fb      	str	r3, [r7, #28]
 8008ee8:	e015      	b.n	8008f16 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d20b      	bcs.n	8008f0c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	1ad2      	subs	r2, r2, r3
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff ff99 	bl	8008e38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f06:	2300      	movs	r3, #0
 8008f08:	61fb      	str	r3, [r7, #28]
 8008f0a:	e004      	b.n	8008f16 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f12:	2301      	movs	r3, #1
 8008f14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f16:	f000 fe89 	bl	8009c2c <vPortExitCritical>

	return xReturn;
 8008f1a:	69fb      	ldr	r3, [r7, #28]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3720      	adds	r7, #32
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	200054f8 	.word	0x200054f8
 8008f28:	2000550c 	.word	0x2000550c

08008f2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f30:	4b03      	ldr	r3, [pc, #12]	@ (8008f40 <vTaskMissedYield+0x14>)
 8008f32:	2201      	movs	r2, #1
 8008f34:	601a      	str	r2, [r3, #0]
}
 8008f36:	bf00      	nop
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	20005508 	.word	0x20005508

08008f44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f4c:	f000 f852 	bl	8008ff4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f50:	4b06      	ldr	r3, [pc, #24]	@ (8008f6c <prvIdleTask+0x28>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d9f9      	bls.n	8008f4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f58:	4b05      	ldr	r3, [pc, #20]	@ (8008f70 <prvIdleTask+0x2c>)
 8008f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f68:	e7f0      	b.n	8008f4c <prvIdleTask+0x8>
 8008f6a:	bf00      	nop
 8008f6c:	20005024 	.word	0x20005024
 8008f70:	e000ed04 	.word	0xe000ed04

08008f74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	607b      	str	r3, [r7, #4]
 8008f7e:	e00c      	b.n	8008f9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	4613      	mov	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4a12      	ldr	r2, [pc, #72]	@ (8008fd4 <prvInitialiseTaskLists+0x60>)
 8008f8c:	4413      	add	r3, r2
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe fcae 	bl	80078f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3301      	adds	r3, #1
 8008f98:	607b      	str	r3, [r7, #4]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b37      	cmp	r3, #55	@ 0x37
 8008f9e:	d9ef      	bls.n	8008f80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fa0:	480d      	ldr	r0, [pc, #52]	@ (8008fd8 <prvInitialiseTaskLists+0x64>)
 8008fa2:	f7fe fca5 	bl	80078f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fa6:	480d      	ldr	r0, [pc, #52]	@ (8008fdc <prvInitialiseTaskLists+0x68>)
 8008fa8:	f7fe fca2 	bl	80078f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fac:	480c      	ldr	r0, [pc, #48]	@ (8008fe0 <prvInitialiseTaskLists+0x6c>)
 8008fae:	f7fe fc9f 	bl	80078f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fb2:	480c      	ldr	r0, [pc, #48]	@ (8008fe4 <prvInitialiseTaskLists+0x70>)
 8008fb4:	f7fe fc9c 	bl	80078f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fb8:	480b      	ldr	r0, [pc, #44]	@ (8008fe8 <prvInitialiseTaskLists+0x74>)
 8008fba:	f7fe fc99 	bl	80078f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8008fec <prvInitialiseTaskLists+0x78>)
 8008fc0:	4a05      	ldr	r2, [pc, #20]	@ (8008fd8 <prvInitialiseTaskLists+0x64>)
 8008fc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff0 <prvInitialiseTaskLists+0x7c>)
 8008fc6:	4a05      	ldr	r2, [pc, #20]	@ (8008fdc <prvInitialiseTaskLists+0x68>)
 8008fc8:	601a      	str	r2, [r3, #0]
}
 8008fca:	bf00      	nop
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20005024 	.word	0x20005024
 8008fd8:	20005484 	.word	0x20005484
 8008fdc:	20005498 	.word	0x20005498
 8008fe0:	200054b4 	.word	0x200054b4
 8008fe4:	200054c8 	.word	0x200054c8
 8008fe8:	200054e0 	.word	0x200054e0
 8008fec:	200054ac 	.word	0x200054ac
 8008ff0:	200054b0 	.word	0x200054b0

08008ff4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ffa:	e019      	b.n	8009030 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ffc:	f000 fde4 	bl	8009bc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009000:	4b10      	ldr	r3, [pc, #64]	@ (8009044 <prvCheckTasksWaitingTermination+0x50>)
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3304      	adds	r3, #4
 800900c:	4618      	mov	r0, r3
 800900e:	f7fe fcf9 	bl	8007a04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009012:	4b0d      	ldr	r3, [pc, #52]	@ (8009048 <prvCheckTasksWaitingTermination+0x54>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3b01      	subs	r3, #1
 8009018:	4a0b      	ldr	r2, [pc, #44]	@ (8009048 <prvCheckTasksWaitingTermination+0x54>)
 800901a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800901c:	4b0b      	ldr	r3, [pc, #44]	@ (800904c <prvCheckTasksWaitingTermination+0x58>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3b01      	subs	r3, #1
 8009022:	4a0a      	ldr	r2, [pc, #40]	@ (800904c <prvCheckTasksWaitingTermination+0x58>)
 8009024:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009026:	f000 fe01 	bl	8009c2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f810 	bl	8009050 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009030:	4b06      	ldr	r3, [pc, #24]	@ (800904c <prvCheckTasksWaitingTermination+0x58>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e1      	bne.n	8008ffc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009038:	bf00      	nop
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	200054c8 	.word	0x200054c8
 8009048:	200054f4 	.word	0x200054f4
 800904c:	200054dc 	.word	0x200054dc

08009050 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800905e:	2b00      	cmp	r3, #0
 8009060:	d108      	bne.n	8009074 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009066:	4618      	mov	r0, r3
 8009068:	f000 ff9e 	bl	8009fa8 <vPortFree>
				vPortFree( pxTCB );
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 ff9b 	bl	8009fa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009072:	e019      	b.n	80090a8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800907a:	2b01      	cmp	r3, #1
 800907c:	d103      	bne.n	8009086 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 ff92 	bl	8009fa8 <vPortFree>
	}
 8009084:	e010      	b.n	80090a8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800908c:	2b02      	cmp	r3, #2
 800908e:	d00b      	beq.n	80090a8 <prvDeleteTCB+0x58>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	60fb      	str	r3, [r7, #12]
}
 80090a2:	bf00      	nop
 80090a4:	bf00      	nop
 80090a6:	e7fd      	b.n	80090a4 <prvDeleteTCB+0x54>
	}
 80090a8:	bf00      	nop
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090b6:	4b0c      	ldr	r3, [pc, #48]	@ (80090e8 <prvResetNextTaskUnblockTime+0x38>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d104      	bne.n	80090ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090c0:	4b0a      	ldr	r3, [pc, #40]	@ (80090ec <prvResetNextTaskUnblockTime+0x3c>)
 80090c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090c8:	e008      	b.n	80090dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090ca:	4b07      	ldr	r3, [pc, #28]	@ (80090e8 <prvResetNextTaskUnblockTime+0x38>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	4a04      	ldr	r2, [pc, #16]	@ (80090ec <prvResetNextTaskUnblockTime+0x3c>)
 80090da:	6013      	str	r3, [r2, #0]
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr
 80090e8:	200054ac 	.word	0x200054ac
 80090ec:	20005514 	.word	0x20005514

080090f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80090f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009124 <xTaskGetSchedulerState+0x34>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d102      	bne.n	8009104 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090fe:	2301      	movs	r3, #1
 8009100:	607b      	str	r3, [r7, #4]
 8009102:	e008      	b.n	8009116 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009104:	4b08      	ldr	r3, [pc, #32]	@ (8009128 <xTaskGetSchedulerState+0x38>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d102      	bne.n	8009112 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800910c:	2302      	movs	r3, #2
 800910e:	607b      	str	r3, [r7, #4]
 8009110:	e001      	b.n	8009116 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009112:	2300      	movs	r3, #0
 8009114:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009116:	687b      	ldr	r3, [r7, #4]
	}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	20005500 	.word	0x20005500
 8009128:	2000551c 	.word	0x2000551c

0800912c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009138:	2300      	movs	r3, #0
 800913a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d058      	beq.n	80091f4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009142:	4b2f      	ldr	r3, [pc, #188]	@ (8009200 <xTaskPriorityDisinherit+0xd4>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	429a      	cmp	r2, r3
 800914a:	d00b      	beq.n	8009164 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800914c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009150:	f383 8811 	msr	BASEPRI, r3
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	60fb      	str	r3, [r7, #12]
}
 800915e:	bf00      	nop
 8009160:	bf00      	nop
 8009162:	e7fd      	b.n	8009160 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10b      	bne.n	8009184 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	60bb      	str	r3, [r7, #8]
}
 800917e:	bf00      	nop
 8009180:	bf00      	nop
 8009182:	e7fd      	b.n	8009180 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009188:	1e5a      	subs	r2, r3, #1
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009196:	429a      	cmp	r2, r3
 8009198:	d02c      	beq.n	80091f4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d128      	bne.n	80091f4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	3304      	adds	r3, #4
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe fc2c 	bl	8007a04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009204 <xTaskPriorityDisinherit+0xd8>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d903      	bls.n	80091d4 <xTaskPriorityDisinherit+0xa8>
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d0:	4a0c      	ldr	r2, [pc, #48]	@ (8009204 <xTaskPriorityDisinherit+0xd8>)
 80091d2:	6013      	str	r3, [r2, #0]
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d8:	4613      	mov	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4a09      	ldr	r2, [pc, #36]	@ (8009208 <xTaskPriorityDisinherit+0xdc>)
 80091e2:	441a      	add	r2, r3
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	3304      	adds	r3, #4
 80091e8:	4619      	mov	r1, r3
 80091ea:	4610      	mov	r0, r2
 80091ec:	f7fe fbad 	bl	800794a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091f0:	2301      	movs	r3, #1
 80091f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091f4:	697b      	ldr	r3, [r7, #20]
	}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3718      	adds	r7, #24
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20005020 	.word	0x20005020
 8009204:	200054fc 	.word	0x200054fc
 8009208:	20005024 	.word	0x20005024

0800920c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009216:	4b21      	ldr	r3, [pc, #132]	@ (800929c <prvAddCurrentTaskToDelayedList+0x90>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800921c:	4b20      	ldr	r3, [pc, #128]	@ (80092a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3304      	adds	r3, #4
 8009222:	4618      	mov	r0, r3
 8009224:	f7fe fbee 	bl	8007a04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800922e:	d10a      	bne.n	8009246 <prvAddCurrentTaskToDelayedList+0x3a>
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d007      	beq.n	8009246 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009236:	4b1a      	ldr	r3, [pc, #104]	@ (80092a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3304      	adds	r3, #4
 800923c:	4619      	mov	r1, r3
 800923e:	4819      	ldr	r0, [pc, #100]	@ (80092a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009240:	f7fe fb83 	bl	800794a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009244:	e026      	b.n	8009294 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4413      	add	r3, r2
 800924c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800924e:	4b14      	ldr	r3, [pc, #80]	@ (80092a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	429a      	cmp	r2, r3
 800925c:	d209      	bcs.n	8009272 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800925e:	4b12      	ldr	r3, [pc, #72]	@ (80092a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	4b0f      	ldr	r3, [pc, #60]	@ (80092a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3304      	adds	r3, #4
 8009268:	4619      	mov	r1, r3
 800926a:	4610      	mov	r0, r2
 800926c:	f7fe fb91 	bl	8007992 <vListInsert>
}
 8009270:	e010      	b.n	8009294 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009272:	4b0e      	ldr	r3, [pc, #56]	@ (80092ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	4b0a      	ldr	r3, [pc, #40]	@ (80092a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3304      	adds	r3, #4
 800927c:	4619      	mov	r1, r3
 800927e:	4610      	mov	r0, r2
 8009280:	f7fe fb87 	bl	8007992 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009284:	4b0a      	ldr	r3, [pc, #40]	@ (80092b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	429a      	cmp	r2, r3
 800928c:	d202      	bcs.n	8009294 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800928e:	4a08      	ldr	r2, [pc, #32]	@ (80092b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	6013      	str	r3, [r2, #0]
}
 8009294:	bf00      	nop
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	200054f8 	.word	0x200054f8
 80092a0:	20005020 	.word	0x20005020
 80092a4:	200054e0 	.word	0x200054e0
 80092a8:	200054b0 	.word	0x200054b0
 80092ac:	200054ac 	.word	0x200054ac
 80092b0:	20005514 	.word	0x20005514

080092b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b08a      	sub	sp, #40	@ 0x28
 80092b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80092ba:	2300      	movs	r3, #0
 80092bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092be:	f000 fb13 	bl	80098e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092c2:	4b1d      	ldr	r3, [pc, #116]	@ (8009338 <xTimerCreateTimerTask+0x84>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d021      	beq.n	800930e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092ca:	2300      	movs	r3, #0
 80092cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80092ce:	2300      	movs	r3, #0
 80092d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092d2:	1d3a      	adds	r2, r7, #4
 80092d4:	f107 0108 	add.w	r1, r7, #8
 80092d8:	f107 030c 	add.w	r3, r7, #12
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fe faed 	bl	80078bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80092e2:	6879      	ldr	r1, [r7, #4]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	9202      	str	r2, [sp, #8]
 80092ea:	9301      	str	r3, [sp, #4]
 80092ec:	2302      	movs	r3, #2
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	2300      	movs	r3, #0
 80092f2:	460a      	mov	r2, r1
 80092f4:	4911      	ldr	r1, [pc, #68]	@ (800933c <xTimerCreateTimerTask+0x88>)
 80092f6:	4812      	ldr	r0, [pc, #72]	@ (8009340 <xTimerCreateTimerTask+0x8c>)
 80092f8:	f7ff f8a8 	bl	800844c <xTaskCreateStatic>
 80092fc:	4603      	mov	r3, r0
 80092fe:	4a11      	ldr	r2, [pc, #68]	@ (8009344 <xTimerCreateTimerTask+0x90>)
 8009300:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009302:	4b10      	ldr	r3, [pc, #64]	@ (8009344 <xTimerCreateTimerTask+0x90>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800930a:	2301      	movs	r3, #1
 800930c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10b      	bne.n	800932c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	613b      	str	r3, [r7, #16]
}
 8009326:	bf00      	nop
 8009328:	bf00      	nop
 800932a:	e7fd      	b.n	8009328 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800932c:	697b      	ldr	r3, [r7, #20]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20005550 	.word	0x20005550
 800933c:	080186c4 	.word	0x080186c4
 8009340:	08009481 	.word	0x08009481
 8009344:	20005554 	.word	0x20005554

08009348 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08a      	sub	sp, #40	@ 0x28
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009356:	2300      	movs	r3, #0
 8009358:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10b      	bne.n	8009378 <xTimerGenericCommand+0x30>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	623b      	str	r3, [r7, #32]
}
 8009372:	bf00      	nop
 8009374:	bf00      	nop
 8009376:	e7fd      	b.n	8009374 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009378:	4b19      	ldr	r3, [pc, #100]	@ (80093e0 <xTimerGenericCommand+0x98>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d02a      	beq.n	80093d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2b05      	cmp	r3, #5
 8009390:	dc18      	bgt.n	80093c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009392:	f7ff fead 	bl	80090f0 <xTaskGetSchedulerState>
 8009396:	4603      	mov	r3, r0
 8009398:	2b02      	cmp	r3, #2
 800939a:	d109      	bne.n	80093b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800939c:	4b10      	ldr	r3, [pc, #64]	@ (80093e0 <xTimerGenericCommand+0x98>)
 800939e:	6818      	ldr	r0, [r3, #0]
 80093a0:	f107 0110 	add.w	r1, r7, #16
 80093a4:	2300      	movs	r3, #0
 80093a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093a8:	f7fe fc60 	bl	8007c6c <xQueueGenericSend>
 80093ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80093ae:	e012      	b.n	80093d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80093b0:	4b0b      	ldr	r3, [pc, #44]	@ (80093e0 <xTimerGenericCommand+0x98>)
 80093b2:	6818      	ldr	r0, [r3, #0]
 80093b4:	f107 0110 	add.w	r1, r7, #16
 80093b8:	2300      	movs	r3, #0
 80093ba:	2200      	movs	r2, #0
 80093bc:	f7fe fc56 	bl	8007c6c <xQueueGenericSend>
 80093c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80093c2:	e008      	b.n	80093d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80093c4:	4b06      	ldr	r3, [pc, #24]	@ (80093e0 <xTimerGenericCommand+0x98>)
 80093c6:	6818      	ldr	r0, [r3, #0]
 80093c8:	f107 0110 	add.w	r1, r7, #16
 80093cc:	2300      	movs	r3, #0
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	f7fe fd4e 	bl	8007e70 <xQueueGenericSendFromISR>
 80093d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80093d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3728      	adds	r7, #40	@ 0x28
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	20005550 	.word	0x20005550

080093e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af02      	add	r7, sp, #8
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ee:	4b23      	ldr	r3, [pc, #140]	@ (800947c <prvProcessExpiredTimer+0x98>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	3304      	adds	r3, #4
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fe fb01 	bl	8007a04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009408:	f003 0304 	and.w	r3, r3, #4
 800940c:	2b00      	cmp	r3, #0
 800940e:	d023      	beq.n	8009458 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	699a      	ldr	r2, [r3, #24]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	18d1      	adds	r1, r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	6978      	ldr	r0, [r7, #20]
 800941e:	f000 f8d5 	bl	80095cc <prvInsertTimerInActiveList>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d020      	beq.n	800946a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009428:	2300      	movs	r3, #0
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	2300      	movs	r3, #0
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	2100      	movs	r1, #0
 8009432:	6978      	ldr	r0, [r7, #20]
 8009434:	f7ff ff88 	bl	8009348 <xTimerGenericCommand>
 8009438:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d114      	bne.n	800946a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	60fb      	str	r3, [r7, #12]
}
 8009452:	bf00      	nop
 8009454:	bf00      	nop
 8009456:	e7fd      	b.n	8009454 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800945e:	f023 0301 	bic.w	r3, r3, #1
 8009462:	b2da      	uxtb	r2, r3
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	6978      	ldr	r0, [r7, #20]
 8009470:	4798      	blx	r3
}
 8009472:	bf00      	nop
 8009474:	3718      	adds	r7, #24
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20005548 	.word	0x20005548

08009480 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009488:	f107 0308 	add.w	r3, r7, #8
 800948c:	4618      	mov	r0, r3
 800948e:	f000 f859 	bl	8009544 <prvGetNextExpireTime>
 8009492:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	4619      	mov	r1, r3
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 f805 	bl	80094a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800949e:	f000 f8d7 	bl	8009650 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094a2:	bf00      	nop
 80094a4:	e7f0      	b.n	8009488 <prvTimerTask+0x8>
	...

080094a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80094b2:	f7ff fa0f 	bl	80088d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094b6:	f107 0308 	add.w	r3, r7, #8
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 f866 	bl	800958c <prvSampleTimeNow>
 80094c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d130      	bne.n	800952a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10a      	bne.n	80094e4 <prvProcessTimerOrBlockTask+0x3c>
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d806      	bhi.n	80094e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80094d6:	f7ff fa0b 	bl	80088f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80094da:	68f9      	ldr	r1, [r7, #12]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7ff ff81 	bl	80093e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80094e2:	e024      	b.n	800952e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d008      	beq.n	80094fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80094ea:	4b13      	ldr	r3, [pc, #76]	@ (8009538 <prvProcessTimerOrBlockTask+0x90>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d101      	bne.n	80094f8 <prvProcessTimerOrBlockTask+0x50>
 80094f4:	2301      	movs	r3, #1
 80094f6:	e000      	b.n	80094fa <prvProcessTimerOrBlockTask+0x52>
 80094f8:	2300      	movs	r3, #0
 80094fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80094fc:	4b0f      	ldr	r3, [pc, #60]	@ (800953c <prvProcessTimerOrBlockTask+0x94>)
 80094fe:	6818      	ldr	r0, [r3, #0]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	4619      	mov	r1, r3
 800950a:	f7fe ff6b 	bl	80083e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800950e:	f7ff f9ef 	bl	80088f0 <xTaskResumeAll>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10a      	bne.n	800952e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009518:	4b09      	ldr	r3, [pc, #36]	@ (8009540 <prvProcessTimerOrBlockTask+0x98>)
 800951a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800951e:	601a      	str	r2, [r3, #0]
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	f3bf 8f6f 	isb	sy
}
 8009528:	e001      	b.n	800952e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800952a:	f7ff f9e1 	bl	80088f0 <xTaskResumeAll>
}
 800952e:	bf00      	nop
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	2000554c 	.word	0x2000554c
 800953c:	20005550 	.word	0x20005550
 8009540:	e000ed04 	.word	0xe000ed04

08009544 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800954c:	4b0e      	ldr	r3, [pc, #56]	@ (8009588 <prvGetNextExpireTime+0x44>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d101      	bne.n	800955a <prvGetNextExpireTime+0x16>
 8009556:	2201      	movs	r2, #1
 8009558:	e000      	b.n	800955c <prvGetNextExpireTime+0x18>
 800955a:	2200      	movs	r2, #0
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d105      	bne.n	8009574 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009568:	4b07      	ldr	r3, [pc, #28]	@ (8009588 <prvGetNextExpireTime+0x44>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	e001      	b.n	8009578 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009574:	2300      	movs	r3, #0
 8009576:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009578:	68fb      	ldr	r3, [r7, #12]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	20005548 	.word	0x20005548

0800958c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009594:	f7ff fa4a 	bl	8008a2c <xTaskGetTickCount>
 8009598:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800959a:	4b0b      	ldr	r3, [pc, #44]	@ (80095c8 <prvSampleTimeNow+0x3c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d205      	bcs.n	80095b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80095a4:	f000 f93a 	bl	800981c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	e002      	b.n	80095b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80095b6:	4a04      	ldr	r2, [pc, #16]	@ (80095c8 <prvSampleTimeNow+0x3c>)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80095bc:	68fb      	ldr	r3, [r7, #12]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	20005558 	.word	0x20005558

080095cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80095da:	2300      	movs	r3, #0
 80095dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d812      	bhi.n	8009618 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	1ad2      	subs	r2, r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d302      	bcc.n	8009606 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009600:	2301      	movs	r3, #1
 8009602:	617b      	str	r3, [r7, #20]
 8009604:	e01b      	b.n	800963e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009606:	4b10      	ldr	r3, [pc, #64]	@ (8009648 <prvInsertTimerInActiveList+0x7c>)
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3304      	adds	r3, #4
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f7fe f9be 	bl	8007992 <vListInsert>
 8009616:	e012      	b.n	800963e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	429a      	cmp	r2, r3
 800961e:	d206      	bcs.n	800962e <prvInsertTimerInActiveList+0x62>
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	429a      	cmp	r2, r3
 8009626:	d302      	bcc.n	800962e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009628:	2301      	movs	r3, #1
 800962a:	617b      	str	r3, [r7, #20]
 800962c:	e007      	b.n	800963e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800962e:	4b07      	ldr	r3, [pc, #28]	@ (800964c <prvInsertTimerInActiveList+0x80>)
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3304      	adds	r3, #4
 8009636:	4619      	mov	r1, r3
 8009638:	4610      	mov	r0, r2
 800963a:	f7fe f9aa 	bl	8007992 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800963e:	697b      	ldr	r3, [r7, #20]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3718      	adds	r7, #24
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	2000554c 	.word	0x2000554c
 800964c:	20005548 	.word	0x20005548

08009650 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b08e      	sub	sp, #56	@ 0x38
 8009654:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009656:	e0ce      	b.n	80097f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	da19      	bge.n	8009692 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800965e:	1d3b      	adds	r3, r7, #4
 8009660:	3304      	adds	r3, #4
 8009662:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10b      	bne.n	8009682 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	61fb      	str	r3, [r7, #28]
}
 800967c:	bf00      	nop
 800967e:	bf00      	nop
 8009680:	e7fd      	b.n	800967e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009688:	6850      	ldr	r0, [r2, #4]
 800968a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800968c:	6892      	ldr	r2, [r2, #8]
 800968e:	4611      	mov	r1, r2
 8009690:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	f2c0 80ae 	blt.w	80097f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800969e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d004      	beq.n	80096b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a8:	3304      	adds	r3, #4
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fe f9aa 	bl	8007a04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096b0:	463b      	mov	r3, r7
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7ff ff6a 	bl	800958c <prvSampleTimeNow>
 80096b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2b09      	cmp	r3, #9
 80096be:	f200 8097 	bhi.w	80097f0 <prvProcessReceivedCommands+0x1a0>
 80096c2:	a201      	add	r2, pc, #4	@ (adr r2, 80096c8 <prvProcessReceivedCommands+0x78>)
 80096c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c8:	080096f1 	.word	0x080096f1
 80096cc:	080096f1 	.word	0x080096f1
 80096d0:	080096f1 	.word	0x080096f1
 80096d4:	08009767 	.word	0x08009767
 80096d8:	0800977b 	.word	0x0800977b
 80096dc:	080097c7 	.word	0x080097c7
 80096e0:	080096f1 	.word	0x080096f1
 80096e4:	080096f1 	.word	0x080096f1
 80096e8:	08009767 	.word	0x08009767
 80096ec:	0800977b 	.word	0x0800977b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096f6:	f043 0301 	orr.w	r3, r3, #1
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	18d1      	adds	r1, r2, r3
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800970e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009710:	f7ff ff5c 	bl	80095cc <prvInsertTimerInActiveList>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d06c      	beq.n	80097f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800971a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009720:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009724:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009728:	f003 0304 	and.w	r3, r3, #4
 800972c:	2b00      	cmp	r3, #0
 800972e:	d061      	beq.n	80097f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	441a      	add	r2, r3
 8009738:	2300      	movs	r3, #0
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	2300      	movs	r3, #0
 800973e:	2100      	movs	r1, #0
 8009740:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009742:	f7ff fe01 	bl	8009348 <xTimerGenericCommand>
 8009746:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d152      	bne.n	80097f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	61bb      	str	r3, [r7, #24]
}
 8009760:	bf00      	nop
 8009762:	bf00      	nop
 8009764:	e7fd      	b.n	8009762 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009768:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800976c:	f023 0301 	bic.w	r3, r3, #1
 8009770:	b2da      	uxtb	r2, r3
 8009772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009774:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009778:	e03d      	b.n	80097f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800977a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009780:	f043 0301 	orr.w	r3, r3, #1
 8009784:	b2da      	uxtb	r2, r3
 8009786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009788:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009790:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10b      	bne.n	80097b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800979a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	617b      	str	r3, [r7, #20]
}
 80097ac:	bf00      	nop
 80097ae:	bf00      	nop
 80097b0:	e7fd      	b.n	80097ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b4:	699a      	ldr	r2, [r3, #24]
 80097b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b8:	18d1      	adds	r1, r2, r3
 80097ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097c0:	f7ff ff04 	bl	80095cc <prvInsertTimerInActiveList>
					break;
 80097c4:	e017      	b.n	80097f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80097c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097cc:	f003 0302 	and.w	r3, r3, #2
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d103      	bne.n	80097dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80097d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097d6:	f000 fbe7 	bl	8009fa8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80097da:	e00c      	b.n	80097f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097e2:	f023 0301 	bic.w	r3, r3, #1
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80097ee:	e002      	b.n	80097f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80097f0:	bf00      	nop
 80097f2:	e000      	b.n	80097f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80097f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097f6:	4b08      	ldr	r3, [pc, #32]	@ (8009818 <prvProcessReceivedCommands+0x1c8>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	1d39      	adds	r1, r7, #4
 80097fc:	2200      	movs	r2, #0
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe fbd4 	bl	8007fac <xQueueReceive>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	f47f af26 	bne.w	8009658 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800980c:	bf00      	nop
 800980e:	bf00      	nop
 8009810:	3730      	adds	r7, #48	@ 0x30
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	20005550 	.word	0x20005550

0800981c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009822:	e049      	b.n	80098b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009824:	4b2e      	ldr	r3, [pc, #184]	@ (80098e0 <prvSwitchTimerLists+0xc4>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800982e:	4b2c      	ldr	r3, [pc, #176]	@ (80098e0 <prvSwitchTimerLists+0xc4>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	3304      	adds	r3, #4
 800983c:	4618      	mov	r0, r3
 800983e:	f7fe f8e1 	bl	8007a04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009850:	f003 0304 	and.w	r3, r3, #4
 8009854:	2b00      	cmp	r3, #0
 8009856:	d02f      	beq.n	80098b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	699b      	ldr	r3, [r3, #24]
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	4413      	add	r3, r2
 8009860:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	429a      	cmp	r2, r3
 8009868:	d90e      	bls.n	8009888 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009876:	4b1a      	ldr	r3, [pc, #104]	@ (80098e0 <prvSwitchTimerLists+0xc4>)
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	3304      	adds	r3, #4
 800987e:	4619      	mov	r1, r3
 8009880:	4610      	mov	r0, r2
 8009882:	f7fe f886 	bl	8007992 <vListInsert>
 8009886:	e017      	b.n	80098b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009888:	2300      	movs	r3, #0
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	2300      	movs	r3, #0
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	2100      	movs	r1, #0
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f7ff fd58 	bl	8009348 <xTimerGenericCommand>
 8009898:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10b      	bne.n	80098b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	603b      	str	r3, [r7, #0]
}
 80098b2:	bf00      	nop
 80098b4:	bf00      	nop
 80098b6:	e7fd      	b.n	80098b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098b8:	4b09      	ldr	r3, [pc, #36]	@ (80098e0 <prvSwitchTimerLists+0xc4>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1b0      	bne.n	8009824 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80098c2:	4b07      	ldr	r3, [pc, #28]	@ (80098e0 <prvSwitchTimerLists+0xc4>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80098c8:	4b06      	ldr	r3, [pc, #24]	@ (80098e4 <prvSwitchTimerLists+0xc8>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a04      	ldr	r2, [pc, #16]	@ (80098e0 <prvSwitchTimerLists+0xc4>)
 80098ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80098d0:	4a04      	ldr	r2, [pc, #16]	@ (80098e4 <prvSwitchTimerLists+0xc8>)
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	6013      	str	r3, [r2, #0]
}
 80098d6:	bf00      	nop
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20005548 	.word	0x20005548
 80098e4:	2000554c 	.word	0x2000554c

080098e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80098ee:	f000 f96b 	bl	8009bc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80098f2:	4b15      	ldr	r3, [pc, #84]	@ (8009948 <prvCheckForValidListAndQueue+0x60>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d120      	bne.n	800993c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80098fa:	4814      	ldr	r0, [pc, #80]	@ (800994c <prvCheckForValidListAndQueue+0x64>)
 80098fc:	f7fd fff8 	bl	80078f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009900:	4813      	ldr	r0, [pc, #76]	@ (8009950 <prvCheckForValidListAndQueue+0x68>)
 8009902:	f7fd fff5 	bl	80078f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009906:	4b13      	ldr	r3, [pc, #76]	@ (8009954 <prvCheckForValidListAndQueue+0x6c>)
 8009908:	4a10      	ldr	r2, [pc, #64]	@ (800994c <prvCheckForValidListAndQueue+0x64>)
 800990a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800990c:	4b12      	ldr	r3, [pc, #72]	@ (8009958 <prvCheckForValidListAndQueue+0x70>)
 800990e:	4a10      	ldr	r2, [pc, #64]	@ (8009950 <prvCheckForValidListAndQueue+0x68>)
 8009910:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009912:	2300      	movs	r3, #0
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	4b11      	ldr	r3, [pc, #68]	@ (800995c <prvCheckForValidListAndQueue+0x74>)
 8009918:	4a11      	ldr	r2, [pc, #68]	@ (8009960 <prvCheckForValidListAndQueue+0x78>)
 800991a:	2110      	movs	r1, #16
 800991c:	200a      	movs	r0, #10
 800991e:	f7fe f905 	bl	8007b2c <xQueueGenericCreateStatic>
 8009922:	4603      	mov	r3, r0
 8009924:	4a08      	ldr	r2, [pc, #32]	@ (8009948 <prvCheckForValidListAndQueue+0x60>)
 8009926:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009928:	4b07      	ldr	r3, [pc, #28]	@ (8009948 <prvCheckForValidListAndQueue+0x60>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d005      	beq.n	800993c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009930:	4b05      	ldr	r3, [pc, #20]	@ (8009948 <prvCheckForValidListAndQueue+0x60>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	490b      	ldr	r1, [pc, #44]	@ (8009964 <prvCheckForValidListAndQueue+0x7c>)
 8009936:	4618      	mov	r0, r3
 8009938:	f7fe fd2a 	bl	8008390 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800993c:	f000 f976 	bl	8009c2c <vPortExitCritical>
}
 8009940:	bf00      	nop
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20005550 	.word	0x20005550
 800994c:	20005520 	.word	0x20005520
 8009950:	20005534 	.word	0x20005534
 8009954:	20005548 	.word	0x20005548
 8009958:	2000554c 	.word	0x2000554c
 800995c:	200055fc 	.word	0x200055fc
 8009960:	2000555c 	.word	0x2000555c
 8009964:	080186cc 	.word	0x080186cc

08009968 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3b04      	subs	r3, #4
 8009978:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	3b04      	subs	r3, #4
 8009986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f023 0201 	bic.w	r2, r3, #1
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3b04      	subs	r3, #4
 8009996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009998:	4a0c      	ldr	r2, [pc, #48]	@ (80099cc <pxPortInitialiseStack+0x64>)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3b14      	subs	r3, #20
 80099a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3b04      	subs	r3, #4
 80099ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f06f 0202 	mvn.w	r2, #2
 80099b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	3b20      	subs	r3, #32
 80099bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099be:	68fb      	ldr	r3, [r7, #12]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3714      	adds	r7, #20
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	080099d1 	.word	0x080099d1

080099d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099d6:	2300      	movs	r3, #0
 80099d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099da:	4b13      	ldr	r3, [pc, #76]	@ (8009a28 <prvTaskExitError+0x58>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099e2:	d00b      	beq.n	80099fc <prvTaskExitError+0x2c>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	60fb      	str	r3, [r7, #12]
}
 80099f6:	bf00      	nop
 80099f8:	bf00      	nop
 80099fa:	e7fd      	b.n	80099f8 <prvTaskExitError+0x28>
	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	60bb      	str	r3, [r7, #8]
}
 8009a0e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a10:	bf00      	nop
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d0fc      	beq.n	8009a12 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a18:	bf00      	nop
 8009a1a:	bf00      	nop
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	20000010 	.word	0x20000010
 8009a2c:	00000000 	.word	0x00000000

08009a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a30:	4b07      	ldr	r3, [pc, #28]	@ (8009a50 <pxCurrentTCBConst2>)
 8009a32:	6819      	ldr	r1, [r3, #0]
 8009a34:	6808      	ldr	r0, [r1, #0]
 8009a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3a:	f380 8809 	msr	PSP, r0
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f04f 0000 	mov.w	r0, #0
 8009a46:	f380 8811 	msr	BASEPRI, r0
 8009a4a:	4770      	bx	lr
 8009a4c:	f3af 8000 	nop.w

08009a50 <pxCurrentTCBConst2>:
 8009a50:	20005020 	.word	0x20005020
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop

08009a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a58:	4808      	ldr	r0, [pc, #32]	@ (8009a7c <prvPortStartFirstTask+0x24>)
 8009a5a:	6800      	ldr	r0, [r0, #0]
 8009a5c:	6800      	ldr	r0, [r0, #0]
 8009a5e:	f380 8808 	msr	MSP, r0
 8009a62:	f04f 0000 	mov.w	r0, #0
 8009a66:	f380 8814 	msr	CONTROL, r0
 8009a6a:	b662      	cpsie	i
 8009a6c:	b661      	cpsie	f
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	df00      	svc	0
 8009a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a7a:	bf00      	nop
 8009a7c:	e000ed08 	.word	0xe000ed08

08009a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a86:	4b47      	ldr	r3, [pc, #284]	@ (8009ba4 <xPortStartScheduler+0x124>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a47      	ldr	r2, [pc, #284]	@ (8009ba8 <xPortStartScheduler+0x128>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d10b      	bne.n	8009aa8 <xPortStartScheduler+0x28>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	613b      	str	r3, [r7, #16]
}
 8009aa2:	bf00      	nop
 8009aa4:	bf00      	nop
 8009aa6:	e7fd      	b.n	8009aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8009ba4 <xPortStartScheduler+0x124>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a3f      	ldr	r2, [pc, #252]	@ (8009bac <xPortStartScheduler+0x12c>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d10b      	bne.n	8009aca <xPortStartScheduler+0x4a>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	60fb      	str	r3, [r7, #12]
}
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop
 8009ac8:	e7fd      	b.n	8009ac6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009aca:	4b39      	ldr	r3, [pc, #228]	@ (8009bb0 <xPortStartScheduler+0x130>)
 8009acc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	22ff      	movs	r2, #255	@ 0xff
 8009ada:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ae4:	78fb      	ldrb	r3, [r7, #3]
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	4b31      	ldr	r3, [pc, #196]	@ (8009bb4 <xPortStartScheduler+0x134>)
 8009af0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009af2:	4b31      	ldr	r3, [pc, #196]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009af4:	2207      	movs	r2, #7
 8009af6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009af8:	e009      	b.n	8009b0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009afa:	4b2f      	ldr	r3, [pc, #188]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	4a2d      	ldr	r2, [pc, #180]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009b02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b0e:	78fb      	ldrb	r3, [r7, #3]
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b16:	2b80      	cmp	r3, #128	@ 0x80
 8009b18:	d0ef      	beq.n	8009afa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b1a:	4b27      	ldr	r3, [pc, #156]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f1c3 0307 	rsb	r3, r3, #7
 8009b22:	2b04      	cmp	r3, #4
 8009b24:	d00b      	beq.n	8009b3e <xPortStartScheduler+0xbe>
	__asm volatile
 8009b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b2a:	f383 8811 	msr	BASEPRI, r3
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	f3bf 8f4f 	dsb	sy
 8009b36:	60bb      	str	r3, [r7, #8]
}
 8009b38:	bf00      	nop
 8009b3a:	bf00      	nop
 8009b3c:	e7fd      	b.n	8009b3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	021b      	lsls	r3, r3, #8
 8009b44:	4a1c      	ldr	r2, [pc, #112]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009b46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b48:	4b1b      	ldr	r3, [pc, #108]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009b50:	4a19      	ldr	r2, [pc, #100]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009b52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b5c:	4b17      	ldr	r3, [pc, #92]	@ (8009bbc <xPortStartScheduler+0x13c>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a16      	ldr	r2, [pc, #88]	@ (8009bbc <xPortStartScheduler+0x13c>)
 8009b62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009b66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b68:	4b14      	ldr	r3, [pc, #80]	@ (8009bbc <xPortStartScheduler+0x13c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a13      	ldr	r2, [pc, #76]	@ (8009bbc <xPortStartScheduler+0x13c>)
 8009b6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009b72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b74:	f000 f8da 	bl	8009d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b78:	4b11      	ldr	r3, [pc, #68]	@ (8009bc0 <xPortStartScheduler+0x140>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b7e:	f000 f8f9 	bl	8009d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b82:	4b10      	ldr	r3, [pc, #64]	@ (8009bc4 <xPortStartScheduler+0x144>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a0f      	ldr	r2, [pc, #60]	@ (8009bc4 <xPortStartScheduler+0x144>)
 8009b88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009b8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b8e:	f7ff ff63 	bl	8009a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b92:	f7ff f815 	bl	8008bc0 <vTaskSwitchContext>
	prvTaskExitError();
 8009b96:	f7ff ff1b 	bl	80099d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3718      	adds	r7, #24
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	e000ed00 	.word	0xe000ed00
 8009ba8:	410fc271 	.word	0x410fc271
 8009bac:	410fc270 	.word	0x410fc270
 8009bb0:	e000e400 	.word	0xe000e400
 8009bb4:	2000564c 	.word	0x2000564c
 8009bb8:	20005650 	.word	0x20005650
 8009bbc:	e000ed20 	.word	0xe000ed20
 8009bc0:	20000010 	.word	0x20000010
 8009bc4:	e000ef34 	.word	0xe000ef34

08009bc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	607b      	str	r3, [r7, #4]
}
 8009be0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009be2:	4b10      	ldr	r3, [pc, #64]	@ (8009c24 <vPortEnterCritical+0x5c>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	3301      	adds	r3, #1
 8009be8:	4a0e      	ldr	r2, [pc, #56]	@ (8009c24 <vPortEnterCritical+0x5c>)
 8009bea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009bec:	4b0d      	ldr	r3, [pc, #52]	@ (8009c24 <vPortEnterCritical+0x5c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d110      	bne.n	8009c16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8009c28 <vPortEnterCritical+0x60>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00b      	beq.n	8009c16 <vPortEnterCritical+0x4e>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	603b      	str	r3, [r7, #0]
}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	e7fd      	b.n	8009c12 <vPortEnterCritical+0x4a>
	}
}
 8009c16:	bf00      	nop
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	20000010 	.word	0x20000010
 8009c28:	e000ed04 	.word	0xe000ed04

08009c2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c32:	4b12      	ldr	r3, [pc, #72]	@ (8009c7c <vPortExitCritical+0x50>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10b      	bne.n	8009c52 <vPortExitCritical+0x26>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	607b      	str	r3, [r7, #4]
}
 8009c4c:	bf00      	nop
 8009c4e:	bf00      	nop
 8009c50:	e7fd      	b.n	8009c4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c52:	4b0a      	ldr	r3, [pc, #40]	@ (8009c7c <vPortExitCritical+0x50>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	4a08      	ldr	r2, [pc, #32]	@ (8009c7c <vPortExitCritical+0x50>)
 8009c5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c5c:	4b07      	ldr	r3, [pc, #28]	@ (8009c7c <vPortExitCritical+0x50>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d105      	bne.n	8009c70 <vPortExitCritical+0x44>
 8009c64:	2300      	movs	r3, #0
 8009c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	f383 8811 	msr	BASEPRI, r3
}
 8009c6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	20000010 	.word	0x20000010

08009c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c80:	f3ef 8009 	mrs	r0, PSP
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	4b15      	ldr	r3, [pc, #84]	@ (8009ce0 <pxCurrentTCBConst>)
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	f01e 0f10 	tst.w	lr, #16
 8009c90:	bf08      	it	eq
 8009c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9a:	6010      	str	r0, [r2, #0]
 8009c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ca4:	f380 8811 	msr	BASEPRI, r0
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f7fe ff86 	bl	8008bc0 <vTaskSwitchContext>
 8009cb4:	f04f 0000 	mov.w	r0, #0
 8009cb8:	f380 8811 	msr	BASEPRI, r0
 8009cbc:	bc09      	pop	{r0, r3}
 8009cbe:	6819      	ldr	r1, [r3, #0]
 8009cc0:	6808      	ldr	r0, [r1, #0]
 8009cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc6:	f01e 0f10 	tst.w	lr, #16
 8009cca:	bf08      	it	eq
 8009ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cd0:	f380 8809 	msr	PSP, r0
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	f3af 8000 	nop.w

08009ce0 <pxCurrentTCBConst>:
 8009ce0:	20005020 	.word	0x20005020
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ce4:	bf00      	nop
 8009ce6:	bf00      	nop

08009ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	607b      	str	r3, [r7, #4]
}
 8009d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d02:	f7fe fea3 	bl	8008a4c <xTaskIncrementTick>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d003      	beq.n	8009d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d0c:	4b06      	ldr	r3, [pc, #24]	@ (8009d28 <xPortSysTickHandler+0x40>)
 8009d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	2300      	movs	r3, #0
 8009d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	f383 8811 	msr	BASEPRI, r3
}
 8009d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d20:	bf00      	nop
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	e000ed04 	.word	0xe000ed04

08009d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d30:	4b0b      	ldr	r3, [pc, #44]	@ (8009d60 <vPortSetupTimerInterrupt+0x34>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d36:	4b0b      	ldr	r3, [pc, #44]	@ (8009d64 <vPortSetupTimerInterrupt+0x38>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d68 <vPortSetupTimerInterrupt+0x3c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a0a      	ldr	r2, [pc, #40]	@ (8009d6c <vPortSetupTimerInterrupt+0x40>)
 8009d42:	fba2 2303 	umull	r2, r3, r2, r3
 8009d46:	099b      	lsrs	r3, r3, #6
 8009d48:	4a09      	ldr	r2, [pc, #36]	@ (8009d70 <vPortSetupTimerInterrupt+0x44>)
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d4e:	4b04      	ldr	r3, [pc, #16]	@ (8009d60 <vPortSetupTimerInterrupt+0x34>)
 8009d50:	2207      	movs	r2, #7
 8009d52:	601a      	str	r2, [r3, #0]
}
 8009d54:	bf00      	nop
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	e000e010 	.word	0xe000e010
 8009d64:	e000e018 	.word	0xe000e018
 8009d68:	20000004 	.word	0x20000004
 8009d6c:	10624dd3 	.word	0x10624dd3
 8009d70:	e000e014 	.word	0xe000e014

08009d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009d84 <vPortEnableVFP+0x10>
 8009d78:	6801      	ldr	r1, [r0, #0]
 8009d7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009d7e:	6001      	str	r1, [r0, #0]
 8009d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d82:	bf00      	nop
 8009d84:	e000ed88 	.word	0xe000ed88

08009d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d8e:	f3ef 8305 	mrs	r3, IPSR
 8009d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2b0f      	cmp	r3, #15
 8009d98:	d915      	bls.n	8009dc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d9a:	4a18      	ldr	r2, [pc, #96]	@ (8009dfc <vPortValidateInterruptPriority+0x74>)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4413      	add	r3, r2
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009da4:	4b16      	ldr	r3, [pc, #88]	@ (8009e00 <vPortValidateInterruptPriority+0x78>)
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	7afa      	ldrb	r2, [r7, #11]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d20b      	bcs.n	8009dc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	607b      	str	r3, [r7, #4]
}
 8009dc0:	bf00      	nop
 8009dc2:	bf00      	nop
 8009dc4:	e7fd      	b.n	8009dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8009e04 <vPortValidateInterruptPriority+0x7c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009dce:	4b0e      	ldr	r3, [pc, #56]	@ (8009e08 <vPortValidateInterruptPriority+0x80>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d90b      	bls.n	8009dee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	603b      	str	r3, [r7, #0]
}
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop
 8009dec:	e7fd      	b.n	8009dea <vPortValidateInterruptPriority+0x62>
	}
 8009dee:	bf00      	nop
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	e000e3f0 	.word	0xe000e3f0
 8009e00:	2000564c 	.word	0x2000564c
 8009e04:	e000ed0c 	.word	0xe000ed0c
 8009e08:	20005650 	.word	0x20005650

08009e0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b08a      	sub	sp, #40	@ 0x28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e14:	2300      	movs	r3, #0
 8009e16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e18:	f7fe fd5c 	bl	80088d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e1c:	4b5c      	ldr	r3, [pc, #368]	@ (8009f90 <pvPortMalloc+0x184>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d101      	bne.n	8009e28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e24:	f000 f924 	bl	800a070 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e28:	4b5a      	ldr	r3, [pc, #360]	@ (8009f94 <pvPortMalloc+0x188>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4013      	ands	r3, r2
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f040 8095 	bne.w	8009f60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d01e      	beq.n	8009e7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009e3c:	2208      	movs	r2, #8
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4413      	add	r3, r2
 8009e42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f003 0307 	and.w	r3, r3, #7
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d015      	beq.n	8009e7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f023 0307 	bic.w	r3, r3, #7
 8009e54:	3308      	adds	r3, #8
 8009e56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f003 0307 	and.w	r3, r3, #7
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00b      	beq.n	8009e7a <pvPortMalloc+0x6e>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	617b      	str	r3, [r7, #20]
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop
 8009e78:	e7fd      	b.n	8009e76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d06f      	beq.n	8009f60 <pvPortMalloc+0x154>
 8009e80:	4b45      	ldr	r3, [pc, #276]	@ (8009f98 <pvPortMalloc+0x18c>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d86a      	bhi.n	8009f60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e8a:	4b44      	ldr	r3, [pc, #272]	@ (8009f9c <pvPortMalloc+0x190>)
 8009e8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e8e:	4b43      	ldr	r3, [pc, #268]	@ (8009f9c <pvPortMalloc+0x190>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e94:	e004      	b.n	8009ea0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d903      	bls.n	8009eb2 <pvPortMalloc+0xa6>
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1f1      	bne.n	8009e96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009eb2:	4b37      	ldr	r3, [pc, #220]	@ (8009f90 <pvPortMalloc+0x184>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d051      	beq.n	8009f60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2208      	movs	r2, #8
 8009ec2:	4413      	add	r3, r2
 8009ec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	1ad2      	subs	r2, r2, r3
 8009ed6:	2308      	movs	r3, #8
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d920      	bls.n	8009f20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	f003 0307 	and.w	r3, r3, #7
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00b      	beq.n	8009f08 <pvPortMalloc+0xfc>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	613b      	str	r3, [r7, #16]
}
 8009f02:	bf00      	nop
 8009f04:	bf00      	nop
 8009f06:	e7fd      	b.n	8009f04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	1ad2      	subs	r2, r2, r3
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f1a:	69b8      	ldr	r0, [r7, #24]
 8009f1c:	f000 f90a 	bl	800a134 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f20:	4b1d      	ldr	r3, [pc, #116]	@ (8009f98 <pvPortMalloc+0x18c>)
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8009f98 <pvPortMalloc+0x18c>)
 8009f2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8009f98 <pvPortMalloc+0x18c>)
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	4b1b      	ldr	r3, [pc, #108]	@ (8009fa0 <pvPortMalloc+0x194>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d203      	bcs.n	8009f42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f3a:	4b17      	ldr	r3, [pc, #92]	@ (8009f98 <pvPortMalloc+0x18c>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a18      	ldr	r2, [pc, #96]	@ (8009fa0 <pvPortMalloc+0x194>)
 8009f40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f44:	685a      	ldr	r2, [r3, #4]
 8009f46:	4b13      	ldr	r3, [pc, #76]	@ (8009f94 <pvPortMalloc+0x188>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	431a      	orrs	r2, r3
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009f56:	4b13      	ldr	r3, [pc, #76]	@ (8009fa4 <pvPortMalloc+0x198>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	4a11      	ldr	r2, [pc, #68]	@ (8009fa4 <pvPortMalloc+0x198>)
 8009f5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f60:	f7fe fcc6 	bl	80088f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	f003 0307 	and.w	r3, r3, #7
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00b      	beq.n	8009f86 <pvPortMalloc+0x17a>
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	60fb      	str	r3, [r7, #12]
}
 8009f80:	bf00      	nop
 8009f82:	bf00      	nop
 8009f84:	e7fd      	b.n	8009f82 <pvPortMalloc+0x176>
	return pvReturn;
 8009f86:	69fb      	ldr	r3, [r7, #28]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3728      	adds	r7, #40	@ 0x28
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	2000925c 	.word	0x2000925c
 8009f94:	20009270 	.word	0x20009270
 8009f98:	20009260 	.word	0x20009260
 8009f9c:	20009254 	.word	0x20009254
 8009fa0:	20009264 	.word	0x20009264
 8009fa4:	20009268 	.word	0x20009268

08009fa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d04f      	beq.n	800a05a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009fba:	2308      	movs	r3, #8
 8009fbc:	425b      	negs	r3, r3
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	4b25      	ldr	r3, [pc, #148]	@ (800a064 <vPortFree+0xbc>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10b      	bne.n	8009fee <vPortFree+0x46>
	__asm volatile
 8009fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	60fb      	str	r3, [r7, #12]
}
 8009fe8:	bf00      	nop
 8009fea:	bf00      	nop
 8009fec:	e7fd      	b.n	8009fea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00b      	beq.n	800a00e <vPortFree+0x66>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	60bb      	str	r3, [r7, #8]
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	e7fd      	b.n	800a00a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	685a      	ldr	r2, [r3, #4]
 800a012:	4b14      	ldr	r3, [pc, #80]	@ (800a064 <vPortFree+0xbc>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4013      	ands	r3, r2
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01e      	beq.n	800a05a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d11a      	bne.n	800a05a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	685a      	ldr	r2, [r3, #4]
 800a028:	4b0e      	ldr	r3, [pc, #56]	@ (800a064 <vPortFree+0xbc>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	43db      	mvns	r3, r3
 800a02e:	401a      	ands	r2, r3
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a034:	f7fe fc4e 	bl	80088d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	4b0a      	ldr	r3, [pc, #40]	@ (800a068 <vPortFree+0xc0>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4413      	add	r3, r2
 800a042:	4a09      	ldr	r2, [pc, #36]	@ (800a068 <vPortFree+0xc0>)
 800a044:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a046:	6938      	ldr	r0, [r7, #16]
 800a048:	f000 f874 	bl	800a134 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a04c:	4b07      	ldr	r3, [pc, #28]	@ (800a06c <vPortFree+0xc4>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3301      	adds	r3, #1
 800a052:	4a06      	ldr	r2, [pc, #24]	@ (800a06c <vPortFree+0xc4>)
 800a054:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a056:	f7fe fc4b 	bl	80088f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a05a:	bf00      	nop
 800a05c:	3718      	adds	r7, #24
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20009270 	.word	0x20009270
 800a068:	20009260 	.word	0x20009260
 800a06c:	2000926c 	.word	0x2000926c

0800a070 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a076:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a07a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a07c:	4b27      	ldr	r3, [pc, #156]	@ (800a11c <prvHeapInit+0xac>)
 800a07e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f003 0307 	and.w	r3, r3, #7
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00c      	beq.n	800a0a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	3307      	adds	r3, #7
 800a08e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f023 0307 	bic.w	r3, r3, #7
 800a096:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	4a1f      	ldr	r2, [pc, #124]	@ (800a11c <prvHeapInit+0xac>)
 800a0a0:	4413      	add	r3, r2
 800a0a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a0a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a120 <prvHeapInit+0xb0>)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a0ae:	4b1c      	ldr	r3, [pc, #112]	@ (800a120 <prvHeapInit+0xb0>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a0bc:	2208      	movs	r2, #8
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	1a9b      	subs	r3, r3, r2
 800a0c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f023 0307 	bic.w	r3, r3, #7
 800a0ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4a15      	ldr	r2, [pc, #84]	@ (800a124 <prvHeapInit+0xb4>)
 800a0d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a0d2:	4b14      	ldr	r3, [pc, #80]	@ (800a124 <prvHeapInit+0xb4>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a0da:	4b12      	ldr	r3, [pc, #72]	@ (800a124 <prvHeapInit+0xb4>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	1ad2      	subs	r2, r2, r3
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a124 <prvHeapInit+0xb4>)
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	4a0a      	ldr	r2, [pc, #40]	@ (800a128 <prvHeapInit+0xb8>)
 800a0fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	4a09      	ldr	r2, [pc, #36]	@ (800a12c <prvHeapInit+0xbc>)
 800a106:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a108:	4b09      	ldr	r3, [pc, #36]	@ (800a130 <prvHeapInit+0xc0>)
 800a10a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a10e:	601a      	str	r2, [r3, #0]
}
 800a110:	bf00      	nop
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	20005654 	.word	0x20005654
 800a120:	20009254 	.word	0x20009254
 800a124:	2000925c 	.word	0x2000925c
 800a128:	20009264 	.word	0x20009264
 800a12c:	20009260 	.word	0x20009260
 800a130:	20009270 	.word	0x20009270

0800a134 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a13c:	4b28      	ldr	r3, [pc, #160]	@ (800a1e0 <prvInsertBlockIntoFreeList+0xac>)
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	e002      	b.n	800a148 <prvInsertBlockIntoFreeList+0x14>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d8f7      	bhi.n	800a142 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	4413      	add	r3, r2
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	429a      	cmp	r2, r3
 800a162:	d108      	bne.n	800a176 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	441a      	add	r2, r3
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	441a      	add	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	429a      	cmp	r2, r3
 800a188:	d118      	bne.n	800a1bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	4b15      	ldr	r3, [pc, #84]	@ (800a1e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	429a      	cmp	r2, r3
 800a194:	d00d      	beq.n	800a1b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	685a      	ldr	r2, [r3, #4]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	441a      	add	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	601a      	str	r2, [r3, #0]
 800a1b0:	e008      	b.n	800a1c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a1b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	e003      	b.n	800a1c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d002      	beq.n	800a1d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1d2:	bf00      	nop
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	20009254 	.word	0x20009254
 800a1e4:	2000925c 	.word	0x2000925c

0800a1e8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a1e8:	4b04      	ldr	r3, [pc, #16]	@ (800a1fc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	b10a      	cbz	r2, 800a1f2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800a1ee:	4803      	ldr	r0, [pc, #12]	@ (800a1fc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a1f0:	4770      	bx	lr
 800a1f2:	4a03      	ldr	r2, [pc, #12]	@ (800a200 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800a1f4:	4801      	ldr	r0, [pc, #4]	@ (800a1fc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a1f6:	6812      	ldr	r2, [r2, #0]
 800a1f8:	601a      	str	r2, [r3, #0]
 800a1fa:	4770      	bx	lr
 800a1fc:	2000001c 	.word	0x2000001c
 800a200:	200001d0 	.word	0x200001d0

0800a204 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a204:	4a02      	ldr	r2, [pc, #8]	@ (800a210 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800a206:	4b03      	ldr	r3, [pc, #12]	@ (800a214 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800a208:	6812      	ldr	r2, [r2, #0]
 800a20a:	601a      	str	r2, [r3, #0]
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	200001d0 	.word	0x200001d0
 800a214:	2000001c 	.word	0x2000001c

0800a218 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800a218:	f003 b9a4 	b.w	800d564 <geometry_msgs__msg__Twist__init>

0800a21c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800a21c:	f003 b9c6 	b.w	800d5ac <geometry_msgs__msg__Twist__fini>

0800a220 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a220:	b510      	push	{r4, lr}
 800a222:	f000 f819 	bl	800a258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a226:	4c07      	ldr	r4, [pc, #28]	@ (800a244 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800a228:	60e0      	str	r0, [r4, #12]
 800a22a:	f000 f815 	bl	800a258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a22e:	4b06      	ldr	r3, [pc, #24]	@ (800a248 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a230:	64a0      	str	r0, [r4, #72]	@ 0x48
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	b10a      	cbz	r2, 800a23a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800a236:	4804      	ldr	r0, [pc, #16]	@ (800a248 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a238:	bd10      	pop	{r4, pc}
 800a23a:	4a04      	ldr	r2, [pc, #16]	@ (800a24c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800a23c:	4802      	ldr	r0, [pc, #8]	@ (800a248 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a23e:	6812      	ldr	r2, [r2, #0]
 800a240:	601a      	str	r2, [r3, #0]
 800a242:	bd10      	pop	{r4, pc}
 800a244:	20000028 	.word	0x20000028
 800a248:	200000a0 	.word	0x200000a0
 800a24c:	200001d4 	.word	0x200001d4

0800a250 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800a250:	f003 b9b8 	b.w	800d5c4 <geometry_msgs__msg__Vector3__init>

0800a254 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800a254:	f003 b9ba 	b.w	800d5cc <geometry_msgs__msg__Vector3__fini>

0800a258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a258:	4b04      	ldr	r3, [pc, #16]	@ (800a26c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	b10a      	cbz	r2, 800a262 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800a25e:	4803      	ldr	r0, [pc, #12]	@ (800a26c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a260:	4770      	bx	lr
 800a262:	4a03      	ldr	r2, [pc, #12]	@ (800a270 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800a264:	4801      	ldr	r0, [pc, #4]	@ (800a26c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a266:	6812      	ldr	r2, [r2, #0]
 800a268:	601a      	str	r2, [r3, #0]
 800a26a:	4770      	bx	lr
 800a26c:	20000160 	.word	0x20000160
 800a270:	200001d4 	.word	0x200001d4

0800a274 <get_serialized_size_geometry_msgs__msg__Twist>:
 800a274:	b570      	push	{r4, r5, r6, lr}
 800a276:	4604      	mov	r4, r0
 800a278:	b148      	cbz	r0, 800a28e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800a27a:	460d      	mov	r5, r1
 800a27c:	f000 f860 	bl	800a340 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a280:	4606      	mov	r6, r0
 800a282:	1829      	adds	r1, r5, r0
 800a284:	f104 0018 	add.w	r0, r4, #24
 800a288:	f000 f85a 	bl	800a340 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a28c:	4430      	add	r0, r6
 800a28e:	bd70      	pop	{r4, r5, r6, pc}

0800a290 <_Twist__cdr_deserialize>:
 800a290:	b570      	push	{r4, r5, r6, lr}
 800a292:	460c      	mov	r4, r1
 800a294:	b189      	cbz	r1, 800a2ba <_Twist__cdr_deserialize+0x2a>
 800a296:	4605      	mov	r5, r0
 800a298:	f000 f8de 	bl	800a458 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a29c:	6843      	ldr	r3, [r0, #4]
 800a29e:	4621      	mov	r1, r4
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	4798      	blx	r3
 800a2a6:	f000 f8d7 	bl	800a458 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a2aa:	6843      	ldr	r3, [r0, #4]
 800a2ac:	f104 0118 	add.w	r1, r4, #24
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2b8:	4718      	bx	r3
 800a2ba:	4608      	mov	r0, r1
 800a2bc:	bd70      	pop	{r4, r5, r6, pc}
 800a2be:	bf00      	nop

0800a2c0 <_Twist__cdr_serialize>:
 800a2c0:	b510      	push	{r4, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	9101      	str	r1, [sp, #4]
 800a2c6:	b190      	cbz	r0, 800a2ee <_Twist__cdr_serialize+0x2e>
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	f000 f8c5 	bl	800a458 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a2ce:	6843      	ldr	r3, [r0, #4]
 800a2d0:	9901      	ldr	r1, [sp, #4]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	4798      	blx	r3
 800a2d8:	f000 f8be 	bl	800a458 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a2dc:	6843      	ldr	r3, [r0, #4]
 800a2de:	9901      	ldr	r1, [sp, #4]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f104 0018 	add.w	r0, r4, #24
 800a2e6:	b002      	add	sp, #8
 800a2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2ec:	4718      	bx	r3
 800a2ee:	b002      	add	sp, #8
 800a2f0:	bd10      	pop	{r4, pc}
 800a2f2:	bf00      	nop

0800a2f4 <_Twist__get_serialized_size>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	b148      	cbz	r0, 800a30e <_Twist__get_serialized_size+0x1a>
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	f000 f820 	bl	800a340 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a300:	4605      	mov	r5, r0
 800a302:	4601      	mov	r1, r0
 800a304:	f104 0018 	add.w	r0, r4, #24
 800a308:	f000 f81a 	bl	800a340 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a30c:	4428      	add	r0, r5
 800a30e:	bd38      	pop	{r3, r4, r5, pc}

0800a310 <_Twist__max_serialized_size>:
 800a310:	b510      	push	{r4, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	2301      	movs	r3, #1
 800a316:	2100      	movs	r1, #0
 800a318:	f10d 0007 	add.w	r0, sp, #7
 800a31c:	f88d 3007 	strb.w	r3, [sp, #7]
 800a320:	f000 f87e 	bl	800a420 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a324:	4604      	mov	r4, r0
 800a326:	4601      	mov	r1, r0
 800a328:	f10d 0007 	add.w	r0, sp, #7
 800a32c:	f000 f878 	bl	800a420 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a330:	4420      	add	r0, r4
 800a332:	b002      	add	sp, #8
 800a334:	bd10      	pop	{r4, pc}
 800a336:	bf00      	nop

0800a338 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a338:	4800      	ldr	r0, [pc, #0]	@ (800a33c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800a33a:	4770      	bx	lr
 800a33c:	2000016c 	.word	0x2000016c

0800a340 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800a340:	b1b8      	cbz	r0, 800a372 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800a342:	b538      	push	{r3, r4, r5, lr}
 800a344:	460d      	mov	r5, r1
 800a346:	4628      	mov	r0, r5
 800a348:	2108      	movs	r1, #8
 800a34a:	f001 f9fd 	bl	800b748 <ucdr_alignment>
 800a34e:	f105 0308 	add.w	r3, r5, #8
 800a352:	181c      	adds	r4, r3, r0
 800a354:	2108      	movs	r1, #8
 800a356:	4620      	mov	r0, r4
 800a358:	f001 f9f6 	bl	800b748 <ucdr_alignment>
 800a35c:	3008      	adds	r0, #8
 800a35e:	4404      	add	r4, r0
 800a360:	2108      	movs	r1, #8
 800a362:	4620      	mov	r0, r4
 800a364:	f001 f9f0 	bl	800b748 <ucdr_alignment>
 800a368:	f1c5 0508 	rsb	r5, r5, #8
 800a36c:	4428      	add	r0, r5
 800a36e:	4420      	add	r0, r4
 800a370:	bd38      	pop	{r3, r4, r5, pc}
 800a372:	4770      	bx	lr

0800a374 <_Vector3__cdr_deserialize>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	460c      	mov	r4, r1
 800a378:	b171      	cbz	r1, 800a398 <_Vector3__cdr_deserialize+0x24>
 800a37a:	4605      	mov	r5, r0
 800a37c:	f001 f8c6 	bl	800b50c <ucdr_deserialize_double>
 800a380:	f104 0108 	add.w	r1, r4, #8
 800a384:	4628      	mov	r0, r5
 800a386:	f001 f8c1 	bl	800b50c <ucdr_deserialize_double>
 800a38a:	f104 0110 	add.w	r1, r4, #16
 800a38e:	4628      	mov	r0, r5
 800a390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a394:	f001 b8ba 	b.w	800b50c <ucdr_deserialize_double>
 800a398:	4608      	mov	r0, r1
 800a39a:	bd38      	pop	{r3, r4, r5, pc}

0800a39c <_Vector3__cdr_serialize>:
 800a39c:	b198      	cbz	r0, 800a3c6 <_Vector3__cdr_serialize+0x2a>
 800a39e:	b538      	push	{r3, r4, r5, lr}
 800a3a0:	ed90 0b00 	vldr	d0, [r0]
 800a3a4:	460d      	mov	r5, r1
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	f000 ffdf 	bl	800b36c <ucdr_serialize_double>
 800a3ae:	ed94 0b02 	vldr	d0, [r4, #8]
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f000 ffda 	bl	800b36c <ucdr_serialize_double>
 800a3b8:	ed94 0b04 	vldr	d0, [r4, #16]
 800a3bc:	4628      	mov	r0, r5
 800a3be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3c2:	f000 bfd3 	b.w	800b36c <ucdr_serialize_double>
 800a3c6:	4770      	bx	lr

0800a3c8 <_Vector3__get_serialized_size>:
 800a3c8:	b198      	cbz	r0, 800a3f2 <_Vector3__get_serialized_size+0x2a>
 800a3ca:	b510      	push	{r4, lr}
 800a3cc:	2108      	movs	r1, #8
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	f001 f9ba 	bl	800b748 <ucdr_alignment>
 800a3d4:	f100 0408 	add.w	r4, r0, #8
 800a3d8:	2108      	movs	r1, #8
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f001 f9b4 	bl	800b748 <ucdr_alignment>
 800a3e0:	3008      	adds	r0, #8
 800a3e2:	4404      	add	r4, r0
 800a3e4:	2108      	movs	r1, #8
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f001 f9ae 	bl	800b748 <ucdr_alignment>
 800a3ec:	3008      	adds	r0, #8
 800a3ee:	4420      	add	r0, r4
 800a3f0:	bd10      	pop	{r4, pc}
 800a3f2:	4770      	bx	lr

0800a3f4 <_Vector3__max_serialized_size>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	2108      	movs	r1, #8
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	f001 f9a5 	bl	800b748 <ucdr_alignment>
 800a3fe:	f100 0508 	add.w	r5, r0, #8
 800a402:	2108      	movs	r1, #8
 800a404:	4628      	mov	r0, r5
 800a406:	f001 f99f 	bl	800b748 <ucdr_alignment>
 800a40a:	f100 0408 	add.w	r4, r0, #8
 800a40e:	442c      	add	r4, r5
 800a410:	2108      	movs	r1, #8
 800a412:	4620      	mov	r0, r4
 800a414:	f001 f998 	bl	800b748 <ucdr_alignment>
 800a418:	3008      	adds	r0, #8
 800a41a:	4420      	add	r0, r4
 800a41c:	bd38      	pop	{r3, r4, r5, pc}
 800a41e:	bf00      	nop

0800a420 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800a420:	b570      	push	{r4, r5, r6, lr}
 800a422:	2301      	movs	r3, #1
 800a424:	460c      	mov	r4, r1
 800a426:	7003      	strb	r3, [r0, #0]
 800a428:	2108      	movs	r1, #8
 800a42a:	4620      	mov	r0, r4
 800a42c:	f001 f98c 	bl	800b748 <ucdr_alignment>
 800a430:	f104 0508 	add.w	r5, r4, #8
 800a434:	1946      	adds	r6, r0, r5
 800a436:	2108      	movs	r1, #8
 800a438:	4630      	mov	r0, r6
 800a43a:	f001 f985 	bl	800b748 <ucdr_alignment>
 800a43e:	f100 0508 	add.w	r5, r0, #8
 800a442:	4435      	add	r5, r6
 800a444:	2108      	movs	r1, #8
 800a446:	4628      	mov	r0, r5
 800a448:	f001 f97e 	bl	800b748 <ucdr_alignment>
 800a44c:	f1c4 0408 	rsb	r4, r4, #8
 800a450:	4420      	add	r0, r4
 800a452:	4428      	add	r0, r5
 800a454:	bd70      	pop	{r4, r5, r6, pc}
 800a456:	bf00      	nop

0800a458 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a458:	4800      	ldr	r0, [pc, #0]	@ (800a45c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800a45a:	4770      	bx	lr
 800a45c:	20000194 	.word	0x20000194

0800a460 <ucdr_serialize_bool>:
 800a460:	b538      	push	{r3, r4, r5, lr}
 800a462:	460d      	mov	r5, r1
 800a464:	2101      	movs	r1, #1
 800a466:	4604      	mov	r4, r0
 800a468:	f001 f922 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800a46c:	b148      	cbz	r0, 800a482 <ucdr_serialize_bool+0x22>
 800a46e:	68a3      	ldr	r3, [r4, #8]
 800a470:	701d      	strb	r5, [r3, #0]
 800a472:	68a2      	ldr	r2, [r4, #8]
 800a474:	6923      	ldr	r3, [r4, #16]
 800a476:	2101      	movs	r1, #1
 800a478:	440a      	add	r2, r1
 800a47a:	440b      	add	r3, r1
 800a47c:	60a2      	str	r2, [r4, #8]
 800a47e:	6123      	str	r3, [r4, #16]
 800a480:	7561      	strb	r1, [r4, #21]
 800a482:	7da0      	ldrb	r0, [r4, #22]
 800a484:	f080 0001 	eor.w	r0, r0, #1
 800a488:	bd38      	pop	{r3, r4, r5, pc}
 800a48a:	bf00      	nop

0800a48c <ucdr_deserialize_bool>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	460d      	mov	r5, r1
 800a490:	2101      	movs	r1, #1
 800a492:	4604      	mov	r4, r0
 800a494:	f001 f90c 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800a498:	b160      	cbz	r0, 800a4b4 <ucdr_deserialize_bool+0x28>
 800a49a:	68a2      	ldr	r2, [r4, #8]
 800a49c:	6923      	ldr	r3, [r4, #16]
 800a49e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a4a2:	3900      	subs	r1, #0
 800a4a4:	bf18      	it	ne
 800a4a6:	2101      	movne	r1, #1
 800a4a8:	7029      	strb	r1, [r5, #0]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	2101      	movs	r1, #1
 800a4ae:	60a2      	str	r2, [r4, #8]
 800a4b0:	6123      	str	r3, [r4, #16]
 800a4b2:	7561      	strb	r1, [r4, #21]
 800a4b4:	7da0      	ldrb	r0, [r4, #22]
 800a4b6:	f080 0001 	eor.w	r0, r0, #1
 800a4ba:	bd38      	pop	{r3, r4, r5, pc}

0800a4bc <ucdr_serialize_uint8_t>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	460d      	mov	r5, r1
 800a4c0:	2101      	movs	r1, #1
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	f001 f8f4 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800a4c8:	b148      	cbz	r0, 800a4de <ucdr_serialize_uint8_t+0x22>
 800a4ca:	68a3      	ldr	r3, [r4, #8]
 800a4cc:	701d      	strb	r5, [r3, #0]
 800a4ce:	68a2      	ldr	r2, [r4, #8]
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	440a      	add	r2, r1
 800a4d6:	440b      	add	r3, r1
 800a4d8:	60a2      	str	r2, [r4, #8]
 800a4da:	6123      	str	r3, [r4, #16]
 800a4dc:	7561      	strb	r1, [r4, #21]
 800a4de:	7da0      	ldrb	r0, [r4, #22]
 800a4e0:	f080 0001 	eor.w	r0, r0, #1
 800a4e4:	bd38      	pop	{r3, r4, r5, pc}
 800a4e6:	bf00      	nop

0800a4e8 <ucdr_deserialize_uint8_t>:
 800a4e8:	b538      	push	{r3, r4, r5, lr}
 800a4ea:	460d      	mov	r5, r1
 800a4ec:	2101      	movs	r1, #1
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	f001 f8de 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800a4f4:	b150      	cbz	r0, 800a50c <ucdr_deserialize_uint8_t+0x24>
 800a4f6:	68a3      	ldr	r3, [r4, #8]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	702b      	strb	r3, [r5, #0]
 800a4fc:	68a2      	ldr	r2, [r4, #8]
 800a4fe:	6923      	ldr	r3, [r4, #16]
 800a500:	2101      	movs	r1, #1
 800a502:	440a      	add	r2, r1
 800a504:	440b      	add	r3, r1
 800a506:	60a2      	str	r2, [r4, #8]
 800a508:	6123      	str	r3, [r4, #16]
 800a50a:	7561      	strb	r1, [r4, #21]
 800a50c:	7da0      	ldrb	r0, [r4, #22]
 800a50e:	f080 0001 	eor.w	r0, r0, #1
 800a512:	bd38      	pop	{r3, r4, r5, pc}

0800a514 <ucdr_serialize_uint16_t>:
 800a514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a518:	b082      	sub	sp, #8
 800a51a:	460b      	mov	r3, r1
 800a51c:	2102      	movs	r1, #2
 800a51e:	4604      	mov	r4, r0
 800a520:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a524:	f001 f918 	bl	800b758 <ucdr_buffer_alignment>
 800a528:	4601      	mov	r1, r0
 800a52a:	4620      	mov	r0, r4
 800a52c:	7d67      	ldrb	r7, [r4, #21]
 800a52e:	f001 f957 	bl	800b7e0 <ucdr_advance_buffer>
 800a532:	2102      	movs	r1, #2
 800a534:	4620      	mov	r0, r4
 800a536:	f001 f8af 	bl	800b698 <ucdr_check_buffer_available_for>
 800a53a:	bb78      	cbnz	r0, 800a59c <ucdr_serialize_uint16_t+0x88>
 800a53c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a540:	42ab      	cmp	r3, r5
 800a542:	d926      	bls.n	800a592 <ucdr_serialize_uint16_t+0x7e>
 800a544:	1b5e      	subs	r6, r3, r5
 800a546:	60a3      	str	r3, [r4, #8]
 800a548:	6923      	ldr	r3, [r4, #16]
 800a54a:	f1c6 0802 	rsb	r8, r6, #2
 800a54e:	4433      	add	r3, r6
 800a550:	6123      	str	r3, [r4, #16]
 800a552:	4641      	mov	r1, r8
 800a554:	4620      	mov	r0, r4
 800a556:	f001 f8ab 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800a55a:	2800      	cmp	r0, #0
 800a55c:	d03b      	beq.n	800a5d6 <ucdr_serialize_uint16_t+0xc2>
 800a55e:	7d23      	ldrb	r3, [r4, #20]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d04a      	beq.n	800a5fa <ucdr_serialize_uint16_t+0xe6>
 800a564:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a568:	702b      	strb	r3, [r5, #0]
 800a56a:	2e00      	cmp	r6, #0
 800a56c:	d040      	beq.n	800a5f0 <ucdr_serialize_uint16_t+0xdc>
 800a56e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a572:	706b      	strb	r3, [r5, #1]
 800a574:	6923      	ldr	r3, [r4, #16]
 800a576:	68a2      	ldr	r2, [r4, #8]
 800a578:	7da0      	ldrb	r0, [r4, #22]
 800a57a:	3302      	adds	r3, #2
 800a57c:	1b9e      	subs	r6, r3, r6
 800a57e:	4442      	add	r2, r8
 800a580:	2302      	movs	r3, #2
 800a582:	f080 0001 	eor.w	r0, r0, #1
 800a586:	60a2      	str	r2, [r4, #8]
 800a588:	6126      	str	r6, [r4, #16]
 800a58a:	7563      	strb	r3, [r4, #21]
 800a58c:	b002      	add	sp, #8
 800a58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a592:	2102      	movs	r1, #2
 800a594:	4620      	mov	r0, r4
 800a596:	f001 f88b 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800a59a:	b190      	cbz	r0, 800a5c2 <ucdr_serialize_uint16_t+0xae>
 800a59c:	7d23      	ldrb	r3, [r4, #20]
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	68a3      	ldr	r3, [r4, #8]
 800a5a2:	d014      	beq.n	800a5ce <ucdr_serialize_uint16_t+0xba>
 800a5a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a5a8:	701a      	strb	r2, [r3, #0]
 800a5aa:	68a3      	ldr	r3, [r4, #8]
 800a5ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a5b0:	705a      	strb	r2, [r3, #1]
 800a5b2:	68a2      	ldr	r2, [r4, #8]
 800a5b4:	6923      	ldr	r3, [r4, #16]
 800a5b6:	3202      	adds	r2, #2
 800a5b8:	3302      	adds	r3, #2
 800a5ba:	2102      	movs	r1, #2
 800a5bc:	60a2      	str	r2, [r4, #8]
 800a5be:	6123      	str	r3, [r4, #16]
 800a5c0:	7561      	strb	r1, [r4, #21]
 800a5c2:	7da0      	ldrb	r0, [r4, #22]
 800a5c4:	f080 0001 	eor.w	r0, r0, #1
 800a5c8:	b002      	add	sp, #8
 800a5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a5d2:	801a      	strh	r2, [r3, #0]
 800a5d4:	e7ed      	b.n	800a5b2 <ucdr_serialize_uint16_t+0x9e>
 800a5d6:	68a2      	ldr	r2, [r4, #8]
 800a5d8:	6923      	ldr	r3, [r4, #16]
 800a5da:	7da0      	ldrb	r0, [r4, #22]
 800a5dc:	7567      	strb	r7, [r4, #21]
 800a5de:	1b92      	subs	r2, r2, r6
 800a5e0:	1b9b      	subs	r3, r3, r6
 800a5e2:	f080 0001 	eor.w	r0, r0, #1
 800a5e6:	60a2      	str	r2, [r4, #8]
 800a5e8:	6123      	str	r3, [r4, #16]
 800a5ea:	b002      	add	sp, #8
 800a5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f0:	68a3      	ldr	r3, [r4, #8]
 800a5f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a5f6:	701a      	strb	r2, [r3, #0]
 800a5f8:	e7bc      	b.n	800a574 <ucdr_serialize_uint16_t+0x60>
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f10d 0506 	add.w	r5, sp, #6
 800a600:	4629      	mov	r1, r5
 800a602:	4632      	mov	r2, r6
 800a604:	f00d f935 	bl	8017872 <memcpy>
 800a608:	68a0      	ldr	r0, [r4, #8]
 800a60a:	4642      	mov	r2, r8
 800a60c:	19a9      	adds	r1, r5, r6
 800a60e:	f00d f930 	bl	8017872 <memcpy>
 800a612:	e7af      	b.n	800a574 <ucdr_serialize_uint16_t+0x60>

0800a614 <ucdr_serialize_endian_uint16_t>:
 800a614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a618:	b083      	sub	sp, #12
 800a61a:	460d      	mov	r5, r1
 800a61c:	2102      	movs	r1, #2
 800a61e:	4604      	mov	r4, r0
 800a620:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a624:	f001 f898 	bl	800b758 <ucdr_buffer_alignment>
 800a628:	4601      	mov	r1, r0
 800a62a:	4620      	mov	r0, r4
 800a62c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a630:	f001 f8d6 	bl	800b7e0 <ucdr_advance_buffer>
 800a634:	2102      	movs	r1, #2
 800a636:	4620      	mov	r0, r4
 800a638:	f001 f82e 	bl	800b698 <ucdr_check_buffer_available_for>
 800a63c:	bb70      	cbnz	r0, 800a69c <ucdr_serialize_endian_uint16_t+0x88>
 800a63e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a642:	42be      	cmp	r6, r7
 800a644:	d925      	bls.n	800a692 <ucdr_serialize_endian_uint16_t+0x7e>
 800a646:	6923      	ldr	r3, [r4, #16]
 800a648:	60a6      	str	r6, [r4, #8]
 800a64a:	1bf6      	subs	r6, r6, r7
 800a64c:	4433      	add	r3, r6
 800a64e:	f1c6 0902 	rsb	r9, r6, #2
 800a652:	6123      	str	r3, [r4, #16]
 800a654:	4649      	mov	r1, r9
 800a656:	4620      	mov	r0, r4
 800a658:	f001 f82a 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d039      	beq.n	800a6d4 <ucdr_serialize_endian_uint16_t+0xc0>
 800a660:	2d01      	cmp	r5, #1
 800a662:	d04a      	beq.n	800a6fa <ucdr_serialize_endian_uint16_t+0xe6>
 800a664:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a668:	703b      	strb	r3, [r7, #0]
 800a66a:	2e00      	cmp	r6, #0
 800a66c:	d040      	beq.n	800a6f0 <ucdr_serialize_endian_uint16_t+0xdc>
 800a66e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a672:	707b      	strb	r3, [r7, #1]
 800a674:	6923      	ldr	r3, [r4, #16]
 800a676:	68a2      	ldr	r2, [r4, #8]
 800a678:	7da0      	ldrb	r0, [r4, #22]
 800a67a:	3302      	adds	r3, #2
 800a67c:	444a      	add	r2, r9
 800a67e:	1b9b      	subs	r3, r3, r6
 800a680:	2102      	movs	r1, #2
 800a682:	f080 0001 	eor.w	r0, r0, #1
 800a686:	60a2      	str	r2, [r4, #8]
 800a688:	6123      	str	r3, [r4, #16]
 800a68a:	7561      	strb	r1, [r4, #21]
 800a68c:	b003      	add	sp, #12
 800a68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a692:	2102      	movs	r1, #2
 800a694:	4620      	mov	r0, r4
 800a696:	f001 f80b 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800a69a:	b188      	cbz	r0, 800a6c0 <ucdr_serialize_endian_uint16_t+0xac>
 800a69c:	2d01      	cmp	r5, #1
 800a69e:	68a3      	ldr	r3, [r4, #8]
 800a6a0:	d014      	beq.n	800a6cc <ucdr_serialize_endian_uint16_t+0xb8>
 800a6a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a6a6:	701a      	strb	r2, [r3, #0]
 800a6a8:	68a3      	ldr	r3, [r4, #8]
 800a6aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a6ae:	705a      	strb	r2, [r3, #1]
 800a6b0:	68a2      	ldr	r2, [r4, #8]
 800a6b2:	6923      	ldr	r3, [r4, #16]
 800a6b4:	3202      	adds	r2, #2
 800a6b6:	3302      	adds	r3, #2
 800a6b8:	2102      	movs	r1, #2
 800a6ba:	60a2      	str	r2, [r4, #8]
 800a6bc:	6123      	str	r3, [r4, #16]
 800a6be:	7561      	strb	r1, [r4, #21]
 800a6c0:	7da0      	ldrb	r0, [r4, #22]
 800a6c2:	f080 0001 	eor.w	r0, r0, #1
 800a6c6:	b003      	add	sp, #12
 800a6c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6cc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a6d0:	801a      	strh	r2, [r3, #0]
 800a6d2:	e7ed      	b.n	800a6b0 <ucdr_serialize_endian_uint16_t+0x9c>
 800a6d4:	68a2      	ldr	r2, [r4, #8]
 800a6d6:	6923      	ldr	r3, [r4, #16]
 800a6d8:	7da0      	ldrb	r0, [r4, #22]
 800a6da:	f884 8015 	strb.w	r8, [r4, #21]
 800a6de:	1b92      	subs	r2, r2, r6
 800a6e0:	1b9b      	subs	r3, r3, r6
 800a6e2:	f080 0001 	eor.w	r0, r0, #1
 800a6e6:	60a2      	str	r2, [r4, #8]
 800a6e8:	6123      	str	r3, [r4, #16]
 800a6ea:	b003      	add	sp, #12
 800a6ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6f0:	68a3      	ldr	r3, [r4, #8]
 800a6f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a6f6:	701a      	strb	r2, [r3, #0]
 800a6f8:	e7bc      	b.n	800a674 <ucdr_serialize_endian_uint16_t+0x60>
 800a6fa:	f10d 0506 	add.w	r5, sp, #6
 800a6fe:	4629      	mov	r1, r5
 800a700:	4632      	mov	r2, r6
 800a702:	4638      	mov	r0, r7
 800a704:	f00d f8b5 	bl	8017872 <memcpy>
 800a708:	68a0      	ldr	r0, [r4, #8]
 800a70a:	464a      	mov	r2, r9
 800a70c:	19a9      	adds	r1, r5, r6
 800a70e:	f00d f8b0 	bl	8017872 <memcpy>
 800a712:	e7af      	b.n	800a674 <ucdr_serialize_endian_uint16_t+0x60>

0800a714 <ucdr_deserialize_uint16_t>:
 800a714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a718:	460d      	mov	r5, r1
 800a71a:	2102      	movs	r1, #2
 800a71c:	4604      	mov	r4, r0
 800a71e:	f001 f81b 	bl	800b758 <ucdr_buffer_alignment>
 800a722:	4601      	mov	r1, r0
 800a724:	4620      	mov	r0, r4
 800a726:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a72a:	f001 f859 	bl	800b7e0 <ucdr_advance_buffer>
 800a72e:	2102      	movs	r1, #2
 800a730:	4620      	mov	r0, r4
 800a732:	f000 ffb1 	bl	800b698 <ucdr_check_buffer_available_for>
 800a736:	bb60      	cbnz	r0, 800a792 <ucdr_deserialize_uint16_t+0x7e>
 800a738:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a73c:	42be      	cmp	r6, r7
 800a73e:	d923      	bls.n	800a788 <ucdr_deserialize_uint16_t+0x74>
 800a740:	6923      	ldr	r3, [r4, #16]
 800a742:	60a6      	str	r6, [r4, #8]
 800a744:	1bf6      	subs	r6, r6, r7
 800a746:	4433      	add	r3, r6
 800a748:	f1c6 0902 	rsb	r9, r6, #2
 800a74c:	6123      	str	r3, [r4, #16]
 800a74e:	4649      	mov	r1, r9
 800a750:	4620      	mov	r0, r4
 800a752:	f000 ffad 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800a756:	2800      	cmp	r0, #0
 800a758:	d034      	beq.n	800a7c4 <ucdr_deserialize_uint16_t+0xb0>
 800a75a:	7d23      	ldrb	r3, [r4, #20]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d042      	beq.n	800a7e6 <ucdr_deserialize_uint16_t+0xd2>
 800a760:	787b      	ldrb	r3, [r7, #1]
 800a762:	702b      	strb	r3, [r5, #0]
 800a764:	2e00      	cmp	r6, #0
 800a766:	d03a      	beq.n	800a7de <ucdr_deserialize_uint16_t+0xca>
 800a768:	783b      	ldrb	r3, [r7, #0]
 800a76a:	706b      	strb	r3, [r5, #1]
 800a76c:	6923      	ldr	r3, [r4, #16]
 800a76e:	68a2      	ldr	r2, [r4, #8]
 800a770:	7da0      	ldrb	r0, [r4, #22]
 800a772:	2102      	movs	r1, #2
 800a774:	3302      	adds	r3, #2
 800a776:	444a      	add	r2, r9
 800a778:	1b9b      	subs	r3, r3, r6
 800a77a:	7561      	strb	r1, [r4, #21]
 800a77c:	60a2      	str	r2, [r4, #8]
 800a77e:	6123      	str	r3, [r4, #16]
 800a780:	f080 0001 	eor.w	r0, r0, #1
 800a784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a788:	2102      	movs	r1, #2
 800a78a:	4620      	mov	r0, r4
 800a78c:	f000 ff90 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800a790:	b180      	cbz	r0, 800a7b4 <ucdr_deserialize_uint16_t+0xa0>
 800a792:	7d23      	ldrb	r3, [r4, #20]
 800a794:	2b01      	cmp	r3, #1
 800a796:	68a3      	ldr	r3, [r4, #8]
 800a798:	d011      	beq.n	800a7be <ucdr_deserialize_uint16_t+0xaa>
 800a79a:	785b      	ldrb	r3, [r3, #1]
 800a79c:	702b      	strb	r3, [r5, #0]
 800a79e:	68a3      	ldr	r3, [r4, #8]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	706b      	strb	r3, [r5, #1]
 800a7a4:	68a2      	ldr	r2, [r4, #8]
 800a7a6:	6923      	ldr	r3, [r4, #16]
 800a7a8:	3202      	adds	r2, #2
 800a7aa:	3302      	adds	r3, #2
 800a7ac:	2102      	movs	r1, #2
 800a7ae:	60a2      	str	r2, [r4, #8]
 800a7b0:	6123      	str	r3, [r4, #16]
 800a7b2:	7561      	strb	r1, [r4, #21]
 800a7b4:	7da0      	ldrb	r0, [r4, #22]
 800a7b6:	f080 0001 	eor.w	r0, r0, #1
 800a7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7be:	881b      	ldrh	r3, [r3, #0]
 800a7c0:	802b      	strh	r3, [r5, #0]
 800a7c2:	e7ef      	b.n	800a7a4 <ucdr_deserialize_uint16_t+0x90>
 800a7c4:	68a2      	ldr	r2, [r4, #8]
 800a7c6:	6923      	ldr	r3, [r4, #16]
 800a7c8:	7da0      	ldrb	r0, [r4, #22]
 800a7ca:	f884 8015 	strb.w	r8, [r4, #21]
 800a7ce:	1b92      	subs	r2, r2, r6
 800a7d0:	1b9b      	subs	r3, r3, r6
 800a7d2:	60a2      	str	r2, [r4, #8]
 800a7d4:	6123      	str	r3, [r4, #16]
 800a7d6:	f080 0001 	eor.w	r0, r0, #1
 800a7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7de:	68a3      	ldr	r3, [r4, #8]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	706b      	strb	r3, [r5, #1]
 800a7e4:	e7c2      	b.n	800a76c <ucdr_deserialize_uint16_t+0x58>
 800a7e6:	4639      	mov	r1, r7
 800a7e8:	4632      	mov	r2, r6
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f00d f841 	bl	8017872 <memcpy>
 800a7f0:	68a1      	ldr	r1, [r4, #8]
 800a7f2:	464a      	mov	r2, r9
 800a7f4:	19a8      	adds	r0, r5, r6
 800a7f6:	f00d f83c 	bl	8017872 <memcpy>
 800a7fa:	e7b7      	b.n	800a76c <ucdr_deserialize_uint16_t+0x58>

0800a7fc <ucdr_deserialize_endian_uint16_t>:
 800a7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a800:	460e      	mov	r6, r1
 800a802:	2102      	movs	r1, #2
 800a804:	4604      	mov	r4, r0
 800a806:	4615      	mov	r5, r2
 800a808:	f000 ffa6 	bl	800b758 <ucdr_buffer_alignment>
 800a80c:	4601      	mov	r1, r0
 800a80e:	4620      	mov	r0, r4
 800a810:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a814:	f000 ffe4 	bl	800b7e0 <ucdr_advance_buffer>
 800a818:	2102      	movs	r1, #2
 800a81a:	4620      	mov	r0, r4
 800a81c:	f000 ff3c 	bl	800b698 <ucdr_check_buffer_available_for>
 800a820:	bb70      	cbnz	r0, 800a880 <ucdr_deserialize_endian_uint16_t+0x84>
 800a822:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800a826:	4547      	cmp	r7, r8
 800a828:	d925      	bls.n	800a876 <ucdr_deserialize_endian_uint16_t+0x7a>
 800a82a:	6923      	ldr	r3, [r4, #16]
 800a82c:	60a7      	str	r7, [r4, #8]
 800a82e:	eba7 0708 	sub.w	r7, r7, r8
 800a832:	443b      	add	r3, r7
 800a834:	f1c7 0a02 	rsb	sl, r7, #2
 800a838:	6123      	str	r3, [r4, #16]
 800a83a:	4651      	mov	r1, sl
 800a83c:	4620      	mov	r0, r4
 800a83e:	f000 ff37 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800a842:	2800      	cmp	r0, #0
 800a844:	d034      	beq.n	800a8b0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800a846:	2e01      	cmp	r6, #1
 800a848:	d043      	beq.n	800a8d2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800a84a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a84e:	702b      	strb	r3, [r5, #0]
 800a850:	2f00      	cmp	r7, #0
 800a852:	d03a      	beq.n	800a8ca <ucdr_deserialize_endian_uint16_t+0xce>
 800a854:	f898 3000 	ldrb.w	r3, [r8]
 800a858:	706b      	strb	r3, [r5, #1]
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	68a2      	ldr	r2, [r4, #8]
 800a85e:	7da0      	ldrb	r0, [r4, #22]
 800a860:	2102      	movs	r1, #2
 800a862:	3302      	adds	r3, #2
 800a864:	4452      	add	r2, sl
 800a866:	1bdb      	subs	r3, r3, r7
 800a868:	7561      	strb	r1, [r4, #21]
 800a86a:	60a2      	str	r2, [r4, #8]
 800a86c:	6123      	str	r3, [r4, #16]
 800a86e:	f080 0001 	eor.w	r0, r0, #1
 800a872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a876:	2102      	movs	r1, #2
 800a878:	4620      	mov	r0, r4
 800a87a:	f000 ff19 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800a87e:	b178      	cbz	r0, 800a8a0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800a880:	2e01      	cmp	r6, #1
 800a882:	68a3      	ldr	r3, [r4, #8]
 800a884:	d011      	beq.n	800a8aa <ucdr_deserialize_endian_uint16_t+0xae>
 800a886:	785b      	ldrb	r3, [r3, #1]
 800a888:	702b      	strb	r3, [r5, #0]
 800a88a:	68a3      	ldr	r3, [r4, #8]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	706b      	strb	r3, [r5, #1]
 800a890:	68a2      	ldr	r2, [r4, #8]
 800a892:	6923      	ldr	r3, [r4, #16]
 800a894:	3202      	adds	r2, #2
 800a896:	3302      	adds	r3, #2
 800a898:	2102      	movs	r1, #2
 800a89a:	60a2      	str	r2, [r4, #8]
 800a89c:	6123      	str	r3, [r4, #16]
 800a89e:	7561      	strb	r1, [r4, #21]
 800a8a0:	7da0      	ldrb	r0, [r4, #22]
 800a8a2:	f080 0001 	eor.w	r0, r0, #1
 800a8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	802b      	strh	r3, [r5, #0]
 800a8ae:	e7ef      	b.n	800a890 <ucdr_deserialize_endian_uint16_t+0x94>
 800a8b0:	68a2      	ldr	r2, [r4, #8]
 800a8b2:	6923      	ldr	r3, [r4, #16]
 800a8b4:	7da0      	ldrb	r0, [r4, #22]
 800a8b6:	f884 9015 	strb.w	r9, [r4, #21]
 800a8ba:	1bd2      	subs	r2, r2, r7
 800a8bc:	1bdb      	subs	r3, r3, r7
 800a8be:	60a2      	str	r2, [r4, #8]
 800a8c0:	6123      	str	r3, [r4, #16]
 800a8c2:	f080 0001 	eor.w	r0, r0, #1
 800a8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ca:	68a3      	ldr	r3, [r4, #8]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	706b      	strb	r3, [r5, #1]
 800a8d0:	e7c3      	b.n	800a85a <ucdr_deserialize_endian_uint16_t+0x5e>
 800a8d2:	4641      	mov	r1, r8
 800a8d4:	463a      	mov	r2, r7
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	f00c ffcb 	bl	8017872 <memcpy>
 800a8dc:	68a1      	ldr	r1, [r4, #8]
 800a8de:	4652      	mov	r2, sl
 800a8e0:	19e8      	adds	r0, r5, r7
 800a8e2:	f00c ffc6 	bl	8017872 <memcpy>
 800a8e6:	e7b8      	b.n	800a85a <ucdr_deserialize_endian_uint16_t+0x5e>

0800a8e8 <ucdr_serialize_uint32_t>:
 800a8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ec:	b082      	sub	sp, #8
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	9101      	str	r1, [sp, #4]
 800a8f2:	2104      	movs	r1, #4
 800a8f4:	f000 ff30 	bl	800b758 <ucdr_buffer_alignment>
 800a8f8:	4601      	mov	r1, r0
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	7d67      	ldrb	r7, [r4, #21]
 800a8fe:	f000 ff6f 	bl	800b7e0 <ucdr_advance_buffer>
 800a902:	2104      	movs	r1, #4
 800a904:	4620      	mov	r0, r4
 800a906:	f000 fec7 	bl	800b698 <ucdr_check_buffer_available_for>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d139      	bne.n	800a982 <ucdr_serialize_uint32_t+0x9a>
 800a90e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a912:	42ab      	cmp	r3, r5
 800a914:	d930      	bls.n	800a978 <ucdr_serialize_uint32_t+0x90>
 800a916:	1b5e      	subs	r6, r3, r5
 800a918:	60a3      	str	r3, [r4, #8]
 800a91a:	6923      	ldr	r3, [r4, #16]
 800a91c:	f1c6 0804 	rsb	r8, r6, #4
 800a920:	4433      	add	r3, r6
 800a922:	6123      	str	r3, [r4, #16]
 800a924:	4641      	mov	r1, r8
 800a926:	4620      	mov	r0, r4
 800a928:	f000 fec2 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d04c      	beq.n	800a9ca <ucdr_serialize_uint32_t+0xe2>
 800a930:	7d23      	ldrb	r3, [r4, #20]
 800a932:	2b01      	cmp	r3, #1
 800a934:	d063      	beq.n	800a9fe <ucdr_serialize_uint32_t+0x116>
 800a936:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a93a:	702b      	strb	r3, [r5, #0]
 800a93c:	2e00      	cmp	r6, #0
 800a93e:	d051      	beq.n	800a9e4 <ucdr_serialize_uint32_t+0xfc>
 800a940:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a944:	706b      	strb	r3, [r5, #1]
 800a946:	2e01      	cmp	r6, #1
 800a948:	d050      	beq.n	800a9ec <ucdr_serialize_uint32_t+0x104>
 800a94a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a94e:	70ab      	strb	r3, [r5, #2]
 800a950:	2e02      	cmp	r6, #2
 800a952:	d04f      	beq.n	800a9f4 <ucdr_serialize_uint32_t+0x10c>
 800a954:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a958:	70eb      	strb	r3, [r5, #3]
 800a95a:	6923      	ldr	r3, [r4, #16]
 800a95c:	68a2      	ldr	r2, [r4, #8]
 800a95e:	7da0      	ldrb	r0, [r4, #22]
 800a960:	3304      	adds	r3, #4
 800a962:	1b9e      	subs	r6, r3, r6
 800a964:	4442      	add	r2, r8
 800a966:	2304      	movs	r3, #4
 800a968:	f080 0001 	eor.w	r0, r0, #1
 800a96c:	60a2      	str	r2, [r4, #8]
 800a96e:	6126      	str	r6, [r4, #16]
 800a970:	7563      	strb	r3, [r4, #21]
 800a972:	b002      	add	sp, #8
 800a974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a978:	2104      	movs	r1, #4
 800a97a:	4620      	mov	r0, r4
 800a97c:	f000 fe98 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800a980:	b1d0      	cbz	r0, 800a9b8 <ucdr_serialize_uint32_t+0xd0>
 800a982:	7d23      	ldrb	r3, [r4, #20]
 800a984:	2b01      	cmp	r3, #1
 800a986:	68a3      	ldr	r3, [r4, #8]
 800a988:	d01c      	beq.n	800a9c4 <ucdr_serialize_uint32_t+0xdc>
 800a98a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a98e:	701a      	strb	r2, [r3, #0]
 800a990:	68a3      	ldr	r3, [r4, #8]
 800a992:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a996:	705a      	strb	r2, [r3, #1]
 800a998:	68a3      	ldr	r3, [r4, #8]
 800a99a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a99e:	709a      	strb	r2, [r3, #2]
 800a9a0:	68a3      	ldr	r3, [r4, #8]
 800a9a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a9a6:	70da      	strb	r2, [r3, #3]
 800a9a8:	68a2      	ldr	r2, [r4, #8]
 800a9aa:	6923      	ldr	r3, [r4, #16]
 800a9ac:	3204      	adds	r2, #4
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	2104      	movs	r1, #4
 800a9b2:	60a2      	str	r2, [r4, #8]
 800a9b4:	6123      	str	r3, [r4, #16]
 800a9b6:	7561      	strb	r1, [r4, #21]
 800a9b8:	7da0      	ldrb	r0, [r4, #22]
 800a9ba:	f080 0001 	eor.w	r0, r0, #1
 800a9be:	b002      	add	sp, #8
 800a9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c4:	9a01      	ldr	r2, [sp, #4]
 800a9c6:	601a      	str	r2, [r3, #0]
 800a9c8:	e7ee      	b.n	800a9a8 <ucdr_serialize_uint32_t+0xc0>
 800a9ca:	68a2      	ldr	r2, [r4, #8]
 800a9cc:	6923      	ldr	r3, [r4, #16]
 800a9ce:	7da0      	ldrb	r0, [r4, #22]
 800a9d0:	7567      	strb	r7, [r4, #21]
 800a9d2:	1b92      	subs	r2, r2, r6
 800a9d4:	1b9b      	subs	r3, r3, r6
 800a9d6:	f080 0001 	eor.w	r0, r0, #1
 800a9da:	60a2      	str	r2, [r4, #8]
 800a9dc:	6123      	str	r3, [r4, #16]
 800a9de:	b002      	add	sp, #8
 800a9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e4:	68a3      	ldr	r3, [r4, #8]
 800a9e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a9ea:	701a      	strb	r2, [r3, #0]
 800a9ec:	68a3      	ldr	r3, [r4, #8]
 800a9ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a9f2:	701a      	strb	r2, [r3, #0]
 800a9f4:	68a3      	ldr	r3, [r4, #8]
 800a9f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a9fa:	701a      	strb	r2, [r3, #0]
 800a9fc:	e7ad      	b.n	800a95a <ucdr_serialize_uint32_t+0x72>
 800a9fe:	4628      	mov	r0, r5
 800aa00:	ad01      	add	r5, sp, #4
 800aa02:	4629      	mov	r1, r5
 800aa04:	4632      	mov	r2, r6
 800aa06:	f00c ff34 	bl	8017872 <memcpy>
 800aa0a:	68a0      	ldr	r0, [r4, #8]
 800aa0c:	4642      	mov	r2, r8
 800aa0e:	19a9      	adds	r1, r5, r6
 800aa10:	f00c ff2f 	bl	8017872 <memcpy>
 800aa14:	e7a1      	b.n	800a95a <ucdr_serialize_uint32_t+0x72>
 800aa16:	bf00      	nop

0800aa18 <ucdr_serialize_endian_uint32_t>:
 800aa18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa1c:	b083      	sub	sp, #12
 800aa1e:	460d      	mov	r5, r1
 800aa20:	2104      	movs	r1, #4
 800aa22:	4604      	mov	r4, r0
 800aa24:	9201      	str	r2, [sp, #4]
 800aa26:	f000 fe97 	bl	800b758 <ucdr_buffer_alignment>
 800aa2a:	4601      	mov	r1, r0
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aa32:	f000 fed5 	bl	800b7e0 <ucdr_advance_buffer>
 800aa36:	2104      	movs	r1, #4
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 fe2d 	bl	800b698 <ucdr_check_buffer_available_for>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d138      	bne.n	800aab4 <ucdr_serialize_endian_uint32_t+0x9c>
 800aa42:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800aa46:	42b7      	cmp	r7, r6
 800aa48:	d92f      	bls.n	800aaaa <ucdr_serialize_endian_uint32_t+0x92>
 800aa4a:	6923      	ldr	r3, [r4, #16]
 800aa4c:	60a7      	str	r7, [r4, #8]
 800aa4e:	1bbf      	subs	r7, r7, r6
 800aa50:	443b      	add	r3, r7
 800aa52:	f1c7 0904 	rsb	r9, r7, #4
 800aa56:	6123      	str	r3, [r4, #16]
 800aa58:	4649      	mov	r1, r9
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f000 fe28 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d04a      	beq.n	800aafa <ucdr_serialize_endian_uint32_t+0xe2>
 800aa64:	2d01      	cmp	r5, #1
 800aa66:	d063      	beq.n	800ab30 <ucdr_serialize_endian_uint32_t+0x118>
 800aa68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aa6c:	7033      	strb	r3, [r6, #0]
 800aa6e:	2f00      	cmp	r7, #0
 800aa70:	d051      	beq.n	800ab16 <ucdr_serialize_endian_uint32_t+0xfe>
 800aa72:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aa76:	7073      	strb	r3, [r6, #1]
 800aa78:	2f01      	cmp	r7, #1
 800aa7a:	d050      	beq.n	800ab1e <ucdr_serialize_endian_uint32_t+0x106>
 800aa7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800aa80:	70b3      	strb	r3, [r6, #2]
 800aa82:	2f02      	cmp	r7, #2
 800aa84:	d04f      	beq.n	800ab26 <ucdr_serialize_endian_uint32_t+0x10e>
 800aa86:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aa8a:	70f3      	strb	r3, [r6, #3]
 800aa8c:	6923      	ldr	r3, [r4, #16]
 800aa8e:	68a2      	ldr	r2, [r4, #8]
 800aa90:	7da0      	ldrb	r0, [r4, #22]
 800aa92:	3304      	adds	r3, #4
 800aa94:	444a      	add	r2, r9
 800aa96:	1bdb      	subs	r3, r3, r7
 800aa98:	2104      	movs	r1, #4
 800aa9a:	f080 0001 	eor.w	r0, r0, #1
 800aa9e:	60a2      	str	r2, [r4, #8]
 800aaa0:	6123      	str	r3, [r4, #16]
 800aaa2:	7561      	strb	r1, [r4, #21]
 800aaa4:	b003      	add	sp, #12
 800aaa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaaa:	2104      	movs	r1, #4
 800aaac:	4620      	mov	r0, r4
 800aaae:	f000 fdff 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800aab2:	b1c8      	cbz	r0, 800aae8 <ucdr_serialize_endian_uint32_t+0xd0>
 800aab4:	2d01      	cmp	r5, #1
 800aab6:	68a3      	ldr	r3, [r4, #8]
 800aab8:	d01c      	beq.n	800aaf4 <ucdr_serialize_endian_uint32_t+0xdc>
 800aaba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aabe:	701a      	strb	r2, [r3, #0]
 800aac0:	68a3      	ldr	r3, [r4, #8]
 800aac2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aac6:	705a      	strb	r2, [r3, #1]
 800aac8:	68a3      	ldr	r3, [r4, #8]
 800aaca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aace:	709a      	strb	r2, [r3, #2]
 800aad0:	68a3      	ldr	r3, [r4, #8]
 800aad2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aad6:	70da      	strb	r2, [r3, #3]
 800aad8:	68a2      	ldr	r2, [r4, #8]
 800aada:	6923      	ldr	r3, [r4, #16]
 800aadc:	3204      	adds	r2, #4
 800aade:	3304      	adds	r3, #4
 800aae0:	2104      	movs	r1, #4
 800aae2:	60a2      	str	r2, [r4, #8]
 800aae4:	6123      	str	r3, [r4, #16]
 800aae6:	7561      	strb	r1, [r4, #21]
 800aae8:	7da0      	ldrb	r0, [r4, #22]
 800aaea:	f080 0001 	eor.w	r0, r0, #1
 800aaee:	b003      	add	sp, #12
 800aaf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaf4:	9a01      	ldr	r2, [sp, #4]
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	e7ee      	b.n	800aad8 <ucdr_serialize_endian_uint32_t+0xc0>
 800aafa:	68a2      	ldr	r2, [r4, #8]
 800aafc:	6923      	ldr	r3, [r4, #16]
 800aafe:	7da0      	ldrb	r0, [r4, #22]
 800ab00:	f884 8015 	strb.w	r8, [r4, #21]
 800ab04:	1bd2      	subs	r2, r2, r7
 800ab06:	1bdb      	subs	r3, r3, r7
 800ab08:	f080 0001 	eor.w	r0, r0, #1
 800ab0c:	60a2      	str	r2, [r4, #8]
 800ab0e:	6123      	str	r3, [r4, #16]
 800ab10:	b003      	add	sp, #12
 800ab12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab16:	68a3      	ldr	r3, [r4, #8]
 800ab18:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ab1c:	701a      	strb	r2, [r3, #0]
 800ab1e:	68a3      	ldr	r3, [r4, #8]
 800ab20:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ab24:	701a      	strb	r2, [r3, #0]
 800ab26:	68a3      	ldr	r3, [r4, #8]
 800ab28:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ab2c:	701a      	strb	r2, [r3, #0]
 800ab2e:	e7ad      	b.n	800aa8c <ucdr_serialize_endian_uint32_t+0x74>
 800ab30:	ad01      	add	r5, sp, #4
 800ab32:	4629      	mov	r1, r5
 800ab34:	463a      	mov	r2, r7
 800ab36:	4630      	mov	r0, r6
 800ab38:	f00c fe9b 	bl	8017872 <memcpy>
 800ab3c:	68a0      	ldr	r0, [r4, #8]
 800ab3e:	464a      	mov	r2, r9
 800ab40:	19e9      	adds	r1, r5, r7
 800ab42:	f00c fe96 	bl	8017872 <memcpy>
 800ab46:	e7a1      	b.n	800aa8c <ucdr_serialize_endian_uint32_t+0x74>

0800ab48 <ucdr_deserialize_uint32_t>:
 800ab48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab4c:	460d      	mov	r5, r1
 800ab4e:	2104      	movs	r1, #4
 800ab50:	4604      	mov	r4, r0
 800ab52:	f000 fe01 	bl	800b758 <ucdr_buffer_alignment>
 800ab56:	4601      	mov	r1, r0
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ab5e:	f000 fe3f 	bl	800b7e0 <ucdr_advance_buffer>
 800ab62:	2104      	movs	r1, #4
 800ab64:	4620      	mov	r0, r4
 800ab66:	f000 fd97 	bl	800b698 <ucdr_check_buffer_available_for>
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	d138      	bne.n	800abe0 <ucdr_deserialize_uint32_t+0x98>
 800ab6e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ab72:	42b7      	cmp	r7, r6
 800ab74:	d92f      	bls.n	800abd6 <ucdr_deserialize_uint32_t+0x8e>
 800ab76:	6923      	ldr	r3, [r4, #16]
 800ab78:	60a7      	str	r7, [r4, #8]
 800ab7a:	1bbf      	subs	r7, r7, r6
 800ab7c:	443b      	add	r3, r7
 800ab7e:	f1c7 0904 	rsb	r9, r7, #4
 800ab82:	6123      	str	r3, [r4, #16]
 800ab84:	4649      	mov	r1, r9
 800ab86:	4620      	mov	r0, r4
 800ab88:	f000 fd92 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d046      	beq.n	800ac1e <ucdr_deserialize_uint32_t+0xd6>
 800ab90:	7d23      	ldrb	r3, [r4, #20]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d05c      	beq.n	800ac50 <ucdr_deserialize_uint32_t+0x108>
 800ab96:	78f3      	ldrb	r3, [r6, #3]
 800ab98:	702b      	strb	r3, [r5, #0]
 800ab9a:	2f00      	cmp	r7, #0
 800ab9c:	d04c      	beq.n	800ac38 <ucdr_deserialize_uint32_t+0xf0>
 800ab9e:	78b3      	ldrb	r3, [r6, #2]
 800aba0:	706b      	strb	r3, [r5, #1]
 800aba2:	2f01      	cmp	r7, #1
 800aba4:	f105 0302 	add.w	r3, r5, #2
 800aba8:	d04a      	beq.n	800ac40 <ucdr_deserialize_uint32_t+0xf8>
 800abaa:	7873      	ldrb	r3, [r6, #1]
 800abac:	70ab      	strb	r3, [r5, #2]
 800abae:	2f02      	cmp	r7, #2
 800abb0:	f105 0303 	add.w	r3, r5, #3
 800abb4:	d048      	beq.n	800ac48 <ucdr_deserialize_uint32_t+0x100>
 800abb6:	7833      	ldrb	r3, [r6, #0]
 800abb8:	70eb      	strb	r3, [r5, #3]
 800abba:	6923      	ldr	r3, [r4, #16]
 800abbc:	68a2      	ldr	r2, [r4, #8]
 800abbe:	7da0      	ldrb	r0, [r4, #22]
 800abc0:	2104      	movs	r1, #4
 800abc2:	3304      	adds	r3, #4
 800abc4:	444a      	add	r2, r9
 800abc6:	1bdb      	subs	r3, r3, r7
 800abc8:	7561      	strb	r1, [r4, #21]
 800abca:	60a2      	str	r2, [r4, #8]
 800abcc:	6123      	str	r3, [r4, #16]
 800abce:	f080 0001 	eor.w	r0, r0, #1
 800abd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abd6:	2104      	movs	r1, #4
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 fd69 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800abde:	b1b0      	cbz	r0, 800ac0e <ucdr_deserialize_uint32_t+0xc6>
 800abe0:	7d23      	ldrb	r3, [r4, #20]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	68a3      	ldr	r3, [r4, #8]
 800abe6:	d017      	beq.n	800ac18 <ucdr_deserialize_uint32_t+0xd0>
 800abe8:	78db      	ldrb	r3, [r3, #3]
 800abea:	702b      	strb	r3, [r5, #0]
 800abec:	68a3      	ldr	r3, [r4, #8]
 800abee:	789b      	ldrb	r3, [r3, #2]
 800abf0:	706b      	strb	r3, [r5, #1]
 800abf2:	68a3      	ldr	r3, [r4, #8]
 800abf4:	785b      	ldrb	r3, [r3, #1]
 800abf6:	70ab      	strb	r3, [r5, #2]
 800abf8:	68a3      	ldr	r3, [r4, #8]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	70eb      	strb	r3, [r5, #3]
 800abfe:	68a2      	ldr	r2, [r4, #8]
 800ac00:	6923      	ldr	r3, [r4, #16]
 800ac02:	3204      	adds	r2, #4
 800ac04:	3304      	adds	r3, #4
 800ac06:	2104      	movs	r1, #4
 800ac08:	60a2      	str	r2, [r4, #8]
 800ac0a:	6123      	str	r3, [r4, #16]
 800ac0c:	7561      	strb	r1, [r4, #21]
 800ac0e:	7da0      	ldrb	r0, [r4, #22]
 800ac10:	f080 0001 	eor.w	r0, r0, #1
 800ac14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	602b      	str	r3, [r5, #0]
 800ac1c:	e7ef      	b.n	800abfe <ucdr_deserialize_uint32_t+0xb6>
 800ac1e:	68a2      	ldr	r2, [r4, #8]
 800ac20:	6923      	ldr	r3, [r4, #16]
 800ac22:	7da0      	ldrb	r0, [r4, #22]
 800ac24:	f884 8015 	strb.w	r8, [r4, #21]
 800ac28:	1bd2      	subs	r2, r2, r7
 800ac2a:	1bdb      	subs	r3, r3, r7
 800ac2c:	60a2      	str	r2, [r4, #8]
 800ac2e:	6123      	str	r3, [r4, #16]
 800ac30:	f080 0001 	eor.w	r0, r0, #1
 800ac34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac38:	68a3      	ldr	r3, [r4, #8]
 800ac3a:	789b      	ldrb	r3, [r3, #2]
 800ac3c:	706b      	strb	r3, [r5, #1]
 800ac3e:	1cab      	adds	r3, r5, #2
 800ac40:	68a2      	ldr	r2, [r4, #8]
 800ac42:	7852      	ldrb	r2, [r2, #1]
 800ac44:	f803 2b01 	strb.w	r2, [r3], #1
 800ac48:	68a2      	ldr	r2, [r4, #8]
 800ac4a:	7812      	ldrb	r2, [r2, #0]
 800ac4c:	701a      	strb	r2, [r3, #0]
 800ac4e:	e7b4      	b.n	800abba <ucdr_deserialize_uint32_t+0x72>
 800ac50:	4631      	mov	r1, r6
 800ac52:	463a      	mov	r2, r7
 800ac54:	4628      	mov	r0, r5
 800ac56:	f00c fe0c 	bl	8017872 <memcpy>
 800ac5a:	68a1      	ldr	r1, [r4, #8]
 800ac5c:	464a      	mov	r2, r9
 800ac5e:	19e8      	adds	r0, r5, r7
 800ac60:	f00c fe07 	bl	8017872 <memcpy>
 800ac64:	e7a9      	b.n	800abba <ucdr_deserialize_uint32_t+0x72>
 800ac66:	bf00      	nop

0800ac68 <ucdr_deserialize_endian_uint32_t>:
 800ac68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac6c:	460e      	mov	r6, r1
 800ac6e:	2104      	movs	r1, #4
 800ac70:	4604      	mov	r4, r0
 800ac72:	4615      	mov	r5, r2
 800ac74:	f000 fd70 	bl	800b758 <ucdr_buffer_alignment>
 800ac78:	4601      	mov	r1, r0
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ac80:	f000 fdae 	bl	800b7e0 <ucdr_advance_buffer>
 800ac84:	2104      	movs	r1, #4
 800ac86:	4620      	mov	r0, r4
 800ac88:	f000 fd06 	bl	800b698 <ucdr_check_buffer_available_for>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	d13c      	bne.n	800ad0a <ucdr_deserialize_endian_uint32_t+0xa2>
 800ac90:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ac94:	42bb      	cmp	r3, r7
 800ac96:	d933      	bls.n	800ad00 <ucdr_deserialize_endian_uint32_t+0x98>
 800ac98:	eba3 0807 	sub.w	r8, r3, r7
 800ac9c:	60a3      	str	r3, [r4, #8]
 800ac9e:	6923      	ldr	r3, [r4, #16]
 800aca0:	f1c8 0a04 	rsb	sl, r8, #4
 800aca4:	4443      	add	r3, r8
 800aca6:	6123      	str	r3, [r4, #16]
 800aca8:	4651      	mov	r1, sl
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 fd00 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	d048      	beq.n	800ad46 <ucdr_deserialize_endian_uint32_t+0xde>
 800acb4:	2e01      	cmp	r6, #1
 800acb6:	d061      	beq.n	800ad7c <ucdr_deserialize_endian_uint32_t+0x114>
 800acb8:	78fb      	ldrb	r3, [r7, #3]
 800acba:	702b      	strb	r3, [r5, #0]
 800acbc:	f1b8 0f00 	cmp.w	r8, #0
 800acc0:	d050      	beq.n	800ad64 <ucdr_deserialize_endian_uint32_t+0xfc>
 800acc2:	78bb      	ldrb	r3, [r7, #2]
 800acc4:	706b      	strb	r3, [r5, #1]
 800acc6:	f1b8 0f01 	cmp.w	r8, #1
 800acca:	f105 0302 	add.w	r3, r5, #2
 800acce:	d04d      	beq.n	800ad6c <ucdr_deserialize_endian_uint32_t+0x104>
 800acd0:	787b      	ldrb	r3, [r7, #1]
 800acd2:	70ab      	strb	r3, [r5, #2]
 800acd4:	f1b8 0f02 	cmp.w	r8, #2
 800acd8:	f105 0303 	add.w	r3, r5, #3
 800acdc:	d04a      	beq.n	800ad74 <ucdr_deserialize_endian_uint32_t+0x10c>
 800acde:	783b      	ldrb	r3, [r7, #0]
 800ace0:	70eb      	strb	r3, [r5, #3]
 800ace2:	6923      	ldr	r3, [r4, #16]
 800ace4:	68a2      	ldr	r2, [r4, #8]
 800ace6:	7da0      	ldrb	r0, [r4, #22]
 800ace8:	2104      	movs	r1, #4
 800acea:	3304      	adds	r3, #4
 800acec:	4452      	add	r2, sl
 800acee:	eba3 0308 	sub.w	r3, r3, r8
 800acf2:	7561      	strb	r1, [r4, #21]
 800acf4:	60a2      	str	r2, [r4, #8]
 800acf6:	6123      	str	r3, [r4, #16]
 800acf8:	f080 0001 	eor.w	r0, r0, #1
 800acfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad00:	2104      	movs	r1, #4
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 fcd4 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800ad08:	b1a8      	cbz	r0, 800ad36 <ucdr_deserialize_endian_uint32_t+0xce>
 800ad0a:	2e01      	cmp	r6, #1
 800ad0c:	68a3      	ldr	r3, [r4, #8]
 800ad0e:	d017      	beq.n	800ad40 <ucdr_deserialize_endian_uint32_t+0xd8>
 800ad10:	78db      	ldrb	r3, [r3, #3]
 800ad12:	702b      	strb	r3, [r5, #0]
 800ad14:	68a3      	ldr	r3, [r4, #8]
 800ad16:	789b      	ldrb	r3, [r3, #2]
 800ad18:	706b      	strb	r3, [r5, #1]
 800ad1a:	68a3      	ldr	r3, [r4, #8]
 800ad1c:	785b      	ldrb	r3, [r3, #1]
 800ad1e:	70ab      	strb	r3, [r5, #2]
 800ad20:	68a3      	ldr	r3, [r4, #8]
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	70eb      	strb	r3, [r5, #3]
 800ad26:	68a2      	ldr	r2, [r4, #8]
 800ad28:	6923      	ldr	r3, [r4, #16]
 800ad2a:	3204      	adds	r2, #4
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	2104      	movs	r1, #4
 800ad30:	60a2      	str	r2, [r4, #8]
 800ad32:	6123      	str	r3, [r4, #16]
 800ad34:	7561      	strb	r1, [r4, #21]
 800ad36:	7da0      	ldrb	r0, [r4, #22]
 800ad38:	f080 0001 	eor.w	r0, r0, #1
 800ad3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	602b      	str	r3, [r5, #0]
 800ad44:	e7ef      	b.n	800ad26 <ucdr_deserialize_endian_uint32_t+0xbe>
 800ad46:	68a2      	ldr	r2, [r4, #8]
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	7da0      	ldrb	r0, [r4, #22]
 800ad4c:	f884 9015 	strb.w	r9, [r4, #21]
 800ad50:	eba2 0208 	sub.w	r2, r2, r8
 800ad54:	eba3 0308 	sub.w	r3, r3, r8
 800ad58:	60a2      	str	r2, [r4, #8]
 800ad5a:	6123      	str	r3, [r4, #16]
 800ad5c:	f080 0001 	eor.w	r0, r0, #1
 800ad60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad64:	68a3      	ldr	r3, [r4, #8]
 800ad66:	789b      	ldrb	r3, [r3, #2]
 800ad68:	706b      	strb	r3, [r5, #1]
 800ad6a:	1cab      	adds	r3, r5, #2
 800ad6c:	68a2      	ldr	r2, [r4, #8]
 800ad6e:	7852      	ldrb	r2, [r2, #1]
 800ad70:	f803 2b01 	strb.w	r2, [r3], #1
 800ad74:	68a2      	ldr	r2, [r4, #8]
 800ad76:	7812      	ldrb	r2, [r2, #0]
 800ad78:	701a      	strb	r2, [r3, #0]
 800ad7a:	e7b2      	b.n	800ace2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800ad7c:	4639      	mov	r1, r7
 800ad7e:	4642      	mov	r2, r8
 800ad80:	4628      	mov	r0, r5
 800ad82:	f00c fd76 	bl	8017872 <memcpy>
 800ad86:	68a1      	ldr	r1, [r4, #8]
 800ad88:	4652      	mov	r2, sl
 800ad8a:	eb05 0008 	add.w	r0, r5, r8
 800ad8e:	f00c fd70 	bl	8017872 <memcpy>
 800ad92:	e7a6      	b.n	800ace2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800ad94 <ucdr_serialize_uint64_t>:
 800ad94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad98:	2108      	movs	r1, #8
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	e9cd 2300 	strd	r2, r3, [sp]
 800ada2:	f000 fcd9 	bl	800b758 <ucdr_buffer_alignment>
 800ada6:	4601      	mov	r1, r0
 800ada8:	4620      	mov	r0, r4
 800adaa:	7d67      	ldrb	r7, [r4, #21]
 800adac:	f000 fd18 	bl	800b7e0 <ucdr_advance_buffer>
 800adb0:	2108      	movs	r1, #8
 800adb2:	4620      	mov	r0, r4
 800adb4:	f000 fc70 	bl	800b698 <ucdr_check_buffer_available_for>
 800adb8:	2800      	cmp	r0, #0
 800adba:	d14e      	bne.n	800ae5a <ucdr_serialize_uint64_t+0xc6>
 800adbc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800adc0:	42ab      	cmp	r3, r5
 800adc2:	d945      	bls.n	800ae50 <ucdr_serialize_uint64_t+0xbc>
 800adc4:	1b5e      	subs	r6, r3, r5
 800adc6:	60a3      	str	r3, [r4, #8]
 800adc8:	6923      	ldr	r3, [r4, #16]
 800adca:	f1c6 0808 	rsb	r8, r6, #8
 800adce:	4433      	add	r3, r6
 800add0:	6123      	str	r3, [r4, #16]
 800add2:	4641      	mov	r1, r8
 800add4:	4620      	mov	r0, r4
 800add6:	f000 fc6b 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800adda:	2800      	cmp	r0, #0
 800addc:	d074      	beq.n	800aec8 <ucdr_serialize_uint64_t+0x134>
 800adde:	7d23      	ldrb	r3, [r4, #20]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	f000 809b 	beq.w	800af1c <ucdr_serialize_uint64_t+0x188>
 800ade6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800adea:	702b      	strb	r3, [r5, #0]
 800adec:	2e00      	cmp	r6, #0
 800adee:	d078      	beq.n	800aee2 <ucdr_serialize_uint64_t+0x14e>
 800adf0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800adf4:	706b      	strb	r3, [r5, #1]
 800adf6:	2e01      	cmp	r6, #1
 800adf8:	d077      	beq.n	800aeea <ucdr_serialize_uint64_t+0x156>
 800adfa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800adfe:	70ab      	strb	r3, [r5, #2]
 800ae00:	2e02      	cmp	r6, #2
 800ae02:	d076      	beq.n	800aef2 <ucdr_serialize_uint64_t+0x15e>
 800ae04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ae08:	70eb      	strb	r3, [r5, #3]
 800ae0a:	2e03      	cmp	r6, #3
 800ae0c:	d075      	beq.n	800aefa <ucdr_serialize_uint64_t+0x166>
 800ae0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ae12:	712b      	strb	r3, [r5, #4]
 800ae14:	2e04      	cmp	r6, #4
 800ae16:	d074      	beq.n	800af02 <ucdr_serialize_uint64_t+0x16e>
 800ae18:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ae1c:	716b      	strb	r3, [r5, #5]
 800ae1e:	2e05      	cmp	r6, #5
 800ae20:	d073      	beq.n	800af0a <ucdr_serialize_uint64_t+0x176>
 800ae22:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ae26:	71ab      	strb	r3, [r5, #6]
 800ae28:	2e06      	cmp	r6, #6
 800ae2a:	d072      	beq.n	800af12 <ucdr_serialize_uint64_t+0x17e>
 800ae2c:	f89d 3000 	ldrb.w	r3, [sp]
 800ae30:	71eb      	strb	r3, [r5, #7]
 800ae32:	6923      	ldr	r3, [r4, #16]
 800ae34:	68a2      	ldr	r2, [r4, #8]
 800ae36:	7da0      	ldrb	r0, [r4, #22]
 800ae38:	3308      	adds	r3, #8
 800ae3a:	1b9e      	subs	r6, r3, r6
 800ae3c:	4442      	add	r2, r8
 800ae3e:	2308      	movs	r3, #8
 800ae40:	f080 0001 	eor.w	r0, r0, #1
 800ae44:	60a2      	str	r2, [r4, #8]
 800ae46:	6126      	str	r6, [r4, #16]
 800ae48:	7563      	strb	r3, [r4, #21]
 800ae4a:	b002      	add	sp, #8
 800ae4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae50:	2108      	movs	r1, #8
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 fc2c 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800ae58:	b350      	cbz	r0, 800aeb0 <ucdr_serialize_uint64_t+0x11c>
 800ae5a:	7d23      	ldrb	r3, [r4, #20]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d02d      	beq.n	800aebc <ucdr_serialize_uint64_t+0x128>
 800ae60:	68a3      	ldr	r3, [r4, #8]
 800ae62:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ae66:	701a      	strb	r2, [r3, #0]
 800ae68:	68a3      	ldr	r3, [r4, #8]
 800ae6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae6e:	705a      	strb	r2, [r3, #1]
 800ae70:	68a3      	ldr	r3, [r4, #8]
 800ae72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ae76:	709a      	strb	r2, [r3, #2]
 800ae78:	68a3      	ldr	r3, [r4, #8]
 800ae7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ae7e:	70da      	strb	r2, [r3, #3]
 800ae80:	68a3      	ldr	r3, [r4, #8]
 800ae82:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ae86:	711a      	strb	r2, [r3, #4]
 800ae88:	68a3      	ldr	r3, [r4, #8]
 800ae8a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ae8e:	715a      	strb	r2, [r3, #5]
 800ae90:	68a3      	ldr	r3, [r4, #8]
 800ae92:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ae96:	719a      	strb	r2, [r3, #6]
 800ae98:	68a3      	ldr	r3, [r4, #8]
 800ae9a:	f89d 2000 	ldrb.w	r2, [sp]
 800ae9e:	71da      	strb	r2, [r3, #7]
 800aea0:	68a2      	ldr	r2, [r4, #8]
 800aea2:	6923      	ldr	r3, [r4, #16]
 800aea4:	3208      	adds	r2, #8
 800aea6:	3308      	adds	r3, #8
 800aea8:	2108      	movs	r1, #8
 800aeaa:	60a2      	str	r2, [r4, #8]
 800aeac:	6123      	str	r3, [r4, #16]
 800aeae:	7561      	strb	r1, [r4, #21]
 800aeb0:	7da0      	ldrb	r0, [r4, #22]
 800aeb2:	f080 0001 	eor.w	r0, r0, #1
 800aeb6:	b002      	add	sp, #8
 800aeb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aebc:	466b      	mov	r3, sp
 800aebe:	cb03      	ldmia	r3!, {r0, r1}
 800aec0:	68a3      	ldr	r3, [r4, #8]
 800aec2:	6018      	str	r0, [r3, #0]
 800aec4:	6059      	str	r1, [r3, #4]
 800aec6:	e7eb      	b.n	800aea0 <ucdr_serialize_uint64_t+0x10c>
 800aec8:	68a2      	ldr	r2, [r4, #8]
 800aeca:	6923      	ldr	r3, [r4, #16]
 800aecc:	7da0      	ldrb	r0, [r4, #22]
 800aece:	7567      	strb	r7, [r4, #21]
 800aed0:	1b92      	subs	r2, r2, r6
 800aed2:	1b9b      	subs	r3, r3, r6
 800aed4:	f080 0001 	eor.w	r0, r0, #1
 800aed8:	60a2      	str	r2, [r4, #8]
 800aeda:	6123      	str	r3, [r4, #16]
 800aedc:	b002      	add	sp, #8
 800aede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee2:	68a3      	ldr	r3, [r4, #8]
 800aee4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aee8:	701a      	strb	r2, [r3, #0]
 800aeea:	68a3      	ldr	r3, [r4, #8]
 800aeec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aef0:	701a      	strb	r2, [r3, #0]
 800aef2:	68a3      	ldr	r3, [r4, #8]
 800aef4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aef8:	701a      	strb	r2, [r3, #0]
 800aefa:	68a3      	ldr	r3, [r4, #8]
 800aefc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800af00:	701a      	strb	r2, [r3, #0]
 800af02:	68a3      	ldr	r3, [r4, #8]
 800af04:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800af08:	701a      	strb	r2, [r3, #0]
 800af0a:	68a3      	ldr	r3, [r4, #8]
 800af0c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800af10:	701a      	strb	r2, [r3, #0]
 800af12:	68a3      	ldr	r3, [r4, #8]
 800af14:	f89d 2000 	ldrb.w	r2, [sp]
 800af18:	701a      	strb	r2, [r3, #0]
 800af1a:	e78a      	b.n	800ae32 <ucdr_serialize_uint64_t+0x9e>
 800af1c:	4628      	mov	r0, r5
 800af1e:	466d      	mov	r5, sp
 800af20:	4629      	mov	r1, r5
 800af22:	4632      	mov	r2, r6
 800af24:	f00c fca5 	bl	8017872 <memcpy>
 800af28:	68a0      	ldr	r0, [r4, #8]
 800af2a:	4642      	mov	r2, r8
 800af2c:	19a9      	adds	r1, r5, r6
 800af2e:	f00c fca0 	bl	8017872 <memcpy>
 800af32:	e77e      	b.n	800ae32 <ucdr_serialize_uint64_t+0x9e>

0800af34 <ucdr_serialize_int16_t>:
 800af34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af38:	b082      	sub	sp, #8
 800af3a:	460b      	mov	r3, r1
 800af3c:	2102      	movs	r1, #2
 800af3e:	4604      	mov	r4, r0
 800af40:	f8ad 3006 	strh.w	r3, [sp, #6]
 800af44:	f000 fc08 	bl	800b758 <ucdr_buffer_alignment>
 800af48:	4601      	mov	r1, r0
 800af4a:	4620      	mov	r0, r4
 800af4c:	7d67      	ldrb	r7, [r4, #21]
 800af4e:	f000 fc47 	bl	800b7e0 <ucdr_advance_buffer>
 800af52:	2102      	movs	r1, #2
 800af54:	4620      	mov	r0, r4
 800af56:	f000 fb9f 	bl	800b698 <ucdr_check_buffer_available_for>
 800af5a:	bb78      	cbnz	r0, 800afbc <ucdr_serialize_int16_t+0x88>
 800af5c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800af60:	42ab      	cmp	r3, r5
 800af62:	d926      	bls.n	800afb2 <ucdr_serialize_int16_t+0x7e>
 800af64:	1b5e      	subs	r6, r3, r5
 800af66:	60a3      	str	r3, [r4, #8]
 800af68:	6923      	ldr	r3, [r4, #16]
 800af6a:	f1c6 0802 	rsb	r8, r6, #2
 800af6e:	4433      	add	r3, r6
 800af70:	6123      	str	r3, [r4, #16]
 800af72:	4641      	mov	r1, r8
 800af74:	4620      	mov	r0, r4
 800af76:	f000 fb9b 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d03b      	beq.n	800aff6 <ucdr_serialize_int16_t+0xc2>
 800af7e:	7d23      	ldrb	r3, [r4, #20]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d04a      	beq.n	800b01a <ucdr_serialize_int16_t+0xe6>
 800af84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800af88:	702b      	strb	r3, [r5, #0]
 800af8a:	2e00      	cmp	r6, #0
 800af8c:	d040      	beq.n	800b010 <ucdr_serialize_int16_t+0xdc>
 800af8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800af92:	706b      	strb	r3, [r5, #1]
 800af94:	6923      	ldr	r3, [r4, #16]
 800af96:	68a2      	ldr	r2, [r4, #8]
 800af98:	7da0      	ldrb	r0, [r4, #22]
 800af9a:	3302      	adds	r3, #2
 800af9c:	1b9e      	subs	r6, r3, r6
 800af9e:	4442      	add	r2, r8
 800afa0:	2302      	movs	r3, #2
 800afa2:	f080 0001 	eor.w	r0, r0, #1
 800afa6:	60a2      	str	r2, [r4, #8]
 800afa8:	6126      	str	r6, [r4, #16]
 800afaa:	7563      	strb	r3, [r4, #21]
 800afac:	b002      	add	sp, #8
 800afae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb2:	2102      	movs	r1, #2
 800afb4:	4620      	mov	r0, r4
 800afb6:	f000 fb7b 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800afba:	b190      	cbz	r0, 800afe2 <ucdr_serialize_int16_t+0xae>
 800afbc:	7d23      	ldrb	r3, [r4, #20]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	68a3      	ldr	r3, [r4, #8]
 800afc2:	d014      	beq.n	800afee <ucdr_serialize_int16_t+0xba>
 800afc4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800afc8:	701a      	strb	r2, [r3, #0]
 800afca:	68a3      	ldr	r3, [r4, #8]
 800afcc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800afd0:	705a      	strb	r2, [r3, #1]
 800afd2:	68a2      	ldr	r2, [r4, #8]
 800afd4:	6923      	ldr	r3, [r4, #16]
 800afd6:	3202      	adds	r2, #2
 800afd8:	3302      	adds	r3, #2
 800afda:	2102      	movs	r1, #2
 800afdc:	60a2      	str	r2, [r4, #8]
 800afde:	6123      	str	r3, [r4, #16]
 800afe0:	7561      	strb	r1, [r4, #21]
 800afe2:	7da0      	ldrb	r0, [r4, #22]
 800afe4:	f080 0001 	eor.w	r0, r0, #1
 800afe8:	b002      	add	sp, #8
 800afea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aff2:	801a      	strh	r2, [r3, #0]
 800aff4:	e7ed      	b.n	800afd2 <ucdr_serialize_int16_t+0x9e>
 800aff6:	68a2      	ldr	r2, [r4, #8]
 800aff8:	6923      	ldr	r3, [r4, #16]
 800affa:	7da0      	ldrb	r0, [r4, #22]
 800affc:	7567      	strb	r7, [r4, #21]
 800affe:	1b92      	subs	r2, r2, r6
 800b000:	1b9b      	subs	r3, r3, r6
 800b002:	f080 0001 	eor.w	r0, r0, #1
 800b006:	60a2      	str	r2, [r4, #8]
 800b008:	6123      	str	r3, [r4, #16]
 800b00a:	b002      	add	sp, #8
 800b00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b010:	68a3      	ldr	r3, [r4, #8]
 800b012:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b016:	701a      	strb	r2, [r3, #0]
 800b018:	e7bc      	b.n	800af94 <ucdr_serialize_int16_t+0x60>
 800b01a:	4628      	mov	r0, r5
 800b01c:	f10d 0506 	add.w	r5, sp, #6
 800b020:	4629      	mov	r1, r5
 800b022:	4632      	mov	r2, r6
 800b024:	f00c fc25 	bl	8017872 <memcpy>
 800b028:	68a0      	ldr	r0, [r4, #8]
 800b02a:	4642      	mov	r2, r8
 800b02c:	19a9      	adds	r1, r5, r6
 800b02e:	f00c fc20 	bl	8017872 <memcpy>
 800b032:	e7af      	b.n	800af94 <ucdr_serialize_int16_t+0x60>

0800b034 <ucdr_deserialize_int16_t>:
 800b034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b038:	460d      	mov	r5, r1
 800b03a:	2102      	movs	r1, #2
 800b03c:	4604      	mov	r4, r0
 800b03e:	f000 fb8b 	bl	800b758 <ucdr_buffer_alignment>
 800b042:	4601      	mov	r1, r0
 800b044:	4620      	mov	r0, r4
 800b046:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b04a:	f000 fbc9 	bl	800b7e0 <ucdr_advance_buffer>
 800b04e:	2102      	movs	r1, #2
 800b050:	4620      	mov	r0, r4
 800b052:	f000 fb21 	bl	800b698 <ucdr_check_buffer_available_for>
 800b056:	bb60      	cbnz	r0, 800b0b2 <ucdr_deserialize_int16_t+0x7e>
 800b058:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b05c:	42be      	cmp	r6, r7
 800b05e:	d923      	bls.n	800b0a8 <ucdr_deserialize_int16_t+0x74>
 800b060:	6923      	ldr	r3, [r4, #16]
 800b062:	60a6      	str	r6, [r4, #8]
 800b064:	1bf6      	subs	r6, r6, r7
 800b066:	4433      	add	r3, r6
 800b068:	f1c6 0902 	rsb	r9, r6, #2
 800b06c:	6123      	str	r3, [r4, #16]
 800b06e:	4649      	mov	r1, r9
 800b070:	4620      	mov	r0, r4
 800b072:	f000 fb1d 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800b076:	2800      	cmp	r0, #0
 800b078:	d034      	beq.n	800b0e4 <ucdr_deserialize_int16_t+0xb0>
 800b07a:	7d23      	ldrb	r3, [r4, #20]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d042      	beq.n	800b106 <ucdr_deserialize_int16_t+0xd2>
 800b080:	787b      	ldrb	r3, [r7, #1]
 800b082:	702b      	strb	r3, [r5, #0]
 800b084:	2e00      	cmp	r6, #0
 800b086:	d03a      	beq.n	800b0fe <ucdr_deserialize_int16_t+0xca>
 800b088:	783b      	ldrb	r3, [r7, #0]
 800b08a:	706b      	strb	r3, [r5, #1]
 800b08c:	6923      	ldr	r3, [r4, #16]
 800b08e:	68a2      	ldr	r2, [r4, #8]
 800b090:	7da0      	ldrb	r0, [r4, #22]
 800b092:	2102      	movs	r1, #2
 800b094:	3302      	adds	r3, #2
 800b096:	444a      	add	r2, r9
 800b098:	1b9b      	subs	r3, r3, r6
 800b09a:	7561      	strb	r1, [r4, #21]
 800b09c:	60a2      	str	r2, [r4, #8]
 800b09e:	6123      	str	r3, [r4, #16]
 800b0a0:	f080 0001 	eor.w	r0, r0, #1
 800b0a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0a8:	2102      	movs	r1, #2
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f000 fb00 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800b0b0:	b180      	cbz	r0, 800b0d4 <ucdr_deserialize_int16_t+0xa0>
 800b0b2:	7d23      	ldrb	r3, [r4, #20]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	68a3      	ldr	r3, [r4, #8]
 800b0b8:	d011      	beq.n	800b0de <ucdr_deserialize_int16_t+0xaa>
 800b0ba:	785b      	ldrb	r3, [r3, #1]
 800b0bc:	702b      	strb	r3, [r5, #0]
 800b0be:	68a3      	ldr	r3, [r4, #8]
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	706b      	strb	r3, [r5, #1]
 800b0c4:	68a2      	ldr	r2, [r4, #8]
 800b0c6:	6923      	ldr	r3, [r4, #16]
 800b0c8:	3202      	adds	r2, #2
 800b0ca:	3302      	adds	r3, #2
 800b0cc:	2102      	movs	r1, #2
 800b0ce:	60a2      	str	r2, [r4, #8]
 800b0d0:	6123      	str	r3, [r4, #16]
 800b0d2:	7561      	strb	r1, [r4, #21]
 800b0d4:	7da0      	ldrb	r0, [r4, #22]
 800b0d6:	f080 0001 	eor.w	r0, r0, #1
 800b0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0de:	881b      	ldrh	r3, [r3, #0]
 800b0e0:	802b      	strh	r3, [r5, #0]
 800b0e2:	e7ef      	b.n	800b0c4 <ucdr_deserialize_int16_t+0x90>
 800b0e4:	68a2      	ldr	r2, [r4, #8]
 800b0e6:	6923      	ldr	r3, [r4, #16]
 800b0e8:	7da0      	ldrb	r0, [r4, #22]
 800b0ea:	f884 8015 	strb.w	r8, [r4, #21]
 800b0ee:	1b92      	subs	r2, r2, r6
 800b0f0:	1b9b      	subs	r3, r3, r6
 800b0f2:	60a2      	str	r2, [r4, #8]
 800b0f4:	6123      	str	r3, [r4, #16]
 800b0f6:	f080 0001 	eor.w	r0, r0, #1
 800b0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0fe:	68a3      	ldr	r3, [r4, #8]
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	706b      	strb	r3, [r5, #1]
 800b104:	e7c2      	b.n	800b08c <ucdr_deserialize_int16_t+0x58>
 800b106:	4639      	mov	r1, r7
 800b108:	4632      	mov	r2, r6
 800b10a:	4628      	mov	r0, r5
 800b10c:	f00c fbb1 	bl	8017872 <memcpy>
 800b110:	68a1      	ldr	r1, [r4, #8]
 800b112:	464a      	mov	r2, r9
 800b114:	19a8      	adds	r0, r5, r6
 800b116:	f00c fbac 	bl	8017872 <memcpy>
 800b11a:	e7b7      	b.n	800b08c <ucdr_deserialize_int16_t+0x58>

0800b11c <ucdr_serialize_int32_t>:
 800b11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b120:	b082      	sub	sp, #8
 800b122:	4604      	mov	r4, r0
 800b124:	9101      	str	r1, [sp, #4]
 800b126:	2104      	movs	r1, #4
 800b128:	f000 fb16 	bl	800b758 <ucdr_buffer_alignment>
 800b12c:	4601      	mov	r1, r0
 800b12e:	4620      	mov	r0, r4
 800b130:	7d67      	ldrb	r7, [r4, #21]
 800b132:	f000 fb55 	bl	800b7e0 <ucdr_advance_buffer>
 800b136:	2104      	movs	r1, #4
 800b138:	4620      	mov	r0, r4
 800b13a:	f000 faad 	bl	800b698 <ucdr_check_buffer_available_for>
 800b13e:	2800      	cmp	r0, #0
 800b140:	d139      	bne.n	800b1b6 <ucdr_serialize_int32_t+0x9a>
 800b142:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b146:	42ab      	cmp	r3, r5
 800b148:	d930      	bls.n	800b1ac <ucdr_serialize_int32_t+0x90>
 800b14a:	1b5e      	subs	r6, r3, r5
 800b14c:	60a3      	str	r3, [r4, #8]
 800b14e:	6923      	ldr	r3, [r4, #16]
 800b150:	f1c6 0804 	rsb	r8, r6, #4
 800b154:	4433      	add	r3, r6
 800b156:	6123      	str	r3, [r4, #16]
 800b158:	4641      	mov	r1, r8
 800b15a:	4620      	mov	r0, r4
 800b15c:	f000 faa8 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800b160:	2800      	cmp	r0, #0
 800b162:	d04c      	beq.n	800b1fe <ucdr_serialize_int32_t+0xe2>
 800b164:	7d23      	ldrb	r3, [r4, #20]
 800b166:	2b01      	cmp	r3, #1
 800b168:	d063      	beq.n	800b232 <ucdr_serialize_int32_t+0x116>
 800b16a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b16e:	702b      	strb	r3, [r5, #0]
 800b170:	2e00      	cmp	r6, #0
 800b172:	d051      	beq.n	800b218 <ucdr_serialize_int32_t+0xfc>
 800b174:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b178:	706b      	strb	r3, [r5, #1]
 800b17a:	2e01      	cmp	r6, #1
 800b17c:	d050      	beq.n	800b220 <ucdr_serialize_int32_t+0x104>
 800b17e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b182:	70ab      	strb	r3, [r5, #2]
 800b184:	2e02      	cmp	r6, #2
 800b186:	d04f      	beq.n	800b228 <ucdr_serialize_int32_t+0x10c>
 800b188:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b18c:	70eb      	strb	r3, [r5, #3]
 800b18e:	6923      	ldr	r3, [r4, #16]
 800b190:	68a2      	ldr	r2, [r4, #8]
 800b192:	7da0      	ldrb	r0, [r4, #22]
 800b194:	3304      	adds	r3, #4
 800b196:	1b9e      	subs	r6, r3, r6
 800b198:	4442      	add	r2, r8
 800b19a:	2304      	movs	r3, #4
 800b19c:	f080 0001 	eor.w	r0, r0, #1
 800b1a0:	60a2      	str	r2, [r4, #8]
 800b1a2:	6126      	str	r6, [r4, #16]
 800b1a4:	7563      	strb	r3, [r4, #21]
 800b1a6:	b002      	add	sp, #8
 800b1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1ac:	2104      	movs	r1, #4
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f000 fa7e 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800b1b4:	b1d0      	cbz	r0, 800b1ec <ucdr_serialize_int32_t+0xd0>
 800b1b6:	7d23      	ldrb	r3, [r4, #20]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	68a3      	ldr	r3, [r4, #8]
 800b1bc:	d01c      	beq.n	800b1f8 <ucdr_serialize_int32_t+0xdc>
 800b1be:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b1c2:	701a      	strb	r2, [r3, #0]
 800b1c4:	68a3      	ldr	r3, [r4, #8]
 800b1c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b1ca:	705a      	strb	r2, [r3, #1]
 800b1cc:	68a3      	ldr	r3, [r4, #8]
 800b1ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b1d2:	709a      	strb	r2, [r3, #2]
 800b1d4:	68a3      	ldr	r3, [r4, #8]
 800b1d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b1da:	70da      	strb	r2, [r3, #3]
 800b1dc:	68a2      	ldr	r2, [r4, #8]
 800b1de:	6923      	ldr	r3, [r4, #16]
 800b1e0:	3204      	adds	r2, #4
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	2104      	movs	r1, #4
 800b1e6:	60a2      	str	r2, [r4, #8]
 800b1e8:	6123      	str	r3, [r4, #16]
 800b1ea:	7561      	strb	r1, [r4, #21]
 800b1ec:	7da0      	ldrb	r0, [r4, #22]
 800b1ee:	f080 0001 	eor.w	r0, r0, #1
 800b1f2:	b002      	add	sp, #8
 800b1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1f8:	9a01      	ldr	r2, [sp, #4]
 800b1fa:	601a      	str	r2, [r3, #0]
 800b1fc:	e7ee      	b.n	800b1dc <ucdr_serialize_int32_t+0xc0>
 800b1fe:	68a2      	ldr	r2, [r4, #8]
 800b200:	6923      	ldr	r3, [r4, #16]
 800b202:	7da0      	ldrb	r0, [r4, #22]
 800b204:	7567      	strb	r7, [r4, #21]
 800b206:	1b92      	subs	r2, r2, r6
 800b208:	1b9b      	subs	r3, r3, r6
 800b20a:	f080 0001 	eor.w	r0, r0, #1
 800b20e:	60a2      	str	r2, [r4, #8]
 800b210:	6123      	str	r3, [r4, #16]
 800b212:	b002      	add	sp, #8
 800b214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b218:	68a3      	ldr	r3, [r4, #8]
 800b21a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b21e:	701a      	strb	r2, [r3, #0]
 800b220:	68a3      	ldr	r3, [r4, #8]
 800b222:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b226:	701a      	strb	r2, [r3, #0]
 800b228:	68a3      	ldr	r3, [r4, #8]
 800b22a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b22e:	701a      	strb	r2, [r3, #0]
 800b230:	e7ad      	b.n	800b18e <ucdr_serialize_int32_t+0x72>
 800b232:	4628      	mov	r0, r5
 800b234:	ad01      	add	r5, sp, #4
 800b236:	4629      	mov	r1, r5
 800b238:	4632      	mov	r2, r6
 800b23a:	f00c fb1a 	bl	8017872 <memcpy>
 800b23e:	68a0      	ldr	r0, [r4, #8]
 800b240:	4642      	mov	r2, r8
 800b242:	19a9      	adds	r1, r5, r6
 800b244:	f00c fb15 	bl	8017872 <memcpy>
 800b248:	e7a1      	b.n	800b18e <ucdr_serialize_int32_t+0x72>
 800b24a:	bf00      	nop

0800b24c <ucdr_deserialize_int32_t>:
 800b24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b250:	460d      	mov	r5, r1
 800b252:	2104      	movs	r1, #4
 800b254:	4604      	mov	r4, r0
 800b256:	f000 fa7f 	bl	800b758 <ucdr_buffer_alignment>
 800b25a:	4601      	mov	r1, r0
 800b25c:	4620      	mov	r0, r4
 800b25e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b262:	f000 fabd 	bl	800b7e0 <ucdr_advance_buffer>
 800b266:	2104      	movs	r1, #4
 800b268:	4620      	mov	r0, r4
 800b26a:	f000 fa15 	bl	800b698 <ucdr_check_buffer_available_for>
 800b26e:	2800      	cmp	r0, #0
 800b270:	d138      	bne.n	800b2e4 <ucdr_deserialize_int32_t+0x98>
 800b272:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b276:	42b7      	cmp	r7, r6
 800b278:	d92f      	bls.n	800b2da <ucdr_deserialize_int32_t+0x8e>
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	60a7      	str	r7, [r4, #8]
 800b27e:	1bbf      	subs	r7, r7, r6
 800b280:	443b      	add	r3, r7
 800b282:	f1c7 0904 	rsb	r9, r7, #4
 800b286:	6123      	str	r3, [r4, #16]
 800b288:	4649      	mov	r1, r9
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 fa10 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800b290:	2800      	cmp	r0, #0
 800b292:	d046      	beq.n	800b322 <ucdr_deserialize_int32_t+0xd6>
 800b294:	7d23      	ldrb	r3, [r4, #20]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d05c      	beq.n	800b354 <ucdr_deserialize_int32_t+0x108>
 800b29a:	78f3      	ldrb	r3, [r6, #3]
 800b29c:	702b      	strb	r3, [r5, #0]
 800b29e:	2f00      	cmp	r7, #0
 800b2a0:	d04c      	beq.n	800b33c <ucdr_deserialize_int32_t+0xf0>
 800b2a2:	78b3      	ldrb	r3, [r6, #2]
 800b2a4:	706b      	strb	r3, [r5, #1]
 800b2a6:	2f01      	cmp	r7, #1
 800b2a8:	f105 0302 	add.w	r3, r5, #2
 800b2ac:	d04a      	beq.n	800b344 <ucdr_deserialize_int32_t+0xf8>
 800b2ae:	7873      	ldrb	r3, [r6, #1]
 800b2b0:	70ab      	strb	r3, [r5, #2]
 800b2b2:	2f02      	cmp	r7, #2
 800b2b4:	f105 0303 	add.w	r3, r5, #3
 800b2b8:	d048      	beq.n	800b34c <ucdr_deserialize_int32_t+0x100>
 800b2ba:	7833      	ldrb	r3, [r6, #0]
 800b2bc:	70eb      	strb	r3, [r5, #3]
 800b2be:	6923      	ldr	r3, [r4, #16]
 800b2c0:	68a2      	ldr	r2, [r4, #8]
 800b2c2:	7da0      	ldrb	r0, [r4, #22]
 800b2c4:	2104      	movs	r1, #4
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	444a      	add	r2, r9
 800b2ca:	1bdb      	subs	r3, r3, r7
 800b2cc:	7561      	strb	r1, [r4, #21]
 800b2ce:	60a2      	str	r2, [r4, #8]
 800b2d0:	6123      	str	r3, [r4, #16]
 800b2d2:	f080 0001 	eor.w	r0, r0, #1
 800b2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2da:	2104      	movs	r1, #4
 800b2dc:	4620      	mov	r0, r4
 800b2de:	f000 f9e7 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800b2e2:	b1b0      	cbz	r0, 800b312 <ucdr_deserialize_int32_t+0xc6>
 800b2e4:	7d23      	ldrb	r3, [r4, #20]
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	68a3      	ldr	r3, [r4, #8]
 800b2ea:	d017      	beq.n	800b31c <ucdr_deserialize_int32_t+0xd0>
 800b2ec:	78db      	ldrb	r3, [r3, #3]
 800b2ee:	702b      	strb	r3, [r5, #0]
 800b2f0:	68a3      	ldr	r3, [r4, #8]
 800b2f2:	789b      	ldrb	r3, [r3, #2]
 800b2f4:	706b      	strb	r3, [r5, #1]
 800b2f6:	68a3      	ldr	r3, [r4, #8]
 800b2f8:	785b      	ldrb	r3, [r3, #1]
 800b2fa:	70ab      	strb	r3, [r5, #2]
 800b2fc:	68a3      	ldr	r3, [r4, #8]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	70eb      	strb	r3, [r5, #3]
 800b302:	68a2      	ldr	r2, [r4, #8]
 800b304:	6923      	ldr	r3, [r4, #16]
 800b306:	3204      	adds	r2, #4
 800b308:	3304      	adds	r3, #4
 800b30a:	2104      	movs	r1, #4
 800b30c:	60a2      	str	r2, [r4, #8]
 800b30e:	6123      	str	r3, [r4, #16]
 800b310:	7561      	strb	r1, [r4, #21]
 800b312:	7da0      	ldrb	r0, [r4, #22]
 800b314:	f080 0001 	eor.w	r0, r0, #1
 800b318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	602b      	str	r3, [r5, #0]
 800b320:	e7ef      	b.n	800b302 <ucdr_deserialize_int32_t+0xb6>
 800b322:	68a2      	ldr	r2, [r4, #8]
 800b324:	6923      	ldr	r3, [r4, #16]
 800b326:	7da0      	ldrb	r0, [r4, #22]
 800b328:	f884 8015 	strb.w	r8, [r4, #21]
 800b32c:	1bd2      	subs	r2, r2, r7
 800b32e:	1bdb      	subs	r3, r3, r7
 800b330:	60a2      	str	r2, [r4, #8]
 800b332:	6123      	str	r3, [r4, #16]
 800b334:	f080 0001 	eor.w	r0, r0, #1
 800b338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b33c:	68a3      	ldr	r3, [r4, #8]
 800b33e:	789b      	ldrb	r3, [r3, #2]
 800b340:	706b      	strb	r3, [r5, #1]
 800b342:	1cab      	adds	r3, r5, #2
 800b344:	68a2      	ldr	r2, [r4, #8]
 800b346:	7852      	ldrb	r2, [r2, #1]
 800b348:	f803 2b01 	strb.w	r2, [r3], #1
 800b34c:	68a2      	ldr	r2, [r4, #8]
 800b34e:	7812      	ldrb	r2, [r2, #0]
 800b350:	701a      	strb	r2, [r3, #0]
 800b352:	e7b4      	b.n	800b2be <ucdr_deserialize_int32_t+0x72>
 800b354:	4631      	mov	r1, r6
 800b356:	463a      	mov	r2, r7
 800b358:	4628      	mov	r0, r5
 800b35a:	f00c fa8a 	bl	8017872 <memcpy>
 800b35e:	68a1      	ldr	r1, [r4, #8]
 800b360:	464a      	mov	r2, r9
 800b362:	19e8      	adds	r0, r5, r7
 800b364:	f00c fa85 	bl	8017872 <memcpy>
 800b368:	e7a9      	b.n	800b2be <ucdr_deserialize_int32_t+0x72>
 800b36a:	bf00      	nop

0800b36c <ucdr_serialize_double>:
 800b36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b370:	2108      	movs	r1, #8
 800b372:	b082      	sub	sp, #8
 800b374:	4604      	mov	r4, r0
 800b376:	ed8d 0b00 	vstr	d0, [sp]
 800b37a:	f000 f9ed 	bl	800b758 <ucdr_buffer_alignment>
 800b37e:	4601      	mov	r1, r0
 800b380:	4620      	mov	r0, r4
 800b382:	7d67      	ldrb	r7, [r4, #21]
 800b384:	f000 fa2c 	bl	800b7e0 <ucdr_advance_buffer>
 800b388:	2108      	movs	r1, #8
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 f984 	bl	800b698 <ucdr_check_buffer_available_for>
 800b390:	2800      	cmp	r0, #0
 800b392:	d14e      	bne.n	800b432 <ucdr_serialize_double+0xc6>
 800b394:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b398:	42ab      	cmp	r3, r5
 800b39a:	d945      	bls.n	800b428 <ucdr_serialize_double+0xbc>
 800b39c:	1b5e      	subs	r6, r3, r5
 800b39e:	60a3      	str	r3, [r4, #8]
 800b3a0:	6923      	ldr	r3, [r4, #16]
 800b3a2:	f1c6 0808 	rsb	r8, r6, #8
 800b3a6:	4433      	add	r3, r6
 800b3a8:	6123      	str	r3, [r4, #16]
 800b3aa:	4641      	mov	r1, r8
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f000 f97f 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d074      	beq.n	800b4a0 <ucdr_serialize_double+0x134>
 800b3b6:	7d23      	ldrb	r3, [r4, #20]
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	f000 809b 	beq.w	800b4f4 <ucdr_serialize_double+0x188>
 800b3be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b3c2:	702b      	strb	r3, [r5, #0]
 800b3c4:	2e00      	cmp	r6, #0
 800b3c6:	d078      	beq.n	800b4ba <ucdr_serialize_double+0x14e>
 800b3c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b3cc:	706b      	strb	r3, [r5, #1]
 800b3ce:	2e01      	cmp	r6, #1
 800b3d0:	d077      	beq.n	800b4c2 <ucdr_serialize_double+0x156>
 800b3d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b3d6:	70ab      	strb	r3, [r5, #2]
 800b3d8:	2e02      	cmp	r6, #2
 800b3da:	d076      	beq.n	800b4ca <ucdr_serialize_double+0x15e>
 800b3dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b3e0:	70eb      	strb	r3, [r5, #3]
 800b3e2:	2e03      	cmp	r6, #3
 800b3e4:	d075      	beq.n	800b4d2 <ucdr_serialize_double+0x166>
 800b3e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b3ea:	712b      	strb	r3, [r5, #4]
 800b3ec:	2e04      	cmp	r6, #4
 800b3ee:	d074      	beq.n	800b4da <ucdr_serialize_double+0x16e>
 800b3f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b3f4:	716b      	strb	r3, [r5, #5]
 800b3f6:	2e05      	cmp	r6, #5
 800b3f8:	d073      	beq.n	800b4e2 <ucdr_serialize_double+0x176>
 800b3fa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b3fe:	71ab      	strb	r3, [r5, #6]
 800b400:	2e06      	cmp	r6, #6
 800b402:	d072      	beq.n	800b4ea <ucdr_serialize_double+0x17e>
 800b404:	f89d 3000 	ldrb.w	r3, [sp]
 800b408:	71eb      	strb	r3, [r5, #7]
 800b40a:	6923      	ldr	r3, [r4, #16]
 800b40c:	68a2      	ldr	r2, [r4, #8]
 800b40e:	7da0      	ldrb	r0, [r4, #22]
 800b410:	3308      	adds	r3, #8
 800b412:	1b9e      	subs	r6, r3, r6
 800b414:	4442      	add	r2, r8
 800b416:	2308      	movs	r3, #8
 800b418:	f080 0001 	eor.w	r0, r0, #1
 800b41c:	60a2      	str	r2, [r4, #8]
 800b41e:	6126      	str	r6, [r4, #16]
 800b420:	7563      	strb	r3, [r4, #21]
 800b422:	b002      	add	sp, #8
 800b424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b428:	2108      	movs	r1, #8
 800b42a:	4620      	mov	r0, r4
 800b42c:	f000 f940 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800b430:	b350      	cbz	r0, 800b488 <ucdr_serialize_double+0x11c>
 800b432:	7d23      	ldrb	r3, [r4, #20]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d02d      	beq.n	800b494 <ucdr_serialize_double+0x128>
 800b438:	68a3      	ldr	r3, [r4, #8]
 800b43a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b43e:	701a      	strb	r2, [r3, #0]
 800b440:	68a3      	ldr	r3, [r4, #8]
 800b442:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b446:	705a      	strb	r2, [r3, #1]
 800b448:	68a3      	ldr	r3, [r4, #8]
 800b44a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b44e:	709a      	strb	r2, [r3, #2]
 800b450:	68a3      	ldr	r3, [r4, #8]
 800b452:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b456:	70da      	strb	r2, [r3, #3]
 800b458:	68a3      	ldr	r3, [r4, #8]
 800b45a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b45e:	711a      	strb	r2, [r3, #4]
 800b460:	68a3      	ldr	r3, [r4, #8]
 800b462:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b466:	715a      	strb	r2, [r3, #5]
 800b468:	68a3      	ldr	r3, [r4, #8]
 800b46a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b46e:	719a      	strb	r2, [r3, #6]
 800b470:	68a3      	ldr	r3, [r4, #8]
 800b472:	f89d 2000 	ldrb.w	r2, [sp]
 800b476:	71da      	strb	r2, [r3, #7]
 800b478:	68a2      	ldr	r2, [r4, #8]
 800b47a:	6923      	ldr	r3, [r4, #16]
 800b47c:	3208      	adds	r2, #8
 800b47e:	3308      	adds	r3, #8
 800b480:	2108      	movs	r1, #8
 800b482:	60a2      	str	r2, [r4, #8]
 800b484:	6123      	str	r3, [r4, #16]
 800b486:	7561      	strb	r1, [r4, #21]
 800b488:	7da0      	ldrb	r0, [r4, #22]
 800b48a:	f080 0001 	eor.w	r0, r0, #1
 800b48e:	b002      	add	sp, #8
 800b490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b494:	466b      	mov	r3, sp
 800b496:	cb03      	ldmia	r3!, {r0, r1}
 800b498:	68a3      	ldr	r3, [r4, #8]
 800b49a:	6018      	str	r0, [r3, #0]
 800b49c:	6059      	str	r1, [r3, #4]
 800b49e:	e7eb      	b.n	800b478 <ucdr_serialize_double+0x10c>
 800b4a0:	68a2      	ldr	r2, [r4, #8]
 800b4a2:	6923      	ldr	r3, [r4, #16]
 800b4a4:	7da0      	ldrb	r0, [r4, #22]
 800b4a6:	7567      	strb	r7, [r4, #21]
 800b4a8:	1b92      	subs	r2, r2, r6
 800b4aa:	1b9b      	subs	r3, r3, r6
 800b4ac:	f080 0001 	eor.w	r0, r0, #1
 800b4b0:	60a2      	str	r2, [r4, #8]
 800b4b2:	6123      	str	r3, [r4, #16]
 800b4b4:	b002      	add	sp, #8
 800b4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ba:	68a3      	ldr	r3, [r4, #8]
 800b4bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4c0:	701a      	strb	r2, [r3, #0]
 800b4c2:	68a3      	ldr	r3, [r4, #8]
 800b4c4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b4c8:	701a      	strb	r2, [r3, #0]
 800b4ca:	68a3      	ldr	r3, [r4, #8]
 800b4cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b4d0:	701a      	strb	r2, [r3, #0]
 800b4d2:	68a3      	ldr	r3, [r4, #8]
 800b4d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b4d8:	701a      	strb	r2, [r3, #0]
 800b4da:	68a3      	ldr	r3, [r4, #8]
 800b4dc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b4e0:	701a      	strb	r2, [r3, #0]
 800b4e2:	68a3      	ldr	r3, [r4, #8]
 800b4e4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b4e8:	701a      	strb	r2, [r3, #0]
 800b4ea:	68a3      	ldr	r3, [r4, #8]
 800b4ec:	f89d 2000 	ldrb.w	r2, [sp]
 800b4f0:	701a      	strb	r2, [r3, #0]
 800b4f2:	e78a      	b.n	800b40a <ucdr_serialize_double+0x9e>
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	466d      	mov	r5, sp
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	4632      	mov	r2, r6
 800b4fc:	f00c f9b9 	bl	8017872 <memcpy>
 800b500:	68a0      	ldr	r0, [r4, #8]
 800b502:	4642      	mov	r2, r8
 800b504:	19a9      	adds	r1, r5, r6
 800b506:	f00c f9b4 	bl	8017872 <memcpy>
 800b50a:	e77e      	b.n	800b40a <ucdr_serialize_double+0x9e>

0800b50c <ucdr_deserialize_double>:
 800b50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b510:	460d      	mov	r5, r1
 800b512:	2108      	movs	r1, #8
 800b514:	4604      	mov	r4, r0
 800b516:	f000 f91f 	bl	800b758 <ucdr_buffer_alignment>
 800b51a:	4601      	mov	r1, r0
 800b51c:	4620      	mov	r0, r4
 800b51e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b522:	f000 f95d 	bl	800b7e0 <ucdr_advance_buffer>
 800b526:	2108      	movs	r1, #8
 800b528:	4620      	mov	r0, r4
 800b52a:	f000 f8b5 	bl	800b698 <ucdr_check_buffer_available_for>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d151      	bne.n	800b5d6 <ucdr_deserialize_double+0xca>
 800b532:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b536:	42be      	cmp	r6, r7
 800b538:	d948      	bls.n	800b5cc <ucdr_deserialize_double+0xc0>
 800b53a:	6923      	ldr	r3, [r4, #16]
 800b53c:	60a6      	str	r6, [r4, #8]
 800b53e:	1bf6      	subs	r6, r6, r7
 800b540:	4433      	add	r3, r6
 800b542:	f1c6 0808 	rsb	r8, r6, #8
 800b546:	6123      	str	r3, [r4, #16]
 800b548:	4641      	mov	r1, r8
 800b54a:	4620      	mov	r0, r4
 800b54c:	f000 f8b0 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800b550:	2800      	cmp	r0, #0
 800b552:	d06d      	beq.n	800b630 <ucdr_deserialize_double+0x124>
 800b554:	7d23      	ldrb	r3, [r4, #20]
 800b556:	2b01      	cmp	r3, #1
 800b558:	f000 8093 	beq.w	800b682 <ucdr_deserialize_double+0x176>
 800b55c:	79fb      	ldrb	r3, [r7, #7]
 800b55e:	702b      	strb	r3, [r5, #0]
 800b560:	2e00      	cmp	r6, #0
 800b562:	d072      	beq.n	800b64a <ucdr_deserialize_double+0x13e>
 800b564:	79bb      	ldrb	r3, [r7, #6]
 800b566:	706b      	strb	r3, [r5, #1]
 800b568:	2e01      	cmp	r6, #1
 800b56a:	f105 0302 	add.w	r3, r5, #2
 800b56e:	d070      	beq.n	800b652 <ucdr_deserialize_double+0x146>
 800b570:	797b      	ldrb	r3, [r7, #5]
 800b572:	70ab      	strb	r3, [r5, #2]
 800b574:	2e02      	cmp	r6, #2
 800b576:	f105 0303 	add.w	r3, r5, #3
 800b57a:	d06e      	beq.n	800b65a <ucdr_deserialize_double+0x14e>
 800b57c:	793b      	ldrb	r3, [r7, #4]
 800b57e:	70eb      	strb	r3, [r5, #3]
 800b580:	2e03      	cmp	r6, #3
 800b582:	f105 0304 	add.w	r3, r5, #4
 800b586:	d06c      	beq.n	800b662 <ucdr_deserialize_double+0x156>
 800b588:	78fb      	ldrb	r3, [r7, #3]
 800b58a:	712b      	strb	r3, [r5, #4]
 800b58c:	2e04      	cmp	r6, #4
 800b58e:	f105 0305 	add.w	r3, r5, #5
 800b592:	d06a      	beq.n	800b66a <ucdr_deserialize_double+0x15e>
 800b594:	78bb      	ldrb	r3, [r7, #2]
 800b596:	716b      	strb	r3, [r5, #5]
 800b598:	2e05      	cmp	r6, #5
 800b59a:	f105 0306 	add.w	r3, r5, #6
 800b59e:	d068      	beq.n	800b672 <ucdr_deserialize_double+0x166>
 800b5a0:	787b      	ldrb	r3, [r7, #1]
 800b5a2:	71ab      	strb	r3, [r5, #6]
 800b5a4:	2e06      	cmp	r6, #6
 800b5a6:	f105 0307 	add.w	r3, r5, #7
 800b5aa:	d066      	beq.n	800b67a <ucdr_deserialize_double+0x16e>
 800b5ac:	783b      	ldrb	r3, [r7, #0]
 800b5ae:	71eb      	strb	r3, [r5, #7]
 800b5b0:	6923      	ldr	r3, [r4, #16]
 800b5b2:	68a2      	ldr	r2, [r4, #8]
 800b5b4:	7da0      	ldrb	r0, [r4, #22]
 800b5b6:	3308      	adds	r3, #8
 800b5b8:	1b9e      	subs	r6, r3, r6
 800b5ba:	2308      	movs	r3, #8
 800b5bc:	4442      	add	r2, r8
 800b5be:	7563      	strb	r3, [r4, #21]
 800b5c0:	60a2      	str	r2, [r4, #8]
 800b5c2:	6126      	str	r6, [r4, #16]
 800b5c4:	f080 0001 	eor.w	r0, r0, #1
 800b5c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5cc:	2108      	movs	r1, #8
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f000 f86e 	bl	800b6b0 <ucdr_check_final_buffer_behavior>
 800b5d4:	b310      	cbz	r0, 800b61c <ucdr_deserialize_double+0x110>
 800b5d6:	7d23      	ldrb	r3, [r4, #20]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	68a3      	ldr	r3, [r4, #8]
 800b5dc:	d023      	beq.n	800b626 <ucdr_deserialize_double+0x11a>
 800b5de:	79db      	ldrb	r3, [r3, #7]
 800b5e0:	702b      	strb	r3, [r5, #0]
 800b5e2:	68a3      	ldr	r3, [r4, #8]
 800b5e4:	799b      	ldrb	r3, [r3, #6]
 800b5e6:	706b      	strb	r3, [r5, #1]
 800b5e8:	68a3      	ldr	r3, [r4, #8]
 800b5ea:	795b      	ldrb	r3, [r3, #5]
 800b5ec:	70ab      	strb	r3, [r5, #2]
 800b5ee:	68a3      	ldr	r3, [r4, #8]
 800b5f0:	791b      	ldrb	r3, [r3, #4]
 800b5f2:	70eb      	strb	r3, [r5, #3]
 800b5f4:	68a3      	ldr	r3, [r4, #8]
 800b5f6:	78db      	ldrb	r3, [r3, #3]
 800b5f8:	712b      	strb	r3, [r5, #4]
 800b5fa:	68a3      	ldr	r3, [r4, #8]
 800b5fc:	789b      	ldrb	r3, [r3, #2]
 800b5fe:	716b      	strb	r3, [r5, #5]
 800b600:	68a3      	ldr	r3, [r4, #8]
 800b602:	785b      	ldrb	r3, [r3, #1]
 800b604:	71ab      	strb	r3, [r5, #6]
 800b606:	68a3      	ldr	r3, [r4, #8]
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	71eb      	strb	r3, [r5, #7]
 800b60c:	68a2      	ldr	r2, [r4, #8]
 800b60e:	6923      	ldr	r3, [r4, #16]
 800b610:	3208      	adds	r2, #8
 800b612:	3308      	adds	r3, #8
 800b614:	2108      	movs	r1, #8
 800b616:	60a2      	str	r2, [r4, #8]
 800b618:	6123      	str	r3, [r4, #16]
 800b61a:	7561      	strb	r1, [r4, #21]
 800b61c:	7da0      	ldrb	r0, [r4, #22]
 800b61e:	f080 0001 	eor.w	r0, r0, #1
 800b622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	606b      	str	r3, [r5, #4]
 800b62c:	602a      	str	r2, [r5, #0]
 800b62e:	e7ed      	b.n	800b60c <ucdr_deserialize_double+0x100>
 800b630:	68a2      	ldr	r2, [r4, #8]
 800b632:	6923      	ldr	r3, [r4, #16]
 800b634:	7da0      	ldrb	r0, [r4, #22]
 800b636:	f884 9015 	strb.w	r9, [r4, #21]
 800b63a:	1b92      	subs	r2, r2, r6
 800b63c:	1b9b      	subs	r3, r3, r6
 800b63e:	60a2      	str	r2, [r4, #8]
 800b640:	6123      	str	r3, [r4, #16]
 800b642:	f080 0001 	eor.w	r0, r0, #1
 800b646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b64a:	68a3      	ldr	r3, [r4, #8]
 800b64c:	799b      	ldrb	r3, [r3, #6]
 800b64e:	706b      	strb	r3, [r5, #1]
 800b650:	1cab      	adds	r3, r5, #2
 800b652:	68a2      	ldr	r2, [r4, #8]
 800b654:	7952      	ldrb	r2, [r2, #5]
 800b656:	f803 2b01 	strb.w	r2, [r3], #1
 800b65a:	68a2      	ldr	r2, [r4, #8]
 800b65c:	7912      	ldrb	r2, [r2, #4]
 800b65e:	f803 2b01 	strb.w	r2, [r3], #1
 800b662:	68a2      	ldr	r2, [r4, #8]
 800b664:	78d2      	ldrb	r2, [r2, #3]
 800b666:	f803 2b01 	strb.w	r2, [r3], #1
 800b66a:	68a2      	ldr	r2, [r4, #8]
 800b66c:	7892      	ldrb	r2, [r2, #2]
 800b66e:	f803 2b01 	strb.w	r2, [r3], #1
 800b672:	68a2      	ldr	r2, [r4, #8]
 800b674:	7852      	ldrb	r2, [r2, #1]
 800b676:	f803 2b01 	strb.w	r2, [r3], #1
 800b67a:	68a2      	ldr	r2, [r4, #8]
 800b67c:	7812      	ldrb	r2, [r2, #0]
 800b67e:	701a      	strb	r2, [r3, #0]
 800b680:	e796      	b.n	800b5b0 <ucdr_deserialize_double+0xa4>
 800b682:	4639      	mov	r1, r7
 800b684:	4632      	mov	r2, r6
 800b686:	4628      	mov	r0, r5
 800b688:	f00c f8f3 	bl	8017872 <memcpy>
 800b68c:	68a1      	ldr	r1, [r4, #8]
 800b68e:	4642      	mov	r2, r8
 800b690:	19a8      	adds	r0, r5, r6
 800b692:	f00c f8ee 	bl	8017872 <memcpy>
 800b696:	e78b      	b.n	800b5b0 <ucdr_deserialize_double+0xa4>

0800b698 <ucdr_check_buffer_available_for>:
 800b698:	7d83      	ldrb	r3, [r0, #22]
 800b69a:	b93b      	cbnz	r3, 800b6ac <ucdr_check_buffer_available_for+0x14>
 800b69c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800b6a0:	4419      	add	r1, r3
 800b6a2:	4288      	cmp	r0, r1
 800b6a4:	bf34      	ite	cc
 800b6a6:	2000      	movcc	r0, #0
 800b6a8:	2001      	movcs	r0, #1
 800b6aa:	4770      	bx	lr
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	4770      	bx	lr

0800b6b0 <ucdr_check_final_buffer_behavior>:
 800b6b0:	7d83      	ldrb	r3, [r0, #22]
 800b6b2:	b943      	cbnz	r3, 800b6c6 <ucdr_check_final_buffer_behavior+0x16>
 800b6b4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800b6b8:	4291      	cmp	r1, r2
 800b6ba:	b510      	push	{r4, lr}
 800b6bc:	4604      	mov	r4, r0
 800b6be:	d205      	bcs.n	800b6cc <ucdr_check_final_buffer_behavior+0x1c>
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	bd10      	pop	{r4, pc}
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	4770      	bx	lr
 800b6cc:	6982      	ldr	r2, [r0, #24]
 800b6ce:	b13a      	cbz	r2, 800b6e0 <ucdr_check_final_buffer_behavior+0x30>
 800b6d0:	69c1      	ldr	r1, [r0, #28]
 800b6d2:	4790      	blx	r2
 800b6d4:	f080 0301 	eor.w	r3, r0, #1
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	75a0      	strb	r0, [r4, #22]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	bd10      	pop	{r4, pc}
 800b6e0:	2001      	movs	r0, #1
 800b6e2:	75a0      	strb	r0, [r4, #22]
 800b6e4:	e7fa      	b.n	800b6dc <ucdr_check_final_buffer_behavior+0x2c>
 800b6e6:	bf00      	nop

0800b6e8 <ucdr_set_on_full_buffer_callback>:
 800b6e8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop

0800b6f0 <ucdr_init_buffer_origin_offset_endian>:
 800b6f0:	b410      	push	{r4}
 800b6f2:	9c01      	ldr	r4, [sp, #4]
 800b6f4:	6001      	str	r1, [r0, #0]
 800b6f6:	440a      	add	r2, r1
 800b6f8:	6042      	str	r2, [r0, #4]
 800b6fa:	190a      	adds	r2, r1, r4
 800b6fc:	441c      	add	r4, r3
 800b6fe:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800b702:	6082      	str	r2, [r0, #8]
 800b704:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b708:	7503      	strb	r3, [r0, #20]
 800b70a:	2200      	movs	r2, #0
 800b70c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800b710:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b714:	7542      	strb	r2, [r0, #21]
 800b716:	7582      	strb	r2, [r0, #22]
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop

0800b71c <ucdr_init_buffer_origin_offset>:
 800b71c:	b510      	push	{r4, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	9c04      	ldr	r4, [sp, #16]
 800b722:	9400      	str	r4, [sp, #0]
 800b724:	2401      	movs	r4, #1
 800b726:	9401      	str	r4, [sp, #4]
 800b728:	f7ff ffe2 	bl	800b6f0 <ucdr_init_buffer_origin_offset_endian>
 800b72c:	b002      	add	sp, #8
 800b72e:	bd10      	pop	{r4, pc}

0800b730 <ucdr_init_buffer_origin>:
 800b730:	b510      	push	{r4, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	2400      	movs	r4, #0
 800b736:	9400      	str	r4, [sp, #0]
 800b738:	f7ff fff0 	bl	800b71c <ucdr_init_buffer_origin_offset>
 800b73c:	b002      	add	sp, #8
 800b73e:	bd10      	pop	{r4, pc}

0800b740 <ucdr_init_buffer>:
 800b740:	2300      	movs	r3, #0
 800b742:	f7ff bff5 	b.w	800b730 <ucdr_init_buffer_origin>
 800b746:	bf00      	nop

0800b748 <ucdr_alignment>:
 800b748:	fbb0 f3f1 	udiv	r3, r0, r1
 800b74c:	fb03 0011 	mls	r0, r3, r1, r0
 800b750:	1a08      	subs	r0, r1, r0
 800b752:	3901      	subs	r1, #1
 800b754:	4008      	ands	r0, r1
 800b756:	4770      	bx	lr

0800b758 <ucdr_buffer_alignment>:
 800b758:	7d43      	ldrb	r3, [r0, #21]
 800b75a:	428b      	cmp	r3, r1
 800b75c:	d208      	bcs.n	800b770 <ucdr_buffer_alignment+0x18>
 800b75e:	6900      	ldr	r0, [r0, #16]
 800b760:	fbb0 f3f1 	udiv	r3, r0, r1
 800b764:	fb01 0013 	mls	r0, r1, r3, r0
 800b768:	1a08      	subs	r0, r1, r0
 800b76a:	3901      	subs	r1, #1
 800b76c:	4008      	ands	r0, r1
 800b76e:	4770      	bx	lr
 800b770:	2000      	movs	r0, #0
 800b772:	4770      	bx	lr

0800b774 <ucdr_align_to>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4604      	mov	r4, r0
 800b778:	460d      	mov	r5, r1
 800b77a:	f7ff ffed 	bl	800b758 <ucdr_buffer_alignment>
 800b77e:	68a3      	ldr	r3, [r4, #8]
 800b780:	6921      	ldr	r1, [r4, #16]
 800b782:	7565      	strb	r5, [r4, #21]
 800b784:	181a      	adds	r2, r3, r0
 800b786:	6863      	ldr	r3, [r4, #4]
 800b788:	4293      	cmp	r3, r2
 800b78a:	4408      	add	r0, r1
 800b78c:	bf28      	it	cs
 800b78e:	4613      	movcs	r3, r2
 800b790:	6120      	str	r0, [r4, #16]
 800b792:	60a3      	str	r3, [r4, #8]
 800b794:	bd38      	pop	{r3, r4, r5, pc}
 800b796:	bf00      	nop

0800b798 <ucdr_buffer_length>:
 800b798:	6882      	ldr	r2, [r0, #8]
 800b79a:	6800      	ldr	r0, [r0, #0]
 800b79c:	1a10      	subs	r0, r2, r0
 800b79e:	4770      	bx	lr

0800b7a0 <ucdr_buffer_remaining>:
 800b7a0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800b7a4:	1a10      	subs	r0, r2, r0
 800b7a6:	4770      	bx	lr

0800b7a8 <ucdr_check_final_buffer_behavior_array>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	7d83      	ldrb	r3, [r0, #22]
 800b7ac:	b963      	cbnz	r3, 800b7c8 <ucdr_check_final_buffer_behavior_array+0x20>
 800b7ae:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	460d      	mov	r5, r1
 800b7b8:	d308      	bcc.n	800b7cc <ucdr_check_final_buffer_behavior_array+0x24>
 800b7ba:	b139      	cbz	r1, 800b7cc <ucdr_check_final_buffer_behavior_array+0x24>
 800b7bc:	6983      	ldr	r3, [r0, #24]
 800b7be:	b163      	cbz	r3, 800b7da <ucdr_check_final_buffer_behavior_array+0x32>
 800b7c0:	69c1      	ldr	r1, [r0, #28]
 800b7c2:	4798      	blx	r3
 800b7c4:	75a0      	strb	r0, [r4, #22]
 800b7c6:	b108      	cbz	r0, 800b7cc <ucdr_check_final_buffer_behavior_array+0x24>
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	bd38      	pop	{r3, r4, r5, pc}
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f7ff ffe7 	bl	800b7a0 <ucdr_buffer_remaining>
 800b7d2:	42a8      	cmp	r0, r5
 800b7d4:	bf28      	it	cs
 800b7d6:	4628      	movcs	r0, r5
 800b7d8:	bd38      	pop	{r3, r4, r5, pc}
 800b7da:	2301      	movs	r3, #1
 800b7dc:	7583      	strb	r3, [r0, #22]
 800b7de:	e7f3      	b.n	800b7c8 <ucdr_check_final_buffer_behavior_array+0x20>

0800b7e0 <ucdr_advance_buffer>:
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	460d      	mov	r5, r1
 800b7e6:	f7ff ff57 	bl	800b698 <ucdr_check_buffer_available_for>
 800b7ea:	b178      	cbz	r0, 800b80c <ucdr_advance_buffer+0x2c>
 800b7ec:	6923      	ldr	r3, [r4, #16]
 800b7ee:	68a2      	ldr	r2, [r4, #8]
 800b7f0:	442b      	add	r3, r5
 800b7f2:	6123      	str	r3, [r4, #16]
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	442a      	add	r2, r5
 800b7f8:	7563      	strb	r3, [r4, #21]
 800b7fa:	60a2      	str	r2, [r4, #8]
 800b7fc:	bd38      	pop	{r3, r4, r5, pc}
 800b7fe:	68a2      	ldr	r2, [r4, #8]
 800b800:	6923      	ldr	r3, [r4, #16]
 800b802:	4402      	add	r2, r0
 800b804:	4403      	add	r3, r0
 800b806:	1a2d      	subs	r5, r5, r0
 800b808:	60a2      	str	r2, [r4, #8]
 800b80a:	6123      	str	r3, [r4, #16]
 800b80c:	4629      	mov	r1, r5
 800b80e:	2201      	movs	r2, #1
 800b810:	4620      	mov	r0, r4
 800b812:	f7ff ffc9 	bl	800b7a8 <ucdr_check_final_buffer_behavior_array>
 800b816:	2800      	cmp	r0, #0
 800b818:	d1f1      	bne.n	800b7fe <ucdr_advance_buffer+0x1e>
 800b81a:	2301      	movs	r3, #1
 800b81c:	7563      	strb	r3, [r4, #21]
 800b81e:	bd38      	pop	{r3, r4, r5, pc}

0800b820 <rcl_get_zero_initialized_publisher>:
 800b820:	4b01      	ldr	r3, [pc, #4]	@ (800b828 <rcl_get_zero_initialized_publisher+0x8>)
 800b822:	6818      	ldr	r0, [r3, #0]
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	080188f4 	.word	0x080188f4

0800b82c <rcl_publisher_init>:
 800b82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b830:	b088      	sub	sp, #32
 800b832:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b834:	2d00      	cmp	r5, #0
 800b836:	d069      	beq.n	800b90c <rcl_publisher_init+0xe0>
 800b838:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800b83c:	4604      	mov	r4, r0
 800b83e:	4648      	mov	r0, r9
 800b840:	460e      	mov	r6, r1
 800b842:	4690      	mov	r8, r2
 800b844:	461f      	mov	r7, r3
 800b846:	f001 f847 	bl	800c8d8 <rcutils_allocator_is_valid>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d05e      	beq.n	800b90c <rcl_publisher_init+0xe0>
 800b84e:	2c00      	cmp	r4, #0
 800b850:	d05c      	beq.n	800b90c <rcl_publisher_init+0xe0>
 800b852:	f8d4 a000 	ldr.w	sl, [r4]
 800b856:	f1ba 0f00 	cmp.w	sl, #0
 800b85a:	d004      	beq.n	800b866 <rcl_publisher_init+0x3a>
 800b85c:	2764      	movs	r7, #100	@ 0x64
 800b85e:	4638      	mov	r0, r7
 800b860:	b008      	add	sp, #32
 800b862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b866:	4630      	mov	r0, r6
 800b868:	f005 f9bc 	bl	8010be4 <rcl_node_is_valid>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d052      	beq.n	800b916 <rcl_publisher_init+0xea>
 800b870:	f1b8 0f00 	cmp.w	r8, #0
 800b874:	d04a      	beq.n	800b90c <rcl_publisher_init+0xe0>
 800b876:	2f00      	cmp	r7, #0
 800b878:	d048      	beq.n	800b90c <rcl_publisher_init+0xe0>
 800b87a:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800b87e:	aa07      	add	r2, sp, #28
 800b880:	9205      	str	r2, [sp, #20]
 800b882:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800b886:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b88a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b88e:	f8cd a01c 	str.w	sl, [sp, #28]
 800b892:	4639      	mov	r1, r7
 800b894:	e899 000c 	ldmia.w	r9, {r2, r3}
 800b898:	4630      	mov	r0, r6
 800b89a:	f005 f9f7 	bl	8010c8c <rcl_node_resolve_name>
 800b89e:	4607      	mov	r7, r0
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d14f      	bne.n	800b944 <rcl_publisher_init+0x118>
 800b8a4:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800b8a6:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b8a8:	20c8      	movs	r0, #200	@ 0xc8
 800b8aa:	4798      	blx	r3
 800b8ac:	6020      	str	r0, [r4, #0]
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	d04e      	beq.n	800b950 <rcl_publisher_init+0x124>
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f005 f9b8 	bl	8010c28 <rcl_node_get_rmw_handle>
 800b8b8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	9a07      	ldr	r2, [sp, #28]
 800b8c0:	6827      	ldr	r7, [r4, #0]
 800b8c2:	462b      	mov	r3, r5
 800b8c4:	4641      	mov	r1, r8
 800b8c6:	f001 f915 	bl	800caf4 <rmw_create_publisher>
 800b8ca:	6823      	ldr	r3, [r4, #0]
 800b8cc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800b8d0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b8d4:	b370      	cbz	r0, 800b934 <rcl_publisher_init+0x108>
 800b8d6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800b8da:	f001 f9e9 	bl	800ccb0 <rmw_publisher_get_actual_qos>
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	4607      	mov	r7, r0
 800b8e2:	b9d0      	cbnz	r0, 800b91a <rcl_publisher_init+0xee>
 800b8e4:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800b8e8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	2270      	movs	r2, #112	@ 0x70
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f00b ffbe 	bl	8017872 <memcpy>
 800b8f6:	6832      	ldr	r2, [r6, #0]
 800b8f8:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800b8fc:	9807      	ldr	r0, [sp, #28]
 800b8fe:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b900:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b902:	4798      	blx	r3
 800b904:	4638      	mov	r0, r7
 800b906:	b008      	add	sp, #32
 800b908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b90c:	270b      	movs	r7, #11
 800b90e:	4638      	mov	r0, r7
 800b910:	b008      	add	sp, #32
 800b912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b916:	27c8      	movs	r7, #200	@ 0xc8
 800b918:	e7a1      	b.n	800b85e <rcl_publisher_init+0x32>
 800b91a:	b18b      	cbz	r3, 800b940 <rcl_publisher_init+0x114>
 800b91c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b920:	b142      	cbz	r2, 800b934 <rcl_publisher_init+0x108>
 800b922:	4630      	mov	r0, r6
 800b924:	f005 f980 	bl	8010c28 <rcl_node_get_rmw_handle>
 800b928:	6823      	ldr	r3, [r4, #0]
 800b92a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800b92e:	f001 f9cf 	bl	800ccd0 <rmw_destroy_publisher>
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800b936:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b938:	4618      	mov	r0, r3
 800b93a:	4790      	blx	r2
 800b93c:	2300      	movs	r3, #0
 800b93e:	6023      	str	r3, [r4, #0]
 800b940:	2701      	movs	r7, #1
 800b942:	e7db      	b.n	800b8fc <rcl_publisher_init+0xd0>
 800b944:	2867      	cmp	r0, #103	@ 0x67
 800b946:	d0d9      	beq.n	800b8fc <rcl_publisher_init+0xd0>
 800b948:	2869      	cmp	r0, #105	@ 0x69
 800b94a:	d003      	beq.n	800b954 <rcl_publisher_init+0x128>
 800b94c:	280a      	cmp	r0, #10
 800b94e:	d1f7      	bne.n	800b940 <rcl_publisher_init+0x114>
 800b950:	270a      	movs	r7, #10
 800b952:	e7d3      	b.n	800b8fc <rcl_publisher_init+0xd0>
 800b954:	2767      	movs	r7, #103	@ 0x67
 800b956:	e7d1      	b.n	800b8fc <rcl_publisher_init+0xd0>

0800b958 <rcl_publisher_get_default_options>:
 800b958:	b570      	push	{r4, r5, r6, lr}
 800b95a:	4d14      	ldr	r5, [pc, #80]	@ (800b9ac <rcl_publisher_get_default_options+0x54>)
 800b95c:	4914      	ldr	r1, [pc, #80]	@ (800b9b0 <rcl_publisher_get_default_options+0x58>)
 800b95e:	b088      	sub	sp, #32
 800b960:	4604      	mov	r4, r0
 800b962:	2250      	movs	r2, #80	@ 0x50
 800b964:	4628      	mov	r0, r5
 800b966:	f00b ff84 	bl	8017872 <memcpy>
 800b96a:	a802      	add	r0, sp, #8
 800b96c:	f000 ffa6 	bl	800c8bc <rcutils_get_default_allocator>
 800b970:	f10d 0c08 	add.w	ip, sp, #8
 800b974:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b978:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800b97c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b980:	466e      	mov	r6, sp
 800b982:	f8dc 3000 	ldr.w	r3, [ip]
 800b986:	f8ce 3000 	str.w	r3, [lr]
 800b98a:	4630      	mov	r0, r6
 800b98c:	f001 f834 	bl	800c9f8 <rmw_get_default_publisher_options>
 800b990:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b994:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b998:	e883 0003 	stmia.w	r3, {r0, r1}
 800b99c:	2270      	movs	r2, #112	@ 0x70
 800b99e:	4629      	mov	r1, r5
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	f00b ff66 	bl	8017872 <memcpy>
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	b008      	add	sp, #32
 800b9aa:	bd70      	pop	{r4, r5, r6, pc}
 800b9ac:	20009278 	.word	0x20009278
 800b9b0:	080188f8 	.word	0x080188f8

0800b9b4 <rcl_publish>:
 800b9b4:	b1f8      	cbz	r0, 800b9f6 <rcl_publish+0x42>
 800b9b6:	6803      	ldr	r3, [r0, #0]
 800b9b8:	b570      	push	{r4, r5, r6, lr}
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	b1b3      	cbz	r3, 800b9ec <rcl_publish+0x38>
 800b9be:	4616      	mov	r6, r2
 800b9c0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b9c4:	b192      	cbz	r2, 800b9ec <rcl_publish+0x38>
 800b9c6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800b9ca:	460d      	mov	r5, r1
 800b9cc:	f004 fd30 	bl	8010430 <rcl_context_is_valid>
 800b9d0:	b160      	cbz	r0, 800b9ec <rcl_publish+0x38>
 800b9d2:	6823      	ldr	r3, [r4, #0]
 800b9d4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b9d8:	b140      	cbz	r0, 800b9ec <rcl_publish+0x38>
 800b9da:	b155      	cbz	r5, 800b9f2 <rcl_publish+0x3e>
 800b9dc:	4632      	mov	r2, r6
 800b9de:	4629      	mov	r1, r5
 800b9e0:	f001 f828 	bl	800ca34 <rmw_publish>
 800b9e4:	3800      	subs	r0, #0
 800b9e6:	bf18      	it	ne
 800b9e8:	2001      	movne	r0, #1
 800b9ea:	bd70      	pop	{r4, r5, r6, pc}
 800b9ec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b9f0:	bd70      	pop	{r4, r5, r6, pc}
 800b9f2:	200b      	movs	r0, #11
 800b9f4:	bd70      	pop	{r4, r5, r6, pc}
 800b9f6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b9fa:	4770      	bx	lr

0800b9fc <rcl_publisher_is_valid>:
 800b9fc:	b1a0      	cbz	r0, 800ba28 <rcl_publisher_is_valid+0x2c>
 800b9fe:	6803      	ldr	r3, [r0, #0]
 800ba00:	b510      	push	{r4, lr}
 800ba02:	4604      	mov	r4, r0
 800ba04:	b173      	cbz	r3, 800ba24 <rcl_publisher_is_valid+0x28>
 800ba06:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ba0a:	b15a      	cbz	r2, 800ba24 <rcl_publisher_is_valid+0x28>
 800ba0c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ba10:	f004 fd0e 	bl	8010430 <rcl_context_is_valid>
 800ba14:	b130      	cbz	r0, 800ba24 <rcl_publisher_is_valid+0x28>
 800ba16:	6823      	ldr	r3, [r4, #0]
 800ba18:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ba1c:	3800      	subs	r0, #0
 800ba1e:	bf18      	it	ne
 800ba20:	2001      	movne	r0, #1
 800ba22:	bd10      	pop	{r4, pc}
 800ba24:	2000      	movs	r0, #0
 800ba26:	bd10      	pop	{r4, pc}
 800ba28:	2000      	movs	r0, #0
 800ba2a:	4770      	bx	lr

0800ba2c <rcl_publisher_is_valid_except_context>:
 800ba2c:	b130      	cbz	r0, 800ba3c <rcl_publisher_is_valid_except_context+0x10>
 800ba2e:	6800      	ldr	r0, [r0, #0]
 800ba30:	b120      	cbz	r0, 800ba3c <rcl_publisher_is_valid_except_context+0x10>
 800ba32:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800ba36:	3800      	subs	r0, #0
 800ba38:	bf18      	it	ne
 800ba3a:	2001      	movne	r0, #1
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop

0800ba40 <_rclc_check_for_new_data>:
 800ba40:	2800      	cmp	r0, #0
 800ba42:	d046      	beq.n	800bad2 <_rclc_check_for_new_data+0x92>
 800ba44:	b510      	push	{r4, lr}
 800ba46:	7802      	ldrb	r2, [r0, #0]
 800ba48:	b084      	sub	sp, #16
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2a0a      	cmp	r2, #10
 800ba4e:	d842      	bhi.n	800bad6 <_rclc_check_for_new_data+0x96>
 800ba50:	e8df f002 	tbb	[pc, r2]
 800ba54:	14181212 	.word	0x14181212
 800ba58:	06060614 	.word	0x06060614
 800ba5c:	2e1a      	.short	0x2e1a
 800ba5e:	16          	.byte	0x16
 800ba5f:	00          	.byte	0x00
 800ba60:	6a0a      	ldr	r2, [r1, #32]
 800ba62:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ba64:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ba68:	2000      	movs	r0, #0
 800ba6a:	1a12      	subs	r2, r2, r0
 800ba6c:	bf18      	it	ne
 800ba6e:	2201      	movne	r2, #1
 800ba70:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ba74:	b004      	add	sp, #16
 800ba76:	bd10      	pop	{r4, pc}
 800ba78:	680a      	ldr	r2, [r1, #0]
 800ba7a:	e7f2      	b.n	800ba62 <_rclc_check_for_new_data+0x22>
 800ba7c:	698a      	ldr	r2, [r1, #24]
 800ba7e:	e7f0      	b.n	800ba62 <_rclc_check_for_new_data+0x22>
 800ba80:	688a      	ldr	r2, [r1, #8]
 800ba82:	e7ee      	b.n	800ba62 <_rclc_check_for_new_data+0x22>
 800ba84:	690a      	ldr	r2, [r1, #16]
 800ba86:	e7ec      	b.n	800ba62 <_rclc_check_for_new_data+0x22>
 800ba88:	685c      	ldr	r4, [r3, #4]
 800ba8a:	4608      	mov	r0, r1
 800ba8c:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800ba90:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800ba94:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800ba98:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ba9c:	9300      	str	r3, [sp, #0]
 800ba9e:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800baa2:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800baa6:	f104 0110 	add.w	r1, r4, #16
 800baaa:	f006 fdbd 	bl	8012628 <rcl_action_client_wait_set_get_entities_ready>
 800baae:	e7e1      	b.n	800ba74 <_rclc_check_for_new_data+0x34>
 800bab0:	685c      	ldr	r4, [r3, #4]
 800bab2:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800bab6:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800baba:	e9cd 3200 	strd	r3, r2, [sp]
 800babe:	4608      	mov	r0, r1
 800bac0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800bac4:	f104 0220 	add.w	r2, r4, #32
 800bac8:	f104 0110 	add.w	r1, r4, #16
 800bacc:	f006 ffc4 	bl	8012a58 <rcl_action_server_wait_set_get_entities_ready>
 800bad0:	e7d0      	b.n	800ba74 <_rclc_check_for_new_data+0x34>
 800bad2:	200b      	movs	r0, #11
 800bad4:	4770      	bx	lr
 800bad6:	2001      	movs	r0, #1
 800bad8:	e7cc      	b.n	800ba74 <_rclc_check_for_new_data+0x34>
 800bada:	bf00      	nop

0800badc <_rclc_take_new_data>:
 800badc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bade:	b09b      	sub	sp, #108	@ 0x6c
 800bae0:	2800      	cmp	r0, #0
 800bae2:	f000 8088 	beq.w	800bbf6 <_rclc_take_new_data+0x11a>
 800bae6:	7803      	ldrb	r3, [r0, #0]
 800bae8:	4604      	mov	r4, r0
 800baea:	2b0a      	cmp	r3, #10
 800baec:	f200 8167 	bhi.w	800bdbe <_rclc_take_new_data+0x2e2>
 800baf0:	e8df f003 	tbb	[pc, r3]
 800baf4:	44152d2d 	.word	0x44152d2d
 800baf8:	19191944 	.word	0x19191944
 800bafc:	065a      	.short	0x065a
 800bafe:	15          	.byte	0x15
 800baff:	00          	.byte	0x00
 800bb00:	6840      	ldr	r0, [r0, #4]
 800bb02:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f040 80b2 	bne.w	800bc70 <_rclc_take_new_data+0x194>
 800bb0c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f040 80e4 	bne.w	800bcde <_rclc_take_new_data+0x202>
 800bb16:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d16f      	bne.n	800bbfe <_rclc_take_new_data+0x122>
 800bb1e:	2500      	movs	r5, #0
 800bb20:	4628      	mov	r0, r5
 800bb22:	b01b      	add	sp, #108	@ 0x6c
 800bb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb26:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bb28:	6a0b      	ldr	r3, [r1, #32]
 800bb2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d0f5      	beq.n	800bb1e <_rclc_take_new_data+0x42>
 800bb32:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bb36:	f104 0110 	add.w	r1, r4, #16
 800bb3a:	f005 fa51 	bl	8010fe0 <rcl_take_request>
 800bb3e:	4605      	mov	r5, r0
 800bb40:	2800      	cmp	r0, #0
 800bb42:	d0ec      	beq.n	800bb1e <_rclc_take_new_data+0x42>
 800bb44:	f240 2359 	movw	r3, #601	@ 0x259
 800bb48:	4298      	cmp	r0, r3
 800bb4a:	d013      	beq.n	800bb74 <_rclc_take_new_data+0x98>
 800bb4c:	e029      	b.n	800bba2 <_rclc_take_new_data+0xc6>
 800bb4e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bb50:	680b      	ldr	r3, [r1, #0]
 800bb52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d0e1      	beq.n	800bb1e <_rclc_take_new_data+0x42>
 800bb5a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800bb5e:	2300      	movs	r3, #0
 800bb60:	aa0a      	add	r2, sp, #40	@ 0x28
 800bb62:	f005 fb7b 	bl	801125c <rcl_take>
 800bb66:	4605      	mov	r5, r0
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	d0d9      	beq.n	800bb20 <_rclc_take_new_data+0x44>
 800bb6c:	f240 1391 	movw	r3, #401	@ 0x191
 800bb70:	4298      	cmp	r0, r3
 800bb72:	d116      	bne.n	800bba2 <_rclc_take_new_data+0xc6>
 800bb74:	2300      	movs	r3, #0
 800bb76:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800bb7a:	e7d1      	b.n	800bb20 <_rclc_take_new_data+0x44>
 800bb7c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bb7e:	698b      	ldr	r3, [r1, #24]
 800bb80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d0ca      	beq.n	800bb1e <_rclc_take_new_data+0x42>
 800bb88:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bb8c:	f104 0110 	add.w	r1, r4, #16
 800bb90:	f004 fbde 	bl	8010350 <rcl_take_response>
 800bb94:	4605      	mov	r5, r0
 800bb96:	2800      	cmp	r0, #0
 800bb98:	d0c1      	beq.n	800bb1e <_rclc_take_new_data+0x42>
 800bb9a:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800bb9e:	4298      	cmp	r0, r3
 800bba0:	d0be      	beq.n	800bb20 <_rclc_take_new_data+0x44>
 800bba2:	f000 febd 	bl	800c920 <rcutils_reset_error>
 800bba6:	e7bb      	b.n	800bb20 <_rclc_take_new_data+0x44>
 800bba8:	6840      	ldr	r0, [r0, #4]
 800bbaa:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d17d      	bne.n	800bcae <_rclc_take_new_data+0x1d2>
 800bbb2:	69c3      	ldr	r3, [r0, #28]
 800bbb4:	b11b      	cbz	r3, 800bbbe <_rclc_take_new_data+0xe2>
 800bbb6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d144      	bne.n	800bc48 <_rclc_take_new_data+0x16c>
 800bbbe:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f040 80ac 	bne.w	800bd20 <_rclc_take_new_data+0x244>
 800bbc8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d0a6      	beq.n	800bb1e <_rclc_take_new_data+0x42>
 800bbd0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800bbd2:	a90a      	add	r1, sp, #40	@ 0x28
 800bbd4:	3010      	adds	r0, #16
 800bbd6:	f006 fbff 	bl	80123d8 <rcl_action_take_result_response>
 800bbda:	4605      	mov	r5, r0
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d1e0      	bne.n	800bba2 <_rclc_take_new_data+0xc6>
 800bbe0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bbe4:	6860      	ldr	r0, [r4, #4]
 800bbe6:	f007 f85b 	bl	8012ca0 <rclc_action_find_handle_by_result_request_sequence_number>
 800bbea:	2800      	cmp	r0, #0
 800bbec:	d098      	beq.n	800bb20 <_rclc_take_new_data+0x44>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800bbf4:	e794      	b.n	800bb20 <_rclc_take_new_data+0x44>
 800bbf6:	250b      	movs	r5, #11
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	b01b      	add	sp, #108	@ 0x6c
 800bbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbfe:	ae04      	add	r6, sp, #16
 800bc00:	aa0a      	add	r2, sp, #40	@ 0x28
 800bc02:	3010      	adds	r0, #16
 800bc04:	4631      	mov	r1, r6
 800bc06:	f006 fe5b 	bl	80128c0 <rcl_action_take_cancel_request>
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d1c8      	bne.n	800bba2 <_rclc_take_new_data+0xc6>
 800bc10:	6860      	ldr	r0, [r4, #4]
 800bc12:	a90a      	add	r1, sp, #40	@ 0x28
 800bc14:	f007 f802 	bl	8012c1c <rclc_action_find_goal_handle_by_uuid>
 800bc18:	4607      	mov	r7, r0
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	f000 80bb 	beq.w	800bd96 <_rclc_take_new_data+0x2ba>
 800bc20:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800bc24:	2101      	movs	r1, #1
 800bc26:	f006 ff83 	bl	8012b30 <rcl_action_transition_goal_state>
 800bc2a:	2803      	cmp	r0, #3
 800bc2c:	4684      	mov	ip, r0
 800bc2e:	f040 80a7 	bne.w	800bd80 <_rclc_take_new_data+0x2a4>
 800bc32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bc34:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800bc38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc3a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bc3e:	e884 0003 	stmia.w	r4, {r0, r1}
 800bc42:	f887 c008 	strb.w	ip, [r7, #8]
 800bc46:	e76b      	b.n	800bb20 <_rclc_take_new_data+0x44>
 800bc48:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800bc4a:	3010      	adds	r0, #16
 800bc4c:	f006 fc44 	bl	80124d8 <rcl_action_take_feedback>
 800bc50:	4605      	mov	r5, r0
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d1a5      	bne.n	800bba2 <_rclc_take_new_data+0xc6>
 800bc56:	6860      	ldr	r0, [r4, #4]
 800bc58:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800bc5a:	f006 ffdf 	bl	8012c1c <rclc_action_find_goal_handle_by_uuid>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2800      	cmp	r0, #0
 800bc62:	f000 80a3 	beq.w	800bdac <_rclc_take_new_data+0x2d0>
 800bc66:	2201      	movs	r2, #1
 800bc68:	6860      	ldr	r0, [r4, #4]
 800bc6a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800bc6e:	e7a6      	b.n	800bbbe <_rclc_take_new_data+0xe2>
 800bc70:	f006 ffae 	bl	8012bd0 <rclc_action_take_goal_handle>
 800bc74:	4606      	mov	r6, r0
 800bc76:	6860      	ldr	r0, [r4, #4]
 800bc78:	2e00      	cmp	r6, #0
 800bc7a:	f43f af47 	beq.w	800bb0c <_rclc_take_new_data+0x30>
 800bc7e:	6070      	str	r0, [r6, #4]
 800bc80:	69f2      	ldr	r2, [r6, #28]
 800bc82:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800bc86:	3010      	adds	r0, #16
 800bc88:	f006 fd62 	bl	8012750 <rcl_action_take_goal_request>
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	f040 808e 	bne.w	800bdb0 <_rclc_take_new_data+0x2d4>
 800bc94:	69f7      	ldr	r7, [r6, #28]
 800bc96:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bc98:	7235      	strb	r5, [r6, #8]
 800bc9a:	f8c6 0009 	str.w	r0, [r6, #9]
 800bc9e:	f8c6 100d 	str.w	r1, [r6, #13]
 800bca2:	6860      	ldr	r0, [r4, #4]
 800bca4:	f8c6 2011 	str.w	r2, [r6, #17]
 800bca8:	f8c6 3015 	str.w	r3, [r6, #21]
 800bcac:	e72e      	b.n	800bb0c <_rclc_take_new_data+0x30>
 800bcae:	aa04      	add	r2, sp, #16
 800bcb0:	a90a      	add	r1, sp, #40	@ 0x28
 800bcb2:	3010      	adds	r0, #16
 800bcb4:	f006 fb18 	bl	80122e8 <rcl_action_take_goal_response>
 800bcb8:	4605      	mov	r5, r0
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	f47f af71 	bne.w	800bba2 <_rclc_take_new_data+0xc6>
 800bcc0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bcc4:	6860      	ldr	r0, [r4, #4]
 800bcc6:	f006 ffd9 	bl	8012c7c <rclc_action_find_handle_by_goal_request_sequence_number>
 800bcca:	b130      	cbz	r0, 800bcda <_rclc_take_new_data+0x1fe>
 800bccc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800bcd0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	f880 2020 	strb.w	r2, [r0, #32]
 800bcda:	6860      	ldr	r0, [r4, #4]
 800bcdc:	e769      	b.n	800bbb2 <_rclc_take_new_data+0xd6>
 800bcde:	aa04      	add	r2, sp, #16
 800bce0:	3010      	adds	r0, #16
 800bce2:	a90a      	add	r1, sp, #40	@ 0x28
 800bce4:	f006 fdac 	bl	8012840 <rcl_action_take_result_request>
 800bce8:	4605      	mov	r5, r0
 800bcea:	2800      	cmp	r0, #0
 800bcec:	f47f af59 	bne.w	800bba2 <_rclc_take_new_data+0xc6>
 800bcf0:	6860      	ldr	r0, [r4, #4]
 800bcf2:	a904      	add	r1, sp, #16
 800bcf4:	f006 ff92 	bl	8012c1c <rclc_action_find_goal_handle_by_uuid>
 800bcf8:	4607      	mov	r7, r0
 800bcfa:	b160      	cbz	r0, 800bd16 <_rclc_take_new_data+0x23a>
 800bcfc:	ad0a      	add	r5, sp, #40	@ 0x28
 800bcfe:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800bd02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd04:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bd06:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bd0a:	f04f 0c02 	mov.w	ip, #2
 800bd0e:	e886 0003 	stmia.w	r6, {r0, r1}
 800bd12:	f887 c008 	strb.w	ip, [r7, #8]
 800bd16:	6860      	ldr	r0, [r4, #4]
 800bd18:	2300      	movs	r3, #0
 800bd1a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800bd1e:	e6fa      	b.n	800bb16 <_rclc_take_new_data+0x3a>
 800bd20:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800bd24:	a90a      	add	r1, sp, #40	@ 0x28
 800bd26:	3010      	adds	r0, #16
 800bd28:	f006 fb96 	bl	8012458 <rcl_action_take_cancel_response>
 800bd2c:	4605      	mov	r5, r0
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	f47f af37 	bne.w	800bba2 <_rclc_take_new_data+0xc6>
 800bd34:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bd38:	6860      	ldr	r0, [r4, #4]
 800bd3a:	f006 ffc3 	bl	8012cc4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800bd3e:	4606      	mov	r6, r0
 800bd40:	6860      	ldr	r0, [r4, #4]
 800bd42:	2e00      	cmp	r6, #0
 800bd44:	f43f af40 	beq.w	800bbc8 <_rclc_take_new_data+0xec>
 800bd48:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bd4a:	2701      	movs	r7, #1
 800bd4c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f43f af3a 	beq.w	800bbc8 <_rclc_take_new_data+0xec>
 800bd54:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bd56:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800bd5a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800bd5e:	f006 ff5d 	bl	8012c1c <rclc_action_find_goal_handle_by_uuid>
 800bd62:	b138      	cbz	r0, 800bd74 <_rclc_take_new_data+0x298>
 800bd64:	6860      	ldr	r0, [r4, #4]
 800bd66:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bd68:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800bd6c:	3501      	adds	r5, #1
 800bd6e:	42ab      	cmp	r3, r5
 800bd70:	d8f0      	bhi.n	800bd54 <_rclc_take_new_data+0x278>
 800bd72:	e729      	b.n	800bbc8 <_rclc_take_new_data+0xec>
 800bd74:	6860      	ldr	r0, [r4, #4]
 800bd76:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bd78:	3501      	adds	r5, #1
 800bd7a:	42ab      	cmp	r3, r5
 800bd7c:	d8ea      	bhi.n	800bd54 <_rclc_take_new_data+0x278>
 800bd7e:	e723      	b.n	800bbc8 <_rclc_take_new_data+0xec>
 800bd80:	ab06      	add	r3, sp, #24
 800bd82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd84:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bd88:	2103      	movs	r1, #3
 800bd8a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800bd8e:	6860      	ldr	r0, [r4, #4]
 800bd90:	f007 f80e 	bl	8012db0 <rclc_action_server_goal_cancel_reject>
 800bd94:	e6c4      	b.n	800bb20 <_rclc_take_new_data+0x44>
 800bd96:	ab06      	add	r3, sp, #24
 800bd98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd9a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bd9e:	2102      	movs	r1, #2
 800bda0:	e896 000c 	ldmia.w	r6, {r2, r3}
 800bda4:	6860      	ldr	r0, [r4, #4]
 800bda6:	f007 f803 	bl	8012db0 <rclc_action_server_goal_cancel_reject>
 800bdaa:	e6b9      	b.n	800bb20 <_rclc_take_new_data+0x44>
 800bdac:	6860      	ldr	r0, [r4, #4]
 800bdae:	e706      	b.n	800bbbe <_rclc_take_new_data+0xe2>
 800bdb0:	6860      	ldr	r0, [r4, #4]
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	f006 ff1c 	bl	8012bf0 <rclc_action_remove_used_goal_handle>
 800bdb8:	f000 fdb2 	bl	800c920 <rcutils_reset_error>
 800bdbc:	e6b0      	b.n	800bb20 <_rclc_take_new_data+0x44>
 800bdbe:	2501      	movs	r5, #1
 800bdc0:	e6ae      	b.n	800bb20 <_rclc_take_new_data+0x44>
 800bdc2:	bf00      	nop

0800bdc4 <_rclc_execute.part.0>:
 800bdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdc6:	7803      	ldrb	r3, [r0, #0]
 800bdc8:	b087      	sub	sp, #28
 800bdca:	4604      	mov	r4, r0
 800bdcc:	2b0a      	cmp	r3, #10
 800bdce:	f200 8136 	bhi.w	800c03e <_rclc_execute.part.0+0x27a>
 800bdd2:	e8df f003 	tbb	[pc, r3]
 800bdd6:	435e      	.short	0x435e
 800bdd8:	06a1664f 	.word	0x06a1664f
 800bddc:	6c1e0606 	.word	0x6c1e0606
 800bde0:	59          	.byte	0x59
 800bde1:	00          	.byte	0x00
 800bde2:	2b06      	cmp	r3, #6
 800bde4:	f000 8122 	beq.w	800c02c <_rclc_execute.part.0+0x268>
 800bde8:	2b07      	cmp	r3, #7
 800bdea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bdec:	f040 8118 	bne.w	800c020 <_rclc_execute.part.0+0x25c>
 800bdf0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800bdf4:	6880      	ldr	r0, [r0, #8]
 800bdf6:	4798      	blx	r3
 800bdf8:	f104 0110 	add.w	r1, r4, #16
 800bdfc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800bdfe:	6860      	ldr	r0, [r4, #4]
 800be00:	f005 f92e 	bl	8011060 <rcl_send_response>
 800be04:	2800      	cmp	r0, #0
 800be06:	d033      	beq.n	800be70 <_rclc_execute.part.0+0xac>
 800be08:	9005      	str	r0, [sp, #20]
 800be0a:	f000 fd89 	bl	800c920 <rcutils_reset_error>
 800be0e:	9805      	ldr	r0, [sp, #20]
 800be10:	e02e      	b.n	800be70 <_rclc_execute.part.0+0xac>
 800be12:	6840      	ldr	r0, [r0, #4]
 800be14:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f000 8086 	beq.w	800bf2a <_rclc_execute.part.0+0x166>
 800be1e:	2600      	movs	r6, #0
 800be20:	2701      	movs	r7, #1
 800be22:	e004      	b.n	800be2e <_rclc_execute.part.0+0x6a>
 800be24:	f006 feae 	bl	8012b84 <rclc_action_send_result_request>
 800be28:	b998      	cbnz	r0, 800be52 <_rclc_execute.part.0+0x8e>
 800be2a:	722f      	strb	r7, [r5, #8]
 800be2c:	6860      	ldr	r0, [r4, #4]
 800be2e:	f006 ff5b 	bl	8012ce8 <rclc_action_find_first_handle_with_goal_response>
 800be32:	4605      	mov	r5, r0
 800be34:	2800      	cmp	r0, #0
 800be36:	d077      	beq.n	800bf28 <_rclc_execute.part.0+0x164>
 800be38:	6863      	ldr	r3, [r4, #4]
 800be3a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800be42:	f885 6020 	strb.w	r6, [r5, #32]
 800be46:	4798      	blx	r3
 800be48:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800be4c:	4628      	mov	r0, r5
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d1e8      	bne.n	800be24 <_rclc_execute.part.0+0x60>
 800be52:	6860      	ldr	r0, [r4, #4]
 800be54:	4629      	mov	r1, r5
 800be56:	f006 fecb 	bl	8012bf0 <rclc_action_remove_used_goal_handle>
 800be5a:	e7e7      	b.n	800be2c <_rclc_execute.part.0+0x68>
 800be5c:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800be60:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800be64:	2d00      	cmp	r5, #0
 800be66:	f000 80c9 	beq.w	800bffc <_rclc_execute.part.0+0x238>
 800be6a:	6880      	ldr	r0, [r0, #8]
 800be6c:	4798      	blx	r3
 800be6e:	2000      	movs	r0, #0
 800be70:	b007      	add	sp, #28
 800be72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be74:	6840      	ldr	r0, [r0, #4]
 800be76:	f005 faf5 	bl	8011464 <rcl_timer_call>
 800be7a:	f240 3321 	movw	r3, #801	@ 0x321
 800be7e:	4298      	cmp	r0, r3
 800be80:	d004      	beq.n	800be8c <_rclc_execute.part.0+0xc8>
 800be82:	2800      	cmp	r0, #0
 800be84:	d0f4      	beq.n	800be70 <_rclc_execute.part.0+0xac>
 800be86:	e7bf      	b.n	800be08 <_rclc_execute.part.0+0x44>
 800be88:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800be8a:	4798      	blx	r3
 800be8c:	2000      	movs	r0, #0
 800be8e:	b007      	add	sp, #28
 800be90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be92:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800be96:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800be98:	b925      	cbnz	r5, 800bea4 <_rclc_execute.part.0+0xe0>
 800be9a:	4628      	mov	r0, r5
 800be9c:	4798      	blx	r3
 800be9e:	4628      	mov	r0, r5
 800bea0:	e7e6      	b.n	800be70 <_rclc_execute.part.0+0xac>
 800bea2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bea4:	68a0      	ldr	r0, [r4, #8]
 800bea6:	4798      	blx	r3
 800bea8:	2000      	movs	r0, #0
 800beaa:	b007      	add	sp, #28
 800beac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beae:	6840      	ldr	r0, [r0, #4]
 800beb0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800beb4:	bb3b      	cbnz	r3, 800bf06 <_rclc_execute.part.0+0x142>
 800beb6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d07b      	beq.n	800bfb6 <_rclc_execute.part.0+0x1f2>
 800bebe:	f640 0634 	movw	r6, #2100	@ 0x834
 800bec2:	2701      	movs	r7, #1
 800bec4:	e007      	b.n	800bed6 <_rclc_execute.part.0+0x112>
 800bec6:	4628      	mov	r0, r5
 800bec8:	f006 ff26 	bl	8012d18 <rclc_action_server_response_goal_request>
 800becc:	6860      	ldr	r0, [r4, #4]
 800bece:	4629      	mov	r1, r5
 800bed0:	f006 fe8e 	bl	8012bf0 <rclc_action_remove_used_goal_handle>
 800bed4:	6860      	ldr	r0, [r4, #4]
 800bed6:	2100      	movs	r1, #0
 800bed8:	f006 feb8 	bl	8012c4c <rclc_action_find_first_handle_by_status>
 800bedc:	4605      	mov	r5, r0
 800bede:	2800      	cmp	r0, #0
 800bee0:	d066      	beq.n	800bfb0 <_rclc_execute.part.0+0x1ec>
 800bee2:	6863      	ldr	r3, [r4, #4]
 800bee4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bee6:	699b      	ldr	r3, [r3, #24]
 800bee8:	4798      	blx	r3
 800beea:	42b0      	cmp	r0, r6
 800beec:	f04f 0100 	mov.w	r1, #0
 800bef0:	d1e9      	bne.n	800bec6 <_rclc_execute.part.0+0x102>
 800bef2:	2101      	movs	r1, #1
 800bef4:	4628      	mov	r0, r5
 800bef6:	f006 ff0f 	bl	8012d18 <rclc_action_server_response_goal_request>
 800befa:	722f      	strb	r7, [r5, #8]
 800befc:	e7ea      	b.n	800bed4 <_rclc_execute.part.0+0x110>
 800befe:	6848      	ldr	r0, [r1, #4]
 800bf00:	f006 fe76 	bl	8012bf0 <rclc_action_remove_used_goal_handle>
 800bf04:	6860      	ldr	r0, [r4, #4]
 800bf06:	f006 fead 	bl	8012c64 <rclc_action_find_first_terminated_handle>
 800bf0a:	4601      	mov	r1, r0
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	d1f6      	bne.n	800befe <_rclc_execute.part.0+0x13a>
 800bf10:	6860      	ldr	r0, [r4, #4]
 800bf12:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800bf16:	e7ce      	b.n	800beb6 <_rclc_execute.part.0+0xf2>
 800bf18:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bf1a:	6880      	ldr	r0, [r0, #8]
 800bf1c:	f104 0110 	add.w	r1, r4, #16
 800bf20:	4798      	blx	r3
 800bf22:	2000      	movs	r0, #0
 800bf24:	b007      	add	sp, #28
 800bf26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf28:	6860      	ldr	r0, [r4, #4]
 800bf2a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bf2e:	b18b      	cbz	r3, 800bf54 <_rclc_execute.part.0+0x190>
 800bf30:	68c5      	ldr	r5, [r0, #12]
 800bf32:	b32d      	cbz	r5, 800bf80 <_rclc_execute.part.0+0x1bc>
 800bf34:	2600      	movs	r6, #0
 800bf36:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800bf3a:	b143      	cbz	r3, 800bf4e <_rclc_execute.part.0+0x18a>
 800bf3c:	69c3      	ldr	r3, [r0, #28]
 800bf3e:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800bf42:	b123      	cbz	r3, 800bf4e <_rclc_execute.part.0+0x18a>
 800bf44:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800bf46:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bf48:	4628      	mov	r0, r5
 800bf4a:	4798      	blx	r3
 800bf4c:	6860      	ldr	r0, [r4, #4]
 800bf4e:	682d      	ldr	r5, [r5, #0]
 800bf50:	2d00      	cmp	r5, #0
 800bf52:	d1f0      	bne.n	800bf36 <_rclc_execute.part.0+0x172>
 800bf54:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800bf58:	b193      	cbz	r3, 800bf80 <_rclc_execute.part.0+0x1bc>
 800bf5a:	68c5      	ldr	r5, [r0, #12]
 800bf5c:	b185      	cbz	r5, 800bf80 <_rclc_execute.part.0+0x1bc>
 800bf5e:	2600      	movs	r6, #0
 800bf60:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800bf64:	b14b      	cbz	r3, 800bf7a <_rclc_execute.part.0+0x1b6>
 800bf66:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800bf68:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800bf6c:	b12b      	cbz	r3, 800bf7a <_rclc_execute.part.0+0x1b6>
 800bf6e:	4628      	mov	r0, r5
 800bf70:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800bf74:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bf76:	4798      	blx	r3
 800bf78:	6860      	ldr	r0, [r4, #4]
 800bf7a:	682d      	ldr	r5, [r5, #0]
 800bf7c:	2d00      	cmp	r5, #0
 800bf7e:	d1ef      	bne.n	800bf60 <_rclc_execute.part.0+0x19c>
 800bf80:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d081      	beq.n	800be8c <_rclc_execute.part.0+0xc8>
 800bf88:	2700      	movs	r7, #0
 800bf8a:	e00b      	b.n	800bfa4 <_rclc_execute.part.0+0x1e0>
 800bf8c:	6863      	ldr	r3, [r4, #4]
 800bf8e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bf90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800bf92:	6a1e      	ldr	r6, [r3, #32]
 800bf94:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800bf98:	47b0      	blx	r6
 800bf9a:	6860      	ldr	r0, [r4, #4]
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	f006 fe27 	bl	8012bf0 <rclc_action_remove_used_goal_handle>
 800bfa2:	6860      	ldr	r0, [r4, #4]
 800bfa4:	f006 feac 	bl	8012d00 <rclc_action_find_first_handle_with_result_response>
 800bfa8:	4605      	mov	r5, r0
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d1ee      	bne.n	800bf8c <_rclc_execute.part.0+0x1c8>
 800bfae:	e76d      	b.n	800be8c <_rclc_execute.part.0+0xc8>
 800bfb0:	6860      	ldr	r0, [r4, #4]
 800bfb2:	f880 5020 	strb.w	r5, [r0, #32]
 800bfb6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f43f af66 	beq.w	800be8c <_rclc_execute.part.0+0xc8>
 800bfc0:	68c5      	ldr	r5, [r0, #12]
 800bfc2:	b1b5      	cbz	r5, 800bff2 <_rclc_execute.part.0+0x22e>
 800bfc4:	2602      	movs	r6, #2
 800bfc6:	e001      	b.n	800bfcc <_rclc_execute.part.0+0x208>
 800bfc8:	682d      	ldr	r5, [r5, #0]
 800bfca:	b195      	cbz	r5, 800bff2 <_rclc_execute.part.0+0x22e>
 800bfcc:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800bfd0:	2b03      	cmp	r3, #3
 800bfd2:	d1f9      	bne.n	800bfc8 <_rclc_execute.part.0+0x204>
 800bfd4:	69c3      	ldr	r3, [r0, #28]
 800bfd6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bfd8:	4628      	mov	r0, r5
 800bfda:	4798      	blx	r3
 800bfdc:	4603      	mov	r3, r0
 800bfde:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800bfe8:	b163      	cbz	r3, 800c004 <_rclc_execute.part.0+0x240>
 800bfea:	f006 feb5 	bl	8012d58 <rclc_action_server_goal_cancel_accept>
 800bfee:	6860      	ldr	r0, [r4, #4]
 800bff0:	e7ea      	b.n	800bfc8 <_rclc_execute.part.0+0x204>
 800bff2:	2300      	movs	r3, #0
 800bff4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800bff8:	4618      	mov	r0, r3
 800bffa:	e739      	b.n	800be70 <_rclc_execute.part.0+0xac>
 800bffc:	4628      	mov	r0, r5
 800bffe:	4798      	blx	r3
 800c000:	4628      	mov	r0, r5
 800c002:	e735      	b.n	800be70 <_rclc_execute.part.0+0xac>
 800c004:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c006:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c00a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c00e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c012:	6860      	ldr	r0, [r4, #4]
 800c014:	2101      	movs	r1, #1
 800c016:	f006 fecb 	bl	8012db0 <rclc_action_server_goal_cancel_reject>
 800c01a:	722e      	strb	r6, [r5, #8]
 800c01c:	6860      	ldr	r0, [r4, #4]
 800c01e:	e7d3      	b.n	800bfc8 <_rclc_execute.part.0+0x204>
 800c020:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c022:	6880      	ldr	r0, [r0, #8]
 800c024:	4798      	blx	r3
 800c026:	f104 0110 	add.w	r1, r4, #16
 800c02a:	e6e7      	b.n	800bdfc <_rclc_execute.part.0+0x38>
 800c02c:	f100 0110 	add.w	r1, r0, #16
 800c030:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c032:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c034:	6880      	ldr	r0, [r0, #8]
 800c036:	9105      	str	r1, [sp, #20]
 800c038:	4798      	blx	r3
 800c03a:	9905      	ldr	r1, [sp, #20]
 800c03c:	e6de      	b.n	800bdfc <_rclc_execute.part.0+0x38>
 800c03e:	2001      	movs	r0, #1
 800c040:	e716      	b.n	800be70 <_rclc_execute.part.0+0xac>
 800c042:	bf00      	nop

0800c044 <rclc_executor_trigger_any>:
 800c044:	2800      	cmp	r0, #0
 800c046:	d03f      	beq.n	800c0c8 <rclc_executor_trigger_any+0x84>
 800c048:	2900      	cmp	r1, #0
 800c04a:	d03e      	beq.n	800c0ca <rclc_executor_trigger_any+0x86>
 800c04c:	4603      	mov	r3, r0
 800c04e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c052:	2200      	movs	r2, #0
 800c054:	2800      	cmp	r0, #0
 800c056:	d037      	beq.n	800c0c8 <rclc_executor_trigger_any+0x84>
 800c058:	b430      	push	{r4, r5}
 800c05a:	f893 c000 	ldrb.w	ip, [r3]
 800c05e:	f1bc 0f08 	cmp.w	ip, #8
 800c062:	d11e      	bne.n	800c0a2 <rclc_executor_trigger_any+0x5e>
 800c064:	685c      	ldr	r4, [r3, #4]
 800c066:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c068:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c06c:	d105      	bne.n	800c07a <rclc_executor_trigger_any+0x36>
 800c06e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c072:	b910      	cbnz	r0, 800c07a <rclc_executor_trigger_any+0x36>
 800c074:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c078:	b128      	cbz	r0, 800c086 <rclc_executor_trigger_any+0x42>
 800c07a:	bc30      	pop	{r4, r5}
 800c07c:	4770      	bx	lr
 800c07e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c082:	2800      	cmp	r0, #0
 800c084:	d1f9      	bne.n	800c07a <rclc_executor_trigger_any+0x36>
 800c086:	3201      	adds	r2, #1
 800c088:	4291      	cmp	r1, r2
 800c08a:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c08e:	d018      	beq.n	800c0c2 <rclc_executor_trigger_any+0x7e>
 800c090:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c094:	2800      	cmp	r0, #0
 800c096:	d0f0      	beq.n	800c07a <rclc_executor_trigger_any+0x36>
 800c098:	f893 c000 	ldrb.w	ip, [r3]
 800c09c:	f1bc 0f08 	cmp.w	ip, #8
 800c0a0:	d0e0      	beq.n	800c064 <rclc_executor_trigger_any+0x20>
 800c0a2:	f1bc 0f09 	cmp.w	ip, #9
 800c0a6:	d1ea      	bne.n	800c07e <rclc_executor_trigger_any+0x3a>
 800c0a8:	685c      	ldr	r4, [r3, #4]
 800c0aa:	6a25      	ldr	r5, [r4, #32]
 800c0ac:	2d00      	cmp	r5, #0
 800c0ae:	d1e4      	bne.n	800c07a <rclc_executor_trigger_any+0x36>
 800c0b0:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	d1e0      	bne.n	800c07a <rclc_executor_trigger_any+0x36>
 800c0b8:	3201      	adds	r2, #1
 800c0ba:	4291      	cmp	r1, r2
 800c0bc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c0c0:	d1e6      	bne.n	800c090 <rclc_executor_trigger_any+0x4c>
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	bc30      	pop	{r4, r5}
 800c0c6:	4770      	bx	lr
 800c0c8:	4770      	bx	lr
 800c0ca:	4608      	mov	r0, r1
 800c0cc:	4770      	bx	lr
 800c0ce:	bf00      	nop

0800c0d0 <rclc_executor_get_zero_initialized_executor>:
 800c0d0:	b510      	push	{r4, lr}
 800c0d2:	4903      	ldr	r1, [pc, #12]	@ (800c0e0 <rclc_executor_get_zero_initialized_executor+0x10>)
 800c0d4:	4604      	mov	r4, r0
 800c0d6:	2288      	movs	r2, #136	@ 0x88
 800c0d8:	f00b fbcb 	bl	8017872 <memcpy>
 800c0dc:	4620      	mov	r0, r4
 800c0de:	bd10      	pop	{r4, pc}
 800c0e0:	08018948 	.word	0x08018948
 800c0e4:	00000000 	.word	0x00000000

0800c0e8 <rclc_executor_init>:
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d05f      	beq.n	800c1ac <rclc_executor_init+0xc4>
 800c0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f0:	460c      	mov	r4, r1
 800c0f2:	b0b0      	sub	sp, #192	@ 0xc0
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	d051      	beq.n	800c19c <rclc_executor_init+0xb4>
 800c0f8:	4605      	mov	r5, r0
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	4616      	mov	r6, r2
 800c0fe:	461f      	mov	r7, r3
 800c100:	f000 fbea 	bl	800c8d8 <rcutils_allocator_is_valid>
 800c104:	2800      	cmp	r0, #0
 800c106:	d049      	beq.n	800c19c <rclc_executor_init+0xb4>
 800c108:	2e00      	cmp	r6, #0
 800c10a:	d047      	beq.n	800c19c <rclc_executor_init+0xb4>
 800c10c:	492c      	ldr	r1, [pc, #176]	@ (800c1c0 <rclc_executor_init+0xd8>)
 800c10e:	2288      	movs	r2, #136	@ 0x88
 800c110:	a80e      	add	r0, sp, #56	@ 0x38
 800c112:	f00b fbae 	bl	8017872 <memcpy>
 800c116:	a90e      	add	r1, sp, #56	@ 0x38
 800c118:	2288      	movs	r2, #136	@ 0x88
 800c11a:	4628      	mov	r0, r5
 800c11c:	f00b fba9 	bl	8017872 <memcpy>
 800c120:	602c      	str	r4, [r5, #0]
 800c122:	4668      	mov	r0, sp
 800c124:	60ae      	str	r6, [r5, #8]
 800c126:	466c      	mov	r4, sp
 800c128:	f005 fb0e 	bl	8011748 <rcl_get_zero_initialized_wait_set>
 800c12c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c12e:	f105 0c14 	add.w	ip, r5, #20
 800c132:	f8d7 8000 	ldr.w	r8, [r7]
 800c136:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c13a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c13c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c142:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c146:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c1b8 <rclc_executor_init+0xd0>
 800c14a:	6823      	ldr	r3, [r4, #0]
 800c14c:	f8cc 3000 	str.w	r3, [ip]
 800c150:	6939      	ldr	r1, [r7, #16]
 800c152:	612f      	str	r7, [r5, #16]
 800c154:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c158:	01b0      	lsls	r0, r6, #6
 800c15a:	47c0      	blx	r8
 800c15c:	6068      	str	r0, [r5, #4]
 800c15e:	b338      	cbz	r0, 800c1b0 <rclc_executor_init+0xc8>
 800c160:	2400      	movs	r4, #0
 800c162:	e000      	b.n	800c166 <rclc_executor_init+0x7e>
 800c164:	6868      	ldr	r0, [r5, #4]
 800c166:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c16a:	4631      	mov	r1, r6
 800c16c:	3401      	adds	r4, #1
 800c16e:	f000 fa6b 	bl	800c648 <rclc_executor_handle_init>
 800c172:	42a6      	cmp	r6, r4
 800c174:	d1f6      	bne.n	800c164 <rclc_executor_init+0x7c>
 800c176:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c17a:	f000 fa5b 	bl	800c634 <rclc_executor_handle_counters_zero_init>
 800c17e:	4a11      	ldr	r2, [pc, #68]	@ (800c1c4 <rclc_executor_init+0xdc>)
 800c180:	686b      	ldr	r3, [r5, #4]
 800c182:	2000      	movs	r0, #0
 800c184:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c188:	b163      	cbz	r3, 800c1a4 <rclc_executor_init+0xbc>
 800c18a:	692b      	ldr	r3, [r5, #16]
 800c18c:	b153      	cbz	r3, 800c1a4 <rclc_executor_init+0xbc>
 800c18e:	68ab      	ldr	r3, [r5, #8]
 800c190:	b143      	cbz	r3, 800c1a4 <rclc_executor_init+0xbc>
 800c192:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c196:	b030      	add	sp, #192	@ 0xc0
 800c198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c19c:	200b      	movs	r0, #11
 800c19e:	b030      	add	sp, #192	@ 0xc0
 800c1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	b030      	add	sp, #192	@ 0xc0
 800c1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ac:	200b      	movs	r0, #11
 800c1ae:	4770      	bx	lr
 800c1b0:	200a      	movs	r0, #10
 800c1b2:	e7f4      	b.n	800c19e <rclc_executor_init+0xb6>
 800c1b4:	f3af 8000 	nop.w
 800c1b8:	3b9aca00 	.word	0x3b9aca00
 800c1bc:	00000000 	.word	0x00000000
 800c1c0:	08018948 	.word	0x08018948
 800c1c4:	0800c045 	.word	0x0800c045

0800c1c8 <rclc_executor_add_subscription>:
 800c1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ca:	f89d e018 	ldrb.w	lr, [sp, #24]
 800c1ce:	b338      	cbz	r0, 800c220 <rclc_executor_add_subscription+0x58>
 800c1d0:	b331      	cbz	r1, 800c220 <rclc_executor_add_subscription+0x58>
 800c1d2:	b32a      	cbz	r2, 800c220 <rclc_executor_add_subscription+0x58>
 800c1d4:	b323      	cbz	r3, 800c220 <rclc_executor_add_subscription+0x58>
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800c1dc:	42a8      	cmp	r0, r5
 800c1de:	d301      	bcc.n	800c1e4 <rclc_executor_add_subscription+0x1c>
 800c1e0:	2001      	movs	r0, #1
 800c1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1e4:	6866      	ldr	r6, [r4, #4]
 800c1e6:	0187      	lsls	r7, r0, #6
 800c1e8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800c1ec:	2500      	movs	r5, #0
 800c1ee:	55f5      	strb	r5, [r6, r7]
 800c1f0:	3001      	adds	r0, #1
 800c1f2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800c1f6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	f104 0514 	add.w	r5, r4, #20
 800c200:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c204:	f88c e001 	strb.w	lr, [ip, #1]
 800c208:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800c20c:	60e0      	str	r0, [r4, #12]
 800c20e:	4628      	mov	r0, r5
 800c210:	f005 faae 	bl	8011770 <rcl_wait_set_is_valid>
 800c214:	b930      	cbnz	r0, 800c224 <rclc_executor_add_subscription+0x5c>
 800c216:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800c218:	3301      	adds	r3, #1
 800c21a:	2000      	movs	r0, #0
 800c21c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800c21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c220:	200b      	movs	r0, #11
 800c222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c224:	4628      	mov	r0, r5
 800c226:	f005 faa9 	bl	801177c <rcl_wait_set_fini>
 800c22a:	2800      	cmp	r0, #0
 800c22c:	d0f3      	beq.n	800c216 <rclc_executor_add_subscription+0x4e>
 800c22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c230 <rclc_executor_prepare>:
 800c230:	2800      	cmp	r0, #0
 800c232:	d044      	beq.n	800c2be <rclc_executor_prepare+0x8e>
 800c234:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c236:	f100 0514 	add.w	r5, r0, #20
 800c23a:	b09b      	sub	sp, #108	@ 0x6c
 800c23c:	4604      	mov	r4, r0
 800c23e:	4628      	mov	r0, r5
 800c240:	f005 fa96 	bl	8011770 <rcl_wait_set_is_valid>
 800c244:	b110      	cbz	r0, 800c24c <rclc_executor_prepare+0x1c>
 800c246:	2000      	movs	r0, #0
 800c248:	b01b      	add	sp, #108	@ 0x6c
 800c24a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c24c:	4628      	mov	r0, r5
 800c24e:	f005 fa95 	bl	801177c <rcl_wait_set_fini>
 800c252:	2800      	cmp	r0, #0
 800c254:	d130      	bne.n	800c2b8 <rclc_executor_prepare+0x88>
 800c256:	a80c      	add	r0, sp, #48	@ 0x30
 800c258:	f005 fa76 	bl	8011748 <rcl_get_zero_initialized_wait_set>
 800c25c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800c260:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c264:	46ae      	mov	lr, r5
 800c266:	6927      	ldr	r7, [r4, #16]
 800c268:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c26c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c270:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c274:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c278:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c27c:	f8dc 3000 	ldr.w	r3, [ip]
 800c280:	f8ce 3000 	str.w	r3, [lr]
 800c284:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c286:	ae04      	add	r6, sp, #16
 800c288:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	6822      	ldr	r2, [r4, #0]
 800c28e:	6033      	str	r3, [r6, #0]
 800c290:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c292:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c294:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c298:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800c29c:	e9cd 2100 	strd	r2, r1, [sp]
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800c2a4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c2a6:	f005 fd67 	bl	8011d78 <rcl_wait_set_init>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d0cc      	beq.n	800c248 <rclc_executor_prepare+0x18>
 800c2ae:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c2b0:	f000 fb36 	bl	800c920 <rcutils_reset_error>
 800c2b4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c2b6:	e7c7      	b.n	800c248 <rclc_executor_prepare+0x18>
 800c2b8:	f000 fb32 	bl	800c920 <rcutils_reset_error>
 800c2bc:	e7cb      	b.n	800c256 <rclc_executor_prepare+0x26>
 800c2be:	200b      	movs	r0, #11
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop

0800c2c4 <rclc_executor_spin_some.part.0>:
 800c2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c8:	f100 0614 	add.w	r6, r0, #20
 800c2cc:	b083      	sub	sp, #12
 800c2ce:	4691      	mov	r9, r2
 800c2d0:	4698      	mov	r8, r3
 800c2d2:	4605      	mov	r5, r0
 800c2d4:	f7ff ffac 	bl	800c230 <rclc_executor_prepare>
 800c2d8:	4630      	mov	r0, r6
 800c2da:	f005 fb1b 	bl	8011914 <rcl_wait_set_clear>
 800c2de:	4607      	mov	r7, r0
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	f040 80ed 	bne.w	800c4c0 <rclc_executor_spin_some.part.0+0x1fc>
 800c2e6:	68ab      	ldr	r3, [r5, #8]
 800c2e8:	4604      	mov	r4, r0
 800c2ea:	b303      	cbz	r3, 800c32e <rclc_executor_spin_some.part.0+0x6a>
 800c2ec:	6869      	ldr	r1, [r5, #4]
 800c2ee:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800c2f2:	01a2      	lsls	r2, r4, #6
 800c2f4:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800c2f8:	b1cb      	cbz	r3, 800c32e <rclc_executor_spin_some.part.0+0x6a>
 800c2fa:	5c8b      	ldrb	r3, [r1, r2]
 800c2fc:	2b0a      	cmp	r3, #10
 800c2fe:	f200 80d8 	bhi.w	800c4b2 <rclc_executor_spin_some.part.0+0x1ee>
 800c302:	e8df f003 	tbb	[pc, r3]
 800c306:	9c9c      	.short	0x9c9c
 800c308:	068c8ca7 	.word	0x068c8ca7
 800c30c:	bdc90606 	.word	0xbdc90606
 800c310:	b2          	.byte	0xb2
 800c311:	00          	.byte	0x00
 800c312:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c316:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c31a:	4630      	mov	r0, r6
 800c31c:	f005 fe42 	bl	8011fa4 <rcl_wait_set_add_service>
 800c320:	2800      	cmp	r0, #0
 800c322:	f040 8086 	bne.w	800c432 <rclc_executor_spin_some.part.0+0x16e>
 800c326:	68ab      	ldr	r3, [r5, #8]
 800c328:	3401      	adds	r4, #1
 800c32a:	429c      	cmp	r4, r3
 800c32c:	d3de      	bcc.n	800c2ec <rclc_executor_spin_some.part.0+0x28>
 800c32e:	4643      	mov	r3, r8
 800c330:	464a      	mov	r2, r9
 800c332:	4630      	mov	r0, r6
 800c334:	f005 fe64 	bl	8012000 <rcl_wait>
 800c338:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f000 80c7 	beq.w	800c4d0 <rclc_executor_spin_some.part.0+0x20c>
 800c342:	2b01      	cmp	r3, #1
 800c344:	f040 80b5 	bne.w	800c4b2 <rclc_executor_spin_some.part.0+0x1ee>
 800c348:	68ab      	ldr	r3, [r5, #8]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f000 8159 	beq.w	800c602 <rclc_executor_spin_some.part.0+0x33e>
 800c350:	2400      	movs	r4, #0
 800c352:	46a0      	mov	r8, r4
 800c354:	f240 1991 	movw	r9, #401	@ 0x191
 800c358:	e00a      	b.n	800c370 <rclc_executor_spin_some.part.0+0xac>
 800c35a:	f7ff fb71 	bl	800ba40 <_rclc_check_for_new_data>
 800c35e:	4604      	mov	r4, r0
 800c360:	b110      	cbz	r0, 800c368 <rclc_executor_spin_some.part.0+0xa4>
 800c362:	4548      	cmp	r0, r9
 800c364:	f040 80b2 	bne.w	800c4cc <rclc_executor_spin_some.part.0+0x208>
 800c368:	68ab      	ldr	r3, [r5, #8]
 800c36a:	4598      	cmp	r8, r3
 800c36c:	f080 8126 	bcs.w	800c5bc <rclc_executor_spin_some.part.0+0x2f8>
 800c370:	686a      	ldr	r2, [r5, #4]
 800c372:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c376:	4631      	mov	r1, r6
 800c378:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c37c:	f108 0801 	add.w	r8, r8, #1
 800c380:	f1bc 0f00 	cmp.w	ip, #0
 800c384:	d1e9      	bne.n	800c35a <rclc_executor_spin_some.part.0+0x96>
 800c386:	4619      	mov	r1, r3
 800c388:	4610      	mov	r0, r2
 800c38a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c38e:	4798      	blx	r3
 800c390:	2800      	cmp	r0, #0
 800c392:	f000 809b 	beq.w	800c4cc <rclc_executor_spin_some.part.0+0x208>
 800c396:	68ab      	ldr	r3, [r5, #8]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f000 8097 	beq.w	800c4cc <rclc_executor_spin_some.part.0+0x208>
 800c39e:	f04f 0800 	mov.w	r8, #0
 800c3a2:	f240 1991 	movw	r9, #401	@ 0x191
 800c3a6:	e009      	b.n	800c3bc <rclc_executor_spin_some.part.0+0xf8>
 800c3a8:	f7ff fb98 	bl	800badc <_rclc_take_new_data>
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	b110      	cbz	r0, 800c3b6 <rclc_executor_spin_some.part.0+0xf2>
 800c3b0:	4548      	cmp	r0, r9
 800c3b2:	f040 808b 	bne.w	800c4cc <rclc_executor_spin_some.part.0+0x208>
 800c3b6:	68ab      	ldr	r3, [r5, #8]
 800c3b8:	4598      	cmp	r8, r3
 800c3ba:	d209      	bcs.n	800c3d0 <rclc_executor_spin_some.part.0+0x10c>
 800c3bc:	6868      	ldr	r0, [r5, #4]
 800c3be:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c3c2:	4631      	mov	r1, r6
 800c3c4:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800c3c8:	f108 0801 	add.w	r8, r8, #1
 800c3cc:	2a00      	cmp	r2, #0
 800c3ce:	d1eb      	bne.n	800c3a8 <rclc_executor_spin_some.part.0+0xe4>
 800c3d0:	2600      	movs	r6, #0
 800c3d2:	b97b      	cbnz	r3, 800c3f4 <rclc_executor_spin_some.part.0+0x130>
 800c3d4:	e07a      	b.n	800c4cc <rclc_executor_spin_some.part.0+0x208>
 800c3d6:	f812 200c 	ldrb.w	r2, [r2, ip]
 800c3da:	2a08      	cmp	r2, #8
 800c3dc:	f000 80fd 	beq.w	800c5da <rclc_executor_spin_some.part.0+0x316>
 800c3e0:	2a09      	cmp	r2, #9
 800c3e2:	f000 80ef 	beq.w	800c5c4 <rclc_executor_spin_some.part.0+0x300>
 800c3e6:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800c3ea:	b98a      	cbnz	r2, 800c410 <rclc_executor_spin_some.part.0+0x14c>
 800c3ec:	3601      	adds	r6, #1
 800c3ee:	429e      	cmp	r6, r3
 800c3f0:	d262      	bcs.n	800c4b8 <rclc_executor_spin_some.part.0+0x1f4>
 800c3f2:	2400      	movs	r4, #0
 800c3f4:	686a      	ldr	r2, [r5, #4]
 800c3f6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800c3fa:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800c3fe:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800c402:	2900      	cmp	r1, #0
 800c404:	d062      	beq.n	800c4cc <rclc_executor_spin_some.part.0+0x208>
 800c406:	7841      	ldrb	r1, [r0, #1]
 800c408:	2900      	cmp	r1, #0
 800c40a:	d0e4      	beq.n	800c3d6 <rclc_executor_spin_some.part.0+0x112>
 800c40c:	2901      	cmp	r1, #1
 800c40e:	d1ed      	bne.n	800c3ec <rclc_executor_spin_some.part.0+0x128>
 800c410:	f7ff fcd8 	bl	800bdc4 <_rclc_execute.part.0>
 800c414:	2800      	cmp	r0, #0
 800c416:	f040 80b6 	bne.w	800c586 <rclc_executor_spin_some.part.0+0x2c2>
 800c41a:	68ab      	ldr	r3, [r5, #8]
 800c41c:	e7e6      	b.n	800c3ec <rclc_executor_spin_some.part.0+0x128>
 800c41e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c422:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c426:	4630      	mov	r0, r6
 800c428:	f005 fd90 	bl	8011f4c <rcl_wait_set_add_client>
 800c42c:	2800      	cmp	r0, #0
 800c42e:	f43f af7a 	beq.w	800c326 <rclc_executor_spin_some.part.0+0x62>
 800c432:	9001      	str	r0, [sp, #4]
 800c434:	f000 fa74 	bl	800c920 <rcutils_reset_error>
 800c438:	9801      	ldr	r0, [sp, #4]
 800c43a:	4607      	mov	r7, r0
 800c43c:	e03c      	b.n	800c4b8 <rclc_executor_spin_some.part.0+0x1f4>
 800c43e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c442:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c446:	4630      	mov	r0, r6
 800c448:	f005 fa38 	bl	80118bc <rcl_wait_set_add_subscription>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	f43f af6a 	beq.w	800c326 <rclc_executor_spin_some.part.0+0x62>
 800c452:	e7ee      	b.n	800c432 <rclc_executor_spin_some.part.0+0x16e>
 800c454:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c458:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c45c:	4630      	mov	r0, r6
 800c45e:	f005 fd45 	bl	8011eec <rcl_wait_set_add_timer>
 800c462:	2800      	cmp	r0, #0
 800c464:	f43f af5f 	beq.w	800c326 <rclc_executor_spin_some.part.0+0x62>
 800c468:	e7e3      	b.n	800c432 <rclc_executor_spin_some.part.0+0x16e>
 800c46a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c46e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c472:	4630      	mov	r0, r6
 800c474:	f005 fd0e 	bl	8011e94 <rcl_wait_set_add_guard_condition>
 800c478:	2800      	cmp	r0, #0
 800c47a:	f43f af54 	beq.w	800c326 <rclc_executor_spin_some.part.0+0x62>
 800c47e:	e7d8      	b.n	800c432 <rclc_executor_spin_some.part.0+0x16e>
 800c480:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c484:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c488:	3110      	adds	r1, #16
 800c48a:	4630      	mov	r0, r6
 800c48c:	f006 fa90 	bl	80129b0 <rcl_action_wait_set_add_action_server>
 800c490:	2800      	cmp	r0, #0
 800c492:	f43f af48 	beq.w	800c326 <rclc_executor_spin_some.part.0+0x62>
 800c496:	e7cc      	b.n	800c432 <rclc_executor_spin_some.part.0+0x16e>
 800c498:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c49c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c4a0:	3110      	adds	r1, #16
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	f006 f85b 	bl	8012560 <rcl_action_wait_set_add_action_client>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	f43f af3b 	beq.w	800c326 <rclc_executor_spin_some.part.0+0x62>
 800c4b0:	e7bf      	b.n	800c432 <rclc_executor_spin_some.part.0+0x16e>
 800c4b2:	f000 fa35 	bl	800c920 <rcutils_reset_error>
 800c4b6:	2701      	movs	r7, #1
 800c4b8:	4638      	mov	r0, r7
 800c4ba:	b003      	add	sp, #12
 800c4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c0:	f000 fa2e 	bl	800c920 <rcutils_reset_error>
 800c4c4:	4638      	mov	r0, r7
 800c4c6:	b003      	add	sp, #12
 800c4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4cc:	4627      	mov	r7, r4
 800c4ce:	e7f3      	b.n	800c4b8 <rclc_executor_spin_some.part.0+0x1f4>
 800c4d0:	68ab      	ldr	r3, [r5, #8]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f000 8092 	beq.w	800c5fc <rclc_executor_spin_some.part.0+0x338>
 800c4d8:	2400      	movs	r4, #0
 800c4da:	46a0      	mov	r8, r4
 800c4dc:	f240 1991 	movw	r9, #401	@ 0x191
 800c4e0:	e008      	b.n	800c4f4 <rclc_executor_spin_some.part.0+0x230>
 800c4e2:	f7ff faad 	bl	800ba40 <_rclc_check_for_new_data>
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	b108      	cbz	r0, 800c4ee <rclc_executor_spin_some.part.0+0x22a>
 800c4ea:	4548      	cmp	r0, r9
 800c4ec:	d1ee      	bne.n	800c4cc <rclc_executor_spin_some.part.0+0x208>
 800c4ee:	68ab      	ldr	r3, [r5, #8]
 800c4f0:	4598      	cmp	r8, r3
 800c4f2:	d265      	bcs.n	800c5c0 <rclc_executor_spin_some.part.0+0x2fc>
 800c4f4:	686a      	ldr	r2, [r5, #4]
 800c4f6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c4fa:	4631      	mov	r1, r6
 800c4fc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c500:	f108 0801 	add.w	r8, r8, #1
 800c504:	f1bc 0f00 	cmp.w	ip, #0
 800c508:	d1eb      	bne.n	800c4e2 <rclc_executor_spin_some.part.0+0x21e>
 800c50a:	4619      	mov	r1, r3
 800c50c:	4610      	mov	r0, r2
 800c50e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c512:	4798      	blx	r3
 800c514:	2800      	cmp	r0, #0
 800c516:	d0d9      	beq.n	800c4cc <rclc_executor_spin_some.part.0+0x208>
 800c518:	68ab      	ldr	r3, [r5, #8]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d0d6      	beq.n	800c4cc <rclc_executor_spin_some.part.0+0x208>
 800c51e:	f04f 0800 	mov.w	r8, #0
 800c522:	f240 1991 	movw	r9, #401	@ 0x191
 800c526:	f240 2a59 	movw	sl, #601	@ 0x259
 800c52a:	e00e      	b.n	800c54a <rclc_executor_spin_some.part.0+0x286>
 800c52c:	f813 300b 	ldrb.w	r3, [r3, fp]
 800c530:	2b08      	cmp	r3, #8
 800c532:	d033      	beq.n	800c59c <rclc_executor_spin_some.part.0+0x2d8>
 800c534:	2b09      	cmp	r3, #9
 800c536:	d028      	beq.n	800c58a <rclc_executor_spin_some.part.0+0x2c6>
 800c538:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800c53c:	b9fb      	cbnz	r3, 800c57e <rclc_executor_spin_some.part.0+0x2ba>
 800c53e:	68ab      	ldr	r3, [r5, #8]
 800c540:	f108 0801 	add.w	r8, r8, #1
 800c544:	4598      	cmp	r8, r3
 800c546:	d2b7      	bcs.n	800c4b8 <rclc_executor_spin_some.part.0+0x1f4>
 800c548:	2400      	movs	r4, #0
 800c54a:	6868      	ldr	r0, [r5, #4]
 800c54c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c550:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800c554:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d0b7      	beq.n	800c4cc <rclc_executor_spin_some.part.0+0x208>
 800c55c:	4631      	mov	r1, r6
 800c55e:	f7ff fabd 	bl	800badc <_rclc_take_new_data>
 800c562:	b118      	cbz	r0, 800c56c <rclc_executor_spin_some.part.0+0x2a8>
 800c564:	4548      	cmp	r0, r9
 800c566:	d001      	beq.n	800c56c <rclc_executor_spin_some.part.0+0x2a8>
 800c568:	4550      	cmp	r0, sl
 800c56a:	d10c      	bne.n	800c586 <rclc_executor_spin_some.part.0+0x2c2>
 800c56c:	686b      	ldr	r3, [r5, #4]
 800c56e:	eb13 000b 	adds.w	r0, r3, fp
 800c572:	d021      	beq.n	800c5b8 <rclc_executor_spin_some.part.0+0x2f4>
 800c574:	7842      	ldrb	r2, [r0, #1]
 800c576:	2a00      	cmp	r2, #0
 800c578:	d0d8      	beq.n	800c52c <rclc_executor_spin_some.part.0+0x268>
 800c57a:	2a01      	cmp	r2, #1
 800c57c:	d1df      	bne.n	800c53e <rclc_executor_spin_some.part.0+0x27a>
 800c57e:	f7ff fc21 	bl	800bdc4 <_rclc_execute.part.0>
 800c582:	2800      	cmp	r0, #0
 800c584:	d0db      	beq.n	800c53e <rclc_executor_spin_some.part.0+0x27a>
 800c586:	4607      	mov	r7, r0
 800c588:	e796      	b.n	800c4b8 <rclc_executor_spin_some.part.0+0x1f4>
 800c58a:	6843      	ldr	r3, [r0, #4]
 800c58c:	6a1a      	ldr	r2, [r3, #32]
 800c58e:	2a00      	cmp	r2, #0
 800c590:	d1f5      	bne.n	800c57e <rclc_executor_spin_some.part.0+0x2ba>
 800c592:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c596:	2b00      	cmp	r3, #0
 800c598:	d0d1      	beq.n	800c53e <rclc_executor_spin_some.part.0+0x27a>
 800c59a:	e7f0      	b.n	800c57e <rclc_executor_spin_some.part.0+0x2ba>
 800c59c:	6843      	ldr	r3, [r0, #4]
 800c59e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c5a0:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800c5a4:	d1eb      	bne.n	800c57e <rclc_executor_spin_some.part.0+0x2ba>
 800c5a6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c5aa:	2a00      	cmp	r2, #0
 800c5ac:	d1e7      	bne.n	800c57e <rclc_executor_spin_some.part.0+0x2ba>
 800c5ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d0c3      	beq.n	800c53e <rclc_executor_spin_some.part.0+0x27a>
 800c5b6:	e7e2      	b.n	800c57e <rclc_executor_spin_some.part.0+0x2ba>
 800c5b8:	270b      	movs	r7, #11
 800c5ba:	e77d      	b.n	800c4b8 <rclc_executor_spin_some.part.0+0x1f4>
 800c5bc:	686a      	ldr	r2, [r5, #4]
 800c5be:	e6e2      	b.n	800c386 <rclc_executor_spin_some.part.0+0xc2>
 800c5c0:	686a      	ldr	r2, [r5, #4]
 800c5c2:	e7a2      	b.n	800c50a <rclc_executor_spin_some.part.0+0x246>
 800c5c4:	6842      	ldr	r2, [r0, #4]
 800c5c6:	6a11      	ldr	r1, [r2, #32]
 800c5c8:	2900      	cmp	r1, #0
 800c5ca:	f47f af21 	bne.w	800c410 <rclc_executor_spin_some.part.0+0x14c>
 800c5ce:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800c5d2:	2a00      	cmp	r2, #0
 800c5d4:	f43f af0a 	beq.w	800c3ec <rclc_executor_spin_some.part.0+0x128>
 800c5d8:	e71a      	b.n	800c410 <rclc_executor_spin_some.part.0+0x14c>
 800c5da:	6842      	ldr	r2, [r0, #4]
 800c5dc:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800c5de:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800c5e2:	f47f af15 	bne.w	800c410 <rclc_executor_spin_some.part.0+0x14c>
 800c5e6:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800c5ea:	2900      	cmp	r1, #0
 800c5ec:	f47f af10 	bne.w	800c410 <rclc_executor_spin_some.part.0+0x14c>
 800c5f0:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800c5f4:	2a00      	cmp	r2, #0
 800c5f6:	f43f aef9 	beq.w	800c3ec <rclc_executor_spin_some.part.0+0x128>
 800c5fa:	e709      	b.n	800c410 <rclc_executor_spin_some.part.0+0x14c>
 800c5fc:	686a      	ldr	r2, [r5, #4]
 800c5fe:	461c      	mov	r4, r3
 800c600:	e783      	b.n	800c50a <rclc_executor_spin_some.part.0+0x246>
 800c602:	686a      	ldr	r2, [r5, #4]
 800c604:	461c      	mov	r4, r3
 800c606:	e6be      	b.n	800c386 <rclc_executor_spin_some.part.0+0xc2>

0800c608 <rclc_executor_spin_some>:
 800c608:	b190      	cbz	r0, 800c630 <rclc_executor_spin_some+0x28>
 800c60a:	b570      	push	{r4, r5, r6, lr}
 800c60c:	4604      	mov	r4, r0
 800c60e:	6800      	ldr	r0, [r0, #0]
 800c610:	4616      	mov	r6, r2
 800c612:	461d      	mov	r5, r3
 800c614:	f003 ff0c 	bl	8010430 <rcl_context_is_valid>
 800c618:	b130      	cbz	r0, 800c628 <rclc_executor_spin_some+0x20>
 800c61a:	4632      	mov	r2, r6
 800c61c:	462b      	mov	r3, r5
 800c61e:	4620      	mov	r0, r4
 800c620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c624:	f7ff be4e 	b.w	800c2c4 <rclc_executor_spin_some.part.0>
 800c628:	f000 f97a 	bl	800c920 <rcutils_reset_error>
 800c62c:	2001      	movs	r0, #1
 800c62e:	bd70      	pop	{r4, r5, r6, pc}
 800c630:	200b      	movs	r0, #11
 800c632:	4770      	bx	lr

0800c634 <rclc_executor_handle_counters_zero_init>:
 800c634:	b130      	cbz	r0, 800c644 <rclc_executor_handle_counters_zero_init+0x10>
 800c636:	b508      	push	{r3, lr}
 800c638:	2220      	movs	r2, #32
 800c63a:	2100      	movs	r1, #0
 800c63c:	f00b f850 	bl	80176e0 <memset>
 800c640:	2000      	movs	r0, #0
 800c642:	bd08      	pop	{r3, pc}
 800c644:	200b      	movs	r0, #11
 800c646:	4770      	bx	lr

0800c648 <rclc_executor_handle_init>:
 800c648:	b168      	cbz	r0, 800c666 <rclc_executor_handle_init+0x1e>
 800c64a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800c670 <rclc_executor_handle_init+0x28>
 800c64e:	2300      	movs	r3, #0
 800c650:	220b      	movs	r2, #11
 800c652:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800c656:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800c65a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800c65e:	8002      	strh	r2, [r0, #0]
 800c660:	8703      	strh	r3, [r0, #56]	@ 0x38
 800c662:	4618      	mov	r0, r3
 800c664:	4770      	bx	lr
 800c666:	200b      	movs	r0, #11
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	f3af 8000 	nop.w
	...

0800c678 <rclc_support_init>:
 800c678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c67c:	b086      	sub	sp, #24
 800c67e:	b3b8      	cbz	r0, 800c6f0 <rclc_support_init+0x78>
 800c680:	461c      	mov	r4, r3
 800c682:	b3ab      	cbz	r3, 800c6f0 <rclc_support_init+0x78>
 800c684:	460f      	mov	r7, r1
 800c686:	4690      	mov	r8, r2
 800c688:	4606      	mov	r6, r0
 800c68a:	f004 f83b 	bl	8010704 <rcl_get_zero_initialized_init_options>
 800c68e:	f104 030c 	add.w	r3, r4, #12
 800c692:	9005      	str	r0, [sp, #20]
 800c694:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c698:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c69c:	a805      	add	r0, sp, #20
 800c69e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c6a2:	f004 f831 	bl	8010708 <rcl_init_options_init>
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	b9e0      	cbnz	r0, 800c6e4 <rclc_support_init+0x6c>
 800c6aa:	ad02      	add	r5, sp, #8
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	f003 feb5 	bl	801041c <rcl_get_zero_initialized_context>
 800c6b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c6b6:	4633      	mov	r3, r6
 800c6b8:	e886 0003 	stmia.w	r6, {r0, r1}
 800c6bc:	aa05      	add	r2, sp, #20
 800c6be:	4641      	mov	r1, r8
 800c6c0:	4638      	mov	r0, r7
 800c6c2:	f003 ff1b 	bl	80104fc <rcl_init>
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	b9b8      	cbnz	r0, 800c6fa <rclc_support_init+0x82>
 800c6ca:	60b4      	str	r4, [r6, #8]
 800c6cc:	4622      	mov	r2, r4
 800c6ce:	f106 010c 	add.w	r1, r6, #12
 800c6d2:	2003      	movs	r0, #3
 800c6d4:	f004 fe42 	bl	801135c <rcl_clock_init>
 800c6d8:	4605      	mov	r5, r0
 800c6da:	b970      	cbnz	r0, 800c6fa <rclc_support_init+0x82>
 800c6dc:	a805      	add	r0, sp, #20
 800c6de:	f004 f879 	bl	80107d4 <rcl_init_options_fini>
 800c6e2:	b108      	cbz	r0, 800c6e8 <rclc_support_init+0x70>
 800c6e4:	f000 f91c 	bl	800c920 <rcutils_reset_error>
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	b006      	add	sp, #24
 800c6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f0:	250b      	movs	r5, #11
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	b006      	add	sp, #24
 800c6f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6fa:	f000 f911 	bl	800c920 <rcutils_reset_error>
 800c6fe:	a805      	add	r0, sp, #20
 800c700:	f004 f868 	bl	80107d4 <rcl_init_options_fini>
 800c704:	2800      	cmp	r0, #0
 800c706:	d0ef      	beq.n	800c6e8 <rclc_support_init+0x70>
 800c708:	e7ec      	b.n	800c6e4 <rclc_support_init+0x6c>
 800c70a:	bf00      	nop

0800c70c <rclc_node_init_default>:
 800c70c:	b3b8      	cbz	r0, 800c77e <rclc_node_init_default+0x72>
 800c70e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c712:	460d      	mov	r5, r1
 800c714:	b0a1      	sub	sp, #132	@ 0x84
 800c716:	b329      	cbz	r1, 800c764 <rclc_node_init_default+0x58>
 800c718:	4616      	mov	r6, r2
 800c71a:	b31a      	cbz	r2, 800c764 <rclc_node_init_default+0x58>
 800c71c:	461f      	mov	r7, r3
 800c71e:	b30b      	cbz	r3, 800c764 <rclc_node_init_default+0x58>
 800c720:	f10d 0810 	add.w	r8, sp, #16
 800c724:	4604      	mov	r4, r0
 800c726:	4640      	mov	r0, r8
 800c728:	f004 f90c 	bl	8010944 <rcl_get_zero_initialized_node>
 800c72c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c730:	f10d 0918 	add.w	r9, sp, #24
 800c734:	e884 0003 	stmia.w	r4, {r0, r1}
 800c738:	4648      	mov	r0, r9
 800c73a:	f004 fa7b 	bl	8010c34 <rcl_node_get_default_options>
 800c73e:	4640      	mov	r0, r8
 800c740:	f004 f900 	bl	8010944 <rcl_get_zero_initialized_node>
 800c744:	f8cd 9000 	str.w	r9, [sp]
 800c748:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c74c:	463b      	mov	r3, r7
 800c74e:	e884 0003 	stmia.w	r4, {r0, r1}
 800c752:	4632      	mov	r2, r6
 800c754:	4629      	mov	r1, r5
 800c756:	4620      	mov	r0, r4
 800c758:	f004 f8fe 	bl	8010958 <rcl_node_init>
 800c75c:	b930      	cbnz	r0, 800c76c <rclc_node_init_default+0x60>
 800c75e:	b021      	add	sp, #132	@ 0x84
 800c760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c764:	200b      	movs	r0, #11
 800c766:	b021      	add	sp, #132	@ 0x84
 800c768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c76c:	9003      	str	r0, [sp, #12]
 800c76e:	f000 f8d7 	bl	800c920 <rcutils_reset_error>
 800c772:	f000 f8d5 	bl	800c920 <rcutils_reset_error>
 800c776:	9803      	ldr	r0, [sp, #12]
 800c778:	b021      	add	sp, #132	@ 0x84
 800c77a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c77e:	200b      	movs	r0, #11
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop

0800c784 <rclc_publisher_init_default>:
 800c784:	b368      	cbz	r0, 800c7e2 <rclc_publisher_init_default+0x5e>
 800c786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c78a:	460d      	mov	r5, r1
 800c78c:	b0a0      	sub	sp, #128	@ 0x80
 800c78e:	b321      	cbz	r1, 800c7da <rclc_publisher_init_default+0x56>
 800c790:	4616      	mov	r6, r2
 800c792:	b312      	cbz	r2, 800c7da <rclc_publisher_init_default+0x56>
 800c794:	461f      	mov	r7, r3
 800c796:	b303      	cbz	r3, 800c7da <rclc_publisher_init_default+0x56>
 800c798:	4604      	mov	r4, r0
 800c79a:	f7ff f841 	bl	800b820 <rcl_get_zero_initialized_publisher>
 800c79e:	f10d 0810 	add.w	r8, sp, #16
 800c7a2:	6020      	str	r0, [r4, #0]
 800c7a4:	4640      	mov	r0, r8
 800c7a6:	f7ff f8d7 	bl	800b958 <rcl_publisher_get_default_options>
 800c7aa:	490f      	ldr	r1, [pc, #60]	@ (800c7e8 <rclc_publisher_init_default+0x64>)
 800c7ac:	2250      	movs	r2, #80	@ 0x50
 800c7ae:	4640      	mov	r0, r8
 800c7b0:	f00b f85f 	bl	8017872 <memcpy>
 800c7b4:	f8cd 8000 	str.w	r8, [sp]
 800c7b8:	463b      	mov	r3, r7
 800c7ba:	4632      	mov	r2, r6
 800c7bc:	4629      	mov	r1, r5
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f7ff f834 	bl	800b82c <rcl_publisher_init>
 800c7c4:	b910      	cbnz	r0, 800c7cc <rclc_publisher_init_default+0x48>
 800c7c6:	b020      	add	sp, #128	@ 0x80
 800c7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7cc:	9003      	str	r0, [sp, #12]
 800c7ce:	f000 f8a7 	bl	800c920 <rcutils_reset_error>
 800c7d2:	9803      	ldr	r0, [sp, #12]
 800c7d4:	b020      	add	sp, #128	@ 0x80
 800c7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7da:	200b      	movs	r0, #11
 800c7dc:	b020      	add	sp, #128	@ 0x80
 800c7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7e2:	200b      	movs	r0, #11
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	080189d0 	.word	0x080189d0

0800c7ec <rclc_subscription_init_default>:
 800c7ec:	b368      	cbz	r0, 800c84a <rclc_subscription_init_default+0x5e>
 800c7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f2:	460d      	mov	r5, r1
 800c7f4:	b0a0      	sub	sp, #128	@ 0x80
 800c7f6:	b321      	cbz	r1, 800c842 <rclc_subscription_init_default+0x56>
 800c7f8:	4616      	mov	r6, r2
 800c7fa:	b312      	cbz	r2, 800c842 <rclc_subscription_init_default+0x56>
 800c7fc:	461f      	mov	r7, r3
 800c7fe:	b303      	cbz	r3, 800c842 <rclc_subscription_init_default+0x56>
 800c800:	4604      	mov	r4, r0
 800c802:	f004 fc4f 	bl	80110a4 <rcl_get_zero_initialized_subscription>
 800c806:	f10d 0810 	add.w	r8, sp, #16
 800c80a:	6020      	str	r0, [r4, #0]
 800c80c:	4640      	mov	r0, r8
 800c80e:	f004 fcf7 	bl	8011200 <rcl_subscription_get_default_options>
 800c812:	490f      	ldr	r1, [pc, #60]	@ (800c850 <rclc_subscription_init_default+0x64>)
 800c814:	2250      	movs	r2, #80	@ 0x50
 800c816:	4640      	mov	r0, r8
 800c818:	f00b f82b 	bl	8017872 <memcpy>
 800c81c:	f8cd 8000 	str.w	r8, [sp]
 800c820:	463b      	mov	r3, r7
 800c822:	4632      	mov	r2, r6
 800c824:	4629      	mov	r1, r5
 800c826:	4620      	mov	r0, r4
 800c828:	f004 fc42 	bl	80110b0 <rcl_subscription_init>
 800c82c:	b910      	cbnz	r0, 800c834 <rclc_subscription_init_default+0x48>
 800c82e:	b020      	add	sp, #128	@ 0x80
 800c830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c834:	9003      	str	r0, [sp, #12]
 800c836:	f000 f873 	bl	800c920 <rcutils_reset_error>
 800c83a:	9803      	ldr	r0, [sp, #12]
 800c83c:	b020      	add	sp, #128	@ 0x80
 800c83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c842:	200b      	movs	r0, #11
 800c844:	b020      	add	sp, #128	@ 0x80
 800c846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c84a:	200b      	movs	r0, #11
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	08018a20 	.word	0x08018a20

0800c854 <__default_zero_allocate>:
 800c854:	f00a bb5a 	b.w	8016f0c <calloc>

0800c858 <__default_reallocate>:
 800c858:	f00a bce6 	b.w	8017228 <realloc>

0800c85c <__default_deallocate>:
 800c85c:	f00a bbc2 	b.w	8016fe4 <free>

0800c860 <__default_allocate>:
 800c860:	f00a bbb8 	b.w	8016fd4 <malloc>

0800c864 <rcutils_get_zero_initialized_allocator>:
 800c864:	b510      	push	{r4, lr}
 800c866:	4c05      	ldr	r4, [pc, #20]	@ (800c87c <rcutils_get_zero_initialized_allocator+0x18>)
 800c868:	4686      	mov	lr, r0
 800c86a:	4684      	mov	ip, r0
 800c86c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c86e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c872:	6823      	ldr	r3, [r4, #0]
 800c874:	f8cc 3000 	str.w	r3, [ip]
 800c878:	4670      	mov	r0, lr
 800c87a:	bd10      	pop	{r4, pc}
 800c87c:	08018a70 	.word	0x08018a70

0800c880 <rcutils_set_default_allocator>:
 800c880:	b1a8      	cbz	r0, 800c8ae <rcutils_set_default_allocator+0x2e>
 800c882:	6802      	ldr	r2, [r0, #0]
 800c884:	b1a2      	cbz	r2, 800c8b0 <rcutils_set_default_allocator+0x30>
 800c886:	6841      	ldr	r1, [r0, #4]
 800c888:	b1a1      	cbz	r1, 800c8b4 <rcutils_set_default_allocator+0x34>
 800c88a:	b410      	push	{r4}
 800c88c:	68c4      	ldr	r4, [r0, #12]
 800c88e:	b164      	cbz	r4, 800c8aa <rcutils_set_default_allocator+0x2a>
 800c890:	6880      	ldr	r0, [r0, #8]
 800c892:	b138      	cbz	r0, 800c8a4 <rcutils_set_default_allocator+0x24>
 800c894:	4b08      	ldr	r3, [pc, #32]	@ (800c8b8 <rcutils_set_default_allocator+0x38>)
 800c896:	601a      	str	r2, [r3, #0]
 800c898:	2200      	movs	r2, #0
 800c89a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800c89e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800c8a2:	2001      	movs	r0, #1
 800c8a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	e7fa      	b.n	800c8a4 <rcutils_set_default_allocator+0x24>
 800c8ae:	4770      	bx	lr
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	4770      	bx	lr
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	4770      	bx	lr
 800c8b8:	200001bc 	.word	0x200001bc

0800c8bc <rcutils_get_default_allocator>:
 800c8bc:	b510      	push	{r4, lr}
 800c8be:	4c05      	ldr	r4, [pc, #20]	@ (800c8d4 <rcutils_get_default_allocator+0x18>)
 800c8c0:	4686      	mov	lr, r0
 800c8c2:	4684      	mov	ip, r0
 800c8c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c8ca:	6823      	ldr	r3, [r4, #0]
 800c8cc:	f8cc 3000 	str.w	r3, [ip]
 800c8d0:	4670      	mov	r0, lr
 800c8d2:	bd10      	pop	{r4, pc}
 800c8d4:	200001bc 	.word	0x200001bc

0800c8d8 <rcutils_allocator_is_valid>:
 800c8d8:	b158      	cbz	r0, 800c8f2 <rcutils_allocator_is_valid+0x1a>
 800c8da:	6803      	ldr	r3, [r0, #0]
 800c8dc:	b143      	cbz	r3, 800c8f0 <rcutils_allocator_is_valid+0x18>
 800c8de:	6843      	ldr	r3, [r0, #4]
 800c8e0:	b133      	cbz	r3, 800c8f0 <rcutils_allocator_is_valid+0x18>
 800c8e2:	68c3      	ldr	r3, [r0, #12]
 800c8e4:	b123      	cbz	r3, 800c8f0 <rcutils_allocator_is_valid+0x18>
 800c8e6:	6880      	ldr	r0, [r0, #8]
 800c8e8:	3800      	subs	r0, #0
 800c8ea:	bf18      	it	ne
 800c8ec:	2001      	movne	r0, #1
 800c8ee:	4770      	bx	lr
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	4770      	bx	lr

0800c8f4 <rcutils_get_error_string>:
 800c8f4:	4b06      	ldr	r3, [pc, #24]	@ (800c910 <rcutils_get_error_string+0x1c>)
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	b13b      	cbz	r3, 800c90a <rcutils_get_error_string+0x16>
 800c8fa:	4b06      	ldr	r3, [pc, #24]	@ (800c914 <rcutils_get_error_string+0x20>)
 800c8fc:	781a      	ldrb	r2, [r3, #0]
 800c8fe:	b90a      	cbnz	r2, 800c904 <rcutils_get_error_string+0x10>
 800c900:	2201      	movs	r2, #1
 800c902:	701a      	strb	r2, [r3, #0]
 800c904:	4b04      	ldr	r3, [pc, #16]	@ (800c918 <rcutils_get_error_string+0x24>)
 800c906:	7818      	ldrb	r0, [r3, #0]
 800c908:	4770      	bx	lr
 800c90a:	4b04      	ldr	r3, [pc, #16]	@ (800c91c <rcutils_get_error_string+0x28>)
 800c90c:	7818      	ldrb	r0, [r3, #0]
 800c90e:	4770      	bx	lr
 800c910:	200092e8 	.word	0x200092e8
 800c914:	20009301 	.word	0x20009301
 800c918:	20009300 	.word	0x20009300
 800c91c:	08018a84 	.word	0x08018a84

0800c920 <rcutils_reset_error>:
 800c920:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800c940 <rcutils_reset_error+0x20>
 800c924:	4a08      	ldr	r2, [pc, #32]	@ (800c948 <rcutils_reset_error+0x28>)
 800c926:	4809      	ldr	r0, [pc, #36]	@ (800c94c <rcutils_reset_error+0x2c>)
 800c928:	4909      	ldr	r1, [pc, #36]	@ (800c950 <rcutils_reset_error+0x30>)
 800c92a:	2300      	movs	r3, #0
 800c92c:	8013      	strh	r3, [r2, #0]
 800c92e:	ed82 7b02 	vstr	d7, [r2, #8]
 800c932:	4a08      	ldr	r2, [pc, #32]	@ (800c954 <rcutils_reset_error+0x34>)
 800c934:	7003      	strb	r3, [r0, #0]
 800c936:	700b      	strb	r3, [r1, #0]
 800c938:	7013      	strb	r3, [r2, #0]
 800c93a:	4770      	bx	lr
 800c93c:	f3af 8000 	nop.w
	...
 800c948:	200092f0 	.word	0x200092f0
 800c94c:	20009301 	.word	0x20009301
 800c950:	20009300 	.word	0x20009300
 800c954:	200092e8 	.word	0x200092e8

0800c958 <rcutils_system_time_now>:
 800c958:	b308      	cbz	r0, 800c99e <rcutils_system_time_now+0x46>
 800c95a:	b570      	push	{r4, r5, r6, lr}
 800c95c:	b084      	sub	sp, #16
 800c95e:	4604      	mov	r4, r0
 800c960:	4669      	mov	r1, sp
 800c962:	2001      	movs	r0, #1
 800c964:	f7f5 fc30 	bl	80021c8 <clock_gettime>
 800c968:	e9dd 3500 	ldrd	r3, r5, [sp]
 800c96c:	2d00      	cmp	r5, #0
 800c96e:	db13      	blt.n	800c998 <rcutils_system_time_now+0x40>
 800c970:	9902      	ldr	r1, [sp, #8]
 800c972:	2900      	cmp	r1, #0
 800c974:	db0d      	blt.n	800c992 <rcutils_system_time_now+0x3a>
 800c976:	4e0b      	ldr	r6, [pc, #44]	@ (800c9a4 <rcutils_system_time_now+0x4c>)
 800c978:	fba3 3206 	umull	r3, r2, r3, r6
 800c97c:	185b      	adds	r3, r3, r1
 800c97e:	fb06 2205 	mla	r2, r6, r5, r2
 800c982:	f04f 0000 	mov.w	r0, #0
 800c986:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800c98a:	e9c4 3200 	strd	r3, r2, [r4]
 800c98e:	b004      	add	sp, #16
 800c990:	bd70      	pop	{r4, r5, r6, pc}
 800c992:	ea53 0205 	orrs.w	r2, r3, r5
 800c996:	d1ee      	bne.n	800c976 <rcutils_system_time_now+0x1e>
 800c998:	2002      	movs	r0, #2
 800c99a:	b004      	add	sp, #16
 800c99c:	bd70      	pop	{r4, r5, r6, pc}
 800c99e:	200b      	movs	r0, #11
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop
 800c9a4:	3b9aca00 	.word	0x3b9aca00

0800c9a8 <rcutils_steady_time_now>:
 800c9a8:	b308      	cbz	r0, 800c9ee <rcutils_steady_time_now+0x46>
 800c9aa:	b570      	push	{r4, r5, r6, lr}
 800c9ac:	b084      	sub	sp, #16
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	4669      	mov	r1, sp
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	f7f5 fc08 	bl	80021c8 <clock_gettime>
 800c9b8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800c9bc:	2d00      	cmp	r5, #0
 800c9be:	db13      	blt.n	800c9e8 <rcutils_steady_time_now+0x40>
 800c9c0:	9902      	ldr	r1, [sp, #8]
 800c9c2:	2900      	cmp	r1, #0
 800c9c4:	db0d      	blt.n	800c9e2 <rcutils_steady_time_now+0x3a>
 800c9c6:	4e0b      	ldr	r6, [pc, #44]	@ (800c9f4 <rcutils_steady_time_now+0x4c>)
 800c9c8:	fba3 3206 	umull	r3, r2, r3, r6
 800c9cc:	185b      	adds	r3, r3, r1
 800c9ce:	fb06 2205 	mla	r2, r6, r5, r2
 800c9d2:	f04f 0000 	mov.w	r0, #0
 800c9d6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800c9da:	e9c4 3200 	strd	r3, r2, [r4]
 800c9de:	b004      	add	sp, #16
 800c9e0:	bd70      	pop	{r4, r5, r6, pc}
 800c9e2:	ea53 0205 	orrs.w	r2, r3, r5
 800c9e6:	d1ee      	bne.n	800c9c6 <rcutils_steady_time_now+0x1e>
 800c9e8:	2002      	movs	r0, #2
 800c9ea:	b004      	add	sp, #16
 800c9ec:	bd70      	pop	{r4, r5, r6, pc}
 800c9ee:	200b      	movs	r0, #11
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	3b9aca00 	.word	0x3b9aca00

0800c9f8 <rmw_get_default_publisher_options>:
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	6002      	str	r2, [r0, #0]
 800c9fc:	7102      	strb	r2, [r0, #4]
 800c9fe:	4770      	bx	lr

0800ca00 <rmw_uros_set_custom_transport>:
 800ca00:	b470      	push	{r4, r5, r6}
 800ca02:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ca06:	b162      	cbz	r2, 800ca22 <rmw_uros_set_custom_transport+0x22>
 800ca08:	b15b      	cbz	r3, 800ca22 <rmw_uros_set_custom_transport+0x22>
 800ca0a:	b155      	cbz	r5, 800ca22 <rmw_uros_set_custom_transport+0x22>
 800ca0c:	b14e      	cbz	r6, 800ca22 <rmw_uros_set_custom_transport+0x22>
 800ca0e:	4c06      	ldr	r4, [pc, #24]	@ (800ca28 <rmw_uros_set_custom_transport+0x28>)
 800ca10:	7020      	strb	r0, [r4, #0]
 800ca12:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ca16:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ca1a:	6166      	str	r6, [r4, #20]
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	bc70      	pop	{r4, r5, r6}
 800ca20:	4770      	bx	lr
 800ca22:	200b      	movs	r0, #11
 800ca24:	bc70      	pop	{r4, r5, r6}
 800ca26:	4770      	bx	lr
 800ca28:	20009304 	.word	0x20009304

0800ca2c <flush_session>:
 800ca2c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800ca2e:	f001 bcdf 	b.w	800e3f0 <uxr_run_session_until_confirm_delivery>
 800ca32:	bf00      	nop

0800ca34 <rmw_publish>:
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d053      	beq.n	800cae0 <rmw_publish+0xac>
 800ca38:	b570      	push	{r4, r5, r6, lr}
 800ca3a:	460d      	mov	r5, r1
 800ca3c:	b08e      	sub	sp, #56	@ 0x38
 800ca3e:	2900      	cmp	r1, #0
 800ca40:	d04b      	beq.n	800cada <rmw_publish+0xa6>
 800ca42:	4604      	mov	r4, r0
 800ca44:	6800      	ldr	r0, [r0, #0]
 800ca46:	f000 fced 	bl	800d424 <is_uxrce_rmw_identifier_valid>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	d045      	beq.n	800cada <rmw_publish+0xa6>
 800ca4e:	6866      	ldr	r6, [r4, #4]
 800ca50:	2e00      	cmp	r6, #0
 800ca52:	d042      	beq.n	800cada <rmw_publish+0xa6>
 800ca54:	69b4      	ldr	r4, [r6, #24]
 800ca56:	4628      	mov	r0, r5
 800ca58:	6923      	ldr	r3, [r4, #16]
 800ca5a:	4798      	blx	r3
 800ca5c:	69f3      	ldr	r3, [r6, #28]
 800ca5e:	9005      	str	r0, [sp, #20]
 800ca60:	b113      	cbz	r3, 800ca68 <rmw_publish+0x34>
 800ca62:	a805      	add	r0, sp, #20
 800ca64:	4798      	blx	r3
 800ca66:	9805      	ldr	r0, [sp, #20]
 800ca68:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ca6c:	691b      	ldr	r3, [r3, #16]
 800ca6e:	9000      	str	r0, [sp, #0]
 800ca70:	6972      	ldr	r2, [r6, #20]
 800ca72:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800ca74:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ca78:	ab06      	add	r3, sp, #24
 800ca7a:	f002 faa5 	bl	800efc8 <uxr_prepare_output_stream>
 800ca7e:	b1d8      	cbz	r0, 800cab8 <rmw_publish+0x84>
 800ca80:	68a3      	ldr	r3, [r4, #8]
 800ca82:	a906      	add	r1, sp, #24
 800ca84:	4628      	mov	r0, r5
 800ca86:	4798      	blx	r3
 800ca88:	6a33      	ldr	r3, [r6, #32]
 800ca8a:	4604      	mov	r4, r0
 800ca8c:	b10b      	cbz	r3, 800ca92 <rmw_publish+0x5e>
 800ca8e:	a806      	add	r0, sp, #24
 800ca90:	4798      	blx	r3
 800ca92:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ca9c:	d022      	beq.n	800cae4 <rmw_publish+0xb0>
 800ca9e:	6918      	ldr	r0, [r3, #16]
 800caa0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800caa2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800caa6:	f001 fca3 	bl	800e3f0 <uxr_run_session_until_confirm_delivery>
 800caaa:	4020      	ands	r0, r4
 800caac:	b2c4      	uxtb	r4, r0
 800caae:	f084 0001 	eor.w	r0, r4, #1
 800cab2:	b2c0      	uxtb	r0, r0
 800cab4:	b00e      	add	sp, #56	@ 0x38
 800cab6:	bd70      	pop	{r4, r5, r6, pc}
 800cab8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cabc:	6918      	ldr	r0, [r3, #16]
 800cabe:	9b05      	ldr	r3, [sp, #20]
 800cac0:	9300      	str	r3, [sp, #0]
 800cac2:	4b0b      	ldr	r3, [pc, #44]	@ (800caf0 <rmw_publish+0xbc>)
 800cac4:	9301      	str	r3, [sp, #4]
 800cac6:	9602      	str	r6, [sp, #8]
 800cac8:	6972      	ldr	r2, [r6, #20]
 800caca:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800cacc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cad0:	ab06      	add	r3, sp, #24
 800cad2:	f002 faa9 	bl	800f028 <uxr_prepare_output_stream_fragmented>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d1d2      	bne.n	800ca80 <rmw_publish+0x4c>
 800cada:	2001      	movs	r0, #1
 800cadc:	b00e      	add	sp, #56	@ 0x38
 800cade:	bd70      	pop	{r4, r5, r6, pc}
 800cae0:	2001      	movs	r0, #1
 800cae2:	4770      	bx	lr
 800cae4:	6918      	ldr	r0, [r3, #16]
 800cae6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800caea:	f001 f8c1 	bl	800dc70 <uxr_flash_output_streams>
 800caee:	e7de      	b.n	800caae <rmw_publish+0x7a>
 800caf0:	0800ca2d 	.word	0x0800ca2d

0800caf4 <rmw_create_publisher>:
 800caf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf8:	b087      	sub	sp, #28
 800cafa:	2800      	cmp	r0, #0
 800cafc:	f000 80cc 	beq.w	800cc98 <rmw_create_publisher+0x1a4>
 800cb00:	460e      	mov	r6, r1
 800cb02:	2900      	cmp	r1, #0
 800cb04:	f000 80c8 	beq.w	800cc98 <rmw_create_publisher+0x1a4>
 800cb08:	4604      	mov	r4, r0
 800cb0a:	6800      	ldr	r0, [r0, #0]
 800cb0c:	4615      	mov	r5, r2
 800cb0e:	4698      	mov	r8, r3
 800cb10:	f000 fc88 	bl	800d424 <is_uxrce_rmw_identifier_valid>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	f000 80bf 	beq.w	800cc98 <rmw_create_publisher+0x1a4>
 800cb1a:	2d00      	cmp	r5, #0
 800cb1c:	f000 80bc 	beq.w	800cc98 <rmw_create_publisher+0x1a4>
 800cb20:	782b      	ldrb	r3, [r5, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f000 80b8 	beq.w	800cc98 <rmw_create_publisher+0x1a4>
 800cb28:	f1b8 0f00 	cmp.w	r8, #0
 800cb2c:	f000 80b4 	beq.w	800cc98 <rmw_create_publisher+0x1a4>
 800cb30:	485c      	ldr	r0, [pc, #368]	@ (800cca4 <rmw_create_publisher+0x1b0>)
 800cb32:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cb36:	f006 febb 	bl	80138b0 <get_memory>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	f000 80ac 	beq.w	800cc98 <rmw_create_publisher+0x1a4>
 800cb40:	6884      	ldr	r4, [r0, #8]
 800cb42:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800cb46:	f006 ff1b 	bl	8013980 <rmw_get_implementation_identifier>
 800cb4a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800cb4e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800cb52:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800cb56:	4628      	mov	r0, r5
 800cb58:	f7f3 fb4c 	bl	80001f4 <strlen>
 800cb5c:	3001      	adds	r0, #1
 800cb5e:	283c      	cmp	r0, #60	@ 0x3c
 800cb60:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800cb64:	f200 8091 	bhi.w	800cc8a <rmw_create_publisher+0x196>
 800cb68:	4a4f      	ldr	r2, [pc, #316]	@ (800cca8 <rmw_create_publisher+0x1b4>)
 800cb6a:	462b      	mov	r3, r5
 800cb6c:	213c      	movs	r1, #60	@ 0x3c
 800cb6e:	4650      	mov	r0, sl
 800cb70:	f00a fcdc 	bl	801752c <sniprintf>
 800cb74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cb78:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800cb7a:	4641      	mov	r1, r8
 800cb7c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800cb80:	2250      	movs	r2, #80	@ 0x50
 800cb82:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800cb86:	f00a fe74 	bl	8017872 <memcpy>
 800cb8a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800cb8e:	4947      	ldr	r1, [pc, #284]	@ (800ccac <rmw_create_publisher+0x1b8>)
 800cb90:	2b02      	cmp	r3, #2
 800cb92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb96:	bf0c      	ite	eq
 800cb98:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800cb9c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800cba0:	67a3      	str	r3, [r4, #120]	@ 0x78
 800cba2:	2300      	movs	r3, #0
 800cba4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800cba8:	4630      	mov	r0, r6
 800cbaa:	f000 fc49 	bl	800d440 <get_message_typesupport_handle>
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	d06b      	beq.n	800cc8a <rmw_create_publisher+0x196>
 800cbb2:	6842      	ldr	r2, [r0, #4]
 800cbb4:	61a2      	str	r2, [r4, #24]
 800cbb6:	2a00      	cmp	r2, #0
 800cbb8:	d067      	beq.n	800cc8a <rmw_create_publisher+0x196>
 800cbba:	4629      	mov	r1, r5
 800cbbc:	4643      	mov	r3, r8
 800cbbe:	4648      	mov	r0, r9
 800cbc0:	f007 f944 	bl	8013e4c <create_topic>
 800cbc4:	6260      	str	r0, [r4, #36]	@ 0x24
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d063      	beq.n	800cc92 <rmw_create_publisher+0x19e>
 800cbca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cbd2:	2103      	movs	r1, #3
 800cbd4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800cbd8:	1c42      	adds	r2, r0, #1
 800cbda:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800cbde:	f000 fef9 	bl	800d9d4 <uxr_object_id>
 800cbe2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800cbe6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbea:	6120      	str	r0, [r4, #16]
 800cbec:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800cbf0:	6910      	ldr	r0, [r2, #16]
 800cbf2:	2506      	movs	r5, #6
 800cbf4:	9500      	str	r5, [sp, #0]
 800cbf6:	6819      	ldr	r1, [r3, #0]
 800cbf8:	6922      	ldr	r2, [r4, #16]
 800cbfa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800cbfe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cc02:	f000 fd99 	bl	800d738 <uxr_buffer_create_publisher_bin>
 800cc06:	4602      	mov	r2, r0
 800cc08:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800cc0c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800cc10:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800cc14:	f000 fb86 	bl	800d324 <run_xrce_session>
 800cc18:	b3b8      	cbz	r0, 800cc8a <rmw_create_publisher+0x196>
 800cc1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc22:	2105      	movs	r1, #5
 800cc24:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800cc28:	1c42      	adds	r2, r0, #1
 800cc2a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800cc2e:	f000 fed1 	bl	800d9d4 <uxr_object_id>
 800cc32:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cc36:	6160      	str	r0, [r4, #20]
 800cc38:	691e      	ldr	r6, [r3, #16]
 800cc3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc3e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800cc42:	f10d 0a10 	add.w	sl, sp, #16
 800cc46:	4641      	mov	r1, r8
 800cc48:	4650      	mov	r0, sl
 800cc4a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800cc4e:	f000 fb85 	bl	800d35c <convert_qos_profile>
 800cc52:	9503      	str	r5, [sp, #12]
 800cc54:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800cc58:	9001      	str	r0, [sp, #4]
 800cc5a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800cc5e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800cc62:	9300      	str	r3, [sp, #0]
 800cc64:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800cc68:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800cc6c:	f8d8 1000 	ldr.w	r1, [r8]
 800cc70:	4630      	mov	r0, r6
 800cc72:	f000 fdc1 	bl	800d7f8 <uxr_buffer_create_datawriter_bin>
 800cc76:	4602      	mov	r2, r0
 800cc78:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800cc7c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800cc80:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800cc84:	f000 fb4e 	bl	800d324 <run_xrce_session>
 800cc88:	b938      	cbnz	r0, 800cc9a <rmw_create_publisher+0x1a6>
 800cc8a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cc8c:	b108      	cbz	r0, 800cc92 <rmw_create_publisher+0x19e>
 800cc8e:	f000 fa47 	bl	800d120 <rmw_uxrce_fini_topic_memory>
 800cc92:	4638      	mov	r0, r7
 800cc94:	f000 f9ec 	bl	800d070 <rmw_uxrce_fini_publisher_memory>
 800cc98:	2700      	movs	r7, #0
 800cc9a:	4638      	mov	r0, r7
 800cc9c:	b007      	add	sp, #28
 800cc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca2:	bf00      	nop
 800cca4:	2000dbfc 	.word	0x2000dbfc
 800cca8:	08018a98 	.word	0x08018a98
 800ccac:	08018828 	.word	0x08018828

0800ccb0 <rmw_publisher_get_actual_qos>:
 800ccb0:	b150      	cbz	r0, 800ccc8 <rmw_publisher_get_actual_qos+0x18>
 800ccb2:	b508      	push	{r3, lr}
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	b149      	cbz	r1, 800cccc <rmw_publisher_get_actual_qos+0x1c>
 800ccb8:	6841      	ldr	r1, [r0, #4]
 800ccba:	2250      	movs	r2, #80	@ 0x50
 800ccbc:	3128      	adds	r1, #40	@ 0x28
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f00a fdd7 	bl	8017872 <memcpy>
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	bd08      	pop	{r3, pc}
 800ccc8:	200b      	movs	r0, #11
 800ccca:	4770      	bx	lr
 800cccc:	200b      	movs	r0, #11
 800ccce:	bd08      	pop	{r3, pc}

0800ccd0 <rmw_destroy_publisher>:
 800ccd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd2:	b128      	cbz	r0, 800cce0 <rmw_destroy_publisher+0x10>
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	6800      	ldr	r0, [r0, #0]
 800ccd8:	460d      	mov	r5, r1
 800ccda:	f000 fba3 	bl	800d424 <is_uxrce_rmw_identifier_valid>
 800ccde:	b910      	cbnz	r0, 800cce6 <rmw_destroy_publisher+0x16>
 800cce0:	2401      	movs	r4, #1
 800cce2:	4620      	mov	r0, r4
 800cce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cce6:	6863      	ldr	r3, [r4, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d0f9      	beq.n	800cce0 <rmw_destroy_publisher+0x10>
 800ccec:	2d00      	cmp	r5, #0
 800ccee:	d0f7      	beq.n	800cce0 <rmw_destroy_publisher+0x10>
 800ccf0:	6828      	ldr	r0, [r5, #0]
 800ccf2:	f000 fb97 	bl	800d424 <is_uxrce_rmw_identifier_valid>
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d0f2      	beq.n	800cce0 <rmw_destroy_publisher+0x10>
 800ccfa:	686c      	ldr	r4, [r5, #4]
 800ccfc:	2c00      	cmp	r4, #0
 800ccfe:	d0ef      	beq.n	800cce0 <rmw_destroy_publisher+0x10>
 800cd00:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cd02:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800cd06:	f007 f8f1 	bl	8013eec <destroy_topic>
 800cd0a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cd0e:	6962      	ldr	r2, [r4, #20]
 800cd10:	6918      	ldr	r0, [r3, #16]
 800cd12:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cd16:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cd1a:	6819      	ldr	r1, [r3, #0]
 800cd1c:	f000 fc58 	bl	800d5d0 <uxr_buffer_delete_entity>
 800cd20:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cd24:	6922      	ldr	r2, [r4, #16]
 800cd26:	691b      	ldr	r3, [r3, #16]
 800cd28:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	6809      	ldr	r1, [r1, #0]
 800cd30:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cd34:	f000 fc4c 	bl	800d5d0 <uxr_buffer_delete_entity>
 800cd38:	693e      	ldr	r6, [r7, #16]
 800cd3a:	4622      	mov	r2, r4
 800cd3c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800cd40:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800cd44:	4604      	mov	r4, r0
 800cd46:	4630      	mov	r0, r6
 800cd48:	f000 faec 	bl	800d324 <run_xrce_session>
 800cd4c:	693e      	ldr	r6, [r7, #16]
 800cd4e:	4622      	mov	r2, r4
 800cd50:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800cd54:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800cd58:	4604      	mov	r4, r0
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	f000 fae2 	bl	800d324 <run_xrce_session>
 800cd60:	b12c      	cbz	r4, 800cd6e <rmw_destroy_publisher+0x9e>
 800cd62:	b120      	cbz	r0, 800cd6e <rmw_destroy_publisher+0x9e>
 800cd64:	2400      	movs	r4, #0
 800cd66:	4628      	mov	r0, r5
 800cd68:	f000 f982 	bl	800d070 <rmw_uxrce_fini_publisher_memory>
 800cd6c:	e7b9      	b.n	800cce2 <rmw_destroy_publisher+0x12>
 800cd6e:	2402      	movs	r4, #2
 800cd70:	e7f9      	b.n	800cd66 <rmw_destroy_publisher+0x96>
 800cd72:	bf00      	nop

0800cd74 <rmw_uxrce_init_service_memory>:
 800cd74:	b1e2      	cbz	r2, 800cdb0 <rmw_uxrce_init_service_memory+0x3c>
 800cd76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd7a:	7b05      	ldrb	r5, [r0, #12]
 800cd7c:	4606      	mov	r6, r0
 800cd7e:	b9ad      	cbnz	r5, 800cdac <rmw_uxrce_init_service_memory+0x38>
 800cd80:	23c8      	movs	r3, #200	@ 0xc8
 800cd82:	e9c0 5500 	strd	r5, r5, [r0]
 800cd86:	6083      	str	r3, [r0, #8]
 800cd88:	f240 1301 	movw	r3, #257	@ 0x101
 800cd8c:	4617      	mov	r7, r2
 800cd8e:	8183      	strh	r3, [r0, #12]
 800cd90:	460c      	mov	r4, r1
 800cd92:	46a8      	mov	r8, r5
 800cd94:	4621      	mov	r1, r4
 800cd96:	4630      	mov	r0, r6
 800cd98:	3501      	adds	r5, #1
 800cd9a:	f006 fd99 	bl	80138d0 <put_memory>
 800cd9e:	42af      	cmp	r7, r5
 800cda0:	60a4      	str	r4, [r4, #8]
 800cda2:	f884 800c 	strb.w	r8, [r4, #12]
 800cda6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800cdaa:	d1f3      	bne.n	800cd94 <rmw_uxrce_init_service_memory+0x20>
 800cdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop

0800cdb4 <rmw_uxrce_init_client_memory>:
 800cdb4:	b1e2      	cbz	r2, 800cdf0 <rmw_uxrce_init_client_memory+0x3c>
 800cdb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdba:	7b05      	ldrb	r5, [r0, #12]
 800cdbc:	4606      	mov	r6, r0
 800cdbe:	b9ad      	cbnz	r5, 800cdec <rmw_uxrce_init_client_memory+0x38>
 800cdc0:	23c8      	movs	r3, #200	@ 0xc8
 800cdc2:	e9c0 5500 	strd	r5, r5, [r0]
 800cdc6:	6083      	str	r3, [r0, #8]
 800cdc8:	f240 1301 	movw	r3, #257	@ 0x101
 800cdcc:	4617      	mov	r7, r2
 800cdce:	8183      	strh	r3, [r0, #12]
 800cdd0:	460c      	mov	r4, r1
 800cdd2:	46a8      	mov	r8, r5
 800cdd4:	4621      	mov	r1, r4
 800cdd6:	4630      	mov	r0, r6
 800cdd8:	3501      	adds	r5, #1
 800cdda:	f006 fd79 	bl	80138d0 <put_memory>
 800cdde:	42af      	cmp	r7, r5
 800cde0:	60a4      	str	r4, [r4, #8]
 800cde2:	f884 800c 	strb.w	r8, [r4, #12]
 800cde6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800cdea:	d1f3      	bne.n	800cdd4 <rmw_uxrce_init_client_memory+0x20>
 800cdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop

0800cdf4 <rmw_uxrce_init_publisher_memory>:
 800cdf4:	b1e2      	cbz	r2, 800ce30 <rmw_uxrce_init_publisher_memory+0x3c>
 800cdf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdfa:	7b05      	ldrb	r5, [r0, #12]
 800cdfc:	4606      	mov	r6, r0
 800cdfe:	b9ad      	cbnz	r5, 800ce2c <rmw_uxrce_init_publisher_memory+0x38>
 800ce00:	23d8      	movs	r3, #216	@ 0xd8
 800ce02:	e9c0 5500 	strd	r5, r5, [r0]
 800ce06:	6083      	str	r3, [r0, #8]
 800ce08:	f240 1301 	movw	r3, #257	@ 0x101
 800ce0c:	4617      	mov	r7, r2
 800ce0e:	8183      	strh	r3, [r0, #12]
 800ce10:	460c      	mov	r4, r1
 800ce12:	46a8      	mov	r8, r5
 800ce14:	4621      	mov	r1, r4
 800ce16:	4630      	mov	r0, r6
 800ce18:	3501      	adds	r5, #1
 800ce1a:	f006 fd59 	bl	80138d0 <put_memory>
 800ce1e:	42af      	cmp	r7, r5
 800ce20:	60a4      	str	r4, [r4, #8]
 800ce22:	f884 800c 	strb.w	r8, [r4, #12]
 800ce26:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ce2a:	d1f3      	bne.n	800ce14 <rmw_uxrce_init_publisher_memory+0x20>
 800ce2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop

0800ce34 <rmw_uxrce_init_subscription_memory>:
 800ce34:	b1e2      	cbz	r2, 800ce70 <rmw_uxrce_init_subscription_memory+0x3c>
 800ce36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3a:	7b05      	ldrb	r5, [r0, #12]
 800ce3c:	4606      	mov	r6, r0
 800ce3e:	b9ad      	cbnz	r5, 800ce6c <rmw_uxrce_init_subscription_memory+0x38>
 800ce40:	23d8      	movs	r3, #216	@ 0xd8
 800ce42:	e9c0 5500 	strd	r5, r5, [r0]
 800ce46:	6083      	str	r3, [r0, #8]
 800ce48:	f240 1301 	movw	r3, #257	@ 0x101
 800ce4c:	4617      	mov	r7, r2
 800ce4e:	8183      	strh	r3, [r0, #12]
 800ce50:	460c      	mov	r4, r1
 800ce52:	46a8      	mov	r8, r5
 800ce54:	4621      	mov	r1, r4
 800ce56:	4630      	mov	r0, r6
 800ce58:	3501      	adds	r5, #1
 800ce5a:	f006 fd39 	bl	80138d0 <put_memory>
 800ce5e:	42af      	cmp	r7, r5
 800ce60:	60a4      	str	r4, [r4, #8]
 800ce62:	f884 800c 	strb.w	r8, [r4, #12]
 800ce66:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ce6a:	d1f3      	bne.n	800ce54 <rmw_uxrce_init_subscription_memory+0x20>
 800ce6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop

0800ce74 <rmw_uxrce_init_node_memory>:
 800ce74:	b1e2      	cbz	r2, 800ceb0 <rmw_uxrce_init_node_memory+0x3c>
 800ce76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7a:	7b05      	ldrb	r5, [r0, #12]
 800ce7c:	4606      	mov	r6, r0
 800ce7e:	b9ad      	cbnz	r5, 800ceac <rmw_uxrce_init_node_memory+0x38>
 800ce80:	23a4      	movs	r3, #164	@ 0xa4
 800ce82:	e9c0 5500 	strd	r5, r5, [r0]
 800ce86:	6083      	str	r3, [r0, #8]
 800ce88:	f240 1301 	movw	r3, #257	@ 0x101
 800ce8c:	4617      	mov	r7, r2
 800ce8e:	8183      	strh	r3, [r0, #12]
 800ce90:	460c      	mov	r4, r1
 800ce92:	46a8      	mov	r8, r5
 800ce94:	4621      	mov	r1, r4
 800ce96:	4630      	mov	r0, r6
 800ce98:	3501      	adds	r5, #1
 800ce9a:	f006 fd19 	bl	80138d0 <put_memory>
 800ce9e:	42af      	cmp	r7, r5
 800cea0:	60a4      	str	r4, [r4, #8]
 800cea2:	f884 800c 	strb.w	r8, [r4, #12]
 800cea6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ceaa:	d1f3      	bne.n	800ce94 <rmw_uxrce_init_node_memory+0x20>
 800ceac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop

0800ceb4 <rmw_uxrce_init_session_memory>:
 800ceb4:	b1ea      	cbz	r2, 800cef2 <rmw_uxrce_init_session_memory+0x3e>
 800ceb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceba:	7b05      	ldrb	r5, [r0, #12]
 800cebc:	4606      	mov	r6, r0
 800cebe:	b9b5      	cbnz	r5, 800ceee <rmw_uxrce_init_session_memory+0x3a>
 800cec0:	e9c0 5500 	strd	r5, r5, [r0]
 800cec4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800cec8:	f240 1301 	movw	r3, #257	@ 0x101
 800cecc:	4617      	mov	r7, r2
 800cece:	f8c0 8008 	str.w	r8, [r0, #8]
 800ced2:	460c      	mov	r4, r1
 800ced4:	8183      	strh	r3, [r0, #12]
 800ced6:	46a9      	mov	r9, r5
 800ced8:	4621      	mov	r1, r4
 800ceda:	4630      	mov	r0, r6
 800cedc:	3501      	adds	r5, #1
 800cede:	f006 fcf7 	bl	80138d0 <put_memory>
 800cee2:	42af      	cmp	r7, r5
 800cee4:	60a4      	str	r4, [r4, #8]
 800cee6:	f884 900c 	strb.w	r9, [r4, #12]
 800ceea:	4444      	add	r4, r8
 800ceec:	d1f4      	bne.n	800ced8 <rmw_uxrce_init_session_memory+0x24>
 800ceee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cef2:	4770      	bx	lr

0800cef4 <rmw_uxrce_init_topic_memory>:
 800cef4:	b1e2      	cbz	r2, 800cf30 <rmw_uxrce_init_topic_memory+0x3c>
 800cef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cefa:	7b05      	ldrb	r5, [r0, #12]
 800cefc:	4606      	mov	r6, r0
 800cefe:	b9ad      	cbnz	r5, 800cf2c <rmw_uxrce_init_topic_memory+0x38>
 800cf00:	231c      	movs	r3, #28
 800cf02:	e9c0 5500 	strd	r5, r5, [r0]
 800cf06:	6083      	str	r3, [r0, #8]
 800cf08:	f240 1301 	movw	r3, #257	@ 0x101
 800cf0c:	4617      	mov	r7, r2
 800cf0e:	8183      	strh	r3, [r0, #12]
 800cf10:	460c      	mov	r4, r1
 800cf12:	46a8      	mov	r8, r5
 800cf14:	4621      	mov	r1, r4
 800cf16:	4630      	mov	r0, r6
 800cf18:	3501      	adds	r5, #1
 800cf1a:	f006 fcd9 	bl	80138d0 <put_memory>
 800cf1e:	42af      	cmp	r7, r5
 800cf20:	60a4      	str	r4, [r4, #8]
 800cf22:	f884 800c 	strb.w	r8, [r4, #12]
 800cf26:	f104 041c 	add.w	r4, r4, #28
 800cf2a:	d1f3      	bne.n	800cf14 <rmw_uxrce_init_topic_memory+0x20>
 800cf2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop

0800cf34 <rmw_uxrce_init_static_input_buffer_memory>:
 800cf34:	b1ea      	cbz	r2, 800cf72 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800cf36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf3a:	7b05      	ldrb	r5, [r0, #12]
 800cf3c:	4606      	mov	r6, r0
 800cf3e:	b9b5      	cbnz	r5, 800cf6e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800cf40:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800cf44:	e9c0 5500 	strd	r5, r5, [r0]
 800cf48:	6083      	str	r3, [r0, #8]
 800cf4a:	f240 1301 	movw	r3, #257	@ 0x101
 800cf4e:	4617      	mov	r7, r2
 800cf50:	8183      	strh	r3, [r0, #12]
 800cf52:	460c      	mov	r4, r1
 800cf54:	46a8      	mov	r8, r5
 800cf56:	4621      	mov	r1, r4
 800cf58:	4630      	mov	r0, r6
 800cf5a:	3501      	adds	r5, #1
 800cf5c:	f006 fcb8 	bl	80138d0 <put_memory>
 800cf60:	42af      	cmp	r7, r5
 800cf62:	60a4      	str	r4, [r4, #8]
 800cf64:	f884 800c 	strb.w	r8, [r4, #12]
 800cf68:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800cf6c:	d1f3      	bne.n	800cf56 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800cf6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf72:	4770      	bx	lr

0800cf74 <rmw_uxrce_init_init_options_impl_memory>:
 800cf74:	b1e2      	cbz	r2, 800cfb0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800cf76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf7a:	7b05      	ldrb	r5, [r0, #12]
 800cf7c:	4606      	mov	r6, r0
 800cf7e:	b9ad      	cbnz	r5, 800cfac <rmw_uxrce_init_init_options_impl_memory+0x38>
 800cf80:	232c      	movs	r3, #44	@ 0x2c
 800cf82:	e9c0 5500 	strd	r5, r5, [r0]
 800cf86:	6083      	str	r3, [r0, #8]
 800cf88:	f240 1301 	movw	r3, #257	@ 0x101
 800cf8c:	4617      	mov	r7, r2
 800cf8e:	8183      	strh	r3, [r0, #12]
 800cf90:	460c      	mov	r4, r1
 800cf92:	46a8      	mov	r8, r5
 800cf94:	4621      	mov	r1, r4
 800cf96:	4630      	mov	r0, r6
 800cf98:	3501      	adds	r5, #1
 800cf9a:	f006 fc99 	bl	80138d0 <put_memory>
 800cf9e:	42af      	cmp	r7, r5
 800cfa0:	60a4      	str	r4, [r4, #8]
 800cfa2:	f884 800c 	strb.w	r8, [r4, #12]
 800cfa6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800cfaa:	d1f3      	bne.n	800cf94 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800cfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop

0800cfb4 <rmw_uxrce_init_wait_set_memory>:
 800cfb4:	b1e2      	cbz	r2, 800cff0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800cfb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfba:	7b05      	ldrb	r5, [r0, #12]
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	b9ad      	cbnz	r5, 800cfec <rmw_uxrce_init_wait_set_memory+0x38>
 800cfc0:	231c      	movs	r3, #28
 800cfc2:	e9c0 5500 	strd	r5, r5, [r0]
 800cfc6:	6083      	str	r3, [r0, #8]
 800cfc8:	f240 1301 	movw	r3, #257	@ 0x101
 800cfcc:	4617      	mov	r7, r2
 800cfce:	8183      	strh	r3, [r0, #12]
 800cfd0:	460c      	mov	r4, r1
 800cfd2:	46a8      	mov	r8, r5
 800cfd4:	4621      	mov	r1, r4
 800cfd6:	4630      	mov	r0, r6
 800cfd8:	3501      	adds	r5, #1
 800cfda:	f006 fc79 	bl	80138d0 <put_memory>
 800cfde:	42af      	cmp	r7, r5
 800cfe0:	60a4      	str	r4, [r4, #8]
 800cfe2:	f884 800c 	strb.w	r8, [r4, #12]
 800cfe6:	f104 041c 	add.w	r4, r4, #28
 800cfea:	d1f3      	bne.n	800cfd4 <rmw_uxrce_init_wait_set_memory+0x20>
 800cfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop

0800cff4 <rmw_uxrce_init_guard_condition_memory>:
 800cff4:	b1e2      	cbz	r2, 800d030 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800cff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cffa:	7b05      	ldrb	r5, [r0, #12]
 800cffc:	4606      	mov	r6, r0
 800cffe:	b9ad      	cbnz	r5, 800d02c <rmw_uxrce_init_guard_condition_memory+0x38>
 800d000:	2320      	movs	r3, #32
 800d002:	e9c0 5500 	strd	r5, r5, [r0]
 800d006:	6083      	str	r3, [r0, #8]
 800d008:	f240 1301 	movw	r3, #257	@ 0x101
 800d00c:	4617      	mov	r7, r2
 800d00e:	8183      	strh	r3, [r0, #12]
 800d010:	460c      	mov	r4, r1
 800d012:	46a8      	mov	r8, r5
 800d014:	4621      	mov	r1, r4
 800d016:	4630      	mov	r0, r6
 800d018:	3501      	adds	r5, #1
 800d01a:	f006 fc59 	bl	80138d0 <put_memory>
 800d01e:	42af      	cmp	r7, r5
 800d020:	60a4      	str	r4, [r4, #8]
 800d022:	f884 800c 	strb.w	r8, [r4, #12]
 800d026:	f104 0420 	add.w	r4, r4, #32
 800d02a:	d1f3      	bne.n	800d014 <rmw_uxrce_init_guard_condition_memory+0x20>
 800d02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop

0800d034 <rmw_uxrce_fini_session_memory>:
 800d034:	4601      	mov	r1, r0
 800d036:	4801      	ldr	r0, [pc, #4]	@ (800d03c <rmw_uxrce_fini_session_memory+0x8>)
 800d038:	f006 bc4a 	b.w	80138d0 <put_memory>
 800d03c:	2000dc1c 	.word	0x2000dc1c

0800d040 <rmw_uxrce_fini_node_memory>:
 800d040:	b538      	push	{r3, r4, r5, lr}
 800d042:	4604      	mov	r4, r0
 800d044:	6800      	ldr	r0, [r0, #0]
 800d046:	b128      	cbz	r0, 800d054 <rmw_uxrce_fini_node_memory+0x14>
 800d048:	4b07      	ldr	r3, [pc, #28]	@ (800d068 <rmw_uxrce_fini_node_memory+0x28>)
 800d04a:	6819      	ldr	r1, [r3, #0]
 800d04c:	f7f3 f8c8 	bl	80001e0 <strcmp>
 800d050:	b940      	cbnz	r0, 800d064 <rmw_uxrce_fini_node_memory+0x24>
 800d052:	6020      	str	r0, [r4, #0]
 800d054:	6861      	ldr	r1, [r4, #4]
 800d056:	b129      	cbz	r1, 800d064 <rmw_uxrce_fini_node_memory+0x24>
 800d058:	2500      	movs	r5, #0
 800d05a:	4804      	ldr	r0, [pc, #16]	@ (800d06c <rmw_uxrce_fini_node_memory+0x2c>)
 800d05c:	610d      	str	r5, [r1, #16]
 800d05e:	f006 fc37 	bl	80138d0 <put_memory>
 800d062:	6065      	str	r5, [r4, #4]
 800d064:	bd38      	pop	{r3, r4, r5, pc}
 800d066:	bf00      	nop
 800d068:	080191ac 	.word	0x080191ac
 800d06c:	2000dbec 	.word	0x2000dbec

0800d070 <rmw_uxrce_fini_publisher_memory>:
 800d070:	b510      	push	{r4, lr}
 800d072:	4604      	mov	r4, r0
 800d074:	6800      	ldr	r0, [r0, #0]
 800d076:	b128      	cbz	r0, 800d084 <rmw_uxrce_fini_publisher_memory+0x14>
 800d078:	4b06      	ldr	r3, [pc, #24]	@ (800d094 <rmw_uxrce_fini_publisher_memory+0x24>)
 800d07a:	6819      	ldr	r1, [r3, #0]
 800d07c:	f7f3 f8b0 	bl	80001e0 <strcmp>
 800d080:	b938      	cbnz	r0, 800d092 <rmw_uxrce_fini_publisher_memory+0x22>
 800d082:	6020      	str	r0, [r4, #0]
 800d084:	6861      	ldr	r1, [r4, #4]
 800d086:	b121      	cbz	r1, 800d092 <rmw_uxrce_fini_publisher_memory+0x22>
 800d088:	4803      	ldr	r0, [pc, #12]	@ (800d098 <rmw_uxrce_fini_publisher_memory+0x28>)
 800d08a:	f006 fc21 	bl	80138d0 <put_memory>
 800d08e:	2300      	movs	r3, #0
 800d090:	6063      	str	r3, [r4, #4]
 800d092:	bd10      	pop	{r4, pc}
 800d094:	080191ac 	.word	0x080191ac
 800d098:	2000dbfc 	.word	0x2000dbfc

0800d09c <rmw_uxrce_fini_subscription_memory>:
 800d09c:	b510      	push	{r4, lr}
 800d09e:	4604      	mov	r4, r0
 800d0a0:	6800      	ldr	r0, [r0, #0]
 800d0a2:	b128      	cbz	r0, 800d0b0 <rmw_uxrce_fini_subscription_memory+0x14>
 800d0a4:	4b06      	ldr	r3, [pc, #24]	@ (800d0c0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800d0a6:	6819      	ldr	r1, [r3, #0]
 800d0a8:	f7f3 f89a 	bl	80001e0 <strcmp>
 800d0ac:	b938      	cbnz	r0, 800d0be <rmw_uxrce_fini_subscription_memory+0x22>
 800d0ae:	6020      	str	r0, [r4, #0]
 800d0b0:	6861      	ldr	r1, [r4, #4]
 800d0b2:	b121      	cbz	r1, 800d0be <rmw_uxrce_fini_subscription_memory+0x22>
 800d0b4:	4803      	ldr	r0, [pc, #12]	@ (800d0c4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800d0b6:	f006 fc0b 	bl	80138d0 <put_memory>
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	6063      	str	r3, [r4, #4]
 800d0be:	bd10      	pop	{r4, pc}
 800d0c0:	080191ac 	.word	0x080191ac
 800d0c4:	2000dc3c 	.word	0x2000dc3c

0800d0c8 <rmw_uxrce_fini_service_memory>:
 800d0c8:	b510      	push	{r4, lr}
 800d0ca:	4604      	mov	r4, r0
 800d0cc:	6800      	ldr	r0, [r0, #0]
 800d0ce:	b128      	cbz	r0, 800d0dc <rmw_uxrce_fini_service_memory+0x14>
 800d0d0:	4b06      	ldr	r3, [pc, #24]	@ (800d0ec <rmw_uxrce_fini_service_memory+0x24>)
 800d0d2:	6819      	ldr	r1, [r3, #0]
 800d0d4:	f7f3 f884 	bl	80001e0 <strcmp>
 800d0d8:	b938      	cbnz	r0, 800d0ea <rmw_uxrce_fini_service_memory+0x22>
 800d0da:	6020      	str	r0, [r4, #0]
 800d0dc:	6861      	ldr	r1, [r4, #4]
 800d0de:	b121      	cbz	r1, 800d0ea <rmw_uxrce_fini_service_memory+0x22>
 800d0e0:	4803      	ldr	r0, [pc, #12]	@ (800d0f0 <rmw_uxrce_fini_service_memory+0x28>)
 800d0e2:	f006 fbf5 	bl	80138d0 <put_memory>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	6063      	str	r3, [r4, #4]
 800d0ea:	bd10      	pop	{r4, pc}
 800d0ec:	080191ac 	.word	0x080191ac
 800d0f0:	2000dc0c 	.word	0x2000dc0c

0800d0f4 <rmw_uxrce_fini_client_memory>:
 800d0f4:	b510      	push	{r4, lr}
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	6800      	ldr	r0, [r0, #0]
 800d0fa:	b128      	cbz	r0, 800d108 <rmw_uxrce_fini_client_memory+0x14>
 800d0fc:	4b06      	ldr	r3, [pc, #24]	@ (800d118 <rmw_uxrce_fini_client_memory+0x24>)
 800d0fe:	6819      	ldr	r1, [r3, #0]
 800d100:	f7f3 f86e 	bl	80001e0 <strcmp>
 800d104:	b938      	cbnz	r0, 800d116 <rmw_uxrce_fini_client_memory+0x22>
 800d106:	6020      	str	r0, [r4, #0]
 800d108:	6861      	ldr	r1, [r4, #4]
 800d10a:	b121      	cbz	r1, 800d116 <rmw_uxrce_fini_client_memory+0x22>
 800d10c:	4803      	ldr	r0, [pc, #12]	@ (800d11c <rmw_uxrce_fini_client_memory+0x28>)
 800d10e:	f006 fbdf 	bl	80138d0 <put_memory>
 800d112:	2300      	movs	r3, #0
 800d114:	6063      	str	r3, [r4, #4]
 800d116:	bd10      	pop	{r4, pc}
 800d118:	080191ac 	.word	0x080191ac
 800d11c:	20009320 	.word	0x20009320

0800d120 <rmw_uxrce_fini_topic_memory>:
 800d120:	b510      	push	{r4, lr}
 800d122:	4604      	mov	r4, r0
 800d124:	4621      	mov	r1, r4
 800d126:	4803      	ldr	r0, [pc, #12]	@ (800d134 <rmw_uxrce_fini_topic_memory+0x14>)
 800d128:	f006 fbd2 	bl	80138d0 <put_memory>
 800d12c:	2300      	movs	r3, #0
 800d12e:	61a3      	str	r3, [r4, #24]
 800d130:	bd10      	pop	{r4, pc}
 800d132:	bf00      	nop
 800d134:	2000dc4c 	.word	0x2000dc4c

0800d138 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800d138:	b082      	sub	sp, #8
 800d13a:	b530      	push	{r4, r5, lr}
 800d13c:	4925      	ldr	r1, [pc, #148]	@ (800d1d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d13e:	680d      	ldr	r5, [r1, #0]
 800d140:	ac03      	add	r4, sp, #12
 800d142:	e884 000c 	stmia.w	r4, {r2, r3}
 800d146:	461c      	mov	r4, r3
 800d148:	2d00      	cmp	r5, #0
 800d14a:	d041      	beq.n	800d1d0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800d14c:	462b      	mov	r3, r5
 800d14e:	2100      	movs	r1, #0
 800d150:	689a      	ldr	r2, [r3, #8]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800d158:	4290      	cmp	r0, r2
 800d15a:	bf08      	it	eq
 800d15c:	3101      	addeq	r1, #1
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d1f6      	bne.n	800d150 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800d162:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d166:	2b02      	cmp	r3, #2
 800d168:	d029      	beq.n	800d1be <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d16a:	d907      	bls.n	800d17c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d16c:	2b03      	cmp	r3, #3
 800d16e:	d005      	beq.n	800d17c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d170:	2100      	movs	r1, #0
 800d172:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d176:	4608      	mov	r0, r1
 800d178:	b002      	add	sp, #8
 800d17a:	4770      	bx	lr
 800d17c:	b314      	cbz	r4, 800d1c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d17e:	428c      	cmp	r4, r1
 800d180:	d820      	bhi.n	800d1c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d182:	2d00      	cmp	r5, #0
 800d184:	d0f4      	beq.n	800d170 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d186:	2100      	movs	r1, #0
 800d188:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800d18c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800d190:	e002      	b.n	800d198 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800d192:	686d      	ldr	r5, [r5, #4]
 800d194:	2d00      	cmp	r5, #0
 800d196:	d0ec      	beq.n	800d172 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800d198:	68ab      	ldr	r3, [r5, #8]
 800d19a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800d19e:	4290      	cmp	r0, r2
 800d1a0:	d1f7      	bne.n	800d192 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d1a2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800d1a6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800d1aa:	4562      	cmp	r2, ip
 800d1ac:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800d1b0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800d1b4:	daed      	bge.n	800d192 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d1b6:	4694      	mov	ip, r2
 800d1b8:	461c      	mov	r4, r3
 800d1ba:	4629      	mov	r1, r5
 800d1bc:	e7e9      	b.n	800d192 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d1be:	b10c      	cbz	r4, 800d1c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d1c0:	428c      	cmp	r4, r1
 800d1c2:	d9d5      	bls.n	800d170 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d1c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1c8:	4802      	ldr	r0, [pc, #8]	@ (800d1d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d1ca:	b002      	add	sp, #8
 800d1cc:	f006 bb70 	b.w	80138b0 <get_memory>
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	e7c6      	b.n	800d162 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800d1d4:	2000dc2c 	.word	0x2000dc2c

0800d1d8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800d1d8:	4b11      	ldr	r3, [pc, #68]	@ (800d220 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	b530      	push	{r4, r5, lr}
 800d1de:	b1e3      	cbz	r3, 800d21a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800d1e0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800d1e4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800d1e8:	2400      	movs	r4, #0
 800d1ea:	e001      	b.n	800d1f0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	b193      	cbz	r3, 800d216 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800d1f0:	689a      	ldr	r2, [r3, #8]
 800d1f2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800d1f6:	4288      	cmp	r0, r1
 800d1f8:	d1f8      	bne.n	800d1ec <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d1fa:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800d1fe:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800d202:	4571      	cmp	r1, lr
 800d204:	eb72 050c 	sbcs.w	r5, r2, ip
 800d208:	daf0      	bge.n	800d1ec <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d20a:	461c      	mov	r4, r3
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	468e      	mov	lr, r1
 800d210:	4694      	mov	ip, r2
 800d212:	2b00      	cmp	r3, #0
 800d214:	d1ec      	bne.n	800d1f0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d216:	4620      	mov	r0, r4
 800d218:	bd30      	pop	{r4, r5, pc}
 800d21a:	461c      	mov	r4, r3
 800d21c:	4620      	mov	r0, r4
 800d21e:	bd30      	pop	{r4, r5, pc}
 800d220:	2000dc2c 	.word	0x2000dc2c
 800d224:	00000000 	.word	0x00000000

0800d228 <rmw_uxrce_clean_expired_static_input_buffer>:
 800d228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d22c:	4b3c      	ldr	r3, [pc, #240]	@ (800d320 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d22e:	ed2d 8b06 	vpush	{d8-d10}
 800d232:	681f      	ldr	r7, [r3, #0]
 800d234:	b08d      	sub	sp, #52	@ 0x34
 800d236:	f007 fc79 	bl	8014b2c <rmw_uros_epoch_nanos>
 800d23a:	2f00      	cmp	r7, #0
 800d23c:	d05d      	beq.n	800d2fa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d23e:	46b8      	mov	r8, r7
 800d240:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800d308 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800d244:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d248:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d24c:	2b04      	cmp	r3, #4
 800d24e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800d310 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800d252:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800d318 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800d256:	4681      	mov	r9, r0
 800d258:	468a      	mov	sl, r1
 800d25a:	ac04      	add	r4, sp, #16
 800d25c:	d03f      	beq.n	800d2de <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d25e:	2b05      	cmp	r3, #5
 800d260:	d044      	beq.n	800d2ec <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800d262:	2b03      	cmp	r3, #3
 800d264:	d03b      	beq.n	800d2de <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d266:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d26a:	ed8d ab06 	vstr	d10, [sp, #24]
 800d26e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800d272:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800d276:	ab08      	add	r3, sp, #32
 800d278:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d27a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d27e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d282:	f006 f949 	bl	8013518 <rmw_time_equal>
 800d286:	b118      	cbz	r0, 800d290 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800d288:	ed8d 9b04 	vstr	d9, [sp, #16]
 800d28c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d290:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d294:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800d298:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800d29c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800d2a0:	f006 f98e 	bl	80135c0 <rmw_time_total_nsec>
 800d2a4:	1830      	adds	r0, r6, r0
 800d2a6:	eb47 0101 	adc.w	r1, r7, r1
 800d2aa:	4548      	cmp	r0, r9
 800d2ac:	eb71 030a 	sbcs.w	r3, r1, sl
 800d2b0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800d2b4:	db05      	blt.n	800d2c2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800d2b6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800d2ba:	4591      	cmp	r9, r2
 800d2bc:	eb7a 0303 	sbcs.w	r3, sl, r3
 800d2c0:	da03      	bge.n	800d2ca <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800d2c2:	4817      	ldr	r0, [pc, #92]	@ (800d320 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d2c4:	4641      	mov	r1, r8
 800d2c6:	f006 fb03 	bl	80138d0 <put_memory>
 800d2ca:	f1bb 0f00 	cmp.w	fp, #0
 800d2ce:	d014      	beq.n	800d2fa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d2d0:	46d8      	mov	r8, fp
 800d2d2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d2d6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d2da:	2b04      	cmp	r3, #4
 800d2dc:	d1bf      	bne.n	800d25e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800d2de:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d2e2:	3340      	adds	r3, #64	@ 0x40
 800d2e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d2ea:	e7c0      	b.n	800d26e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d2ec:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d2f0:	3348      	adds	r3, #72	@ 0x48
 800d2f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d2f8:	e7b9      	b.n	800d26e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d2fa:	b00d      	add	sp, #52	@ 0x34
 800d2fc:	ecbd 8b06 	vpop	{d8-d10}
 800d300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d304:	f3af 8000 	nop.w
	...
 800d310:	00000001 	.word	0x00000001
 800d314:	00000000 	.word	0x00000000
 800d318:	0000001e 	.word	0x0000001e
 800d31c:	00000000 	.word	0x00000000
 800d320:	2000dc2c 	.word	0x2000dc2c

0800d324 <run_xrce_session>:
 800d324:	b510      	push	{r4, lr}
 800d326:	788c      	ldrb	r4, [r1, #2]
 800d328:	b086      	sub	sp, #24
 800d32a:	2c01      	cmp	r4, #1
 800d32c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800d330:	d00c      	beq.n	800d34c <run_xrce_session+0x28>
 800d332:	4619      	mov	r1, r3
 800d334:	2301      	movs	r3, #1
 800d336:	9300      	str	r3, [sp, #0]
 800d338:	f10d 020e 	add.w	r2, sp, #14
 800d33c:	f10d 0317 	add.w	r3, sp, #23
 800d340:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d344:	f001 f87a 	bl	800e43c <uxr_run_session_until_all_status>
 800d348:	b006      	add	sp, #24
 800d34a:	bd10      	pop	{r4, pc}
 800d34c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d350:	f000 fc8e 	bl	800dc70 <uxr_flash_output_streams>
 800d354:	4620      	mov	r0, r4
 800d356:	b006      	add	sp, #24
 800d358:	bd10      	pop	{r4, pc}
 800d35a:	bf00      	nop

0800d35c <convert_qos_profile>:
 800d35c:	7a4a      	ldrb	r2, [r1, #9]
 800d35e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800d362:	2a02      	cmp	r2, #2
 800d364:	bf18      	it	ne
 800d366:	2200      	movne	r2, #0
 800d368:	7002      	strb	r2, [r0, #0]
 800d36a:	780a      	ldrb	r2, [r1, #0]
 800d36c:	8889      	ldrh	r1, [r1, #4]
 800d36e:	8081      	strh	r1, [r0, #4]
 800d370:	f1ac 0c02 	sub.w	ip, ip, #2
 800d374:	f1a2 0202 	sub.w	r2, r2, #2
 800d378:	fabc fc8c 	clz	ip, ip
 800d37c:	fab2 f282 	clz	r2, r2
 800d380:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800d384:	0952      	lsrs	r2, r2, #5
 800d386:	f880 c001 	strb.w	ip, [r0, #1]
 800d38a:	7082      	strb	r2, [r0, #2]
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop

0800d390 <generate_type_name>:
 800d390:	b530      	push	{r4, r5, lr}
 800d392:	2300      	movs	r3, #0
 800d394:	700b      	strb	r3, [r1, #0]
 800d396:	6803      	ldr	r3, [r0, #0]
 800d398:	b087      	sub	sp, #28
 800d39a:	4614      	mov	r4, r2
 800d39c:	b1d3      	cbz	r3, 800d3d4 <generate_type_name+0x44>
 800d39e:	4a0f      	ldr	r2, [pc, #60]	@ (800d3dc <generate_type_name+0x4c>)
 800d3a0:	4615      	mov	r5, r2
 800d3a2:	9203      	str	r2, [sp, #12]
 800d3a4:	9500      	str	r5, [sp, #0]
 800d3a6:	6842      	ldr	r2, [r0, #4]
 800d3a8:	480d      	ldr	r0, [pc, #52]	@ (800d3e0 <generate_type_name+0x50>)
 800d3aa:	9001      	str	r0, [sp, #4]
 800d3ac:	4608      	mov	r0, r1
 800d3ae:	490d      	ldr	r1, [pc, #52]	@ (800d3e4 <generate_type_name+0x54>)
 800d3b0:	9204      	str	r2, [sp, #16]
 800d3b2:	9105      	str	r1, [sp, #20]
 800d3b4:	9102      	str	r1, [sp, #8]
 800d3b6:	4a0c      	ldr	r2, [pc, #48]	@ (800d3e8 <generate_type_name+0x58>)
 800d3b8:	4621      	mov	r1, r4
 800d3ba:	f00a f8b7 	bl	801752c <sniprintf>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	db05      	blt.n	800d3ce <generate_type_name+0x3e>
 800d3c2:	4284      	cmp	r4, r0
 800d3c4:	bfd4      	ite	le
 800d3c6:	2000      	movle	r0, #0
 800d3c8:	2001      	movgt	r0, #1
 800d3ca:	b007      	add	sp, #28
 800d3cc:	bd30      	pop	{r4, r5, pc}
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	b007      	add	sp, #28
 800d3d2:	bd30      	pop	{r4, r5, pc}
 800d3d4:	4b05      	ldr	r3, [pc, #20]	@ (800d3ec <generate_type_name+0x5c>)
 800d3d6:	4a01      	ldr	r2, [pc, #4]	@ (800d3dc <generate_type_name+0x4c>)
 800d3d8:	461d      	mov	r5, r3
 800d3da:	e7e2      	b.n	800d3a2 <generate_type_name+0x12>
 800d3dc:	08018a88 	.word	0x08018a88
 800d3e0:	08018aa0 	.word	0x08018aa0
 800d3e4:	08018a9c 	.word	0x08018a9c
 800d3e8:	08018a8c 	.word	0x08018a8c
 800d3ec:	08018f84 	.word	0x08018f84

0800d3f0 <generate_topic_name>:
 800d3f0:	b510      	push	{r4, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	4614      	mov	r4, r2
 800d3f6:	9000      	str	r0, [sp, #0]
 800d3f8:	4b08      	ldr	r3, [pc, #32]	@ (800d41c <generate_topic_name+0x2c>)
 800d3fa:	4a09      	ldr	r2, [pc, #36]	@ (800d420 <generate_topic_name+0x30>)
 800d3fc:	4608      	mov	r0, r1
 800d3fe:	4621      	mov	r1, r4
 800d400:	f00a f894 	bl	801752c <sniprintf>
 800d404:	2800      	cmp	r0, #0
 800d406:	db05      	blt.n	800d414 <generate_topic_name+0x24>
 800d408:	4284      	cmp	r4, r0
 800d40a:	bfd4      	ite	le
 800d40c:	2000      	movle	r0, #0
 800d40e:	2001      	movgt	r0, #1
 800d410:	b002      	add	sp, #8
 800d412:	bd10      	pop	{r4, pc}
 800d414:	2000      	movs	r0, #0
 800d416:	b002      	add	sp, #8
 800d418:	bd10      	pop	{r4, pc}
 800d41a:	bf00      	nop
 800d41c:	08018aac 	.word	0x08018aac
 800d420:	08018aa4 	.word	0x08018aa4

0800d424 <is_uxrce_rmw_identifier_valid>:
 800d424:	b510      	push	{r4, lr}
 800d426:	4604      	mov	r4, r0
 800d428:	b140      	cbz	r0, 800d43c <is_uxrce_rmw_identifier_valid+0x18>
 800d42a:	f006 faa9 	bl	8013980 <rmw_get_implementation_identifier>
 800d42e:	4601      	mov	r1, r0
 800d430:	4620      	mov	r0, r4
 800d432:	f7f2 fed5 	bl	80001e0 <strcmp>
 800d436:	fab0 f080 	clz	r0, r0
 800d43a:	0940      	lsrs	r0, r0, #5
 800d43c:	bd10      	pop	{r4, pc}
 800d43e:	bf00      	nop

0800d440 <get_message_typesupport_handle>:
 800d440:	6883      	ldr	r3, [r0, #8]
 800d442:	4718      	bx	r3

0800d444 <get_message_typesupport_handle_function>:
 800d444:	b510      	push	{r4, lr}
 800d446:	4604      	mov	r4, r0
 800d448:	6800      	ldr	r0, [r0, #0]
 800d44a:	f7f2 fec9 	bl	80001e0 <strcmp>
 800d44e:	2800      	cmp	r0, #0
 800d450:	bf0c      	ite	eq
 800d452:	4620      	moveq	r0, r4
 800d454:	2000      	movne	r0, #0
 800d456:	bd10      	pop	{r4, pc}

0800d458 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800d458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d45c:	6805      	ldr	r5, [r0, #0]
 800d45e:	4604      	mov	r4, r0
 800d460:	4628      	mov	r0, r5
 800d462:	460e      	mov	r6, r1
 800d464:	f7f2 febc 	bl	80001e0 <strcmp>
 800d468:	b1c8      	cbz	r0, 800d49e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800d46a:	4b11      	ldr	r3, [pc, #68]	@ (800d4b0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	429d      	cmp	r5, r3
 800d470:	d112      	bne.n	800d498 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d472:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800d476:	f8d8 4000 	ldr.w	r4, [r8]
 800d47a:	b16c      	cbz	r4, 800d498 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d47c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d480:	2700      	movs	r7, #0
 800d482:	3d04      	subs	r5, #4
 800d484:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800d488:	4631      	mov	r1, r6
 800d48a:	f7f2 fea9 	bl	80001e0 <strcmp>
 800d48e:	00bb      	lsls	r3, r7, #2
 800d490:	b140      	cbz	r0, 800d4a4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800d492:	3701      	adds	r7, #1
 800d494:	42bc      	cmp	r4, r7
 800d496:	d1f5      	bne.n	800d484 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800d498:	2000      	movs	r0, #0
 800d49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d49e:	4620      	mov	r0, r4
 800d4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d4a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ac:	58d3      	ldr	r3, [r2, r3]
 800d4ae:	4718      	bx	r3
 800d4b0:	200001d0 	.word	0x200001d0

0800d4b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800d4b4:	4b04      	ldr	r3, [pc, #16]	@ (800d4c8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	b10a      	cbz	r2, 800d4be <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0xa>
 800d4ba:	4803      	ldr	r0, [pc, #12]	@ (800d4c8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800d4bc:	4770      	bx	lr
 800d4be:	4a03      	ldr	r2, [pc, #12]	@ (800d4cc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x18>)
 800d4c0:	4801      	ldr	r0, [pc, #4]	@ (800d4c8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800d4c2:	6812      	ldr	r2, [r2, #0]
 800d4c4:	601a      	str	r2, [r3, #0]
 800d4c6:	4770      	bx	lr
 800d4c8:	200001e0 	.word	0x200001e0
 800d4cc:	200001d0 	.word	0x200001d0

0800d4d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800d4d0:	4a02      	ldr	r2, [pc, #8]	@ (800d4dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0xc>)
 800d4d2:	4b03      	ldr	r3, [pc, #12]	@ (800d4e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x10>)
 800d4d4:	6812      	ldr	r2, [r2, #0]
 800d4d6:	601a      	str	r2, [r3, #0]
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	200001d0 	.word	0x200001d0
 800d4e0:	200001e0 	.word	0x200001e0

0800d4e4 <std_msgs__msg__Int16__rosidl_typesupport_introspection_c__Int16_init_function>:
 800d4e4:	f007 bb30 	b.w	8014b48 <std_msgs__msg__Int16__init>

0800d4e8 <std_msgs__msg__Int16__rosidl_typesupport_introspection_c__Int16_fini_function>:
 800d4e8:	f007 bb32 	b.w	8014b50 <std_msgs__msg__Int16__fini>

0800d4ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800d4ec:	4b04      	ldr	r3, [pc, #16]	@ (800d500 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	b10a      	cbz	r2, 800d4f6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0xa>
 800d4f2:	4803      	ldr	r0, [pc, #12]	@ (800d500 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800d4f4:	4770      	bx	lr
 800d4f6:	4a03      	ldr	r2, [pc, #12]	@ (800d504 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x18>)
 800d4f8:	4801      	ldr	r0, [pc, #4]	@ (800d500 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800d4fa:	6812      	ldr	r2, [r2, #0]
 800d4fc:	601a      	str	r2, [r3, #0]
 800d4fe:	4770      	bx	lr
 800d500:	20000228 	.word	0x20000228
 800d504:	200001d4 	.word	0x200001d4

0800d508 <_Int16__max_serialized_size>:
 800d508:	b508      	push	{r3, lr}
 800d50a:	2102      	movs	r1, #2
 800d50c:	2000      	movs	r0, #0
 800d50e:	f7fe f91b 	bl	800b748 <ucdr_alignment>
 800d512:	3002      	adds	r0, #2
 800d514:	bd08      	pop	{r3, pc}
 800d516:	bf00      	nop

0800d518 <_Int16__cdr_deserialize>:
 800d518:	b109      	cbz	r1, 800d51e <_Int16__cdr_deserialize+0x6>
 800d51a:	f7fd bd8b 	b.w	800b034 <ucdr_deserialize_int16_t>
 800d51e:	4608      	mov	r0, r1
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop

0800d524 <get_serialized_size_std_msgs__msg__Int16>:
 800d524:	b138      	cbz	r0, 800d536 <get_serialized_size_std_msgs__msg__Int16+0x12>
 800d526:	b508      	push	{r3, lr}
 800d528:	460b      	mov	r3, r1
 800d52a:	4618      	mov	r0, r3
 800d52c:	2102      	movs	r1, #2
 800d52e:	f7fe f90b 	bl	800b748 <ucdr_alignment>
 800d532:	3002      	adds	r0, #2
 800d534:	bd08      	pop	{r3, pc}
 800d536:	4770      	bx	lr

0800d538 <_Int16__cdr_serialize>:
 800d538:	460a      	mov	r2, r1
 800d53a:	b120      	cbz	r0, 800d546 <_Int16__cdr_serialize+0xe>
 800d53c:	f9b0 1000 	ldrsh.w	r1, [r0]
 800d540:	4610      	mov	r0, r2
 800d542:	f7fd bcf7 	b.w	800af34 <ucdr_serialize_int16_t>
 800d546:	4770      	bx	lr

0800d548 <_Int16__get_serialized_size>:
 800d548:	b130      	cbz	r0, 800d558 <_Int16__get_serialized_size+0x10>
 800d54a:	b508      	push	{r3, lr}
 800d54c:	2102      	movs	r1, #2
 800d54e:	2000      	movs	r0, #0
 800d550:	f7fe f8fa 	bl	800b748 <ucdr_alignment>
 800d554:	3002      	adds	r0, #2
 800d556:	bd08      	pop	{r3, pc}
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop

0800d55c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800d55c:	4800      	ldr	r0, [pc, #0]	@ (800d560 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int16+0x4>)
 800d55e:	4770      	bx	lr
 800d560:	20000234 	.word	0x20000234

0800d564 <geometry_msgs__msg__Twist__init>:
 800d564:	b570      	push	{r4, r5, r6, lr}
 800d566:	4605      	mov	r5, r0
 800d568:	b1a8      	cbz	r0, 800d596 <geometry_msgs__msg__Twist__init+0x32>
 800d56a:	f000 f82b 	bl	800d5c4 <geometry_msgs__msg__Vector3__init>
 800d56e:	4604      	mov	r4, r0
 800d570:	b140      	cbz	r0, 800d584 <geometry_msgs__msg__Twist__init+0x20>
 800d572:	f105 0618 	add.w	r6, r5, #24
 800d576:	4630      	mov	r0, r6
 800d578:	f000 f824 	bl	800d5c4 <geometry_msgs__msg__Vector3__init>
 800d57c:	4604      	mov	r4, r0
 800d57e:	b168      	cbz	r0, 800d59c <geometry_msgs__msg__Twist__init+0x38>
 800d580:	4620      	mov	r0, r4
 800d582:	bd70      	pop	{r4, r5, r6, pc}
 800d584:	4628      	mov	r0, r5
 800d586:	f000 f821 	bl	800d5cc <geometry_msgs__msg__Vector3__fini>
 800d58a:	f105 0018 	add.w	r0, r5, #24
 800d58e:	f000 f81d 	bl	800d5cc <geometry_msgs__msg__Vector3__fini>
 800d592:	4620      	mov	r0, r4
 800d594:	bd70      	pop	{r4, r5, r6, pc}
 800d596:	4604      	mov	r4, r0
 800d598:	4620      	mov	r0, r4
 800d59a:	bd70      	pop	{r4, r5, r6, pc}
 800d59c:	4628      	mov	r0, r5
 800d59e:	f000 f815 	bl	800d5cc <geometry_msgs__msg__Vector3__fini>
 800d5a2:	4630      	mov	r0, r6
 800d5a4:	f000 f812 	bl	800d5cc <geometry_msgs__msg__Vector3__fini>
 800d5a8:	e7ea      	b.n	800d580 <geometry_msgs__msg__Twist__init+0x1c>
 800d5aa:	bf00      	nop

0800d5ac <geometry_msgs__msg__Twist__fini>:
 800d5ac:	b148      	cbz	r0, 800d5c2 <geometry_msgs__msg__Twist__fini+0x16>
 800d5ae:	b510      	push	{r4, lr}
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	f000 f80b 	bl	800d5cc <geometry_msgs__msg__Vector3__fini>
 800d5b6:	f104 0018 	add.w	r0, r4, #24
 800d5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5be:	f000 b805 	b.w	800d5cc <geometry_msgs__msg__Vector3__fini>
 800d5c2:	4770      	bx	lr

0800d5c4 <geometry_msgs__msg__Vector3__init>:
 800d5c4:	3800      	subs	r0, #0
 800d5c6:	bf18      	it	ne
 800d5c8:	2001      	movne	r0, #1
 800d5ca:	4770      	bx	lr

0800d5cc <geometry_msgs__msg__Vector3__fini>:
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop

0800d5d0 <uxr_buffer_delete_entity>:
 800d5d0:	b510      	push	{r4, lr}
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	b08e      	sub	sp, #56	@ 0x38
 800d5d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d5da:	2303      	movs	r3, #3
 800d5dc:	9300      	str	r3, [sp, #0]
 800d5de:	2204      	movs	r2, #4
 800d5e0:	ab06      	add	r3, sp, #24
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	9103      	str	r1, [sp, #12]
 800d5e6:	f001 f951 	bl	800e88c <uxr_prepare_stream_to_write_submessage>
 800d5ea:	b918      	cbnz	r0, 800d5f4 <uxr_buffer_delete_entity+0x24>
 800d5ec:	4604      	mov	r4, r0
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	b00e      	add	sp, #56	@ 0x38
 800d5f2:	bd10      	pop	{r4, pc}
 800d5f4:	9902      	ldr	r1, [sp, #8]
 800d5f6:	aa05      	add	r2, sp, #20
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f001 fa7d 	bl	800eaf8 <uxr_init_base_object_request>
 800d5fe:	a905      	add	r1, sp, #20
 800d600:	4604      	mov	r4, r0
 800d602:	a806      	add	r0, sp, #24
 800d604:	f002 fcce 	bl	800ffa4 <uxr_serialize_DELETE_Payload>
 800d608:	4620      	mov	r0, r4
 800d60a:	b00e      	add	sp, #56	@ 0x38
 800d60c:	bd10      	pop	{r4, pc}
 800d60e:	bf00      	nop

0800d610 <uxr_common_create_entity>:
 800d610:	b510      	push	{r4, lr}
 800d612:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d616:	b08c      	sub	sp, #48	@ 0x30
 800d618:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d61c:	f1bc 0f01 	cmp.w	ip, #1
 800d620:	bf0c      	ite	eq
 800d622:	f003 0201 	andeq.w	r2, r3, #1
 800d626:	2200      	movne	r2, #0
 800d628:	330e      	adds	r3, #14
 800d62a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800d62e:	9101      	str	r1, [sp, #4]
 800d630:	441a      	add	r2, r3
 800d632:	2301      	movs	r3, #1
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	9903      	ldr	r1, [sp, #12]
 800d638:	ab04      	add	r3, sp, #16
 800d63a:	b292      	uxth	r2, r2
 800d63c:	4604      	mov	r4, r0
 800d63e:	f001 f925 	bl	800e88c <uxr_prepare_stream_to_write_submessage>
 800d642:	b918      	cbnz	r0, 800d64c <uxr_common_create_entity+0x3c>
 800d644:	4604      	mov	r4, r0
 800d646:	4620      	mov	r0, r4
 800d648:	b00c      	add	sp, #48	@ 0x30
 800d64a:	bd10      	pop	{r4, pc}
 800d64c:	9902      	ldr	r1, [sp, #8]
 800d64e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d650:	4620      	mov	r0, r4
 800d652:	f001 fa51 	bl	800eaf8 <uxr_init_base_object_request>
 800d656:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d658:	4604      	mov	r4, r0
 800d65a:	a804      	add	r0, sp, #16
 800d65c:	f002 fbfe 	bl	800fe5c <uxr_serialize_CREATE_Payload>
 800d660:	4620      	mov	r0, r4
 800d662:	b00c      	add	sp, #48	@ 0x30
 800d664:	bd10      	pop	{r4, pc}
 800d666:	bf00      	nop

0800d668 <uxr_buffer_create_participant_bin>:
 800d668:	b570      	push	{r4, r5, r6, lr}
 800d66a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800d66e:	ac11      	add	r4, sp, #68	@ 0x44
 800d670:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800d674:	2303      	movs	r3, #3
 800d676:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d67a:	7223      	strb	r3, [r4, #8]
 800d67c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800d67e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800d682:	2201      	movs	r2, #1
 800d684:	2100      	movs	r1, #0
 800d686:	4605      	mov	r5, r0
 800d688:	7122      	strb	r2, [r4, #4]
 800d68a:	f88d 1014 	strb.w	r1, [sp, #20]
 800d68e:	b1cb      	cbz	r3, 800d6c4 <uxr_buffer_create_participant_bin+0x5c>
 800d690:	f88d 201c 	strb.w	r2, [sp, #28]
 800d694:	9308      	str	r3, [sp, #32]
 800d696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d69a:	a915      	add	r1, sp, #84	@ 0x54
 800d69c:	a809      	add	r0, sp, #36	@ 0x24
 800d69e:	f7fe f84f 	bl	800b740 <ucdr_init_buffer>
 800d6a2:	a905      	add	r1, sp, #20
 800d6a4:	a809      	add	r0, sp, #36	@ 0x24
 800d6a6:	f001 ffbb 	bl	800f620 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d6aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d6ac:	9600      	str	r6, [sp, #0]
 800d6ae:	9401      	str	r4, [sp, #4]
 800d6b0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d6b4:	60e3      	str	r3, [r4, #12]
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	f7ff ffa9 	bl	800d610 <uxr_common_create_entity>
 800d6be:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800d6c2:	bd70      	pop	{r4, r5, r6, pc}
 800d6c4:	f88d 301c 	strb.w	r3, [sp, #28]
 800d6c8:	e7e5      	b.n	800d696 <uxr_buffer_create_participant_bin+0x2e>
 800d6ca:	bf00      	nop

0800d6cc <uxr_buffer_create_topic_bin>:
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800d6d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d6d6:	9105      	str	r1, [sp, #20]
 800d6d8:	4605      	mov	r5, r0
 800d6da:	a997      	add	r1, sp, #604	@ 0x25c
 800d6dc:	4618      	mov	r0, r3
 800d6de:	2302      	movs	r3, #2
 800d6e0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800d6e4:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800d6e8:	f000 f996 	bl	800da18 <uxr_object_id_to_raw>
 800d6ec:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800d6ee:	9306      	str	r3, [sp, #24]
 800d6f0:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800d6f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d700:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800d704:	a917      	add	r1, sp, #92	@ 0x5c
 800d706:	2300      	movs	r3, #0
 800d708:	a80b      	add	r0, sp, #44	@ 0x2c
 800d70a:	f88d 301c 	strb.w	r3, [sp, #28]
 800d70e:	f7fe f817 	bl	800b740 <ucdr_init_buffer>
 800d712:	a906      	add	r1, sp, #24
 800d714:	a80b      	add	r0, sp, #44	@ 0x2c
 800d716:	f001 ffa5 	bl	800f664 <uxr_serialize_OBJK_Topic_Binary>
 800d71a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d71c:	9316      	str	r3, [sp, #88]	@ 0x58
 800d71e:	ac13      	add	r4, sp, #76	@ 0x4c
 800d720:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d724:	9600      	str	r6, [sp, #0]
 800d726:	9401      	str	r4, [sp, #4]
 800d728:	b29b      	uxth	r3, r3
 800d72a:	4628      	mov	r0, r5
 800d72c:	f7ff ff70 	bl	800d610 <uxr_common_create_entity>
 800d730:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800d734:	bd70      	pop	{r4, r5, r6, pc}
 800d736:	bf00      	nop

0800d738 <uxr_buffer_create_publisher_bin>:
 800d738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d73a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800d73e:	4605      	mov	r5, r0
 800d740:	9105      	str	r1, [sp, #20]
 800d742:	4618      	mov	r0, r3
 800d744:	2603      	movs	r6, #3
 800d746:	a992      	add	r1, sp, #584	@ 0x248
 800d748:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d74c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800d750:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800d754:	f000 f960 	bl	800da18 <uxr_object_id_to_raw>
 800d758:	2300      	movs	r3, #0
 800d75a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d75e:	a912      	add	r1, sp, #72	@ 0x48
 800d760:	a806      	add	r0, sp, #24
 800d762:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d766:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d76a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800d76e:	f7fd ffe7 	bl	800b740 <ucdr_init_buffer>
 800d772:	a993      	add	r1, sp, #588	@ 0x24c
 800d774:	a806      	add	r0, sp, #24
 800d776:	f002 f829 	bl	800f7cc <uxr_serialize_OBJK_Publisher_Binary>
 800d77a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d77c:	9311      	str	r3, [sp, #68]	@ 0x44
 800d77e:	ac0e      	add	r4, sp, #56	@ 0x38
 800d780:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d784:	9700      	str	r7, [sp, #0]
 800d786:	9401      	str	r4, [sp, #4]
 800d788:	b29b      	uxth	r3, r3
 800d78a:	4628      	mov	r0, r5
 800d78c:	f7ff ff40 	bl	800d610 <uxr_common_create_entity>
 800d790:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800d794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d796:	bf00      	nop

0800d798 <uxr_buffer_create_subscriber_bin>:
 800d798:	b570      	push	{r4, r5, r6, lr}
 800d79a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800d79e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d7a2:	9105      	str	r1, [sp, #20]
 800d7a4:	4605      	mov	r5, r0
 800d7a6:	a992      	add	r1, sp, #584	@ 0x248
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	2304      	movs	r3, #4
 800d7ac:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800d7b0:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800d7b4:	f000 f930 	bl	800da18 <uxr_object_id_to_raw>
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d7be:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d7c2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d7c6:	a912      	add	r1, sp, #72	@ 0x48
 800d7c8:	2303      	movs	r3, #3
 800d7ca:	a806      	add	r0, sp, #24
 800d7cc:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800d7d0:	f7fd ffb6 	bl	800b740 <ucdr_init_buffer>
 800d7d4:	a993      	add	r1, sp, #588	@ 0x24c
 800d7d6:	a806      	add	r0, sp, #24
 800d7d8:	f002 f8a8 	bl	800f92c <uxr_serialize_OBJK_Subscriber_Binary>
 800d7dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7de:	9311      	str	r3, [sp, #68]	@ 0x44
 800d7e0:	ac0e      	add	r4, sp, #56	@ 0x38
 800d7e2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d7e6:	9600      	str	r6, [sp, #0]
 800d7e8:	9401      	str	r4, [sp, #4]
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	f7ff ff0f 	bl	800d610 <uxr_common_create_entity>
 800d7f2:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800d7f6:	bd70      	pop	{r4, r5, r6, pc}

0800d7f8 <uxr_buffer_create_datawriter_bin>:
 800d7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7fc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800d800:	ac1d      	add	r4, sp, #116	@ 0x74
 800d802:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d806:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800d80a:	9105      	str	r1, [sp, #20]
 800d80c:	4606      	mov	r6, r0
 800d80e:	a9a1      	add	r1, sp, #644	@ 0x284
 800d810:	4618      	mov	r0, r3
 800d812:	2305      	movs	r3, #5
 800d814:	7123      	strb	r3, [r4, #4]
 800d816:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800d81a:	2703      	movs	r7, #3
 800d81c:	f000 f8fc 	bl	800da18 <uxr_object_id_to_raw>
 800d820:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800d822:	7227      	strb	r7, [r4, #8]
 800d824:	a90e      	add	r1, sp, #56	@ 0x38
 800d826:	f000 f8f7 	bl	800da18 <uxr_object_id_to_raw>
 800d82a:	2300      	movs	r3, #0
 800d82c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800d830:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800d834:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800d838:	3d00      	subs	r5, #0
 800d83a:	bf18      	it	ne
 800d83c:	2501      	movne	r5, #1
 800d83e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800d842:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800d846:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d84a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d84e:	2301      	movs	r3, #1
 800d850:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800d854:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800d858:	bb8a      	cbnz	r2, 800d8be <uxr_buffer_create_datawriter_bin+0xc6>
 800d85a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d85e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800d862:	f04f 0c13 	mov.w	ip, #19
 800d866:	250b      	movs	r5, #11
 800d868:	2221      	movs	r2, #33	@ 0x21
 800d86a:	2111      	movs	r1, #17
 800d86c:	2009      	movs	r0, #9
 800d86e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800d872:	b923      	cbnz	r3, 800d87e <uxr_buffer_create_datawriter_bin+0x86>
 800d874:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800d878:	4672      	mov	r2, lr
 800d87a:	4661      	mov	r1, ip
 800d87c:	4628      	mov	r0, r5
 800d87e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800d882:	2b01      	cmp	r3, #1
 800d884:	d025      	beq.n	800d8d2 <uxr_buffer_create_datawriter_bin+0xda>
 800d886:	2b03      	cmp	r3, #3
 800d888:	d029      	beq.n	800d8de <uxr_buffer_create_datawriter_bin+0xe6>
 800d88a:	b32b      	cbz	r3, 800d8d8 <uxr_buffer_create_datawriter_bin+0xe0>
 800d88c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d890:	a921      	add	r1, sp, #132	@ 0x84
 800d892:	a806      	add	r0, sp, #24
 800d894:	f7fd ff54 	bl	800b740 <ucdr_init_buffer>
 800d898:	a90e      	add	r1, sp, #56	@ 0x38
 800d89a:	a806      	add	r0, sp, #24
 800d89c:	f002 f8f8 	bl	800fa90 <uxr_serialize_OBJK_DataWriter_Binary>
 800d8a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8a2:	f8cd 8000 	str.w	r8, [sp]
 800d8a6:	9401      	str	r4, [sp, #4]
 800d8a8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d8ac:	60e3      	str	r3, [r4, #12]
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	f7ff fead 	bl	800d610 <uxr_common_create_entity>
 800d8b6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800d8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8be:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800d8c2:	f04f 0c12 	mov.w	ip, #18
 800d8c6:	250a      	movs	r5, #10
 800d8c8:	2220      	movs	r2, #32
 800d8ca:	2110      	movs	r1, #16
 800d8cc:	2008      	movs	r0, #8
 800d8ce:	2702      	movs	r7, #2
 800d8d0:	e7cd      	b.n	800d86e <uxr_buffer_create_datawriter_bin+0x76>
 800d8d2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800d8d6:	e7d9      	b.n	800d88c <uxr_buffer_create_datawriter_bin+0x94>
 800d8d8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800d8dc:	e7d6      	b.n	800d88c <uxr_buffer_create_datawriter_bin+0x94>
 800d8de:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d8e2:	e7d3      	b.n	800d88c <uxr_buffer_create_datawriter_bin+0x94>

0800d8e4 <uxr_buffer_create_datareader_bin>:
 800d8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d8ec:	ac1f      	add	r4, sp, #124	@ 0x7c
 800d8ee:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d8f2:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800d8f6:	9105      	str	r1, [sp, #20]
 800d8f8:	4606      	mov	r6, r0
 800d8fa:	a9a3      	add	r1, sp, #652	@ 0x28c
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	2306      	movs	r3, #6
 800d900:	7123      	strb	r3, [r4, #4]
 800d902:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800d906:	2703      	movs	r7, #3
 800d908:	f000 f886 	bl	800da18 <uxr_object_id_to_raw>
 800d90c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800d90e:	7227      	strb	r7, [r4, #8]
 800d910:	a90e      	add	r1, sp, #56	@ 0x38
 800d912:	f000 f881 	bl	800da18 <uxr_object_id_to_raw>
 800d916:	2300      	movs	r3, #0
 800d918:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800d91c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800d920:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800d924:	3d00      	subs	r5, #0
 800d926:	bf18      	it	ne
 800d928:	2501      	movne	r5, #1
 800d92a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800d92e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800d932:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800d936:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d93a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d93e:	2301      	movs	r3, #1
 800d940:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800d944:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800d948:	bb8a      	cbnz	r2, 800d9ae <uxr_buffer_create_datareader_bin+0xca>
 800d94a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d94e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800d952:	f04f 0c13 	mov.w	ip, #19
 800d956:	250b      	movs	r5, #11
 800d958:	2221      	movs	r2, #33	@ 0x21
 800d95a:	2111      	movs	r1, #17
 800d95c:	2009      	movs	r0, #9
 800d95e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800d962:	b923      	cbnz	r3, 800d96e <uxr_buffer_create_datareader_bin+0x8a>
 800d964:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800d968:	4672      	mov	r2, lr
 800d96a:	4661      	mov	r1, ip
 800d96c:	4628      	mov	r0, r5
 800d96e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800d972:	2b01      	cmp	r3, #1
 800d974:	d025      	beq.n	800d9c2 <uxr_buffer_create_datareader_bin+0xde>
 800d976:	2b03      	cmp	r3, #3
 800d978:	d029      	beq.n	800d9ce <uxr_buffer_create_datareader_bin+0xea>
 800d97a:	b32b      	cbz	r3, 800d9c8 <uxr_buffer_create_datareader_bin+0xe4>
 800d97c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d980:	a923      	add	r1, sp, #140	@ 0x8c
 800d982:	a806      	add	r0, sp, #24
 800d984:	f7fd fedc 	bl	800b740 <ucdr_init_buffer>
 800d988:	a90e      	add	r1, sp, #56	@ 0x38
 800d98a:	a806      	add	r0, sp, #24
 800d98c:	f002 f844 	bl	800fa18 <uxr_serialize_OBJK_DataReader_Binary>
 800d990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d992:	f8cd 8000 	str.w	r8, [sp]
 800d996:	9401      	str	r4, [sp, #4]
 800d998:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d99c:	60e3      	str	r3, [r4, #12]
 800d99e:	4630      	mov	r0, r6
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	f7ff fe35 	bl	800d610 <uxr_common_create_entity>
 800d9a6:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ae:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800d9b2:	f04f 0c12 	mov.w	ip, #18
 800d9b6:	250a      	movs	r5, #10
 800d9b8:	2220      	movs	r2, #32
 800d9ba:	2110      	movs	r1, #16
 800d9bc:	2008      	movs	r0, #8
 800d9be:	2702      	movs	r7, #2
 800d9c0:	e7cd      	b.n	800d95e <uxr_buffer_create_datareader_bin+0x7a>
 800d9c2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800d9c6:	e7d9      	b.n	800d97c <uxr_buffer_create_datareader_bin+0x98>
 800d9c8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800d9cc:	e7d6      	b.n	800d97c <uxr_buffer_create_datareader_bin+0x98>
 800d9ce:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d9d2:	e7d3      	b.n	800d97c <uxr_buffer_create_datareader_bin+0x98>

0800d9d4 <uxr_object_id>:
 800d9d4:	b082      	sub	sp, #8
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	f88d 1006 	strb.w	r1, [sp, #6]
 800d9dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d9e0:	f360 030f 	bfi	r3, r0, #0, #16
 800d9e4:	f362 431f 	bfi	r3, r2, #16, #16
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	b002      	add	sp, #8
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop

0800d9f0 <uxr_object_id_from_raw>:
 800d9f0:	7843      	ldrb	r3, [r0, #1]
 800d9f2:	7801      	ldrb	r1, [r0, #0]
 800d9f4:	b082      	sub	sp, #8
 800d9f6:	f003 020f 	and.w	r2, r3, #15
 800d9fa:	f88d 2006 	strb.w	r2, [sp, #6]
 800d9fe:	091b      	lsrs	r3, r3, #4
 800da00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800da04:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800da08:	2000      	movs	r0, #0
 800da0a:	f363 000f 	bfi	r0, r3, #0, #16
 800da0e:	f362 401f 	bfi	r0, r2, #16, #16
 800da12:	b002      	add	sp, #8
 800da14:	4770      	bx	lr
 800da16:	bf00      	nop

0800da18 <uxr_object_id_to_raw>:
 800da18:	4602      	mov	r2, r0
 800da1a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800da1e:	b082      	sub	sp, #8
 800da20:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800da24:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800da28:	f881 c000 	strb.w	ip, [r1]
 800da2c:	7048      	strb	r0, [r1, #1]
 800da2e:	b002      	add	sp, #8
 800da30:	4770      	bx	lr
 800da32:	bf00      	nop

0800da34 <on_get_fragmentation_info>:
 800da34:	b500      	push	{lr}
 800da36:	b08b      	sub	sp, #44	@ 0x2c
 800da38:	4601      	mov	r1, r0
 800da3a:	2204      	movs	r2, #4
 800da3c:	a802      	add	r0, sp, #8
 800da3e:	f7fd fe7f 	bl	800b740 <ucdr_init_buffer>
 800da42:	f10d 0305 	add.w	r3, sp, #5
 800da46:	f10d 0206 	add.w	r2, sp, #6
 800da4a:	a901      	add	r1, sp, #4
 800da4c:	a802      	add	r0, sp, #8
 800da4e:	f001 f9d5 	bl	800edfc <uxr_read_submessage_header>
 800da52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800da56:	2b0d      	cmp	r3, #13
 800da58:	d003      	beq.n	800da62 <on_get_fragmentation_info+0x2e>
 800da5a:	2000      	movs	r0, #0
 800da5c:	b00b      	add	sp, #44	@ 0x2c
 800da5e:	f85d fb04 	ldr.w	pc, [sp], #4
 800da62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800da66:	f013 0f02 	tst.w	r3, #2
 800da6a:	bf14      	ite	ne
 800da6c:	2002      	movne	r0, #2
 800da6e:	2001      	moveq	r0, #1
 800da70:	b00b      	add	sp, #44	@ 0x2c
 800da72:	f85d fb04 	ldr.w	pc, [sp], #4
 800da76:	bf00      	nop

0800da78 <read_submessage_get_info>:
 800da78:	b570      	push	{r4, r5, r6, lr}
 800da7a:	2500      	movs	r5, #0
 800da7c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800da80:	4604      	mov	r4, r0
 800da82:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800da86:	460e      	mov	r6, r1
 800da88:	a810      	add	r0, sp, #64	@ 0x40
 800da8a:	4629      	mov	r1, r5
 800da8c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800da90:	f009 fe26 	bl	80176e0 <memset>
 800da94:	a903      	add	r1, sp, #12
 800da96:	4630      	mov	r0, r6
 800da98:	f002 fa70 	bl	800ff7c <uxr_deserialize_GET_INFO_Payload>
 800da9c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800daa0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800daa4:	4620      	mov	r0, r4
 800daa6:	f001 f81f 	bl	800eae8 <uxr_session_header_offset>
 800daaa:	462b      	mov	r3, r5
 800daac:	9000      	str	r0, [sp, #0]
 800daae:	220c      	movs	r2, #12
 800dab0:	a905      	add	r1, sp, #20
 800dab2:	a808      	add	r0, sp, #32
 800dab4:	f7fd fe32 	bl	800b71c <ucdr_init_buffer_origin_offset>
 800dab8:	a910      	add	r1, sp, #64	@ 0x40
 800daba:	a808      	add	r0, sp, #32
 800dabc:	f002 fad0 	bl	8010060 <uxr_serialize_INFO_Payload>
 800dac0:	9b08      	ldr	r3, [sp, #32]
 800dac2:	462a      	mov	r2, r5
 800dac4:	4629      	mov	r1, r5
 800dac6:	4620      	mov	r0, r4
 800dac8:	f000 ffb8 	bl	800ea3c <uxr_stamp_session_header>
 800dacc:	a808      	add	r0, sp, #32
 800dace:	f7fd fe63 	bl	800b798 <ucdr_buffer_length>
 800dad2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dad4:	4602      	mov	r2, r0
 800dad6:	a905      	add	r1, sp, #20
 800dad8:	e9d3 0400 	ldrd	r0, r4, [r3]
 800dadc:	47a0      	blx	r4
 800dade:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800dae2:	bd70      	pop	{r4, r5, r6, pc}

0800dae4 <write_submessage_acknack.isra.0>:
 800dae4:	b570      	push	{r4, r5, r6, lr}
 800dae6:	b092      	sub	sp, #72	@ 0x48
 800dae8:	4605      	mov	r5, r0
 800daea:	460e      	mov	r6, r1
 800daec:	4614      	mov	r4, r2
 800daee:	f000 fffb 	bl	800eae8 <uxr_session_header_offset>
 800daf2:	a905      	add	r1, sp, #20
 800daf4:	9000      	str	r0, [sp, #0]
 800daf6:	2300      	movs	r3, #0
 800daf8:	a80a      	add	r0, sp, #40	@ 0x28
 800dafa:	2211      	movs	r2, #17
 800dafc:	f7fd fe0e 	bl	800b71c <ucdr_init_buffer_origin_offset>
 800db00:	2218      	movs	r2, #24
 800db02:	fb02 5404 	mla	r4, r2, r4, r5
 800db06:	2300      	movs	r3, #0
 800db08:	2205      	movs	r2, #5
 800db0a:	3450      	adds	r4, #80	@ 0x50
 800db0c:	210a      	movs	r1, #10
 800db0e:	a80a      	add	r0, sp, #40	@ 0x28
 800db10:	f001 f95a 	bl	800edc8 <uxr_buffer_submessage_header>
 800db14:	a903      	add	r1, sp, #12
 800db16:	4620      	mov	r0, r4
 800db18:	f007 fc1c 	bl	8015354 <uxr_compute_acknack>
 800db1c:	ba40      	rev16	r0, r0
 800db1e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800db22:	a903      	add	r1, sp, #12
 800db24:	a80a      	add	r0, sp, #40	@ 0x28
 800db26:	f88d 6010 	strb.w	r6, [sp, #16]
 800db2a:	f002 fb09 	bl	8010140 <uxr_serialize_ACKNACK_Payload>
 800db2e:	2200      	movs	r2, #0
 800db30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db32:	4611      	mov	r1, r2
 800db34:	4628      	mov	r0, r5
 800db36:	f000 ff81 	bl	800ea3c <uxr_stamp_session_header>
 800db3a:	a80a      	add	r0, sp, #40	@ 0x28
 800db3c:	f7fd fe2c 	bl	800b798 <ucdr_buffer_length>
 800db40:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800db42:	4602      	mov	r2, r0
 800db44:	a905      	add	r1, sp, #20
 800db46:	e9d3 0400 	ldrd	r0, r4, [r3]
 800db4a:	47a0      	blx	r4
 800db4c:	b012      	add	sp, #72	@ 0x48
 800db4e:	bd70      	pop	{r4, r5, r6, pc}

0800db50 <uxr_init_session>:
 800db50:	b510      	push	{r4, lr}
 800db52:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800db88 <uxr_init_session+0x38>
 800db56:	2300      	movs	r3, #0
 800db58:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800db5c:	4604      	mov	r4, r0
 800db5e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800db62:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800db66:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800db6a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800db6e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800db72:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800db76:	2181      	movs	r1, #129	@ 0x81
 800db78:	f000 fecc 	bl	800e914 <uxr_init_session_info>
 800db7c:	f104 0008 	add.w	r0, r4, #8
 800db80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db84:	f001 b83c 	b.w	800ec00 <uxr_init_stream_storage>
	...

0800db90 <uxr_set_status_callback>:
 800db90:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop

0800db98 <uxr_set_topic_callback>:
 800db98:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop

0800dba0 <uxr_set_request_callback>:
 800dba0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop

0800dba8 <uxr_set_reply_callback>:
 800dba8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800dbac:	4770      	bx	lr
 800dbae:	bf00      	nop

0800dbb0 <uxr_create_output_best_effort_stream>:
 800dbb0:	b510      	push	{r4, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	e9cd 2100 	strd	r2, r1, [sp]
 800dbb8:	4604      	mov	r4, r0
 800dbba:	f000 ff95 	bl	800eae8 <uxr_session_header_offset>
 800dbbe:	e9dd 2100 	ldrd	r2, r1, [sp]
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	f104 0008 	add.w	r0, r4, #8
 800dbc8:	b004      	add	sp, #16
 800dbca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbce:	f001 b861 	b.w	800ec94 <uxr_add_output_best_effort_buffer>
 800dbd2:	bf00      	nop

0800dbd4 <uxr_create_output_reliable_stream>:
 800dbd4:	b510      	push	{r4, lr}
 800dbd6:	b088      	sub	sp, #32
 800dbd8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800dbdc:	4604      	mov	r4, r0
 800dbde:	9303      	str	r3, [sp, #12]
 800dbe0:	f000 ff82 	bl	800eae8 <uxr_session_header_offset>
 800dbe4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800dbe8:	9000      	str	r0, [sp, #0]
 800dbea:	9905      	ldr	r1, [sp, #20]
 800dbec:	f104 0008 	add.w	r0, r4, #8
 800dbf0:	f001 f864 	bl	800ecbc <uxr_add_output_reliable_buffer>
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	b2c3      	uxtb	r3, r0
 800dbf8:	f363 0207 	bfi	r2, r3, #0, #8
 800dbfc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800dc00:	f363 220f 	bfi	r2, r3, #8, #8
 800dc04:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800dc08:	f363 4217 	bfi	r2, r3, #16, #8
 800dc0c:	0e03      	lsrs	r3, r0, #24
 800dc0e:	f363 621f 	bfi	r2, r3, #24, #8
 800dc12:	4610      	mov	r0, r2
 800dc14:	b008      	add	sp, #32
 800dc16:	bd10      	pop	{r4, pc}

0800dc18 <uxr_create_input_best_effort_stream>:
 800dc18:	b082      	sub	sp, #8
 800dc1a:	3008      	adds	r0, #8
 800dc1c:	b002      	add	sp, #8
 800dc1e:	f001 b867 	b.w	800ecf0 <uxr_add_input_best_effort_buffer>
 800dc22:	bf00      	nop

0800dc24 <uxr_create_input_reliable_stream>:
 800dc24:	b510      	push	{r4, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	4c0b      	ldr	r4, [pc, #44]	@ (800dc58 <uxr_create_input_reliable_stream+0x34>)
 800dc2a:	9400      	str	r4, [sp, #0]
 800dc2c:	3008      	adds	r0, #8
 800dc2e:	f001 f875 	bl	800ed1c <uxr_add_input_reliable_buffer>
 800dc32:	2200      	movs	r2, #0
 800dc34:	b2c3      	uxtb	r3, r0
 800dc36:	f363 0207 	bfi	r2, r3, #0, #8
 800dc3a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800dc3e:	f363 220f 	bfi	r2, r3, #8, #8
 800dc42:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800dc46:	f363 4217 	bfi	r2, r3, #16, #8
 800dc4a:	0e03      	lsrs	r3, r0, #24
 800dc4c:	f363 621f 	bfi	r2, r3, #24, #8
 800dc50:	4610      	mov	r0, r2
 800dc52:	b004      	add	sp, #16
 800dc54:	bd10      	pop	{r4, pc}
 800dc56:	bf00      	nop
 800dc58:	0800da35 	.word	0x0800da35

0800dc5c <uxr_epoch_nanos>:
 800dc5c:	b510      	push	{r4, lr}
 800dc5e:	4604      	mov	r4, r0
 800dc60:	f001 f912 	bl	800ee88 <uxr_nanos>
 800dc64:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800dc68:	1ac0      	subs	r0, r0, r3
 800dc6a:	eb61 0102 	sbc.w	r1, r1, r2
 800dc6e:	bd10      	pop	{r4, pc}

0800dc70 <uxr_flash_output_streams>:
 800dc70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc74:	7e03      	ldrb	r3, [r0, #24]
 800dc76:	b084      	sub	sp, #16
 800dc78:	4604      	mov	r4, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d035      	beq.n	800dcea <uxr_flash_output_streams+0x7a>
 800dc7e:	f04f 0900 	mov.w	r9, #0
 800dc82:	4648      	mov	r0, r9
 800dc84:	f10d 0802 	add.w	r8, sp, #2
 800dc88:	af03      	add	r7, sp, #12
 800dc8a:	ae02      	add	r6, sp, #8
 800dc8c:	e006      	b.n	800dc9c <uxr_flash_output_streams+0x2c>
 800dc8e:	7e23      	ldrb	r3, [r4, #24]
 800dc90:	f109 0901 	add.w	r9, r9, #1
 800dc94:	fa5f f089 	uxtb.w	r0, r9
 800dc98:	4283      	cmp	r3, r0
 800dc9a:	d926      	bls.n	800dcea <uxr_flash_output_streams+0x7a>
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	4611      	mov	r1, r2
 800dca0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800dca4:	f000 ff58 	bl	800eb58 <uxr_stream_id>
 800dca8:	3508      	adds	r5, #8
 800dcaa:	4684      	mov	ip, r0
 800dcac:	4643      	mov	r3, r8
 800dcae:	463a      	mov	r2, r7
 800dcb0:	4631      	mov	r1, r6
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	f8cd c004 	str.w	ip, [sp, #4]
 800dcb8:	f007 fbd2 	bl	8015460 <uxr_prepare_best_effort_buffer_to_send>
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	d0e6      	beq.n	800dc8e <uxr_flash_output_streams+0x1e>
 800dcc0:	9b02      	ldr	r3, [sp, #8]
 800dcc2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dcc6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dcca:	4620      	mov	r0, r4
 800dccc:	f000 feb6 	bl	800ea3c <uxr_stamp_session_header>
 800dcd0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dcd2:	9a03      	ldr	r2, [sp, #12]
 800dcd4:	685d      	ldr	r5, [r3, #4]
 800dcd6:	6818      	ldr	r0, [r3, #0]
 800dcd8:	9902      	ldr	r1, [sp, #8]
 800dcda:	47a8      	blx	r5
 800dcdc:	f109 0901 	add.w	r9, r9, #1
 800dce0:	7e23      	ldrb	r3, [r4, #24]
 800dce2:	fa5f f089 	uxtb.w	r0, r9
 800dce6:	4283      	cmp	r3, r0
 800dce8:	d8d8      	bhi.n	800dc9c <uxr_flash_output_streams+0x2c>
 800dcea:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800dcee:	b38b      	cbz	r3, 800dd54 <uxr_flash_output_streams+0xe4>
 800dcf0:	f04f 0900 	mov.w	r9, #0
 800dcf4:	f10d 0802 	add.w	r8, sp, #2
 800dcf8:	af03      	add	r7, sp, #12
 800dcfa:	ae02      	add	r6, sp, #8
 800dcfc:	4648      	mov	r0, r9
 800dcfe:	2201      	movs	r2, #1
 800dd00:	2102      	movs	r1, #2
 800dd02:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800dd06:	f000 ff27 	bl	800eb58 <uxr_stream_id>
 800dd0a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800dd0e:	3520      	adds	r5, #32
 800dd10:	9001      	str	r0, [sp, #4]
 800dd12:	e00d      	b.n	800dd30 <uxr_flash_output_streams+0xc0>
 800dd14:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dd18:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dd1c:	9b02      	ldr	r3, [sp, #8]
 800dd1e:	f000 fe8d 	bl	800ea3c <uxr_stamp_session_header>
 800dd22:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dd24:	9a03      	ldr	r2, [sp, #12]
 800dd26:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800dd2a:	9902      	ldr	r1, [sp, #8]
 800dd2c:	6818      	ldr	r0, [r3, #0]
 800dd2e:	47d0      	blx	sl
 800dd30:	4643      	mov	r3, r8
 800dd32:	463a      	mov	r2, r7
 800dd34:	4631      	mov	r1, r6
 800dd36:	4628      	mov	r0, r5
 800dd38:	f007 fdb0 	bl	801589c <uxr_prepare_next_reliable_buffer_to_send>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	4620      	mov	r0, r4
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d1e7      	bne.n	800dd14 <uxr_flash_output_streams+0xa4>
 800dd44:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800dd48:	f109 0901 	add.w	r9, r9, #1
 800dd4c:	fa5f f089 	uxtb.w	r0, r9
 800dd50:	4283      	cmp	r3, r0
 800dd52:	d8d4      	bhi.n	800dcfe <uxr_flash_output_streams+0x8e>
 800dd54:	b004      	add	sp, #16
 800dd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd5a:	bf00      	nop

0800dd5c <read_submessage_info>:
 800dd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd60:	460d      	mov	r5, r1
 800dd62:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800dd66:	4669      	mov	r1, sp
 800dd68:	4607      	mov	r7, r0
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	f002 f814 	bl	800fd98 <uxr_deserialize_BaseObjectReply>
 800dd70:	a902      	add	r1, sp, #8
 800dd72:	4604      	mov	r4, r0
 800dd74:	4628      	mov	r0, r5
 800dd76:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800dd7a:	f7fc fb87 	bl	800a48c <ucdr_deserialize_bool>
 800dd7e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800dd82:	4004      	ands	r4, r0
 800dd84:	b2e4      	uxtb	r4, r4
 800dd86:	b95b      	cbnz	r3, 800dda0 <read_submessage_info+0x44>
 800dd88:	a987      	add	r1, sp, #540	@ 0x21c
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	f7fc fb7e 	bl	800a48c <ucdr_deserialize_bool>
 800dd90:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800dd94:	4606      	mov	r6, r0
 800dd96:	b94b      	cbnz	r3, 800ddac <read_submessage_info+0x50>
 800dd98:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800dd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dda0:	a903      	add	r1, sp, #12
 800dda2:	4628      	mov	r0, r5
 800dda4:	f001 fea0 	bl	800fae8 <uxr_deserialize_ObjectVariant>
 800dda8:	4004      	ands	r4, r0
 800ddaa:	e7ed      	b.n	800dd88 <read_submessage_info+0x2c>
 800ddac:	a988      	add	r1, sp, #544	@ 0x220
 800ddae:	4628      	mov	r0, r5
 800ddb0:	f7fc fb9a 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 800ddb4:	4234      	tst	r4, r6
 800ddb6:	d0ef      	beq.n	800dd98 <read_submessage_info+0x3c>
 800ddb8:	2800      	cmp	r0, #0
 800ddba:	d0ed      	beq.n	800dd98 <read_submessage_info+0x3c>
 800ddbc:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800ddc0:	2b0d      	cmp	r3, #13
 800ddc2:	d1e9      	bne.n	800dd98 <read_submessage_info+0x3c>
 800ddc4:	a98a      	add	r1, sp, #552	@ 0x228
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	f7fd f934 	bl	800b034 <ucdr_deserialize_int16_t>
 800ddcc:	b140      	cbz	r0, 800dde0 <read_submessage_info+0x84>
 800ddce:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	dd07      	ble.n	800dde6 <read_submessage_info+0x8a>
 800ddd6:	f1b8 0f00 	cmp.w	r8, #0
 800ddda:	bf14      	ite	ne
 800dddc:	2001      	movne	r0, #1
 800ddde:	2002      	moveq	r0, #2
 800dde0:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800dde4:	e7d8      	b.n	800dd98 <read_submessage_info+0x3c>
 800dde6:	2000      	movs	r0, #0
 800dde8:	e7fa      	b.n	800dde0 <read_submessage_info+0x84>
 800ddea:	bf00      	nop

0800ddec <read_submessage_list>:
 800ddec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf0:	b097      	sub	sp, #92	@ 0x5c
 800ddf2:	4ec1      	ldr	r6, [pc, #772]	@ (800e0f8 <read_submessage_list+0x30c>)
 800ddf4:	9209      	str	r2, [sp, #36]	@ 0x24
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	460d      	mov	r5, r1
 800ddfa:	f04f 0801 	mov.w	r8, #1
 800ddfe:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800de02:	aa0c      	add	r2, sp, #48	@ 0x30
 800de04:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800de08:	4628      	mov	r0, r5
 800de0a:	f000 fff7 	bl	800edfc <uxr_read_submessage_header>
 800de0e:	2800      	cmp	r0, #0
 800de10:	f000 813e 	beq.w	800e090 <read_submessage_list+0x2a4>
 800de14:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800de18:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800de1c:	3b02      	subs	r3, #2
 800de1e:	2b0d      	cmp	r3, #13
 800de20:	d8ed      	bhi.n	800ddfe <read_submessage_list+0x12>
 800de22:	a101      	add	r1, pc, #4	@ (adr r1, 800de28 <read_submessage_list+0x3c>)
 800de24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de28:	0800e087 	.word	0x0800e087
 800de2c:	0800ddff 	.word	0x0800ddff
 800de30:	0800e077 	.word	0x0800e077
 800de34:	0800e015 	.word	0x0800e015
 800de38:	0800e00b 	.word	0x0800e00b
 800de3c:	0800ddff 	.word	0x0800ddff
 800de40:	0800ddff 	.word	0x0800ddff
 800de44:	0800df6b 	.word	0x0800df6b
 800de48:	0800defb 	.word	0x0800defb
 800de4c:	0800debb 	.word	0x0800debb
 800de50:	0800ddff 	.word	0x0800ddff
 800de54:	0800ddff 	.word	0x0800ddff
 800de58:	0800ddff 	.word	0x0800ddff
 800de5c:	0800de61 	.word	0x0800de61
 800de60:	a910      	add	r1, sp, #64	@ 0x40
 800de62:	4628      	mov	r0, r5
 800de64:	f002 f9bc 	bl	80101e0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800de68:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800de6c:	f1b9 0f00 	cmp.w	r9, #0
 800de70:	f000 8116 	beq.w	800e0a0 <read_submessage_list+0x2b4>
 800de74:	f001 f808 	bl	800ee88 <uxr_nanos>
 800de78:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800de7a:	4602      	mov	r2, r0
 800de7c:	460b      	mov	r3, r1
 800de7e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800de80:	2100      	movs	r1, #0
 800de82:	468c      	mov	ip, r1
 800de84:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800de88:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800de8c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800de8e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800de90:	468c      	mov	ip, r1
 800de92:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800de96:	46e2      	mov	sl, ip
 800de98:	46bc      	mov	ip, r7
 800de9a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800de9e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800dea2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800dea6:	e9cd 7100 	strd	r7, r1, [sp]
 800deaa:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800deae:	9106      	str	r1, [sp, #24]
 800deb0:	4620      	mov	r0, r4
 800deb2:	47c8      	blx	r9
 800deb4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800deb8:	e7a1      	b.n	800ddfe <read_submessage_list+0x12>
 800deba:	a910      	add	r1, sp, #64	@ 0x40
 800debc:	4628      	mov	r0, r5
 800debe:	f002 f97d 	bl	80101bc <uxr_deserialize_HEARTBEAT_Payload>
 800dec2:	2100      	movs	r1, #0
 800dec4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800dec8:	f000 fe70 	bl	800ebac <uxr_stream_id_from_raw>
 800decc:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ded0:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ded2:	4639      	mov	r1, r7
 800ded4:	f104 0008 	add.w	r0, r4, #8
 800ded8:	f000 ff56 	bl	800ed88 <uxr_get_input_reliable_stream>
 800dedc:	2800      	cmp	r0, #0
 800dede:	d08e      	beq.n	800ddfe <read_submessage_list+0x12>
 800dee0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800dee4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800dee8:	f007 fa28 	bl	801533c <uxr_process_heartbeat>
 800deec:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800def0:	463a      	mov	r2, r7
 800def2:	4620      	mov	r0, r4
 800def4:	f7ff fdf6 	bl	800dae4 <write_submessage_acknack.isra.0>
 800def8:	e781      	b.n	800ddfe <read_submessage_list+0x12>
 800defa:	a910      	add	r1, sp, #64	@ 0x40
 800defc:	4628      	mov	r0, r5
 800defe:	f002 f935 	bl	801016c <uxr_deserialize_ACKNACK_Payload>
 800df02:	2100      	movs	r1, #0
 800df04:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800df08:	f000 fe50 	bl	800ebac <uxr_stream_id_from_raw>
 800df0c:	900d      	str	r0, [sp, #52]	@ 0x34
 800df0e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800df12:	f104 0008 	add.w	r0, r4, #8
 800df16:	f000 ff23 	bl	800ed60 <uxr_get_output_reliable_stream>
 800df1a:	4607      	mov	r7, r0
 800df1c:	2800      	cmp	r0, #0
 800df1e:	f43f af6e 	beq.w	800ddfe <read_submessage_list+0x12>
 800df22:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800df26:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800df2a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800df2e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800df32:	b289      	uxth	r1, r1
 800df34:	f007 fd5c 	bl	80159f0 <uxr_process_acknack>
 800df38:	4638      	mov	r0, r7
 800df3a:	f007 fd19 	bl	8015970 <uxr_begin_output_nack_buffer_it>
 800df3e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800df42:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800df46:	e006      	b.n	800df56 <read_submessage_list+0x16a>
 800df48:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800df4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800df4c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800df50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800df52:	6818      	ldr	r0, [r3, #0]
 800df54:	47c8      	blx	r9
 800df56:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800df5a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800df5c:	4651      	mov	r1, sl
 800df5e:	4638      	mov	r0, r7
 800df60:	f007 fd08 	bl	8015974 <uxr_next_reliable_nack_buffer_to_send>
 800df64:	2800      	cmp	r0, #0
 800df66:	d1ef      	bne.n	800df48 <read_submessage_list+0x15c>
 800df68:	e749      	b.n	800ddfe <read_submessage_list+0x12>
 800df6a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800df6e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800df72:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800df76:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800df7a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800df7e:	4651      	mov	r1, sl
 800df80:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800df84:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800df88:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800df8c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800df90:	4628      	mov	r0, r5
 800df92:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800df96:	f001 fe49 	bl	800fc2c <uxr_deserialize_BaseObjectRequest>
 800df9a:	4650      	mov	r0, sl
 800df9c:	a90f      	add	r1, sp, #60	@ 0x3c
 800df9e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800dfa2:	f000 fdc7 	bl	800eb34 <uxr_parse_base_object_request>
 800dfa6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800dfaa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dfac:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800dfb0:	9110      	str	r1, [sp, #64]	@ 0x40
 800dfb2:	3f04      	subs	r7, #4
 800dfb4:	f009 090e 	and.w	r9, r9, #14
 800dfb8:	b2bf      	uxth	r7, r7
 800dfba:	f1bb 0f00 	cmp.w	fp, #0
 800dfbe:	d006      	beq.n	800dfce <read_submessage_list+0x1e2>
 800dfc0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800dfc4:	9300      	str	r3, [sp, #0]
 800dfc6:	4652      	mov	r2, sl
 800dfc8:	2300      	movs	r3, #0
 800dfca:	4620      	mov	r0, r4
 800dfcc:	47d8      	blx	fp
 800dfce:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800dfd0:	b16a      	cbz	r2, 800dfee <read_submessage_list+0x202>
 800dfd2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	3802      	subs	r0, #2
 800dfd8:	e002      	b.n	800dfe0 <read_submessage_list+0x1f4>
 800dfda:	3101      	adds	r1, #1
 800dfdc:	4291      	cmp	r1, r2
 800dfde:	d006      	beq.n	800dfee <read_submessage_list+0x202>
 800dfe0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800dfe4:	4553      	cmp	r3, sl
 800dfe6:	d1f8      	bne.n	800dfda <read_submessage_list+0x1ee>
 800dfe8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800dfea:	2200      	movs	r2, #0
 800dfec:	545a      	strb	r2, [r3, r1]
 800dfee:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800dff2:	9102      	str	r1, [sp, #8]
 800dff4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dff6:	9101      	str	r1, [sp, #4]
 800dff8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800dffa:	9100      	str	r1, [sp, #0]
 800dffc:	464b      	mov	r3, r9
 800dffe:	463a      	mov	r2, r7
 800e000:	4629      	mov	r1, r5
 800e002:	4620      	mov	r0, r4
 800e004:	f007 fdb2 	bl	8015b6c <read_submessage_format>
 800e008:	e6f9      	b.n	800ddfe <read_submessage_list+0x12>
 800e00a:	4629      	mov	r1, r5
 800e00c:	4620      	mov	r0, r4
 800e00e:	f7ff fea5 	bl	800dd5c <read_submessage_info>
 800e012:	e6f4      	b.n	800ddfe <read_submessage_list+0x12>
 800e014:	2a00      	cmp	r2, #0
 800e016:	d03e      	beq.n	800e096 <read_submessage_list+0x2aa>
 800e018:	a910      	add	r1, sp, #64	@ 0x40
 800e01a:	4628      	mov	r0, r5
 800e01c:	f002 f802 	bl	8010024 <uxr_deserialize_STATUS_Payload>
 800e020:	a90e      	add	r1, sp, #56	@ 0x38
 800e022:	aa0d      	add	r2, sp, #52	@ 0x34
 800e024:	a810      	add	r0, sp, #64	@ 0x40
 800e026:	f000 fd85 	bl	800eb34 <uxr_parse_base_object_request>
 800e02a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800e02e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e030:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800e034:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800e038:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e03a:	f1ba 0f00 	cmp.w	sl, #0
 800e03e:	d006      	beq.n	800e04e <read_submessage_list+0x262>
 800e040:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e044:	9300      	str	r3, [sp, #0]
 800e046:	463a      	mov	r2, r7
 800e048:	464b      	mov	r3, r9
 800e04a:	4620      	mov	r0, r4
 800e04c:	47d0      	blx	sl
 800e04e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800e050:	2a00      	cmp	r2, #0
 800e052:	f43f aed4 	beq.w	800ddfe <read_submessage_list+0x12>
 800e056:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e058:	2100      	movs	r1, #0
 800e05a:	3802      	subs	r0, #2
 800e05c:	e003      	b.n	800e066 <read_submessage_list+0x27a>
 800e05e:	3101      	adds	r1, #1
 800e060:	4291      	cmp	r1, r2
 800e062:	f43f aecc 	beq.w	800ddfe <read_submessage_list+0x12>
 800e066:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e06a:	42bb      	cmp	r3, r7
 800e06c:	d1f7      	bne.n	800e05e <read_submessage_list+0x272>
 800e06e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e070:	f803 9001 	strb.w	r9, [r3, r1]
 800e074:	e6c3      	b.n	800ddfe <read_submessage_list+0x12>
 800e076:	2a00      	cmp	r2, #0
 800e078:	f47f aec1 	bne.w	800ddfe <read_submessage_list+0x12>
 800e07c:	4629      	mov	r1, r5
 800e07e:	4620      	mov	r0, r4
 800e080:	f000 fc9e 	bl	800e9c0 <uxr_read_create_session_status>
 800e084:	e6bb      	b.n	800ddfe <read_submessage_list+0x12>
 800e086:	4629      	mov	r1, r5
 800e088:	4620      	mov	r0, r4
 800e08a:	f7ff fcf5 	bl	800da78 <read_submessage_get_info>
 800e08e:	e6b6      	b.n	800ddfe <read_submessage_list+0x12>
 800e090:	b017      	add	sp, #92	@ 0x5c
 800e092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e096:	4629      	mov	r1, r5
 800e098:	4620      	mov	r0, r4
 800e09a:	f000 fc9d 	bl	800e9d8 <uxr_read_delete_session_status>
 800e09e:	e6ae      	b.n	800ddfe <read_submessage_list+0x12>
 800e0a0:	f000 fef2 	bl	800ee88 <uxr_nanos>
 800e0a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e0a6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e0a8:	464f      	mov	r7, r9
 800e0aa:	fbc3 2706 	smlal	r2, r7, r3, r6
 800e0ae:	1812      	adds	r2, r2, r0
 800e0b0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e0b2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800e0b4:	eb47 0101 	adc.w	r1, r7, r1
 800e0b8:	464f      	mov	r7, r9
 800e0ba:	fbc3 0706 	smlal	r0, r7, r3, r6
 800e0be:	463b      	mov	r3, r7
 800e0c0:	4684      	mov	ip, r0
 800e0c2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800e0c6:	fbc7 0906 	smlal	r0, r9, r7, r6
 800e0ca:	eb1c 0c00 	adds.w	ip, ip, r0
 800e0ce:	464f      	mov	r7, r9
 800e0d0:	eb43 0307 	adc.w	r3, r3, r7
 800e0d4:	ebb2 0c0c 	subs.w	ip, r2, ip
 800e0d8:	eb61 0303 	sbc.w	r3, r1, r3
 800e0dc:	0fda      	lsrs	r2, r3, #31
 800e0de:	eb12 020c 	adds.w	r2, r2, ip
 800e0e2:	f143 0300 	adc.w	r3, r3, #0
 800e0e6:	0852      	lsrs	r2, r2, #1
 800e0e8:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800e0ec:	105b      	asrs	r3, r3, #1
 800e0ee:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800e0f2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800e0f6:	e6dd      	b.n	800deb4 <read_submessage_list+0xc8>
 800e0f8:	3b9aca00 	.word	0x3b9aca00

0800e0fc <listen_message_reliably>:
 800e0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e100:	1e0b      	subs	r3, r1, #0
 800e102:	b09d      	sub	sp, #116	@ 0x74
 800e104:	bfb8      	it	lt
 800e106:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800e10a:	4680      	mov	r8, r0
 800e10c:	9305      	str	r3, [sp, #20]
 800e10e:	f000 fea1 	bl	800ee54 <uxr_millis>
 800e112:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800e116:	4681      	mov	r9, r0
 800e118:	2a00      	cmp	r2, #0
 800e11a:	f000 80a1 	beq.w	800e260 <listen_message_reliably+0x164>
 800e11e:	2600      	movs	r6, #0
 800e120:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e124:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e128:	9303      	str	r3, [sp, #12]
 800e12a:	4630      	mov	r0, r6
 800e12c:	460f      	mov	r7, r1
 800e12e:	e00f      	b.n	800e150 <listen_message_reliably+0x54>
 800e130:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e134:	9903      	ldr	r1, [sp, #12]
 800e136:	455a      	cmp	r2, fp
 800e138:	f106 0601 	add.w	r6, r6, #1
 800e13c:	eb73 0101 	sbcs.w	r1, r3, r1
 800e140:	b2f0      	uxtb	r0, r6
 800e142:	da01      	bge.n	800e148 <listen_message_reliably+0x4c>
 800e144:	4693      	mov	fp, r2
 800e146:	9303      	str	r3, [sp, #12]
 800e148:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e14c:	4283      	cmp	r3, r0
 800e14e:	d960      	bls.n	800e212 <listen_message_reliably+0x116>
 800e150:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800e154:	2102      	movs	r1, #2
 800e156:	2201      	movs	r2, #1
 800e158:	f000 fcfe 	bl	800eb58 <uxr_stream_id>
 800e15c:	00e4      	lsls	r4, r4, #3
 800e15e:	f104 0520 	add.w	r5, r4, #32
 800e162:	4445      	add	r5, r8
 800e164:	4601      	mov	r1, r0
 800e166:	463b      	mov	r3, r7
 800e168:	464a      	mov	r2, r9
 800e16a:	4628      	mov	r0, r5
 800e16c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e16e:	f007 fbd5 	bl	801591c <uxr_update_output_stream_heartbeat_timestamp>
 800e172:	eb08 0304 	add.w	r3, r8, r4
 800e176:	2800      	cmp	r0, #0
 800e178:	d0da      	beq.n	800e130 <listen_message_reliably+0x34>
 800e17a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e17e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800e182:	9304      	str	r3, [sp, #16]
 800e184:	4640      	mov	r0, r8
 800e186:	f000 fcaf 	bl	800eae8 <uxr_session_header_offset>
 800e18a:	3501      	adds	r5, #1
 800e18c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800e190:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e194:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800e198:	2300      	movs	r3, #0
 800e19a:	2211      	movs	r2, #17
 800e19c:	9000      	str	r0, [sp, #0]
 800e19e:	a90c      	add	r1, sp, #48	@ 0x30
 800e1a0:	4650      	mov	r0, sl
 800e1a2:	f7fd fabb 	bl	800b71c <ucdr_init_buffer_origin_offset>
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	2205      	movs	r2, #5
 800e1aa:	210b      	movs	r1, #11
 800e1ac:	4650      	mov	r0, sl
 800e1ae:	f000 fe0b 	bl	800edc8 <uxr_buffer_submessage_header>
 800e1b2:	8968      	ldrh	r0, [r5, #10]
 800e1b4:	2101      	movs	r1, #1
 800e1b6:	f007 fda3 	bl	8015d00 <uxr_seq_num_add>
 800e1ba:	892b      	ldrh	r3, [r5, #8]
 800e1bc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	9b04      	ldr	r3, [sp, #16]
 800e1c4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800e1c8:	a90a      	add	r1, sp, #40	@ 0x28
 800e1ca:	4650      	mov	r0, sl
 800e1cc:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800e1d0:	f001 ffe0 	bl	8010194 <uxr_serialize_HEARTBEAT_Payload>
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	4611      	mov	r1, r2
 800e1d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e1da:	4640      	mov	r0, r8
 800e1dc:	f000 fc2e 	bl	800ea3c <uxr_stamp_session_header>
 800e1e0:	4650      	mov	r0, sl
 800e1e2:	f7fd fad9 	bl	800b798 <ucdr_buffer_length>
 800e1e6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	a90c      	add	r1, sp, #48	@ 0x30
 800e1ee:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e1f2:	4444      	add	r4, r8
 800e1f4:	47a8      	blx	r5
 800e1f6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800e1fa:	9903      	ldr	r1, [sp, #12]
 800e1fc:	455a      	cmp	r2, fp
 800e1fe:	f106 0601 	add.w	r6, r6, #1
 800e202:	eb73 0101 	sbcs.w	r1, r3, r1
 800e206:	b2f0      	uxtb	r0, r6
 800e208:	db9c      	blt.n	800e144 <listen_message_reliably+0x48>
 800e20a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e20e:	4283      	cmp	r3, r0
 800e210:	d89e      	bhi.n	800e150 <listen_message_reliably+0x54>
 800e212:	9a03      	ldr	r2, [sp, #12]
 800e214:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e218:	429a      	cmp	r2, r3
 800e21a:	bf08      	it	eq
 800e21c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800e220:	d01e      	beq.n	800e260 <listen_message_reliably+0x164>
 800e222:	ebab 0309 	sub.w	r3, fp, r9
 800e226:	9905      	ldr	r1, [sp, #20]
 800e228:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	bf08      	it	eq
 800e230:	2301      	moveq	r3, #1
 800e232:	4299      	cmp	r1, r3
 800e234:	bfa8      	it	ge
 800e236:	4619      	movge	r1, r3
 800e238:	6894      	ldr	r4, [r2, #8]
 800e23a:	6810      	ldr	r0, [r2, #0]
 800e23c:	4689      	mov	r9, r1
 800e23e:	460b      	mov	r3, r1
 800e240:	aa08      	add	r2, sp, #32
 800e242:	a907      	add	r1, sp, #28
 800e244:	47a0      	blx	r4
 800e246:	b968      	cbnz	r0, 800e264 <listen_message_reliably+0x168>
 800e248:	9b05      	ldr	r3, [sp, #20]
 800e24a:	eba3 0309 	sub.w	r3, r3, r9
 800e24e:	2b00      	cmp	r3, #0
 800e250:	9305      	str	r3, [sp, #20]
 800e252:	f73f af5c 	bgt.w	800e10e <listen_message_reliably+0x12>
 800e256:	4604      	mov	r4, r0
 800e258:	4620      	mov	r0, r4
 800e25a:	b01d      	add	sp, #116	@ 0x74
 800e25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e260:	9b05      	ldr	r3, [sp, #20]
 800e262:	e7e0      	b.n	800e226 <listen_message_reliably+0x12a>
 800e264:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e268:	4604      	mov	r4, r0
 800e26a:	a80c      	add	r0, sp, #48	@ 0x30
 800e26c:	f7fd fa68 	bl	800b740 <ucdr_init_buffer>
 800e270:	2500      	movs	r5, #0
 800e272:	f10d 031a 	add.w	r3, sp, #26
 800e276:	aa06      	add	r2, sp, #24
 800e278:	a90c      	add	r1, sp, #48	@ 0x30
 800e27a:	4640      	mov	r0, r8
 800e27c:	f88d 5018 	strb.w	r5, [sp, #24]
 800e280:	f000 fbf0 	bl	800ea64 <uxr_read_session_header>
 800e284:	b918      	cbnz	r0, 800e28e <listen_message_reliably+0x192>
 800e286:	4620      	mov	r0, r4
 800e288:	b01d      	add	sp, #116	@ 0x74
 800e28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e28e:	4629      	mov	r1, r5
 800e290:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e294:	f000 fc8a 	bl	800ebac <uxr_stream_id_from_raw>
 800e298:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800e29c:	2d01      	cmp	r5, #1
 800e29e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e2a2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800e2a6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e2aa:	d04b      	beq.n	800e344 <listen_message_reliably+0x248>
 800e2ac:	2d02      	cmp	r5, #2
 800e2ae:	d00f      	beq.n	800e2d0 <listen_message_reliably+0x1d4>
 800e2b0:	2d00      	cmp	r5, #0
 800e2b2:	d1e8      	bne.n	800e286 <listen_message_reliably+0x18a>
 800e2b4:	4629      	mov	r1, r5
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	f000 fc78 	bl	800ebac <uxr_stream_id_from_raw>
 800e2bc:	a90c      	add	r1, sp, #48	@ 0x30
 800e2be:	4602      	mov	r2, r0
 800e2c0:	4640      	mov	r0, r8
 800e2c2:	920a      	str	r2, [sp, #40]	@ 0x28
 800e2c4:	f7ff fd92 	bl	800ddec <read_submessage_list>
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	b01d      	add	sp, #116	@ 0x74
 800e2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2d0:	4631      	mov	r1, r6
 800e2d2:	f108 0008 	add.w	r0, r8, #8
 800e2d6:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800e2da:	f000 fd55 	bl	800ed88 <uxr_get_input_reliable_stream>
 800e2de:	4607      	mov	r7, r0
 800e2e0:	b338      	cbz	r0, 800e332 <listen_message_reliably+0x236>
 800e2e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2e4:	9203      	str	r2, [sp, #12]
 800e2e6:	a80c      	add	r0, sp, #48	@ 0x30
 800e2e8:	f7fd fa5a 	bl	800b7a0 <ucdr_buffer_remaining>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	f10d 0019 	add.w	r0, sp, #25
 800e2f2:	9000      	str	r0, [sp, #0]
 800e2f4:	9a03      	ldr	r2, [sp, #12]
 800e2f6:	4651      	mov	r1, sl
 800e2f8:	4638      	mov	r0, r7
 800e2fa:	f006 ff25 	bl	8015148 <uxr_receive_reliable_message>
 800e2fe:	b1c0      	cbz	r0, 800e332 <listen_message_reliably+0x236>
 800e300:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e304:	b393      	cbz	r3, 800e36c <listen_message_reliably+0x270>
 800e306:	ad14      	add	r5, sp, #80	@ 0x50
 800e308:	f04f 0a02 	mov.w	sl, #2
 800e30c:	e00a      	b.n	800e324 <listen_message_reliably+0x228>
 800e30e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800e312:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800e316:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800e31a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e31c:	4629      	mov	r1, r5
 800e31e:	4640      	mov	r0, r8
 800e320:	f7ff fd64 	bl	800ddec <read_submessage_list>
 800e324:	2204      	movs	r2, #4
 800e326:	4629      	mov	r1, r5
 800e328:	4638      	mov	r0, r7
 800e32a:	f006 ff8d 	bl	8015248 <uxr_next_input_reliable_buffer_available>
 800e32e:	2800      	cmp	r0, #0
 800e330:	d1ed      	bne.n	800e30e <listen_message_reliably+0x212>
 800e332:	4640      	mov	r0, r8
 800e334:	4632      	mov	r2, r6
 800e336:	4649      	mov	r1, r9
 800e338:	f7ff fbd4 	bl	800dae4 <write_submessage_acknack.isra.0>
 800e33c:	4620      	mov	r0, r4
 800e33e:	b01d      	add	sp, #116	@ 0x74
 800e340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e344:	4631      	mov	r1, r6
 800e346:	f108 0008 	add.w	r0, r8, #8
 800e34a:	f000 fd13 	bl	800ed74 <uxr_get_input_best_effort_stream>
 800e34e:	2800      	cmp	r0, #0
 800e350:	d099      	beq.n	800e286 <listen_message_reliably+0x18a>
 800e352:	4651      	mov	r1, sl
 800e354:	f006 fe64 	bl	8015020 <uxr_receive_best_effort_message>
 800e358:	2800      	cmp	r0, #0
 800e35a:	d094      	beq.n	800e286 <listen_message_reliably+0x18a>
 800e35c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e360:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e362:	a90c      	add	r1, sp, #48	@ 0x30
 800e364:	4640      	mov	r0, r8
 800e366:	f7ff fd41 	bl	800ddec <read_submessage_list>
 800e36a:	e78c      	b.n	800e286 <listen_message_reliably+0x18a>
 800e36c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e370:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e372:	a90c      	add	r1, sp, #48	@ 0x30
 800e374:	4640      	mov	r0, r8
 800e376:	f7ff fd39 	bl	800ddec <read_submessage_list>
 800e37a:	e7c4      	b.n	800e306 <listen_message_reliably+0x20a>

0800e37c <uxr_run_session_timeout>:
 800e37c:	b570      	push	{r4, r5, r6, lr}
 800e37e:	4604      	mov	r4, r0
 800e380:	460d      	mov	r5, r1
 800e382:	f000 fd67 	bl	800ee54 <uxr_millis>
 800e386:	4606      	mov	r6, r0
 800e388:	4620      	mov	r0, r4
 800e38a:	f7ff fc71 	bl	800dc70 <uxr_flash_output_streams>
 800e38e:	4629      	mov	r1, r5
 800e390:	4620      	mov	r0, r4
 800e392:	f7ff feb3 	bl	800e0fc <listen_message_reliably>
 800e396:	f000 fd5d 	bl	800ee54 <uxr_millis>
 800e39a:	1b83      	subs	r3, r0, r6
 800e39c:	1ae9      	subs	r1, r5, r3
 800e39e:	2900      	cmp	r1, #0
 800e3a0:	dcf6      	bgt.n	800e390 <uxr_run_session_timeout+0x14>
 800e3a2:	f104 0008 	add.w	r0, r4, #8
 800e3a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3aa:	f000 bcf7 	b.w	800ed9c <uxr_output_streams_confirmed>
 800e3ae:	bf00      	nop

0800e3b0 <uxr_run_session_until_data>:
 800e3b0:	b570      	push	{r4, r5, r6, lr}
 800e3b2:	4604      	mov	r4, r0
 800e3b4:	460d      	mov	r5, r1
 800e3b6:	f000 fd4d 	bl	800ee54 <uxr_millis>
 800e3ba:	4606      	mov	r6, r0
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f7ff fc57 	bl	800dc70 <uxr_flash_output_streams>
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	e005      	b.n	800e3d8 <uxr_run_session_until_data+0x28>
 800e3cc:	f000 fd42 	bl	800ee54 <uxr_millis>
 800e3d0:	1b83      	subs	r3, r0, r6
 800e3d2:	1ae9      	subs	r1, r5, r3
 800e3d4:	2900      	cmp	r1, #0
 800e3d6:	dd07      	ble.n	800e3e8 <uxr_run_session_until_data+0x38>
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f7ff fe8f 	bl	800e0fc <listen_message_reliably>
 800e3de:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	d0f2      	beq.n	800e3cc <uxr_run_session_until_data+0x1c>
 800e3e6:	bd70      	pop	{r4, r5, r6, pc}
 800e3e8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e3ec:	bd70      	pop	{r4, r5, r6, pc}
 800e3ee:	bf00      	nop

0800e3f0 <uxr_run_session_until_confirm_delivery>:
 800e3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f4:	4606      	mov	r6, r0
 800e3f6:	460d      	mov	r5, r1
 800e3f8:	f000 fd2c 	bl	800ee54 <uxr_millis>
 800e3fc:	4607      	mov	r7, r0
 800e3fe:	4630      	mov	r0, r6
 800e400:	f7ff fc36 	bl	800dc70 <uxr_flash_output_streams>
 800e404:	2d00      	cmp	r5, #0
 800e406:	f106 0808 	add.w	r8, r6, #8
 800e40a:	bfa8      	it	ge
 800e40c:	462c      	movge	r4, r5
 800e40e:	da07      	bge.n	800e420 <uxr_run_session_until_confirm_delivery+0x30>
 800e410:	e00e      	b.n	800e430 <uxr_run_session_until_confirm_delivery+0x40>
 800e412:	f7ff fe73 	bl	800e0fc <listen_message_reliably>
 800e416:	f000 fd1d 	bl	800ee54 <uxr_millis>
 800e41a:	1bc3      	subs	r3, r0, r7
 800e41c:	1aec      	subs	r4, r5, r3
 800e41e:	d407      	bmi.n	800e430 <uxr_run_session_until_confirm_delivery+0x40>
 800e420:	4640      	mov	r0, r8
 800e422:	f000 fcbb 	bl	800ed9c <uxr_output_streams_confirmed>
 800e426:	4603      	mov	r3, r0
 800e428:	4621      	mov	r1, r4
 800e42a:	4630      	mov	r0, r6
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d0f0      	beq.n	800e412 <uxr_run_session_until_confirm_delivery+0x22>
 800e430:	4640      	mov	r0, r8
 800e432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e436:	f000 bcb1 	b.w	800ed9c <uxr_output_streams_confirmed>
 800e43a:	bf00      	nop

0800e43c <uxr_run_session_until_all_status>:
 800e43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e440:	9c08      	ldr	r4, [sp, #32]
 800e442:	4606      	mov	r6, r0
 800e444:	460f      	mov	r7, r1
 800e446:	4691      	mov	r9, r2
 800e448:	461d      	mov	r5, r3
 800e44a:	f7ff fc11 	bl	800dc70 <uxr_flash_output_streams>
 800e44e:	b124      	cbz	r4, 800e45a <uxr_run_session_until_all_status+0x1e>
 800e450:	4622      	mov	r2, r4
 800e452:	21ff      	movs	r1, #255	@ 0xff
 800e454:	4628      	mov	r0, r5
 800e456:	f009 f943 	bl	80176e0 <memset>
 800e45a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800e45e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e460:	f000 fcf8 	bl	800ee54 <uxr_millis>
 800e464:	3d01      	subs	r5, #1
 800e466:	f1a9 0902 	sub.w	r9, r9, #2
 800e46a:	4680      	mov	r8, r0
 800e46c:	4639      	mov	r1, r7
 800e46e:	4630      	mov	r0, r6
 800e470:	f7ff fe44 	bl	800e0fc <listen_message_reliably>
 800e474:	f000 fcee 	bl	800ee54 <uxr_millis>
 800e478:	eba0 0008 	sub.w	r0, r0, r8
 800e47c:	1a39      	subs	r1, r7, r0
 800e47e:	b344      	cbz	r4, 800e4d2 <uxr_run_session_until_all_status+0x96>
 800e480:	4628      	mov	r0, r5
 800e482:	46ac      	mov	ip, r5
 800e484:	2301      	movs	r3, #1
 800e486:	e002      	b.n	800e48e <uxr_run_session_until_all_status+0x52>
 800e488:	42a3      	cmp	r3, r4
 800e48a:	d20d      	bcs.n	800e4a8 <uxr_run_session_until_all_status+0x6c>
 800e48c:	3301      	adds	r3, #1
 800e48e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800e492:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800e496:	d1f7      	bne.n	800e488 <uxr_run_session_until_all_status+0x4c>
 800e498:	42a3      	cmp	r3, r4
 800e49a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800e49e:	d213      	bcs.n	800e4c8 <uxr_run_session_until_all_status+0x8c>
 800e4a0:	2a00      	cmp	r2, #0
 800e4a2:	d0f3      	beq.n	800e48c <uxr_run_session_until_all_status+0x50>
 800e4a4:	2900      	cmp	r1, #0
 800e4a6:	dce2      	bgt.n	800e46e <uxr_run_session_until_all_status+0x32>
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800e4ac:	442c      	add	r4, r5
 800e4ae:	e001      	b.n	800e4b4 <uxr_run_session_until_all_status+0x78>
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d812      	bhi.n	800e4da <uxr_run_session_until_all_status+0x9e>
 800e4b4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e4b8:	4284      	cmp	r4, r0
 800e4ba:	d1f9      	bne.n	800e4b0 <uxr_run_session_until_all_status+0x74>
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	bf8c      	ite	hi
 800e4c0:	2000      	movhi	r0, #0
 800e4c2:	2001      	movls	r0, #1
 800e4c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4c8:	2900      	cmp	r1, #0
 800e4ca:	dded      	ble.n	800e4a8 <uxr_run_session_until_all_status+0x6c>
 800e4cc:	2a00      	cmp	r2, #0
 800e4ce:	d1ce      	bne.n	800e46e <uxr_run_session_until_all_status+0x32>
 800e4d0:	e7ea      	b.n	800e4a8 <uxr_run_session_until_all_status+0x6c>
 800e4d2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e4d4:	2001      	movs	r0, #1
 800e4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4da:	2000      	movs	r0, #0
 800e4dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e4e0 <wait_session_status>:
 800e4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	b09d      	sub	sp, #116	@ 0x74
 800e4e8:	20ff      	movs	r0, #255	@ 0xff
 800e4ea:	7160      	strb	r0, [r4, #5]
 800e4ec:	9303      	str	r3, [sp, #12]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f000 80b6 	beq.w	800e660 <wait_session_status+0x180>
 800e4f4:	468a      	mov	sl, r1
 800e4f6:	4691      	mov	r9, r2
 800e4f8:	f04f 0b00 	mov.w	fp, #0
 800e4fc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e4fe:	464a      	mov	r2, r9
 800e500:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e504:	4651      	mov	r1, sl
 800e506:	47a8      	blx	r5
 800e508:	f000 fca4 	bl	800ee54 <uxr_millis>
 800e50c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e510:	4605      	mov	r5, r0
 800e512:	e009      	b.n	800e528 <wait_session_status+0x48>
 800e514:	f000 fc9e 	bl	800ee54 <uxr_millis>
 800e518:	1b40      	subs	r0, r0, r5
 800e51a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e51e:	2b00      	cmp	r3, #0
 800e520:	dd40      	ble.n	800e5a4 <wait_session_status+0xc4>
 800e522:	7960      	ldrb	r0, [r4, #5]
 800e524:	28ff      	cmp	r0, #255	@ 0xff
 800e526:	d145      	bne.n	800e5b4 <wait_session_status+0xd4>
 800e528:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e52a:	a908      	add	r1, sp, #32
 800e52c:	6896      	ldr	r6, [r2, #8]
 800e52e:	6810      	ldr	r0, [r2, #0]
 800e530:	aa09      	add	r2, sp, #36	@ 0x24
 800e532:	47b0      	blx	r6
 800e534:	2800      	cmp	r0, #0
 800e536:	d0ed      	beq.n	800e514 <wait_session_status+0x34>
 800e538:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e53c:	a80c      	add	r0, sp, #48	@ 0x30
 800e53e:	f7fd f8ff 	bl	800b740 <ucdr_init_buffer>
 800e542:	2600      	movs	r6, #0
 800e544:	f10d 031e 	add.w	r3, sp, #30
 800e548:	aa07      	add	r2, sp, #28
 800e54a:	a90c      	add	r1, sp, #48	@ 0x30
 800e54c:	4620      	mov	r0, r4
 800e54e:	f88d 601c 	strb.w	r6, [sp, #28]
 800e552:	f000 fa87 	bl	800ea64 <uxr_read_session_header>
 800e556:	2800      	cmp	r0, #0
 800e558:	d0dc      	beq.n	800e514 <wait_session_status+0x34>
 800e55a:	4631      	mov	r1, r6
 800e55c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800e560:	f000 fb24 	bl	800ebac <uxr_stream_id_from_raw>
 800e564:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800e568:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800e56c:	9302      	str	r3, [sp, #8]
 800e56e:	2f01      	cmp	r7, #1
 800e570:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800e574:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e578:	d05c      	beq.n	800e634 <wait_session_status+0x154>
 800e57a:	2f02      	cmp	r7, #2
 800e57c:	d020      	beq.n	800e5c0 <wait_session_status+0xe0>
 800e57e:	2f00      	cmp	r7, #0
 800e580:	d1c8      	bne.n	800e514 <wait_session_status+0x34>
 800e582:	4639      	mov	r1, r7
 800e584:	4638      	mov	r0, r7
 800e586:	f000 fb11 	bl	800ebac <uxr_stream_id_from_raw>
 800e58a:	a90c      	add	r1, sp, #48	@ 0x30
 800e58c:	4602      	mov	r2, r0
 800e58e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e590:	4620      	mov	r0, r4
 800e592:	f7ff fc2b 	bl	800ddec <read_submessage_list>
 800e596:	f000 fc5d 	bl	800ee54 <uxr_millis>
 800e59a:	1b40      	subs	r0, r0, r5
 800e59c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	dcbe      	bgt.n	800e522 <wait_session_status+0x42>
 800e5a4:	9b03      	ldr	r3, [sp, #12]
 800e5a6:	7960      	ldrb	r0, [r4, #5]
 800e5a8:	f10b 0b01 	add.w	fp, fp, #1
 800e5ac:	455b      	cmp	r3, fp
 800e5ae:	d001      	beq.n	800e5b4 <wait_session_status+0xd4>
 800e5b0:	28ff      	cmp	r0, #255	@ 0xff
 800e5b2:	d0a3      	beq.n	800e4fc <wait_session_status+0x1c>
 800e5b4:	38ff      	subs	r0, #255	@ 0xff
 800e5b6:	bf18      	it	ne
 800e5b8:	2001      	movne	r0, #1
 800e5ba:	b01d      	add	sp, #116	@ 0x74
 800e5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5c0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800e5c4:	9304      	str	r3, [sp, #16]
 800e5c6:	4631      	mov	r1, r6
 800e5c8:	f104 0008 	add.w	r0, r4, #8
 800e5cc:	f000 fbdc 	bl	800ed88 <uxr_get_input_reliable_stream>
 800e5d0:	4680      	mov	r8, r0
 800e5d2:	b348      	cbz	r0, 800e628 <wait_session_status+0x148>
 800e5d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5d6:	9205      	str	r2, [sp, #20]
 800e5d8:	a80c      	add	r0, sp, #48	@ 0x30
 800e5da:	f7fd f8e1 	bl	800b7a0 <ucdr_buffer_remaining>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	f10d 001d 	add.w	r0, sp, #29
 800e5e4:	9000      	str	r0, [sp, #0]
 800e5e6:	9a05      	ldr	r2, [sp, #20]
 800e5e8:	9902      	ldr	r1, [sp, #8]
 800e5ea:	4640      	mov	r0, r8
 800e5ec:	f006 fdac 	bl	8015148 <uxr_receive_reliable_message>
 800e5f0:	b1d0      	cbz	r0, 800e628 <wait_session_status+0x148>
 800e5f2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d03a      	beq.n	800e670 <wait_session_status+0x190>
 800e5fa:	9f04      	ldr	r7, [sp, #16]
 800e5fc:	e00a      	b.n	800e614 <wait_session_status+0x134>
 800e5fe:	f04f 0302 	mov.w	r3, #2
 800e602:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800e606:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800e60a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800e60e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e610:	f7ff fbec 	bl	800ddec <read_submessage_list>
 800e614:	a914      	add	r1, sp, #80	@ 0x50
 800e616:	2204      	movs	r2, #4
 800e618:	4640      	mov	r0, r8
 800e61a:	f006 fe15 	bl	8015248 <uxr_next_input_reliable_buffer_available>
 800e61e:	4603      	mov	r3, r0
 800e620:	a914      	add	r1, sp, #80	@ 0x50
 800e622:	4620      	mov	r0, r4
 800e624:	2b00      	cmp	r3, #0
 800e626:	d1ea      	bne.n	800e5fe <wait_session_status+0x11e>
 800e628:	9904      	ldr	r1, [sp, #16]
 800e62a:	4632      	mov	r2, r6
 800e62c:	4620      	mov	r0, r4
 800e62e:	f7ff fa59 	bl	800dae4 <write_submessage_acknack.isra.0>
 800e632:	e76f      	b.n	800e514 <wait_session_status+0x34>
 800e634:	4631      	mov	r1, r6
 800e636:	f104 0008 	add.w	r0, r4, #8
 800e63a:	f000 fb9b 	bl	800ed74 <uxr_get_input_best_effort_stream>
 800e63e:	2800      	cmp	r0, #0
 800e640:	f43f af68 	beq.w	800e514 <wait_session_status+0x34>
 800e644:	9902      	ldr	r1, [sp, #8]
 800e646:	f006 fceb 	bl	8015020 <uxr_receive_best_effort_message>
 800e64a:	2800      	cmp	r0, #0
 800e64c:	f43f af62 	beq.w	800e514 <wait_session_status+0x34>
 800e650:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e654:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e656:	a90c      	add	r1, sp, #48	@ 0x30
 800e658:	4620      	mov	r0, r4
 800e65a:	f7ff fbc7 	bl	800ddec <read_submessage_list>
 800e65e:	e759      	b.n	800e514 <wait_session_status+0x34>
 800e660:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e662:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e666:	47a0      	blx	r4
 800e668:	2001      	movs	r0, #1
 800e66a:	b01d      	add	sp, #116	@ 0x74
 800e66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e670:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e674:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e676:	a90c      	add	r1, sp, #48	@ 0x30
 800e678:	4620      	mov	r0, r4
 800e67a:	f7ff fbb7 	bl	800ddec <read_submessage_list>
 800e67e:	e7bc      	b.n	800e5fa <wait_session_status+0x11a>

0800e680 <uxr_delete_session_retries>:
 800e680:	b530      	push	{r4, r5, lr}
 800e682:	b08f      	sub	sp, #60	@ 0x3c
 800e684:	4604      	mov	r4, r0
 800e686:	460d      	mov	r5, r1
 800e688:	f000 fa2e 	bl	800eae8 <uxr_session_header_offset>
 800e68c:	2300      	movs	r3, #0
 800e68e:	2210      	movs	r2, #16
 800e690:	9000      	str	r0, [sp, #0]
 800e692:	a902      	add	r1, sp, #8
 800e694:	a806      	add	r0, sp, #24
 800e696:	f7fd f841 	bl	800b71c <ucdr_init_buffer_origin_offset>
 800e69a:	a906      	add	r1, sp, #24
 800e69c:	4620      	mov	r0, r4
 800e69e:	f000 f973 	bl	800e988 <uxr_buffer_delete_session>
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	4611      	mov	r1, r2
 800e6a6:	9b06      	ldr	r3, [sp, #24]
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f000 f9c7 	bl	800ea3c <uxr_stamp_session_header>
 800e6ae:	a806      	add	r0, sp, #24
 800e6b0:	f7fd f872 	bl	800b798 <ucdr_buffer_length>
 800e6b4:	462b      	mov	r3, r5
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	a902      	add	r1, sp, #8
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	f7ff ff10 	bl	800e4e0 <wait_session_status>
 800e6c0:	b118      	cbz	r0, 800e6ca <uxr_delete_session_retries+0x4a>
 800e6c2:	7960      	ldrb	r0, [r4, #5]
 800e6c4:	fab0 f080 	clz	r0, r0
 800e6c8:	0940      	lsrs	r0, r0, #5
 800e6ca:	b00f      	add	sp, #60	@ 0x3c
 800e6cc:	bd30      	pop	{r4, r5, pc}
 800e6ce:	bf00      	nop

0800e6d0 <uxr_create_session>:
 800e6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d4:	f100 0b08 	add.w	fp, r0, #8
 800e6d8:	b0ab      	sub	sp, #172	@ 0xac
 800e6da:	4604      	mov	r4, r0
 800e6dc:	4658      	mov	r0, fp
 800e6de:	f000 fa99 	bl	800ec14 <uxr_reset_stream_storage>
 800e6e2:	4620      	mov	r0, r4
 800e6e4:	f000 fa00 	bl	800eae8 <uxr_session_header_offset>
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	9000      	str	r0, [sp, #0]
 800e6ec:	221c      	movs	r2, #28
 800e6ee:	a90b      	add	r1, sp, #44	@ 0x2c
 800e6f0:	a812      	add	r0, sp, #72	@ 0x48
 800e6f2:	f7fd f813 	bl	800b71c <ucdr_init_buffer_origin_offset>
 800e6f6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e6f8:	8a1a      	ldrh	r2, [r3, #16]
 800e6fa:	3a04      	subs	r2, #4
 800e6fc:	b292      	uxth	r2, r2
 800e6fe:	a912      	add	r1, sp, #72	@ 0x48
 800e700:	4620      	mov	r0, r4
 800e702:	f000 f917 	bl	800e934 <uxr_buffer_create_session>
 800e706:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e708:	4620      	mov	r0, r4
 800e70a:	f000 f983 	bl	800ea14 <uxr_stamp_create_session_header>
 800e70e:	a812      	add	r0, sp, #72	@ 0x48
 800e710:	f7fd f842 	bl	800b798 <ucdr_buffer_length>
 800e714:	23ff      	movs	r3, #255	@ 0xff
 800e716:	7163      	strb	r3, [r4, #5]
 800e718:	230a      	movs	r3, #10
 800e71a:	46da      	mov	sl, fp
 800e71c:	9303      	str	r3, [sp, #12]
 800e71e:	4683      	mov	fp, r0
 800e720:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e722:	465a      	mov	r2, fp
 800e724:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e728:	a90b      	add	r1, sp, #44	@ 0x2c
 800e72a:	47a8      	blx	r5
 800e72c:	f000 fb92 	bl	800ee54 <uxr_millis>
 800e730:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e734:	4605      	mov	r5, r0
 800e736:	e009      	b.n	800e74c <uxr_create_session+0x7c>
 800e738:	f000 fb8c 	bl	800ee54 <uxr_millis>
 800e73c:	1b40      	subs	r0, r0, r5
 800e73e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e742:	2b00      	cmp	r3, #0
 800e744:	7962      	ldrb	r2, [r4, #5]
 800e746:	dd38      	ble.n	800e7ba <uxr_create_session+0xea>
 800e748:	2aff      	cmp	r2, #255	@ 0xff
 800e74a:	d13c      	bne.n	800e7c6 <uxr_create_session+0xf6>
 800e74c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e74e:	a907      	add	r1, sp, #28
 800e750:	6896      	ldr	r6, [r2, #8]
 800e752:	6810      	ldr	r0, [r2, #0]
 800e754:	aa08      	add	r2, sp, #32
 800e756:	47b0      	blx	r6
 800e758:	2800      	cmp	r0, #0
 800e75a:	d0ed      	beq.n	800e738 <uxr_create_session+0x68>
 800e75c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e760:	a81a      	add	r0, sp, #104	@ 0x68
 800e762:	f7fc ffed 	bl	800b740 <ucdr_init_buffer>
 800e766:	2600      	movs	r6, #0
 800e768:	f10d 031a 	add.w	r3, sp, #26
 800e76c:	aa06      	add	r2, sp, #24
 800e76e:	a91a      	add	r1, sp, #104	@ 0x68
 800e770:	4620      	mov	r0, r4
 800e772:	f88d 6018 	strb.w	r6, [sp, #24]
 800e776:	f000 f975 	bl	800ea64 <uxr_read_session_header>
 800e77a:	2800      	cmp	r0, #0
 800e77c:	d0dc      	beq.n	800e738 <uxr_create_session+0x68>
 800e77e:	4631      	mov	r1, r6
 800e780:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e784:	f000 fa12 	bl	800ebac <uxr_stream_id_from_raw>
 800e788:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800e78c:	2e01      	cmp	r6, #1
 800e78e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e792:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800e796:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e79a:	d053      	beq.n	800e844 <uxr_create_session+0x174>
 800e79c:	2e02      	cmp	r6, #2
 800e79e:	d018      	beq.n	800e7d2 <uxr_create_session+0x102>
 800e7a0:	2e00      	cmp	r6, #0
 800e7a2:	d1c9      	bne.n	800e738 <uxr_create_session+0x68>
 800e7a4:	4631      	mov	r1, r6
 800e7a6:	4630      	mov	r0, r6
 800e7a8:	f000 fa00 	bl	800ebac <uxr_stream_id_from_raw>
 800e7ac:	a91a      	add	r1, sp, #104	@ 0x68
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	900a      	str	r0, [sp, #40]	@ 0x28
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f7ff fb1a 	bl	800ddec <read_submessage_list>
 800e7b8:	e7be      	b.n	800e738 <uxr_create_session+0x68>
 800e7ba:	9b03      	ldr	r3, [sp, #12]
 800e7bc:	3b01      	subs	r3, #1
 800e7be:	9303      	str	r3, [sp, #12]
 800e7c0:	d001      	beq.n	800e7c6 <uxr_create_session+0xf6>
 800e7c2:	2aff      	cmp	r2, #255	@ 0xff
 800e7c4:	d0ac      	beq.n	800e720 <uxr_create_session+0x50>
 800e7c6:	2a00      	cmp	r2, #0
 800e7c8:	d051      	beq.n	800e86e <uxr_create_session+0x19e>
 800e7ca:	2000      	movs	r0, #0
 800e7cc:	b02b      	add	sp, #172	@ 0xac
 800e7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e7d6:	9304      	str	r3, [sp, #16]
 800e7d8:	4639      	mov	r1, r7
 800e7da:	4650      	mov	r0, sl
 800e7dc:	f000 fad4 	bl	800ed88 <uxr_get_input_reliable_stream>
 800e7e0:	4680      	mov	r8, r0
 800e7e2:	b348      	cbz	r0, 800e838 <uxr_create_session+0x168>
 800e7e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e7e6:	9205      	str	r2, [sp, #20]
 800e7e8:	a81a      	add	r0, sp, #104	@ 0x68
 800e7ea:	f7fc ffd9 	bl	800b7a0 <ucdr_buffer_remaining>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	f10d 0019 	add.w	r0, sp, #25
 800e7f4:	9000      	str	r0, [sp, #0]
 800e7f6:	9a05      	ldr	r2, [sp, #20]
 800e7f8:	4649      	mov	r1, r9
 800e7fa:	4640      	mov	r0, r8
 800e7fc:	f006 fca4 	bl	8015148 <uxr_receive_reliable_message>
 800e800:	b1d0      	cbz	r0, 800e838 <uxr_create_session+0x168>
 800e802:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d038      	beq.n	800e87c <uxr_create_session+0x1ac>
 800e80a:	9e04      	ldr	r6, [sp, #16]
 800e80c:	e00a      	b.n	800e824 <uxr_create_session+0x154>
 800e80e:	f04f 0302 	mov.w	r3, #2
 800e812:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800e816:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800e81a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e81e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e820:	f7ff fae4 	bl	800ddec <read_submessage_list>
 800e824:	a922      	add	r1, sp, #136	@ 0x88
 800e826:	2204      	movs	r2, #4
 800e828:	4640      	mov	r0, r8
 800e82a:	f006 fd0d 	bl	8015248 <uxr_next_input_reliable_buffer_available>
 800e82e:	4603      	mov	r3, r0
 800e830:	a922      	add	r1, sp, #136	@ 0x88
 800e832:	4620      	mov	r0, r4
 800e834:	2b00      	cmp	r3, #0
 800e836:	d1ea      	bne.n	800e80e <uxr_create_session+0x13e>
 800e838:	9904      	ldr	r1, [sp, #16]
 800e83a:	463a      	mov	r2, r7
 800e83c:	4620      	mov	r0, r4
 800e83e:	f7ff f951 	bl	800dae4 <write_submessage_acknack.isra.0>
 800e842:	e779      	b.n	800e738 <uxr_create_session+0x68>
 800e844:	4639      	mov	r1, r7
 800e846:	4650      	mov	r0, sl
 800e848:	f000 fa94 	bl	800ed74 <uxr_get_input_best_effort_stream>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	f43f af73 	beq.w	800e738 <uxr_create_session+0x68>
 800e852:	4649      	mov	r1, r9
 800e854:	f006 fbe4 	bl	8015020 <uxr_receive_best_effort_message>
 800e858:	2800      	cmp	r0, #0
 800e85a:	f43f af6d 	beq.w	800e738 <uxr_create_session+0x68>
 800e85e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e862:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e864:	a91a      	add	r1, sp, #104	@ 0x68
 800e866:	4620      	mov	r0, r4
 800e868:	f7ff fac0 	bl	800ddec <read_submessage_list>
 800e86c:	e764      	b.n	800e738 <uxr_create_session+0x68>
 800e86e:	4650      	mov	r0, sl
 800e870:	f000 f9d0 	bl	800ec14 <uxr_reset_stream_storage>
 800e874:	2001      	movs	r0, #1
 800e876:	b02b      	add	sp, #172	@ 0xac
 800e878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e87c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e880:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e882:	a91a      	add	r1, sp, #104	@ 0x68
 800e884:	4620      	mov	r0, r4
 800e886:	f7ff fab1 	bl	800ddec <read_submessage_list>
 800e88a:	e7be      	b.n	800e80a <uxr_create_session+0x13a>

0800e88c <uxr_prepare_stream_to_write_submessage>:
 800e88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e890:	b082      	sub	sp, #8
 800e892:	4682      	mov	sl, r0
 800e894:	4610      	mov	r0, r2
 800e896:	4615      	mov	r5, r2
 800e898:	461e      	mov	r6, r3
 800e89a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800e89e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800e8a2:	9101      	str	r1, [sp, #4]
 800e8a4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e8a8:	f000 face 	bl	800ee48 <uxr_submessage_padding>
 800e8ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e8b0:	f105 0904 	add.w	r9, r5, #4
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	4481      	add	r9, r0
 800e8b8:	d01d      	beq.n	800e8f6 <uxr_prepare_stream_to_write_submessage+0x6a>
 800e8ba:	2b02      	cmp	r3, #2
 800e8bc:	d116      	bne.n	800e8ec <uxr_prepare_stream_to_write_submessage+0x60>
 800e8be:	4621      	mov	r1, r4
 800e8c0:	f10a 0008 	add.w	r0, sl, #8
 800e8c4:	f000 fa4c 	bl	800ed60 <uxr_get_output_reliable_stream>
 800e8c8:	4604      	mov	r4, r0
 800e8ca:	b158      	cbz	r0, 800e8e4 <uxr_prepare_stream_to_write_submessage+0x58>
 800e8cc:	4649      	mov	r1, r9
 800e8ce:	4632      	mov	r2, r6
 800e8d0:	f006 fe76 	bl	80155c0 <uxr_prepare_reliable_buffer_to_write>
 800e8d4:	4604      	mov	r4, r0
 800e8d6:	b12c      	cbz	r4, 800e8e4 <uxr_prepare_stream_to_write_submessage+0x58>
 800e8d8:	4643      	mov	r3, r8
 800e8da:	b2aa      	uxth	r2, r5
 800e8dc:	4639      	mov	r1, r7
 800e8de:	4630      	mov	r0, r6
 800e8e0:	f000 fa72 	bl	800edc8 <uxr_buffer_submessage_header>
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	b002      	add	sp, #8
 800e8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8ec:	2400      	movs	r4, #0
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	b002      	add	sp, #8
 800e8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8f6:	4621      	mov	r1, r4
 800e8f8:	f10a 0008 	add.w	r0, sl, #8
 800e8fc:	f000 fa28 	bl	800ed50 <uxr_get_output_best_effort_stream>
 800e900:	4604      	mov	r4, r0
 800e902:	2800      	cmp	r0, #0
 800e904:	d0ee      	beq.n	800e8e4 <uxr_prepare_stream_to_write_submessage+0x58>
 800e906:	4649      	mov	r1, r9
 800e908:	4632      	mov	r2, r6
 800e90a:	f006 fd89 	bl	8015420 <uxr_prepare_best_effort_buffer_to_write>
 800e90e:	4604      	mov	r4, r0
 800e910:	e7e1      	b.n	800e8d6 <uxr_prepare_stream_to_write_submessage+0x4a>
 800e912:	bf00      	nop

0800e914 <uxr_init_session_info>:
 800e914:	0e13      	lsrs	r3, r2, #24
 800e916:	7043      	strb	r3, [r0, #1]
 800e918:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e91c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e920:	7001      	strb	r1, [r0, #0]
 800e922:	70c3      	strb	r3, [r0, #3]
 800e924:	2109      	movs	r1, #9
 800e926:	23ff      	movs	r3, #255	@ 0xff
 800e928:	f880 c002 	strb.w	ip, [r0, #2]
 800e92c:	7102      	strb	r2, [r0, #4]
 800e92e:	80c1      	strh	r1, [r0, #6]
 800e930:	7143      	strb	r3, [r0, #5]
 800e932:	4770      	bx	lr

0800e934 <uxr_buffer_create_session>:
 800e934:	b530      	push	{r4, r5, lr}
 800e936:	b089      	sub	sp, #36	@ 0x24
 800e938:	2300      	movs	r3, #0
 800e93a:	4d12      	ldr	r5, [pc, #72]	@ (800e984 <uxr_buffer_create_session+0x50>)
 800e93c:	9307      	str	r3, [sp, #28]
 800e93e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e942:	2201      	movs	r2, #1
 800e944:	9301      	str	r3, [sp, #4]
 800e946:	80c2      	strh	r2, [r0, #6]
 800e948:	f88d 2004 	strb.w	r2, [sp, #4]
 800e94c:	682a      	ldr	r2, [r5, #0]
 800e94e:	9200      	str	r2, [sp, #0]
 800e950:	88aa      	ldrh	r2, [r5, #4]
 800e952:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e956:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800e95a:	9202      	str	r2, [sp, #8]
 800e95c:	460c      	mov	r4, r1
 800e95e:	7802      	ldrb	r2, [r0, #0]
 800e960:	9303      	str	r3, [sp, #12]
 800e962:	4619      	mov	r1, r3
 800e964:	f88d 200c 	strb.w	r2, [sp, #12]
 800e968:	4620      	mov	r0, r4
 800e96a:	2210      	movs	r2, #16
 800e96c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800e970:	9306      	str	r3, [sp, #24]
 800e972:	f000 fa29 	bl	800edc8 <uxr_buffer_submessage_header>
 800e976:	4669      	mov	r1, sp
 800e978:	4620      	mov	r0, r4
 800e97a:	f001 fa6d 	bl	800fe58 <uxr_serialize_CREATE_CLIENT_Payload>
 800e97e:	b009      	add	sp, #36	@ 0x24
 800e980:	bd30      	pop	{r4, r5, pc}
 800e982:	bf00      	nop
 800e984:	080186d4 	.word	0x080186d4

0800e988 <uxr_buffer_delete_session>:
 800e988:	b510      	push	{r4, lr}
 800e98a:	4b0c      	ldr	r3, [pc, #48]	@ (800e9bc <uxr_buffer_delete_session+0x34>)
 800e98c:	b082      	sub	sp, #8
 800e98e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800e992:	f8ad c006 	strh.w	ip, [sp, #6]
 800e996:	460c      	mov	r4, r1
 800e998:	2202      	movs	r2, #2
 800e99a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e99e:	80c2      	strh	r2, [r0, #6]
 800e9a0:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e9a4:	2204      	movs	r2, #4
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	2103      	movs	r1, #3
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	f000 fa0c 	bl	800edc8 <uxr_buffer_submessage_header>
 800e9b0:	a901      	add	r1, sp, #4
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	f001 faf6 	bl	800ffa4 <uxr_serialize_DELETE_Payload>
 800e9b8:	b002      	add	sp, #8
 800e9ba:	bd10      	pop	{r4, pc}
 800e9bc:	080186d4 	.word	0x080186d4

0800e9c0 <uxr_read_create_session_status>:
 800e9c0:	b510      	push	{r4, lr}
 800e9c2:	b088      	sub	sp, #32
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	4608      	mov	r0, r1
 800e9c8:	a901      	add	r1, sp, #4
 800e9ca:	f001 fafb 	bl	800ffc4 <uxr_deserialize_STATUS_AGENT_Payload>
 800e9ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e9d2:	7163      	strb	r3, [r4, #5]
 800e9d4:	b008      	add	sp, #32
 800e9d6:	bd10      	pop	{r4, pc}

0800e9d8 <uxr_read_delete_session_status>:
 800e9d8:	b510      	push	{r4, lr}
 800e9da:	4604      	mov	r4, r0
 800e9dc:	b084      	sub	sp, #16
 800e9de:	4608      	mov	r0, r1
 800e9e0:	a902      	add	r1, sp, #8
 800e9e2:	f001 fb1f 	bl	8010024 <uxr_deserialize_STATUS_Payload>
 800e9e6:	88e3      	ldrh	r3, [r4, #6]
 800e9e8:	2b02      	cmp	r3, #2
 800e9ea:	d001      	beq.n	800e9f0 <uxr_read_delete_session_status+0x18>
 800e9ec:	b004      	add	sp, #16
 800e9ee:	bd10      	pop	{r4, pc}
 800e9f0:	f10d 000a 	add.w	r0, sp, #10
 800e9f4:	f7fe fffc 	bl	800d9f0 <uxr_object_id_from_raw>
 800e9f8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e9fc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800ea00:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	2b02      	cmp	r3, #2
 800ea08:	bf04      	itt	eq
 800ea0a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800ea0e:	7163      	strbeq	r3, [r4, #5]
 800ea10:	b004      	add	sp, #16
 800ea12:	bd10      	pop	{r4, pc}

0800ea14 <uxr_stamp_create_session_header>:
 800ea14:	b510      	push	{r4, lr}
 800ea16:	2208      	movs	r2, #8
 800ea18:	b08a      	sub	sp, #40	@ 0x28
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	eb0d 0002 	add.w	r0, sp, r2
 800ea20:	f7fc fe8e 	bl	800b740 <ucdr_init_buffer>
 800ea24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea28:	9400      	str	r4, [sp, #0]
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800ea32:	a802      	add	r0, sp, #8
 800ea34:	f000 fbc2 	bl	800f1bc <uxr_serialize_message_header>
 800ea38:	b00a      	add	sp, #40	@ 0x28
 800ea3a:	bd10      	pop	{r4, pc}

0800ea3c <uxr_stamp_session_header>:
 800ea3c:	b530      	push	{r4, r5, lr}
 800ea3e:	b08d      	sub	sp, #52	@ 0x34
 800ea40:	4604      	mov	r4, r0
 800ea42:	460d      	mov	r5, r1
 800ea44:	9203      	str	r2, [sp, #12]
 800ea46:	4619      	mov	r1, r3
 800ea48:	a804      	add	r0, sp, #16
 800ea4a:	2208      	movs	r2, #8
 800ea4c:	f7fc fe78 	bl	800b740 <ucdr_init_buffer>
 800ea50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea54:	9b03      	ldr	r3, [sp, #12]
 800ea56:	9400      	str	r4, [sp, #0]
 800ea58:	462a      	mov	r2, r5
 800ea5a:	a804      	add	r0, sp, #16
 800ea5c:	f000 fbae 	bl	800f1bc <uxr_serialize_message_header>
 800ea60:	b00d      	add	sp, #52	@ 0x34
 800ea62:	bd30      	pop	{r4, r5, pc}

0800ea64 <uxr_read_session_header>:
 800ea64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea68:	4607      	mov	r7, r0
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	4608      	mov	r0, r1
 800ea6e:	460c      	mov	r4, r1
 800ea70:	4615      	mov	r5, r2
 800ea72:	461e      	mov	r6, r3
 800ea74:	f7fc fe94 	bl	800b7a0 <ucdr_buffer_remaining>
 800ea78:	2808      	cmp	r0, #8
 800ea7a:	d803      	bhi.n	800ea84 <uxr_read_session_header+0x20>
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	b004      	add	sp, #16
 800ea80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea84:	f10d 080c 	add.w	r8, sp, #12
 800ea88:	4633      	mov	r3, r6
 800ea8a:	462a      	mov	r2, r5
 800ea8c:	f8cd 8000 	str.w	r8, [sp]
 800ea90:	4620      	mov	r0, r4
 800ea92:	f10d 010b 	add.w	r1, sp, #11
 800ea96:	f000 fbaf 	bl	800f1f8 <uxr_deserialize_message_header>
 800ea9a:	783a      	ldrb	r2, [r7, #0]
 800ea9c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800eaa0:	4293      	cmp	r3, r2
 800eaa2:	d1eb      	bne.n	800ea7c <uxr_read_session_header+0x18>
 800eaa4:	061b      	lsls	r3, r3, #24
 800eaa6:	d41c      	bmi.n	800eae2 <uxr_read_session_header+0x7e>
 800eaa8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800eaac:	787b      	ldrb	r3, [r7, #1]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d003      	beq.n	800eaba <uxr_read_session_header+0x56>
 800eab2:	2001      	movs	r0, #1
 800eab4:	f080 0001 	eor.w	r0, r0, #1
 800eab8:	e7e1      	b.n	800ea7e <uxr_read_session_header+0x1a>
 800eaba:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800eabe:	78bb      	ldrb	r3, [r7, #2]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	f107 0102 	add.w	r1, r7, #2
 800eac6:	d1f4      	bne.n	800eab2 <uxr_read_session_header+0x4e>
 800eac8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800eacc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d1ee      	bne.n	800eab2 <uxr_read_session_header+0x4e>
 800ead4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ead8:	784b      	ldrb	r3, [r1, #1]
 800eada:	429a      	cmp	r2, r3
 800eadc:	d1e9      	bne.n	800eab2 <uxr_read_session_header+0x4e>
 800eade:	2000      	movs	r0, #0
 800eae0:	e7e8      	b.n	800eab4 <uxr_read_session_header+0x50>
 800eae2:	2001      	movs	r0, #1
 800eae4:	e7cb      	b.n	800ea7e <uxr_read_session_header+0x1a>
 800eae6:	bf00      	nop

0800eae8 <uxr_session_header_offset>:
 800eae8:	f990 3000 	ldrsb.w	r3, [r0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	bfac      	ite	ge
 800eaf0:	2008      	movge	r0, #8
 800eaf2:	2004      	movlt	r0, #4
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop

0800eaf8 <uxr_init_base_object_request>:
 800eaf8:	b510      	push	{r4, lr}
 800eafa:	88c3      	ldrh	r3, [r0, #6]
 800eafc:	b082      	sub	sp, #8
 800eafe:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800eb02:	9101      	str	r1, [sp, #4]
 800eb04:	f1a3 010a 	sub.w	r1, r3, #10
 800eb08:	b289      	uxth	r1, r1
 800eb0a:	42a1      	cmp	r1, r4
 800eb0c:	d80e      	bhi.n	800eb2c <uxr_init_base_object_request+0x34>
 800eb0e:	3301      	adds	r3, #1
 800eb10:	b29c      	uxth	r4, r3
 800eb12:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	80c4      	strh	r4, [r0, #6]
 800eb1a:	9801      	ldr	r0, [sp, #4]
 800eb1c:	7011      	strb	r1, [r2, #0]
 800eb1e:	7053      	strb	r3, [r2, #1]
 800eb20:	1c91      	adds	r1, r2, #2
 800eb22:	f7fe ff79 	bl	800da18 <uxr_object_id_to_raw>
 800eb26:	4620      	mov	r0, r4
 800eb28:	b002      	add	sp, #8
 800eb2a:	bd10      	pop	{r4, pc}
 800eb2c:	230a      	movs	r3, #10
 800eb2e:	2100      	movs	r1, #0
 800eb30:	461c      	mov	r4, r3
 800eb32:	e7f1      	b.n	800eb18 <uxr_init_base_object_request+0x20>

0800eb34 <uxr_parse_base_object_request>:
 800eb34:	b570      	push	{r4, r5, r6, lr}
 800eb36:	4604      	mov	r4, r0
 800eb38:	3002      	adds	r0, #2
 800eb3a:	460d      	mov	r5, r1
 800eb3c:	4616      	mov	r6, r2
 800eb3e:	f7fe ff57 	bl	800d9f0 <uxr_object_id_from_raw>
 800eb42:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800eb46:	8028      	strh	r0, [r5, #0]
 800eb48:	806b      	strh	r3, [r5, #2]
 800eb4a:	7822      	ldrb	r2, [r4, #0]
 800eb4c:	7863      	ldrb	r3, [r4, #1]
 800eb4e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800eb52:	8033      	strh	r3, [r6, #0]
 800eb54:	bd70      	pop	{r4, r5, r6, pc}
 800eb56:	bf00      	nop

0800eb58 <uxr_stream_id>:
 800eb58:	2901      	cmp	r1, #1
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	d01d      	beq.n	800eb9a <uxr_stream_id+0x42>
 800eb5e:	2902      	cmp	r1, #2
 800eb60:	f04f 0c00 	mov.w	ip, #0
 800eb64:	d01e      	beq.n	800eba4 <uxr_stream_id+0x4c>
 800eb66:	2300      	movs	r3, #0
 800eb68:	f36c 0307 	bfi	r3, ip, #0, #8
 800eb6c:	f360 230f 	bfi	r3, r0, #8, #8
 800eb70:	f361 4317 	bfi	r3, r1, #16, #8
 800eb74:	f362 631f 	bfi	r3, r2, #24, #8
 800eb78:	b2da      	uxtb	r2, r3
 800eb7a:	2000      	movs	r0, #0
 800eb7c:	f362 0007 	bfi	r0, r2, #0, #8
 800eb80:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800eb84:	f362 200f 	bfi	r0, r2, #8, #8
 800eb88:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800eb8c:	f362 4017 	bfi	r0, r2, #16, #8
 800eb90:	0e1b      	lsrs	r3, r3, #24
 800eb92:	f363 601f 	bfi	r0, r3, #24, #8
 800eb96:	b002      	add	sp, #8
 800eb98:	4770      	bx	lr
 800eb9a:	f100 0c01 	add.w	ip, r0, #1
 800eb9e:	fa5f fc8c 	uxtb.w	ip, ip
 800eba2:	e7e0      	b.n	800eb66 <uxr_stream_id+0xe>
 800eba4:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800eba8:	e7dd      	b.n	800eb66 <uxr_stream_id+0xe>
 800ebaa:	bf00      	nop

0800ebac <uxr_stream_id_from_raw>:
 800ebac:	b082      	sub	sp, #8
 800ebae:	b130      	cbz	r0, 800ebbe <uxr_stream_id_from_raw+0x12>
 800ebb0:	0603      	lsls	r3, r0, #24
 800ebb2:	d420      	bmi.n	800ebf6 <uxr_stream_id_from_raw+0x4a>
 800ebb4:	1e42      	subs	r2, r0, #1
 800ebb6:	b2d2      	uxtb	r2, r2
 800ebb8:	f04f 0c01 	mov.w	ip, #1
 800ebbc:	e001      	b.n	800ebc2 <uxr_stream_id_from_raw+0x16>
 800ebbe:	4684      	mov	ip, r0
 800ebc0:	4602      	mov	r2, r0
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	f360 0307 	bfi	r3, r0, #0, #8
 800ebc8:	f362 230f 	bfi	r3, r2, #8, #8
 800ebcc:	f36c 4317 	bfi	r3, ip, #16, #8
 800ebd0:	f361 631f 	bfi	r3, r1, #24, #8
 800ebd4:	b2da      	uxtb	r2, r3
 800ebd6:	2000      	movs	r0, #0
 800ebd8:	f362 0007 	bfi	r0, r2, #0, #8
 800ebdc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ebe0:	f362 200f 	bfi	r0, r2, #8, #8
 800ebe4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ebe8:	f362 4017 	bfi	r0, r2, #16, #8
 800ebec:	0e1b      	lsrs	r3, r3, #24
 800ebee:	f363 601f 	bfi	r0, r3, #24, #8
 800ebf2:	b002      	add	sp, #8
 800ebf4:	4770      	bx	lr
 800ebf6:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800ebfa:	f04f 0c02 	mov.w	ip, #2
 800ebfe:	e7e0      	b.n	800ebc2 <uxr_stream_id_from_raw+0x16>

0800ec00 <uxr_init_stream_storage>:
 800ec00:	2300      	movs	r3, #0
 800ec02:	7403      	strb	r3, [r0, #16]
 800ec04:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800ec08:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800ec0c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800ec10:	4770      	bx	lr
 800ec12:	bf00      	nop

0800ec14 <uxr_reset_stream_storage>:
 800ec14:	b570      	push	{r4, r5, r6, lr}
 800ec16:	7c03      	ldrb	r3, [r0, #16]
 800ec18:	4604      	mov	r4, r0
 800ec1a:	b153      	cbz	r3, 800ec32 <uxr_reset_stream_storage+0x1e>
 800ec1c:	4606      	mov	r6, r0
 800ec1e:	2500      	movs	r5, #0
 800ec20:	4630      	mov	r0, r6
 800ec22:	f006 fbf7 	bl	8015414 <uxr_reset_output_best_effort_stream>
 800ec26:	7c23      	ldrb	r3, [r4, #16]
 800ec28:	3501      	adds	r5, #1
 800ec2a:	42ab      	cmp	r3, r5
 800ec2c:	f106 0610 	add.w	r6, r6, #16
 800ec30:	d8f6      	bhi.n	800ec20 <uxr_reset_stream_storage+0xc>
 800ec32:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ec36:	b163      	cbz	r3, 800ec52 <uxr_reset_stream_storage+0x3e>
 800ec38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec3c:	2500      	movs	r5, #0
 800ec3e:	4630      	mov	r0, r6
 800ec40:	f006 f9ea 	bl	8015018 <uxr_reset_input_best_effort_stream>
 800ec44:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ec48:	3501      	adds	r5, #1
 800ec4a:	42ab      	cmp	r3, r5
 800ec4c:	f106 0602 	add.w	r6, r6, #2
 800ec50:	d8f5      	bhi.n	800ec3e <uxr_reset_stream_storage+0x2a>
 800ec52:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ec56:	b163      	cbz	r3, 800ec72 <uxr_reset_stream_storage+0x5e>
 800ec58:	f104 0618 	add.w	r6, r4, #24
 800ec5c:	2500      	movs	r5, #0
 800ec5e:	4630      	mov	r0, r6
 800ec60:	f006 fc84 	bl	801556c <uxr_reset_output_reliable_stream>
 800ec64:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ec68:	3501      	adds	r5, #1
 800ec6a:	42ab      	cmp	r3, r5
 800ec6c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800ec70:	d8f5      	bhi.n	800ec5e <uxr_reset_stream_storage+0x4a>
 800ec72:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ec76:	b163      	cbz	r3, 800ec92 <uxr_reset_stream_storage+0x7e>
 800ec78:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800ec7c:	2500      	movs	r5, #0
 800ec7e:	4630      	mov	r0, r6
 800ec80:	f006 fa3e 	bl	8015100 <uxr_reset_input_reliable_stream>
 800ec84:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ec88:	3501      	adds	r5, #1
 800ec8a:	42ab      	cmp	r3, r5
 800ec8c:	f106 0618 	add.w	r6, r6, #24
 800ec90:	d8f5      	bhi.n	800ec7e <uxr_reset_stream_storage+0x6a>
 800ec92:	bd70      	pop	{r4, r5, r6, pc}

0800ec94 <uxr_add_output_best_effort_buffer>:
 800ec94:	b510      	push	{r4, lr}
 800ec96:	7c04      	ldrb	r4, [r0, #16]
 800ec98:	f104 0c01 	add.w	ip, r4, #1
 800ec9c:	b082      	sub	sp, #8
 800ec9e:	f880 c010 	strb.w	ip, [r0, #16]
 800eca2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800eca6:	f006 fbab 	bl	8015400 <uxr_init_output_best_effort_stream>
 800ecaa:	2201      	movs	r2, #1
 800ecac:	4611      	mov	r1, r2
 800ecae:	4620      	mov	r0, r4
 800ecb0:	b002      	add	sp, #8
 800ecb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecb6:	f7ff bf4f 	b.w	800eb58 <uxr_stream_id>
 800ecba:	bf00      	nop

0800ecbc <uxr_add_output_reliable_buffer>:
 800ecbc:	b510      	push	{r4, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	4684      	mov	ip, r0
 800ecc2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ecc6:	9000      	str	r0, [sp, #0]
 800ecc8:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800eccc:	2028      	movs	r0, #40	@ 0x28
 800ecce:	fb00 c004 	mla	r0, r0, r4, ip
 800ecd2:	f104 0e01 	add.w	lr, r4, #1
 800ecd6:	3018      	adds	r0, #24
 800ecd8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800ecdc:	f006 fc0e 	bl	80154fc <uxr_init_output_reliable_stream>
 800ece0:	2201      	movs	r2, #1
 800ece2:	2102      	movs	r1, #2
 800ece4:	4620      	mov	r0, r4
 800ece6:	b004      	add	sp, #16
 800ece8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecec:	f7ff bf34 	b.w	800eb58 <uxr_stream_id>

0800ecf0 <uxr_add_input_best_effort_buffer>:
 800ecf0:	b510      	push	{r4, lr}
 800ecf2:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	1c62      	adds	r2, r4, #1
 800ecfa:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800ecfe:	b082      	sub	sp, #8
 800ed00:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ed04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ed08:	f006 f982 	bl	8015010 <uxr_init_input_best_effort_stream>
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	2101      	movs	r1, #1
 800ed10:	4620      	mov	r0, r4
 800ed12:	b002      	add	sp, #8
 800ed14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed18:	f7ff bf1e 	b.w	800eb58 <uxr_stream_id>

0800ed1c <uxr_add_input_reliable_buffer>:
 800ed1c:	b510      	push	{r4, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	4684      	mov	ip, r0
 800ed22:	9806      	ldr	r0, [sp, #24]
 800ed24:	9000      	str	r0, [sp, #0]
 800ed26:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800ed2a:	2018      	movs	r0, #24
 800ed2c:	fb00 c004 	mla	r0, r0, r4, ip
 800ed30:	f104 0e01 	add.w	lr, r4, #1
 800ed34:	3048      	adds	r0, #72	@ 0x48
 800ed36:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800ed3a:	f006 f9b5 	bl	80150a8 <uxr_init_input_reliable_stream>
 800ed3e:	2200      	movs	r2, #0
 800ed40:	2102      	movs	r1, #2
 800ed42:	4620      	mov	r0, r4
 800ed44:	b004      	add	sp, #16
 800ed46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed4a:	f7ff bf05 	b.w	800eb58 <uxr_stream_id>
 800ed4e:	bf00      	nop

0800ed50 <uxr_get_output_best_effort_stream>:
 800ed50:	7c03      	ldrb	r3, [r0, #16]
 800ed52:	428b      	cmp	r3, r1
 800ed54:	bf8c      	ite	hi
 800ed56:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800ed5a:	2000      	movls	r0, #0
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop

0800ed60 <uxr_get_output_reliable_stream>:
 800ed60:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ed64:	428b      	cmp	r3, r1
 800ed66:	bf83      	ittte	hi
 800ed68:	2328      	movhi	r3, #40	@ 0x28
 800ed6a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ed6e:	3018      	addhi	r0, #24
 800ed70:	2000      	movls	r0, #0
 800ed72:	4770      	bx	lr

0800ed74 <uxr_get_input_best_effort_stream>:
 800ed74:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ed78:	428b      	cmp	r3, r1
 800ed7a:	bf86      	itte	hi
 800ed7c:	3121      	addhi	r1, #33	@ 0x21
 800ed7e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800ed82:	2000      	movls	r0, #0
 800ed84:	4770      	bx	lr
 800ed86:	bf00      	nop

0800ed88 <uxr_get_input_reliable_stream>:
 800ed88:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800ed8c:	428b      	cmp	r3, r1
 800ed8e:	bf83      	ittte	hi
 800ed90:	2318      	movhi	r3, #24
 800ed92:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ed96:	3048      	addhi	r0, #72	@ 0x48
 800ed98:	2000      	movls	r0, #0
 800ed9a:	4770      	bx	lr

0800ed9c <uxr_output_streams_confirmed>:
 800ed9c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800eda0:	b183      	cbz	r3, 800edc4 <uxr_output_streams_confirmed+0x28>
 800eda2:	b570      	push	{r4, r5, r6, lr}
 800eda4:	4606      	mov	r6, r0
 800eda6:	f100 0518 	add.w	r5, r0, #24
 800edaa:	2400      	movs	r4, #0
 800edac:	e001      	b.n	800edb2 <uxr_output_streams_confirmed+0x16>
 800edae:	3528      	adds	r5, #40	@ 0x28
 800edb0:	b138      	cbz	r0, 800edc2 <uxr_output_streams_confirmed+0x26>
 800edb2:	4628      	mov	r0, r5
 800edb4:	f006 fe4a 	bl	8015a4c <uxr_is_output_up_to_date>
 800edb8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800edbc:	3401      	adds	r4, #1
 800edbe:	42a3      	cmp	r3, r4
 800edc0:	d8f5      	bhi.n	800edae <uxr_output_streams_confirmed+0x12>
 800edc2:	bd70      	pop	{r4, r5, r6, pc}
 800edc4:	2001      	movs	r0, #1
 800edc6:	4770      	bx	lr

0800edc8 <uxr_buffer_submessage_header>:
 800edc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edca:	4604      	mov	r4, r0
 800edcc:	460e      	mov	r6, r1
 800edce:	2104      	movs	r1, #4
 800edd0:	4615      	mov	r5, r2
 800edd2:	461f      	mov	r7, r3
 800edd4:	f7fc fcce 	bl	800b774 <ucdr_align_to>
 800edd8:	2301      	movs	r3, #1
 800edda:	ea47 0203 	orr.w	r2, r7, r3
 800edde:	4631      	mov	r1, r6
 800ede0:	7523      	strb	r3, [r4, #20]
 800ede2:	4620      	mov	r0, r4
 800ede4:	462b      	mov	r3, r5
 800ede6:	f000 fa27 	bl	800f238 <uxr_serialize_submessage_header>
 800edea:	4620      	mov	r0, r4
 800edec:	f7fc fcd8 	bl	800b7a0 <ucdr_buffer_remaining>
 800edf0:	42a8      	cmp	r0, r5
 800edf2:	bf34      	ite	cc
 800edf4:	2000      	movcc	r0, #0
 800edf6:	2001      	movcs	r0, #1
 800edf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edfa:	bf00      	nop

0800edfc <uxr_read_submessage_header>:
 800edfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee00:	4604      	mov	r4, r0
 800ee02:	460d      	mov	r5, r1
 800ee04:	2104      	movs	r1, #4
 800ee06:	4616      	mov	r6, r2
 800ee08:	4698      	mov	r8, r3
 800ee0a:	f7fc fcb3 	bl	800b774 <ucdr_align_to>
 800ee0e:	4620      	mov	r0, r4
 800ee10:	f7fc fcc6 	bl	800b7a0 <ucdr_buffer_remaining>
 800ee14:	2803      	cmp	r0, #3
 800ee16:	bf8c      	ite	hi
 800ee18:	2701      	movhi	r7, #1
 800ee1a:	2700      	movls	r7, #0
 800ee1c:	d802      	bhi.n	800ee24 <uxr_read_submessage_header+0x28>
 800ee1e:	4638      	mov	r0, r7
 800ee20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee24:	4633      	mov	r3, r6
 800ee26:	4642      	mov	r2, r8
 800ee28:	4620      	mov	r0, r4
 800ee2a:	4629      	mov	r1, r5
 800ee2c:	f000 fa18 	bl	800f260 <uxr_deserialize_submessage_header>
 800ee30:	f898 3000 	ldrb.w	r3, [r8]
 800ee34:	f003 0201 	and.w	r2, r3, #1
 800ee38:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800ee3c:	f888 3000 	strb.w	r3, [r8]
 800ee40:	7522      	strb	r2, [r4, #20]
 800ee42:	4638      	mov	r0, r7
 800ee44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ee48 <uxr_submessage_padding>:
 800ee48:	f010 0003 	ands.w	r0, r0, #3
 800ee4c:	bf18      	it	ne
 800ee4e:	f1c0 0004 	rsbne	r0, r0, #4
 800ee52:	4770      	bx	lr

0800ee54 <uxr_millis>:
 800ee54:	b510      	push	{r4, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	4669      	mov	r1, sp
 800ee5a:	2001      	movs	r0, #1
 800ee5c:	f7f3 f9b4 	bl	80021c8 <clock_gettime>
 800ee60:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800ee64:	4906      	ldr	r1, [pc, #24]	@ (800ee80 <uxr_millis+0x2c>)
 800ee66:	fba0 0301 	umull	r0, r3, r0, r1
 800ee6a:	1900      	adds	r0, r0, r4
 800ee6c:	fb01 3102 	mla	r1, r1, r2, r3
 800ee70:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800ee74:	4a03      	ldr	r2, [pc, #12]	@ (800ee84 <uxr_millis+0x30>)
 800ee76:	2300      	movs	r3, #0
 800ee78:	f7f1 feb8 	bl	8000bec <__aeabi_ldivmod>
 800ee7c:	b004      	add	sp, #16
 800ee7e:	bd10      	pop	{r4, pc}
 800ee80:	3b9aca00 	.word	0x3b9aca00
 800ee84:	000f4240 	.word	0x000f4240

0800ee88 <uxr_nanos>:
 800ee88:	b510      	push	{r4, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	4669      	mov	r1, sp
 800ee8e:	2001      	movs	r0, #1
 800ee90:	f7f3 f99a 	bl	80021c8 <clock_gettime>
 800ee94:	4a06      	ldr	r2, [pc, #24]	@ (800eeb0 <uxr_nanos+0x28>)
 800ee96:	9800      	ldr	r0, [sp, #0]
 800ee98:	9902      	ldr	r1, [sp, #8]
 800ee9a:	9c01      	ldr	r4, [sp, #4]
 800ee9c:	fba0 0302 	umull	r0, r3, r0, r2
 800eea0:	1840      	adds	r0, r0, r1
 800eea2:	fb02 3304 	mla	r3, r2, r4, r3
 800eea6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800eeaa:	b004      	add	sp, #16
 800eeac:	bd10      	pop	{r4, pc}
 800eeae:	bf00      	nop
 800eeb0:	3b9aca00 	.word	0x3b9aca00

0800eeb4 <on_full_output_buffer_fragmented>:
 800eeb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeb8:	460c      	mov	r4, r1
 800eeba:	b08a      	sub	sp, #40	@ 0x28
 800eebc:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800eec0:	4606      	mov	r6, r0
 800eec2:	f104 0008 	add.w	r0, r4, #8
 800eec6:	f7ff ff4b 	bl	800ed60 <uxr_get_output_reliable_stream>
 800eeca:	4605      	mov	r5, r0
 800eecc:	f006 fdc8 	bl	8015a60 <get_available_free_slots>
 800eed0:	b968      	cbnz	r0, 800eeee <on_full_output_buffer_fragmented+0x3a>
 800eed2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800eed6:	4620      	mov	r0, r4
 800eed8:	4798      	blx	r3
 800eeda:	b918      	cbnz	r0, 800eee4 <on_full_output_buffer_fragmented+0x30>
 800eedc:	2001      	movs	r0, #1
 800eede:	b00a      	add	sp, #40	@ 0x28
 800eee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee4:	4628      	mov	r0, r5
 800eee6:	f006 fdbb 	bl	8015a60 <get_available_free_slots>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	d0f6      	beq.n	800eedc <on_full_output_buffer_fragmented+0x28>
 800eeee:	8929      	ldrh	r1, [r5, #8]
 800eef0:	89eb      	ldrh	r3, [r5, #14]
 800eef2:	7b28      	ldrb	r0, [r5, #12]
 800eef4:	686a      	ldr	r2, [r5, #4]
 800eef6:	fbb2 f8f1 	udiv	r8, r2, r1
 800eefa:	fbb3 f2f1 	udiv	r2, r3, r1
 800eefe:	fb01 3112 	mls	r1, r1, r2, r3
 800ef02:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800ef06:	b289      	uxth	r1, r1
 800ef08:	fb08 f101 	mul.w	r1, r8, r1
 800ef0c:	30fc      	adds	r0, #252	@ 0xfc
 800ef0e:	f1a8 0804 	sub.w	r8, r8, #4
 800ef12:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800ef16:	4440      	add	r0, r8
 800ef18:	b287      	uxth	r7, r0
 800ef1a:	1bdb      	subs	r3, r3, r7
 800ef1c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800ef20:	682b      	ldr	r3, [r5, #0]
 800ef22:	3104      	adds	r1, #4
 800ef24:	4419      	add	r1, r3
 800ef26:	4642      	mov	r2, r8
 800ef28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef2c:	9300      	str	r3, [sp, #0]
 800ef2e:	a802      	add	r0, sp, #8
 800ef30:	2300      	movs	r3, #0
 800ef32:	f7fc fbf3 	bl	800b71c <ucdr_init_buffer_origin_offset>
 800ef36:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800ef3a:	f102 0308 	add.w	r3, r2, #8
 800ef3e:	4543      	cmp	r3, r8
 800ef40:	d928      	bls.n	800ef94 <on_full_output_buffer_fragmented+0xe0>
 800ef42:	463a      	mov	r2, r7
 800ef44:	2300      	movs	r3, #0
 800ef46:	210d      	movs	r1, #13
 800ef48:	a802      	add	r0, sp, #8
 800ef4a:	f7ff ff3d 	bl	800edc8 <uxr_buffer_submessage_header>
 800ef4e:	8929      	ldrh	r1, [r5, #8]
 800ef50:	89eb      	ldrh	r3, [r5, #14]
 800ef52:	fbb3 f2f1 	udiv	r2, r3, r1
 800ef56:	fb01 3312 	mls	r3, r1, r2, r3
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	686a      	ldr	r2, [r5, #4]
 800ef5e:	fbb2 f2f1 	udiv	r2, r2, r1
 800ef62:	fb02 f303 	mul.w	r3, r2, r3
 800ef66:	682a      	ldr	r2, [r5, #0]
 800ef68:	f842 8003 	str.w	r8, [r2, r3]
 800ef6c:	89e8      	ldrh	r0, [r5, #14]
 800ef6e:	2101      	movs	r1, #1
 800ef70:	f006 fec6 	bl	8015d00 <uxr_seq_num_add>
 800ef74:	9904      	ldr	r1, [sp, #16]
 800ef76:	9a03      	ldr	r2, [sp, #12]
 800ef78:	81e8      	strh	r0, [r5, #14]
 800ef7a:	1a52      	subs	r2, r2, r1
 800ef7c:	4630      	mov	r0, r6
 800ef7e:	f7fc fbdf 	bl	800b740 <ucdr_init_buffer>
 800ef82:	4630      	mov	r0, r6
 800ef84:	490f      	ldr	r1, [pc, #60]	@ (800efc4 <on_full_output_buffer_fragmented+0x110>)
 800ef86:	4622      	mov	r2, r4
 800ef88:	f7fc fbae 	bl	800b6e8 <ucdr_set_on_full_buffer_callback>
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	b00a      	add	sp, #40	@ 0x28
 800ef90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef94:	b292      	uxth	r2, r2
 800ef96:	2302      	movs	r3, #2
 800ef98:	210d      	movs	r1, #13
 800ef9a:	a802      	add	r0, sp, #8
 800ef9c:	f7ff ff14 	bl	800edc8 <uxr_buffer_submessage_header>
 800efa0:	8928      	ldrh	r0, [r5, #8]
 800efa2:	89eb      	ldrh	r3, [r5, #14]
 800efa4:	fbb3 f1f0 	udiv	r1, r3, r0
 800efa8:	fb00 3311 	mls	r3, r0, r1, r3
 800efac:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800efb0:	6869      	ldr	r1, [r5, #4]
 800efb2:	fbb1 f1f0 	udiv	r1, r1, r0
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	fb01 f303 	mul.w	r3, r1, r3
 800efbc:	6829      	ldr	r1, [r5, #0]
 800efbe:	3208      	adds	r2, #8
 800efc0:	50ca      	str	r2, [r1, r3]
 800efc2:	e7d3      	b.n	800ef6c <on_full_output_buffer_fragmented+0xb8>
 800efc4:	0800eeb5 	.word	0x0800eeb5

0800efc8 <uxr_prepare_output_stream>:
 800efc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efca:	b087      	sub	sp, #28
 800efcc:	2707      	movs	r7, #7
 800efce:	9202      	str	r2, [sp, #8]
 800efd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800efd2:	9103      	str	r1, [sp, #12]
 800efd4:	2500      	movs	r5, #0
 800efd6:	3204      	adds	r2, #4
 800efd8:	e9cd 7500 	strd	r7, r5, [sp]
 800efdc:	461c      	mov	r4, r3
 800efde:	4606      	mov	r6, r0
 800efe0:	f7ff fc54 	bl	800e88c <uxr_prepare_stream_to_write_submessage>
 800efe4:	f080 0201 	eor.w	r2, r0, #1
 800efe8:	b2d2      	uxtb	r2, r2
 800efea:	75a2      	strb	r2, [r4, #22]
 800efec:	b112      	cbz	r2, 800eff4 <uxr_prepare_output_stream+0x2c>
 800efee:	4628      	mov	r0, r5
 800eff0:	b007      	add	sp, #28
 800eff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eff4:	aa05      	add	r2, sp, #20
 800eff6:	9902      	ldr	r1, [sp, #8]
 800eff8:	4630      	mov	r0, r6
 800effa:	f7ff fd7d 	bl	800eaf8 <uxr_init_base_object_request>
 800effe:	a905      	add	r1, sp, #20
 800f000:	4605      	mov	r5, r0
 800f002:	4620      	mov	r0, r4
 800f004:	f001 f88c 	bl	8010120 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f008:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800f00c:	69a6      	ldr	r6, [r4, #24]
 800f00e:	69e7      	ldr	r7, [r4, #28]
 800f010:	1a52      	subs	r2, r2, r1
 800f012:	4620      	mov	r0, r4
 800f014:	f7fc fb94 	bl	800b740 <ucdr_init_buffer>
 800f018:	4620      	mov	r0, r4
 800f01a:	463a      	mov	r2, r7
 800f01c:	4631      	mov	r1, r6
 800f01e:	f7fc fb63 	bl	800b6e8 <ucdr_set_on_full_buffer_callback>
 800f022:	4628      	mov	r0, r5
 800f024:	b007      	add	sp, #28
 800f026:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f028 <uxr_prepare_output_stream_fragmented>:
 800f028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f02c:	b091      	sub	sp, #68	@ 0x44
 800f02e:	4605      	mov	r5, r0
 800f030:	9105      	str	r1, [sp, #20]
 800f032:	3008      	adds	r0, #8
 800f034:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f038:	461e      	mov	r6, r3
 800f03a:	9204      	str	r2, [sp, #16]
 800f03c:	f7ff fe90 	bl	800ed60 <uxr_get_output_reliable_stream>
 800f040:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f044:	2b01      	cmp	r3, #1
 800f046:	f000 8091 	beq.w	800f16c <uxr_prepare_output_stream_fragmented+0x144>
 800f04a:	4604      	mov	r4, r0
 800f04c:	2800      	cmp	r0, #0
 800f04e:	f000 808d 	beq.w	800f16c <uxr_prepare_output_stream_fragmented+0x144>
 800f052:	f006 fd05 	bl	8015a60 <get_available_free_slots>
 800f056:	2800      	cmp	r0, #0
 800f058:	f000 8083 	beq.w	800f162 <uxr_prepare_output_stream_fragmented+0x13a>
 800f05c:	8922      	ldrh	r2, [r4, #8]
 800f05e:	89e7      	ldrh	r7, [r4, #14]
 800f060:	fbb7 f9f2 	udiv	r9, r7, r2
 800f064:	fb02 7919 	mls	r9, r2, r9, r7
 800f068:	fa1f f989 	uxth.w	r9, r9
 800f06c:	6863      	ldr	r3, [r4, #4]
 800f06e:	fbb3 f2f2 	udiv	r2, r3, r2
 800f072:	6823      	ldr	r3, [r4, #0]
 800f074:	9203      	str	r2, [sp, #12]
 800f076:	fb02 f909 	mul.w	r9, r2, r9
 800f07a:	f109 0904 	add.w	r9, r9, #4
 800f07e:	4499      	add	r9, r3
 800f080:	7b23      	ldrb	r3, [r4, #12]
 800f082:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f086:	4543      	cmp	r3, r8
 800f088:	f1a2 0b04 	sub.w	fp, r2, #4
 800f08c:	d37a      	bcc.n	800f184 <uxr_prepare_output_stream_fragmented+0x15c>
 800f08e:	f1ab 0a04 	sub.w	sl, fp, #4
 800f092:	ebaa 0a03 	sub.w	sl, sl, r3
 800f096:	465a      	mov	r2, fp
 800f098:	2300      	movs	r3, #0
 800f09a:	4649      	mov	r1, r9
 800f09c:	a808      	add	r0, sp, #32
 800f09e:	f8cd 8000 	str.w	r8, [sp]
 800f0a2:	f7fc fb3b 	bl	800b71c <ucdr_init_buffer_origin_offset>
 800f0a6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f0a8:	fa1f fa8a 	uxth.w	sl, sl
 800f0ac:	4652      	mov	r2, sl
 800f0ae:	f103 0a08 	add.w	sl, r3, #8
 800f0b2:	45da      	cmp	sl, fp
 800f0b4:	bf34      	ite	cc
 800f0b6:	2302      	movcc	r3, #2
 800f0b8:	2300      	movcs	r3, #0
 800f0ba:	210d      	movs	r1, #13
 800f0bc:	a808      	add	r0, sp, #32
 800f0be:	f7ff fe83 	bl	800edc8 <uxr_buffer_submessage_header>
 800f0c2:	8921      	ldrh	r1, [r4, #8]
 800f0c4:	fbb7 f2f1 	udiv	r2, r7, r1
 800f0c8:	fb01 7212 	mls	r2, r1, r2, r7
 800f0cc:	b292      	uxth	r2, r2
 800f0ce:	6863      	ldr	r3, [r4, #4]
 800f0d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800f0d4:	fb02 f303 	mul.w	r3, r2, r3
 800f0d8:	6822      	ldr	r2, [r4, #0]
 800f0da:	4638      	mov	r0, r7
 800f0dc:	f842 b003 	str.w	fp, [r2, r3]
 800f0e0:	2101      	movs	r1, #1
 800f0e2:	f006 fe0d 	bl	8015d00 <uxr_seq_num_add>
 800f0e6:	9b03      	ldr	r3, [sp, #12]
 800f0e8:	f108 0104 	add.w	r1, r8, #4
 800f0ec:	f1a3 0208 	sub.w	r2, r3, #8
 800f0f0:	eba2 0208 	sub.w	r2, r2, r8
 800f0f4:	4449      	add	r1, r9
 800f0f6:	4607      	mov	r7, r0
 800f0f8:	4630      	mov	r0, r6
 800f0fa:	f7fc fb21 	bl	800b740 <ucdr_init_buffer>
 800f0fe:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f100:	81e7      	strh	r7, [r4, #14]
 800f102:	1d1a      	adds	r2, r3, #4
 800f104:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800f108:	bf28      	it	cs
 800f10a:	2200      	movcs	r2, #0
 800f10c:	2300      	movs	r3, #0
 800f10e:	b292      	uxth	r2, r2
 800f110:	2107      	movs	r1, #7
 800f112:	4630      	mov	r0, r6
 800f114:	f7ff fe58 	bl	800edc8 <uxr_buffer_submessage_header>
 800f118:	9904      	ldr	r1, [sp, #16]
 800f11a:	aa07      	add	r2, sp, #28
 800f11c:	4628      	mov	r0, r5
 800f11e:	f7ff fceb 	bl	800eaf8 <uxr_init_base_object_request>
 800f122:	4604      	mov	r4, r0
 800f124:	b318      	cbz	r0, 800f16e <uxr_prepare_output_stream_fragmented+0x146>
 800f126:	a907      	add	r1, sp, #28
 800f128:	4630      	mov	r0, r6
 800f12a:	f000 fff9 	bl	8010120 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f12e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800f132:	4630      	mov	r0, r6
 800f134:	1a52      	subs	r2, r2, r1
 800f136:	f7fc fb03 	bl	800b740 <ucdr_init_buffer>
 800f13a:	9b05      	ldr	r3, [sp, #20]
 800f13c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800f140:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f142:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800f146:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800f148:	491b      	ldr	r1, [pc, #108]	@ (800f1b8 <uxr_prepare_output_stream_fragmented+0x190>)
 800f14a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800f14e:	4630      	mov	r0, r6
 800f150:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800f154:	462a      	mov	r2, r5
 800f156:	f7fc fac7 	bl	800b6e8 <ucdr_set_on_full_buffer_callback>
 800f15a:	4620      	mov	r0, r4
 800f15c:	b011      	add	sp, #68	@ 0x44
 800f15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f162:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800f164:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f166:	4628      	mov	r0, r5
 800f168:	4798      	blx	r3
 800f16a:	b920      	cbnz	r0, 800f176 <uxr_prepare_output_stream_fragmented+0x14e>
 800f16c:	2400      	movs	r4, #0
 800f16e:	4620      	mov	r0, r4
 800f170:	b011      	add	sp, #68	@ 0x44
 800f172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f176:	4620      	mov	r0, r4
 800f178:	f006 fc72 	bl	8015a60 <get_available_free_slots>
 800f17c:	2800      	cmp	r0, #0
 800f17e:	f47f af6d 	bne.w	800f05c <uxr_prepare_output_stream_fragmented+0x34>
 800f182:	e7f3      	b.n	800f16c <uxr_prepare_output_stream_fragmented+0x144>
 800f184:	4638      	mov	r0, r7
 800f186:	2101      	movs	r1, #1
 800f188:	f006 fdba 	bl	8015d00 <uxr_seq_num_add>
 800f18c:	8921      	ldrh	r1, [r4, #8]
 800f18e:	fbb0 f2f1 	udiv	r2, r0, r1
 800f192:	fb01 0912 	mls	r9, r1, r2, r0
 800f196:	fa1f f289 	uxth.w	r2, r9
 800f19a:	6863      	ldr	r3, [r4, #4]
 800f19c:	fbb3 f9f1 	udiv	r9, r3, r1
 800f1a0:	6823      	ldr	r3, [r4, #0]
 800f1a2:	fb02 f909 	mul.w	r9, r2, r9
 800f1a6:	f109 0904 	add.w	r9, r9, #4
 800f1aa:	4499      	add	r9, r3
 800f1ac:	4607      	mov	r7, r0
 800f1ae:	7b23      	ldrb	r3, [r4, #12]
 800f1b0:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f1b4:	e76b      	b.n	800f08e <uxr_prepare_output_stream_fragmented+0x66>
 800f1b6:	bf00      	nop
 800f1b8:	0800eeb5 	.word	0x0800eeb5

0800f1bc <uxr_serialize_message_header>:
 800f1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1be:	b083      	sub	sp, #12
 800f1c0:	4616      	mov	r6, r2
 800f1c2:	4604      	mov	r4, r0
 800f1c4:	9301      	str	r3, [sp, #4]
 800f1c6:	460d      	mov	r5, r1
 800f1c8:	9f08      	ldr	r7, [sp, #32]
 800f1ca:	f7fb f977 	bl	800a4bc <ucdr_serialize_uint8_t>
 800f1ce:	4631      	mov	r1, r6
 800f1d0:	4620      	mov	r0, r4
 800f1d2:	f7fb f973 	bl	800a4bc <ucdr_serialize_uint8_t>
 800f1d6:	9a01      	ldr	r2, [sp, #4]
 800f1d8:	2101      	movs	r1, #1
 800f1da:	4620      	mov	r0, r4
 800f1dc:	f7fb fa1a 	bl	800a614 <ucdr_serialize_endian_uint16_t>
 800f1e0:	062b      	lsls	r3, r5, #24
 800f1e2:	d501      	bpl.n	800f1e8 <uxr_serialize_message_header+0x2c>
 800f1e4:	b003      	add	sp, #12
 800f1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1e8:	2204      	movs	r2, #4
 800f1ea:	4639      	mov	r1, r7
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	b003      	add	sp, #12
 800f1f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f1f4:	f005 bd12 	b.w	8014c1c <ucdr_serialize_array_uint8_t>

0800f1f8 <uxr_deserialize_message_header>:
 800f1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1fa:	b083      	sub	sp, #12
 800f1fc:	4616      	mov	r6, r2
 800f1fe:	4604      	mov	r4, r0
 800f200:	9301      	str	r3, [sp, #4]
 800f202:	460d      	mov	r5, r1
 800f204:	9f08      	ldr	r7, [sp, #32]
 800f206:	f7fb f96f 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 800f20a:	4631      	mov	r1, r6
 800f20c:	4620      	mov	r0, r4
 800f20e:	f7fb f96b 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 800f212:	9a01      	ldr	r2, [sp, #4]
 800f214:	2101      	movs	r1, #1
 800f216:	4620      	mov	r0, r4
 800f218:	f7fb faf0 	bl	800a7fc <ucdr_deserialize_endian_uint16_t>
 800f21c:	f995 3000 	ldrsb.w	r3, [r5]
 800f220:	2b00      	cmp	r3, #0
 800f222:	da01      	bge.n	800f228 <uxr_deserialize_message_header+0x30>
 800f224:	b003      	add	sp, #12
 800f226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f228:	2204      	movs	r2, #4
 800f22a:	4639      	mov	r1, r7
 800f22c:	4620      	mov	r0, r4
 800f22e:	b003      	add	sp, #12
 800f230:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f234:	f005 bd56 	b.w	8014ce4 <ucdr_deserialize_array_uint8_t>

0800f238 <uxr_serialize_submessage_header>:
 800f238:	b530      	push	{r4, r5, lr}
 800f23a:	b083      	sub	sp, #12
 800f23c:	4615      	mov	r5, r2
 800f23e:	4604      	mov	r4, r0
 800f240:	9301      	str	r3, [sp, #4]
 800f242:	f7fb f93b 	bl	800a4bc <ucdr_serialize_uint8_t>
 800f246:	4629      	mov	r1, r5
 800f248:	4620      	mov	r0, r4
 800f24a:	f7fb f937 	bl	800a4bc <ucdr_serialize_uint8_t>
 800f24e:	9a01      	ldr	r2, [sp, #4]
 800f250:	2101      	movs	r1, #1
 800f252:	4620      	mov	r0, r4
 800f254:	b003      	add	sp, #12
 800f256:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f25a:	f7fb b9db 	b.w	800a614 <ucdr_serialize_endian_uint16_t>
 800f25e:	bf00      	nop

0800f260 <uxr_deserialize_submessage_header>:
 800f260:	b530      	push	{r4, r5, lr}
 800f262:	b083      	sub	sp, #12
 800f264:	4615      	mov	r5, r2
 800f266:	4604      	mov	r4, r0
 800f268:	9301      	str	r3, [sp, #4]
 800f26a:	f7fb f93d 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 800f26e:	4629      	mov	r1, r5
 800f270:	4620      	mov	r0, r4
 800f272:	f7fb f939 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 800f276:	9a01      	ldr	r2, [sp, #4]
 800f278:	2101      	movs	r1, #1
 800f27a:	4620      	mov	r0, r4
 800f27c:	b003      	add	sp, #12
 800f27e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f282:	f7fb babb 	b.w	800a7fc <ucdr_deserialize_endian_uint16_t>
 800f286:	bf00      	nop

0800f288 <uxr_serialize_CLIENT_Representation>:
 800f288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f28c:	2204      	movs	r2, #4
 800f28e:	460e      	mov	r6, r1
 800f290:	4605      	mov	r5, r0
 800f292:	f005 fcc3 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800f296:	2202      	movs	r2, #2
 800f298:	4607      	mov	r7, r0
 800f29a:	1d31      	adds	r1, r6, #4
 800f29c:	4628      	mov	r0, r5
 800f29e:	f005 fcbd 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800f2a2:	4038      	ands	r0, r7
 800f2a4:	2202      	movs	r2, #2
 800f2a6:	1db1      	adds	r1, r6, #6
 800f2a8:	b2c7      	uxtb	r7, r0
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	f005 fcb6 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800f2b0:	2204      	movs	r2, #4
 800f2b2:	4007      	ands	r7, r0
 800f2b4:	f106 0108 	add.w	r1, r6, #8
 800f2b8:	4628      	mov	r0, r5
 800f2ba:	f005 fcaf 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800f2be:	7b31      	ldrb	r1, [r6, #12]
 800f2c0:	4007      	ands	r7, r0
 800f2c2:	4628      	mov	r0, r5
 800f2c4:	f7fb f8fa 	bl	800a4bc <ucdr_serialize_uint8_t>
 800f2c8:	7b71      	ldrb	r1, [r6, #13]
 800f2ca:	4007      	ands	r7, r0
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	f7fb f8c7 	bl	800a460 <ucdr_serialize_bool>
 800f2d2:	7b73      	ldrb	r3, [r6, #13]
 800f2d4:	ea07 0800 	and.w	r8, r7, r0
 800f2d8:	b93b      	cbnz	r3, 800f2ea <uxr_serialize_CLIENT_Representation+0x62>
 800f2da:	8bb1      	ldrh	r1, [r6, #28]
 800f2dc:	4628      	mov	r0, r5
 800f2de:	f7fb f919 	bl	800a514 <ucdr_serialize_uint16_t>
 800f2e2:	ea08 0000 	and.w	r0, r8, r0
 800f2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2ea:	6931      	ldr	r1, [r6, #16]
 800f2ec:	4628      	mov	r0, r5
 800f2ee:	f7fb fafb 	bl	800a8e8 <ucdr_serialize_uint32_t>
 800f2f2:	6933      	ldr	r3, [r6, #16]
 800f2f4:	b1e3      	cbz	r3, 800f330 <uxr_serialize_CLIENT_Representation+0xa8>
 800f2f6:	b1c0      	cbz	r0, 800f32a <uxr_serialize_CLIENT_Representation+0xa2>
 800f2f8:	4637      	mov	r7, r6
 800f2fa:	f04f 0900 	mov.w	r9, #0
 800f2fe:	e001      	b.n	800f304 <uxr_serialize_CLIENT_Representation+0x7c>
 800f300:	3708      	adds	r7, #8
 800f302:	b194      	cbz	r4, 800f32a <uxr_serialize_CLIENT_Representation+0xa2>
 800f304:	6979      	ldr	r1, [r7, #20]
 800f306:	4628      	mov	r0, r5
 800f308:	f005 fda8 	bl	8014e5c <ucdr_serialize_string>
 800f30c:	69b9      	ldr	r1, [r7, #24]
 800f30e:	4604      	mov	r4, r0
 800f310:	4628      	mov	r0, r5
 800f312:	f005 fda3 	bl	8014e5c <ucdr_serialize_string>
 800f316:	6933      	ldr	r3, [r6, #16]
 800f318:	f109 0901 	add.w	r9, r9, #1
 800f31c:	4004      	ands	r4, r0
 800f31e:	4599      	cmp	r9, r3
 800f320:	b2e4      	uxtb	r4, r4
 800f322:	d3ed      	bcc.n	800f300 <uxr_serialize_CLIENT_Representation+0x78>
 800f324:	ea08 0804 	and.w	r8, r8, r4
 800f328:	e7d7      	b.n	800f2da <uxr_serialize_CLIENT_Representation+0x52>
 800f32a:	f04f 0800 	mov.w	r8, #0
 800f32e:	e7d4      	b.n	800f2da <uxr_serialize_CLIENT_Representation+0x52>
 800f330:	ea08 0800 	and.w	r8, r8, r0
 800f334:	e7d1      	b.n	800f2da <uxr_serialize_CLIENT_Representation+0x52>
 800f336:	bf00      	nop

0800f338 <uxr_deserialize_CLIENT_Representation>:
 800f338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f33c:	2204      	movs	r2, #4
 800f33e:	460c      	mov	r4, r1
 800f340:	4605      	mov	r5, r0
 800f342:	f005 fccf 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800f346:	2202      	movs	r2, #2
 800f348:	4607      	mov	r7, r0
 800f34a:	1d21      	adds	r1, r4, #4
 800f34c:	4628      	mov	r0, r5
 800f34e:	f005 fcc9 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800f352:	4038      	ands	r0, r7
 800f354:	2202      	movs	r2, #2
 800f356:	1da1      	adds	r1, r4, #6
 800f358:	b2c6      	uxtb	r6, r0
 800f35a:	4628      	mov	r0, r5
 800f35c:	f005 fcc2 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800f360:	2204      	movs	r2, #4
 800f362:	4006      	ands	r6, r0
 800f364:	f104 0108 	add.w	r1, r4, #8
 800f368:	4628      	mov	r0, r5
 800f36a:	f005 fcbb 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800f36e:	f104 010c 	add.w	r1, r4, #12
 800f372:	4006      	ands	r6, r0
 800f374:	4628      	mov	r0, r5
 800f376:	f7fb f8b7 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 800f37a:	f104 010d 	add.w	r1, r4, #13
 800f37e:	ea06 0700 	and.w	r7, r6, r0
 800f382:	4628      	mov	r0, r5
 800f384:	f7fb f882 	bl	800a48c <ucdr_deserialize_bool>
 800f388:	7b63      	ldrb	r3, [r4, #13]
 800f38a:	4007      	ands	r7, r0
 800f38c:	b93b      	cbnz	r3, 800f39e <uxr_deserialize_CLIENT_Representation+0x66>
 800f38e:	f104 011c 	add.w	r1, r4, #28
 800f392:	4628      	mov	r0, r5
 800f394:	f7fb f9be 	bl	800a714 <ucdr_deserialize_uint16_t>
 800f398:	4038      	ands	r0, r7
 800f39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f39e:	f104 0110 	add.w	r1, r4, #16
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	f7fb fbd0 	bl	800ab48 <ucdr_deserialize_uint32_t>
 800f3a8:	6923      	ldr	r3, [r4, #16]
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	d903      	bls.n	800f3b6 <uxr_deserialize_CLIENT_Representation+0x7e>
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	75ab      	strb	r3, [r5, #22]
 800f3b2:	2700      	movs	r7, #0
 800f3b4:	e7eb      	b.n	800f38e <uxr_deserialize_CLIENT_Representation+0x56>
 800f3b6:	b30b      	cbz	r3, 800f3fc <uxr_deserialize_CLIENT_Representation+0xc4>
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	d0fa      	beq.n	800f3b2 <uxr_deserialize_CLIENT_Representation+0x7a>
 800f3bc:	46a0      	mov	r8, r4
 800f3be:	f04f 0900 	mov.w	r9, #0
 800f3c2:	e001      	b.n	800f3c8 <uxr_deserialize_CLIENT_Representation+0x90>
 800f3c4:	2e00      	cmp	r6, #0
 800f3c6:	d0f4      	beq.n	800f3b2 <uxr_deserialize_CLIENT_Representation+0x7a>
 800f3c8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f3cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3d0:	4628      	mov	r0, r5
 800f3d2:	f005 fd53 	bl	8014e7c <ucdr_deserialize_string>
 800f3d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3da:	4606      	mov	r6, r0
 800f3dc:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f3e0:	4628      	mov	r0, r5
 800f3e2:	f005 fd4b 	bl	8014e7c <ucdr_deserialize_string>
 800f3e6:	6923      	ldr	r3, [r4, #16]
 800f3e8:	f109 0901 	add.w	r9, r9, #1
 800f3ec:	4006      	ands	r6, r0
 800f3ee:	4599      	cmp	r9, r3
 800f3f0:	f108 0808 	add.w	r8, r8, #8
 800f3f4:	b2f6      	uxtb	r6, r6
 800f3f6:	d3e5      	bcc.n	800f3c4 <uxr_deserialize_CLIENT_Representation+0x8c>
 800f3f8:	4037      	ands	r7, r6
 800f3fa:	e7c8      	b.n	800f38e <uxr_deserialize_CLIENT_Representation+0x56>
 800f3fc:	4007      	ands	r7, r0
 800f3fe:	e7c6      	b.n	800f38e <uxr_deserialize_CLIENT_Representation+0x56>

0800f400 <uxr_serialize_AGENT_Representation>:
 800f400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f404:	2204      	movs	r2, #4
 800f406:	460f      	mov	r7, r1
 800f408:	4605      	mov	r5, r0
 800f40a:	f005 fc07 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800f40e:	2202      	movs	r2, #2
 800f410:	4604      	mov	r4, r0
 800f412:	1d39      	adds	r1, r7, #4
 800f414:	4628      	mov	r0, r5
 800f416:	f005 fc01 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800f41a:	4020      	ands	r0, r4
 800f41c:	2202      	movs	r2, #2
 800f41e:	1db9      	adds	r1, r7, #6
 800f420:	b2c4      	uxtb	r4, r0
 800f422:	4628      	mov	r0, r5
 800f424:	f005 fbfa 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800f428:	7a39      	ldrb	r1, [r7, #8]
 800f42a:	4004      	ands	r4, r0
 800f42c:	4628      	mov	r0, r5
 800f42e:	f7fb f817 	bl	800a460 <ucdr_serialize_bool>
 800f432:	7a3b      	ldrb	r3, [r7, #8]
 800f434:	ea00 0804 	and.w	r8, r0, r4
 800f438:	b913      	cbnz	r3, 800f440 <uxr_serialize_AGENT_Representation+0x40>
 800f43a:	4640      	mov	r0, r8
 800f43c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f440:	68f9      	ldr	r1, [r7, #12]
 800f442:	4628      	mov	r0, r5
 800f444:	f7fb fa50 	bl	800a8e8 <ucdr_serialize_uint32_t>
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	b303      	cbz	r3, 800f48e <uxr_serialize_AGENT_Representation+0x8e>
 800f44c:	b1d0      	cbz	r0, 800f484 <uxr_serialize_AGENT_Representation+0x84>
 800f44e:	463e      	mov	r6, r7
 800f450:	f04f 0900 	mov.w	r9, #0
 800f454:	e001      	b.n	800f45a <uxr_serialize_AGENT_Representation+0x5a>
 800f456:	3608      	adds	r6, #8
 800f458:	b1a4      	cbz	r4, 800f484 <uxr_serialize_AGENT_Representation+0x84>
 800f45a:	6931      	ldr	r1, [r6, #16]
 800f45c:	4628      	mov	r0, r5
 800f45e:	f005 fcfd 	bl	8014e5c <ucdr_serialize_string>
 800f462:	6971      	ldr	r1, [r6, #20]
 800f464:	4604      	mov	r4, r0
 800f466:	4628      	mov	r0, r5
 800f468:	f005 fcf8 	bl	8014e5c <ucdr_serialize_string>
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	f109 0901 	add.w	r9, r9, #1
 800f472:	4004      	ands	r4, r0
 800f474:	4599      	cmp	r9, r3
 800f476:	b2e4      	uxtb	r4, r4
 800f478:	d3ed      	bcc.n	800f456 <uxr_serialize_AGENT_Representation+0x56>
 800f47a:	ea08 0804 	and.w	r8, r8, r4
 800f47e:	4640      	mov	r0, r8
 800f480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f484:	f04f 0800 	mov.w	r8, #0
 800f488:	4640      	mov	r0, r8
 800f48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f48e:	ea08 0800 	and.w	r8, r8, r0
 800f492:	e7d2      	b.n	800f43a <uxr_serialize_AGENT_Representation+0x3a>

0800f494 <uxr_serialize_DATAWRITER_Representation>:
 800f494:	b570      	push	{r4, r5, r6, lr}
 800f496:	460d      	mov	r5, r1
 800f498:	7809      	ldrb	r1, [r1, #0]
 800f49a:	4606      	mov	r6, r0
 800f49c:	f7fb f80e 	bl	800a4bc <ucdr_serialize_uint8_t>
 800f4a0:	4604      	mov	r4, r0
 800f4a2:	b130      	cbz	r0, 800f4b2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f4a4:	782b      	ldrb	r3, [r5, #0]
 800f4a6:	2b02      	cmp	r3, #2
 800f4a8:	d00c      	beq.n	800f4c4 <uxr_serialize_DATAWRITER_Representation+0x30>
 800f4aa:	2b03      	cmp	r3, #3
 800f4ac:	d010      	beq.n	800f4d0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800f4ae:	2b01      	cmp	r3, #1
 800f4b0:	d008      	beq.n	800f4c4 <uxr_serialize_DATAWRITER_Representation+0x30>
 800f4b2:	2202      	movs	r2, #2
 800f4b4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	f005 fbaf 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800f4be:	4020      	ands	r0, r4
 800f4c0:	b2c0      	uxtb	r0, r0
 800f4c2:	bd70      	pop	{r4, r5, r6, pc}
 800f4c4:	6869      	ldr	r1, [r5, #4]
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	f005 fcc8 	bl	8014e5c <ucdr_serialize_string>
 800f4cc:	4604      	mov	r4, r0
 800f4ce:	e7f0      	b.n	800f4b2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f4d0:	4629      	mov	r1, r5
 800f4d2:	4630      	mov	r0, r6
 800f4d4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800f4d8:	3104      	adds	r1, #4
 800f4da:	f005 fc93 	bl	8014e04 <ucdr_serialize_sequence_uint8_t>
 800f4de:	4604      	mov	r4, r0
 800f4e0:	e7e7      	b.n	800f4b2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f4e2:	bf00      	nop

0800f4e4 <uxr_serialize_ObjectVariant.part.0>:
 800f4e4:	b570      	push	{r4, r5, r6, lr}
 800f4e6:	780b      	ldrb	r3, [r1, #0]
 800f4e8:	3b01      	subs	r3, #1
 800f4ea:	460c      	mov	r4, r1
 800f4ec:	4605      	mov	r5, r0
 800f4ee:	2b0d      	cmp	r3, #13
 800f4f0:	d854      	bhi.n	800f59c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f4f2:	e8df f003 	tbb	[pc, r3]
 800f4f6:	0730      	.short	0x0730
 800f4f8:	07071b1b 	.word	0x07071b1b
 800f4fc:	0c530707 	.word	0x0c530707
 800f500:	494e0c0c 	.word	0x494e0c0c
 800f504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f508:	3104      	adds	r1, #4
 800f50a:	f7ff bfc3 	b.w	800f494 <uxr_serialize_DATAWRITER_Representation>
 800f50e:	7909      	ldrb	r1, [r1, #4]
 800f510:	f7fa ffd4 	bl	800a4bc <ucdr_serialize_uint8_t>
 800f514:	b1e8      	cbz	r0, 800f552 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800f516:	7923      	ldrb	r3, [r4, #4]
 800f518:	2b01      	cmp	r3, #1
 800f51a:	d001      	beq.n	800f520 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800f51c:	2b02      	cmp	r3, #2
 800f51e:	d13d      	bne.n	800f59c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f520:	68a1      	ldr	r1, [r4, #8]
 800f522:	4628      	mov	r0, r5
 800f524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f528:	f005 bc98 	b.w	8014e5c <ucdr_serialize_string>
 800f52c:	7909      	ldrb	r1, [r1, #4]
 800f52e:	f7fa ffc5 	bl	800a4bc <ucdr_serialize_uint8_t>
 800f532:	4606      	mov	r6, r0
 800f534:	b120      	cbz	r0, 800f540 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f536:	7923      	ldrb	r3, [r4, #4]
 800f538:	2b02      	cmp	r3, #2
 800f53a:	d039      	beq.n	800f5b0 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800f53c:	2b03      	cmp	r3, #3
 800f53e:	d02f      	beq.n	800f5a0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800f540:	2202      	movs	r2, #2
 800f542:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800f546:	4628      	mov	r0, r5
 800f548:	f005 fb68 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800f54c:	4030      	ands	r0, r6
 800f54e:	b2c0      	uxtb	r0, r0
 800f550:	bd70      	pop	{r4, r5, r6, pc}
 800f552:	2000      	movs	r0, #0
 800f554:	bd70      	pop	{r4, r5, r6, pc}
 800f556:	7909      	ldrb	r1, [r1, #4]
 800f558:	f7fa ffb0 	bl	800a4bc <ucdr_serialize_uint8_t>
 800f55c:	4606      	mov	r6, r0
 800f55e:	b158      	cbz	r0, 800f578 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f560:	7923      	ldrb	r3, [r4, #4]
 800f562:	2b02      	cmp	r3, #2
 800f564:	d003      	beq.n	800f56e <uxr_serialize_ObjectVariant.part.0+0x8a>
 800f566:	2b03      	cmp	r3, #3
 800f568:	d028      	beq.n	800f5bc <uxr_serialize_ObjectVariant.part.0+0xd8>
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	d104      	bne.n	800f578 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f56e:	68a1      	ldr	r1, [r4, #8]
 800f570:	4628      	mov	r0, r5
 800f572:	f005 fc73 	bl	8014e5c <ucdr_serialize_string>
 800f576:	4606      	mov	r6, r0
 800f578:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800f57c:	4628      	mov	r0, r5
 800f57e:	f7fb fcd9 	bl	800af34 <ucdr_serialize_int16_t>
 800f582:	4030      	ands	r0, r6
 800f584:	b2c0      	uxtb	r0, r0
 800f586:	bd70      	pop	{r4, r5, r6, pc}
 800f588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f58c:	3104      	adds	r1, #4
 800f58e:	f7ff be7b 	b.w	800f288 <uxr_serialize_CLIENT_Representation>
 800f592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f596:	3104      	adds	r1, #4
 800f598:	f7ff bf32 	b.w	800f400 <uxr_serialize_AGENT_Representation>
 800f59c:	2001      	movs	r0, #1
 800f59e:	bd70      	pop	{r4, r5, r6, pc}
 800f5a0:	68a2      	ldr	r2, [r4, #8]
 800f5a2:	f104 010c 	add.w	r1, r4, #12
 800f5a6:	4628      	mov	r0, r5
 800f5a8:	f005 fc2c 	bl	8014e04 <ucdr_serialize_sequence_uint8_t>
 800f5ac:	4606      	mov	r6, r0
 800f5ae:	e7c7      	b.n	800f540 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f5b0:	68a1      	ldr	r1, [r4, #8]
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	f005 fc52 	bl	8014e5c <ucdr_serialize_string>
 800f5b8:	4606      	mov	r6, r0
 800f5ba:	e7c1      	b.n	800f540 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f5bc:	68a2      	ldr	r2, [r4, #8]
 800f5be:	f104 010c 	add.w	r1, r4, #12
 800f5c2:	4628      	mov	r0, r5
 800f5c4:	f005 fc1e 	bl	8014e04 <ucdr_serialize_sequence_uint8_t>
 800f5c8:	4606      	mov	r6, r0
 800f5ca:	e7d5      	b.n	800f578 <uxr_serialize_ObjectVariant.part.0+0x94>

0800f5cc <uxr_deserialize_DATAWRITER_Representation>:
 800f5cc:	b570      	push	{r4, r5, r6, lr}
 800f5ce:	4606      	mov	r6, r0
 800f5d0:	460d      	mov	r5, r1
 800f5d2:	f7fa ff89 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	b130      	cbz	r0, 800f5e8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f5da:	782b      	ldrb	r3, [r5, #0]
 800f5dc:	2b02      	cmp	r3, #2
 800f5de:	d00c      	beq.n	800f5fa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f5e0:	2b03      	cmp	r3, #3
 800f5e2:	d012      	beq.n	800f60a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	d008      	beq.n	800f5fa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f5e8:	2202      	movs	r2, #2
 800f5ea:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f5ee:	4630      	mov	r0, r6
 800f5f0:	f005 fb78 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800f5f4:	4020      	ands	r0, r4
 800f5f6:	b2c0      	uxtb	r0, r0
 800f5f8:	bd70      	pop	{r4, r5, r6, pc}
 800f5fa:	6869      	ldr	r1, [r5, #4]
 800f5fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f600:	4630      	mov	r0, r6
 800f602:	f005 fc3b 	bl	8014e7c <ucdr_deserialize_string>
 800f606:	4604      	mov	r4, r0
 800f608:	e7ee      	b.n	800f5e8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f60a:	1d2b      	adds	r3, r5, #4
 800f60c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f610:	f105 0108 	add.w	r1, r5, #8
 800f614:	4630      	mov	r0, r6
 800f616:	f005 fc07 	bl	8014e28 <ucdr_deserialize_sequence_uint8_t>
 800f61a:	4604      	mov	r4, r0
 800f61c:	e7e4      	b.n	800f5e8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f61e:	bf00      	nop

0800f620 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800f620:	b570      	push	{r4, r5, r6, lr}
 800f622:	460d      	mov	r5, r1
 800f624:	7809      	ldrb	r1, [r1, #0]
 800f626:	4606      	mov	r6, r0
 800f628:	f7fa ff1a 	bl	800a460 <ucdr_serialize_bool>
 800f62c:	782b      	ldrb	r3, [r5, #0]
 800f62e:	4604      	mov	r4, r0
 800f630:	b94b      	cbnz	r3, 800f646 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800f632:	7a29      	ldrb	r1, [r5, #8]
 800f634:	4630      	mov	r0, r6
 800f636:	f7fa ff13 	bl	800a460 <ucdr_serialize_bool>
 800f63a:	7a2b      	ldrb	r3, [r5, #8]
 800f63c:	4004      	ands	r4, r0
 800f63e:	b2e4      	uxtb	r4, r4
 800f640:	b943      	cbnz	r3, 800f654 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800f642:	4620      	mov	r0, r4
 800f644:	bd70      	pop	{r4, r5, r6, pc}
 800f646:	6869      	ldr	r1, [r5, #4]
 800f648:	4630      	mov	r0, r6
 800f64a:	f005 fc07 	bl	8014e5c <ucdr_serialize_string>
 800f64e:	4004      	ands	r4, r0
 800f650:	b2e4      	uxtb	r4, r4
 800f652:	e7ee      	b.n	800f632 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800f654:	68e9      	ldr	r1, [r5, #12]
 800f656:	4630      	mov	r0, r6
 800f658:	f005 fc00 	bl	8014e5c <ucdr_serialize_string>
 800f65c:	4004      	ands	r4, r0
 800f65e:	4620      	mov	r0, r4
 800f660:	bd70      	pop	{r4, r5, r6, pc}
 800f662:	bf00      	nop

0800f664 <uxr_serialize_OBJK_Topic_Binary>:
 800f664:	b570      	push	{r4, r5, r6, lr}
 800f666:	460d      	mov	r5, r1
 800f668:	6809      	ldr	r1, [r1, #0]
 800f66a:	4606      	mov	r6, r0
 800f66c:	f005 fbf6 	bl	8014e5c <ucdr_serialize_string>
 800f670:	7929      	ldrb	r1, [r5, #4]
 800f672:	4604      	mov	r4, r0
 800f674:	4630      	mov	r0, r6
 800f676:	f7fa fef3 	bl	800a460 <ucdr_serialize_bool>
 800f67a:	792b      	ldrb	r3, [r5, #4]
 800f67c:	4004      	ands	r4, r0
 800f67e:	b2e4      	uxtb	r4, r4
 800f680:	b943      	cbnz	r3, 800f694 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800f682:	7b29      	ldrb	r1, [r5, #12]
 800f684:	4630      	mov	r0, r6
 800f686:	f7fa feeb 	bl	800a460 <ucdr_serialize_bool>
 800f68a:	7b2b      	ldrb	r3, [r5, #12]
 800f68c:	4004      	ands	r4, r0
 800f68e:	b93b      	cbnz	r3, 800f6a0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800f690:	4620      	mov	r0, r4
 800f692:	bd70      	pop	{r4, r5, r6, pc}
 800f694:	68a9      	ldr	r1, [r5, #8]
 800f696:	4630      	mov	r0, r6
 800f698:	f005 fbe0 	bl	8014e5c <ucdr_serialize_string>
 800f69c:	4004      	ands	r4, r0
 800f69e:	e7f0      	b.n	800f682 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800f6a0:	6929      	ldr	r1, [r5, #16]
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	f005 fbda 	bl	8014e5c <ucdr_serialize_string>
 800f6a8:	4004      	ands	r4, r0
 800f6aa:	b2e4      	uxtb	r4, r4
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	bd70      	pop	{r4, r5, r6, pc}

0800f6b0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800f6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b4:	460c      	mov	r4, r1
 800f6b6:	7809      	ldrb	r1, [r1, #0]
 800f6b8:	4606      	mov	r6, r0
 800f6ba:	f7fa fed1 	bl	800a460 <ucdr_serialize_bool>
 800f6be:	7823      	ldrb	r3, [r4, #0]
 800f6c0:	4605      	mov	r5, r0
 800f6c2:	b96b      	cbnz	r3, 800f6e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800f6c4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f6c8:	4630      	mov	r0, r6
 800f6ca:	f7fa fec9 	bl	800a460 <ucdr_serialize_bool>
 800f6ce:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f6d2:	4005      	ands	r5, r0
 800f6d4:	b2ed      	uxtb	r5, r5
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d169      	bne.n	800f7ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800f6da:	4628      	mov	r0, r5
 800f6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6e0:	6861      	ldr	r1, [r4, #4]
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	f7fb f900 	bl	800a8e8 <ucdr_serialize_uint32_t>
 800f6e8:	6863      	ldr	r3, [r4, #4]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d06b      	beq.n	800f7c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	d067      	beq.n	800f7c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f6f2:	68a1      	ldr	r1, [r4, #8]
 800f6f4:	4630      	mov	r0, r6
 800f6f6:	f005 fbb1 	bl	8014e5c <ucdr_serialize_string>
 800f6fa:	6863      	ldr	r3, [r4, #4]
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	d953      	bls.n	800f7a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f700:	2800      	cmp	r0, #0
 800f702:	d05e      	beq.n	800f7c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f704:	68e1      	ldr	r1, [r4, #12]
 800f706:	4630      	mov	r0, r6
 800f708:	f005 fba8 	bl	8014e5c <ucdr_serialize_string>
 800f70c:	6863      	ldr	r3, [r4, #4]
 800f70e:	2b02      	cmp	r3, #2
 800f710:	d94a      	bls.n	800f7a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f712:	2800      	cmp	r0, #0
 800f714:	d055      	beq.n	800f7c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f716:	6921      	ldr	r1, [r4, #16]
 800f718:	4630      	mov	r0, r6
 800f71a:	f005 fb9f 	bl	8014e5c <ucdr_serialize_string>
 800f71e:	6863      	ldr	r3, [r4, #4]
 800f720:	2b03      	cmp	r3, #3
 800f722:	d941      	bls.n	800f7a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f724:	2800      	cmp	r0, #0
 800f726:	d04c      	beq.n	800f7c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f728:	6961      	ldr	r1, [r4, #20]
 800f72a:	4630      	mov	r0, r6
 800f72c:	f005 fb96 	bl	8014e5c <ucdr_serialize_string>
 800f730:	6863      	ldr	r3, [r4, #4]
 800f732:	2b04      	cmp	r3, #4
 800f734:	d938      	bls.n	800f7a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f736:	2800      	cmp	r0, #0
 800f738:	d043      	beq.n	800f7c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f73a:	69a1      	ldr	r1, [r4, #24]
 800f73c:	4630      	mov	r0, r6
 800f73e:	f005 fb8d 	bl	8014e5c <ucdr_serialize_string>
 800f742:	6863      	ldr	r3, [r4, #4]
 800f744:	2b05      	cmp	r3, #5
 800f746:	d92f      	bls.n	800f7a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f748:	2800      	cmp	r0, #0
 800f74a:	d03a      	beq.n	800f7c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f74c:	69e1      	ldr	r1, [r4, #28]
 800f74e:	4630      	mov	r0, r6
 800f750:	f005 fb84 	bl	8014e5c <ucdr_serialize_string>
 800f754:	6863      	ldr	r3, [r4, #4]
 800f756:	2b06      	cmp	r3, #6
 800f758:	d926      	bls.n	800f7a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f75a:	b390      	cbz	r0, 800f7c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f75c:	6a21      	ldr	r1, [r4, #32]
 800f75e:	4630      	mov	r0, r6
 800f760:	f005 fb7c 	bl	8014e5c <ucdr_serialize_string>
 800f764:	6863      	ldr	r3, [r4, #4]
 800f766:	2b07      	cmp	r3, #7
 800f768:	d91e      	bls.n	800f7a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f76a:	b350      	cbz	r0, 800f7c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f76c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f76e:	4630      	mov	r0, r6
 800f770:	f005 fb74 	bl	8014e5c <ucdr_serialize_string>
 800f774:	6863      	ldr	r3, [r4, #4]
 800f776:	2b08      	cmp	r3, #8
 800f778:	d916      	bls.n	800f7a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f77a:	b310      	cbz	r0, 800f7c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f77c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f77e:	4630      	mov	r0, r6
 800f780:	f005 fb6c 	bl	8014e5c <ucdr_serialize_string>
 800f784:	6863      	ldr	r3, [r4, #4]
 800f786:	2b09      	cmp	r3, #9
 800f788:	d90e      	bls.n	800f7a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f78a:	b1d0      	cbz	r0, 800f7c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f78c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800f790:	2709      	movs	r7, #9
 800f792:	e000      	b.n	800f796 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800f794:	b1a8      	cbz	r0, 800f7c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f796:	f858 1b04 	ldr.w	r1, [r8], #4
 800f79a:	4630      	mov	r0, r6
 800f79c:	f005 fb5e 	bl	8014e5c <ucdr_serialize_string>
 800f7a0:	6862      	ldr	r2, [r4, #4]
 800f7a2:	3701      	adds	r7, #1
 800f7a4:	4297      	cmp	r7, r2
 800f7a6:	d3f5      	bcc.n	800f794 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800f7a8:	4005      	ands	r5, r0
 800f7aa:	b2ed      	uxtb	r5, r5
 800f7ac:	e78a      	b.n	800f6c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f7ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f7b0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f7b4:	4630      	mov	r0, r6
 800f7b6:	f005 fb25 	bl	8014e04 <ucdr_serialize_sequence_uint8_t>
 800f7ba:	4005      	ands	r5, r0
 800f7bc:	4628      	mov	r0, r5
 800f7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c2:	2500      	movs	r5, #0
 800f7c4:	e77e      	b.n	800f6c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f7c6:	4028      	ands	r0, r5
 800f7c8:	b2c5      	uxtb	r5, r0
 800f7ca:	e77b      	b.n	800f6c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800f7cc <uxr_serialize_OBJK_Publisher_Binary>:
 800f7cc:	b570      	push	{r4, r5, r6, lr}
 800f7ce:	460d      	mov	r5, r1
 800f7d0:	7809      	ldrb	r1, [r1, #0]
 800f7d2:	4606      	mov	r6, r0
 800f7d4:	f7fa fe44 	bl	800a460 <ucdr_serialize_bool>
 800f7d8:	782b      	ldrb	r3, [r5, #0]
 800f7da:	4604      	mov	r4, r0
 800f7dc:	b94b      	cbnz	r3, 800f7f2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800f7de:	7a29      	ldrb	r1, [r5, #8]
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	f7fa fe3d 	bl	800a460 <ucdr_serialize_bool>
 800f7e6:	7a2b      	ldrb	r3, [r5, #8]
 800f7e8:	4004      	ands	r4, r0
 800f7ea:	b2e4      	uxtb	r4, r4
 800f7ec:	b943      	cbnz	r3, 800f800 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800f7ee:	4620      	mov	r0, r4
 800f7f0:	bd70      	pop	{r4, r5, r6, pc}
 800f7f2:	6869      	ldr	r1, [r5, #4]
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	f005 fb31 	bl	8014e5c <ucdr_serialize_string>
 800f7fa:	4004      	ands	r4, r0
 800f7fc:	b2e4      	uxtb	r4, r4
 800f7fe:	e7ee      	b.n	800f7de <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800f800:	f105 010c 	add.w	r1, r5, #12
 800f804:	4630      	mov	r0, r6
 800f806:	f7ff ff53 	bl	800f6b0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800f80a:	4004      	ands	r4, r0
 800f80c:	4620      	mov	r0, r4
 800f80e:	bd70      	pop	{r4, r5, r6, pc}

0800f810 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800f810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f814:	460c      	mov	r4, r1
 800f816:	7809      	ldrb	r1, [r1, #0]
 800f818:	4606      	mov	r6, r0
 800f81a:	f7fa fe21 	bl	800a460 <ucdr_serialize_bool>
 800f81e:	7823      	ldrb	r3, [r4, #0]
 800f820:	4605      	mov	r5, r0
 800f822:	b96b      	cbnz	r3, 800f840 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800f824:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f828:	4630      	mov	r0, r6
 800f82a:	f7fa fe19 	bl	800a460 <ucdr_serialize_bool>
 800f82e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f832:	4005      	ands	r5, r0
 800f834:	b2ed      	uxtb	r5, r5
 800f836:	2b00      	cmp	r3, #0
 800f838:	d169      	bne.n	800f90e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800f83a:	4628      	mov	r0, r5
 800f83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f840:	6861      	ldr	r1, [r4, #4]
 800f842:	4630      	mov	r0, r6
 800f844:	f7fb f850 	bl	800a8e8 <ucdr_serialize_uint32_t>
 800f848:	6863      	ldr	r3, [r4, #4]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d06b      	beq.n	800f926 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800f84e:	2800      	cmp	r0, #0
 800f850:	d067      	beq.n	800f922 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f852:	68a1      	ldr	r1, [r4, #8]
 800f854:	4630      	mov	r0, r6
 800f856:	f005 fb01 	bl	8014e5c <ucdr_serialize_string>
 800f85a:	6863      	ldr	r3, [r4, #4]
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	d953      	bls.n	800f908 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f860:	2800      	cmp	r0, #0
 800f862:	d05e      	beq.n	800f922 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f864:	68e1      	ldr	r1, [r4, #12]
 800f866:	4630      	mov	r0, r6
 800f868:	f005 faf8 	bl	8014e5c <ucdr_serialize_string>
 800f86c:	6863      	ldr	r3, [r4, #4]
 800f86e:	2b02      	cmp	r3, #2
 800f870:	d94a      	bls.n	800f908 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f872:	2800      	cmp	r0, #0
 800f874:	d055      	beq.n	800f922 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f876:	6921      	ldr	r1, [r4, #16]
 800f878:	4630      	mov	r0, r6
 800f87a:	f005 faef 	bl	8014e5c <ucdr_serialize_string>
 800f87e:	6863      	ldr	r3, [r4, #4]
 800f880:	2b03      	cmp	r3, #3
 800f882:	d941      	bls.n	800f908 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f884:	2800      	cmp	r0, #0
 800f886:	d04c      	beq.n	800f922 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f888:	6961      	ldr	r1, [r4, #20]
 800f88a:	4630      	mov	r0, r6
 800f88c:	f005 fae6 	bl	8014e5c <ucdr_serialize_string>
 800f890:	6863      	ldr	r3, [r4, #4]
 800f892:	2b04      	cmp	r3, #4
 800f894:	d938      	bls.n	800f908 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f896:	2800      	cmp	r0, #0
 800f898:	d043      	beq.n	800f922 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f89a:	69a1      	ldr	r1, [r4, #24]
 800f89c:	4630      	mov	r0, r6
 800f89e:	f005 fadd 	bl	8014e5c <ucdr_serialize_string>
 800f8a2:	6863      	ldr	r3, [r4, #4]
 800f8a4:	2b05      	cmp	r3, #5
 800f8a6:	d92f      	bls.n	800f908 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	d03a      	beq.n	800f922 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f8ac:	69e1      	ldr	r1, [r4, #28]
 800f8ae:	4630      	mov	r0, r6
 800f8b0:	f005 fad4 	bl	8014e5c <ucdr_serialize_string>
 800f8b4:	6863      	ldr	r3, [r4, #4]
 800f8b6:	2b06      	cmp	r3, #6
 800f8b8:	d926      	bls.n	800f908 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f8ba:	b390      	cbz	r0, 800f922 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f8bc:	6a21      	ldr	r1, [r4, #32]
 800f8be:	4630      	mov	r0, r6
 800f8c0:	f005 facc 	bl	8014e5c <ucdr_serialize_string>
 800f8c4:	6863      	ldr	r3, [r4, #4]
 800f8c6:	2b07      	cmp	r3, #7
 800f8c8:	d91e      	bls.n	800f908 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f8ca:	b350      	cbz	r0, 800f922 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f8cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	f005 fac4 	bl	8014e5c <ucdr_serialize_string>
 800f8d4:	6863      	ldr	r3, [r4, #4]
 800f8d6:	2b08      	cmp	r3, #8
 800f8d8:	d916      	bls.n	800f908 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f8da:	b310      	cbz	r0, 800f922 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f8dc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f8de:	4630      	mov	r0, r6
 800f8e0:	f005 fabc 	bl	8014e5c <ucdr_serialize_string>
 800f8e4:	6863      	ldr	r3, [r4, #4]
 800f8e6:	2b09      	cmp	r3, #9
 800f8e8:	d90e      	bls.n	800f908 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f8ea:	b1d0      	cbz	r0, 800f922 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f8ec:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800f8f0:	2709      	movs	r7, #9
 800f8f2:	e000      	b.n	800f8f6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800f8f4:	b1a8      	cbz	r0, 800f922 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f8f6:	f858 1b04 	ldr.w	r1, [r8], #4
 800f8fa:	4630      	mov	r0, r6
 800f8fc:	f005 faae 	bl	8014e5c <ucdr_serialize_string>
 800f900:	6862      	ldr	r2, [r4, #4]
 800f902:	3701      	adds	r7, #1
 800f904:	4297      	cmp	r7, r2
 800f906:	d3f5      	bcc.n	800f8f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800f908:	4005      	ands	r5, r0
 800f90a:	b2ed      	uxtb	r5, r5
 800f90c:	e78a      	b.n	800f824 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f90e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f910:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f914:	4630      	mov	r0, r6
 800f916:	f005 fa75 	bl	8014e04 <ucdr_serialize_sequence_uint8_t>
 800f91a:	4005      	ands	r5, r0
 800f91c:	4628      	mov	r0, r5
 800f91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f922:	2500      	movs	r5, #0
 800f924:	e77e      	b.n	800f824 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f926:	4028      	ands	r0, r5
 800f928:	b2c5      	uxtb	r5, r0
 800f92a:	e77b      	b.n	800f824 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800f92c <uxr_serialize_OBJK_Subscriber_Binary>:
 800f92c:	b570      	push	{r4, r5, r6, lr}
 800f92e:	460d      	mov	r5, r1
 800f930:	7809      	ldrb	r1, [r1, #0]
 800f932:	4606      	mov	r6, r0
 800f934:	f7fa fd94 	bl	800a460 <ucdr_serialize_bool>
 800f938:	782b      	ldrb	r3, [r5, #0]
 800f93a:	4604      	mov	r4, r0
 800f93c:	b94b      	cbnz	r3, 800f952 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800f93e:	7a29      	ldrb	r1, [r5, #8]
 800f940:	4630      	mov	r0, r6
 800f942:	f7fa fd8d 	bl	800a460 <ucdr_serialize_bool>
 800f946:	7a2b      	ldrb	r3, [r5, #8]
 800f948:	4004      	ands	r4, r0
 800f94a:	b2e4      	uxtb	r4, r4
 800f94c:	b943      	cbnz	r3, 800f960 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800f94e:	4620      	mov	r0, r4
 800f950:	bd70      	pop	{r4, r5, r6, pc}
 800f952:	6869      	ldr	r1, [r5, #4]
 800f954:	4630      	mov	r0, r6
 800f956:	f005 fa81 	bl	8014e5c <ucdr_serialize_string>
 800f95a:	4004      	ands	r4, r0
 800f95c:	b2e4      	uxtb	r4, r4
 800f95e:	e7ee      	b.n	800f93e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800f960:	f105 010c 	add.w	r1, r5, #12
 800f964:	4630      	mov	r0, r6
 800f966:	f7ff ff53 	bl	800f810 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800f96a:	4004      	ands	r4, r0
 800f96c:	4620      	mov	r0, r4
 800f96e:	bd70      	pop	{r4, r5, r6, pc}

0800f970 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800f970:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800f974:	4688      	mov	r8, r1
 800f976:	8809      	ldrh	r1, [r1, #0]
 800f978:	4681      	mov	r9, r0
 800f97a:	f7fa fdcb 	bl	800a514 <ucdr_serialize_uint16_t>
 800f97e:	f898 1002 	ldrb.w	r1, [r8, #2]
 800f982:	4606      	mov	r6, r0
 800f984:	4648      	mov	r0, r9
 800f986:	f7fa fd6b 	bl	800a460 <ucdr_serialize_bool>
 800f98a:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f98e:	4006      	ands	r6, r0
 800f990:	b2f5      	uxtb	r5, r6
 800f992:	b9eb      	cbnz	r3, 800f9d0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800f994:	f898 1006 	ldrb.w	r1, [r8, #6]
 800f998:	4648      	mov	r0, r9
 800f99a:	f7fa fd61 	bl	800a460 <ucdr_serialize_bool>
 800f99e:	f898 3006 	ldrb.w	r3, [r8, #6]
 800f9a2:	4005      	ands	r5, r0
 800f9a4:	bb7b      	cbnz	r3, 800fa06 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800f9a6:	f898 100c 	ldrb.w	r1, [r8, #12]
 800f9aa:	4648      	mov	r0, r9
 800f9ac:	f7fa fd58 	bl	800a460 <ucdr_serialize_bool>
 800f9b0:	f898 300c 	ldrb.w	r3, [r8, #12]
 800f9b4:	4005      	ands	r5, r0
 800f9b6:	b9f3      	cbnz	r3, 800f9f6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800f9b8:	f898 1014 	ldrb.w	r1, [r8, #20]
 800f9bc:	4648      	mov	r0, r9
 800f9be:	f7fa fd4f 	bl	800a460 <ucdr_serialize_bool>
 800f9c2:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f9c6:	4005      	ands	r5, r0
 800f9c8:	b94b      	cbnz	r3, 800f9de <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800f9ca:	4628      	mov	r0, r5
 800f9cc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f9d0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800f9d4:	4648      	mov	r0, r9
 800f9d6:	f7fa fd9d 	bl	800a514 <ucdr_serialize_uint16_t>
 800f9da:	4005      	ands	r5, r0
 800f9dc:	e7da      	b.n	800f994 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800f9de:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f9e2:	f108 011c 	add.w	r1, r8, #28
 800f9e6:	4648      	mov	r0, r9
 800f9e8:	f005 fa0c 	bl	8014e04 <ucdr_serialize_sequence_uint8_t>
 800f9ec:	4028      	ands	r0, r5
 800f9ee:	b2c5      	uxtb	r5, r0
 800f9f0:	4628      	mov	r0, r5
 800f9f2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f9f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f9fa:	4648      	mov	r0, r9
 800f9fc:	f7fa ff74 	bl	800a8e8 <ucdr_serialize_uint32_t>
 800fa00:	4028      	ands	r0, r5
 800fa02:	b2c5      	uxtb	r5, r0
 800fa04:	e7d8      	b.n	800f9b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800fa06:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800fa0a:	4648      	mov	r0, r9
 800fa0c:	f7fa ff6c 	bl	800a8e8 <ucdr_serialize_uint32_t>
 800fa10:	4028      	ands	r0, r5
 800fa12:	b2c5      	uxtb	r5, r0
 800fa14:	e7c7      	b.n	800f9a6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800fa16:	bf00      	nop

0800fa18 <uxr_serialize_OBJK_DataReader_Binary>:
 800fa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa1a:	2202      	movs	r2, #2
 800fa1c:	460c      	mov	r4, r1
 800fa1e:	4606      	mov	r6, r0
 800fa20:	f005 f8fc 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800fa24:	78a1      	ldrb	r1, [r4, #2]
 800fa26:	4605      	mov	r5, r0
 800fa28:	4630      	mov	r0, r6
 800fa2a:	f7fa fd19 	bl	800a460 <ucdr_serialize_bool>
 800fa2e:	78a3      	ldrb	r3, [r4, #2]
 800fa30:	4005      	ands	r5, r0
 800fa32:	b2ed      	uxtb	r5, r5
 800fa34:	b90b      	cbnz	r3, 800fa3a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800fa36:	4628      	mov	r0, r5
 800fa38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa3a:	f104 0108 	add.w	r1, r4, #8
 800fa3e:	4630      	mov	r0, r6
 800fa40:	f7ff ff96 	bl	800f970 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800fa44:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fa48:	4607      	mov	r7, r0
 800fa4a:	4630      	mov	r0, r6
 800fa4c:	f7fa fd08 	bl	800a460 <ucdr_serialize_bool>
 800fa50:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fa54:	4038      	ands	r0, r7
 800fa56:	b2c7      	uxtb	r7, r0
 800fa58:	b95b      	cbnz	r3, 800fa72 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800fa5a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800fa5e:	4630      	mov	r0, r6
 800fa60:	f7fa fcfe 	bl	800a460 <ucdr_serialize_bool>
 800fa64:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800fa68:	4007      	ands	r7, r0
 800fa6a:	b94b      	cbnz	r3, 800fa80 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800fa6c:	403d      	ands	r5, r7
 800fa6e:	4628      	mov	r0, r5
 800fa70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa72:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800fa76:	4630      	mov	r0, r6
 800fa78:	f7fb f98c 	bl	800ad94 <ucdr_serialize_uint64_t>
 800fa7c:	4007      	ands	r7, r0
 800fa7e:	e7ec      	b.n	800fa5a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800fa80:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800fa82:	4630      	mov	r0, r6
 800fa84:	f005 f9ea 	bl	8014e5c <ucdr_serialize_string>
 800fa88:	4007      	ands	r7, r0
 800fa8a:	b2ff      	uxtb	r7, r7
 800fa8c:	e7ee      	b.n	800fa6c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800fa8e:	bf00      	nop

0800fa90 <uxr_serialize_OBJK_DataWriter_Binary>:
 800fa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa92:	2202      	movs	r2, #2
 800fa94:	460d      	mov	r5, r1
 800fa96:	4606      	mov	r6, r0
 800fa98:	f005 f8c0 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800fa9c:	78a9      	ldrb	r1, [r5, #2]
 800fa9e:	4604      	mov	r4, r0
 800faa0:	4630      	mov	r0, r6
 800faa2:	f7fa fcdd 	bl	800a460 <ucdr_serialize_bool>
 800faa6:	78ab      	ldrb	r3, [r5, #2]
 800faa8:	4004      	ands	r4, r0
 800faaa:	b2e4      	uxtb	r4, r4
 800faac:	b90b      	cbnz	r3, 800fab2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800faae:	4620      	mov	r0, r4
 800fab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fab2:	f105 0108 	add.w	r1, r5, #8
 800fab6:	4630      	mov	r0, r6
 800fab8:	f7ff ff5a 	bl	800f970 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800fabc:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800fac0:	4607      	mov	r7, r0
 800fac2:	4630      	mov	r0, r6
 800fac4:	f7fa fccc 	bl	800a460 <ucdr_serialize_bool>
 800fac8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800facc:	4038      	ands	r0, r7
 800face:	b2c7      	uxtb	r7, r0
 800fad0:	b913      	cbnz	r3, 800fad8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800fad2:	403c      	ands	r4, r7
 800fad4:	4620      	mov	r0, r4
 800fad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fad8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800fadc:	4630      	mov	r0, r6
 800fade:	f7fb f959 	bl	800ad94 <ucdr_serialize_uint64_t>
 800fae2:	4007      	ands	r7, r0
 800fae4:	e7f5      	b.n	800fad2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800fae6:	bf00      	nop

0800fae8 <uxr_deserialize_ObjectVariant>:
 800fae8:	b570      	push	{r4, r5, r6, lr}
 800faea:	4605      	mov	r5, r0
 800faec:	460e      	mov	r6, r1
 800faee:	f7fa fcfb 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 800faf2:	b168      	cbz	r0, 800fb10 <uxr_deserialize_ObjectVariant+0x28>
 800faf4:	7833      	ldrb	r3, [r6, #0]
 800faf6:	3b01      	subs	r3, #1
 800faf8:	4604      	mov	r4, r0
 800fafa:	2b0d      	cmp	r3, #13
 800fafc:	d809      	bhi.n	800fb12 <uxr_deserialize_ObjectVariant+0x2a>
 800fafe:	e8df f003 	tbb	[pc, r3]
 800fb02:	0a41      	.short	0x0a41
 800fb04:	0a0a2323 	.word	0x0a0a2323
 800fb08:	10080a0a 	.word	0x10080a0a
 800fb0c:	565c1010 	.word	0x565c1010
 800fb10:	2400      	movs	r4, #0
 800fb12:	4620      	mov	r0, r4
 800fb14:	bd70      	pop	{r4, r5, r6, pc}
 800fb16:	1d31      	adds	r1, r6, #4
 800fb18:	4628      	mov	r0, r5
 800fb1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb1e:	f7ff bd55 	b.w	800f5cc <uxr_deserialize_DATAWRITER_Representation>
 800fb22:	1d31      	adds	r1, r6, #4
 800fb24:	4628      	mov	r0, r5
 800fb26:	f7fa fcdf 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	d0f0      	beq.n	800fb10 <uxr_deserialize_ObjectVariant+0x28>
 800fb2e:	7933      	ldrb	r3, [r6, #4]
 800fb30:	2b01      	cmp	r3, #1
 800fb32:	d001      	beq.n	800fb38 <uxr_deserialize_ObjectVariant+0x50>
 800fb34:	2b02      	cmp	r3, #2
 800fb36:	d1ec      	bne.n	800fb12 <uxr_deserialize_ObjectVariant+0x2a>
 800fb38:	68b1      	ldr	r1, [r6, #8]
 800fb3a:	4628      	mov	r0, r5
 800fb3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb44:	f005 b99a 	b.w	8014e7c <ucdr_deserialize_string>
 800fb48:	1d31      	adds	r1, r6, #4
 800fb4a:	4628      	mov	r0, r5
 800fb4c:	f7fa fccc 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 800fb50:	4604      	mov	r4, r0
 800fb52:	b170      	cbz	r0, 800fb72 <uxr_deserialize_ObjectVariant+0x8a>
 800fb54:	7933      	ldrb	r3, [r6, #4]
 800fb56:	2b02      	cmp	r3, #2
 800fb58:	d04c      	beq.n	800fbf4 <uxr_deserialize_ObjectVariant+0x10c>
 800fb5a:	2b03      	cmp	r3, #3
 800fb5c:	d109      	bne.n	800fb72 <uxr_deserialize_ObjectVariant+0x8a>
 800fb5e:	f106 0308 	add.w	r3, r6, #8
 800fb62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb66:	f106 010c 	add.w	r1, r6, #12
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	f005 f95c 	bl	8014e28 <ucdr_deserialize_sequence_uint8_t>
 800fb70:	4604      	mov	r4, r0
 800fb72:	2202      	movs	r2, #2
 800fb74:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800fb78:	4628      	mov	r0, r5
 800fb7a:	f005 f8b3 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800fb7e:	4020      	ands	r0, r4
 800fb80:	b2c4      	uxtb	r4, r0
 800fb82:	e7c6      	b.n	800fb12 <uxr_deserialize_ObjectVariant+0x2a>
 800fb84:	1d31      	adds	r1, r6, #4
 800fb86:	4628      	mov	r0, r5
 800fb88:	f7fa fcae 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 800fb8c:	4604      	mov	r4, r0
 800fb8e:	b130      	cbz	r0, 800fb9e <uxr_deserialize_ObjectVariant+0xb6>
 800fb90:	7933      	ldrb	r3, [r6, #4]
 800fb92:	2b02      	cmp	r3, #2
 800fb94:	d036      	beq.n	800fc04 <uxr_deserialize_ObjectVariant+0x11c>
 800fb96:	2b03      	cmp	r3, #3
 800fb98:	d03c      	beq.n	800fc14 <uxr_deserialize_ObjectVariant+0x12c>
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d032      	beq.n	800fc04 <uxr_deserialize_ObjectVariant+0x11c>
 800fb9e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800fba2:	4628      	mov	r0, r5
 800fba4:	f7fb fa46 	bl	800b034 <ucdr_deserialize_int16_t>
 800fba8:	4020      	ands	r0, r4
 800fbaa:	b2c4      	uxtb	r4, r0
 800fbac:	e7b1      	b.n	800fb12 <uxr_deserialize_ObjectVariant+0x2a>
 800fbae:	1d31      	adds	r1, r6, #4
 800fbb0:	4628      	mov	r0, r5
 800fbb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fbb6:	f7ff bbbf 	b.w	800f338 <uxr_deserialize_CLIENT_Representation>
 800fbba:	2204      	movs	r2, #4
 800fbbc:	18b1      	adds	r1, r6, r2
 800fbbe:	4628      	mov	r0, r5
 800fbc0:	f005 f890 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800fbc4:	2202      	movs	r2, #2
 800fbc6:	f106 0108 	add.w	r1, r6, #8
 800fbca:	4604      	mov	r4, r0
 800fbcc:	4628      	mov	r0, r5
 800fbce:	f005 f889 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800fbd2:	2202      	movs	r2, #2
 800fbd4:	4004      	ands	r4, r0
 800fbd6:	f106 010a 	add.w	r1, r6, #10
 800fbda:	4628      	mov	r0, r5
 800fbdc:	f005 f882 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800fbe0:	b2e4      	uxtb	r4, r4
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	f106 010c 	add.w	r1, r6, #12
 800fbe8:	4628      	mov	r0, r5
 800fbea:	401c      	ands	r4, r3
 800fbec:	f7fa fc4e 	bl	800a48c <ucdr_deserialize_bool>
 800fbf0:	4004      	ands	r4, r0
 800fbf2:	e78e      	b.n	800fb12 <uxr_deserialize_ObjectVariant+0x2a>
 800fbf4:	68b1      	ldr	r1, [r6, #8]
 800fbf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	f005 f93e 	bl	8014e7c <ucdr_deserialize_string>
 800fc00:	4604      	mov	r4, r0
 800fc02:	e7b6      	b.n	800fb72 <uxr_deserialize_ObjectVariant+0x8a>
 800fc04:	68b1      	ldr	r1, [r6, #8]
 800fc06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc0a:	4628      	mov	r0, r5
 800fc0c:	f005 f936 	bl	8014e7c <ucdr_deserialize_string>
 800fc10:	4604      	mov	r4, r0
 800fc12:	e7c4      	b.n	800fb9e <uxr_deserialize_ObjectVariant+0xb6>
 800fc14:	f106 0308 	add.w	r3, r6, #8
 800fc18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc1c:	f106 010c 	add.w	r1, r6, #12
 800fc20:	4628      	mov	r0, r5
 800fc22:	f005 f901 	bl	8014e28 <ucdr_deserialize_sequence_uint8_t>
 800fc26:	4604      	mov	r4, r0
 800fc28:	e7b9      	b.n	800fb9e <uxr_deserialize_ObjectVariant+0xb6>
 800fc2a:	bf00      	nop

0800fc2c <uxr_deserialize_BaseObjectRequest>:
 800fc2c:	b570      	push	{r4, r5, r6, lr}
 800fc2e:	2202      	movs	r2, #2
 800fc30:	4605      	mov	r5, r0
 800fc32:	460e      	mov	r6, r1
 800fc34:	f005 f856 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800fc38:	2202      	movs	r2, #2
 800fc3a:	4604      	mov	r4, r0
 800fc3c:	18b1      	adds	r1, r6, r2
 800fc3e:	4628      	mov	r0, r5
 800fc40:	f005 f850 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800fc44:	4020      	ands	r0, r4
 800fc46:	b2c0      	uxtb	r0, r0
 800fc48:	bd70      	pop	{r4, r5, r6, pc}
 800fc4a:	bf00      	nop

0800fc4c <uxr_serialize_ActivityInfoVariant>:
 800fc4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc50:	460d      	mov	r5, r1
 800fc52:	7809      	ldrb	r1, [r1, #0]
 800fc54:	4607      	mov	r7, r0
 800fc56:	f7fa fc31 	bl	800a4bc <ucdr_serialize_uint8_t>
 800fc5a:	4681      	mov	r9, r0
 800fc5c:	b138      	cbz	r0, 800fc6e <uxr_serialize_ActivityInfoVariant+0x22>
 800fc5e:	782b      	ldrb	r3, [r5, #0]
 800fc60:	2b06      	cmp	r3, #6
 800fc62:	f000 8082 	beq.w	800fd6a <uxr_serialize_ActivityInfoVariant+0x11e>
 800fc66:	2b0d      	cmp	r3, #13
 800fc68:	d016      	beq.n	800fc98 <uxr_serialize_ActivityInfoVariant+0x4c>
 800fc6a:	2b05      	cmp	r3, #5
 800fc6c:	d002      	beq.n	800fc74 <uxr_serialize_ActivityInfoVariant+0x28>
 800fc6e:	4648      	mov	r0, r9
 800fc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc74:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fc78:	4638      	mov	r0, r7
 800fc7a:	f7fb f95b 	bl	800af34 <ucdr_serialize_int16_t>
 800fc7e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800fc82:	4681      	mov	r9, r0
 800fc84:	4638      	mov	r0, r7
 800fc86:	f7fb f885 	bl	800ad94 <ucdr_serialize_uint64_t>
 800fc8a:	ea09 0000 	and.w	r0, r9, r0
 800fc8e:	fa5f f980 	uxtb.w	r9, r0
 800fc92:	4648      	mov	r0, r9
 800fc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc98:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fc9c:	4638      	mov	r0, r7
 800fc9e:	f7fb f949 	bl	800af34 <ucdr_serialize_int16_t>
 800fca2:	68e9      	ldr	r1, [r5, #12]
 800fca4:	4681      	mov	r9, r0
 800fca6:	4638      	mov	r0, r7
 800fca8:	f7fa fe1e 	bl	800a8e8 <ucdr_serialize_uint32_t>
 800fcac:	68eb      	ldr	r3, [r5, #12]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d0eb      	beq.n	800fc8a <uxr_serialize_ActivityInfoVariant+0x3e>
 800fcb2:	b320      	cbz	r0, 800fcfe <uxr_serialize_ActivityInfoVariant+0xb2>
 800fcb4:	f105 080c 	add.w	r8, r5, #12
 800fcb8:	2600      	movs	r6, #0
 800fcba:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800fcbe:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800fcc2:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800fcc6:	4638      	mov	r0, r7
 800fcc8:	f7fa fbf8 	bl	800a4bc <ucdr_serialize_uint8_t>
 800fccc:	2800      	cmp	r0, #0
 800fcce:	d053      	beq.n	800fd78 <uxr_serialize_ActivityInfoVariant+0x12c>
 800fcd0:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800fcd4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800fcd8:	0074      	lsls	r4, r6, #1
 800fcda:	00c9      	lsls	r1, r1, #3
 800fcdc:	2b03      	cmp	r3, #3
 800fcde:	d854      	bhi.n	800fd8a <uxr_serialize_ActivityInfoVariant+0x13e>
 800fce0:	e8df f003 	tbb	[pc, r3]
 800fce4:	02102132 	.word	0x02102132
 800fce8:	4441      	add	r1, r8
 800fcea:	4638      	mov	r0, r7
 800fcec:	6889      	ldr	r1, [r1, #8]
 800fcee:	f005 f8b5 	bl	8014e5c <ucdr_serialize_string>
 800fcf2:	68ea      	ldr	r2, [r5, #12]
 800fcf4:	3601      	adds	r6, #1
 800fcf6:	4296      	cmp	r6, r2
 800fcf8:	d242      	bcs.n	800fd80 <uxr_serialize_ActivityInfoVariant+0x134>
 800fcfa:	2800      	cmp	r0, #0
 800fcfc:	d1dd      	bne.n	800fcba <uxr_serialize_ActivityInfoVariant+0x6e>
 800fcfe:	f04f 0900 	mov.w	r9, #0
 800fd02:	e7b4      	b.n	800fc6e <uxr_serialize_ActivityInfoVariant+0x22>
 800fd04:	3108      	adds	r1, #8
 800fd06:	4441      	add	r1, r8
 800fd08:	2210      	movs	r2, #16
 800fd0a:	4638      	mov	r0, r7
 800fd0c:	f004 ff86 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800fd10:	4434      	add	r4, r6
 800fd12:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fd16:	4604      	mov	r4, r0
 800fd18:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800fd1a:	4638      	mov	r0, r7
 800fd1c:	f7fa fde4 	bl	800a8e8 <ucdr_serialize_uint32_t>
 800fd20:	4020      	ands	r0, r4
 800fd22:	b2c0      	uxtb	r0, r0
 800fd24:	e7e5      	b.n	800fcf2 <uxr_serialize_ActivityInfoVariant+0xa6>
 800fd26:	3108      	adds	r1, #8
 800fd28:	4441      	add	r1, r8
 800fd2a:	2204      	movs	r2, #4
 800fd2c:	4638      	mov	r0, r7
 800fd2e:	f004 ff75 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800fd32:	4434      	add	r4, r6
 800fd34:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fd38:	4604      	mov	r4, r0
 800fd3a:	8b19      	ldrh	r1, [r3, #24]
 800fd3c:	4638      	mov	r0, r7
 800fd3e:	f7fa fbe9 	bl	800a514 <ucdr_serialize_uint16_t>
 800fd42:	4020      	ands	r0, r4
 800fd44:	b2c0      	uxtb	r0, r0
 800fd46:	e7d4      	b.n	800fcf2 <uxr_serialize_ActivityInfoVariant+0xa6>
 800fd48:	3108      	adds	r1, #8
 800fd4a:	4441      	add	r1, r8
 800fd4c:	2202      	movs	r2, #2
 800fd4e:	4638      	mov	r0, r7
 800fd50:	f004 ff64 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800fd54:	4434      	add	r4, r6
 800fd56:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fd5a:	4604      	mov	r4, r0
 800fd5c:	7d99      	ldrb	r1, [r3, #22]
 800fd5e:	4638      	mov	r0, r7
 800fd60:	f7fa fbac 	bl	800a4bc <ucdr_serialize_uint8_t>
 800fd64:	4020      	ands	r0, r4
 800fd66:	b2c0      	uxtb	r0, r0
 800fd68:	e7c3      	b.n	800fcf2 <uxr_serialize_ActivityInfoVariant+0xa6>
 800fd6a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fd6e:	4638      	mov	r0, r7
 800fd70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd74:	f7fb b8de 	b.w	800af34 <ucdr_serialize_int16_t>
 800fd78:	68ea      	ldr	r2, [r5, #12]
 800fd7a:	3601      	adds	r6, #1
 800fd7c:	42b2      	cmp	r2, r6
 800fd7e:	d8be      	bhi.n	800fcfe <uxr_serialize_ActivityInfoVariant+0xb2>
 800fd80:	ea09 0900 	and.w	r9, r9, r0
 800fd84:	fa5f f989 	uxtb.w	r9, r9
 800fd88:	e771      	b.n	800fc6e <uxr_serialize_ActivityInfoVariant+0x22>
 800fd8a:	68eb      	ldr	r3, [r5, #12]
 800fd8c:	3601      	adds	r6, #1
 800fd8e:	429e      	cmp	r6, r3
 800fd90:	f10a 0a18 	add.w	sl, sl, #24
 800fd94:	d395      	bcc.n	800fcc2 <uxr_serialize_ActivityInfoVariant+0x76>
 800fd96:	e76a      	b.n	800fc6e <uxr_serialize_ActivityInfoVariant+0x22>

0800fd98 <uxr_deserialize_BaseObjectReply>:
 800fd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd9c:	2202      	movs	r2, #2
 800fd9e:	4606      	mov	r6, r0
 800fda0:	460f      	mov	r7, r1
 800fda2:	f004 ff9f 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800fda6:	2202      	movs	r2, #2
 800fda8:	18b9      	adds	r1, r7, r2
 800fdaa:	4605      	mov	r5, r0
 800fdac:	4630      	mov	r0, r6
 800fdae:	f004 ff99 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800fdb2:	1d39      	adds	r1, r7, #4
 800fdb4:	4680      	mov	r8, r0
 800fdb6:	4630      	mov	r0, r6
 800fdb8:	f7fa fb96 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 800fdbc:	1d79      	adds	r1, r7, #5
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	4630      	mov	r0, r6
 800fdc2:	f7fa fb91 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 800fdc6:	ea05 0508 	and.w	r5, r5, r8
 800fdca:	402c      	ands	r4, r5
 800fdcc:	4020      	ands	r0, r4
 800fdce:	b2c0      	uxtb	r0, r0
 800fdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fdd4 <uxr_serialize_ReadSpecification>:
 800fdd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdd8:	460e      	mov	r6, r1
 800fdda:	7809      	ldrb	r1, [r1, #0]
 800fddc:	4607      	mov	r7, r0
 800fdde:	f7fa fb6d 	bl	800a4bc <ucdr_serialize_uint8_t>
 800fde2:	7871      	ldrb	r1, [r6, #1]
 800fde4:	4604      	mov	r4, r0
 800fde6:	4638      	mov	r0, r7
 800fde8:	f7fa fb68 	bl	800a4bc <ucdr_serialize_uint8_t>
 800fdec:	78b1      	ldrb	r1, [r6, #2]
 800fdee:	4004      	ands	r4, r0
 800fdf0:	4638      	mov	r0, r7
 800fdf2:	f7fa fb35 	bl	800a460 <ucdr_serialize_bool>
 800fdf6:	78b3      	ldrb	r3, [r6, #2]
 800fdf8:	b2e4      	uxtb	r4, r4
 800fdfa:	4004      	ands	r4, r0
 800fdfc:	b94b      	cbnz	r3, 800fe12 <uxr_serialize_ReadSpecification+0x3e>
 800fdfe:	7a31      	ldrb	r1, [r6, #8]
 800fe00:	4638      	mov	r0, r7
 800fe02:	f7fa fb2d 	bl	800a460 <ucdr_serialize_bool>
 800fe06:	7a33      	ldrb	r3, [r6, #8]
 800fe08:	4004      	ands	r4, r0
 800fe0a:	b943      	cbnz	r3, 800fe1e <uxr_serialize_ReadSpecification+0x4a>
 800fe0c:	4620      	mov	r0, r4
 800fe0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe12:	6871      	ldr	r1, [r6, #4]
 800fe14:	4638      	mov	r0, r7
 800fe16:	f005 f821 	bl	8014e5c <ucdr_serialize_string>
 800fe1a:	4004      	ands	r4, r0
 800fe1c:	e7ef      	b.n	800fdfe <uxr_serialize_ReadSpecification+0x2a>
 800fe1e:	8971      	ldrh	r1, [r6, #10]
 800fe20:	4638      	mov	r0, r7
 800fe22:	f7fa fb77 	bl	800a514 <ucdr_serialize_uint16_t>
 800fe26:	89b1      	ldrh	r1, [r6, #12]
 800fe28:	4605      	mov	r5, r0
 800fe2a:	4638      	mov	r0, r7
 800fe2c:	f7fa fb72 	bl	800a514 <ucdr_serialize_uint16_t>
 800fe30:	89f1      	ldrh	r1, [r6, #14]
 800fe32:	4005      	ands	r5, r0
 800fe34:	4638      	mov	r0, r7
 800fe36:	f7fa fb6d 	bl	800a514 <ucdr_serialize_uint16_t>
 800fe3a:	8a31      	ldrh	r1, [r6, #16]
 800fe3c:	4680      	mov	r8, r0
 800fe3e:	4638      	mov	r0, r7
 800fe40:	f7fa fb68 	bl	800a514 <ucdr_serialize_uint16_t>
 800fe44:	b2ed      	uxtb	r5, r5
 800fe46:	4025      	ands	r5, r4
 800fe48:	ea08 0505 	and.w	r5, r8, r5
 800fe4c:	ea00 0405 	and.w	r4, r0, r5
 800fe50:	4620      	mov	r0, r4
 800fe52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe56:	bf00      	nop

0800fe58 <uxr_serialize_CREATE_CLIENT_Payload>:
 800fe58:	f7ff ba16 	b.w	800f288 <uxr_serialize_CLIENT_Representation>

0800fe5c <uxr_serialize_CREATE_Payload>:
 800fe5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe5e:	2202      	movs	r2, #2
 800fe60:	4607      	mov	r7, r0
 800fe62:	460e      	mov	r6, r1
 800fe64:	f004 feda 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800fe68:	2202      	movs	r2, #2
 800fe6a:	18b1      	adds	r1, r6, r2
 800fe6c:	4605      	mov	r5, r0
 800fe6e:	4638      	mov	r0, r7
 800fe70:	f004 fed4 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800fe74:	7931      	ldrb	r1, [r6, #4]
 800fe76:	4604      	mov	r4, r0
 800fe78:	4638      	mov	r0, r7
 800fe7a:	f7fa fb1f 	bl	800a4bc <ucdr_serialize_uint8_t>
 800fe7e:	b170      	cbz	r0, 800fe9e <uxr_serialize_CREATE_Payload+0x42>
 800fe80:	7933      	ldrb	r3, [r6, #4]
 800fe82:	402c      	ands	r4, r5
 800fe84:	3b01      	subs	r3, #1
 800fe86:	b2e4      	uxtb	r4, r4
 800fe88:	2b0d      	cmp	r3, #13
 800fe8a:	d809      	bhi.n	800fea0 <uxr_serialize_CREATE_Payload+0x44>
 800fe8c:	e8df f003 	tbb	[pc, r3]
 800fe90:	23230a4c 	.word	0x23230a4c
 800fe94:	0a0a0a0a 	.word	0x0a0a0a0a
 800fe98:	12121208 	.word	0x12121208
 800fe9c:	3e45      	.short	0x3e45
 800fe9e:	2400      	movs	r4, #0
 800fea0:	4620      	mov	r0, r4
 800fea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fea4:	f106 0108 	add.w	r1, r6, #8
 800fea8:	4638      	mov	r0, r7
 800feaa:	f7ff faf3 	bl	800f494 <uxr_serialize_DATAWRITER_Representation>
 800feae:	4004      	ands	r4, r0
 800feb0:	4620      	mov	r0, r4
 800feb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800feb4:	7a31      	ldrb	r1, [r6, #8]
 800feb6:	4638      	mov	r0, r7
 800feb8:	f7fa fb00 	bl	800a4bc <ucdr_serialize_uint8_t>
 800febc:	2800      	cmp	r0, #0
 800febe:	d0ee      	beq.n	800fe9e <uxr_serialize_CREATE_Payload+0x42>
 800fec0:	7a33      	ldrb	r3, [r6, #8]
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d001      	beq.n	800feca <uxr_serialize_CREATE_Payload+0x6e>
 800fec6:	2b02      	cmp	r3, #2
 800fec8:	d1ea      	bne.n	800fea0 <uxr_serialize_CREATE_Payload+0x44>
 800feca:	68f1      	ldr	r1, [r6, #12]
 800fecc:	4638      	mov	r0, r7
 800fece:	f004 ffc5 	bl	8014e5c <ucdr_serialize_string>
 800fed2:	4004      	ands	r4, r0
 800fed4:	e7e4      	b.n	800fea0 <uxr_serialize_CREATE_Payload+0x44>
 800fed6:	7a31      	ldrb	r1, [r6, #8]
 800fed8:	4638      	mov	r0, r7
 800feda:	f7fa faef 	bl	800a4bc <ucdr_serialize_uint8_t>
 800fede:	4605      	mov	r5, r0
 800fee0:	b158      	cbz	r0, 800fefa <uxr_serialize_CREATE_Payload+0x9e>
 800fee2:	7a33      	ldrb	r3, [r6, #8]
 800fee4:	2b02      	cmp	r3, #2
 800fee6:	d034      	beq.n	800ff52 <uxr_serialize_CREATE_Payload+0xf6>
 800fee8:	2b03      	cmp	r3, #3
 800feea:	d106      	bne.n	800fefa <uxr_serialize_CREATE_Payload+0x9e>
 800feec:	68f2      	ldr	r2, [r6, #12]
 800feee:	f106 0110 	add.w	r1, r6, #16
 800fef2:	4638      	mov	r0, r7
 800fef4:	f004 ff86 	bl	8014e04 <ucdr_serialize_sequence_uint8_t>
 800fef8:	4605      	mov	r5, r0
 800fefa:	2202      	movs	r2, #2
 800fefc:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800ff00:	4638      	mov	r0, r7
 800ff02:	f004 fe8b 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800ff06:	4028      	ands	r0, r5
 800ff08:	4004      	ands	r4, r0
 800ff0a:	e7c9      	b.n	800fea0 <uxr_serialize_CREATE_Payload+0x44>
 800ff0c:	f106 0108 	add.w	r1, r6, #8
 800ff10:	4638      	mov	r0, r7
 800ff12:	f7ff f9b9 	bl	800f288 <uxr_serialize_CLIENT_Representation>
 800ff16:	4004      	ands	r4, r0
 800ff18:	e7c2      	b.n	800fea0 <uxr_serialize_CREATE_Payload+0x44>
 800ff1a:	f106 0108 	add.w	r1, r6, #8
 800ff1e:	4638      	mov	r0, r7
 800ff20:	f7ff fa6e 	bl	800f400 <uxr_serialize_AGENT_Representation>
 800ff24:	4004      	ands	r4, r0
 800ff26:	e7bb      	b.n	800fea0 <uxr_serialize_CREATE_Payload+0x44>
 800ff28:	7a31      	ldrb	r1, [r6, #8]
 800ff2a:	4638      	mov	r0, r7
 800ff2c:	f7fa fac6 	bl	800a4bc <ucdr_serialize_uint8_t>
 800ff30:	4605      	mov	r5, r0
 800ff32:	b130      	cbz	r0, 800ff42 <uxr_serialize_CREATE_Payload+0xe6>
 800ff34:	7a33      	ldrb	r3, [r6, #8]
 800ff36:	2b02      	cmp	r3, #2
 800ff38:	d011      	beq.n	800ff5e <uxr_serialize_CREATE_Payload+0x102>
 800ff3a:	2b03      	cmp	r3, #3
 800ff3c:	d015      	beq.n	800ff6a <uxr_serialize_CREATE_Payload+0x10e>
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d00d      	beq.n	800ff5e <uxr_serialize_CREATE_Payload+0x102>
 800ff42:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800ff46:	4638      	mov	r0, r7
 800ff48:	f7fa fff4 	bl	800af34 <ucdr_serialize_int16_t>
 800ff4c:	4028      	ands	r0, r5
 800ff4e:	4004      	ands	r4, r0
 800ff50:	e7a6      	b.n	800fea0 <uxr_serialize_CREATE_Payload+0x44>
 800ff52:	68f1      	ldr	r1, [r6, #12]
 800ff54:	4638      	mov	r0, r7
 800ff56:	f004 ff81 	bl	8014e5c <ucdr_serialize_string>
 800ff5a:	4605      	mov	r5, r0
 800ff5c:	e7cd      	b.n	800fefa <uxr_serialize_CREATE_Payload+0x9e>
 800ff5e:	68f1      	ldr	r1, [r6, #12]
 800ff60:	4638      	mov	r0, r7
 800ff62:	f004 ff7b 	bl	8014e5c <ucdr_serialize_string>
 800ff66:	4605      	mov	r5, r0
 800ff68:	e7eb      	b.n	800ff42 <uxr_serialize_CREATE_Payload+0xe6>
 800ff6a:	68f2      	ldr	r2, [r6, #12]
 800ff6c:	f106 0110 	add.w	r1, r6, #16
 800ff70:	4638      	mov	r0, r7
 800ff72:	f004 ff47 	bl	8014e04 <ucdr_serialize_sequence_uint8_t>
 800ff76:	4605      	mov	r5, r0
 800ff78:	e7e3      	b.n	800ff42 <uxr_serialize_CREATE_Payload+0xe6>
 800ff7a:	bf00      	nop

0800ff7c <uxr_deserialize_GET_INFO_Payload>:
 800ff7c:	b570      	push	{r4, r5, r6, lr}
 800ff7e:	2202      	movs	r2, #2
 800ff80:	4605      	mov	r5, r0
 800ff82:	460e      	mov	r6, r1
 800ff84:	f004 feae 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800ff88:	2202      	movs	r2, #2
 800ff8a:	18b1      	adds	r1, r6, r2
 800ff8c:	4604      	mov	r4, r0
 800ff8e:	4628      	mov	r0, r5
 800ff90:	f004 fea8 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800ff94:	1d31      	adds	r1, r6, #4
 800ff96:	4004      	ands	r4, r0
 800ff98:	4628      	mov	r0, r5
 800ff9a:	f7fa fdd5 	bl	800ab48 <ucdr_deserialize_uint32_t>
 800ff9e:	b2e4      	uxtb	r4, r4
 800ffa0:	4020      	ands	r0, r4
 800ffa2:	bd70      	pop	{r4, r5, r6, pc}

0800ffa4 <uxr_serialize_DELETE_Payload>:
 800ffa4:	b570      	push	{r4, r5, r6, lr}
 800ffa6:	2202      	movs	r2, #2
 800ffa8:	4605      	mov	r5, r0
 800ffaa:	460e      	mov	r6, r1
 800ffac:	f004 fe36 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800ffb0:	2202      	movs	r2, #2
 800ffb2:	4604      	mov	r4, r0
 800ffb4:	18b1      	adds	r1, r6, r2
 800ffb6:	4628      	mov	r0, r5
 800ffb8:	f004 fe30 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 800ffbc:	4020      	ands	r0, r4
 800ffbe:	b2c0      	uxtb	r0, r0
 800ffc0:	bd70      	pop	{r4, r5, r6, pc}
 800ffc2:	bf00      	nop

0800ffc4 <uxr_deserialize_STATUS_AGENT_Payload>:
 800ffc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffc8:	4605      	mov	r5, r0
 800ffca:	460e      	mov	r6, r1
 800ffcc:	f7fa fa8c 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 800ffd0:	1c71      	adds	r1, r6, #1
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	4628      	mov	r0, r5
 800ffd6:	f7fa fa87 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 800ffda:	2204      	movs	r2, #4
 800ffdc:	18b1      	adds	r1, r6, r2
 800ffde:	4680      	mov	r8, r0
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	f004 fe7f 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800ffe6:	f106 0108 	add.w	r1, r6, #8
 800ffea:	4607      	mov	r7, r0
 800ffec:	2202      	movs	r2, #2
 800ffee:	4628      	mov	r0, r5
 800fff0:	f004 fe78 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 800fff4:	ea04 0308 	and.w	r3, r4, r8
 800fff8:	b2db      	uxtb	r3, r3
 800fffa:	ea03 0407 	and.w	r4, r3, r7
 800fffe:	2202      	movs	r2, #2
 8010000:	4607      	mov	r7, r0
 8010002:	f106 010a 	add.w	r1, r6, #10
 8010006:	4628      	mov	r0, r5
 8010008:	f004 fe6c 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 801000c:	f106 010c 	add.w	r1, r6, #12
 8010010:	4603      	mov	r3, r0
 8010012:	4628      	mov	r0, r5
 8010014:	461d      	mov	r5, r3
 8010016:	f7fa fa39 	bl	800a48c <ucdr_deserialize_bool>
 801001a:	403c      	ands	r4, r7
 801001c:	4025      	ands	r5, r4
 801001e:	4028      	ands	r0, r5
 8010020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010024 <uxr_deserialize_STATUS_Payload>:
 8010024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010028:	2202      	movs	r2, #2
 801002a:	4606      	mov	r6, r0
 801002c:	460f      	mov	r7, r1
 801002e:	f004 fe59 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 8010032:	2202      	movs	r2, #2
 8010034:	18b9      	adds	r1, r7, r2
 8010036:	4605      	mov	r5, r0
 8010038:	4630      	mov	r0, r6
 801003a:	f004 fe53 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 801003e:	1d39      	adds	r1, r7, #4
 8010040:	4680      	mov	r8, r0
 8010042:	4630      	mov	r0, r6
 8010044:	f7fa fa50 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 8010048:	1d79      	adds	r1, r7, #5
 801004a:	4604      	mov	r4, r0
 801004c:	4630      	mov	r0, r6
 801004e:	f7fa fa4b 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 8010052:	ea05 0508 	and.w	r5, r5, r8
 8010056:	402c      	ands	r4, r5
 8010058:	4020      	ands	r0, r4
 801005a:	b2c0      	uxtb	r0, r0
 801005c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010060 <uxr_serialize_INFO_Payload>:
 8010060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010064:	2202      	movs	r2, #2
 8010066:	460c      	mov	r4, r1
 8010068:	4605      	mov	r5, r0
 801006a:	f004 fdd7 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 801006e:	2202      	movs	r2, #2
 8010070:	18a1      	adds	r1, r4, r2
 8010072:	4680      	mov	r8, r0
 8010074:	4628      	mov	r0, r5
 8010076:	f004 fdd1 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 801007a:	7921      	ldrb	r1, [r4, #4]
 801007c:	4607      	mov	r7, r0
 801007e:	4628      	mov	r0, r5
 8010080:	f7fa fa1c 	bl	800a4bc <ucdr_serialize_uint8_t>
 8010084:	7961      	ldrb	r1, [r4, #5]
 8010086:	4606      	mov	r6, r0
 8010088:	4628      	mov	r0, r5
 801008a:	f7fa fa17 	bl	800a4bc <ucdr_serialize_uint8_t>
 801008e:	ea08 0807 	and.w	r8, r8, r7
 8010092:	ea06 0608 	and.w	r6, r6, r8
 8010096:	4006      	ands	r6, r0
 8010098:	7a21      	ldrb	r1, [r4, #8]
 801009a:	4628      	mov	r0, r5
 801009c:	f7fa f9e0 	bl	800a460 <ucdr_serialize_bool>
 80100a0:	7a23      	ldrb	r3, [r4, #8]
 80100a2:	b2f7      	uxtb	r7, r6
 80100a4:	4606      	mov	r6, r0
 80100a6:	b96b      	cbnz	r3, 80100c4 <uxr_serialize_INFO_Payload+0x64>
 80100a8:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80100ac:	4628      	mov	r0, r5
 80100ae:	f7fa f9d7 	bl	800a460 <ucdr_serialize_bool>
 80100b2:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80100b6:	4030      	ands	r0, r6
 80100b8:	b2c6      	uxtb	r6, r0
 80100ba:	b983      	cbnz	r3, 80100de <uxr_serialize_INFO_Payload+0x7e>
 80100bc:	ea06 0007 	and.w	r0, r6, r7
 80100c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100c4:	7b21      	ldrb	r1, [r4, #12]
 80100c6:	4628      	mov	r0, r5
 80100c8:	f7fa f9f8 	bl	800a4bc <ucdr_serialize_uint8_t>
 80100cc:	b188      	cbz	r0, 80100f2 <uxr_serialize_INFO_Payload+0x92>
 80100ce:	f104 010c 	add.w	r1, r4, #12
 80100d2:	4628      	mov	r0, r5
 80100d4:	f7ff fa06 	bl	800f4e4 <uxr_serialize_ObjectVariant.part.0>
 80100d8:	4030      	ands	r0, r6
 80100da:	b2c6      	uxtb	r6, r0
 80100dc:	e7e4      	b.n	80100a8 <uxr_serialize_INFO_Payload+0x48>
 80100de:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80100e2:	4628      	mov	r0, r5
 80100e4:	f7ff fdb2 	bl	800fc4c <uxr_serialize_ActivityInfoVariant>
 80100e8:	4006      	ands	r6, r0
 80100ea:	ea06 0007 	and.w	r0, r6, r7
 80100ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f2:	4606      	mov	r6, r0
 80100f4:	e7d8      	b.n	80100a8 <uxr_serialize_INFO_Payload+0x48>
 80100f6:	bf00      	nop

080100f8 <uxr_serialize_READ_DATA_Payload>:
 80100f8:	b570      	push	{r4, r5, r6, lr}
 80100fa:	2202      	movs	r2, #2
 80100fc:	4605      	mov	r5, r0
 80100fe:	460e      	mov	r6, r1
 8010100:	f004 fd8c 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 8010104:	2202      	movs	r2, #2
 8010106:	18b1      	adds	r1, r6, r2
 8010108:	4604      	mov	r4, r0
 801010a:	4628      	mov	r0, r5
 801010c:	f004 fd86 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 8010110:	1d31      	adds	r1, r6, #4
 8010112:	4004      	ands	r4, r0
 8010114:	4628      	mov	r0, r5
 8010116:	f7ff fe5d 	bl	800fdd4 <uxr_serialize_ReadSpecification>
 801011a:	b2e4      	uxtb	r4, r4
 801011c:	4020      	ands	r0, r4
 801011e:	bd70      	pop	{r4, r5, r6, pc}

08010120 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010120:	b570      	push	{r4, r5, r6, lr}
 8010122:	2202      	movs	r2, #2
 8010124:	4605      	mov	r5, r0
 8010126:	460e      	mov	r6, r1
 8010128:	f004 fd78 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 801012c:	2202      	movs	r2, #2
 801012e:	4604      	mov	r4, r0
 8010130:	18b1      	adds	r1, r6, r2
 8010132:	4628      	mov	r0, r5
 8010134:	f004 fd72 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 8010138:	4020      	ands	r0, r4
 801013a:	b2c0      	uxtb	r0, r0
 801013c:	bd70      	pop	{r4, r5, r6, pc}
 801013e:	bf00      	nop

08010140 <uxr_serialize_ACKNACK_Payload>:
 8010140:	b570      	push	{r4, r5, r6, lr}
 8010142:	460c      	mov	r4, r1
 8010144:	460e      	mov	r6, r1
 8010146:	f834 1b02 	ldrh.w	r1, [r4], #2
 801014a:	4605      	mov	r5, r0
 801014c:	f7fa f9e2 	bl	800a514 <ucdr_serialize_uint16_t>
 8010150:	2202      	movs	r2, #2
 8010152:	4621      	mov	r1, r4
 8010154:	4604      	mov	r4, r0
 8010156:	4628      	mov	r0, r5
 8010158:	f004 fd60 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 801015c:	7931      	ldrb	r1, [r6, #4]
 801015e:	4004      	ands	r4, r0
 8010160:	4628      	mov	r0, r5
 8010162:	f7fa f9ab 	bl	800a4bc <ucdr_serialize_uint8_t>
 8010166:	b2e4      	uxtb	r4, r4
 8010168:	4020      	ands	r0, r4
 801016a:	bd70      	pop	{r4, r5, r6, pc}

0801016c <uxr_deserialize_ACKNACK_Payload>:
 801016c:	b570      	push	{r4, r5, r6, lr}
 801016e:	4605      	mov	r5, r0
 8010170:	460e      	mov	r6, r1
 8010172:	f7fa facf 	bl	800a714 <ucdr_deserialize_uint16_t>
 8010176:	2202      	movs	r2, #2
 8010178:	18b1      	adds	r1, r6, r2
 801017a:	4604      	mov	r4, r0
 801017c:	4628      	mov	r0, r5
 801017e:	f004 fdb1 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 8010182:	1d31      	adds	r1, r6, #4
 8010184:	4004      	ands	r4, r0
 8010186:	4628      	mov	r0, r5
 8010188:	f7fa f9ae 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 801018c:	b2e4      	uxtb	r4, r4
 801018e:	4020      	ands	r0, r4
 8010190:	bd70      	pop	{r4, r5, r6, pc}
 8010192:	bf00      	nop

08010194 <uxr_serialize_HEARTBEAT_Payload>:
 8010194:	b570      	push	{r4, r5, r6, lr}
 8010196:	460d      	mov	r5, r1
 8010198:	8809      	ldrh	r1, [r1, #0]
 801019a:	4606      	mov	r6, r0
 801019c:	f7fa f9ba 	bl	800a514 <ucdr_serialize_uint16_t>
 80101a0:	8869      	ldrh	r1, [r5, #2]
 80101a2:	4604      	mov	r4, r0
 80101a4:	4630      	mov	r0, r6
 80101a6:	f7fa f9b5 	bl	800a514 <ucdr_serialize_uint16_t>
 80101aa:	7929      	ldrb	r1, [r5, #4]
 80101ac:	4004      	ands	r4, r0
 80101ae:	4630      	mov	r0, r6
 80101b0:	f7fa f984 	bl	800a4bc <ucdr_serialize_uint8_t>
 80101b4:	b2e4      	uxtb	r4, r4
 80101b6:	4020      	ands	r0, r4
 80101b8:	bd70      	pop	{r4, r5, r6, pc}
 80101ba:	bf00      	nop

080101bc <uxr_deserialize_HEARTBEAT_Payload>:
 80101bc:	b570      	push	{r4, r5, r6, lr}
 80101be:	4605      	mov	r5, r0
 80101c0:	460e      	mov	r6, r1
 80101c2:	f7fa faa7 	bl	800a714 <ucdr_deserialize_uint16_t>
 80101c6:	1cb1      	adds	r1, r6, #2
 80101c8:	4604      	mov	r4, r0
 80101ca:	4628      	mov	r0, r5
 80101cc:	f7fa faa2 	bl	800a714 <ucdr_deserialize_uint16_t>
 80101d0:	1d31      	adds	r1, r6, #4
 80101d2:	4004      	ands	r4, r0
 80101d4:	4628      	mov	r0, r5
 80101d6:	f7fa f987 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 80101da:	b2e4      	uxtb	r4, r4
 80101dc:	4020      	ands	r0, r4
 80101de:	bd70      	pop	{r4, r5, r6, pc}

080101e0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80101e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e4:	4605      	mov	r5, r0
 80101e6:	460e      	mov	r6, r1
 80101e8:	f7fb f830 	bl	800b24c <ucdr_deserialize_int32_t>
 80101ec:	1d31      	adds	r1, r6, #4
 80101ee:	4607      	mov	r7, r0
 80101f0:	4628      	mov	r0, r5
 80101f2:	f7fa fca9 	bl	800ab48 <ucdr_deserialize_uint32_t>
 80101f6:	f106 0108 	add.w	r1, r6, #8
 80101fa:	4680      	mov	r8, r0
 80101fc:	4628      	mov	r0, r5
 80101fe:	f7fb f825 	bl	800b24c <ucdr_deserialize_int32_t>
 8010202:	f106 010c 	add.w	r1, r6, #12
 8010206:	4604      	mov	r4, r0
 8010208:	4628      	mov	r0, r5
 801020a:	f7fa fc9d 	bl	800ab48 <ucdr_deserialize_uint32_t>
 801020e:	ea07 0708 	and.w	r7, r7, r8
 8010212:	403c      	ands	r4, r7
 8010214:	f106 0110 	add.w	r1, r6, #16
 8010218:	4004      	ands	r4, r0
 801021a:	4628      	mov	r0, r5
 801021c:	f7fb f816 	bl	800b24c <ucdr_deserialize_int32_t>
 8010220:	f106 0114 	add.w	r1, r6, #20
 8010224:	4607      	mov	r7, r0
 8010226:	4628      	mov	r0, r5
 8010228:	f7fa fc8e 	bl	800ab48 <ucdr_deserialize_uint32_t>
 801022c:	b2e4      	uxtb	r4, r4
 801022e:	403c      	ands	r4, r7
 8010230:	4020      	ands	r0, r4
 8010232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010236:	bf00      	nop

08010238 <uxr_serialize_SampleIdentity>:
 8010238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801023c:	220c      	movs	r2, #12
 801023e:	4604      	mov	r4, r0
 8010240:	460d      	mov	r5, r1
 8010242:	f004 fceb 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 8010246:	2203      	movs	r2, #3
 8010248:	f105 010c 	add.w	r1, r5, #12
 801024c:	4607      	mov	r7, r0
 801024e:	4620      	mov	r0, r4
 8010250:	f004 fce4 	bl	8014c1c <ucdr_serialize_array_uint8_t>
 8010254:	7be9      	ldrb	r1, [r5, #15]
 8010256:	4680      	mov	r8, r0
 8010258:	4620      	mov	r0, r4
 801025a:	f7fa f92f 	bl	800a4bc <ucdr_serialize_uint8_t>
 801025e:	6929      	ldr	r1, [r5, #16]
 8010260:	4606      	mov	r6, r0
 8010262:	4620      	mov	r0, r4
 8010264:	f7fa ff5a 	bl	800b11c <ucdr_serialize_int32_t>
 8010268:	6969      	ldr	r1, [r5, #20]
 801026a:	4603      	mov	r3, r0
 801026c:	4620      	mov	r0, r4
 801026e:	ea07 0708 	and.w	r7, r7, r8
 8010272:	461c      	mov	r4, r3
 8010274:	f7fa fb38 	bl	800a8e8 <ucdr_serialize_uint32_t>
 8010278:	403e      	ands	r6, r7
 801027a:	4034      	ands	r4, r6
 801027c:	4020      	ands	r0, r4
 801027e:	b2c0      	uxtb	r0, r0
 8010280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010284 <uxr_deserialize_SampleIdentity>:
 8010284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010288:	220c      	movs	r2, #12
 801028a:	4604      	mov	r4, r0
 801028c:	460d      	mov	r5, r1
 801028e:	f004 fd29 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 8010292:	2203      	movs	r2, #3
 8010294:	f105 010c 	add.w	r1, r5, #12
 8010298:	4607      	mov	r7, r0
 801029a:	4620      	mov	r0, r4
 801029c:	f004 fd22 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 80102a0:	f105 010f 	add.w	r1, r5, #15
 80102a4:	4680      	mov	r8, r0
 80102a6:	4620      	mov	r0, r4
 80102a8:	f7fa f91e 	bl	800a4e8 <ucdr_deserialize_uint8_t>
 80102ac:	f105 0110 	add.w	r1, r5, #16
 80102b0:	4606      	mov	r6, r0
 80102b2:	4620      	mov	r0, r4
 80102b4:	f7fa ffca 	bl	800b24c <ucdr_deserialize_int32_t>
 80102b8:	f105 0114 	add.w	r1, r5, #20
 80102bc:	4603      	mov	r3, r0
 80102be:	4620      	mov	r0, r4
 80102c0:	ea07 0708 	and.w	r7, r7, r8
 80102c4:	461c      	mov	r4, r3
 80102c6:	f7fa fc3f 	bl	800ab48 <ucdr_deserialize_uint32_t>
 80102ca:	403e      	ands	r6, r7
 80102cc:	4034      	ands	r4, r6
 80102ce:	4020      	ands	r0, r4
 80102d0:	b2c0      	uxtb	r0, r0
 80102d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102d6:	bf00      	nop

080102d8 <rcl_client_get_rmw_handle>:
 80102d8:	b118      	cbz	r0, 80102e2 <rcl_client_get_rmw_handle+0xa>
 80102da:	6800      	ldr	r0, [r0, #0]
 80102dc:	b108      	cbz	r0, 80102e2 <rcl_client_get_rmw_handle+0xa>
 80102de:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80102e2:	4770      	bx	lr

080102e4 <rcl_send_request>:
 80102e4:	b570      	push	{r4, r5, r6, lr}
 80102e6:	b082      	sub	sp, #8
 80102e8:	b1e8      	cbz	r0, 8010326 <rcl_send_request+0x42>
 80102ea:	4604      	mov	r4, r0
 80102ec:	6800      	ldr	r0, [r0, #0]
 80102ee:	b1d0      	cbz	r0, 8010326 <rcl_send_request+0x42>
 80102f0:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80102f4:	b1bb      	cbz	r3, 8010326 <rcl_send_request+0x42>
 80102f6:	460e      	mov	r6, r1
 80102f8:	b1d1      	cbz	r1, 8010330 <rcl_send_request+0x4c>
 80102fa:	4615      	mov	r5, r2
 80102fc:	b1c2      	cbz	r2, 8010330 <rcl_send_request+0x4c>
 80102fe:	2105      	movs	r1, #5
 8010300:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010304:	f002 fd74 	bl	8012df0 <__atomic_load_8>
 8010308:	6823      	ldr	r3, [r4, #0]
 801030a:	e9c5 0100 	strd	r0, r1, [r5]
 801030e:	462a      	mov	r2, r5
 8010310:	4631      	mov	r1, r6
 8010312:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010316:	f003 ff1f 	bl	8014158 <rmw_send_request>
 801031a:	4606      	mov	r6, r0
 801031c:	b160      	cbz	r0, 8010338 <rcl_send_request+0x54>
 801031e:	2601      	movs	r6, #1
 8010320:	4630      	mov	r0, r6
 8010322:	b002      	add	sp, #8
 8010324:	bd70      	pop	{r4, r5, r6, pc}
 8010326:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801032a:	4630      	mov	r0, r6
 801032c:	b002      	add	sp, #8
 801032e:	bd70      	pop	{r4, r5, r6, pc}
 8010330:	260b      	movs	r6, #11
 8010332:	4630      	mov	r0, r6
 8010334:	b002      	add	sp, #8
 8010336:	bd70      	pop	{r4, r5, r6, pc}
 8010338:	6820      	ldr	r0, [r4, #0]
 801033a:	2105      	movs	r1, #5
 801033c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010340:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010344:	9100      	str	r1, [sp, #0]
 8010346:	f002 fdbf 	bl	8012ec8 <__atomic_exchange_8>
 801034a:	4630      	mov	r0, r6
 801034c:	b002      	add	sp, #8
 801034e:	bd70      	pop	{r4, r5, r6, pc}

08010350 <rcl_take_response>:
 8010350:	b570      	push	{r4, r5, r6, lr}
 8010352:	468e      	mov	lr, r1
 8010354:	460c      	mov	r4, r1
 8010356:	4616      	mov	r6, r2
 8010358:	4605      	mov	r5, r0
 801035a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801035e:	b08c      	sub	sp, #48	@ 0x30
 8010360:	f10d 0c18 	add.w	ip, sp, #24
 8010364:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010368:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801036c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010370:	b35d      	cbz	r5, 80103ca <rcl_take_response+0x7a>
 8010372:	682b      	ldr	r3, [r5, #0]
 8010374:	b34b      	cbz	r3, 80103ca <rcl_take_response+0x7a>
 8010376:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801037a:	b330      	cbz	r0, 80103ca <rcl_take_response+0x7a>
 801037c:	b346      	cbz	r6, 80103d0 <rcl_take_response+0x80>
 801037e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80103d8 <rcl_take_response+0x88>
 8010382:	2300      	movs	r3, #0
 8010384:	f88d 3007 	strb.w	r3, [sp, #7]
 8010388:	4632      	mov	r2, r6
 801038a:	f10d 0307 	add.w	r3, sp, #7
 801038e:	a902      	add	r1, sp, #8
 8010390:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010394:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010398:	f003 ffe6 	bl	8014368 <rmw_take_response>
 801039c:	4605      	mov	r5, r0
 801039e:	b9c8      	cbnz	r0, 80103d4 <rcl_take_response+0x84>
 80103a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80103a4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80103a8:	2a00      	cmp	r2, #0
 80103aa:	bf08      	it	eq
 80103ac:	461d      	moveq	r5, r3
 80103ae:	f10d 0e18 	add.w	lr, sp, #24
 80103b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80103b6:	46a4      	mov	ip, r4
 80103b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80103bc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80103c0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80103c4:	4628      	mov	r0, r5
 80103c6:	b00c      	add	sp, #48	@ 0x30
 80103c8:	bd70      	pop	{r4, r5, r6, pc}
 80103ca:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80103ce:	e7ee      	b.n	80103ae <rcl_take_response+0x5e>
 80103d0:	250b      	movs	r5, #11
 80103d2:	e7ec      	b.n	80103ae <rcl_take_response+0x5e>
 80103d4:	2501      	movs	r5, #1
 80103d6:	e7ea      	b.n	80103ae <rcl_take_response+0x5e>
	...

080103e0 <rcl_client_is_valid>:
 80103e0:	b130      	cbz	r0, 80103f0 <rcl_client_is_valid+0x10>
 80103e2:	6800      	ldr	r0, [r0, #0]
 80103e4:	b120      	cbz	r0, 80103f0 <rcl_client_is_valid+0x10>
 80103e6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80103ea:	3800      	subs	r0, #0
 80103ec:	bf18      	it	ne
 80103ee:	2001      	movne	r0, #1
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop

080103f4 <rcl_convert_rmw_ret_to_rcl_ret>:
 80103f4:	280b      	cmp	r0, #11
 80103f6:	dc0d      	bgt.n	8010414 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80103f8:	2800      	cmp	r0, #0
 80103fa:	db09      	blt.n	8010410 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80103fc:	280b      	cmp	r0, #11
 80103fe:	d807      	bhi.n	8010410 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010400:	e8df f000 	tbb	[pc, r0]
 8010404:	07060607 	.word	0x07060607
 8010408:	06060606 	.word	0x06060606
 801040c:	07070606 	.word	0x07070606
 8010410:	2001      	movs	r0, #1
 8010412:	4770      	bx	lr
 8010414:	28cb      	cmp	r0, #203	@ 0xcb
 8010416:	bf18      	it	ne
 8010418:	2001      	movne	r0, #1
 801041a:	4770      	bx	lr

0801041c <rcl_get_zero_initialized_context>:
 801041c:	4a03      	ldr	r2, [pc, #12]	@ (801042c <rcl_get_zero_initialized_context+0x10>)
 801041e:	4603      	mov	r3, r0
 8010420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010424:	e883 0003 	stmia.w	r3, {r0, r1}
 8010428:	4618      	mov	r0, r3
 801042a:	4770      	bx	lr
 801042c:	08018bf4 	.word	0x08018bf4

08010430 <rcl_context_is_valid>:
 8010430:	b118      	cbz	r0, 801043a <rcl_context_is_valid+0xa>
 8010432:	6840      	ldr	r0, [r0, #4]
 8010434:	3800      	subs	r0, #0
 8010436:	bf18      	it	ne
 8010438:	2001      	movne	r0, #1
 801043a:	4770      	bx	lr

0801043c <__cleanup_context>:
 801043c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010440:	4606      	mov	r6, r0
 8010442:	6800      	ldr	r0, [r0, #0]
 8010444:	2300      	movs	r3, #0
 8010446:	6073      	str	r3, [r6, #4]
 8010448:	2800      	cmp	r0, #0
 801044a:	d049      	beq.n	80104e0 <__cleanup_context+0xa4>
 801044c:	6947      	ldr	r7, [r0, #20]
 801044e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8010452:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8010456:	b137      	cbz	r7, 8010466 <__cleanup_context+0x2a>
 8010458:	3014      	adds	r0, #20
 801045a:	f000 f9bb 	bl	80107d4 <rcl_init_options_fini>
 801045e:	4607      	mov	r7, r0
 8010460:	2800      	cmp	r0, #0
 8010462:	d144      	bne.n	80104ee <__cleanup_context+0xb2>
 8010464:	6830      	ldr	r0, [r6, #0]
 8010466:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010468:	b143      	cbz	r3, 801047c <__cleanup_context+0x40>
 801046a:	3028      	adds	r0, #40	@ 0x28
 801046c:	f003 fcbc 	bl	8013de8 <rmw_context_fini>
 8010470:	b118      	cbz	r0, 801047a <__cleanup_context+0x3e>
 8010472:	2f00      	cmp	r7, #0
 8010474:	d03e      	beq.n	80104f4 <__cleanup_context+0xb8>
 8010476:	f7fc fa53 	bl	800c920 <rcutils_reset_error>
 801047a:	6830      	ldr	r0, [r6, #0]
 801047c:	6a03      	ldr	r3, [r0, #32]
 801047e:	b1db      	cbz	r3, 80104b8 <__cleanup_context+0x7c>
 8010480:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8010484:	2a01      	cmp	r2, #1
 8010486:	f17c 0100 	sbcs.w	r1, ip, #0
 801048a:	db11      	blt.n	80104b0 <__cleanup_context+0x74>
 801048c:	2400      	movs	r4, #0
 801048e:	4625      	mov	r5, r4
 8010490:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010494:	4649      	mov	r1, r9
 8010496:	b1b8      	cbz	r0, 80104c8 <__cleanup_context+0x8c>
 8010498:	47c0      	blx	r8
 801049a:	6833      	ldr	r3, [r6, #0]
 801049c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80104a0:	3401      	adds	r4, #1
 80104a2:	f145 0500 	adc.w	r5, r5, #0
 80104a6:	4294      	cmp	r4, r2
 80104a8:	eb75 010c 	sbcs.w	r1, r5, ip
 80104ac:	6a1b      	ldr	r3, [r3, #32]
 80104ae:	dbef      	blt.n	8010490 <__cleanup_context+0x54>
 80104b0:	4618      	mov	r0, r3
 80104b2:	4649      	mov	r1, r9
 80104b4:	47c0      	blx	r8
 80104b6:	6830      	ldr	r0, [r6, #0]
 80104b8:	4649      	mov	r1, r9
 80104ba:	47c0      	blx	r8
 80104bc:	2300      	movs	r3, #0
 80104be:	e9c6 3300 	strd	r3, r3, [r6]
 80104c2:	4638      	mov	r0, r7
 80104c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104c8:	3401      	adds	r4, #1
 80104ca:	f145 0500 	adc.w	r5, r5, #0
 80104ce:	4294      	cmp	r4, r2
 80104d0:	eb75 010c 	sbcs.w	r1, r5, ip
 80104d4:	dbdc      	blt.n	8010490 <__cleanup_context+0x54>
 80104d6:	4618      	mov	r0, r3
 80104d8:	4649      	mov	r1, r9
 80104da:	47c0      	blx	r8
 80104dc:	6830      	ldr	r0, [r6, #0]
 80104de:	e7eb      	b.n	80104b8 <__cleanup_context+0x7c>
 80104e0:	4607      	mov	r7, r0
 80104e2:	2300      	movs	r3, #0
 80104e4:	e9c6 3300 	strd	r3, r3, [r6]
 80104e8:	4638      	mov	r0, r7
 80104ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104ee:	f7fc fa17 	bl	800c920 <rcutils_reset_error>
 80104f2:	e7b7      	b.n	8010464 <__cleanup_context+0x28>
 80104f4:	f7ff ff7e 	bl	80103f4 <rcl_convert_rmw_ret_to_rcl_ret>
 80104f8:	4607      	mov	r7, r0
 80104fa:	e7bc      	b.n	8010476 <__cleanup_context+0x3a>

080104fc <rcl_init>:
 80104fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010500:	1e05      	subs	r5, r0, #0
 8010502:	b09e      	sub	sp, #120	@ 0x78
 8010504:	460e      	mov	r6, r1
 8010506:	4690      	mov	r8, r2
 8010508:	461f      	mov	r7, r3
 801050a:	f340 809c 	ble.w	8010646 <rcl_init+0x14a>
 801050e:	2900      	cmp	r1, #0
 8010510:	f000 809c 	beq.w	801064c <rcl_init+0x150>
 8010514:	f1a1 0e04 	sub.w	lr, r1, #4
 8010518:	f04f 0c00 	mov.w	ip, #0
 801051c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8010520:	f10c 0c01 	add.w	ip, ip, #1
 8010524:	2c00      	cmp	r4, #0
 8010526:	f000 8091 	beq.w	801064c <rcl_init+0x150>
 801052a:	4565      	cmp	r5, ip
 801052c:	d1f6      	bne.n	801051c <rcl_init+0x20>
 801052e:	f1b8 0f00 	cmp.w	r8, #0
 8010532:	f000 808b 	beq.w	801064c <rcl_init+0x150>
 8010536:	f8d8 4000 	ldr.w	r4, [r8]
 801053a:	2c00      	cmp	r4, #0
 801053c:	f000 8086 	beq.w	801064c <rcl_init+0x150>
 8010540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010542:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8010546:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801054a:	6823      	ldr	r3, [r4, #0]
 801054c:	f8cc 3000 	str.w	r3, [ip]
 8010550:	a819      	add	r0, sp, #100	@ 0x64
 8010552:	f7fc f9c1 	bl	800c8d8 <rcutils_allocator_is_valid>
 8010556:	2800      	cmp	r0, #0
 8010558:	d078      	beq.n	801064c <rcl_init+0x150>
 801055a:	2f00      	cmp	r7, #0
 801055c:	d076      	beq.n	801064c <rcl_init+0x150>
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d178      	bne.n	8010656 <rcl_init+0x15a>
 8010564:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8010568:	2178      	movs	r1, #120	@ 0x78
 801056a:	2001      	movs	r0, #1
 801056c:	4798      	blx	r3
 801056e:	4604      	mov	r4, r0
 8010570:	6038      	str	r0, [r7, #0]
 8010572:	2800      	cmp	r0, #0
 8010574:	f000 80b6 	beq.w	80106e4 <rcl_init+0x1e8>
 8010578:	a802      	add	r0, sp, #8
 801057a:	f002 ff89 	bl	8013490 <rmw_get_zero_initialized_context>
 801057e:	a902      	add	r1, sp, #8
 8010580:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010584:	2250      	movs	r2, #80	@ 0x50
 8010586:	ac19      	add	r4, sp, #100	@ 0x64
 8010588:	f007 f973 	bl	8017872 <memcpy>
 801058c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801058e:	f8d7 e000 	ldr.w	lr, [r7]
 8010592:	46f4      	mov	ip, lr
 8010594:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010598:	6823      	ldr	r3, [r4, #0]
 801059a:	f8cc 3000 	str.w	r3, [ip]
 801059e:	f10e 0114 	add.w	r1, lr, #20
 80105a2:	4640      	mov	r0, r8
 80105a4:	f000 f940 	bl	8010828 <rcl_init_options_copy>
 80105a8:	4604      	mov	r4, r0
 80105aa:	2800      	cmp	r0, #0
 80105ac:	d144      	bne.n	8010638 <rcl_init+0x13c>
 80105ae:	f8d7 9000 	ldr.w	r9, [r7]
 80105b2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80105b6:	f8c9 0020 	str.w	r0, [r9, #32]
 80105ba:	f8c9 5018 	str.w	r5, [r9, #24]
 80105be:	f8c9 801c 	str.w	r8, [r9, #28]
 80105c2:	2d00      	cmp	r5, #0
 80105c4:	d04e      	beq.n	8010664 <rcl_init+0x168>
 80105c6:	2e00      	cmp	r6, #0
 80105c8:	d04c      	beq.n	8010664 <rcl_init+0x168>
 80105ca:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80105ce:	2104      	movs	r1, #4
 80105d0:	4628      	mov	r0, r5
 80105d2:	4798      	blx	r3
 80105d4:	f8c9 0020 	str.w	r0, [r9, #32]
 80105d8:	f8d7 9000 	ldr.w	r9, [r7]
 80105dc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80105e0:	46ca      	mov	sl, r9
 80105e2:	b343      	cbz	r3, 8010636 <rcl_init+0x13a>
 80105e4:	2d01      	cmp	r5, #1
 80105e6:	f178 0300 	sbcs.w	r3, r8, #0
 80105ea:	db3b      	blt.n	8010664 <rcl_init+0x168>
 80105ec:	2400      	movs	r4, #0
 80105ee:	3e04      	subs	r6, #4
 80105f0:	46a1      	mov	r9, r4
 80105f2:	e00b      	b.n	801060c <rcl_init+0x110>
 80105f4:	6831      	ldr	r1, [r6, #0]
 80105f6:	f007 f93c 	bl	8017872 <memcpy>
 80105fa:	3401      	adds	r4, #1
 80105fc:	f149 0900 	adc.w	r9, r9, #0
 8010600:	45c8      	cmp	r8, r9
 8010602:	bf08      	it	eq
 8010604:	42a5      	cmpeq	r5, r4
 8010606:	d02b      	beq.n	8010660 <rcl_init+0x164>
 8010608:	f8d7 a000 	ldr.w	sl, [r7]
 801060c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8010610:	f7ef fdf0 	bl	80001f4 <strlen>
 8010614:	1c42      	adds	r2, r0, #1
 8010616:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010618:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801061a:	f8da a020 	ldr.w	sl, [sl, #32]
 801061e:	9201      	str	r2, [sp, #4]
 8010620:	4610      	mov	r0, r2
 8010622:	4798      	blx	r3
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801062a:	6a1b      	ldr	r3, [r3, #32]
 801062c:	9a01      	ldr	r2, [sp, #4]
 801062e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010632:	2800      	cmp	r0, #0
 8010634:	d1de      	bne.n	80105f4 <rcl_init+0xf8>
 8010636:	240a      	movs	r4, #10
 8010638:	4638      	mov	r0, r7
 801063a:	f7ff feff 	bl	801043c <__cleanup_context>
 801063e:	4620      	mov	r0, r4
 8010640:	b01e      	add	sp, #120	@ 0x78
 8010642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010646:	2900      	cmp	r1, #0
 8010648:	f43f af71 	beq.w	801052e <rcl_init+0x32>
 801064c:	240b      	movs	r4, #11
 801064e:	4620      	mov	r0, r4
 8010650:	b01e      	add	sp, #120	@ 0x78
 8010652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010656:	2464      	movs	r4, #100	@ 0x64
 8010658:	4620      	mov	r0, r4
 801065a:	b01e      	add	sp, #120	@ 0x78
 801065c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010660:	f8d7 9000 	ldr.w	r9, [r7]
 8010664:	4926      	ldr	r1, [pc, #152]	@ (8010700 <rcl_init+0x204>)
 8010666:	680b      	ldr	r3, [r1, #0]
 8010668:	3301      	adds	r3, #1
 801066a:	d036      	beq.n	80106da <rcl_init+0x1de>
 801066c:	600b      	str	r3, [r1, #0]
 801066e:	461a      	mov	r2, r3
 8010670:	2400      	movs	r4, #0
 8010672:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8010676:	607b      	str	r3, [r7, #4]
 8010678:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801067a:	3301      	adds	r3, #1
 801067c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8010680:	d034      	beq.n	80106ec <rcl_init+0x1f0>
 8010682:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8010686:	b93b      	cbnz	r3, 8010698 <rcl_init+0x19c>
 8010688:	3030      	adds	r0, #48	@ 0x30
 801068a:	f000 f939 	bl	8010900 <rcl_get_localhost_only>
 801068e:	4604      	mov	r4, r0
 8010690:	2800      	cmp	r0, #0
 8010692:	d1d1      	bne.n	8010638 <rcl_init+0x13c>
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	6958      	ldr	r0, [r3, #20]
 8010698:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801069a:	aa18      	add	r2, sp, #96	@ 0x60
 801069c:	a917      	add	r1, sp, #92	@ 0x5c
 801069e:	f001 f841 	bl	8011724 <rcl_validate_enclave_name>
 80106a2:	4604      	mov	r4, r0
 80106a4:	2800      	cmp	r0, #0
 80106a6:	d1c7      	bne.n	8010638 <rcl_init+0x13c>
 80106a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80106aa:	b9eb      	cbnz	r3, 80106e8 <rcl_init+0x1ec>
 80106ac:	6839      	ldr	r1, [r7, #0]
 80106ae:	694b      	ldr	r3, [r1, #20]
 80106b0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80106b2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80106b6:	f000 fc3d 	bl	8010f34 <rcl_get_security_options_from_environment>
 80106ba:	4604      	mov	r4, r0
 80106bc:	2800      	cmp	r0, #0
 80106be:	d1bb      	bne.n	8010638 <rcl_init+0x13c>
 80106c0:	6839      	ldr	r1, [r7, #0]
 80106c2:	6948      	ldr	r0, [r1, #20]
 80106c4:	3128      	adds	r1, #40	@ 0x28
 80106c6:	3018      	adds	r0, #24
 80106c8:	f003 fa58 	bl	8013b7c <rmw_init>
 80106cc:	4604      	mov	r4, r0
 80106ce:	2800      	cmp	r0, #0
 80106d0:	d0bd      	beq.n	801064e <rcl_init+0x152>
 80106d2:	f7ff fe8f 	bl	80103f4 <rcl_convert_rmw_ret_to_rcl_ret>
 80106d6:	4604      	mov	r4, r0
 80106d8:	e7ae      	b.n	8010638 <rcl_init+0x13c>
 80106da:	2201      	movs	r2, #1
 80106dc:	461c      	mov	r4, r3
 80106de:	600a      	str	r2, [r1, #0]
 80106e0:	4613      	mov	r3, r2
 80106e2:	e7c6      	b.n	8010672 <rcl_init+0x176>
 80106e4:	240a      	movs	r4, #10
 80106e6:	e7b2      	b.n	801064e <rcl_init+0x152>
 80106e8:	2401      	movs	r4, #1
 80106ea:	e7a5      	b.n	8010638 <rcl_init+0x13c>
 80106ec:	3024      	adds	r0, #36	@ 0x24
 80106ee:	f005 ffb9 	bl	8016664 <rcl_get_default_domain_id>
 80106f2:	4604      	mov	r4, r0
 80106f4:	2800      	cmp	r0, #0
 80106f6:	d19f      	bne.n	8010638 <rcl_init+0x13c>
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	6958      	ldr	r0, [r3, #20]
 80106fc:	e7c1      	b.n	8010682 <rcl_init+0x186>
 80106fe:	bf00      	nop
 8010700:	2000dc6c 	.word	0x2000dc6c

08010704 <rcl_get_zero_initialized_init_options>:
 8010704:	2000      	movs	r0, #0
 8010706:	4770      	bx	lr

08010708 <rcl_init_options_init>:
 8010708:	b084      	sub	sp, #16
 801070a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801070c:	b097      	sub	sp, #92	@ 0x5c
 801070e:	ae1d      	add	r6, sp, #116	@ 0x74
 8010710:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8010714:	2800      	cmp	r0, #0
 8010716:	d058      	beq.n	80107ca <rcl_init_options_init+0xc2>
 8010718:	6803      	ldr	r3, [r0, #0]
 801071a:	4605      	mov	r5, r0
 801071c:	b133      	cbz	r3, 801072c <rcl_init_options_init+0x24>
 801071e:	2464      	movs	r4, #100	@ 0x64
 8010720:	4620      	mov	r0, r4
 8010722:	b017      	add	sp, #92	@ 0x5c
 8010724:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010728:	b004      	add	sp, #16
 801072a:	4770      	bx	lr
 801072c:	4630      	mov	r0, r6
 801072e:	f7fc f8d3 	bl	800c8d8 <rcutils_allocator_is_valid>
 8010732:	2800      	cmp	r0, #0
 8010734:	d049      	beq.n	80107ca <rcl_init_options_init+0xc2>
 8010736:	46b4      	mov	ip, r6
 8010738:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801073c:	ac11      	add	r4, sp, #68	@ 0x44
 801073e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010740:	f8dc 3000 	ldr.w	r3, [ip]
 8010744:	6023      	str	r3, [r4, #0]
 8010746:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8010748:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801074a:	2050      	movs	r0, #80	@ 0x50
 801074c:	4798      	blx	r3
 801074e:	4604      	mov	r4, r0
 8010750:	6028      	str	r0, [r5, #0]
 8010752:	2800      	cmp	r0, #0
 8010754:	d03b      	beq.n	80107ce <rcl_init_options_init+0xc6>
 8010756:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801075a:	4686      	mov	lr, r0
 801075c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010760:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010764:	f8dc 3000 	ldr.w	r3, [ip]
 8010768:	f8ce 3000 	str.w	r3, [lr]
 801076c:	a802      	add	r0, sp, #8
 801076e:	f002 fe9f 	bl	80134b0 <rmw_get_zero_initialized_init_options>
 8010772:	f10d 0e08 	add.w	lr, sp, #8
 8010776:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801077a:	f104 0c18 	add.w	ip, r4, #24
 801077e:	682f      	ldr	r7, [r5, #0]
 8010780:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010784:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010788:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801078c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010790:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010794:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010798:	ac20      	add	r4, sp, #128	@ 0x80
 801079a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801079e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80107a2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80107a6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80107aa:	f107 0018 	add.w	r0, r7, #24
 80107ae:	f003 f8ed 	bl	801398c <rmw_init_options_init>
 80107b2:	4604      	mov	r4, r0
 80107b4:	2800      	cmp	r0, #0
 80107b6:	d0b3      	beq.n	8010720 <rcl_init_options_init+0x18>
 80107b8:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80107ba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80107bc:	6828      	ldr	r0, [r5, #0]
 80107be:	4798      	blx	r3
 80107c0:	4620      	mov	r0, r4
 80107c2:	f7ff fe17 	bl	80103f4 <rcl_convert_rmw_ret_to_rcl_ret>
 80107c6:	4604      	mov	r4, r0
 80107c8:	e7aa      	b.n	8010720 <rcl_init_options_init+0x18>
 80107ca:	240b      	movs	r4, #11
 80107cc:	e7a8      	b.n	8010720 <rcl_init_options_init+0x18>
 80107ce:	240a      	movs	r4, #10
 80107d0:	e7a6      	b.n	8010720 <rcl_init_options_init+0x18>
 80107d2:	bf00      	nop

080107d4 <rcl_init_options_fini>:
 80107d4:	b530      	push	{r4, r5, lr}
 80107d6:	b087      	sub	sp, #28
 80107d8:	b1f0      	cbz	r0, 8010818 <rcl_init_options_fini+0x44>
 80107da:	6803      	ldr	r3, [r0, #0]
 80107dc:	4604      	mov	r4, r0
 80107de:	b1db      	cbz	r3, 8010818 <rcl_init_options_fini+0x44>
 80107e0:	469c      	mov	ip, r3
 80107e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80107e6:	f10d 0e04 	add.w	lr, sp, #4
 80107ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80107ee:	f8dc 3000 	ldr.w	r3, [ip]
 80107f2:	f8ce 3000 	str.w	r3, [lr]
 80107f6:	a801      	add	r0, sp, #4
 80107f8:	f7fc f86e 	bl	800c8d8 <rcutils_allocator_is_valid>
 80107fc:	b160      	cbz	r0, 8010818 <rcl_init_options_fini+0x44>
 80107fe:	6820      	ldr	r0, [r4, #0]
 8010800:	3018      	adds	r0, #24
 8010802:	f003 f973 	bl	8013aec <rmw_init_options_fini>
 8010806:	4605      	mov	r5, r0
 8010808:	b950      	cbnz	r0, 8010820 <rcl_init_options_fini+0x4c>
 801080a:	6820      	ldr	r0, [r4, #0]
 801080c:	9b02      	ldr	r3, [sp, #8]
 801080e:	9905      	ldr	r1, [sp, #20]
 8010810:	4798      	blx	r3
 8010812:	4628      	mov	r0, r5
 8010814:	b007      	add	sp, #28
 8010816:	bd30      	pop	{r4, r5, pc}
 8010818:	250b      	movs	r5, #11
 801081a:	4628      	mov	r0, r5
 801081c:	b007      	add	sp, #28
 801081e:	bd30      	pop	{r4, r5, pc}
 8010820:	f7ff fde8 	bl	80103f4 <rcl_convert_rmw_ret_to_rcl_ret>
 8010824:	4605      	mov	r5, r0
 8010826:	e7f8      	b.n	801081a <rcl_init_options_fini+0x46>

08010828 <rcl_init_options_copy>:
 8010828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801082c:	b094      	sub	sp, #80	@ 0x50
 801082e:	2800      	cmp	r0, #0
 8010830:	d058      	beq.n	80108e4 <rcl_init_options_copy+0xbc>
 8010832:	4604      	mov	r4, r0
 8010834:	6800      	ldr	r0, [r0, #0]
 8010836:	2800      	cmp	r0, #0
 8010838:	d054      	beq.n	80108e4 <rcl_init_options_copy+0xbc>
 801083a:	460e      	mov	r6, r1
 801083c:	f7fc f84c 	bl	800c8d8 <rcutils_allocator_is_valid>
 8010840:	2800      	cmp	r0, #0
 8010842:	d04f      	beq.n	80108e4 <rcl_init_options_copy+0xbc>
 8010844:	2e00      	cmp	r6, #0
 8010846:	d04d      	beq.n	80108e4 <rcl_init_options_copy+0xbc>
 8010848:	6833      	ldr	r3, [r6, #0]
 801084a:	b123      	cbz	r3, 8010856 <rcl_init_options_copy+0x2e>
 801084c:	2464      	movs	r4, #100	@ 0x64
 801084e:	4620      	mov	r0, r4
 8010850:	b014      	add	sp, #80	@ 0x50
 8010852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010856:	6827      	ldr	r7, [r4, #0]
 8010858:	46bc      	mov	ip, r7
 801085a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801085e:	ad0f      	add	r5, sp, #60	@ 0x3c
 8010860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010862:	f8dc 3000 	ldr.w	r3, [ip]
 8010866:	f8d7 8000 	ldr.w	r8, [r7]
 801086a:	602b      	str	r3, [r5, #0]
 801086c:	4619      	mov	r1, r3
 801086e:	2050      	movs	r0, #80	@ 0x50
 8010870:	47c0      	blx	r8
 8010872:	4605      	mov	r5, r0
 8010874:	6030      	str	r0, [r6, #0]
 8010876:	b3d0      	cbz	r0, 80108ee <rcl_init_options_copy+0xc6>
 8010878:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801087c:	4686      	mov	lr, r0
 801087e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010882:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010886:	f8dc 3000 	ldr.w	r3, [ip]
 801088a:	f8ce 3000 	str.w	r3, [lr]
 801088e:	4668      	mov	r0, sp
 8010890:	f002 fe0e 	bl	80134b0 <rmw_get_zero_initialized_init_options>
 8010894:	46ee      	mov	lr, sp
 8010896:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801089a:	f105 0c18 	add.w	ip, r5, #24
 801089e:	6824      	ldr	r4, [r4, #0]
 80108a0:	6835      	ldr	r5, [r6, #0]
 80108a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80108a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80108aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80108ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80108b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80108b6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80108ba:	e88c 0003 	stmia.w	ip, {r0, r1}
 80108be:	f104 0018 	add.w	r0, r4, #24
 80108c2:	f105 0118 	add.w	r1, r5, #24
 80108c6:	f003 f8c9 	bl	8013a5c <rmw_init_options_copy>
 80108ca:	4604      	mov	r4, r0
 80108cc:	2800      	cmp	r0, #0
 80108ce:	d0be      	beq.n	801084e <rcl_init_options_copy+0x26>
 80108d0:	f7fc f810 	bl	800c8f4 <rcutils_get_error_string>
 80108d4:	f7fc f824 	bl	800c920 <rcutils_reset_error>
 80108d8:	4630      	mov	r0, r6
 80108da:	f7ff ff7b 	bl	80107d4 <rcl_init_options_fini>
 80108de:	b140      	cbz	r0, 80108f2 <rcl_init_options_copy+0xca>
 80108e0:	4604      	mov	r4, r0
 80108e2:	e7b4      	b.n	801084e <rcl_init_options_copy+0x26>
 80108e4:	240b      	movs	r4, #11
 80108e6:	4620      	mov	r0, r4
 80108e8:	b014      	add	sp, #80	@ 0x50
 80108ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108ee:	240a      	movs	r4, #10
 80108f0:	e7ad      	b.n	801084e <rcl_init_options_copy+0x26>
 80108f2:	4620      	mov	r0, r4
 80108f4:	b014      	add	sp, #80	@ 0x50
 80108f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108fa:	f7ff bd7b 	b.w	80103f4 <rcl_convert_rmw_ret_to_rcl_ret>
 80108fe:	bf00      	nop

08010900 <rcl_get_localhost_only>:
 8010900:	b510      	push	{r4, lr}
 8010902:	b082      	sub	sp, #8
 8010904:	2300      	movs	r3, #0
 8010906:	9301      	str	r3, [sp, #4]
 8010908:	b1b8      	cbz	r0, 801093a <rcl_get_localhost_only+0x3a>
 801090a:	4604      	mov	r4, r0
 801090c:	a901      	add	r1, sp, #4
 801090e:	480c      	ldr	r0, [pc, #48]	@ (8010940 <rcl_get_localhost_only+0x40>)
 8010910:	f002 fb12 	bl	8012f38 <rcutils_get_env>
 8010914:	b110      	cbz	r0, 801091c <rcl_get_localhost_only+0x1c>
 8010916:	2001      	movs	r0, #1
 8010918:	b002      	add	sp, #8
 801091a:	bd10      	pop	{r4, pc}
 801091c:	9b01      	ldr	r3, [sp, #4]
 801091e:	b113      	cbz	r3, 8010926 <rcl_get_localhost_only+0x26>
 8010920:	781a      	ldrb	r2, [r3, #0]
 8010922:	2a31      	cmp	r2, #49	@ 0x31
 8010924:	d004      	beq.n	8010930 <rcl_get_localhost_only+0x30>
 8010926:	2302      	movs	r3, #2
 8010928:	2000      	movs	r0, #0
 801092a:	7023      	strb	r3, [r4, #0]
 801092c:	b002      	add	sp, #8
 801092e:	bd10      	pop	{r4, pc}
 8010930:	785b      	ldrb	r3, [r3, #1]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d1f7      	bne.n	8010926 <rcl_get_localhost_only+0x26>
 8010936:	2301      	movs	r3, #1
 8010938:	e7f6      	b.n	8010928 <rcl_get_localhost_only+0x28>
 801093a:	200b      	movs	r0, #11
 801093c:	b002      	add	sp, #8
 801093e:	bd10      	pop	{r4, pc}
 8010940:	08018bfc 	.word	0x08018bfc

08010944 <rcl_get_zero_initialized_node>:
 8010944:	4a03      	ldr	r2, [pc, #12]	@ (8010954 <rcl_get_zero_initialized_node+0x10>)
 8010946:	4603      	mov	r3, r0
 8010948:	e892 0003 	ldmia.w	r2, {r0, r1}
 801094c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010950:	4618      	mov	r0, r3
 8010952:	4770      	bx	lr
 8010954:	08018c24 	.word	0x08018c24

08010958 <rcl_node_init>:
 8010958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801095c:	b0a9      	sub	sp, #164	@ 0xa4
 801095e:	4604      	mov	r4, r0
 8010960:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8010964:	a823      	add	r0, sp, #140	@ 0x8c
 8010966:	460e      	mov	r6, r1
 8010968:	4615      	mov	r5, r2
 801096a:	461f      	mov	r7, r3
 801096c:	f006 f8a2 	bl	8016ab4 <rcl_guard_condition_get_default_options>
 8010970:	f1b8 0f00 	cmp.w	r8, #0
 8010974:	f000 80e6 	beq.w	8010b44 <rcl_node_init+0x1ec>
 8010978:	4640      	mov	r0, r8
 801097a:	f7fb ffad 	bl	800c8d8 <rcutils_allocator_is_valid>
 801097e:	2800      	cmp	r0, #0
 8010980:	f000 80e0 	beq.w	8010b44 <rcl_node_init+0x1ec>
 8010984:	2e00      	cmp	r6, #0
 8010986:	f000 80dd 	beq.w	8010b44 <rcl_node_init+0x1ec>
 801098a:	2d00      	cmp	r5, #0
 801098c:	f000 80da 	beq.w	8010b44 <rcl_node_init+0x1ec>
 8010990:	2c00      	cmp	r4, #0
 8010992:	f000 80d7 	beq.w	8010b44 <rcl_node_init+0x1ec>
 8010996:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801099a:	f1b9 0f00 	cmp.w	r9, #0
 801099e:	f040 80fd 	bne.w	8010b9c <rcl_node_init+0x244>
 80109a2:	2f00      	cmp	r7, #0
 80109a4:	f000 80ce 	beq.w	8010b44 <rcl_node_init+0x1ec>
 80109a8:	4638      	mov	r0, r7
 80109aa:	f7ff fd41 	bl	8010430 <rcl_context_is_valid>
 80109ae:	4682      	mov	sl, r0
 80109b0:	2800      	cmp	r0, #0
 80109b2:	f000 80cd 	beq.w	8010b50 <rcl_node_init+0x1f8>
 80109b6:	464a      	mov	r2, r9
 80109b8:	a922      	add	r1, sp, #136	@ 0x88
 80109ba:	4630      	mov	r0, r6
 80109bc:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 80109c0:	f002 ff18 	bl	80137f4 <rmw_validate_node_name>
 80109c4:	4681      	mov	r9, r0
 80109c6:	2800      	cmp	r0, #0
 80109c8:	f040 80be 	bne.w	8010b48 <rcl_node_init+0x1f0>
 80109cc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80109ce:	2800      	cmp	r0, #0
 80109d0:	f040 80f0 	bne.w	8010bb4 <rcl_node_init+0x25c>
 80109d4:	4628      	mov	r0, r5
 80109d6:	f7ef fc0d 	bl	80001f4 <strlen>
 80109da:	2800      	cmp	r0, #0
 80109dc:	f040 80bb 	bne.w	8010b56 <rcl_node_init+0x1fe>
 80109e0:	4d7c      	ldr	r5, [pc, #496]	@ (8010bd4 <rcl_node_init+0x27c>)
 80109e2:	a922      	add	r1, sp, #136	@ 0x88
 80109e4:	2200      	movs	r2, #0
 80109e6:	4628      	mov	r0, r5
 80109e8:	f002 fee6 	bl	80137b8 <rmw_validate_namespace>
 80109ec:	4681      	mov	r9, r0
 80109ee:	2800      	cmp	r0, #0
 80109f0:	f040 80aa 	bne.w	8010b48 <rcl_node_init+0x1f0>
 80109f4:	4682      	mov	sl, r0
 80109f6:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80109f8:	2800      	cmp	r0, #0
 80109fa:	f040 80e0 	bne.w	8010bbe <rcl_node_init+0x266>
 80109fe:	f8d8 3000 	ldr.w	r3, [r8]
 8010a02:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010a06:	2078      	movs	r0, #120	@ 0x78
 8010a08:	4798      	blx	r3
 8010a0a:	4681      	mov	r9, r0
 8010a0c:	6060      	str	r0, [r4, #4]
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	f000 80ca 	beq.w	8010ba8 <rcl_node_init+0x250>
 8010a14:	2200      	movs	r2, #0
 8010a16:	2300      	movs	r3, #0
 8010a18:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8010a1c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8010a20:	a808      	add	r0, sp, #32
 8010a22:	f000 f907 	bl	8010c34 <rcl_node_get_default_options>
 8010a26:	a908      	add	r1, sp, #32
 8010a28:	4648      	mov	r0, r9
 8010a2a:	2268      	movs	r2, #104	@ 0x68
 8010a2c:	f006 ff21 	bl	8017872 <memcpy>
 8010a30:	6861      	ldr	r1, [r4, #4]
 8010a32:	6027      	str	r7, [r4, #0]
 8010a34:	4640      	mov	r0, r8
 8010a36:	f000 f90b 	bl	8010c50 <rcl_node_options_copy>
 8010a3a:	2800      	cmp	r0, #0
 8010a3c:	d158      	bne.n	8010af0 <rcl_node_init+0x198>
 8010a3e:	4628      	mov	r0, r5
 8010a40:	f7ef fbd8 	bl	80001f4 <strlen>
 8010a44:	4428      	add	r0, r5
 8010a46:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8010a4a:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8010a4e:	2b2f      	cmp	r3, #47	@ 0x2f
 8010a50:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010a54:	9300      	str	r3, [sp, #0]
 8010a56:	bf0c      	ite	eq
 8010a58:	4b5f      	ldreq	r3, [pc, #380]	@ (8010bd8 <rcl_node_init+0x280>)
 8010a5a:	4b60      	ldrne	r3, [pc, #384]	@ (8010bdc <rcl_node_init+0x284>)
 8010a5c:	9302      	str	r3, [sp, #8]
 8010a5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010a62:	9301      	str	r3, [sp, #4]
 8010a64:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8010a68:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010a6c:	f002 fa8c 	bl	8012f88 <rcutils_format_string_limit>
 8010a70:	6823      	ldr	r3, [r4, #0]
 8010a72:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8010a76:	6818      	ldr	r0, [r3, #0]
 8010a78:	4631      	mov	r1, r6
 8010a7a:	3028      	adds	r0, #40	@ 0x28
 8010a7c:	462a      	mov	r2, r5
 8010a7e:	6866      	ldr	r6, [r4, #4]
 8010a80:	f003 fad0 	bl	8014024 <rmw_create_node>
 8010a84:	6863      	ldr	r3, [r4, #4]
 8010a86:	66b0      	str	r0, [r6, #104]	@ 0x68
 8010a88:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8010a8a:	2800      	cmp	r0, #0
 8010a8c:	d032      	beq.n	8010af4 <rcl_node_init+0x19c>
 8010a8e:	f003 fb5d 	bl	801414c <rmw_node_get_graph_guard_condition>
 8010a92:	4681      	mov	r9, r0
 8010a94:	b360      	cbz	r0, 8010af0 <rcl_node_init+0x198>
 8010a96:	f8d8 3000 	ldr.w	r3, [r8]
 8010a9a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010a9e:	6866      	ldr	r6, [r4, #4]
 8010aa0:	2008      	movs	r0, #8
 8010aa2:	4798      	blx	r3
 8010aa4:	6863      	ldr	r3, [r4, #4]
 8010aa6:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8010aa8:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8010aac:	f1bb 0f00 	cmp.w	fp, #0
 8010ab0:	d020      	beq.n	8010af4 <rcl_node_init+0x19c>
 8010ab2:	a806      	add	r0, sp, #24
 8010ab4:	f005 ff6e 	bl	8016994 <rcl_get_zero_initialized_guard_condition>
 8010ab8:	a806      	add	r0, sp, #24
 8010aba:	c803      	ldmia	r0, {r0, r1}
 8010abc:	6863      	ldr	r3, [r4, #4]
 8010abe:	46c4      	mov	ip, r8
 8010ac0:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8010ac4:	e88b 0003 	stmia.w	fp, {r0, r1}
 8010ac8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010acc:	ae23      	add	r6, sp, #140	@ 0x8c
 8010ace:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010ad0:	f8dc 3000 	ldr.w	r3, [ip]
 8010ad4:	6033      	str	r3, [r6, #0]
 8010ad6:	ab28      	add	r3, sp, #160	@ 0xa0
 8010ad8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8010adc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010ae0:	4649      	mov	r1, r9
 8010ae2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010ae4:	463a      	mov	r2, r7
 8010ae6:	4670      	mov	r0, lr
 8010ae8:	f005 ff5e 	bl	80169a8 <rcl_guard_condition_init_from_rmw>
 8010aec:	4681      	mov	r9, r0
 8010aee:	b328      	cbz	r0, 8010b3c <rcl_node_init+0x1e4>
 8010af0:	6863      	ldr	r3, [r4, #4]
 8010af2:	b1f3      	cbz	r3, 8010b32 <rcl_node_init+0x1da>
 8010af4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010af6:	b128      	cbz	r0, 8010b04 <rcl_node_init+0x1ac>
 8010af8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010afc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010b00:	4798      	blx	r3
 8010b02:	6863      	ldr	r3, [r4, #4]
 8010b04:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8010b06:	b110      	cbz	r0, 8010b0e <rcl_node_init+0x1b6>
 8010b08:	f003 faa4 	bl	8014054 <rmw_destroy_node>
 8010b0c:	6863      	ldr	r3, [r4, #4]
 8010b0e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8010b10:	b148      	cbz	r0, 8010b26 <rcl_node_init+0x1ce>
 8010b12:	f005 ffa9 	bl	8016a68 <rcl_guard_condition_fini>
 8010b16:	6863      	ldr	r3, [r4, #4]
 8010b18:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010b1c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8010b1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010b22:	4798      	blx	r3
 8010b24:	6863      	ldr	r3, [r4, #4]
 8010b26:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010b30:	4798      	blx	r3
 8010b32:	2300      	movs	r3, #0
 8010b34:	e9c4 3300 	strd	r3, r3, [r4]
 8010b38:	f04f 0901 	mov.w	r9, #1
 8010b3c:	f1ba 0f00 	cmp.w	sl, #0
 8010b40:	d125      	bne.n	8010b8e <rcl_node_init+0x236>
 8010b42:	e001      	b.n	8010b48 <rcl_node_init+0x1f0>
 8010b44:	f04f 090b 	mov.w	r9, #11
 8010b48:	4648      	mov	r0, r9
 8010b4a:	b029      	add	sp, #164	@ 0xa4
 8010b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b50:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8010b54:	e7f8      	b.n	8010b48 <rcl_node_init+0x1f0>
 8010b56:	782b      	ldrb	r3, [r5, #0]
 8010b58:	2b2f      	cmp	r3, #47	@ 0x2f
 8010b5a:	f43f af42 	beq.w	80109e2 <rcl_node_init+0x8a>
 8010b5e:	9503      	str	r5, [sp, #12]
 8010b60:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010b64:	9300      	str	r3, [sp, #0]
 8010b66:	4b1e      	ldr	r3, [pc, #120]	@ (8010be0 <rcl_node_init+0x288>)
 8010b68:	9302      	str	r3, [sp, #8]
 8010b6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010b6e:	9301      	str	r3, [sp, #4]
 8010b70:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8010b74:	f002 fa08 	bl	8012f88 <rcutils_format_string_limit>
 8010b78:	4605      	mov	r5, r0
 8010b7a:	b340      	cbz	r0, 8010bce <rcl_node_init+0x276>
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	a922      	add	r1, sp, #136	@ 0x88
 8010b80:	9222      	str	r2, [sp, #136]	@ 0x88
 8010b82:	f002 fe19 	bl	80137b8 <rmw_validate_namespace>
 8010b86:	4681      	mov	r9, r0
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	f43f af34 	beq.w	80109f6 <rcl_node_init+0x9e>
 8010b8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010b92:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010b96:	4628      	mov	r0, r5
 8010b98:	4798      	blx	r3
 8010b9a:	e7d5      	b.n	8010b48 <rcl_node_init+0x1f0>
 8010b9c:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8010ba0:	4648      	mov	r0, r9
 8010ba2:	b029      	add	sp, #164	@ 0xa4
 8010ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ba8:	f04f 090a 	mov.w	r9, #10
 8010bac:	f1ba 0f00 	cmp.w	sl, #0
 8010bb0:	d1ed      	bne.n	8010b8e <rcl_node_init+0x236>
 8010bb2:	e7c9      	b.n	8010b48 <rcl_node_init+0x1f0>
 8010bb4:	f002 fe70 	bl	8013898 <rmw_node_name_validation_result_string>
 8010bb8:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8010bbc:	e7c4      	b.n	8010b48 <rcl_node_init+0x1f0>
 8010bbe:	f002 fe0d 	bl	80137dc <rmw_namespace_validation_result_string>
 8010bc2:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8010bc6:	f1ba 0f00 	cmp.w	sl, #0
 8010bca:	d1e0      	bne.n	8010b8e <rcl_node_init+0x236>
 8010bcc:	e7bc      	b.n	8010b48 <rcl_node_init+0x1f0>
 8010bce:	f04f 090a 	mov.w	r9, #10
 8010bd2:	e7b9      	b.n	8010b48 <rcl_node_init+0x1f0>
 8010bd4:	08018c14 	.word	0x08018c14
 8010bd8:	08018aa4 	.word	0x08018aa4
 8010bdc:	08018c1c 	.word	0x08018c1c
 8010be0:	08018c18 	.word	0x08018c18

08010be4 <rcl_node_is_valid>:
 8010be4:	b130      	cbz	r0, 8010bf4 <rcl_node_is_valid+0x10>
 8010be6:	6843      	ldr	r3, [r0, #4]
 8010be8:	b123      	cbz	r3, 8010bf4 <rcl_node_is_valid+0x10>
 8010bea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010bec:	b113      	cbz	r3, 8010bf4 <rcl_node_is_valid+0x10>
 8010bee:	6800      	ldr	r0, [r0, #0]
 8010bf0:	f7ff bc1e 	b.w	8010430 <rcl_context_is_valid>
 8010bf4:	2000      	movs	r0, #0
 8010bf6:	4770      	bx	lr

08010bf8 <rcl_node_get_name>:
 8010bf8:	b120      	cbz	r0, 8010c04 <rcl_node_get_name+0xc>
 8010bfa:	6840      	ldr	r0, [r0, #4]
 8010bfc:	b110      	cbz	r0, 8010c04 <rcl_node_get_name+0xc>
 8010bfe:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010c00:	b100      	cbz	r0, 8010c04 <rcl_node_get_name+0xc>
 8010c02:	6880      	ldr	r0, [r0, #8]
 8010c04:	4770      	bx	lr
 8010c06:	bf00      	nop

08010c08 <rcl_node_get_namespace>:
 8010c08:	b120      	cbz	r0, 8010c14 <rcl_node_get_namespace+0xc>
 8010c0a:	6840      	ldr	r0, [r0, #4]
 8010c0c:	b110      	cbz	r0, 8010c14 <rcl_node_get_namespace+0xc>
 8010c0e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010c10:	b100      	cbz	r0, 8010c14 <rcl_node_get_namespace+0xc>
 8010c12:	68c0      	ldr	r0, [r0, #12]
 8010c14:	4770      	bx	lr
 8010c16:	bf00      	nop

08010c18 <rcl_node_get_options>:
 8010c18:	b128      	cbz	r0, 8010c26 <rcl_node_get_options+0xe>
 8010c1a:	6840      	ldr	r0, [r0, #4]
 8010c1c:	b118      	cbz	r0, 8010c26 <rcl_node_get_options+0xe>
 8010c1e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	bf08      	it	eq
 8010c24:	2000      	moveq	r0, #0
 8010c26:	4770      	bx	lr

08010c28 <rcl_node_get_rmw_handle>:
 8010c28:	b110      	cbz	r0, 8010c30 <rcl_node_get_rmw_handle+0x8>
 8010c2a:	6840      	ldr	r0, [r0, #4]
 8010c2c:	b100      	cbz	r0, 8010c30 <rcl_node_get_rmw_handle+0x8>
 8010c2e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010c30:	4770      	bx	lr
 8010c32:	bf00      	nop

08010c34 <rcl_node_get_default_options>:
 8010c34:	b510      	push	{r4, lr}
 8010c36:	2268      	movs	r2, #104	@ 0x68
 8010c38:	4604      	mov	r4, r0
 8010c3a:	2100      	movs	r1, #0
 8010c3c:	f006 fd50 	bl	80176e0 <memset>
 8010c40:	4620      	mov	r0, r4
 8010c42:	f7fb fe3b 	bl	800c8bc <rcutils_get_default_allocator>
 8010c46:	2301      	movs	r3, #1
 8010c48:	7523      	strb	r3, [r4, #20]
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	bd10      	pop	{r4, pc}
 8010c4e:	bf00      	nop

08010c50 <rcl_node_options_copy>:
 8010c50:	b1d0      	cbz	r0, 8010c88 <rcl_node_options_copy+0x38>
 8010c52:	b570      	push	{r4, r5, r6, lr}
 8010c54:	460c      	mov	r4, r1
 8010c56:	b1a9      	cbz	r1, 8010c84 <rcl_node_options_copy+0x34>
 8010c58:	4288      	cmp	r0, r1
 8010c5a:	4684      	mov	ip, r0
 8010c5c:	d012      	beq.n	8010c84 <rcl_node_options_copy+0x34>
 8010c5e:	4605      	mov	r5, r0
 8010c60:	8a86      	ldrh	r6, [r0, #20]
 8010c62:	468e      	mov	lr, r1
 8010c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c66:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010c6a:	682b      	ldr	r3, [r5, #0]
 8010c6c:	f8ce 3000 	str.w	r3, [lr]
 8010c70:	f10c 0118 	add.w	r1, ip, #24
 8010c74:	2250      	movs	r2, #80	@ 0x50
 8010c76:	82a6      	strh	r6, [r4, #20]
 8010c78:	f104 0018 	add.w	r0, r4, #24
 8010c7c:	f006 fdf9 	bl	8017872 <memcpy>
 8010c80:	2000      	movs	r0, #0
 8010c82:	bd70      	pop	{r4, r5, r6, pc}
 8010c84:	200b      	movs	r0, #11
 8010c86:	bd70      	pop	{r4, r5, r6, pc}
 8010c88:	200b      	movs	r0, #11
 8010c8a:	4770      	bx	lr

08010c8c <rcl_node_resolve_name>:
 8010c8c:	b082      	sub	sp, #8
 8010c8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c92:	b091      	sub	sp, #68	@ 0x44
 8010c94:	ac1a      	add	r4, sp, #104	@ 0x68
 8010c96:	e884 000c 	stmia.w	r4, {r2, r3}
 8010c9a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	d03b      	beq.n	8010d1a <rcl_node_resolve_name+0x8e>
 8010ca2:	460c      	mov	r4, r1
 8010ca4:	4605      	mov	r5, r0
 8010ca6:	f7ff ffb7 	bl	8010c18 <rcl_node_get_options>
 8010caa:	2800      	cmp	r0, #0
 8010cac:	d037      	beq.n	8010d1e <rcl_node_resolve_name+0x92>
 8010cae:	4628      	mov	r0, r5
 8010cb0:	f7ff ffa2 	bl	8010bf8 <rcl_node_get_name>
 8010cb4:	4606      	mov	r6, r0
 8010cb6:	4628      	mov	r0, r5
 8010cb8:	f7ff ffa6 	bl	8010c08 <rcl_node_get_namespace>
 8010cbc:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8010cc0:	4681      	mov	r9, r0
 8010cc2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010cc6:	ad0b      	add	r5, sp, #44	@ 0x2c
 8010cc8:	46ac      	mov	ip, r5
 8010cca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010cce:	f8de 3000 	ldr.w	r3, [lr]
 8010cd2:	f8cc 3000 	str.w	r3, [ip]
 8010cd6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010cd8:	b1fb      	cbz	r3, 8010d1a <rcl_node_resolve_name+0x8e>
 8010cda:	468a      	mov	sl, r1
 8010cdc:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8010ce0:	f002 faaa 	bl	8013238 <rcutils_get_zero_initialized_string_map>
 8010ce4:	ab10      	add	r3, sp, #64	@ 0x40
 8010ce6:	9008      	str	r0, [sp, #32]
 8010ce8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010cec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010cf0:	2100      	movs	r1, #0
 8010cf2:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010cf6:	a808      	add	r0, sp, #32
 8010cf8:	f002 fb16 	bl	8013328 <rcutils_string_map_init>
 8010cfc:	4607      	mov	r7, r0
 8010cfe:	b180      	cbz	r0, 8010d22 <rcl_node_resolve_name+0x96>
 8010d00:	f7fb fdf8 	bl	800c8f4 <rcutils_get_error_string>
 8010d04:	f7fb fe0c 	bl	800c920 <rcutils_reset_error>
 8010d08:	2f0a      	cmp	r7, #10
 8010d0a:	bf18      	it	ne
 8010d0c:	2701      	movne	r7, #1
 8010d0e:	4638      	mov	r0, r7
 8010d10:	b011      	add	sp, #68	@ 0x44
 8010d12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d16:	b002      	add	sp, #8
 8010d18:	4770      	bx	lr
 8010d1a:	270b      	movs	r7, #11
 8010d1c:	e7f7      	b.n	8010d0e <rcl_node_resolve_name+0x82>
 8010d1e:	2701      	movs	r7, #1
 8010d20:	e7f5      	b.n	8010d0e <rcl_node_resolve_name+0x82>
 8010d22:	9009      	str	r0, [sp, #36]	@ 0x24
 8010d24:	9007      	str	r0, [sp, #28]
 8010d26:	a808      	add	r0, sp, #32
 8010d28:	f005 fe2e 	bl	8016988 <rcl_get_default_topic_name_substitutions>
 8010d2c:	4607      	mov	r7, r0
 8010d2e:	b1a8      	cbz	r0, 8010d5c <rcl_node_resolve_name+0xd0>
 8010d30:	280a      	cmp	r0, #10
 8010d32:	9c07      	ldr	r4, [sp, #28]
 8010d34:	d000      	beq.n	8010d38 <rcl_node_resolve_name+0xac>
 8010d36:	2701      	movs	r7, #1
 8010d38:	a808      	add	r0, sp, #32
 8010d3a:	f002 fb35 	bl	80133a8 <rcutils_string_map_fini>
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	d13d      	bne.n	8010dbe <rcl_node_resolve_name+0x132>
 8010d42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010d44:	4659      	mov	r1, fp
 8010d46:	47d0      	blx	sl
 8010d48:	4659      	mov	r1, fp
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	47d0      	blx	sl
 8010d4e:	f1b8 0f00 	cmp.w	r8, #0
 8010d52:	d0dc      	beq.n	8010d0e <rcl_node_resolve_name+0x82>
 8010d54:	2f67      	cmp	r7, #103	@ 0x67
 8010d56:	bf08      	it	eq
 8010d58:	2768      	moveq	r7, #104	@ 0x68
 8010d5a:	e7d8      	b.n	8010d0e <rcl_node_resolve_name+0x82>
 8010d5c:	ab09      	add	r3, sp, #36	@ 0x24
 8010d5e:	9305      	str	r3, [sp, #20]
 8010d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d62:	46ec      	mov	ip, sp
 8010d64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d68:	682b      	ldr	r3, [r5, #0]
 8010d6a:	f8cc 3000 	str.w	r3, [ip]
 8010d6e:	464a      	mov	r2, r9
 8010d70:	4631      	mov	r1, r6
 8010d72:	4620      	mov	r0, r4
 8010d74:	ab08      	add	r3, sp, #32
 8010d76:	f005 fca9 	bl	80166cc <rcl_expand_topic_name>
 8010d7a:	4607      	mov	r7, r0
 8010d7c:	b9b8      	cbnz	r0, 8010dae <rcl_node_resolve_name+0x122>
 8010d7e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010d80:	9009      	str	r0, [sp, #36]	@ 0x24
 8010d82:	4602      	mov	r2, r0
 8010d84:	a90a      	add	r1, sp, #40	@ 0x28
 8010d86:	4620      	mov	r0, r4
 8010d88:	f002 fc52 	bl	8013630 <rmw_validate_full_topic_name>
 8010d8c:	b988      	cbnz	r0, 8010db2 <rcl_node_resolve_name+0x126>
 8010d8e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010d90:	b9d5      	cbnz	r5, 8010dc8 <rcl_node_resolve_name+0x13c>
 8010d92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010d94:	a808      	add	r0, sp, #32
 8010d96:	601c      	str	r4, [r3, #0]
 8010d98:	f002 fb06 	bl	80133a8 <rcutils_string_map_fini>
 8010d9c:	4607      	mov	r7, r0
 8010d9e:	b1a8      	cbz	r0, 8010dcc <rcl_node_resolve_name+0x140>
 8010da0:	f7fb fda8 	bl	800c8f4 <rcutils_get_error_string>
 8010da4:	462c      	mov	r4, r5
 8010da6:	f7fb fdbb 	bl	800c920 <rcutils_reset_error>
 8010daa:	2701      	movs	r7, #1
 8010dac:	e7c9      	b.n	8010d42 <rcl_node_resolve_name+0xb6>
 8010dae:	9c07      	ldr	r4, [sp, #28]
 8010db0:	e7c2      	b.n	8010d38 <rcl_node_resolve_name+0xac>
 8010db2:	f7fb fd9f 	bl	800c8f4 <rcutils_get_error_string>
 8010db6:	2701      	movs	r7, #1
 8010db8:	f7fb fdb2 	bl	800c920 <rcutils_reset_error>
 8010dbc:	e7bc      	b.n	8010d38 <rcl_node_resolve_name+0xac>
 8010dbe:	f7fb fd99 	bl	800c8f4 <rcutils_get_error_string>
 8010dc2:	f7fb fdad 	bl	800c920 <rcutils_reset_error>
 8010dc6:	e7bc      	b.n	8010d42 <rcl_node_resolve_name+0xb6>
 8010dc8:	2767      	movs	r7, #103	@ 0x67
 8010dca:	e7b5      	b.n	8010d38 <rcl_node_resolve_name+0xac>
 8010dcc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010dce:	4659      	mov	r1, fp
 8010dd0:	47d0      	blx	sl
 8010dd2:	4659      	mov	r1, fp
 8010dd4:	4638      	mov	r0, r7
 8010dd6:	47d0      	blx	sl
 8010dd8:	e799      	b.n	8010d0e <rcl_node_resolve_name+0x82>
 8010dda:	bf00      	nop

08010ddc <exact_match_lookup>:
 8010ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dde:	f102 0708 	add.w	r7, r2, #8
 8010de2:	460b      	mov	r3, r1
 8010de4:	4614      	mov	r4, r2
 8010de6:	4606      	mov	r6, r0
 8010de8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010dec:	b085      	sub	sp, #20
 8010dee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010df2:	4618      	mov	r0, r3
 8010df4:	4919      	ldr	r1, [pc, #100]	@ (8010e5c <exact_match_lookup+0x80>)
 8010df6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010dfa:	f002 f8b7 	bl	8012f6c <rcutils_join_path>
 8010dfe:	7833      	ldrb	r3, [r6, #0]
 8010e00:	2b2f      	cmp	r3, #47	@ 0x2f
 8010e02:	4605      	mov	r5, r0
 8010e04:	d023      	beq.n	8010e4e <exact_match_lookup+0x72>
 8010e06:	f104 030c 	add.w	r3, r4, #12
 8010e0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010e0e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010e12:	1c70      	adds	r0, r6, #1
 8010e14:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010e18:	f002 f8ae 	bl	8012f78 <rcutils_to_native_path>
 8010e1c:	4606      	mov	r6, r0
 8010e1e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010e22:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010e26:	4631      	mov	r1, r6
 8010e28:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010e2c:	4628      	mov	r0, r5
 8010e2e:	f002 f89d 	bl	8012f6c <rcutils_join_path>
 8010e32:	6862      	ldr	r2, [r4, #4]
 8010e34:	6921      	ldr	r1, [r4, #16]
 8010e36:	4603      	mov	r3, r0
 8010e38:	4630      	mov	r0, r6
 8010e3a:	461e      	mov	r6, r3
 8010e3c:	4790      	blx	r2
 8010e3e:	4628      	mov	r0, r5
 8010e40:	6863      	ldr	r3, [r4, #4]
 8010e42:	6921      	ldr	r1, [r4, #16]
 8010e44:	4798      	blx	r3
 8010e46:	4635      	mov	r5, r6
 8010e48:	4628      	mov	r0, r5
 8010e4a:	b005      	add	sp, #20
 8010e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e4e:	7873      	ldrb	r3, [r6, #1]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d1d8      	bne.n	8010e06 <exact_match_lookup+0x2a>
 8010e54:	4628      	mov	r0, r5
 8010e56:	b005      	add	sp, #20
 8010e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	08018c68 	.word	0x08018c68

08010e60 <rcl_get_secure_root>:
 8010e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e64:	b085      	sub	sp, #20
 8010e66:	b168      	cbz	r0, 8010e84 <rcl_get_secure_root+0x24>
 8010e68:	4607      	mov	r7, r0
 8010e6a:	4608      	mov	r0, r1
 8010e6c:	460c      	mov	r4, r1
 8010e6e:	f7fb fd33 	bl	800c8d8 <rcutils_allocator_is_valid>
 8010e72:	b138      	cbz	r0, 8010e84 <rcl_get_secure_root+0x24>
 8010e74:	2300      	movs	r3, #0
 8010e76:	482d      	ldr	r0, [pc, #180]	@ (8010f2c <rcl_get_secure_root+0xcc>)
 8010e78:	9303      	str	r3, [sp, #12]
 8010e7a:	a903      	add	r1, sp, #12
 8010e7c:	f002 f85c 	bl	8012f38 <rcutils_get_env>
 8010e80:	4605      	mov	r5, r0
 8010e82:	b120      	cbz	r0, 8010e8e <rcl_get_secure_root+0x2e>
 8010e84:	2500      	movs	r5, #0
 8010e86:	4628      	mov	r0, r5
 8010e88:	b005      	add	sp, #20
 8010e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e8e:	9b03      	ldr	r3, [sp, #12]
 8010e90:	781a      	ldrb	r2, [r3, #0]
 8010e92:	2a00      	cmp	r2, #0
 8010e94:	d0f6      	beq.n	8010e84 <rcl_get_secure_root+0x24>
 8010e96:	f104 090c 	add.w	r9, r4, #12
 8010e9a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010e9e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010ea8:	f002 f988 	bl	80131bc <rcutils_strdup>
 8010eac:	4680      	mov	r8, r0
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	d0e8      	beq.n	8010e84 <rcl_get_secure_root+0x24>
 8010eb2:	481f      	ldr	r0, [pc, #124]	@ (8010f30 <rcl_get_secure_root+0xd0>)
 8010eb4:	9503      	str	r5, [sp, #12]
 8010eb6:	a903      	add	r1, sp, #12
 8010eb8:	f002 f83e 	bl	8012f38 <rcutils_get_env>
 8010ebc:	b160      	cbz	r0, 8010ed8 <rcl_get_secure_root+0x78>
 8010ebe:	2600      	movs	r6, #0
 8010ec0:	6863      	ldr	r3, [r4, #4]
 8010ec2:	6921      	ldr	r1, [r4, #16]
 8010ec4:	4630      	mov	r0, r6
 8010ec6:	4798      	blx	r3
 8010ec8:	4640      	mov	r0, r8
 8010eca:	6863      	ldr	r3, [r4, #4]
 8010ecc:	6921      	ldr	r1, [r4, #16]
 8010ece:	4798      	blx	r3
 8010ed0:	4628      	mov	r0, r5
 8010ed2:	b005      	add	sp, #20
 8010ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ed8:	9b03      	ldr	r3, [sp, #12]
 8010eda:	781e      	ldrb	r6, [r3, #0]
 8010edc:	b1f6      	cbz	r6, 8010f1c <rcl_get_secure_root+0xbc>
 8010ede:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010ee2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010eec:	f002 f966 	bl	80131bc <rcutils_strdup>
 8010ef0:	4606      	mov	r6, r0
 8010ef2:	2800      	cmp	r0, #0
 8010ef4:	d0e3      	beq.n	8010ebe <rcl_get_secure_root+0x5e>
 8010ef6:	4622      	mov	r2, r4
 8010ef8:	4641      	mov	r1, r8
 8010efa:	f7ff ff6f 	bl	8010ddc <exact_match_lookup>
 8010efe:	4605      	mov	r5, r0
 8010f00:	2d00      	cmp	r5, #0
 8010f02:	d0dd      	beq.n	8010ec0 <rcl_get_secure_root+0x60>
 8010f04:	4628      	mov	r0, r5
 8010f06:	f002 f82f 	bl	8012f68 <rcutils_is_directory>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	d1d7      	bne.n	8010ec0 <rcl_get_secure_root+0x60>
 8010f10:	4628      	mov	r0, r5
 8010f12:	6921      	ldr	r1, [r4, #16]
 8010f14:	461d      	mov	r5, r3
 8010f16:	6863      	ldr	r3, [r4, #4]
 8010f18:	4798      	blx	r3
 8010f1a:	e7d1      	b.n	8010ec0 <rcl_get_secure_root+0x60>
 8010f1c:	4622      	mov	r2, r4
 8010f1e:	4638      	mov	r0, r7
 8010f20:	4641      	mov	r1, r8
 8010f22:	f7ff ff5b 	bl	8010ddc <exact_match_lookup>
 8010f26:	4605      	mov	r5, r0
 8010f28:	e7ea      	b.n	8010f00 <rcl_get_secure_root+0xa0>
 8010f2a:	bf00      	nop
 8010f2c:	08018c74 	.word	0x08018c74
 8010f30:	08018c8c 	.word	0x08018c8c

08010f34 <rcl_get_security_options_from_environment>:
 8010f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f38:	b082      	sub	sp, #8
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	4606      	mov	r6, r0
 8010f3e:	460f      	mov	r7, r1
 8010f40:	4820      	ldr	r0, [pc, #128]	@ (8010fc4 <rcl_get_security_options_from_environment+0x90>)
 8010f42:	9301      	str	r3, [sp, #4]
 8010f44:	a901      	add	r1, sp, #4
 8010f46:	4690      	mov	r8, r2
 8010f48:	f001 fff6 	bl	8012f38 <rcutils_get_env>
 8010f4c:	b120      	cbz	r0, 8010f58 <rcl_get_security_options_from_environment+0x24>
 8010f4e:	2501      	movs	r5, #1
 8010f50:	4628      	mov	r0, r5
 8010f52:	b002      	add	sp, #8
 8010f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f58:	491b      	ldr	r1, [pc, #108]	@ (8010fc8 <rcl_get_security_options_from_environment+0x94>)
 8010f5a:	4604      	mov	r4, r0
 8010f5c:	9801      	ldr	r0, [sp, #4]
 8010f5e:	f7ef f93f 	bl	80001e0 <strcmp>
 8010f62:	4605      	mov	r5, r0
 8010f64:	b9e8      	cbnz	r0, 8010fa2 <rcl_get_security_options_from_environment+0x6e>
 8010f66:	9001      	str	r0, [sp, #4]
 8010f68:	f1b8 0f00 	cmp.w	r8, #0
 8010f6c:	d020      	beq.n	8010fb0 <rcl_get_security_options_from_environment+0x7c>
 8010f6e:	4817      	ldr	r0, [pc, #92]	@ (8010fcc <rcl_get_security_options_from_environment+0x98>)
 8010f70:	a901      	add	r1, sp, #4
 8010f72:	f001 ffe1 	bl	8012f38 <rcutils_get_env>
 8010f76:	2800      	cmp	r0, #0
 8010f78:	d1e9      	bne.n	8010f4e <rcl_get_security_options_from_environment+0x1a>
 8010f7a:	4915      	ldr	r1, [pc, #84]	@ (8010fd0 <rcl_get_security_options_from_environment+0x9c>)
 8010f7c:	9801      	ldr	r0, [sp, #4]
 8010f7e:	f7ef f92f 	bl	80001e0 <strcmp>
 8010f82:	fab0 f080 	clz	r0, r0
 8010f86:	0940      	lsrs	r0, r0, #5
 8010f88:	f888 0000 	strb.w	r0, [r8]
 8010f8c:	4639      	mov	r1, r7
 8010f8e:	4630      	mov	r0, r6
 8010f90:	f7ff ff66 	bl	8010e60 <rcl_get_secure_root>
 8010f94:	b170      	cbz	r0, 8010fb4 <rcl_get_security_options_from_environment+0x80>
 8010f96:	f8c8 0004 	str.w	r0, [r8, #4]
 8010f9a:	4628      	mov	r0, r5
 8010f9c:	b002      	add	sp, #8
 8010f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fa2:	4625      	mov	r5, r4
 8010fa4:	4628      	mov	r0, r5
 8010fa6:	f888 4000 	strb.w	r4, [r8]
 8010faa:	b002      	add	sp, #8
 8010fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fb0:	250b      	movs	r5, #11
 8010fb2:	e7cd      	b.n	8010f50 <rcl_get_security_options_from_environment+0x1c>
 8010fb4:	f898 5000 	ldrb.w	r5, [r8]
 8010fb8:	f1a5 0501 	sub.w	r5, r5, #1
 8010fbc:	fab5 f585 	clz	r5, r5
 8010fc0:	096d      	lsrs	r5, r5, #5
 8010fc2:	e7c5      	b.n	8010f50 <rcl_get_security_options_from_environment+0x1c>
 8010fc4:	08018c2c 	.word	0x08018c2c
 8010fc8:	08018c40 	.word	0x08018c40
 8010fcc:	08018c48 	.word	0x08018c48
 8010fd0:	08018c60 	.word	0x08018c60

08010fd4 <rcl_service_get_rmw_handle>:
 8010fd4:	b118      	cbz	r0, 8010fde <rcl_service_get_rmw_handle+0xa>
 8010fd6:	6800      	ldr	r0, [r0, #0]
 8010fd8:	b108      	cbz	r0, 8010fde <rcl_service_get_rmw_handle+0xa>
 8010fda:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010fde:	4770      	bx	lr

08010fe0 <rcl_take_request>:
 8010fe0:	b570      	push	{r4, r5, r6, lr}
 8010fe2:	468e      	mov	lr, r1
 8010fe4:	460c      	mov	r4, r1
 8010fe6:	4616      	mov	r6, r2
 8010fe8:	4605      	mov	r5, r0
 8010fea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010fee:	b08c      	sub	sp, #48	@ 0x30
 8010ff0:	f10d 0c18 	add.w	ip, sp, #24
 8010ff4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ff8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010ffc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011000:	b30d      	cbz	r5, 8011046 <rcl_take_request+0x66>
 8011002:	682b      	ldr	r3, [r5, #0]
 8011004:	b1fb      	cbz	r3, 8011046 <rcl_take_request+0x66>
 8011006:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801100a:	b1e0      	cbz	r0, 8011046 <rcl_take_request+0x66>
 801100c:	b336      	cbz	r6, 801105c <rcl_take_request+0x7c>
 801100e:	2300      	movs	r3, #0
 8011010:	f88d 3007 	strb.w	r3, [sp, #7]
 8011014:	4632      	mov	r2, r6
 8011016:	f10d 0307 	add.w	r3, sp, #7
 801101a:	a902      	add	r1, sp, #8
 801101c:	f003 f8ea 	bl	80141f4 <rmw_take_request>
 8011020:	4605      	mov	r5, r0
 8011022:	b198      	cbz	r0, 801104c <rcl_take_request+0x6c>
 8011024:	280a      	cmp	r0, #10
 8011026:	bf18      	it	ne
 8011028:	2501      	movne	r5, #1
 801102a:	f10d 0e18 	add.w	lr, sp, #24
 801102e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011032:	46a4      	mov	ip, r4
 8011034:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011038:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801103c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011040:	4628      	mov	r0, r5
 8011042:	b00c      	add	sp, #48	@ 0x30
 8011044:	bd70      	pop	{r4, r5, r6, pc}
 8011046:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801104a:	e7ee      	b.n	801102a <rcl_take_request+0x4a>
 801104c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011050:	f240 2359 	movw	r3, #601	@ 0x259
 8011054:	2a00      	cmp	r2, #0
 8011056:	bf08      	it	eq
 8011058:	461d      	moveq	r5, r3
 801105a:	e7e6      	b.n	801102a <rcl_take_request+0x4a>
 801105c:	250b      	movs	r5, #11
 801105e:	e7e4      	b.n	801102a <rcl_take_request+0x4a>

08011060 <rcl_send_response>:
 8011060:	b170      	cbz	r0, 8011080 <rcl_send_response+0x20>
 8011062:	6800      	ldr	r0, [r0, #0]
 8011064:	b160      	cbz	r0, 8011080 <rcl_send_response+0x20>
 8011066:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801106a:	b148      	cbz	r0, 8011080 <rcl_send_response+0x20>
 801106c:	b159      	cbz	r1, 8011086 <rcl_send_response+0x26>
 801106e:	b510      	push	{r4, lr}
 8011070:	b15a      	cbz	r2, 801108a <rcl_send_response+0x2a>
 8011072:	f003 f91d 	bl	80142b0 <rmw_send_response>
 8011076:	b110      	cbz	r0, 801107e <rcl_send_response+0x1e>
 8011078:	2802      	cmp	r0, #2
 801107a:	bf18      	it	ne
 801107c:	2001      	movne	r0, #1
 801107e:	bd10      	pop	{r4, pc}
 8011080:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8011084:	4770      	bx	lr
 8011086:	200b      	movs	r0, #11
 8011088:	4770      	bx	lr
 801108a:	200b      	movs	r0, #11
 801108c:	bd10      	pop	{r4, pc}
 801108e:	bf00      	nop

08011090 <rcl_service_is_valid>:
 8011090:	b130      	cbz	r0, 80110a0 <rcl_service_is_valid+0x10>
 8011092:	6800      	ldr	r0, [r0, #0]
 8011094:	b120      	cbz	r0, 80110a0 <rcl_service_is_valid+0x10>
 8011096:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801109a:	3800      	subs	r0, #0
 801109c:	bf18      	it	ne
 801109e:	2001      	movne	r0, #1
 80110a0:	4770      	bx	lr
 80110a2:	bf00      	nop

080110a4 <rcl_get_zero_initialized_subscription>:
 80110a4:	4b01      	ldr	r3, [pc, #4]	@ (80110ac <rcl_get_zero_initialized_subscription+0x8>)
 80110a6:	6818      	ldr	r0, [r3, #0]
 80110a8:	4770      	bx	lr
 80110aa:	bf00      	nop
 80110ac:	08018cac 	.word	0x08018cac

080110b0 <rcl_subscription_init>:
 80110b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110b4:	b089      	sub	sp, #36	@ 0x24
 80110b6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80110b8:	b1d6      	cbz	r6, 80110f0 <rcl_subscription_init+0x40>
 80110ba:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 80110be:	4604      	mov	r4, r0
 80110c0:	4648      	mov	r0, r9
 80110c2:	460d      	mov	r5, r1
 80110c4:	4690      	mov	r8, r2
 80110c6:	461f      	mov	r7, r3
 80110c8:	f7fb fc06 	bl	800c8d8 <rcutils_allocator_is_valid>
 80110cc:	b180      	cbz	r0, 80110f0 <rcl_subscription_init+0x40>
 80110ce:	b17c      	cbz	r4, 80110f0 <rcl_subscription_init+0x40>
 80110d0:	4628      	mov	r0, r5
 80110d2:	f7ff fd87 	bl	8010be4 <rcl_node_is_valid>
 80110d6:	2800      	cmp	r0, #0
 80110d8:	d054      	beq.n	8011184 <rcl_subscription_init+0xd4>
 80110da:	f1b8 0f00 	cmp.w	r8, #0
 80110de:	d007      	beq.n	80110f0 <rcl_subscription_init+0x40>
 80110e0:	b137      	cbz	r7, 80110f0 <rcl_subscription_init+0x40>
 80110e2:	6823      	ldr	r3, [r4, #0]
 80110e4:	b14b      	cbz	r3, 80110fa <rcl_subscription_init+0x4a>
 80110e6:	2764      	movs	r7, #100	@ 0x64
 80110e8:	4638      	mov	r0, r7
 80110ea:	b009      	add	sp, #36	@ 0x24
 80110ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110f0:	270b      	movs	r7, #11
 80110f2:	4638      	mov	r0, r7
 80110f4:	b009      	add	sp, #36	@ 0x24
 80110f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110fa:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80110fe:	aa07      	add	r2, sp, #28
 8011100:	9205      	str	r2, [sp, #20]
 8011102:	9307      	str	r3, [sp, #28]
 8011104:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8011108:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801110c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011110:	4639      	mov	r1, r7
 8011112:	e899 000c 	ldmia.w	r9, {r2, r3}
 8011116:	4628      	mov	r0, r5
 8011118:	f7ff fdb8 	bl	8010c8c <rcl_node_resolve_name>
 801111c:	4607      	mov	r7, r0
 801111e:	2800      	cmp	r0, #0
 8011120:	d15f      	bne.n	80111e2 <rcl_subscription_init+0x132>
 8011122:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8011126:	21c8      	movs	r1, #200	@ 0xc8
 8011128:	2001      	movs	r0, #1
 801112a:	4798      	blx	r3
 801112c:	6020      	str	r0, [r4, #0]
 801112e:	2800      	cmp	r0, #0
 8011130:	d05d      	beq.n	80111ee <rcl_subscription_init+0x13e>
 8011132:	4628      	mov	r0, r5
 8011134:	f7ff fd78 	bl	8010c28 <rcl_node_get_rmw_handle>
 8011138:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 801113c:	9300      	str	r3, [sp, #0]
 801113e:	9a07      	ldr	r2, [sp, #28]
 8011140:	6827      	ldr	r7, [r4, #0]
 8011142:	4641      	mov	r1, r8
 8011144:	4633      	mov	r3, r6
 8011146:	f003 f99d 	bl	8014484 <rmw_create_subscription>
 801114a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 801114e:	6827      	ldr	r7, [r4, #0]
 8011150:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8011154:	b348      	cbz	r0, 80111aa <rcl_subscription_init+0xfa>
 8011156:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 801115a:	f003 fa75 	bl	8014648 <rmw_subscription_get_actual_qos>
 801115e:	4607      	mov	r7, r0
 8011160:	b9a8      	cbnz	r0, 801118e <rcl_subscription_init+0xde>
 8011162:	6820      	ldr	r0, [r4, #0]
 8011164:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8011168:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801116c:	2270      	movs	r2, #112	@ 0x70
 801116e:	4631      	mov	r1, r6
 8011170:	f006 fb7f 	bl	8017872 <memcpy>
 8011174:	9807      	ldr	r0, [sp, #28]
 8011176:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8011178:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801117a:	4798      	blx	r3
 801117c:	4638      	mov	r0, r7
 801117e:	b009      	add	sp, #36	@ 0x24
 8011180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011184:	27c8      	movs	r7, #200	@ 0xc8
 8011186:	4638      	mov	r0, r7
 8011188:	b009      	add	sp, #36	@ 0x24
 801118a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801118e:	6827      	ldr	r7, [r4, #0]
 8011190:	b32f      	cbz	r7, 80111de <rcl_subscription_init+0x12e>
 8011192:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011196:	b14b      	cbz	r3, 80111ac <rcl_subscription_init+0xfc>
 8011198:	4628      	mov	r0, r5
 801119a:	f7ff fd45 	bl	8010c28 <rcl_node_get_rmw_handle>
 801119e:	6823      	ldr	r3, [r4, #0]
 80111a0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80111a4:	f003 fa60 	bl	8014668 <rmw_destroy_subscription>
 80111a8:	6827      	ldr	r7, [r4, #0]
 80111aa:	b197      	cbz	r7, 80111d2 <rcl_subscription_init+0x122>
 80111ac:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80111b0:	4628      	mov	r0, r5
 80111b2:	f7fb fb91 	bl	800c8d8 <rcutils_allocator_is_valid>
 80111b6:	b158      	cbz	r0, 80111d0 <rcl_subscription_init+0x120>
 80111b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80111ba:	b148      	cbz	r0, 80111d0 <rcl_subscription_init+0x120>
 80111bc:	4629      	mov	r1, r5
 80111be:	f002 f98b 	bl	80134d8 <rmw_subscription_content_filter_options_fini>
 80111c2:	4605      	mov	r5, r0
 80111c4:	b9b8      	cbnz	r0, 80111f6 <rcl_subscription_init+0x146>
 80111c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80111c8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80111ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80111cc:	4798      	blx	r3
 80111ce:	66fd      	str	r5, [r7, #108]	@ 0x6c
 80111d0:	6827      	ldr	r7, [r4, #0]
 80111d2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80111d4:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80111d6:	4638      	mov	r0, r7
 80111d8:	4798      	blx	r3
 80111da:	2300      	movs	r3, #0
 80111dc:	6023      	str	r3, [r4, #0]
 80111de:	2701      	movs	r7, #1
 80111e0:	e7c8      	b.n	8011174 <rcl_subscription_init+0xc4>
 80111e2:	2867      	cmp	r0, #103	@ 0x67
 80111e4:	d0c6      	beq.n	8011174 <rcl_subscription_init+0xc4>
 80111e6:	2869      	cmp	r0, #105	@ 0x69
 80111e8:	d003      	beq.n	80111f2 <rcl_subscription_init+0x142>
 80111ea:	280a      	cmp	r0, #10
 80111ec:	d1f7      	bne.n	80111de <rcl_subscription_init+0x12e>
 80111ee:	270a      	movs	r7, #10
 80111f0:	e7c0      	b.n	8011174 <rcl_subscription_init+0xc4>
 80111f2:	2767      	movs	r7, #103	@ 0x67
 80111f4:	e7be      	b.n	8011174 <rcl_subscription_init+0xc4>
 80111f6:	f7ff f8fd 	bl	80103f4 <rcl_convert_rmw_ret_to_rcl_ret>
 80111fa:	6827      	ldr	r7, [r4, #0]
 80111fc:	e7e9      	b.n	80111d2 <rcl_subscription_init+0x122>
 80111fe:	bf00      	nop

08011200 <rcl_subscription_get_default_options>:
 8011200:	b570      	push	{r4, r5, r6, lr}
 8011202:	4d14      	ldr	r5, [pc, #80]	@ (8011254 <rcl_subscription_get_default_options+0x54>)
 8011204:	4914      	ldr	r1, [pc, #80]	@ (8011258 <rcl_subscription_get_default_options+0x58>)
 8011206:	b08a      	sub	sp, #40	@ 0x28
 8011208:	4604      	mov	r4, r0
 801120a:	2250      	movs	r2, #80	@ 0x50
 801120c:	4628      	mov	r0, r5
 801120e:	f006 fb30 	bl	8017872 <memcpy>
 8011212:	a804      	add	r0, sp, #16
 8011214:	f7fb fb52 	bl	800c8bc <rcutils_get_default_allocator>
 8011218:	f10d 0c10 	add.w	ip, sp, #16
 801121c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011220:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8011224:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011228:	466e      	mov	r6, sp
 801122a:	f8dc 3000 	ldr.w	r3, [ip]
 801122e:	f8ce 3000 	str.w	r3, [lr]
 8011232:	4630      	mov	r0, r6
 8011234:	f002 f96a 	bl	801350c <rmw_get_default_subscription_options>
 8011238:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801123c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8011240:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011244:	2270      	movs	r2, #112	@ 0x70
 8011246:	4629      	mov	r1, r5
 8011248:	4620      	mov	r0, r4
 801124a:	f006 fb12 	bl	8017872 <memcpy>
 801124e:	4620      	mov	r0, r4
 8011250:	b00a      	add	sp, #40	@ 0x28
 8011252:	bd70      	pop	{r4, r5, r6, pc}
 8011254:	2000dc70 	.word	0x2000dc70
 8011258:	08018cb0 	.word	0x08018cb0

0801125c <rcl_take>:
 801125c:	2800      	cmp	r0, #0
 801125e:	d04a      	beq.n	80112f6 <rcl_take+0x9a>
 8011260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011264:	4604      	mov	r4, r0
 8011266:	6800      	ldr	r0, [r0, #0]
 8011268:	b0a4      	sub	sp, #144	@ 0x90
 801126a:	2800      	cmp	r0, #0
 801126c:	d03b      	beq.n	80112e6 <rcl_take+0x8a>
 801126e:	461f      	mov	r7, r3
 8011270:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8011274:	2b00      	cmp	r3, #0
 8011276:	d036      	beq.n	80112e6 <rcl_take+0x8a>
 8011278:	460e      	mov	r6, r1
 801127a:	2900      	cmp	r1, #0
 801127c:	d039      	beq.n	80112f2 <rcl_take+0x96>
 801127e:	4615      	mov	r5, r2
 8011280:	2a00      	cmp	r2, #0
 8011282:	d03c      	beq.n	80112fe <rcl_take+0xa2>
 8011284:	a802      	add	r0, sp, #8
 8011286:	f002 f9cb 	bl	8013620 <rmw_get_zero_initialized_message_info>
 801128a:	f10d 0c08 	add.w	ip, sp, #8
 801128e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011292:	46ae      	mov	lr, r5
 8011294:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011298:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801129c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80112a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80112a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80112a8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80112ac:	f04f 0800 	mov.w	r8, #0
 80112b0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80112b4:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 80112b8:	6822      	ldr	r2, [r4, #0]
 80112ba:	462b      	mov	r3, r5
 80112bc:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 80112c0:	9700      	str	r7, [sp, #0]
 80112c2:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80112c6:	4631      	mov	r1, r6
 80112c8:	f003 fa2e 	bl	8014728 <rmw_take_with_info>
 80112cc:	4603      	mov	r3, r0
 80112ce:	b9c0      	cbnz	r0, 8011302 <rcl_take+0xa6>
 80112d0:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 80112d4:	f240 1291 	movw	r2, #401	@ 0x191
 80112d8:	2900      	cmp	r1, #0
 80112da:	bf08      	it	eq
 80112dc:	4613      	moveq	r3, r2
 80112de:	4618      	mov	r0, r3
 80112e0:	b024      	add	sp, #144	@ 0x90
 80112e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112e6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80112ea:	4618      	mov	r0, r3
 80112ec:	b024      	add	sp, #144	@ 0x90
 80112ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112f2:	230b      	movs	r3, #11
 80112f4:	e7f3      	b.n	80112de <rcl_take+0x82>
 80112f6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80112fa:	4618      	mov	r0, r3
 80112fc:	4770      	bx	lr
 80112fe:	ad14      	add	r5, sp, #80	@ 0x50
 8011300:	e7c0      	b.n	8011284 <rcl_take+0x28>
 8011302:	f7ff f877 	bl	80103f4 <rcl_convert_rmw_ret_to_rcl_ret>
 8011306:	4603      	mov	r3, r0
 8011308:	e7e9      	b.n	80112de <rcl_take+0x82>
 801130a:	bf00      	nop

0801130c <rcl_subscription_get_rmw_handle>:
 801130c:	b118      	cbz	r0, 8011316 <rcl_subscription_get_rmw_handle+0xa>
 801130e:	6800      	ldr	r0, [r0, #0]
 8011310:	b108      	cbz	r0, 8011316 <rcl_subscription_get_rmw_handle+0xa>
 8011312:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8011316:	4770      	bx	lr

08011318 <rcl_subscription_is_valid>:
 8011318:	b130      	cbz	r0, 8011328 <rcl_subscription_is_valid+0x10>
 801131a:	6800      	ldr	r0, [r0, #0]
 801131c:	b120      	cbz	r0, 8011328 <rcl_subscription_is_valid+0x10>
 801131e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8011322:	3800      	subs	r0, #0
 8011324:	bf18      	it	ne
 8011326:	2001      	movne	r0, #1
 8011328:	4770      	bx	lr
 801132a:	bf00      	nop

0801132c <rcl_get_system_time>:
 801132c:	4608      	mov	r0, r1
 801132e:	f7fb bb13 	b.w	800c958 <rcutils_system_time_now>
 8011332:	bf00      	nop

08011334 <rcl_get_steady_time>:
 8011334:	4608      	mov	r0, r1
 8011336:	f7fb bb37 	b.w	800c9a8 <rcutils_steady_time_now>
 801133a:	bf00      	nop

0801133c <rcl_get_ros_time>:
 801133c:	7a03      	ldrb	r3, [r0, #8]
 801133e:	b510      	push	{r4, lr}
 8011340:	460c      	mov	r4, r1
 8011342:	b133      	cbz	r3, 8011352 <rcl_get_ros_time+0x16>
 8011344:	2105      	movs	r1, #5
 8011346:	f001 fd53 	bl	8012df0 <__atomic_load_8>
 801134a:	e9c4 0100 	strd	r0, r1, [r4]
 801134e:	2000      	movs	r0, #0
 8011350:	bd10      	pop	{r4, pc}
 8011352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011356:	4608      	mov	r0, r1
 8011358:	f7fb bafe 	b.w	800c958 <rcutils_system_time_now>

0801135c <rcl_clock_init>:
 801135c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801135e:	4605      	mov	r5, r0
 8011360:	4610      	mov	r0, r2
 8011362:	4614      	mov	r4, r2
 8011364:	460e      	mov	r6, r1
 8011366:	f7fb fab7 	bl	800c8d8 <rcutils_allocator_is_valid>
 801136a:	b128      	cbz	r0, 8011378 <rcl_clock_init+0x1c>
 801136c:	2d03      	cmp	r5, #3
 801136e:	d803      	bhi.n	8011378 <rcl_clock_init+0x1c>
 8011370:	e8df f005 	tbb	[pc, r5]
 8011374:	06532e1d 	.word	0x06532e1d
 8011378:	f04f 0c0b 	mov.w	ip, #11
 801137c:	4660      	mov	r0, ip
 801137e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011380:	2e00      	cmp	r6, #0
 8011382:	d0f9      	beq.n	8011378 <rcl_clock_init+0x1c>
 8011384:	2c00      	cmp	r4, #0
 8011386:	d0f7      	beq.n	8011378 <rcl_clock_init+0x1c>
 8011388:	2300      	movs	r3, #0
 801138a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801138e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8011444 <rcl_clock_init+0xe8>
 8011392:	6133      	str	r3, [r6, #16]
 8011394:	f106 0514 	add.w	r5, r6, #20
 8011398:	469c      	mov	ip, r3
 801139a:	2703      	movs	r7, #3
 801139c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801139e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80113a0:	6823      	ldr	r3, [r4, #0]
 80113a2:	602b      	str	r3, [r5, #0]
 80113a4:	7037      	strb	r7, [r6, #0]
 80113a6:	f8c6 e00c 	str.w	lr, [r6, #12]
 80113aa:	4660      	mov	r0, ip
 80113ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113ae:	2e00      	cmp	r6, #0
 80113b0:	d0e2      	beq.n	8011378 <rcl_clock_init+0x1c>
 80113b2:	2300      	movs	r3, #0
 80113b4:	7033      	strb	r3, [r6, #0]
 80113b6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80113ba:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80113be:	469c      	mov	ip, r3
 80113c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113c2:	f106 0514 	add.w	r5, r6, #20
 80113c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80113c8:	6823      	ldr	r3, [r4, #0]
 80113ca:	602b      	str	r3, [r5, #0]
 80113cc:	4660      	mov	r0, ip
 80113ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113d0:	2e00      	cmp	r6, #0
 80113d2:	d0d1      	beq.n	8011378 <rcl_clock_init+0x1c>
 80113d4:	2c00      	cmp	r4, #0
 80113d6:	d0cf      	beq.n	8011378 <rcl_clock_init+0x1c>
 80113d8:	2700      	movs	r7, #0
 80113da:	7037      	strb	r7, [r6, #0]
 80113dc:	46a4      	mov	ip, r4
 80113de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80113e2:	f106 0514 	add.w	r5, r6, #20
 80113e6:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80113ea:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80113ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80113f0:	f8dc 3000 	ldr.w	r3, [ip]
 80113f4:	602b      	str	r3, [r5, #0]
 80113f6:	6921      	ldr	r1, [r4, #16]
 80113f8:	6823      	ldr	r3, [r4, #0]
 80113fa:	2010      	movs	r0, #16
 80113fc:	4798      	blx	r3
 80113fe:	6130      	str	r0, [r6, #16]
 8011400:	b1d0      	cbz	r0, 8011438 <rcl_clock_init+0xdc>
 8011402:	2200      	movs	r2, #0
 8011404:	2300      	movs	r3, #0
 8011406:	e9c0 2300 	strd	r2, r3, [r0]
 801140a:	2301      	movs	r3, #1
 801140c:	7207      	strb	r7, [r0, #8]
 801140e:	4a0c      	ldr	r2, [pc, #48]	@ (8011440 <rcl_clock_init+0xe4>)
 8011410:	7033      	strb	r3, [r6, #0]
 8011412:	46bc      	mov	ip, r7
 8011414:	60f2      	str	r2, [r6, #12]
 8011416:	4660      	mov	r0, ip
 8011418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801141a:	2e00      	cmp	r6, #0
 801141c:	d0ac      	beq.n	8011378 <rcl_clock_init+0x1c>
 801141e:	2c00      	cmp	r4, #0
 8011420:	d0aa      	beq.n	8011378 <rcl_clock_init+0x1c>
 8011422:	2300      	movs	r3, #0
 8011424:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011428:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8011448 <rcl_clock_init+0xec>
 801142c:	6133      	str	r3, [r6, #16]
 801142e:	f106 0514 	add.w	r5, r6, #20
 8011432:	469c      	mov	ip, r3
 8011434:	2702      	movs	r7, #2
 8011436:	e7b1      	b.n	801139c <rcl_clock_init+0x40>
 8011438:	f04f 0c0a 	mov.w	ip, #10
 801143c:	e79e      	b.n	801137c <rcl_clock_init+0x20>
 801143e:	bf00      	nop
 8011440:	0801133d 	.word	0x0801133d
 8011444:	08011335 	.word	0x08011335
 8011448:	0801132d 	.word	0x0801132d

0801144c <rcl_clock_get_now>:
 801144c:	b140      	cbz	r0, 8011460 <rcl_clock_get_now+0x14>
 801144e:	b139      	cbz	r1, 8011460 <rcl_clock_get_now+0x14>
 8011450:	7803      	ldrb	r3, [r0, #0]
 8011452:	b11b      	cbz	r3, 801145c <rcl_clock_get_now+0x10>
 8011454:	68c3      	ldr	r3, [r0, #12]
 8011456:	b10b      	cbz	r3, 801145c <rcl_clock_get_now+0x10>
 8011458:	6900      	ldr	r0, [r0, #16]
 801145a:	4718      	bx	r3
 801145c:	2001      	movs	r0, #1
 801145e:	4770      	bx	lr
 8011460:	200b      	movs	r0, #11
 8011462:	4770      	bx	lr

08011464 <rcl_timer_call>:
 8011464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011468:	b087      	sub	sp, #28
 801146a:	2800      	cmp	r0, #0
 801146c:	d06d      	beq.n	801154a <rcl_timer_call+0xe6>
 801146e:	6803      	ldr	r3, [r0, #0]
 8011470:	4604      	mov	r4, r0
 8011472:	2b00      	cmp	r3, #0
 8011474:	d063      	beq.n	801153e <rcl_timer_call+0xda>
 8011476:	f3bf 8f5b 	dmb	ish
 801147a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801147e:	f3bf 8f5b 	dmb	ish
 8011482:	2b00      	cmp	r3, #0
 8011484:	d150      	bne.n	8011528 <rcl_timer_call+0xc4>
 8011486:	6803      	ldr	r3, [r0, #0]
 8011488:	a904      	add	r1, sp, #16
 801148a:	6818      	ldr	r0, [r3, #0]
 801148c:	f7ff ffde 	bl	801144c <rcl_clock_get_now>
 8011490:	4605      	mov	r5, r0
 8011492:	2800      	cmp	r0, #0
 8011494:	d14a      	bne.n	801152c <rcl_timer_call+0xc8>
 8011496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801149a:	2b00      	cmp	r3, #0
 801149c:	db4a      	blt.n	8011534 <rcl_timer_call+0xd0>
 801149e:	6820      	ldr	r0, [r4, #0]
 80114a0:	f04f 0a05 	mov.w	sl, #5
 80114a4:	f8cd a000 	str.w	sl, [sp]
 80114a8:	3020      	adds	r0, #32
 80114aa:	f001 fd0d 	bl	8012ec8 <__atomic_exchange_8>
 80114ae:	6823      	ldr	r3, [r4, #0]
 80114b0:	f3bf 8f5b 	dmb	ish
 80114b4:	4680      	mov	r8, r0
 80114b6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80114ba:	f3bf 8f5b 	dmb	ish
 80114be:	6820      	ldr	r0, [r4, #0]
 80114c0:	4689      	mov	r9, r1
 80114c2:	3028      	adds	r0, #40	@ 0x28
 80114c4:	4651      	mov	r1, sl
 80114c6:	f001 fc93 	bl	8012df0 <__atomic_load_8>
 80114ca:	4606      	mov	r6, r0
 80114cc:	6820      	ldr	r0, [r4, #0]
 80114ce:	460f      	mov	r7, r1
 80114d0:	3018      	adds	r0, #24
 80114d2:	4651      	mov	r1, sl
 80114d4:	f001 fc8c 	bl	8012df0 <__atomic_load_8>
 80114d8:	1836      	adds	r6, r6, r0
 80114da:	4602      	mov	r2, r0
 80114dc:	4682      	mov	sl, r0
 80114de:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80114e2:	eb47 0701 	adc.w	r7, r7, r1
 80114e6:	4286      	cmp	r6, r0
 80114e8:	460b      	mov	r3, r1
 80114ea:	eb77 010c 	sbcs.w	r1, r7, ip
 80114ee:	da04      	bge.n	80114fa <rcl_timer_call+0x96>
 80114f0:	ea53 0102 	orrs.w	r1, r3, r2
 80114f4:	d12e      	bne.n	8011554 <rcl_timer_call+0xf0>
 80114f6:	4606      	mov	r6, r0
 80114f8:	4667      	mov	r7, ip
 80114fa:	6820      	ldr	r0, [r4, #0]
 80114fc:	2105      	movs	r1, #5
 80114fe:	4632      	mov	r2, r6
 8011500:	463b      	mov	r3, r7
 8011502:	3028      	adds	r0, #40	@ 0x28
 8011504:	9100      	str	r1, [sp, #0]
 8011506:	f001 fca9 	bl	8012e5c <__atomic_store_8>
 801150a:	f1bb 0f00 	cmp.w	fp, #0
 801150e:	d00d      	beq.n	801152c <rcl_timer_call+0xc8>
 8011510:	9a04      	ldr	r2, [sp, #16]
 8011512:	9b05      	ldr	r3, [sp, #20]
 8011514:	ebb2 0208 	subs.w	r2, r2, r8
 8011518:	4620      	mov	r0, r4
 801151a:	eb63 0309 	sbc.w	r3, r3, r9
 801151e:	47d8      	blx	fp
 8011520:	4628      	mov	r0, r5
 8011522:	b007      	add	sp, #28
 8011524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011528:	f240 3521 	movw	r5, #801	@ 0x321
 801152c:	4628      	mov	r0, r5
 801152e:	b007      	add	sp, #28
 8011530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011534:	2501      	movs	r5, #1
 8011536:	4628      	mov	r0, r5
 8011538:	b007      	add	sp, #28
 801153a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801153e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8011542:	4628      	mov	r0, r5
 8011544:	b007      	add	sp, #28
 8011546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801154a:	250b      	movs	r5, #11
 801154c:	4628      	mov	r0, r5
 801154e:	b007      	add	sp, #28
 8011550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011554:	1b80      	subs	r0, r0, r6
 8011556:	eb6c 0107 	sbc.w	r1, ip, r7
 801155a:	3801      	subs	r0, #1
 801155c:	f161 0100 	sbc.w	r1, r1, #0
 8011560:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011564:	f7ef fb42 	bl	8000bec <__aeabi_ldivmod>
 8011568:	9b02      	ldr	r3, [sp, #8]
 801156a:	3001      	adds	r0, #1
 801156c:	f141 0100 	adc.w	r1, r1, #0
 8011570:	fb00 f303 	mul.w	r3, r0, r3
 8011574:	fb01 330a 	mla	r3, r1, sl, r3
 8011578:	fba0 0a0a 	umull	r0, sl, r0, sl
 801157c:	1986      	adds	r6, r0, r6
 801157e:	4453      	add	r3, sl
 8011580:	eb43 0707 	adc.w	r7, r3, r7
 8011584:	e7b9      	b.n	80114fa <rcl_timer_call+0x96>
 8011586:	bf00      	nop

08011588 <rcl_timer_is_ready>:
 8011588:	b570      	push	{r4, r5, r6, lr}
 801158a:	b082      	sub	sp, #8
 801158c:	b378      	cbz	r0, 80115ee <rcl_timer_is_ready+0x66>
 801158e:	6803      	ldr	r3, [r0, #0]
 8011590:	4604      	mov	r4, r0
 8011592:	b383      	cbz	r3, 80115f6 <rcl_timer_is_ready+0x6e>
 8011594:	460d      	mov	r5, r1
 8011596:	b351      	cbz	r1, 80115ee <rcl_timer_is_ready+0x66>
 8011598:	f3bf 8f5b 	dmb	ish
 801159c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80115a0:	f3bf 8f5b 	dmb	ish
 80115a4:	b953      	cbnz	r3, 80115bc <rcl_timer_is_ready+0x34>
 80115a6:	6803      	ldr	r3, [r0, #0]
 80115a8:	4669      	mov	r1, sp
 80115aa:	6818      	ldr	r0, [r3, #0]
 80115ac:	f7ff ff4e 	bl	801144c <rcl_clock_get_now>
 80115b0:	4606      	mov	r6, r0
 80115b2:	b140      	cbz	r0, 80115c6 <rcl_timer_is_ready+0x3e>
 80115b4:	f240 3321 	movw	r3, #801	@ 0x321
 80115b8:	4298      	cmp	r0, r3
 80115ba:	d101      	bne.n	80115c0 <rcl_timer_is_ready+0x38>
 80115bc:	2600      	movs	r6, #0
 80115be:	702e      	strb	r6, [r5, #0]
 80115c0:	4630      	mov	r0, r6
 80115c2:	b002      	add	sp, #8
 80115c4:	bd70      	pop	{r4, r5, r6, pc}
 80115c6:	6820      	ldr	r0, [r4, #0]
 80115c8:	2105      	movs	r1, #5
 80115ca:	3028      	adds	r0, #40	@ 0x28
 80115cc:	f001 fc10 	bl	8012df0 <__atomic_load_8>
 80115d0:	9b00      	ldr	r3, [sp, #0]
 80115d2:	1ac0      	subs	r0, r0, r3
 80115d4:	9b01      	ldr	r3, [sp, #4]
 80115d6:	eb61 0103 	sbc.w	r1, r1, r3
 80115da:	2801      	cmp	r0, #1
 80115dc:	f171 0300 	sbcs.w	r3, r1, #0
 80115e0:	bfb4      	ite	lt
 80115e2:	2301      	movlt	r3, #1
 80115e4:	2300      	movge	r3, #0
 80115e6:	4630      	mov	r0, r6
 80115e8:	702b      	strb	r3, [r5, #0]
 80115ea:	b002      	add	sp, #8
 80115ec:	bd70      	pop	{r4, r5, r6, pc}
 80115ee:	260b      	movs	r6, #11
 80115f0:	4630      	mov	r0, r6
 80115f2:	b002      	add	sp, #8
 80115f4:	bd70      	pop	{r4, r5, r6, pc}
 80115f6:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80115fa:	e7e1      	b.n	80115c0 <rcl_timer_is_ready+0x38>

080115fc <rcl_timer_get_time_until_next_call>:
 80115fc:	b570      	push	{r4, r5, r6, lr}
 80115fe:	b082      	sub	sp, #8
 8011600:	b330      	cbz	r0, 8011650 <rcl_timer_get_time_until_next_call+0x54>
 8011602:	6803      	ldr	r3, [r0, #0]
 8011604:	4604      	mov	r4, r0
 8011606:	b33b      	cbz	r3, 8011658 <rcl_timer_get_time_until_next_call+0x5c>
 8011608:	460d      	mov	r5, r1
 801160a:	b309      	cbz	r1, 8011650 <rcl_timer_get_time_until_next_call+0x54>
 801160c:	f3bf 8f5b 	dmb	ish
 8011610:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011614:	f3bf 8f5b 	dmb	ish
 8011618:	b9ab      	cbnz	r3, 8011646 <rcl_timer_get_time_until_next_call+0x4a>
 801161a:	6803      	ldr	r3, [r0, #0]
 801161c:	4669      	mov	r1, sp
 801161e:	6818      	ldr	r0, [r3, #0]
 8011620:	f7ff ff14 	bl	801144c <rcl_clock_get_now>
 8011624:	4606      	mov	r6, r0
 8011626:	b958      	cbnz	r0, 8011640 <rcl_timer_get_time_until_next_call+0x44>
 8011628:	6820      	ldr	r0, [r4, #0]
 801162a:	2105      	movs	r1, #5
 801162c:	3028      	adds	r0, #40	@ 0x28
 801162e:	f001 fbdf 	bl	8012df0 <__atomic_load_8>
 8011632:	9b00      	ldr	r3, [sp, #0]
 8011634:	1ac0      	subs	r0, r0, r3
 8011636:	9b01      	ldr	r3, [sp, #4]
 8011638:	6028      	str	r0, [r5, #0]
 801163a:	eb61 0103 	sbc.w	r1, r1, r3
 801163e:	6069      	str	r1, [r5, #4]
 8011640:	4630      	mov	r0, r6
 8011642:	b002      	add	sp, #8
 8011644:	bd70      	pop	{r4, r5, r6, pc}
 8011646:	f240 3621 	movw	r6, #801	@ 0x321
 801164a:	4630      	mov	r0, r6
 801164c:	b002      	add	sp, #8
 801164e:	bd70      	pop	{r4, r5, r6, pc}
 8011650:	260b      	movs	r6, #11
 8011652:	4630      	mov	r0, r6
 8011654:	b002      	add	sp, #8
 8011656:	bd70      	pop	{r4, r5, r6, pc}
 8011658:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801165c:	e7f0      	b.n	8011640 <rcl_timer_get_time_until_next_call+0x44>
 801165e:	bf00      	nop

08011660 <rcl_timer_get_guard_condition>:
 8011660:	b130      	cbz	r0, 8011670 <rcl_timer_get_guard_condition+0x10>
 8011662:	6800      	ldr	r0, [r0, #0]
 8011664:	b120      	cbz	r0, 8011670 <rcl_timer_get_guard_condition+0x10>
 8011666:	68c3      	ldr	r3, [r0, #12]
 8011668:	b10b      	cbz	r3, 801166e <rcl_timer_get_guard_condition+0xe>
 801166a:	3008      	adds	r0, #8
 801166c:	4770      	bx	lr
 801166e:	4618      	mov	r0, r3
 8011670:	4770      	bx	lr
 8011672:	bf00      	nop

08011674 <rcl_validate_enclave_name_with_size>:
 8011674:	b378      	cbz	r0, 80116d6 <rcl_validate_enclave_name_with_size+0x62>
 8011676:	b570      	push	{r4, r5, r6, lr}
 8011678:	4615      	mov	r5, r2
 801167a:	b0c2      	sub	sp, #264	@ 0x108
 801167c:	b302      	cbz	r2, 80116c0 <rcl_validate_enclave_name_with_size+0x4c>
 801167e:	461e      	mov	r6, r3
 8011680:	466a      	mov	r2, sp
 8011682:	ab01      	add	r3, sp, #4
 8011684:	460c      	mov	r4, r1
 8011686:	f002 f849 	bl	801371c <rmw_validate_namespace_with_size>
 801168a:	4684      	mov	ip, r0
 801168c:	b9e8      	cbnz	r0, 80116ca <rcl_validate_enclave_name_with_size+0x56>
 801168e:	9b00      	ldr	r3, [sp, #0]
 8011690:	b923      	cbnz	r3, 801169c <rcl_validate_enclave_name_with_size+0x28>
 8011692:	2300      	movs	r3, #0
 8011694:	602b      	str	r3, [r5, #0]
 8011696:	4660      	mov	r0, ip
 8011698:	b042      	add	sp, #264	@ 0x108
 801169a:	bd70      	pop	{r4, r5, r6, pc}
 801169c:	2b07      	cmp	r3, #7
 801169e:	d007      	beq.n	80116b0 <rcl_validate_enclave_name_with_size+0x3c>
 80116a0:	1e5a      	subs	r2, r3, #1
 80116a2:	2a05      	cmp	r2, #5
 80116a4:	d833      	bhi.n	801170e <rcl_validate_enclave_name_with_size+0x9a>
 80116a6:	e8df f002 	tbb	[pc, r2]
 80116aa:	2c2f      	.short	0x2c2f
 80116ac:	1a232629 	.word	0x1a232629
 80116b0:	2cff      	cmp	r4, #255	@ 0xff
 80116b2:	d9ee      	bls.n	8011692 <rcl_validate_enclave_name_with_size+0x1e>
 80116b4:	602b      	str	r3, [r5, #0]
 80116b6:	2e00      	cmp	r6, #0
 80116b8:	d0ed      	beq.n	8011696 <rcl_validate_enclave_name_with_size+0x22>
 80116ba:	23fe      	movs	r3, #254	@ 0xfe
 80116bc:	6033      	str	r3, [r6, #0]
 80116be:	e7ea      	b.n	8011696 <rcl_validate_enclave_name_with_size+0x22>
 80116c0:	f04f 0c0b 	mov.w	ip, #11
 80116c4:	4660      	mov	r0, ip
 80116c6:	b042      	add	sp, #264	@ 0x108
 80116c8:	bd70      	pop	{r4, r5, r6, pc}
 80116ca:	f7fe fe93 	bl	80103f4 <rcl_convert_rmw_ret_to_rcl_ret>
 80116ce:	4684      	mov	ip, r0
 80116d0:	4660      	mov	r0, ip
 80116d2:	b042      	add	sp, #264	@ 0x108
 80116d4:	bd70      	pop	{r4, r5, r6, pc}
 80116d6:	f04f 0c0b 	mov.w	ip, #11
 80116da:	4660      	mov	r0, ip
 80116dc:	4770      	bx	lr
 80116de:	2306      	movs	r3, #6
 80116e0:	602b      	str	r3, [r5, #0]
 80116e2:	2e00      	cmp	r6, #0
 80116e4:	d0d7      	beq.n	8011696 <rcl_validate_enclave_name_with_size+0x22>
 80116e6:	9b01      	ldr	r3, [sp, #4]
 80116e8:	6033      	str	r3, [r6, #0]
 80116ea:	4660      	mov	r0, ip
 80116ec:	b042      	add	sp, #264	@ 0x108
 80116ee:	bd70      	pop	{r4, r5, r6, pc}
 80116f0:	2305      	movs	r3, #5
 80116f2:	602b      	str	r3, [r5, #0]
 80116f4:	e7f5      	b.n	80116e2 <rcl_validate_enclave_name_with_size+0x6e>
 80116f6:	2304      	movs	r3, #4
 80116f8:	602b      	str	r3, [r5, #0]
 80116fa:	e7f2      	b.n	80116e2 <rcl_validate_enclave_name_with_size+0x6e>
 80116fc:	2303      	movs	r3, #3
 80116fe:	602b      	str	r3, [r5, #0]
 8011700:	e7ef      	b.n	80116e2 <rcl_validate_enclave_name_with_size+0x6e>
 8011702:	2302      	movs	r3, #2
 8011704:	602b      	str	r3, [r5, #0]
 8011706:	e7ec      	b.n	80116e2 <rcl_validate_enclave_name_with_size+0x6e>
 8011708:	2301      	movs	r3, #1
 801170a:	602b      	str	r3, [r5, #0]
 801170c:	e7e9      	b.n	80116e2 <rcl_validate_enclave_name_with_size+0x6e>
 801170e:	4a04      	ldr	r2, [pc, #16]	@ (8011720 <rcl_validate_enclave_name_with_size+0xac>)
 8011710:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011714:	a802      	add	r0, sp, #8
 8011716:	f001 fd25 	bl	8013164 <rcutils_snprintf>
 801171a:	f04f 0c01 	mov.w	ip, #1
 801171e:	e7ba      	b.n	8011696 <rcl_validate_enclave_name_with_size+0x22>
 8011720:	08018d00 	.word	0x08018d00

08011724 <rcl_validate_enclave_name>:
 8011724:	b168      	cbz	r0, 8011742 <rcl_validate_enclave_name+0x1e>
 8011726:	b570      	push	{r4, r5, r6, lr}
 8011728:	460d      	mov	r5, r1
 801172a:	4616      	mov	r6, r2
 801172c:	4604      	mov	r4, r0
 801172e:	f7ee fd61 	bl	80001f4 <strlen>
 8011732:	4633      	mov	r3, r6
 8011734:	4601      	mov	r1, r0
 8011736:	462a      	mov	r2, r5
 8011738:	4620      	mov	r0, r4
 801173a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801173e:	f7ff bf99 	b.w	8011674 <rcl_validate_enclave_name_with_size>
 8011742:	200b      	movs	r0, #11
 8011744:	4770      	bx	lr
 8011746:	bf00      	nop

08011748 <rcl_get_zero_initialized_wait_set>:
 8011748:	b510      	push	{r4, lr}
 801174a:	4c08      	ldr	r4, [pc, #32]	@ (801176c <rcl_get_zero_initialized_wait_set+0x24>)
 801174c:	4686      	mov	lr, r0
 801174e:	4684      	mov	ip, r0
 8011750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011752:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011758:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801175c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801175e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011762:	6823      	ldr	r3, [r4, #0]
 8011764:	f8cc 3000 	str.w	r3, [ip]
 8011768:	4670      	mov	r0, lr
 801176a:	bd10      	pop	{r4, pc}
 801176c:	08018d60 	.word	0x08018d60

08011770 <rcl_wait_set_is_valid>:
 8011770:	b118      	cbz	r0, 801177a <rcl_wait_set_is_valid+0xa>
 8011772:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8011774:	3800      	subs	r0, #0
 8011776:	bf18      	it	ne
 8011778:	2001      	movne	r0, #1
 801177a:	4770      	bx	lr

0801177c <rcl_wait_set_fini>:
 801177c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011780:	b082      	sub	sp, #8
 8011782:	2800      	cmp	r0, #0
 8011784:	f000 8095 	beq.w	80118b2 <rcl_wait_set_fini+0x136>
 8011788:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801178a:	4604      	mov	r4, r0
 801178c:	2e00      	cmp	r6, #0
 801178e:	f000 808c 	beq.w	80118aa <rcl_wait_set_fini+0x12e>
 8011792:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8011794:	f003 f9b6 	bl	8014b04 <rmw_destroy_wait_set>
 8011798:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801179a:	1e06      	subs	r6, r0, #0
 801179c:	bf18      	it	ne
 801179e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80117a2:	2d00      	cmp	r5, #0
 80117a4:	f000 8081 	beq.w	80118aa <rcl_wait_set_fini+0x12e>
 80117a8:	6820      	ldr	r0, [r4, #0]
 80117aa:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80117ae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80117b0:	2700      	movs	r7, #0
 80117b2:	6067      	str	r7, [r4, #4]
 80117b4:	602f      	str	r7, [r5, #0]
 80117b6:	b120      	cbz	r0, 80117c2 <rcl_wait_set_fini+0x46>
 80117b8:	9101      	str	r1, [sp, #4]
 80117ba:	47c0      	blx	r8
 80117bc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80117be:	9901      	ldr	r1, [sp, #4]
 80117c0:	6027      	str	r7, [r4, #0]
 80117c2:	68a8      	ldr	r0, [r5, #8]
 80117c4:	b120      	cbz	r0, 80117d0 <rcl_wait_set_fini+0x54>
 80117c6:	47c0      	blx	r8
 80117c8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80117ca:	2300      	movs	r3, #0
 80117cc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80117d0:	68a0      	ldr	r0, [r4, #8]
 80117d2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80117d4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80117d6:	f04f 0800 	mov.w	r8, #0
 80117da:	f8c4 800c 	str.w	r8, [r4, #12]
 80117de:	f8c5 800c 	str.w	r8, [r5, #12]
 80117e2:	b128      	cbz	r0, 80117f0 <rcl_wait_set_fini+0x74>
 80117e4:	47b8      	blx	r7
 80117e6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80117e8:	f8c4 8008 	str.w	r8, [r4, #8]
 80117ec:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80117ee:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80117f0:	6968      	ldr	r0, [r5, #20]
 80117f2:	f04f 0800 	mov.w	r8, #0
 80117f6:	f8c5 8010 	str.w	r8, [r5, #16]
 80117fa:	b128      	cbz	r0, 8011808 <rcl_wait_set_fini+0x8c>
 80117fc:	47b8      	blx	r7
 80117fe:	f8c5 8014 	str.w	r8, [r5, #20]
 8011802:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011804:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011806:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011808:	6920      	ldr	r0, [r4, #16]
 801180a:	f04f 0800 	mov.w	r8, #0
 801180e:	f8c4 8014 	str.w	r8, [r4, #20]
 8011812:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8011816:	b128      	cbz	r0, 8011824 <rcl_wait_set_fini+0xa8>
 8011818:	47b8      	blx	r7
 801181a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801181c:	f8c4 8010 	str.w	r8, [r4, #16]
 8011820:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011822:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011824:	69a0      	ldr	r0, [r4, #24]
 8011826:	f04f 0800 	mov.w	r8, #0
 801182a:	f8c4 801c 	str.w	r8, [r4, #28]
 801182e:	f8c5 8018 	str.w	r8, [r5, #24]
 8011832:	b128      	cbz	r0, 8011840 <rcl_wait_set_fini+0xc4>
 8011834:	9101      	str	r1, [sp, #4]
 8011836:	47b8      	blx	r7
 8011838:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801183a:	9901      	ldr	r1, [sp, #4]
 801183c:	f8c4 8018 	str.w	r8, [r4, #24]
 8011840:	6a28      	ldr	r0, [r5, #32]
 8011842:	b120      	cbz	r0, 801184e <rcl_wait_set_fini+0xd2>
 8011844:	47b8      	blx	r7
 8011846:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011848:	2300      	movs	r3, #0
 801184a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801184e:	6a20      	ldr	r0, [r4, #32]
 8011850:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011854:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011856:	2700      	movs	r7, #0
 8011858:	6267      	str	r7, [r4, #36]	@ 0x24
 801185a:	626f      	str	r7, [r5, #36]	@ 0x24
 801185c:	b120      	cbz	r0, 8011868 <rcl_wait_set_fini+0xec>
 801185e:	9101      	str	r1, [sp, #4]
 8011860:	47c0      	blx	r8
 8011862:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011864:	9901      	ldr	r1, [sp, #4]
 8011866:	6227      	str	r7, [r4, #32]
 8011868:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801186a:	b120      	cbz	r0, 8011876 <rcl_wait_set_fini+0xfa>
 801186c:	47c0      	blx	r8
 801186e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011870:	2300      	movs	r3, #0
 8011872:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8011876:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011878:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801187c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801187e:	2700      	movs	r7, #0
 8011880:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8011882:	632f      	str	r7, [r5, #48]	@ 0x30
 8011884:	b120      	cbz	r0, 8011890 <rcl_wait_set_fini+0x114>
 8011886:	9101      	str	r1, [sp, #4]
 8011888:	47c0      	blx	r8
 801188a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801188c:	9901      	ldr	r1, [sp, #4]
 801188e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8011890:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8011892:	b120      	cbz	r0, 801189e <rcl_wait_set_fini+0x122>
 8011894:	47c0      	blx	r8
 8011896:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011898:	2300      	movs	r3, #0
 801189a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801189e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80118a0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80118a2:	4628      	mov	r0, r5
 80118a4:	4798      	blx	r3
 80118a6:	2300      	movs	r3, #0
 80118a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80118aa:	4630      	mov	r0, r6
 80118ac:	b002      	add	sp, #8
 80118ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118b2:	260b      	movs	r6, #11
 80118b4:	4630      	mov	r0, r6
 80118b6:	b002      	add	sp, #8
 80118b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080118bc <rcl_wait_set_add_subscription>:
 80118bc:	b318      	cbz	r0, 8011906 <rcl_wait_set_add_subscription+0x4a>
 80118be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80118c0:	b570      	push	{r4, r5, r6, lr}
 80118c2:	4604      	mov	r4, r0
 80118c4:	b30b      	cbz	r3, 801190a <rcl_wait_set_add_subscription+0x4e>
 80118c6:	b319      	cbz	r1, 8011910 <rcl_wait_set_add_subscription+0x54>
 80118c8:	681d      	ldr	r5, [r3, #0]
 80118ca:	6840      	ldr	r0, [r0, #4]
 80118cc:	4285      	cmp	r5, r0
 80118ce:	d217      	bcs.n	8011900 <rcl_wait_set_add_subscription+0x44>
 80118d0:	6820      	ldr	r0, [r4, #0]
 80118d2:	1c6e      	adds	r6, r5, #1
 80118d4:	601e      	str	r6, [r3, #0]
 80118d6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80118da:	b102      	cbz	r2, 80118de <rcl_wait_set_add_subscription+0x22>
 80118dc:	6015      	str	r5, [r2, #0]
 80118de:	4608      	mov	r0, r1
 80118e0:	f7ff fd14 	bl	801130c <rcl_subscription_get_rmw_handle>
 80118e4:	b150      	cbz	r0, 80118fc <rcl_wait_set_add_subscription+0x40>
 80118e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118e8:	6842      	ldr	r2, [r0, #4]
 80118ea:	689b      	ldr	r3, [r3, #8]
 80118ec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80118f0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80118f2:	6853      	ldr	r3, [r2, #4]
 80118f4:	3301      	adds	r3, #1
 80118f6:	2000      	movs	r0, #0
 80118f8:	6053      	str	r3, [r2, #4]
 80118fa:	bd70      	pop	{r4, r5, r6, pc}
 80118fc:	2001      	movs	r0, #1
 80118fe:	bd70      	pop	{r4, r5, r6, pc}
 8011900:	f240 3086 	movw	r0, #902	@ 0x386
 8011904:	bd70      	pop	{r4, r5, r6, pc}
 8011906:	200b      	movs	r0, #11
 8011908:	4770      	bx	lr
 801190a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801190e:	bd70      	pop	{r4, r5, r6, pc}
 8011910:	200b      	movs	r0, #11
 8011912:	bd70      	pop	{r4, r5, r6, pc}

08011914 <rcl_wait_set_clear>:
 8011914:	2800      	cmp	r0, #0
 8011916:	d073      	beq.n	8011a00 <rcl_wait_set_clear+0xec>
 8011918:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801191a:	b510      	push	{r4, lr}
 801191c:	4604      	mov	r4, r0
 801191e:	2b00      	cmp	r3, #0
 8011920:	d070      	beq.n	8011a04 <rcl_wait_set_clear+0xf0>
 8011922:	6800      	ldr	r0, [r0, #0]
 8011924:	b138      	cbz	r0, 8011936 <rcl_wait_set_clear+0x22>
 8011926:	6862      	ldr	r2, [r4, #4]
 8011928:	2100      	movs	r1, #0
 801192a:	0092      	lsls	r2, r2, #2
 801192c:	f005 fed8 	bl	80176e0 <memset>
 8011930:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011932:	2200      	movs	r2, #0
 8011934:	601a      	str	r2, [r3, #0]
 8011936:	68a0      	ldr	r0, [r4, #8]
 8011938:	b138      	cbz	r0, 801194a <rcl_wait_set_clear+0x36>
 801193a:	68e2      	ldr	r2, [r4, #12]
 801193c:	2100      	movs	r1, #0
 801193e:	0092      	lsls	r2, r2, #2
 8011940:	f005 fece 	bl	80176e0 <memset>
 8011944:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011946:	2200      	movs	r2, #0
 8011948:	60da      	str	r2, [r3, #12]
 801194a:	69a0      	ldr	r0, [r4, #24]
 801194c:	b138      	cbz	r0, 801195e <rcl_wait_set_clear+0x4a>
 801194e:	69e2      	ldr	r2, [r4, #28]
 8011950:	2100      	movs	r1, #0
 8011952:	0092      	lsls	r2, r2, #2
 8011954:	f005 fec4 	bl	80176e0 <memset>
 8011958:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801195a:	2200      	movs	r2, #0
 801195c:	619a      	str	r2, [r3, #24]
 801195e:	6a20      	ldr	r0, [r4, #32]
 8011960:	b138      	cbz	r0, 8011972 <rcl_wait_set_clear+0x5e>
 8011962:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011964:	2100      	movs	r1, #0
 8011966:	0092      	lsls	r2, r2, #2
 8011968:	f005 feba 	bl	80176e0 <memset>
 801196c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801196e:	2200      	movs	r2, #0
 8011970:	625a      	str	r2, [r3, #36]	@ 0x24
 8011972:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011974:	b138      	cbz	r0, 8011986 <rcl_wait_set_clear+0x72>
 8011976:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011978:	2100      	movs	r1, #0
 801197a:	0092      	lsls	r2, r2, #2
 801197c:	f005 feb0 	bl	80176e0 <memset>
 8011980:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011982:	2200      	movs	r2, #0
 8011984:	631a      	str	r2, [r3, #48]	@ 0x30
 8011986:	6920      	ldr	r0, [r4, #16]
 8011988:	b138      	cbz	r0, 801199a <rcl_wait_set_clear+0x86>
 801198a:	6962      	ldr	r2, [r4, #20]
 801198c:	2100      	movs	r1, #0
 801198e:	0092      	lsls	r2, r2, #2
 8011990:	f005 fea6 	bl	80176e0 <memset>
 8011994:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011996:	2200      	movs	r2, #0
 8011998:	641a      	str	r2, [r3, #64]	@ 0x40
 801199a:	6898      	ldr	r0, [r3, #8]
 801199c:	b138      	cbz	r0, 80119ae <rcl_wait_set_clear+0x9a>
 801199e:	685a      	ldr	r2, [r3, #4]
 80119a0:	2100      	movs	r1, #0
 80119a2:	0092      	lsls	r2, r2, #2
 80119a4:	f005 fe9c 	bl	80176e0 <memset>
 80119a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119aa:	2200      	movs	r2, #0
 80119ac:	605a      	str	r2, [r3, #4]
 80119ae:	6958      	ldr	r0, [r3, #20]
 80119b0:	b138      	cbz	r0, 80119c2 <rcl_wait_set_clear+0xae>
 80119b2:	691a      	ldr	r2, [r3, #16]
 80119b4:	2100      	movs	r1, #0
 80119b6:	0092      	lsls	r2, r2, #2
 80119b8:	f005 fe92 	bl	80176e0 <memset>
 80119bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119be:	2200      	movs	r2, #0
 80119c0:	611a      	str	r2, [r3, #16]
 80119c2:	6a18      	ldr	r0, [r3, #32]
 80119c4:	b138      	cbz	r0, 80119d6 <rcl_wait_set_clear+0xc2>
 80119c6:	69da      	ldr	r2, [r3, #28]
 80119c8:	2100      	movs	r1, #0
 80119ca:	0092      	lsls	r2, r2, #2
 80119cc:	f005 fe88 	bl	80176e0 <memset>
 80119d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119d2:	2200      	movs	r2, #0
 80119d4:	61da      	str	r2, [r3, #28]
 80119d6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80119d8:	b138      	cbz	r0, 80119ea <rcl_wait_set_clear+0xd6>
 80119da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80119dc:	2100      	movs	r1, #0
 80119de:	0092      	lsls	r2, r2, #2
 80119e0:	f005 fe7e 	bl	80176e0 <memset>
 80119e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119e6:	2200      	movs	r2, #0
 80119e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80119ea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80119ec:	b138      	cbz	r0, 80119fe <rcl_wait_set_clear+0xea>
 80119ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80119f0:	2100      	movs	r1, #0
 80119f2:	0092      	lsls	r2, r2, #2
 80119f4:	f005 fe74 	bl	80176e0 <memset>
 80119f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119fa:	2000      	movs	r0, #0
 80119fc:	6358      	str	r0, [r3, #52]	@ 0x34
 80119fe:	bd10      	pop	{r4, pc}
 8011a00:	200b      	movs	r0, #11
 8011a02:	4770      	bx	lr
 8011a04:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011a08:	bd10      	pop	{r4, pc}
 8011a0a:	bf00      	nop

08011a0c <rcl_wait_set_resize>:
 8011a0c:	2800      	cmp	r0, #0
 8011a0e:	f000 8185 	beq.w	8011d1c <rcl_wait_set_resize+0x310>
 8011a12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a16:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8011a18:	b083      	sub	sp, #12
 8011a1a:	4605      	mov	r5, r0
 8011a1c:	2c00      	cmp	r4, #0
 8011a1e:	f000 817f 	beq.w	8011d20 <rcl_wait_set_resize+0x314>
 8011a22:	f04f 0900 	mov.w	r9, #0
 8011a26:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8011a2a:	461f      	mov	r7, r3
 8011a2c:	4688      	mov	r8, r1
 8011a2e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8011a32:	4616      	mov	r6, r2
 8011a34:	f8c0 9004 	str.w	r9, [r0, #4]
 8011a38:	f8c4 9000 	str.w	r9, [r4]
 8011a3c:	2900      	cmp	r1, #0
 8011a3e:	f000 80bd 	beq.w	8011bbc <rcl_wait_set_resize+0x1b0>
 8011a42:	008c      	lsls	r4, r1, #2
 8011a44:	6800      	ldr	r0, [r0, #0]
 8011a46:	9301      	str	r3, [sp, #4]
 8011a48:	4652      	mov	r2, sl
 8011a4a:	4621      	mov	r1, r4
 8011a4c:	4798      	blx	r3
 8011a4e:	9b01      	ldr	r3, [sp, #4]
 8011a50:	6028      	str	r0, [r5, #0]
 8011a52:	2800      	cmp	r0, #0
 8011a54:	f000 80cb 	beq.w	8011bee <rcl_wait_set_resize+0x1e2>
 8011a58:	4622      	mov	r2, r4
 8011a5a:	4649      	mov	r1, r9
 8011a5c:	9301      	str	r3, [sp, #4]
 8011a5e:	f005 fe3f 	bl	80176e0 <memset>
 8011a62:	f8c5 8004 	str.w	r8, [r5, #4]
 8011a66:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8011a6a:	9b01      	ldr	r3, [sp, #4]
 8011a6c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8011a70:	f8c8 9004 	str.w	r9, [r8, #4]
 8011a74:	4652      	mov	r2, sl
 8011a76:	4621      	mov	r1, r4
 8011a78:	4798      	blx	r3
 8011a7a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011a7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a80:	689b      	ldr	r3, [r3, #8]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	f000 80ac 	beq.w	8011be0 <rcl_wait_set_resize+0x1d4>
 8011a88:	4622      	mov	r2, r4
 8011a8a:	4649      	mov	r1, r9
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f005 fe27 	bl	80176e0 <memset>
 8011a92:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011a94:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011a98:	f04f 0800 	mov.w	r8, #0
 8011a9c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8011aa0:	f8c5 800c 	str.w	r8, [r5, #12]
 8011aa4:	f8c4 800c 	str.w	r8, [r4, #12]
 8011aa8:	2e00      	cmp	r6, #0
 8011aaa:	f040 80a4 	bne.w	8011bf6 <rcl_wait_set_resize+0x1ea>
 8011aae:	68a8      	ldr	r0, [r5, #8]
 8011ab0:	b128      	cbz	r0, 8011abe <rcl_wait_set_resize+0xb2>
 8011ab2:	4649      	mov	r1, r9
 8011ab4:	4790      	blx	r2
 8011ab6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011ab8:	60ae      	str	r6, [r5, #8]
 8011aba:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011abe:	f04f 0800 	mov.w	r8, #0
 8011ac2:	19f6      	adds	r6, r6, r7
 8011ac4:	f8c4 8010 	str.w	r8, [r4, #16]
 8011ac8:	f040 80ac 	bne.w	8011c24 <rcl_wait_set_resize+0x218>
 8011acc:	6960      	ldr	r0, [r4, #20]
 8011ace:	b130      	cbz	r0, 8011ade <rcl_wait_set_resize+0xd2>
 8011ad0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8011ad2:	4649      	mov	r1, r9
 8011ad4:	4798      	blx	r3
 8011ad6:	6166      	str	r6, [r4, #20]
 8011ad8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011ada:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011ade:	2600      	movs	r6, #0
 8011ae0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011ae4:	616e      	str	r6, [r5, #20]
 8011ae6:	6426      	str	r6, [r4, #64]	@ 0x40
 8011ae8:	2f00      	cmp	r7, #0
 8011aea:	f040 80ad 	bne.w	8011c48 <rcl_wait_set_resize+0x23c>
 8011aee:	6928      	ldr	r0, [r5, #16]
 8011af0:	b138      	cbz	r0, 8011b02 <rcl_wait_set_resize+0xf6>
 8011af2:	4649      	mov	r1, r9
 8011af4:	47d0      	blx	sl
 8011af6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011af8:	612f      	str	r7, [r5, #16]
 8011afa:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011afe:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011b02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b04:	2600      	movs	r6, #0
 8011b06:	61ee      	str	r6, [r5, #28]
 8011b08:	61a6      	str	r6, [r4, #24]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	f040 80af 	bne.w	8011c6e <rcl_wait_set_resize+0x262>
 8011b10:	69a8      	ldr	r0, [r5, #24]
 8011b12:	b120      	cbz	r0, 8011b1e <rcl_wait_set_resize+0x112>
 8011b14:	4649      	mov	r1, r9
 8011b16:	47d0      	blx	sl
 8011b18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b1a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011b1c:	61ab      	str	r3, [r5, #24]
 8011b1e:	6a20      	ldr	r0, [r4, #32]
 8011b20:	b128      	cbz	r0, 8011b2e <rcl_wait_set_resize+0x122>
 8011b22:	4649      	mov	r1, r9
 8011b24:	47d0      	blx	sl
 8011b26:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011b28:	2300      	movs	r3, #0
 8011b2a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011b2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011b30:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011b32:	2600      	movs	r6, #0
 8011b34:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8011b38:	626e      	str	r6, [r5, #36]	@ 0x24
 8011b3a:	6266      	str	r6, [r4, #36]	@ 0x24
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	f000 80b6 	beq.w	8011cae <rcl_wait_set_resize+0x2a2>
 8011b42:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8011b46:	6a28      	ldr	r0, [r5, #32]
 8011b48:	463a      	mov	r2, r7
 8011b4a:	4651      	mov	r1, sl
 8011b4c:	47c8      	blx	r9
 8011b4e:	6228      	str	r0, [r5, #32]
 8011b50:	2800      	cmp	r0, #0
 8011b52:	d04c      	beq.n	8011bee <rcl_wait_set_resize+0x1e2>
 8011b54:	4652      	mov	r2, sl
 8011b56:	4631      	mov	r1, r6
 8011b58:	f005 fdc2 	bl	80176e0 <memset>
 8011b5c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011b5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011b60:	626b      	str	r3, [r5, #36]	@ 0x24
 8011b62:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011b64:	62a6      	str	r6, [r4, #40]	@ 0x28
 8011b66:	463a      	mov	r2, r7
 8011b68:	4651      	mov	r1, sl
 8011b6a:	47c8      	blx	r9
 8011b6c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011b6e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8011b70:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8011b72:	2c00      	cmp	r4, #0
 8011b74:	f000 80f0 	beq.w	8011d58 <rcl_wait_set_resize+0x34c>
 8011b78:	4620      	mov	r0, r4
 8011b7a:	4652      	mov	r2, sl
 8011b7c:	4631      	mov	r1, r6
 8011b7e:	f005 fdaf 	bl	80176e0 <memset>
 8011b82:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011b84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b86:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011b88:	2600      	movs	r6, #0
 8011b8a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8011b8e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8011b90:	6326      	str	r6, [r4, #48]	@ 0x30
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	f040 809d 	bne.w	8011cd2 <rcl_wait_set_resize+0x2c6>
 8011b98:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011b9a:	b120      	cbz	r0, 8011ba6 <rcl_wait_set_resize+0x19a>
 8011b9c:	4639      	mov	r1, r7
 8011b9e:	47c0      	blx	r8
 8011ba0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ba2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011ba4:	62ab      	str	r3, [r5, #40]	@ 0x28
 8011ba6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8011ba8:	b310      	cbz	r0, 8011bf0 <rcl_wait_set_resize+0x1e4>
 8011baa:	4639      	mov	r1, r7
 8011bac:	47c0      	blx	r8
 8011bae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011bb0:	2000      	movs	r0, #0
 8011bb2:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8011bb6:	b003      	add	sp, #12
 8011bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bbc:	6800      	ldr	r0, [r0, #0]
 8011bbe:	b120      	cbz	r0, 8011bca <rcl_wait_set_resize+0x1be>
 8011bc0:	4651      	mov	r1, sl
 8011bc2:	47d8      	blx	fp
 8011bc4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011bc6:	f8c5 8000 	str.w	r8, [r5]
 8011bca:	68a0      	ldr	r0, [r4, #8]
 8011bcc:	2800      	cmp	r0, #0
 8011bce:	f43f af61 	beq.w	8011a94 <rcl_wait_set_resize+0x88>
 8011bd2:	4651      	mov	r1, sl
 8011bd4:	47d8      	blx	fp
 8011bd6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011bd8:	2300      	movs	r3, #0
 8011bda:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8011bde:	e759      	b.n	8011a94 <rcl_wait_set_resize+0x88>
 8011be0:	6828      	ldr	r0, [r5, #0]
 8011be2:	9301      	str	r3, [sp, #4]
 8011be4:	4651      	mov	r1, sl
 8011be6:	47d8      	blx	fp
 8011be8:	9b01      	ldr	r3, [sp, #4]
 8011bea:	e9c5 3300 	strd	r3, r3, [r5]
 8011bee:	200a      	movs	r0, #10
 8011bf0:	b003      	add	sp, #12
 8011bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bf6:	00b4      	lsls	r4, r6, #2
 8011bf8:	68a8      	ldr	r0, [r5, #8]
 8011bfa:	464a      	mov	r2, r9
 8011bfc:	4621      	mov	r1, r4
 8011bfe:	4798      	blx	r3
 8011c00:	60a8      	str	r0, [r5, #8]
 8011c02:	2800      	cmp	r0, #0
 8011c04:	d0f3      	beq.n	8011bee <rcl_wait_set_resize+0x1e2>
 8011c06:	4622      	mov	r2, r4
 8011c08:	4641      	mov	r1, r8
 8011c0a:	f005 fd69 	bl	80176e0 <memset>
 8011c0e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011c10:	60ee      	str	r6, [r5, #12]
 8011c12:	f04f 0800 	mov.w	r8, #0
 8011c16:	19f6      	adds	r6, r6, r7
 8011c18:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011c1c:	f8c4 8010 	str.w	r8, [r4, #16]
 8011c20:	f43f af54 	beq.w	8011acc <rcl_wait_set_resize+0xc0>
 8011c24:	00b6      	lsls	r6, r6, #2
 8011c26:	464a      	mov	r2, r9
 8011c28:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8011c2a:	6960      	ldr	r0, [r4, #20]
 8011c2c:	4631      	mov	r1, r6
 8011c2e:	4798      	blx	r3
 8011c30:	4681      	mov	r9, r0
 8011c32:	6160      	str	r0, [r4, #20]
 8011c34:	2800      	cmp	r0, #0
 8011c36:	d076      	beq.n	8011d26 <rcl_wait_set_resize+0x31a>
 8011c38:	4632      	mov	r2, r6
 8011c3a:	4641      	mov	r1, r8
 8011c3c:	f005 fd50 	bl	80176e0 <memset>
 8011c40:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011c42:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011c46:	e74a      	b.n	8011ade <rcl_wait_set_resize+0xd2>
 8011c48:	00bc      	lsls	r4, r7, #2
 8011c4a:	6928      	ldr	r0, [r5, #16]
 8011c4c:	464a      	mov	r2, r9
 8011c4e:	4621      	mov	r1, r4
 8011c50:	47c0      	blx	r8
 8011c52:	6128      	str	r0, [r5, #16]
 8011c54:	2800      	cmp	r0, #0
 8011c56:	d0ca      	beq.n	8011bee <rcl_wait_set_resize+0x1e2>
 8011c58:	4622      	mov	r2, r4
 8011c5a:	4631      	mov	r1, r6
 8011c5c:	f005 fd40 	bl	80176e0 <memset>
 8011c60:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011c62:	616f      	str	r7, [r5, #20]
 8011c64:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011c68:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011c6c:	e749      	b.n	8011b02 <rcl_wait_set_resize+0xf6>
 8011c6e:	009c      	lsls	r4, r3, #2
 8011c70:	69a8      	ldr	r0, [r5, #24]
 8011c72:	464a      	mov	r2, r9
 8011c74:	4621      	mov	r1, r4
 8011c76:	47c0      	blx	r8
 8011c78:	61a8      	str	r0, [r5, #24]
 8011c7a:	2800      	cmp	r0, #0
 8011c7c:	d0b7      	beq.n	8011bee <rcl_wait_set_resize+0x1e2>
 8011c7e:	4622      	mov	r2, r4
 8011c80:	4631      	mov	r1, r6
 8011c82:	f005 fd2d 	bl	80176e0 <memset>
 8011c86:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8011c88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c8a:	61eb      	str	r3, [r5, #28]
 8011c8c:	6a38      	ldr	r0, [r7, #32]
 8011c8e:	61fe      	str	r6, [r7, #28]
 8011c90:	464a      	mov	r2, r9
 8011c92:	4621      	mov	r1, r4
 8011c94:	47c0      	blx	r8
 8011c96:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011c98:	6238      	str	r0, [r7, #32]
 8011c9a:	6a1f      	ldr	r7, [r3, #32]
 8011c9c:	2f00      	cmp	r7, #0
 8011c9e:	d054      	beq.n	8011d4a <rcl_wait_set_resize+0x33e>
 8011ca0:	4622      	mov	r2, r4
 8011ca2:	4631      	mov	r1, r6
 8011ca4:	4638      	mov	r0, r7
 8011ca6:	f005 fd1b 	bl	80176e0 <memset>
 8011caa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011cac:	e73f      	b.n	8011b2e <rcl_wait_set_resize+0x122>
 8011cae:	6a28      	ldr	r0, [r5, #32]
 8011cb0:	b120      	cbz	r0, 8011cbc <rcl_wait_set_resize+0x2b0>
 8011cb2:	4639      	mov	r1, r7
 8011cb4:	47c0      	blx	r8
 8011cb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011cb8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011cba:	622b      	str	r3, [r5, #32]
 8011cbc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011cbe:	2800      	cmp	r0, #0
 8011cc0:	f43f af60 	beq.w	8011b84 <rcl_wait_set_resize+0x178>
 8011cc4:	4639      	mov	r1, r7
 8011cc6:	47c0      	blx	r8
 8011cc8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011cca:	2300      	movs	r3, #0
 8011ccc:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8011cd0:	e758      	b.n	8011b84 <rcl_wait_set_resize+0x178>
 8011cd2:	009c      	lsls	r4, r3, #2
 8011cd4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011cd6:	463a      	mov	r2, r7
 8011cd8:	4621      	mov	r1, r4
 8011cda:	47c8      	blx	r9
 8011cdc:	62a8      	str	r0, [r5, #40]	@ 0x28
 8011cde:	2800      	cmp	r0, #0
 8011ce0:	d085      	beq.n	8011bee <rcl_wait_set_resize+0x1e2>
 8011ce2:	4622      	mov	r2, r4
 8011ce4:	4631      	mov	r1, r6
 8011ce6:	f005 fcfb 	bl	80176e0 <memset>
 8011cea:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8011cee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011cf0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8011cf2:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8011cf6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8011cfa:	463a      	mov	r2, r7
 8011cfc:	4621      	mov	r1, r4
 8011cfe:	47c8      	blx	r9
 8011d00:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011d02:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8011d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d08:	b36b      	cbz	r3, 8011d66 <rcl_wait_set_resize+0x35a>
 8011d0a:	4622      	mov	r2, r4
 8011d0c:	4631      	mov	r1, r6
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f005 fce6 	bl	80176e0 <memset>
 8011d14:	4630      	mov	r0, r6
 8011d16:	b003      	add	sp, #12
 8011d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d1c:	200b      	movs	r0, #11
 8011d1e:	4770      	bx	lr
 8011d20:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011d24:	e764      	b.n	8011bf0 <rcl_wait_set_resize+0x1e4>
 8011d26:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011d28:	68a8      	ldr	r0, [r5, #8]
 8011d2a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011d2e:	4798      	blx	r3
 8011d30:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011d32:	6928      	ldr	r0, [r5, #16]
 8011d34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011d36:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011d38:	f8c5 900c 	str.w	r9, [r5, #12]
 8011d3c:	f8c5 9008 	str.w	r9, [r5, #8]
 8011d40:	4790      	blx	r2
 8011d42:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8011d46:	200a      	movs	r0, #10
 8011d48:	e752      	b.n	8011bf0 <rcl_wait_set_resize+0x1e4>
 8011d4a:	69a8      	ldr	r0, [r5, #24]
 8011d4c:	4649      	mov	r1, r9
 8011d4e:	47d0      	blx	sl
 8011d50:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8011d54:	200a      	movs	r0, #10
 8011d56:	e74b      	b.n	8011bf0 <rcl_wait_set_resize+0x1e4>
 8011d58:	6a28      	ldr	r0, [r5, #32]
 8011d5a:	4639      	mov	r1, r7
 8011d5c:	47c0      	blx	r8
 8011d5e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8011d62:	200a      	movs	r0, #10
 8011d64:	e744      	b.n	8011bf0 <rcl_wait_set_resize+0x1e4>
 8011d66:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011d68:	9301      	str	r3, [sp, #4]
 8011d6a:	4639      	mov	r1, r7
 8011d6c:	47c0      	blx	r8
 8011d6e:	9b01      	ldr	r3, [sp, #4]
 8011d70:	200a      	movs	r0, #10
 8011d72:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8011d76:	e73b      	b.n	8011bf0 <rcl_wait_set_resize+0x1e4>

08011d78 <rcl_wait_set_init>:
 8011d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d7c:	b084      	sub	sp, #16
 8011d7e:	4604      	mov	r4, r0
 8011d80:	a810      	add	r0, sp, #64	@ 0x40
 8011d82:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8011d86:	460f      	mov	r7, r1
 8011d88:	4690      	mov	r8, r2
 8011d8a:	4699      	mov	r9, r3
 8011d8c:	f7fa fda4 	bl	800c8d8 <rcutils_allocator_is_valid>
 8011d90:	2800      	cmp	r0, #0
 8011d92:	d06b      	beq.n	8011e6c <rcl_wait_set_init+0xf4>
 8011d94:	2c00      	cmp	r4, #0
 8011d96:	d069      	beq.n	8011e6c <rcl_wait_set_init+0xf4>
 8011d98:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011d9a:	b125      	cbz	r5, 8011da6 <rcl_wait_set_init+0x2e>
 8011d9c:	2564      	movs	r5, #100	@ 0x64
 8011d9e:	4628      	mov	r0, r5
 8011da0:	b004      	add	sp, #16
 8011da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011da6:	f1ba 0f00 	cmp.w	sl, #0
 8011daa:	d05f      	beq.n	8011e6c <rcl_wait_set_init+0xf4>
 8011dac:	4650      	mov	r0, sl
 8011dae:	f7fe fb3f 	bl	8010430 <rcl_context_is_valid>
 8011db2:	2800      	cmp	r0, #0
 8011db4:	d067      	beq.n	8011e86 <rcl_wait_set_init+0x10e>
 8011db6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011db8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8011dba:	205c      	movs	r0, #92	@ 0x5c
 8011dbc:	4798      	blx	r3
 8011dbe:	6320      	str	r0, [r4, #48]	@ 0x30
 8011dc0:	2800      	cmp	r0, #0
 8011dc2:	d062      	beq.n	8011e8a <rcl_wait_set_init+0x112>
 8011dc4:	4629      	mov	r1, r5
 8011dc6:	225c      	movs	r2, #92	@ 0x5c
 8011dc8:	f005 fc8a 	bl	80176e0 <memset>
 8011dcc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8011dd0:	eb03 0e02 	add.w	lr, r3, r2
 8011dd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011dd6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8011dd8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011ddc:	449e      	add	lr, r3
 8011dde:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011de2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8011de6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8011dea:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8011dee:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8011df2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8011df6:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8011dfa:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8011dfe:	f8da a000 	ldr.w	sl, [sl]
 8011e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011e04:	44c6      	add	lr, r8
 8011e06:	f8dc 3000 	ldr.w	r3, [ip]
 8011e0a:	602b      	str	r3, [r5, #0]
 8011e0c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8011e10:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8011e14:	f002 fe6c 	bl	8014af0 <rmw_create_wait_set>
 8011e18:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e1a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8011e1c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011e1e:	b350      	cbz	r0, 8011e76 <rcl_wait_set_init+0xfe>
 8011e20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e22:	9302      	str	r3, [sp, #8]
 8011e24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e26:	9301      	str	r3, [sp, #4]
 8011e28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e2a:	9300      	str	r3, [sp, #0]
 8011e2c:	4642      	mov	r2, r8
 8011e2e:	464b      	mov	r3, r9
 8011e30:	4639      	mov	r1, r7
 8011e32:	4620      	mov	r0, r4
 8011e34:	f7ff fdea 	bl	8011a0c <rcl_wait_set_resize>
 8011e38:	4605      	mov	r5, r0
 8011e3a:	2800      	cmp	r0, #0
 8011e3c:	d0af      	beq.n	8011d9e <rcl_wait_set_init+0x26>
 8011e3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e40:	bb2b      	cbnz	r3, 8011e8e <rcl_wait_set_init+0x116>
 8011e42:	2600      	movs	r6, #0
 8011e44:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8011e48:	9600      	str	r6, [sp, #0]
 8011e4a:	4633      	mov	r3, r6
 8011e4c:	4632      	mov	r2, r6
 8011e4e:	4631      	mov	r1, r6
 8011e50:	4620      	mov	r0, r4
 8011e52:	f7ff fddb 	bl	8011a0c <rcl_wait_set_resize>
 8011e56:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	d0a0      	beq.n	8011d9e <rcl_wait_set_init+0x26>
 8011e5c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8011e5e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8011e60:	4798      	blx	r3
 8011e62:	4628      	mov	r0, r5
 8011e64:	6326      	str	r6, [r4, #48]	@ 0x30
 8011e66:	b004      	add	sp, #16
 8011e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e6c:	250b      	movs	r5, #11
 8011e6e:	4628      	mov	r0, r5
 8011e70:	b004      	add	sp, #16
 8011e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e76:	2501      	movs	r5, #1
 8011e78:	f002 fe44 	bl	8014b04 <rmw_destroy_wait_set>
 8011e7c:	2800      	cmp	r0, #0
 8011e7e:	bf18      	it	ne
 8011e80:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8011e84:	e7dd      	b.n	8011e42 <rcl_wait_set_init+0xca>
 8011e86:	2565      	movs	r5, #101	@ 0x65
 8011e88:	e789      	b.n	8011d9e <rcl_wait_set_init+0x26>
 8011e8a:	250a      	movs	r5, #10
 8011e8c:	e787      	b.n	8011d9e <rcl_wait_set_init+0x26>
 8011e8e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011e90:	e7f2      	b.n	8011e78 <rcl_wait_set_init+0x100>
 8011e92:	bf00      	nop

08011e94 <rcl_wait_set_add_guard_condition>:
 8011e94:	b318      	cbz	r0, 8011ede <rcl_wait_set_add_guard_condition+0x4a>
 8011e96:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011e98:	b570      	push	{r4, r5, r6, lr}
 8011e9a:	4604      	mov	r4, r0
 8011e9c:	b30b      	cbz	r3, 8011ee2 <rcl_wait_set_add_guard_condition+0x4e>
 8011e9e:	b319      	cbz	r1, 8011ee8 <rcl_wait_set_add_guard_condition+0x54>
 8011ea0:	68dd      	ldr	r5, [r3, #12]
 8011ea2:	68c0      	ldr	r0, [r0, #12]
 8011ea4:	4285      	cmp	r5, r0
 8011ea6:	d217      	bcs.n	8011ed8 <rcl_wait_set_add_guard_condition+0x44>
 8011ea8:	68a0      	ldr	r0, [r4, #8]
 8011eaa:	1c6e      	adds	r6, r5, #1
 8011eac:	60de      	str	r6, [r3, #12]
 8011eae:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011eb2:	b102      	cbz	r2, 8011eb6 <rcl_wait_set_add_guard_condition+0x22>
 8011eb4:	6015      	str	r5, [r2, #0]
 8011eb6:	4608      	mov	r0, r1
 8011eb8:	f004 fe18 	bl	8016aec <rcl_guard_condition_get_rmw_handle>
 8011ebc:	b150      	cbz	r0, 8011ed4 <rcl_wait_set_add_guard_condition+0x40>
 8011ebe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011ec0:	6842      	ldr	r2, [r0, #4]
 8011ec2:	695b      	ldr	r3, [r3, #20]
 8011ec4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ec8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011eca:	6913      	ldr	r3, [r2, #16]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	2000      	movs	r0, #0
 8011ed0:	6113      	str	r3, [r2, #16]
 8011ed2:	bd70      	pop	{r4, r5, r6, pc}
 8011ed4:	2001      	movs	r0, #1
 8011ed6:	bd70      	pop	{r4, r5, r6, pc}
 8011ed8:	f240 3086 	movw	r0, #902	@ 0x386
 8011edc:	bd70      	pop	{r4, r5, r6, pc}
 8011ede:	200b      	movs	r0, #11
 8011ee0:	4770      	bx	lr
 8011ee2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011ee6:	bd70      	pop	{r4, r5, r6, pc}
 8011ee8:	200b      	movs	r0, #11
 8011eea:	bd70      	pop	{r4, r5, r6, pc}

08011eec <rcl_wait_set_add_timer>:
 8011eec:	b328      	cbz	r0, 8011f3a <rcl_wait_set_add_timer+0x4e>
 8011eee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011ef0:	b570      	push	{r4, r5, r6, lr}
 8011ef2:	4604      	mov	r4, r0
 8011ef4:	b31b      	cbz	r3, 8011f3e <rcl_wait_set_add_timer+0x52>
 8011ef6:	b329      	cbz	r1, 8011f44 <rcl_wait_set_add_timer+0x58>
 8011ef8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8011efa:	6965      	ldr	r5, [r4, #20]
 8011efc:	42a8      	cmp	r0, r5
 8011efe:	d219      	bcs.n	8011f34 <rcl_wait_set_add_timer+0x48>
 8011f00:	6925      	ldr	r5, [r4, #16]
 8011f02:	1c46      	adds	r6, r0, #1
 8011f04:	641e      	str	r6, [r3, #64]	@ 0x40
 8011f06:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8011f0a:	b102      	cbz	r2, 8011f0e <rcl_wait_set_add_timer+0x22>
 8011f0c:	6010      	str	r0, [r2, #0]
 8011f0e:	4608      	mov	r0, r1
 8011f10:	f7ff fba6 	bl	8011660 <rcl_timer_get_guard_condition>
 8011f14:	b168      	cbz	r0, 8011f32 <rcl_wait_set_add_timer+0x46>
 8011f16:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011f18:	68e3      	ldr	r3, [r4, #12]
 8011f1a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8011f1c:	3b01      	subs	r3, #1
 8011f1e:	441d      	add	r5, r3
 8011f20:	f004 fde4 	bl	8016aec <rcl_guard_condition_get_rmw_handle>
 8011f24:	b180      	cbz	r0, 8011f48 <rcl_wait_set_add_timer+0x5c>
 8011f26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011f28:	6842      	ldr	r2, [r0, #4]
 8011f2a:	695b      	ldr	r3, [r3, #20]
 8011f2c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f30:	2000      	movs	r0, #0
 8011f32:	bd70      	pop	{r4, r5, r6, pc}
 8011f34:	f240 3086 	movw	r0, #902	@ 0x386
 8011f38:	bd70      	pop	{r4, r5, r6, pc}
 8011f3a:	200b      	movs	r0, #11
 8011f3c:	4770      	bx	lr
 8011f3e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011f42:	bd70      	pop	{r4, r5, r6, pc}
 8011f44:	200b      	movs	r0, #11
 8011f46:	bd70      	pop	{r4, r5, r6, pc}
 8011f48:	2001      	movs	r0, #1
 8011f4a:	bd70      	pop	{r4, r5, r6, pc}

08011f4c <rcl_wait_set_add_client>:
 8011f4c:	b318      	cbz	r0, 8011f96 <rcl_wait_set_add_client+0x4a>
 8011f4e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011f50:	b570      	push	{r4, r5, r6, lr}
 8011f52:	4604      	mov	r4, r0
 8011f54:	b30b      	cbz	r3, 8011f9a <rcl_wait_set_add_client+0x4e>
 8011f56:	b319      	cbz	r1, 8011fa0 <rcl_wait_set_add_client+0x54>
 8011f58:	699d      	ldr	r5, [r3, #24]
 8011f5a:	69c0      	ldr	r0, [r0, #28]
 8011f5c:	4285      	cmp	r5, r0
 8011f5e:	d217      	bcs.n	8011f90 <rcl_wait_set_add_client+0x44>
 8011f60:	69a0      	ldr	r0, [r4, #24]
 8011f62:	1c6e      	adds	r6, r5, #1
 8011f64:	619e      	str	r6, [r3, #24]
 8011f66:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011f6a:	b102      	cbz	r2, 8011f6e <rcl_wait_set_add_client+0x22>
 8011f6c:	6015      	str	r5, [r2, #0]
 8011f6e:	4608      	mov	r0, r1
 8011f70:	f7fe f9b2 	bl	80102d8 <rcl_client_get_rmw_handle>
 8011f74:	b150      	cbz	r0, 8011f8c <rcl_wait_set_add_client+0x40>
 8011f76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011f78:	6842      	ldr	r2, [r0, #4]
 8011f7a:	6a1b      	ldr	r3, [r3, #32]
 8011f7c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f80:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011f82:	69d3      	ldr	r3, [r2, #28]
 8011f84:	3301      	adds	r3, #1
 8011f86:	2000      	movs	r0, #0
 8011f88:	61d3      	str	r3, [r2, #28]
 8011f8a:	bd70      	pop	{r4, r5, r6, pc}
 8011f8c:	2001      	movs	r0, #1
 8011f8e:	bd70      	pop	{r4, r5, r6, pc}
 8011f90:	f240 3086 	movw	r0, #902	@ 0x386
 8011f94:	bd70      	pop	{r4, r5, r6, pc}
 8011f96:	200b      	movs	r0, #11
 8011f98:	4770      	bx	lr
 8011f9a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011f9e:	bd70      	pop	{r4, r5, r6, pc}
 8011fa0:	200b      	movs	r0, #11
 8011fa2:	bd70      	pop	{r4, r5, r6, pc}

08011fa4 <rcl_wait_set_add_service>:
 8011fa4:	b318      	cbz	r0, 8011fee <rcl_wait_set_add_service+0x4a>
 8011fa6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011fa8:	b570      	push	{r4, r5, r6, lr}
 8011faa:	4604      	mov	r4, r0
 8011fac:	b30b      	cbz	r3, 8011ff2 <rcl_wait_set_add_service+0x4e>
 8011fae:	b319      	cbz	r1, 8011ff8 <rcl_wait_set_add_service+0x54>
 8011fb0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8011fb2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8011fb4:	4285      	cmp	r5, r0
 8011fb6:	d217      	bcs.n	8011fe8 <rcl_wait_set_add_service+0x44>
 8011fb8:	6a20      	ldr	r0, [r4, #32]
 8011fba:	1c6e      	adds	r6, r5, #1
 8011fbc:	625e      	str	r6, [r3, #36]	@ 0x24
 8011fbe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011fc2:	b102      	cbz	r2, 8011fc6 <rcl_wait_set_add_service+0x22>
 8011fc4:	6015      	str	r5, [r2, #0]
 8011fc6:	4608      	mov	r0, r1
 8011fc8:	f7ff f804 	bl	8010fd4 <rcl_service_get_rmw_handle>
 8011fcc:	b150      	cbz	r0, 8011fe4 <rcl_wait_set_add_service+0x40>
 8011fce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011fd0:	6842      	ldr	r2, [r0, #4]
 8011fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fd4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011fd8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011fda:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8011fdc:	3301      	adds	r3, #1
 8011fde:	2000      	movs	r0, #0
 8011fe0:	6293      	str	r3, [r2, #40]	@ 0x28
 8011fe2:	bd70      	pop	{r4, r5, r6, pc}
 8011fe4:	2001      	movs	r0, #1
 8011fe6:	bd70      	pop	{r4, r5, r6, pc}
 8011fe8:	f240 3086 	movw	r0, #902	@ 0x386
 8011fec:	bd70      	pop	{r4, r5, r6, pc}
 8011fee:	200b      	movs	r0, #11
 8011ff0:	4770      	bx	lr
 8011ff2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011ff6:	bd70      	pop	{r4, r5, r6, pc}
 8011ff8:	200b      	movs	r0, #11
 8011ffa:	bd70      	pop	{r4, r5, r6, pc}
 8011ffc:	0000      	movs	r0, r0
	...

08012000 <rcl_wait>:
 8012000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012004:	ed2d 8b02 	vpush	{d8}
 8012008:	b08d      	sub	sp, #52	@ 0x34
 801200a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801200e:	2800      	cmp	r0, #0
 8012010:	f000 8143 	beq.w	801229a <rcl_wait+0x29a>
 8012014:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8012016:	4605      	mov	r5, r0
 8012018:	2e00      	cmp	r6, #0
 801201a:	f000 8112 	beq.w	8012242 <rcl_wait+0x242>
 801201e:	6843      	ldr	r3, [r0, #4]
 8012020:	b983      	cbnz	r3, 8012044 <rcl_wait+0x44>
 8012022:	68eb      	ldr	r3, [r5, #12]
 8012024:	b973      	cbnz	r3, 8012044 <rcl_wait+0x44>
 8012026:	696b      	ldr	r3, [r5, #20]
 8012028:	b963      	cbnz	r3, 8012044 <rcl_wait+0x44>
 801202a:	69eb      	ldr	r3, [r5, #28]
 801202c:	b953      	cbnz	r3, 8012044 <rcl_wait+0x44>
 801202e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8012030:	b943      	cbnz	r3, 8012044 <rcl_wait+0x44>
 8012032:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8012034:	b933      	cbnz	r3, 8012044 <rcl_wait+0x44>
 8012036:	f240 3085 	movw	r0, #901	@ 0x385
 801203a:	b00d      	add	sp, #52	@ 0x34
 801203c:	ecbd 8b02 	vpop	{d8}
 8012040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012044:	9b04      	ldr	r3, [sp, #16]
 8012046:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8012048:	2b01      	cmp	r3, #1
 801204a:	9b05      	ldr	r3, [sp, #20]
 801204c:	f173 0300 	sbcs.w	r3, r3, #0
 8012050:	f2c0 80f0 	blt.w	8012234 <rcl_wait+0x234>
 8012054:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8012058:	4643      	mov	r3, r8
 801205a:	2a00      	cmp	r2, #0
 801205c:	f000 8133 	beq.w	80122c6 <rcl_wait+0x2c6>
 8012060:	2400      	movs	r4, #0
 8012062:	4613      	mov	r3, r2
 8012064:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80122d8 <rcl_wait+0x2d8>
 8012068:	46a2      	mov	sl, r4
 801206a:	46a3      	mov	fp, r4
 801206c:	f240 3921 	movw	r9, #801	@ 0x321
 8012070:	4632      	mov	r2, r6
 8012072:	e014      	b.n	801209e <rcl_wait+0x9e>
 8012074:	2800      	cmp	r0, #0
 8012076:	d1e0      	bne.n	801203a <rcl_wait+0x3a>
 8012078:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801207c:	4542      	cmp	r2, r8
 801207e:	eb73 0107 	sbcs.w	r1, r3, r7
 8012082:	da03      	bge.n	801208c <rcl_wait+0x8c>
 8012084:	4690      	mov	r8, r2
 8012086:	461f      	mov	r7, r3
 8012088:	f04f 0b01 	mov.w	fp, #1
 801208c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801208e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8012090:	3401      	adds	r4, #1
 8012092:	f14a 0a00 	adc.w	sl, sl, #0
 8012096:	429c      	cmp	r4, r3
 8012098:	f17a 0100 	sbcs.w	r1, sl, #0
 801209c:	d228      	bcs.n	80120f0 <rcl_wait+0xf0>
 801209e:	6928      	ldr	r0, [r5, #16]
 80120a0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80120a4:	a908      	add	r1, sp, #32
 80120a6:	00a6      	lsls	r6, r4, #2
 80120a8:	2800      	cmp	r0, #0
 80120aa:	d0f1      	beq.n	8012090 <rcl_wait+0x90>
 80120ac:	68eb      	ldr	r3, [r5, #12]
 80120ae:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80120b2:	4423      	add	r3, r4
 80120b4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80120b8:	f1be 0f00 	cmp.w	lr, #0
 80120bc:	d006      	beq.n	80120cc <rcl_wait+0xcc>
 80120be:	6913      	ldr	r3, [r2, #16]
 80120c0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80120c4:	3301      	adds	r3, #1
 80120c6:	6113      	str	r3, [r2, #16]
 80120c8:	692b      	ldr	r3, [r5, #16]
 80120ca:	5998      	ldr	r0, [r3, r6]
 80120cc:	ed8d 8b08 	vstr	d8, [sp, #32]
 80120d0:	f7ff fa94 	bl	80115fc <rcl_timer_get_time_until_next_call>
 80120d4:	4548      	cmp	r0, r9
 80120d6:	d1cd      	bne.n	8012074 <rcl_wait+0x74>
 80120d8:	692b      	ldr	r3, [r5, #16]
 80120da:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80120dc:	2100      	movs	r1, #0
 80120de:	5199      	str	r1, [r3, r6]
 80120e0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80120e2:	3401      	adds	r4, #1
 80120e4:	f14a 0a00 	adc.w	sl, sl, #0
 80120e8:	429c      	cmp	r4, r3
 80120ea:	f17a 0100 	sbcs.w	r1, sl, #0
 80120ee:	d3d6      	bcc.n	801209e <rcl_wait+0x9e>
 80120f0:	4616      	mov	r6, r2
 80120f2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80120f6:	4313      	orrs	r3, r2
 80120f8:	46d9      	mov	r9, fp
 80120fa:	f040 80a9 	bne.w	8012250 <rcl_wait+0x250>
 80120fe:	2300      	movs	r3, #0
 8012100:	2200      	movs	r2, #0
 8012102:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012106:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801210a:	ab08      	add	r3, sp, #32
 801210c:	9302      	str	r3, [sp, #8]
 801210e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8012110:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8012114:	e9cd 3200 	strd	r3, r2, [sp]
 8012118:	f106 0110 	add.w	r1, r6, #16
 801211c:	f106 031c 	add.w	r3, r6, #28
 8012120:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8012124:	1d30      	adds	r0, r6, #4
 8012126:	f002 fb6b 	bl	8014800 <rmw_wait>
 801212a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801212c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801212e:	4680      	mov	r8, r0
 8012130:	b1ca      	cbz	r2, 8012166 <rcl_wait+0x166>
 8012132:	2400      	movs	r4, #0
 8012134:	4627      	mov	r7, r4
 8012136:	692a      	ldr	r2, [r5, #16]
 8012138:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801213c:	f10d 011f 	add.w	r1, sp, #31
 8012140:	00a6      	lsls	r6, r4, #2
 8012142:	b160      	cbz	r0, 801215e <rcl_wait+0x15e>
 8012144:	f88d 701f 	strb.w	r7, [sp, #31]
 8012148:	f7ff fa1e 	bl	8011588 <rcl_timer_is_ready>
 801214c:	2800      	cmp	r0, #0
 801214e:	f47f af74 	bne.w	801203a <rcl_wait+0x3a>
 8012152:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012156:	b90b      	cbnz	r3, 801215c <rcl_wait+0x15c>
 8012158:	692a      	ldr	r2, [r5, #16]
 801215a:	5193      	str	r3, [r2, r6]
 801215c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801215e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012160:	3401      	adds	r4, #1
 8012162:	42a2      	cmp	r2, r4
 8012164:	d8e7      	bhi.n	8012136 <rcl_wait+0x136>
 8012166:	f038 0002 	bics.w	r0, r8, #2
 801216a:	f040 8090 	bne.w	801228e <rcl_wait+0x28e>
 801216e:	686e      	ldr	r6, [r5, #4]
 8012170:	4602      	mov	r2, r0
 8012172:	b91e      	cbnz	r6, 801217c <rcl_wait+0x17c>
 8012174:	e00d      	b.n	8012192 <rcl_wait+0x192>
 8012176:	3201      	adds	r2, #1
 8012178:	42b2      	cmp	r2, r6
 801217a:	d00a      	beq.n	8012192 <rcl_wait+0x192>
 801217c:	6899      	ldr	r1, [r3, #8]
 801217e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012182:	2900      	cmp	r1, #0
 8012184:	d1f7      	bne.n	8012176 <rcl_wait+0x176>
 8012186:	682c      	ldr	r4, [r5, #0]
 8012188:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801218c:	3201      	adds	r2, #1
 801218e:	42b2      	cmp	r2, r6
 8012190:	d1f4      	bne.n	801217c <rcl_wait+0x17c>
 8012192:	68ee      	ldr	r6, [r5, #12]
 8012194:	2200      	movs	r2, #0
 8012196:	b91e      	cbnz	r6, 80121a0 <rcl_wait+0x1a0>
 8012198:	e00d      	b.n	80121b6 <rcl_wait+0x1b6>
 801219a:	3201      	adds	r2, #1
 801219c:	42b2      	cmp	r2, r6
 801219e:	d00a      	beq.n	80121b6 <rcl_wait+0x1b6>
 80121a0:	6959      	ldr	r1, [r3, #20]
 80121a2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80121a6:	2900      	cmp	r1, #0
 80121a8:	d1f7      	bne.n	801219a <rcl_wait+0x19a>
 80121aa:	68ac      	ldr	r4, [r5, #8]
 80121ac:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80121b0:	3201      	adds	r2, #1
 80121b2:	42b2      	cmp	r2, r6
 80121b4:	d1f4      	bne.n	80121a0 <rcl_wait+0x1a0>
 80121b6:	69ee      	ldr	r6, [r5, #28]
 80121b8:	2200      	movs	r2, #0
 80121ba:	b91e      	cbnz	r6, 80121c4 <rcl_wait+0x1c4>
 80121bc:	e00d      	b.n	80121da <rcl_wait+0x1da>
 80121be:	3201      	adds	r2, #1
 80121c0:	42b2      	cmp	r2, r6
 80121c2:	d00a      	beq.n	80121da <rcl_wait+0x1da>
 80121c4:	6a19      	ldr	r1, [r3, #32]
 80121c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80121ca:	2900      	cmp	r1, #0
 80121cc:	d1f7      	bne.n	80121be <rcl_wait+0x1be>
 80121ce:	69ac      	ldr	r4, [r5, #24]
 80121d0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80121d4:	3201      	adds	r2, #1
 80121d6:	42b2      	cmp	r2, r6
 80121d8:	d1f4      	bne.n	80121c4 <rcl_wait+0x1c4>
 80121da:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80121dc:	2200      	movs	r2, #0
 80121de:	b91e      	cbnz	r6, 80121e8 <rcl_wait+0x1e8>
 80121e0:	e00d      	b.n	80121fe <rcl_wait+0x1fe>
 80121e2:	3201      	adds	r2, #1
 80121e4:	4296      	cmp	r6, r2
 80121e6:	d00a      	beq.n	80121fe <rcl_wait+0x1fe>
 80121e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80121ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80121ee:	2900      	cmp	r1, #0
 80121f0:	d1f7      	bne.n	80121e2 <rcl_wait+0x1e2>
 80121f2:	6a2c      	ldr	r4, [r5, #32]
 80121f4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80121f8:	3201      	adds	r2, #1
 80121fa:	4296      	cmp	r6, r2
 80121fc:	d1f4      	bne.n	80121e8 <rcl_wait+0x1e8>
 80121fe:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8012200:	2200      	movs	r2, #0
 8012202:	b91e      	cbnz	r6, 801220c <rcl_wait+0x20c>
 8012204:	e00d      	b.n	8012222 <rcl_wait+0x222>
 8012206:	3201      	adds	r2, #1
 8012208:	42b2      	cmp	r2, r6
 801220a:	d00a      	beq.n	8012222 <rcl_wait+0x222>
 801220c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801220e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012212:	2900      	cmp	r1, #0
 8012214:	d1f7      	bne.n	8012206 <rcl_wait+0x206>
 8012216:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8012218:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801221c:	3201      	adds	r2, #1
 801221e:	42b2      	cmp	r2, r6
 8012220:	d1f4      	bne.n	801220c <rcl_wait+0x20c>
 8012222:	f1b8 0f02 	cmp.w	r8, #2
 8012226:	f47f af08 	bne.w	801203a <rcl_wait+0x3a>
 801222a:	464b      	mov	r3, r9
 801222c:	2b00      	cmp	r3, #0
 801222e:	bf08      	it	eq
 8012230:	2002      	moveq	r0, #2
 8012232:	e702      	b.n	801203a <rcl_wait+0x3a>
 8012234:	2a00      	cmp	r2, #0
 8012236:	d03a      	beq.n	80122ae <rcl_wait+0x2ae>
 8012238:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801223c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8012240:	e70e      	b.n	8012060 <rcl_wait+0x60>
 8012242:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012246:	b00d      	add	sp, #52	@ 0x34
 8012248:	ecbd 8b02 	vpop	{d8}
 801224c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012250:	9b04      	ldr	r3, [sp, #16]
 8012252:	2b01      	cmp	r3, #1
 8012254:	9b05      	ldr	r3, [sp, #20]
 8012256:	f173 0300 	sbcs.w	r3, r3, #0
 801225a:	db24      	blt.n	80122a6 <rcl_wait+0x2a6>
 801225c:	2f00      	cmp	r7, #0
 801225e:	bfbc      	itt	lt
 8012260:	f04f 0800 	movlt.w	r8, #0
 8012264:	4647      	movlt	r7, r8
 8012266:	a31e      	add	r3, pc, #120	@ (adr r3, 80122e0 <rcl_wait+0x2e0>)
 8012268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226c:	4640      	mov	r0, r8
 801226e:	4639      	mov	r1, r7
 8012270:	f7ee fcbc 	bl	8000bec <__aeabi_ldivmod>
 8012274:	a31a      	add	r3, pc, #104	@ (adr r3, 80122e0 <rcl_wait+0x2e0>)
 8012276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801227a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801227e:	4640      	mov	r0, r8
 8012280:	4639      	mov	r1, r7
 8012282:	f7ee fcb3 	bl	8000bec <__aeabi_ldivmod>
 8012286:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801228a:	ab08      	add	r3, sp, #32
 801228c:	e73e      	b.n	801210c <rcl_wait+0x10c>
 801228e:	2001      	movs	r0, #1
 8012290:	b00d      	add	sp, #52	@ 0x34
 8012292:	ecbd 8b02 	vpop	{d8}
 8012296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801229a:	200b      	movs	r0, #11
 801229c:	b00d      	add	sp, #52	@ 0x34
 801229e:	ecbd 8b02 	vpop	{d8}
 80122a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122a6:	465b      	mov	r3, fp
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d1d7      	bne.n	801225c <rcl_wait+0x25c>
 80122ac:	e72e      	b.n	801210c <rcl_wait+0x10c>
 80122ae:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80122b2:	430b      	orrs	r3, r1
 80122b4:	bf08      	it	eq
 80122b6:	4691      	moveq	r9, r2
 80122b8:	f43f af21 	beq.w	80120fe <rcl_wait+0xfe>
 80122bc:	9b04      	ldr	r3, [sp, #16]
 80122be:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80122c2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80122c6:	2b01      	cmp	r3, #1
 80122c8:	9b05      	ldr	r3, [sp, #20]
 80122ca:	f173 0300 	sbcs.w	r3, r3, #0
 80122ce:	f04f 0300 	mov.w	r3, #0
 80122d2:	4699      	mov	r9, r3
 80122d4:	dac2      	bge.n	801225c <rcl_wait+0x25c>
 80122d6:	e719      	b.n	801210c <rcl_wait+0x10c>
 80122d8:	ffffffff 	.word	0xffffffff
 80122dc:	7fffffff 	.word	0x7fffffff
 80122e0:	3b9aca00 	.word	0x3b9aca00
 80122e4:	00000000 	.word	0x00000000

080122e8 <rcl_action_take_goal_response>:
 80122e8:	2800      	cmp	r0, #0
 80122ea:	d039      	beq.n	8012360 <rcl_action_take_goal_response+0x78>
 80122ec:	b570      	push	{r4, r5, r6, lr}
 80122ee:	4604      	mov	r4, r0
 80122f0:	6800      	ldr	r0, [r0, #0]
 80122f2:	b380      	cbz	r0, 8012356 <rcl_action_take_goal_response+0x6e>
 80122f4:	460d      	mov	r5, r1
 80122f6:	4616      	mov	r6, r2
 80122f8:	f7fe f872 	bl	80103e0 <rcl_client_is_valid>
 80122fc:	b330      	cbz	r0, 801234c <rcl_action_take_goal_response+0x64>
 80122fe:	6820      	ldr	r0, [r4, #0]
 8012300:	3004      	adds	r0, #4
 8012302:	f7fe f86d 	bl	80103e0 <rcl_client_is_valid>
 8012306:	b308      	cbz	r0, 801234c <rcl_action_take_goal_response+0x64>
 8012308:	6820      	ldr	r0, [r4, #0]
 801230a:	3008      	adds	r0, #8
 801230c:	f7fe f868 	bl	80103e0 <rcl_client_is_valid>
 8012310:	b1e0      	cbz	r0, 801234c <rcl_action_take_goal_response+0x64>
 8012312:	6820      	ldr	r0, [r4, #0]
 8012314:	300c      	adds	r0, #12
 8012316:	f7fe ffff 	bl	8011318 <rcl_subscription_is_valid>
 801231a:	b1b8      	cbz	r0, 801234c <rcl_action_take_goal_response+0x64>
 801231c:	6820      	ldr	r0, [r4, #0]
 801231e:	3010      	adds	r0, #16
 8012320:	f7fe fffa 	bl	8011318 <rcl_subscription_is_valid>
 8012324:	b190      	cbz	r0, 801234c <rcl_action_take_goal_response+0x64>
 8012326:	b1cd      	cbz	r5, 801235c <rcl_action_take_goal_response+0x74>
 8012328:	b1c6      	cbz	r6, 801235c <rcl_action_take_goal_response+0x74>
 801232a:	6820      	ldr	r0, [r4, #0]
 801232c:	4632      	mov	r2, r6
 801232e:	4629      	mov	r1, r5
 8012330:	f7fe f80e 	bl	8010350 <rcl_take_response>
 8012334:	b148      	cbz	r0, 801234a <rcl_action_take_goal_response+0x62>
 8012336:	280a      	cmp	r0, #10
 8012338:	d007      	beq.n	801234a <rcl_action_take_goal_response+0x62>
 801233a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801233e:	f640 0337 	movw	r3, #2103	@ 0x837
 8012342:	4290      	cmp	r0, r2
 8012344:	bf0c      	ite	eq
 8012346:	4618      	moveq	r0, r3
 8012348:	2001      	movne	r0, #1
 801234a:	bd70      	pop	{r4, r5, r6, pc}
 801234c:	f7fa fae8 	bl	800c920 <rcutils_reset_error>
 8012350:	f640 0036 	movw	r0, #2102	@ 0x836
 8012354:	bd70      	pop	{r4, r5, r6, pc}
 8012356:	f640 0036 	movw	r0, #2102	@ 0x836
 801235a:	bd70      	pop	{r4, r5, r6, pc}
 801235c:	200b      	movs	r0, #11
 801235e:	bd70      	pop	{r4, r5, r6, pc}
 8012360:	f640 0036 	movw	r0, #2102	@ 0x836
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop

08012368 <rcl_action_send_result_request>:
 8012368:	b390      	cbz	r0, 80123d0 <rcl_action_send_result_request+0x68>
 801236a:	b570      	push	{r4, r5, r6, lr}
 801236c:	4604      	mov	r4, r0
 801236e:	6800      	ldr	r0, [r0, #0]
 8012370:	b348      	cbz	r0, 80123c6 <rcl_action_send_result_request+0x5e>
 8012372:	460d      	mov	r5, r1
 8012374:	4616      	mov	r6, r2
 8012376:	f7fe f833 	bl	80103e0 <rcl_client_is_valid>
 801237a:	b1f8      	cbz	r0, 80123bc <rcl_action_send_result_request+0x54>
 801237c:	6820      	ldr	r0, [r4, #0]
 801237e:	3004      	adds	r0, #4
 8012380:	f7fe f82e 	bl	80103e0 <rcl_client_is_valid>
 8012384:	b1d0      	cbz	r0, 80123bc <rcl_action_send_result_request+0x54>
 8012386:	6820      	ldr	r0, [r4, #0]
 8012388:	3008      	adds	r0, #8
 801238a:	f7fe f829 	bl	80103e0 <rcl_client_is_valid>
 801238e:	b1a8      	cbz	r0, 80123bc <rcl_action_send_result_request+0x54>
 8012390:	6820      	ldr	r0, [r4, #0]
 8012392:	300c      	adds	r0, #12
 8012394:	f7fe ffc0 	bl	8011318 <rcl_subscription_is_valid>
 8012398:	b180      	cbz	r0, 80123bc <rcl_action_send_result_request+0x54>
 801239a:	6820      	ldr	r0, [r4, #0]
 801239c:	3010      	adds	r0, #16
 801239e:	f7fe ffbb 	bl	8011318 <rcl_subscription_is_valid>
 80123a2:	b158      	cbz	r0, 80123bc <rcl_action_send_result_request+0x54>
 80123a4:	b195      	cbz	r5, 80123cc <rcl_action_send_result_request+0x64>
 80123a6:	b18e      	cbz	r6, 80123cc <rcl_action_send_result_request+0x64>
 80123a8:	6820      	ldr	r0, [r4, #0]
 80123aa:	4632      	mov	r2, r6
 80123ac:	4629      	mov	r1, r5
 80123ae:	3008      	adds	r0, #8
 80123b0:	f7fd ff98 	bl	80102e4 <rcl_send_request>
 80123b4:	3800      	subs	r0, #0
 80123b6:	bf18      	it	ne
 80123b8:	2001      	movne	r0, #1
 80123ba:	bd70      	pop	{r4, r5, r6, pc}
 80123bc:	f7fa fab0 	bl	800c920 <rcutils_reset_error>
 80123c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80123c4:	bd70      	pop	{r4, r5, r6, pc}
 80123c6:	f640 0036 	movw	r0, #2102	@ 0x836
 80123ca:	bd70      	pop	{r4, r5, r6, pc}
 80123cc:	200b      	movs	r0, #11
 80123ce:	bd70      	pop	{r4, r5, r6, pc}
 80123d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80123d4:	4770      	bx	lr
 80123d6:	bf00      	nop

080123d8 <rcl_action_take_result_response>:
 80123d8:	2800      	cmp	r0, #0
 80123da:	d03a      	beq.n	8012452 <rcl_action_take_result_response+0x7a>
 80123dc:	b570      	push	{r4, r5, r6, lr}
 80123de:	4604      	mov	r4, r0
 80123e0:	6800      	ldr	r0, [r0, #0]
 80123e2:	b388      	cbz	r0, 8012448 <rcl_action_take_result_response+0x70>
 80123e4:	460d      	mov	r5, r1
 80123e6:	4616      	mov	r6, r2
 80123e8:	f7fd fffa 	bl	80103e0 <rcl_client_is_valid>
 80123ec:	b338      	cbz	r0, 801243e <rcl_action_take_result_response+0x66>
 80123ee:	6820      	ldr	r0, [r4, #0]
 80123f0:	3004      	adds	r0, #4
 80123f2:	f7fd fff5 	bl	80103e0 <rcl_client_is_valid>
 80123f6:	b310      	cbz	r0, 801243e <rcl_action_take_result_response+0x66>
 80123f8:	6820      	ldr	r0, [r4, #0]
 80123fa:	3008      	adds	r0, #8
 80123fc:	f7fd fff0 	bl	80103e0 <rcl_client_is_valid>
 8012400:	b1e8      	cbz	r0, 801243e <rcl_action_take_result_response+0x66>
 8012402:	6820      	ldr	r0, [r4, #0]
 8012404:	300c      	adds	r0, #12
 8012406:	f7fe ff87 	bl	8011318 <rcl_subscription_is_valid>
 801240a:	b1c0      	cbz	r0, 801243e <rcl_action_take_result_response+0x66>
 801240c:	6820      	ldr	r0, [r4, #0]
 801240e:	3010      	adds	r0, #16
 8012410:	f7fe ff82 	bl	8011318 <rcl_subscription_is_valid>
 8012414:	b198      	cbz	r0, 801243e <rcl_action_take_result_response+0x66>
 8012416:	b1d5      	cbz	r5, 801244e <rcl_action_take_result_response+0x76>
 8012418:	b1ce      	cbz	r6, 801244e <rcl_action_take_result_response+0x76>
 801241a:	6820      	ldr	r0, [r4, #0]
 801241c:	4632      	mov	r2, r6
 801241e:	4629      	mov	r1, r5
 8012420:	3008      	adds	r0, #8
 8012422:	f7fd ff95 	bl	8010350 <rcl_take_response>
 8012426:	b148      	cbz	r0, 801243c <rcl_action_take_result_response+0x64>
 8012428:	280a      	cmp	r0, #10
 801242a:	d007      	beq.n	801243c <rcl_action_take_result_response+0x64>
 801242c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012430:	f640 0337 	movw	r3, #2103	@ 0x837
 8012434:	4290      	cmp	r0, r2
 8012436:	bf0c      	ite	eq
 8012438:	4618      	moveq	r0, r3
 801243a:	2001      	movne	r0, #1
 801243c:	bd70      	pop	{r4, r5, r6, pc}
 801243e:	f7fa fa6f 	bl	800c920 <rcutils_reset_error>
 8012442:	f640 0036 	movw	r0, #2102	@ 0x836
 8012446:	bd70      	pop	{r4, r5, r6, pc}
 8012448:	f640 0036 	movw	r0, #2102	@ 0x836
 801244c:	bd70      	pop	{r4, r5, r6, pc}
 801244e:	200b      	movs	r0, #11
 8012450:	bd70      	pop	{r4, r5, r6, pc}
 8012452:	f640 0036 	movw	r0, #2102	@ 0x836
 8012456:	4770      	bx	lr

08012458 <rcl_action_take_cancel_response>:
 8012458:	2800      	cmp	r0, #0
 801245a:	d03a      	beq.n	80124d2 <rcl_action_take_cancel_response+0x7a>
 801245c:	b570      	push	{r4, r5, r6, lr}
 801245e:	4604      	mov	r4, r0
 8012460:	6800      	ldr	r0, [r0, #0]
 8012462:	b388      	cbz	r0, 80124c8 <rcl_action_take_cancel_response+0x70>
 8012464:	460d      	mov	r5, r1
 8012466:	4616      	mov	r6, r2
 8012468:	f7fd ffba 	bl	80103e0 <rcl_client_is_valid>
 801246c:	b338      	cbz	r0, 80124be <rcl_action_take_cancel_response+0x66>
 801246e:	6820      	ldr	r0, [r4, #0]
 8012470:	3004      	adds	r0, #4
 8012472:	f7fd ffb5 	bl	80103e0 <rcl_client_is_valid>
 8012476:	b310      	cbz	r0, 80124be <rcl_action_take_cancel_response+0x66>
 8012478:	6820      	ldr	r0, [r4, #0]
 801247a:	3008      	adds	r0, #8
 801247c:	f7fd ffb0 	bl	80103e0 <rcl_client_is_valid>
 8012480:	b1e8      	cbz	r0, 80124be <rcl_action_take_cancel_response+0x66>
 8012482:	6820      	ldr	r0, [r4, #0]
 8012484:	300c      	adds	r0, #12
 8012486:	f7fe ff47 	bl	8011318 <rcl_subscription_is_valid>
 801248a:	b1c0      	cbz	r0, 80124be <rcl_action_take_cancel_response+0x66>
 801248c:	6820      	ldr	r0, [r4, #0]
 801248e:	3010      	adds	r0, #16
 8012490:	f7fe ff42 	bl	8011318 <rcl_subscription_is_valid>
 8012494:	b198      	cbz	r0, 80124be <rcl_action_take_cancel_response+0x66>
 8012496:	b1d5      	cbz	r5, 80124ce <rcl_action_take_cancel_response+0x76>
 8012498:	b1ce      	cbz	r6, 80124ce <rcl_action_take_cancel_response+0x76>
 801249a:	6820      	ldr	r0, [r4, #0]
 801249c:	4632      	mov	r2, r6
 801249e:	4629      	mov	r1, r5
 80124a0:	3004      	adds	r0, #4
 80124a2:	f7fd ff55 	bl	8010350 <rcl_take_response>
 80124a6:	b148      	cbz	r0, 80124bc <rcl_action_take_cancel_response+0x64>
 80124a8:	280a      	cmp	r0, #10
 80124aa:	d007      	beq.n	80124bc <rcl_action_take_cancel_response+0x64>
 80124ac:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80124b0:	f640 0337 	movw	r3, #2103	@ 0x837
 80124b4:	4290      	cmp	r0, r2
 80124b6:	bf0c      	ite	eq
 80124b8:	4618      	moveq	r0, r3
 80124ba:	2001      	movne	r0, #1
 80124bc:	bd70      	pop	{r4, r5, r6, pc}
 80124be:	f7fa fa2f 	bl	800c920 <rcutils_reset_error>
 80124c2:	f640 0036 	movw	r0, #2102	@ 0x836
 80124c6:	bd70      	pop	{r4, r5, r6, pc}
 80124c8:	f640 0036 	movw	r0, #2102	@ 0x836
 80124cc:	bd70      	pop	{r4, r5, r6, pc}
 80124ce:	200b      	movs	r0, #11
 80124d0:	bd70      	pop	{r4, r5, r6, pc}
 80124d2:	f640 0036 	movw	r0, #2102	@ 0x836
 80124d6:	4770      	bx	lr

080124d8 <rcl_action_take_feedback>:
 80124d8:	2800      	cmp	r0, #0
 80124da:	d038      	beq.n	801254e <rcl_action_take_feedback+0x76>
 80124dc:	b530      	push	{r4, r5, lr}
 80124de:	4604      	mov	r4, r0
 80124e0:	6800      	ldr	r0, [r0, #0]
 80124e2:	b091      	sub	sp, #68	@ 0x44
 80124e4:	b378      	cbz	r0, 8012546 <rcl_action_take_feedback+0x6e>
 80124e6:	460d      	mov	r5, r1
 80124e8:	f7fd ff7a 	bl	80103e0 <rcl_client_is_valid>
 80124ec:	b328      	cbz	r0, 801253a <rcl_action_take_feedback+0x62>
 80124ee:	6820      	ldr	r0, [r4, #0]
 80124f0:	3004      	adds	r0, #4
 80124f2:	f7fd ff75 	bl	80103e0 <rcl_client_is_valid>
 80124f6:	b300      	cbz	r0, 801253a <rcl_action_take_feedback+0x62>
 80124f8:	6820      	ldr	r0, [r4, #0]
 80124fa:	3008      	adds	r0, #8
 80124fc:	f7fd ff70 	bl	80103e0 <rcl_client_is_valid>
 8012500:	b1d8      	cbz	r0, 801253a <rcl_action_take_feedback+0x62>
 8012502:	6820      	ldr	r0, [r4, #0]
 8012504:	300c      	adds	r0, #12
 8012506:	f7fe ff07 	bl	8011318 <rcl_subscription_is_valid>
 801250a:	b1b0      	cbz	r0, 801253a <rcl_action_take_feedback+0x62>
 801250c:	6820      	ldr	r0, [r4, #0]
 801250e:	3010      	adds	r0, #16
 8012510:	f7fe ff02 	bl	8011318 <rcl_subscription_is_valid>
 8012514:	b188      	cbz	r0, 801253a <rcl_action_take_feedback+0x62>
 8012516:	b1ed      	cbz	r5, 8012554 <rcl_action_take_feedback+0x7c>
 8012518:	6820      	ldr	r0, [r4, #0]
 801251a:	2300      	movs	r3, #0
 801251c:	466a      	mov	r2, sp
 801251e:	4629      	mov	r1, r5
 8012520:	300c      	adds	r0, #12
 8012522:	f7fe fe9b 	bl	801125c <rcl_take>
 8012526:	b160      	cbz	r0, 8012542 <rcl_action_take_feedback+0x6a>
 8012528:	f240 1391 	movw	r3, #401	@ 0x191
 801252c:	4298      	cmp	r0, r3
 801252e:	d014      	beq.n	801255a <rcl_action_take_feedback+0x82>
 8012530:	280a      	cmp	r0, #10
 8012532:	bf18      	it	ne
 8012534:	2001      	movne	r0, #1
 8012536:	b011      	add	sp, #68	@ 0x44
 8012538:	bd30      	pop	{r4, r5, pc}
 801253a:	f7fa f9f1 	bl	800c920 <rcutils_reset_error>
 801253e:	f640 0036 	movw	r0, #2102	@ 0x836
 8012542:	b011      	add	sp, #68	@ 0x44
 8012544:	bd30      	pop	{r4, r5, pc}
 8012546:	f640 0036 	movw	r0, #2102	@ 0x836
 801254a:	b011      	add	sp, #68	@ 0x44
 801254c:	bd30      	pop	{r4, r5, pc}
 801254e:	f640 0036 	movw	r0, #2102	@ 0x836
 8012552:	4770      	bx	lr
 8012554:	200b      	movs	r0, #11
 8012556:	b011      	add	sp, #68	@ 0x44
 8012558:	bd30      	pop	{r4, r5, pc}
 801255a:	f640 0037 	movw	r0, #2103	@ 0x837
 801255e:	e7f0      	b.n	8012542 <rcl_action_take_feedback+0x6a>

08012560 <rcl_action_wait_set_add_action_client>:
 8012560:	2800      	cmp	r0, #0
 8012562:	d048      	beq.n	80125f6 <rcl_action_wait_set_add_action_client+0x96>
 8012564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012566:	460c      	mov	r4, r1
 8012568:	2900      	cmp	r1, #0
 801256a:	d03c      	beq.n	80125e6 <rcl_action_wait_set_add_action_client+0x86>
 801256c:	4605      	mov	r5, r0
 801256e:	6808      	ldr	r0, [r1, #0]
 8012570:	2800      	cmp	r0, #0
 8012572:	d038      	beq.n	80125e6 <rcl_action_wait_set_add_action_client+0x86>
 8012574:	4617      	mov	r7, r2
 8012576:	461e      	mov	r6, r3
 8012578:	f7fd ff32 	bl	80103e0 <rcl_client_is_valid>
 801257c:	b3b0      	cbz	r0, 80125ec <rcl_action_wait_set_add_action_client+0x8c>
 801257e:	6820      	ldr	r0, [r4, #0]
 8012580:	3004      	adds	r0, #4
 8012582:	f7fd ff2d 	bl	80103e0 <rcl_client_is_valid>
 8012586:	b388      	cbz	r0, 80125ec <rcl_action_wait_set_add_action_client+0x8c>
 8012588:	6820      	ldr	r0, [r4, #0]
 801258a:	3008      	adds	r0, #8
 801258c:	f7fd ff28 	bl	80103e0 <rcl_client_is_valid>
 8012590:	b360      	cbz	r0, 80125ec <rcl_action_wait_set_add_action_client+0x8c>
 8012592:	6820      	ldr	r0, [r4, #0]
 8012594:	300c      	adds	r0, #12
 8012596:	f7fe febf 	bl	8011318 <rcl_subscription_is_valid>
 801259a:	b338      	cbz	r0, 80125ec <rcl_action_wait_set_add_action_client+0x8c>
 801259c:	6820      	ldr	r0, [r4, #0]
 801259e:	3010      	adds	r0, #16
 80125a0:	f7fe feba 	bl	8011318 <rcl_subscription_is_valid>
 80125a4:	b310      	cbz	r0, 80125ec <rcl_action_wait_set_add_action_client+0x8c>
 80125a6:	6821      	ldr	r1, [r4, #0]
 80125a8:	4628      	mov	r0, r5
 80125aa:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80125ae:	f7ff fccd 	bl	8011f4c <rcl_wait_set_add_client>
 80125b2:	b9b8      	cbnz	r0, 80125e4 <rcl_action_wait_set_add_action_client+0x84>
 80125b4:	6821      	ldr	r1, [r4, #0]
 80125b6:	4628      	mov	r0, r5
 80125b8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80125bc:	3104      	adds	r1, #4
 80125be:	f7ff fcc5 	bl	8011f4c <rcl_wait_set_add_client>
 80125c2:	b978      	cbnz	r0, 80125e4 <rcl_action_wait_set_add_action_client+0x84>
 80125c4:	6821      	ldr	r1, [r4, #0]
 80125c6:	4628      	mov	r0, r5
 80125c8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80125cc:	3108      	adds	r1, #8
 80125ce:	f7ff fcbd 	bl	8011f4c <rcl_wait_set_add_client>
 80125d2:	b938      	cbnz	r0, 80125e4 <rcl_action_wait_set_add_action_client+0x84>
 80125d4:	6821      	ldr	r1, [r4, #0]
 80125d6:	4628      	mov	r0, r5
 80125d8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80125dc:	310c      	adds	r1, #12
 80125de:	f7ff f96d 	bl	80118bc <rcl_wait_set_add_subscription>
 80125e2:	b158      	cbz	r0, 80125fc <rcl_action_wait_set_add_action_client+0x9c>
 80125e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80125ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125ec:	f7fa f998 	bl	800c920 <rcutils_reset_error>
 80125f0:	f640 0036 	movw	r0, #2102	@ 0x836
 80125f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125f6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80125fa:	4770      	bx	lr
 80125fc:	6821      	ldr	r1, [r4, #0]
 80125fe:	4628      	mov	r0, r5
 8012600:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8012604:	3110      	adds	r1, #16
 8012606:	f7ff f959 	bl	80118bc <rcl_wait_set_add_subscription>
 801260a:	2800      	cmp	r0, #0
 801260c:	d1ea      	bne.n	80125e4 <rcl_action_wait_set_add_action_client+0x84>
 801260e:	b11f      	cbz	r7, 8012618 <rcl_action_wait_set_add_action_client+0xb8>
 8012610:	6823      	ldr	r3, [r4, #0]
 8012612:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8012616:	603b      	str	r3, [r7, #0]
 8012618:	2e00      	cmp	r6, #0
 801261a:	d0e3      	beq.n	80125e4 <rcl_action_wait_set_add_action_client+0x84>
 801261c:	6823      	ldr	r3, [r4, #0]
 801261e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8012622:	6033      	str	r3, [r6, #0]
 8012624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012626:	bf00      	nop

08012628 <rcl_action_client_wait_set_get_entities_ready>:
 8012628:	2800      	cmp	r0, #0
 801262a:	f000 808d 	beq.w	8012748 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801262e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012632:	460c      	mov	r4, r1
 8012634:	2900      	cmp	r1, #0
 8012636:	d077      	beq.n	8012728 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012638:	4605      	mov	r5, r0
 801263a:	6808      	ldr	r0, [r1, #0]
 801263c:	2800      	cmp	r0, #0
 801263e:	d073      	beq.n	8012728 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012640:	4616      	mov	r6, r2
 8012642:	461f      	mov	r7, r3
 8012644:	f7fd fecc 	bl	80103e0 <rcl_client_is_valid>
 8012648:	2800      	cmp	r0, #0
 801264a:	d071      	beq.n	8012730 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801264c:	6820      	ldr	r0, [r4, #0]
 801264e:	3004      	adds	r0, #4
 8012650:	f7fd fec6 	bl	80103e0 <rcl_client_is_valid>
 8012654:	2800      	cmp	r0, #0
 8012656:	d06b      	beq.n	8012730 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012658:	6820      	ldr	r0, [r4, #0]
 801265a:	3008      	adds	r0, #8
 801265c:	f7fd fec0 	bl	80103e0 <rcl_client_is_valid>
 8012660:	2800      	cmp	r0, #0
 8012662:	d065      	beq.n	8012730 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012664:	6820      	ldr	r0, [r4, #0]
 8012666:	300c      	adds	r0, #12
 8012668:	f7fe fe56 	bl	8011318 <rcl_subscription_is_valid>
 801266c:	2800      	cmp	r0, #0
 801266e:	d05f      	beq.n	8012730 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012670:	6820      	ldr	r0, [r4, #0]
 8012672:	3010      	adds	r0, #16
 8012674:	f7fe fe50 	bl	8011318 <rcl_subscription_is_valid>
 8012678:	2800      	cmp	r0, #0
 801267a:	d059      	beq.n	8012730 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801267c:	2e00      	cmp	r6, #0
 801267e:	d060      	beq.n	8012742 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012680:	2f00      	cmp	r7, #0
 8012682:	d05e      	beq.n	8012742 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012684:	9b06      	ldr	r3, [sp, #24]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d05b      	beq.n	8012742 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801268a:	9b07      	ldr	r3, [sp, #28]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d058      	beq.n	8012742 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012690:	9b08      	ldr	r3, [sp, #32]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d055      	beq.n	8012742 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012696:	6823      	ldr	r3, [r4, #0]
 8012698:	686a      	ldr	r2, [r5, #4]
 801269a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801269e:	428a      	cmp	r2, r1
 80126a0:	d94c      	bls.n	801273c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80126a2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80126a6:	4282      	cmp	r2, r0
 80126a8:	d948      	bls.n	801273c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80126aa:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80126ae:	69ea      	ldr	r2, [r5, #28]
 80126b0:	42a2      	cmp	r2, r4
 80126b2:	d943      	bls.n	801273c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80126b4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80126b8:	4562      	cmp	r2, ip
 80126ba:	d93f      	bls.n	801273c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80126bc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80126c0:	4572      	cmp	r2, lr
 80126c2:	d93b      	bls.n	801273c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80126c4:	69aa      	ldr	r2, [r5, #24]
 80126c6:	682d      	ldr	r5, [r5, #0]
 80126c8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80126cc:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80126d0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80126d4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80126d8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80126dc:	f103 0c0c 	add.w	ip, r3, #12
 80126e0:	eba5 050c 	sub.w	r5, r5, ip
 80126e4:	fab5 f585 	clz	r5, r5
 80126e8:	096d      	lsrs	r5, r5, #5
 80126ea:	7035      	strb	r5, [r6, #0]
 80126ec:	f103 0510 	add.w	r5, r3, #16
 80126f0:	1b64      	subs	r4, r4, r5
 80126f2:	fab4 f484 	clz	r4, r4
 80126f6:	0964      	lsrs	r4, r4, #5
 80126f8:	703c      	strb	r4, [r7, #0]
 80126fa:	eba3 0008 	sub.w	r0, r3, r8
 80126fe:	1d1c      	adds	r4, r3, #4
 8012700:	3308      	adds	r3, #8
 8012702:	1ad3      	subs	r3, r2, r3
 8012704:	fab0 f080 	clz	r0, r0
 8012708:	9a06      	ldr	r2, [sp, #24]
 801270a:	0940      	lsrs	r0, r0, #5
 801270c:	1b09      	subs	r1, r1, r4
 801270e:	7010      	strb	r0, [r2, #0]
 8012710:	fab1 f181 	clz	r1, r1
 8012714:	9a07      	ldr	r2, [sp, #28]
 8012716:	0949      	lsrs	r1, r1, #5
 8012718:	7011      	strb	r1, [r2, #0]
 801271a:	fab3 f383 	clz	r3, r3
 801271e:	9a08      	ldr	r2, [sp, #32]
 8012720:	095b      	lsrs	r3, r3, #5
 8012722:	2000      	movs	r0, #0
 8012724:	7013      	strb	r3, [r2, #0]
 8012726:	e001      	b.n	801272c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8012728:	f640 0036 	movw	r0, #2102	@ 0x836
 801272c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012730:	f7fa f8f6 	bl	800c920 <rcutils_reset_error>
 8012734:	f640 0036 	movw	r0, #2102	@ 0x836
 8012738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801273c:	2001      	movs	r0, #1
 801273e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012742:	200b      	movs	r0, #11
 8012744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012748:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801274c:	4770      	bx	lr
 801274e:	bf00      	nop

08012750 <rcl_action_take_goal_request>:
 8012750:	2800      	cmp	r0, #0
 8012752:	d039      	beq.n	80127c8 <rcl_action_take_goal_request+0x78>
 8012754:	b570      	push	{r4, r5, r6, lr}
 8012756:	4604      	mov	r4, r0
 8012758:	6800      	ldr	r0, [r0, #0]
 801275a:	b380      	cbz	r0, 80127be <rcl_action_take_goal_request+0x6e>
 801275c:	460d      	mov	r5, r1
 801275e:	4616      	mov	r6, r2
 8012760:	f7fe fc96 	bl	8011090 <rcl_service_is_valid>
 8012764:	b330      	cbz	r0, 80127b4 <rcl_action_take_goal_request+0x64>
 8012766:	6820      	ldr	r0, [r4, #0]
 8012768:	3004      	adds	r0, #4
 801276a:	f7fe fc91 	bl	8011090 <rcl_service_is_valid>
 801276e:	b308      	cbz	r0, 80127b4 <rcl_action_take_goal_request+0x64>
 8012770:	6820      	ldr	r0, [r4, #0]
 8012772:	3008      	adds	r0, #8
 8012774:	f7fe fc8c 	bl	8011090 <rcl_service_is_valid>
 8012778:	b1e0      	cbz	r0, 80127b4 <rcl_action_take_goal_request+0x64>
 801277a:	6820      	ldr	r0, [r4, #0]
 801277c:	300c      	adds	r0, #12
 801277e:	f7f9 f93d 	bl	800b9fc <rcl_publisher_is_valid>
 8012782:	b1b8      	cbz	r0, 80127b4 <rcl_action_take_goal_request+0x64>
 8012784:	6820      	ldr	r0, [r4, #0]
 8012786:	3010      	adds	r0, #16
 8012788:	f7f9 f938 	bl	800b9fc <rcl_publisher_is_valid>
 801278c:	b190      	cbz	r0, 80127b4 <rcl_action_take_goal_request+0x64>
 801278e:	b1cd      	cbz	r5, 80127c4 <rcl_action_take_goal_request+0x74>
 8012790:	b1c6      	cbz	r6, 80127c4 <rcl_action_take_goal_request+0x74>
 8012792:	6820      	ldr	r0, [r4, #0]
 8012794:	4632      	mov	r2, r6
 8012796:	4629      	mov	r1, r5
 8012798:	f7fe fc22 	bl	8010fe0 <rcl_take_request>
 801279c:	b148      	cbz	r0, 80127b2 <rcl_action_take_goal_request+0x62>
 801279e:	280a      	cmp	r0, #10
 80127a0:	d007      	beq.n	80127b2 <rcl_action_take_goal_request+0x62>
 80127a2:	f240 2259 	movw	r2, #601	@ 0x259
 80127a6:	f640 0399 	movw	r3, #2201	@ 0x899
 80127aa:	4290      	cmp	r0, r2
 80127ac:	bf0c      	ite	eq
 80127ae:	4618      	moveq	r0, r3
 80127b0:	2001      	movne	r0, #1
 80127b2:	bd70      	pop	{r4, r5, r6, pc}
 80127b4:	f7fa f8b4 	bl	800c920 <rcutils_reset_error>
 80127b8:	f640 0098 	movw	r0, #2200	@ 0x898
 80127bc:	bd70      	pop	{r4, r5, r6, pc}
 80127be:	f640 0098 	movw	r0, #2200	@ 0x898
 80127c2:	bd70      	pop	{r4, r5, r6, pc}
 80127c4:	200b      	movs	r0, #11
 80127c6:	bd70      	pop	{r4, r5, r6, pc}
 80127c8:	f640 0098 	movw	r0, #2200	@ 0x898
 80127cc:	4770      	bx	lr
 80127ce:	bf00      	nop

080127d0 <rcl_action_send_goal_response>:
 80127d0:	b390      	cbz	r0, 8012838 <rcl_action_send_goal_response+0x68>
 80127d2:	b570      	push	{r4, r5, r6, lr}
 80127d4:	4604      	mov	r4, r0
 80127d6:	6800      	ldr	r0, [r0, #0]
 80127d8:	b348      	cbz	r0, 801282e <rcl_action_send_goal_response+0x5e>
 80127da:	460d      	mov	r5, r1
 80127dc:	4616      	mov	r6, r2
 80127de:	f7fe fc57 	bl	8011090 <rcl_service_is_valid>
 80127e2:	b1f8      	cbz	r0, 8012824 <rcl_action_send_goal_response+0x54>
 80127e4:	6820      	ldr	r0, [r4, #0]
 80127e6:	3004      	adds	r0, #4
 80127e8:	f7fe fc52 	bl	8011090 <rcl_service_is_valid>
 80127ec:	b1d0      	cbz	r0, 8012824 <rcl_action_send_goal_response+0x54>
 80127ee:	6820      	ldr	r0, [r4, #0]
 80127f0:	3008      	adds	r0, #8
 80127f2:	f7fe fc4d 	bl	8011090 <rcl_service_is_valid>
 80127f6:	b1a8      	cbz	r0, 8012824 <rcl_action_send_goal_response+0x54>
 80127f8:	6820      	ldr	r0, [r4, #0]
 80127fa:	300c      	adds	r0, #12
 80127fc:	f7f9 f8fe 	bl	800b9fc <rcl_publisher_is_valid>
 8012800:	b180      	cbz	r0, 8012824 <rcl_action_send_goal_response+0x54>
 8012802:	6820      	ldr	r0, [r4, #0]
 8012804:	3010      	adds	r0, #16
 8012806:	f7f9 f8f9 	bl	800b9fc <rcl_publisher_is_valid>
 801280a:	b158      	cbz	r0, 8012824 <rcl_action_send_goal_response+0x54>
 801280c:	b195      	cbz	r5, 8012834 <rcl_action_send_goal_response+0x64>
 801280e:	b18e      	cbz	r6, 8012834 <rcl_action_send_goal_response+0x64>
 8012810:	6820      	ldr	r0, [r4, #0]
 8012812:	4632      	mov	r2, r6
 8012814:	4629      	mov	r1, r5
 8012816:	f7fe fc23 	bl	8011060 <rcl_send_response>
 801281a:	b110      	cbz	r0, 8012822 <rcl_action_send_goal_response+0x52>
 801281c:	2802      	cmp	r0, #2
 801281e:	bf18      	it	ne
 8012820:	2001      	movne	r0, #1
 8012822:	bd70      	pop	{r4, r5, r6, pc}
 8012824:	f7fa f87c 	bl	800c920 <rcutils_reset_error>
 8012828:	f640 0098 	movw	r0, #2200	@ 0x898
 801282c:	bd70      	pop	{r4, r5, r6, pc}
 801282e:	f640 0098 	movw	r0, #2200	@ 0x898
 8012832:	bd70      	pop	{r4, r5, r6, pc}
 8012834:	200b      	movs	r0, #11
 8012836:	bd70      	pop	{r4, r5, r6, pc}
 8012838:	f640 0098 	movw	r0, #2200	@ 0x898
 801283c:	4770      	bx	lr
 801283e:	bf00      	nop

08012840 <rcl_action_take_result_request>:
 8012840:	2800      	cmp	r0, #0
 8012842:	d03a      	beq.n	80128ba <rcl_action_take_result_request+0x7a>
 8012844:	b570      	push	{r4, r5, r6, lr}
 8012846:	4604      	mov	r4, r0
 8012848:	6800      	ldr	r0, [r0, #0]
 801284a:	b388      	cbz	r0, 80128b0 <rcl_action_take_result_request+0x70>
 801284c:	460d      	mov	r5, r1
 801284e:	4616      	mov	r6, r2
 8012850:	f7fe fc1e 	bl	8011090 <rcl_service_is_valid>
 8012854:	b338      	cbz	r0, 80128a6 <rcl_action_take_result_request+0x66>
 8012856:	6820      	ldr	r0, [r4, #0]
 8012858:	3004      	adds	r0, #4
 801285a:	f7fe fc19 	bl	8011090 <rcl_service_is_valid>
 801285e:	b310      	cbz	r0, 80128a6 <rcl_action_take_result_request+0x66>
 8012860:	6820      	ldr	r0, [r4, #0]
 8012862:	3008      	adds	r0, #8
 8012864:	f7fe fc14 	bl	8011090 <rcl_service_is_valid>
 8012868:	b1e8      	cbz	r0, 80128a6 <rcl_action_take_result_request+0x66>
 801286a:	6820      	ldr	r0, [r4, #0]
 801286c:	300c      	adds	r0, #12
 801286e:	f7f9 f8c5 	bl	800b9fc <rcl_publisher_is_valid>
 8012872:	b1c0      	cbz	r0, 80128a6 <rcl_action_take_result_request+0x66>
 8012874:	6820      	ldr	r0, [r4, #0]
 8012876:	3010      	adds	r0, #16
 8012878:	f7f9 f8c0 	bl	800b9fc <rcl_publisher_is_valid>
 801287c:	b198      	cbz	r0, 80128a6 <rcl_action_take_result_request+0x66>
 801287e:	b1d5      	cbz	r5, 80128b6 <rcl_action_take_result_request+0x76>
 8012880:	b1ce      	cbz	r6, 80128b6 <rcl_action_take_result_request+0x76>
 8012882:	6820      	ldr	r0, [r4, #0]
 8012884:	4632      	mov	r2, r6
 8012886:	4629      	mov	r1, r5
 8012888:	3008      	adds	r0, #8
 801288a:	f7fe fba9 	bl	8010fe0 <rcl_take_request>
 801288e:	b148      	cbz	r0, 80128a4 <rcl_action_take_result_request+0x64>
 8012890:	280a      	cmp	r0, #10
 8012892:	d007      	beq.n	80128a4 <rcl_action_take_result_request+0x64>
 8012894:	f240 2259 	movw	r2, #601	@ 0x259
 8012898:	f640 0399 	movw	r3, #2201	@ 0x899
 801289c:	4290      	cmp	r0, r2
 801289e:	bf0c      	ite	eq
 80128a0:	4618      	moveq	r0, r3
 80128a2:	2001      	movne	r0, #1
 80128a4:	bd70      	pop	{r4, r5, r6, pc}
 80128a6:	f7fa f83b 	bl	800c920 <rcutils_reset_error>
 80128aa:	f640 0098 	movw	r0, #2200	@ 0x898
 80128ae:	bd70      	pop	{r4, r5, r6, pc}
 80128b0:	f640 0098 	movw	r0, #2200	@ 0x898
 80128b4:	bd70      	pop	{r4, r5, r6, pc}
 80128b6:	200b      	movs	r0, #11
 80128b8:	bd70      	pop	{r4, r5, r6, pc}
 80128ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80128be:	4770      	bx	lr

080128c0 <rcl_action_take_cancel_request>:
 80128c0:	2800      	cmp	r0, #0
 80128c2:	d03a      	beq.n	801293a <rcl_action_take_cancel_request+0x7a>
 80128c4:	b570      	push	{r4, r5, r6, lr}
 80128c6:	4604      	mov	r4, r0
 80128c8:	6800      	ldr	r0, [r0, #0]
 80128ca:	b388      	cbz	r0, 8012930 <rcl_action_take_cancel_request+0x70>
 80128cc:	460d      	mov	r5, r1
 80128ce:	4616      	mov	r6, r2
 80128d0:	f7fe fbde 	bl	8011090 <rcl_service_is_valid>
 80128d4:	b338      	cbz	r0, 8012926 <rcl_action_take_cancel_request+0x66>
 80128d6:	6820      	ldr	r0, [r4, #0]
 80128d8:	3004      	adds	r0, #4
 80128da:	f7fe fbd9 	bl	8011090 <rcl_service_is_valid>
 80128de:	b310      	cbz	r0, 8012926 <rcl_action_take_cancel_request+0x66>
 80128e0:	6820      	ldr	r0, [r4, #0]
 80128e2:	3008      	adds	r0, #8
 80128e4:	f7fe fbd4 	bl	8011090 <rcl_service_is_valid>
 80128e8:	b1e8      	cbz	r0, 8012926 <rcl_action_take_cancel_request+0x66>
 80128ea:	6820      	ldr	r0, [r4, #0]
 80128ec:	300c      	adds	r0, #12
 80128ee:	f7f9 f885 	bl	800b9fc <rcl_publisher_is_valid>
 80128f2:	b1c0      	cbz	r0, 8012926 <rcl_action_take_cancel_request+0x66>
 80128f4:	6820      	ldr	r0, [r4, #0]
 80128f6:	3010      	adds	r0, #16
 80128f8:	f7f9 f880 	bl	800b9fc <rcl_publisher_is_valid>
 80128fc:	b198      	cbz	r0, 8012926 <rcl_action_take_cancel_request+0x66>
 80128fe:	b1d5      	cbz	r5, 8012936 <rcl_action_take_cancel_request+0x76>
 8012900:	b1ce      	cbz	r6, 8012936 <rcl_action_take_cancel_request+0x76>
 8012902:	6820      	ldr	r0, [r4, #0]
 8012904:	4632      	mov	r2, r6
 8012906:	4629      	mov	r1, r5
 8012908:	3004      	adds	r0, #4
 801290a:	f7fe fb69 	bl	8010fe0 <rcl_take_request>
 801290e:	b148      	cbz	r0, 8012924 <rcl_action_take_cancel_request+0x64>
 8012910:	280a      	cmp	r0, #10
 8012912:	d007      	beq.n	8012924 <rcl_action_take_cancel_request+0x64>
 8012914:	f240 2259 	movw	r2, #601	@ 0x259
 8012918:	f640 0399 	movw	r3, #2201	@ 0x899
 801291c:	4290      	cmp	r0, r2
 801291e:	bf0c      	ite	eq
 8012920:	4618      	moveq	r0, r3
 8012922:	2001      	movne	r0, #1
 8012924:	bd70      	pop	{r4, r5, r6, pc}
 8012926:	f7f9 fffb 	bl	800c920 <rcutils_reset_error>
 801292a:	f640 0098 	movw	r0, #2200	@ 0x898
 801292e:	bd70      	pop	{r4, r5, r6, pc}
 8012930:	f640 0098 	movw	r0, #2200	@ 0x898
 8012934:	bd70      	pop	{r4, r5, r6, pc}
 8012936:	200b      	movs	r0, #11
 8012938:	bd70      	pop	{r4, r5, r6, pc}
 801293a:	f640 0098 	movw	r0, #2200	@ 0x898
 801293e:	4770      	bx	lr

08012940 <rcl_action_send_cancel_response>:
 8012940:	b398      	cbz	r0, 80129aa <rcl_action_send_cancel_response+0x6a>
 8012942:	b570      	push	{r4, r5, r6, lr}
 8012944:	4604      	mov	r4, r0
 8012946:	6800      	ldr	r0, [r0, #0]
 8012948:	b350      	cbz	r0, 80129a0 <rcl_action_send_cancel_response+0x60>
 801294a:	460d      	mov	r5, r1
 801294c:	4616      	mov	r6, r2
 801294e:	f7fe fb9f 	bl	8011090 <rcl_service_is_valid>
 8012952:	b300      	cbz	r0, 8012996 <rcl_action_send_cancel_response+0x56>
 8012954:	6820      	ldr	r0, [r4, #0]
 8012956:	3004      	adds	r0, #4
 8012958:	f7fe fb9a 	bl	8011090 <rcl_service_is_valid>
 801295c:	b1d8      	cbz	r0, 8012996 <rcl_action_send_cancel_response+0x56>
 801295e:	6820      	ldr	r0, [r4, #0]
 8012960:	3008      	adds	r0, #8
 8012962:	f7fe fb95 	bl	8011090 <rcl_service_is_valid>
 8012966:	b1b0      	cbz	r0, 8012996 <rcl_action_send_cancel_response+0x56>
 8012968:	6820      	ldr	r0, [r4, #0]
 801296a:	300c      	adds	r0, #12
 801296c:	f7f9 f846 	bl	800b9fc <rcl_publisher_is_valid>
 8012970:	b188      	cbz	r0, 8012996 <rcl_action_send_cancel_response+0x56>
 8012972:	6820      	ldr	r0, [r4, #0]
 8012974:	3010      	adds	r0, #16
 8012976:	f7f9 f841 	bl	800b9fc <rcl_publisher_is_valid>
 801297a:	b160      	cbz	r0, 8012996 <rcl_action_send_cancel_response+0x56>
 801297c:	b19d      	cbz	r5, 80129a6 <rcl_action_send_cancel_response+0x66>
 801297e:	b196      	cbz	r6, 80129a6 <rcl_action_send_cancel_response+0x66>
 8012980:	6820      	ldr	r0, [r4, #0]
 8012982:	4632      	mov	r2, r6
 8012984:	4629      	mov	r1, r5
 8012986:	3004      	adds	r0, #4
 8012988:	f7fe fb6a 	bl	8011060 <rcl_send_response>
 801298c:	b110      	cbz	r0, 8012994 <rcl_action_send_cancel_response+0x54>
 801298e:	2802      	cmp	r0, #2
 8012990:	bf18      	it	ne
 8012992:	2001      	movne	r0, #1
 8012994:	bd70      	pop	{r4, r5, r6, pc}
 8012996:	f7f9 ffc3 	bl	800c920 <rcutils_reset_error>
 801299a:	f640 0098 	movw	r0, #2200	@ 0x898
 801299e:	bd70      	pop	{r4, r5, r6, pc}
 80129a0:	f640 0098 	movw	r0, #2200	@ 0x898
 80129a4:	bd70      	pop	{r4, r5, r6, pc}
 80129a6:	200b      	movs	r0, #11
 80129a8:	bd70      	pop	{r4, r5, r6, pc}
 80129aa:	f640 0098 	movw	r0, #2200	@ 0x898
 80129ae:	4770      	bx	lr

080129b0 <rcl_action_wait_set_add_action_server>:
 80129b0:	2800      	cmp	r0, #0
 80129b2:	d04d      	beq.n	8012a50 <rcl_action_wait_set_add_action_server+0xa0>
 80129b4:	b570      	push	{r4, r5, r6, lr}
 80129b6:	460c      	mov	r4, r1
 80129b8:	b159      	cbz	r1, 80129d2 <rcl_action_wait_set_add_action_server+0x22>
 80129ba:	4605      	mov	r5, r0
 80129bc:	6808      	ldr	r0, [r1, #0]
 80129be:	b140      	cbz	r0, 80129d2 <rcl_action_wait_set_add_action_server+0x22>
 80129c0:	4616      	mov	r6, r2
 80129c2:	f7fe fb65 	bl	8011090 <rcl_service_is_valid>
 80129c6:	b120      	cbz	r0, 80129d2 <rcl_action_wait_set_add_action_server+0x22>
 80129c8:	6820      	ldr	r0, [r4, #0]
 80129ca:	3004      	adds	r0, #4
 80129cc:	f7fe fb60 	bl	8011090 <rcl_service_is_valid>
 80129d0:	b910      	cbnz	r0, 80129d8 <rcl_action_wait_set_add_action_server+0x28>
 80129d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80129d6:	bd70      	pop	{r4, r5, r6, pc}
 80129d8:	6820      	ldr	r0, [r4, #0]
 80129da:	3008      	adds	r0, #8
 80129dc:	f7fe fb58 	bl	8011090 <rcl_service_is_valid>
 80129e0:	2800      	cmp	r0, #0
 80129e2:	d0f6      	beq.n	80129d2 <rcl_action_wait_set_add_action_server+0x22>
 80129e4:	6820      	ldr	r0, [r4, #0]
 80129e6:	300c      	adds	r0, #12
 80129e8:	f7f9 f820 	bl	800ba2c <rcl_publisher_is_valid_except_context>
 80129ec:	2800      	cmp	r0, #0
 80129ee:	d0f0      	beq.n	80129d2 <rcl_action_wait_set_add_action_server+0x22>
 80129f0:	6820      	ldr	r0, [r4, #0]
 80129f2:	3010      	adds	r0, #16
 80129f4:	f7f9 f81a 	bl	800ba2c <rcl_publisher_is_valid_except_context>
 80129f8:	2800      	cmp	r0, #0
 80129fa:	d0ea      	beq.n	80129d2 <rcl_action_wait_set_add_action_server+0x22>
 80129fc:	6821      	ldr	r1, [r4, #0]
 80129fe:	4628      	mov	r0, r5
 8012a00:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8012a04:	f7ff face 	bl	8011fa4 <rcl_wait_set_add_service>
 8012a08:	2800      	cmp	r0, #0
 8012a0a:	d1e4      	bne.n	80129d6 <rcl_action_wait_set_add_action_server+0x26>
 8012a0c:	6821      	ldr	r1, [r4, #0]
 8012a0e:	4628      	mov	r0, r5
 8012a10:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8012a14:	3104      	adds	r1, #4
 8012a16:	f7ff fac5 	bl	8011fa4 <rcl_wait_set_add_service>
 8012a1a:	2800      	cmp	r0, #0
 8012a1c:	d1db      	bne.n	80129d6 <rcl_action_wait_set_add_action_server+0x26>
 8012a1e:	6821      	ldr	r1, [r4, #0]
 8012a20:	4628      	mov	r0, r5
 8012a22:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8012a26:	3108      	adds	r1, #8
 8012a28:	f7ff fabc 	bl	8011fa4 <rcl_wait_set_add_service>
 8012a2c:	2800      	cmp	r0, #0
 8012a2e:	d1d2      	bne.n	80129d6 <rcl_action_wait_set_add_action_server+0x26>
 8012a30:	6821      	ldr	r1, [r4, #0]
 8012a32:	4628      	mov	r0, r5
 8012a34:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8012a38:	3114      	adds	r1, #20
 8012a3a:	f7ff fa57 	bl	8011eec <rcl_wait_set_add_timer>
 8012a3e:	2800      	cmp	r0, #0
 8012a40:	d1c9      	bne.n	80129d6 <rcl_action_wait_set_add_action_server+0x26>
 8012a42:	2e00      	cmp	r6, #0
 8012a44:	d0c7      	beq.n	80129d6 <rcl_action_wait_set_add_action_server+0x26>
 8012a46:	6823      	ldr	r3, [r4, #0]
 8012a48:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8012a4c:	6033      	str	r3, [r6, #0]
 8012a4e:	bd70      	pop	{r4, r5, r6, pc}
 8012a50:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012a54:	4770      	bx	lr
 8012a56:	bf00      	nop

08012a58 <rcl_action_server_wait_set_get_entities_ready>:
 8012a58:	2800      	cmp	r0, #0
 8012a5a:	d05a      	beq.n	8012b12 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8012a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a5e:	460c      	mov	r4, r1
 8012a60:	b161      	cbz	r1, 8012a7c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012a62:	4605      	mov	r5, r0
 8012a64:	6808      	ldr	r0, [r1, #0]
 8012a66:	b148      	cbz	r0, 8012a7c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012a68:	4616      	mov	r6, r2
 8012a6a:	461f      	mov	r7, r3
 8012a6c:	f7fe fb10 	bl	8011090 <rcl_service_is_valid>
 8012a70:	b120      	cbz	r0, 8012a7c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012a72:	6820      	ldr	r0, [r4, #0]
 8012a74:	3004      	adds	r0, #4
 8012a76:	f7fe fb0b 	bl	8011090 <rcl_service_is_valid>
 8012a7a:	b910      	cbnz	r0, 8012a82 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8012a7c:	f640 0098 	movw	r0, #2200	@ 0x898
 8012a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a82:	6820      	ldr	r0, [r4, #0]
 8012a84:	3008      	adds	r0, #8
 8012a86:	f7fe fb03 	bl	8011090 <rcl_service_is_valid>
 8012a8a:	2800      	cmp	r0, #0
 8012a8c:	d0f6      	beq.n	8012a7c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012a8e:	6820      	ldr	r0, [r4, #0]
 8012a90:	300c      	adds	r0, #12
 8012a92:	f7f8 ffcb 	bl	800ba2c <rcl_publisher_is_valid_except_context>
 8012a96:	2800      	cmp	r0, #0
 8012a98:	d0f0      	beq.n	8012a7c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012a9a:	6820      	ldr	r0, [r4, #0]
 8012a9c:	3010      	adds	r0, #16
 8012a9e:	f7f8 ffc5 	bl	800ba2c <rcl_publisher_is_valid_except_context>
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	d0ea      	beq.n	8012a7c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012aa6:	b3be      	cbz	r6, 8012b18 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012aa8:	b3b7      	cbz	r7, 8012b18 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012aaa:	9b06      	ldr	r3, [sp, #24]
 8012aac:	b3a3      	cbz	r3, 8012b18 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012aae:	9b07      	ldr	r3, [sp, #28]
 8012ab0:	b393      	cbz	r3, 8012b18 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012ab2:	6821      	ldr	r1, [r4, #0]
 8012ab4:	692a      	ldr	r2, [r5, #16]
 8012ab6:	6a2c      	ldr	r4, [r5, #32]
 8012ab8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8012abc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8012ac0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8012ac4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8012ac8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8012acc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8012ad0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012ad4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8012ad8:	1a64      	subs	r4, r4, r1
 8012ada:	fab4 f484 	clz	r4, r4
 8012ade:	0964      	lsrs	r4, r4, #5
 8012ae0:	7034      	strb	r4, [r6, #0]
 8012ae2:	1d0c      	adds	r4, r1, #4
 8012ae4:	1b1b      	subs	r3, r3, r4
 8012ae6:	fab3 f383 	clz	r3, r3
 8012aea:	095b      	lsrs	r3, r3, #5
 8012aec:	f101 0408 	add.w	r4, r1, #8
 8012af0:	703b      	strb	r3, [r7, #0]
 8012af2:	f101 0314 	add.w	r3, r1, #20
 8012af6:	1b01      	subs	r1, r0, r4
 8012af8:	1ad3      	subs	r3, r2, r3
 8012afa:	fab1 f181 	clz	r1, r1
 8012afe:	9a06      	ldr	r2, [sp, #24]
 8012b00:	0949      	lsrs	r1, r1, #5
 8012b02:	7011      	strb	r1, [r2, #0]
 8012b04:	fab3 f383 	clz	r3, r3
 8012b08:	9a07      	ldr	r2, [sp, #28]
 8012b0a:	095b      	lsrs	r3, r3, #5
 8012b0c:	2000      	movs	r0, #0
 8012b0e:	7013      	strb	r3, [r2, #0]
 8012b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b12:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012b16:	4770      	bx	lr
 8012b18:	200b      	movs	r0, #11
 8012b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b1c <_execute_event_handler>:
 8012b1c:	2002      	movs	r0, #2
 8012b1e:	4770      	bx	lr

08012b20 <_cancel_goal_event_handler>:
 8012b20:	2003      	movs	r0, #3
 8012b22:	4770      	bx	lr

08012b24 <_succeed_event_handler>:
 8012b24:	2004      	movs	r0, #4
 8012b26:	4770      	bx	lr

08012b28 <_abort_event_handler>:
 8012b28:	2006      	movs	r0, #6
 8012b2a:	4770      	bx	lr

08012b2c <_canceled_event_handler>:
 8012b2c:	2005      	movs	r0, #5
 8012b2e:	4770      	bx	lr

08012b30 <rcl_action_transition_goal_state>:
 8012b30:	b2c2      	uxtb	r2, r0
 8012b32:	2a06      	cmp	r2, #6
 8012b34:	d80c      	bhi.n	8012b50 <rcl_action_transition_goal_state+0x20>
 8012b36:	2904      	cmp	r1, #4
 8012b38:	d80a      	bhi.n	8012b50 <rcl_action_transition_goal_state+0x20>
 8012b3a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012b3e:	b410      	push	{r4}
 8012b40:	1853      	adds	r3, r2, r1
 8012b42:	4c06      	ldr	r4, [pc, #24]	@ (8012b5c <rcl_action_transition_goal_state+0x2c>)
 8012b44:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012b48:	b123      	cbz	r3, 8012b54 <rcl_action_transition_goal_state+0x24>
 8012b4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b4e:	4718      	bx	r3
 8012b50:	2000      	movs	r0, #0
 8012b52:	4770      	bx	lr
 8012b54:	2000      	movs	r0, #0
 8012b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b5a:	4770      	bx	lr
 8012b5c:	08018d94 	.word	0x08018d94

08012b60 <rcl_action_get_zero_initialized_cancel_response>:
 8012b60:	b510      	push	{r4, lr}
 8012b62:	4c07      	ldr	r4, [pc, #28]	@ (8012b80 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8012b64:	4686      	mov	lr, r0
 8012b66:	4684      	mov	ip, r0
 8012b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b74:	6823      	ldr	r3, [r4, #0]
 8012b76:	f8cc 3000 	str.w	r3, [ip]
 8012b7a:	4670      	mov	r0, lr
 8012b7c:	bd10      	pop	{r4, pc}
 8012b7e:	bf00      	nop
 8012b80:	08018e20 	.word	0x08018e20

08012b84 <rclc_action_send_result_request>:
 8012b84:	b1d0      	cbz	r0, 8012bbc <rclc_action_send_result_request+0x38>
 8012b86:	b500      	push	{lr}
 8012b88:	4684      	mov	ip, r0
 8012b8a:	b087      	sub	sp, #28
 8012b8c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8012b90:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8012b94:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8012b98:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8012b9c:	f10d 0e08 	add.w	lr, sp, #8
 8012ba0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012ba4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012ba8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8012bac:	a902      	add	r1, sp, #8
 8012bae:	3010      	adds	r0, #16
 8012bb0:	f7ff fbda 	bl	8012368 <rcl_action_send_result_request>
 8012bb4:	b920      	cbnz	r0, 8012bc0 <rclc_action_send_result_request+0x3c>
 8012bb6:	b007      	add	sp, #28
 8012bb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8012bbc:	200b      	movs	r0, #11
 8012bbe:	4770      	bx	lr
 8012bc0:	9001      	str	r0, [sp, #4]
 8012bc2:	f7f9 fead 	bl	800c920 <rcutils_reset_error>
 8012bc6:	9801      	ldr	r0, [sp, #4]
 8012bc8:	b007      	add	sp, #28
 8012bca:	f85d fb04 	ldr.w	pc, [sp], #4
 8012bce:	bf00      	nop

08012bd0 <rclc_action_take_goal_handle>:
 8012bd0:	b160      	cbz	r0, 8012bec <rclc_action_take_goal_handle+0x1c>
 8012bd2:	6883      	ldr	r3, [r0, #8]
 8012bd4:	b143      	cbz	r3, 8012be8 <rclc_action_take_goal_handle+0x18>
 8012bd6:	6819      	ldr	r1, [r3, #0]
 8012bd8:	6081      	str	r1, [r0, #8]
 8012bda:	2200      	movs	r2, #0
 8012bdc:	721a      	strb	r2, [r3, #8]
 8012bde:	68c1      	ldr	r1, [r0, #12]
 8012be0:	6019      	str	r1, [r3, #0]
 8012be2:	621a      	str	r2, [r3, #32]
 8012be4:	849a      	strh	r2, [r3, #36]	@ 0x24
 8012be6:	60c3      	str	r3, [r0, #12]
 8012be8:	4618      	mov	r0, r3
 8012bea:	4770      	bx	lr
 8012bec:	4603      	mov	r3, r0
 8012bee:	e7fb      	b.n	8012be8 <rclc_action_take_goal_handle+0x18>

08012bf0 <rclc_action_remove_used_goal_handle>:
 8012bf0:	b180      	cbz	r0, 8012c14 <rclc_action_remove_used_goal_handle+0x24>
 8012bf2:	b179      	cbz	r1, 8012c14 <rclc_action_remove_used_goal_handle+0x24>
 8012bf4:	68c3      	ldr	r3, [r0, #12]
 8012bf6:	4299      	cmp	r1, r3
 8012bf8:	d00d      	beq.n	8012c16 <rclc_action_remove_used_goal_handle+0x26>
 8012bfa:	b12b      	cbz	r3, 8012c08 <rclc_action_remove_used_goal_handle+0x18>
 8012bfc:	681a      	ldr	r2, [r3, #0]
 8012bfe:	4291      	cmp	r1, r2
 8012c00:	d003      	beq.n	8012c0a <rclc_action_remove_used_goal_handle+0x1a>
 8012c02:	4613      	mov	r3, r2
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d1f9      	bne.n	8012bfc <rclc_action_remove_used_goal_handle+0xc>
 8012c08:	4770      	bx	lr
 8012c0a:	680a      	ldr	r2, [r1, #0]
 8012c0c:	601a      	str	r2, [r3, #0]
 8012c0e:	6883      	ldr	r3, [r0, #8]
 8012c10:	600b      	str	r3, [r1, #0]
 8012c12:	6081      	str	r1, [r0, #8]
 8012c14:	4770      	bx	lr
 8012c16:	680b      	ldr	r3, [r1, #0]
 8012c18:	60c3      	str	r3, [r0, #12]
 8012c1a:	e7f8      	b.n	8012c0e <rclc_action_remove_used_goal_handle+0x1e>

08012c1c <rclc_action_find_goal_handle_by_uuid>:
 8012c1c:	b538      	push	{r3, r4, r5, lr}
 8012c1e:	b180      	cbz	r0, 8012c42 <rclc_action_find_goal_handle_by_uuid+0x26>
 8012c20:	460d      	mov	r5, r1
 8012c22:	b181      	cbz	r1, 8012c46 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8012c24:	68c4      	ldr	r4, [r0, #12]
 8012c26:	b914      	cbnz	r4, 8012c2e <rclc_action_find_goal_handle_by_uuid+0x12>
 8012c28:	e009      	b.n	8012c3e <rclc_action_find_goal_handle_by_uuid+0x22>
 8012c2a:	6824      	ldr	r4, [r4, #0]
 8012c2c:	b13c      	cbz	r4, 8012c3e <rclc_action_find_goal_handle_by_uuid+0x22>
 8012c2e:	f104 0009 	add.w	r0, r4, #9
 8012c32:	2210      	movs	r2, #16
 8012c34:	4629      	mov	r1, r5
 8012c36:	f004 fd29 	bl	801768c <memcmp>
 8012c3a:	2800      	cmp	r0, #0
 8012c3c:	d1f5      	bne.n	8012c2a <rclc_action_find_goal_handle_by_uuid+0xe>
 8012c3e:	4620      	mov	r0, r4
 8012c40:	bd38      	pop	{r3, r4, r5, pc}
 8012c42:	4604      	mov	r4, r0
 8012c44:	e7fb      	b.n	8012c3e <rclc_action_find_goal_handle_by_uuid+0x22>
 8012c46:	460c      	mov	r4, r1
 8012c48:	e7f9      	b.n	8012c3e <rclc_action_find_goal_handle_by_uuid+0x22>
 8012c4a:	bf00      	nop

08012c4c <rclc_action_find_first_handle_by_status>:
 8012c4c:	b140      	cbz	r0, 8012c60 <rclc_action_find_first_handle_by_status+0x14>
 8012c4e:	68c0      	ldr	r0, [r0, #12]
 8012c50:	b910      	cbnz	r0, 8012c58 <rclc_action_find_first_handle_by_status+0xc>
 8012c52:	e005      	b.n	8012c60 <rclc_action_find_first_handle_by_status+0x14>
 8012c54:	6800      	ldr	r0, [r0, #0]
 8012c56:	b118      	cbz	r0, 8012c60 <rclc_action_find_first_handle_by_status+0x14>
 8012c58:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012c5c:	428b      	cmp	r3, r1
 8012c5e:	d1f9      	bne.n	8012c54 <rclc_action_find_first_handle_by_status+0x8>
 8012c60:	4770      	bx	lr
 8012c62:	bf00      	nop

08012c64 <rclc_action_find_first_terminated_handle>:
 8012c64:	b140      	cbz	r0, 8012c78 <rclc_action_find_first_terminated_handle+0x14>
 8012c66:	68c0      	ldr	r0, [r0, #12]
 8012c68:	b910      	cbnz	r0, 8012c70 <rclc_action_find_first_terminated_handle+0xc>
 8012c6a:	e005      	b.n	8012c78 <rclc_action_find_first_terminated_handle+0x14>
 8012c6c:	6800      	ldr	r0, [r0, #0]
 8012c6e:	b118      	cbz	r0, 8012c78 <rclc_action_find_first_terminated_handle+0x14>
 8012c70:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012c74:	2b03      	cmp	r3, #3
 8012c76:	ddf9      	ble.n	8012c6c <rclc_action_find_first_terminated_handle+0x8>
 8012c78:	4770      	bx	lr
 8012c7a:	bf00      	nop

08012c7c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8012c7c:	b170      	cbz	r0, 8012c9c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012c7e:	68c0      	ldr	r0, [r0, #12]
 8012c80:	b160      	cbz	r0, 8012c9c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012c82:	b410      	push	{r4}
 8012c84:	e001      	b.n	8012c8a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8012c86:	6800      	ldr	r0, [r0, #0]
 8012c88:	b128      	cbz	r0, 8012c96 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8012c8a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8012c8e:	4299      	cmp	r1, r3
 8012c90:	bf08      	it	eq
 8012c92:	4294      	cmpeq	r4, r2
 8012c94:	d1f7      	bne.n	8012c86 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8012c96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c9a:	4770      	bx	lr
 8012c9c:	4770      	bx	lr
 8012c9e:	bf00      	nop

08012ca0 <rclc_action_find_handle_by_result_request_sequence_number>:
 8012ca0:	b170      	cbz	r0, 8012cc0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012ca2:	68c0      	ldr	r0, [r0, #12]
 8012ca4:	b160      	cbz	r0, 8012cc0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012ca6:	b410      	push	{r4}
 8012ca8:	e001      	b.n	8012cae <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8012caa:	6800      	ldr	r0, [r0, #0]
 8012cac:	b128      	cbz	r0, 8012cba <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8012cae:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8012cb2:	4299      	cmp	r1, r3
 8012cb4:	bf08      	it	eq
 8012cb6:	4294      	cmpeq	r4, r2
 8012cb8:	d1f7      	bne.n	8012caa <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8012cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cbe:	4770      	bx	lr
 8012cc0:	4770      	bx	lr
 8012cc2:	bf00      	nop

08012cc4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8012cc4:	b170      	cbz	r0, 8012ce4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012cc6:	68c0      	ldr	r0, [r0, #12]
 8012cc8:	b160      	cbz	r0, 8012ce4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012cca:	b410      	push	{r4}
 8012ccc:	e001      	b.n	8012cd2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8012cce:	6800      	ldr	r0, [r0, #0]
 8012cd0:	b128      	cbz	r0, 8012cde <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8012cd2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8012cd6:	4299      	cmp	r1, r3
 8012cd8:	bf08      	it	eq
 8012cda:	4294      	cmpeq	r4, r2
 8012cdc:	d1f7      	bne.n	8012cce <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8012cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ce2:	4770      	bx	lr
 8012ce4:	4770      	bx	lr
 8012ce6:	bf00      	nop

08012ce8 <rclc_action_find_first_handle_with_goal_response>:
 8012ce8:	b140      	cbz	r0, 8012cfc <rclc_action_find_first_handle_with_goal_response+0x14>
 8012cea:	68c0      	ldr	r0, [r0, #12]
 8012cec:	b910      	cbnz	r0, 8012cf4 <rclc_action_find_first_handle_with_goal_response+0xc>
 8012cee:	e005      	b.n	8012cfc <rclc_action_find_first_handle_with_goal_response+0x14>
 8012cf0:	6800      	ldr	r0, [r0, #0]
 8012cf2:	b118      	cbz	r0, 8012cfc <rclc_action_find_first_handle_with_goal_response+0x14>
 8012cf4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d0f9      	beq.n	8012cf0 <rclc_action_find_first_handle_with_goal_response+0x8>
 8012cfc:	4770      	bx	lr
 8012cfe:	bf00      	nop

08012d00 <rclc_action_find_first_handle_with_result_response>:
 8012d00:	b140      	cbz	r0, 8012d14 <rclc_action_find_first_handle_with_result_response+0x14>
 8012d02:	68c0      	ldr	r0, [r0, #12]
 8012d04:	b910      	cbnz	r0, 8012d0c <rclc_action_find_first_handle_with_result_response+0xc>
 8012d06:	e005      	b.n	8012d14 <rclc_action_find_first_handle_with_result_response+0x14>
 8012d08:	6800      	ldr	r0, [r0, #0]
 8012d0a:	b118      	cbz	r0, 8012d14 <rclc_action_find_first_handle_with_result_response+0x14>
 8012d0c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d0f9      	beq.n	8012d08 <rclc_action_find_first_handle_with_result_response+0x8>
 8012d14:	4770      	bx	lr
 8012d16:	bf00      	nop

08012d18 <rclc_action_server_response_goal_request>:
 8012d18:	b198      	cbz	r0, 8012d42 <rclc_action_server_response_goal_request+0x2a>
 8012d1a:	b510      	push	{r4, lr}
 8012d1c:	6844      	ldr	r4, [r0, #4]
 8012d1e:	b086      	sub	sp, #24
 8012d20:	2200      	movs	r2, #0
 8012d22:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8012d26:	460b      	mov	r3, r1
 8012d28:	9205      	str	r2, [sp, #20]
 8012d2a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8012d2e:	aa03      	add	r2, sp, #12
 8012d30:	f104 0010 	add.w	r0, r4, #16
 8012d34:	f88d 300c 	strb.w	r3, [sp, #12]
 8012d38:	f7ff fd4a 	bl	80127d0 <rcl_action_send_goal_response>
 8012d3c:	b918      	cbnz	r0, 8012d46 <rclc_action_server_response_goal_request+0x2e>
 8012d3e:	b006      	add	sp, #24
 8012d40:	bd10      	pop	{r4, pc}
 8012d42:	200b      	movs	r0, #11
 8012d44:	4770      	bx	lr
 8012d46:	9001      	str	r0, [sp, #4]
 8012d48:	f7f9 fdea 	bl	800c920 <rcutils_reset_error>
 8012d4c:	9801      	ldr	r0, [sp, #4]
 8012d4e:	b006      	add	sp, #24
 8012d50:	bd10      	pop	{r4, pc}
 8012d52:	bf00      	nop
 8012d54:	0000      	movs	r0, r0
	...

08012d58 <rclc_action_server_goal_cancel_accept>:
 8012d58:	b310      	cbz	r0, 8012da0 <rclc_action_server_goal_cancel_accept+0x48>
 8012d5a:	b510      	push	{r4, lr}
 8012d5c:	b090      	sub	sp, #64	@ 0x40
 8012d5e:	4604      	mov	r4, r0
 8012d60:	a806      	add	r0, sp, #24
 8012d62:	f7ff fefd 	bl	8012b60 <rcl_action_get_zero_initialized_cancel_response>
 8012d66:	2300      	movs	r3, #0
 8012d68:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8012d6c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012d70:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8012d74:	f88d 3018 	strb.w	r3, [sp, #24]
 8012d78:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8012d7c:	f8cd d01c 	str.w	sp, [sp, #28]
 8012d80:	46ec      	mov	ip, sp
 8012d82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d86:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8012da8 <rclc_action_server_goal_cancel_accept+0x50>
 8012d8a:	6860      	ldr	r0, [r4, #4]
 8012d8c:	aa06      	add	r2, sp, #24
 8012d8e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8012d92:	3010      	adds	r0, #16
 8012d94:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012d98:	f7ff fdd2 	bl	8012940 <rcl_action_send_cancel_response>
 8012d9c:	b010      	add	sp, #64	@ 0x40
 8012d9e:	bd10      	pop	{r4, pc}
 8012da0:	200b      	movs	r0, #11
 8012da2:	4770      	bx	lr
 8012da4:	f3af 8000 	nop.w
 8012da8:	00000001 	.word	0x00000001
 8012dac:	00000001 	.word	0x00000001

08012db0 <rclc_action_server_goal_cancel_reject>:
 8012db0:	b082      	sub	sp, #8
 8012db2:	b530      	push	{r4, r5, lr}
 8012db4:	b08b      	sub	sp, #44	@ 0x2c
 8012db6:	ac0e      	add	r4, sp, #56	@ 0x38
 8012db8:	e884 000c 	stmia.w	r4, {r2, r3}
 8012dbc:	b188      	cbz	r0, 8012de2 <rclc_action_server_goal_cancel_reject+0x32>
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	a801      	add	r0, sp, #4
 8012dc2:	460d      	mov	r5, r1
 8012dc4:	f7ff fecc 	bl	8012b60 <rcl_action_get_zero_initialized_cancel_response>
 8012dc8:	aa01      	add	r2, sp, #4
 8012dca:	a90e      	add	r1, sp, #56	@ 0x38
 8012dcc:	f104 0010 	add.w	r0, r4, #16
 8012dd0:	f88d 5004 	strb.w	r5, [sp, #4]
 8012dd4:	f7ff fdb4 	bl	8012940 <rcl_action_send_cancel_response>
 8012dd8:	b00b      	add	sp, #44	@ 0x2c
 8012dda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012dde:	b002      	add	sp, #8
 8012de0:	4770      	bx	lr
 8012de2:	200b      	movs	r0, #11
 8012de4:	b00b      	add	sp, #44	@ 0x2c
 8012de6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012dea:	b002      	add	sp, #8
 8012dec:	4770      	bx	lr
 8012dee:	bf00      	nop

08012df0 <__atomic_load_8>:
 8012df0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012df4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012df8:	4a15      	ldr	r2, [pc, #84]	@ (8012e50 <__atomic_load_8+0x60>)
 8012dfa:	4b16      	ldr	r3, [pc, #88]	@ (8012e54 <__atomic_load_8+0x64>)
 8012dfc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012e00:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012e04:	fb02 f101 	mul.w	r1, r2, r1
 8012e08:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012e0c:	fba3 2301 	umull	r2, r3, r3, r1
 8012e10:	091b      	lsrs	r3, r3, #4
 8012e12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012e16:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8012e1a:	b4d0      	push	{r4, r6, r7}
 8012e1c:	4c0e      	ldr	r4, [pc, #56]	@ (8012e58 <__atomic_load_8+0x68>)
 8012e1e:	1ac9      	subs	r1, r1, r3
 8012e20:	1862      	adds	r2, r4, r1
 8012e22:	f04f 0c01 	mov.w	ip, #1
 8012e26:	e8d2 3f4f 	ldrexb	r3, [r2]
 8012e2a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8012e2e:	2e00      	cmp	r6, #0
 8012e30:	d1f9      	bne.n	8012e26 <__atomic_load_8+0x36>
 8012e32:	f3bf 8f5b 	dmb	ish
 8012e36:	b2db      	uxtb	r3, r3
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d1f4      	bne.n	8012e26 <__atomic_load_8+0x36>
 8012e3c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012e40:	f3bf 8f5b 	dmb	ish
 8012e44:	5463      	strb	r3, [r4, r1]
 8012e46:	4630      	mov	r0, r6
 8012e48:	4639      	mov	r1, r7
 8012e4a:	bcd0      	pop	{r4, r6, r7}
 8012e4c:	4770      	bx	lr
 8012e4e:	bf00      	nop
 8012e50:	27d4eb2d 	.word	0x27d4eb2d
 8012e54:	b21642c9 	.word	0xb21642c9
 8012e58:	2000dce0 	.word	0x2000dce0

08012e5c <__atomic_store_8>:
 8012e5c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012e60:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012e64:	b570      	push	{r4, r5, r6, lr}
 8012e66:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012e6a:	4c14      	ldr	r4, [pc, #80]	@ (8012ebc <__atomic_store_8+0x60>)
 8012e6c:	4d14      	ldr	r5, [pc, #80]	@ (8012ec0 <__atomic_store_8+0x64>)
 8012e6e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012e72:	fb04 f101 	mul.w	r1, r4, r1
 8012e76:	4c13      	ldr	r4, [pc, #76]	@ (8012ec4 <__atomic_store_8+0x68>)
 8012e78:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012e7c:	fba4 4e01 	umull	r4, lr, r4, r1
 8012e80:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8012e84:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8012e88:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8012e8c:	eba1 0e0e 	sub.w	lr, r1, lr
 8012e90:	eb05 0c0e 	add.w	ip, r5, lr
 8012e94:	f04f 0401 	mov.w	r4, #1
 8012e98:	e8dc 1f4f 	ldrexb	r1, [ip]
 8012e9c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8012ea0:	2e00      	cmp	r6, #0
 8012ea2:	d1f9      	bne.n	8012e98 <__atomic_store_8+0x3c>
 8012ea4:	f3bf 8f5b 	dmb	ish
 8012ea8:	b2c9      	uxtb	r1, r1
 8012eaa:	2900      	cmp	r1, #0
 8012eac:	d1f4      	bne.n	8012e98 <__atomic_store_8+0x3c>
 8012eae:	e9c0 2300 	strd	r2, r3, [r0]
 8012eb2:	f3bf 8f5b 	dmb	ish
 8012eb6:	f805 100e 	strb.w	r1, [r5, lr]
 8012eba:	bd70      	pop	{r4, r5, r6, pc}
 8012ebc:	27d4eb2d 	.word	0x27d4eb2d
 8012ec0:	2000dce0 	.word	0x2000dce0
 8012ec4:	b21642c9 	.word	0xb21642c9

08012ec8 <__atomic_exchange_8>:
 8012ec8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8012ecc:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8012ed0:	4916      	ldr	r1, [pc, #88]	@ (8012f2c <__atomic_exchange_8+0x64>)
 8012ed2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8012ed6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8012eda:	fb01 fc0c 	mul.w	ip, r1, ip
 8012ede:	4914      	ldr	r1, [pc, #80]	@ (8012f30 <__atomic_exchange_8+0x68>)
 8012ee0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8012ee4:	b570      	push	{r4, r5, r6, lr}
 8012ee6:	4605      	mov	r5, r0
 8012ee8:	fba1 010c 	umull	r0, r1, r1, ip
 8012eec:	0909      	lsrs	r1, r1, #4
 8012eee:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8012ef2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8012ef6:	4e0f      	ldr	r6, [pc, #60]	@ (8012f34 <__atomic_exchange_8+0x6c>)
 8012ef8:	ebac 0c01 	sub.w	ip, ip, r1
 8012efc:	eb06 010c 	add.w	r1, r6, ip
 8012f00:	f04f 0e01 	mov.w	lr, #1
 8012f04:	e8d1 4f4f 	ldrexb	r4, [r1]
 8012f08:	e8c1 ef40 	strexb	r0, lr, [r1]
 8012f0c:	2800      	cmp	r0, #0
 8012f0e:	d1f9      	bne.n	8012f04 <__atomic_exchange_8+0x3c>
 8012f10:	f3bf 8f5b 	dmb	ish
 8012f14:	b2e4      	uxtb	r4, r4
 8012f16:	2c00      	cmp	r4, #0
 8012f18:	d1f4      	bne.n	8012f04 <__atomic_exchange_8+0x3c>
 8012f1a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012f1e:	e9c5 2300 	strd	r2, r3, [r5]
 8012f22:	f3bf 8f5b 	dmb	ish
 8012f26:	f806 400c 	strb.w	r4, [r6, ip]
 8012f2a:	bd70      	pop	{r4, r5, r6, pc}
 8012f2c:	27d4eb2d 	.word	0x27d4eb2d
 8012f30:	b21642c9 	.word	0xb21642c9
 8012f34:	2000dce0 	.word	0x2000dce0

08012f38 <rcutils_get_env>:
 8012f38:	b168      	cbz	r0, 8012f56 <rcutils_get_env+0x1e>
 8012f3a:	b510      	push	{r4, lr}
 8012f3c:	460c      	mov	r4, r1
 8012f3e:	b129      	cbz	r1, 8012f4c <rcutils_get_env+0x14>
 8012f40:	f004 f800 	bl	8016f44 <getenv>
 8012f44:	b120      	cbz	r0, 8012f50 <rcutils_get_env+0x18>
 8012f46:	6020      	str	r0, [r4, #0]
 8012f48:	2000      	movs	r0, #0
 8012f4a:	bd10      	pop	{r4, pc}
 8012f4c:	4803      	ldr	r0, [pc, #12]	@ (8012f5c <rcutils_get_env+0x24>)
 8012f4e:	bd10      	pop	{r4, pc}
 8012f50:	4b03      	ldr	r3, [pc, #12]	@ (8012f60 <rcutils_get_env+0x28>)
 8012f52:	6023      	str	r3, [r4, #0]
 8012f54:	bd10      	pop	{r4, pc}
 8012f56:	4803      	ldr	r0, [pc, #12]	@ (8012f64 <rcutils_get_env+0x2c>)
 8012f58:	4770      	bx	lr
 8012f5a:	bf00      	nop
 8012f5c:	08018e60 	.word	0x08018e60
 8012f60:	08018f84 	.word	0x08018f84
 8012f64:	08018e44 	.word	0x08018e44

08012f68 <rcutils_is_directory>:
 8012f68:	2000      	movs	r0, #0
 8012f6a:	4770      	bx	lr

08012f6c <rcutils_join_path>:
 8012f6c:	b082      	sub	sp, #8
 8012f6e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012f72:	2000      	movs	r0, #0
 8012f74:	b002      	add	sp, #8
 8012f76:	4770      	bx	lr

08012f78 <rcutils_to_native_path>:
 8012f78:	b084      	sub	sp, #16
 8012f7a:	a801      	add	r0, sp, #4
 8012f7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8012f80:	b004      	add	sp, #16
 8012f82:	2000      	movs	r0, #0
 8012f84:	4770      	bx	lr
 8012f86:	bf00      	nop

08012f88 <rcutils_format_string_limit>:
 8012f88:	b40f      	push	{r0, r1, r2, r3}
 8012f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f8c:	b083      	sub	sp, #12
 8012f8e:	ac08      	add	r4, sp, #32
 8012f90:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012f92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012f96:	b34e      	cbz	r6, 8012fec <rcutils_format_string_limit+0x64>
 8012f98:	a808      	add	r0, sp, #32
 8012f9a:	f7f9 fc9d 	bl	800c8d8 <rcutils_allocator_is_valid>
 8012f9e:	b328      	cbz	r0, 8012fec <rcutils_format_string_limit+0x64>
 8012fa0:	2100      	movs	r1, #0
 8012fa2:	ab0f      	add	r3, sp, #60	@ 0x3c
 8012fa4:	4632      	mov	r2, r6
 8012fa6:	4608      	mov	r0, r1
 8012fa8:	e9cd 3300 	strd	r3, r3, [sp]
 8012fac:	f000 f8f4 	bl	8013198 <rcutils_vsnprintf>
 8012fb0:	1c43      	adds	r3, r0, #1
 8012fb2:	4605      	mov	r5, r0
 8012fb4:	d01a      	beq.n	8012fec <rcutils_format_string_limit+0x64>
 8012fb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012fb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012fba:	1c47      	adds	r7, r0, #1
 8012fbc:	429f      	cmp	r7, r3
 8012fbe:	bf84      	itt	hi
 8012fc0:	461f      	movhi	r7, r3
 8012fc2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8012fc6:	4638      	mov	r0, r7
 8012fc8:	9b08      	ldr	r3, [sp, #32]
 8012fca:	4798      	blx	r3
 8012fcc:	4604      	mov	r4, r0
 8012fce:	b168      	cbz	r0, 8012fec <rcutils_format_string_limit+0x64>
 8012fd0:	9b01      	ldr	r3, [sp, #4]
 8012fd2:	4632      	mov	r2, r6
 8012fd4:	4639      	mov	r1, r7
 8012fd6:	f000 f8df 	bl	8013198 <rcutils_vsnprintf>
 8012fda:	2800      	cmp	r0, #0
 8012fdc:	db02      	blt.n	8012fe4 <rcutils_format_string_limit+0x5c>
 8012fde:	2300      	movs	r3, #0
 8012fe0:	5563      	strb	r3, [r4, r5]
 8012fe2:	e004      	b.n	8012fee <rcutils_format_string_limit+0x66>
 8012fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fe6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012fe8:	4620      	mov	r0, r4
 8012fea:	4798      	blx	r3
 8012fec:	2400      	movs	r4, #0
 8012fee:	4620      	mov	r0, r4
 8012ff0:	b003      	add	sp, #12
 8012ff2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012ff6:	b004      	add	sp, #16
 8012ff8:	4770      	bx	lr
 8012ffa:	bf00      	nop

08012ffc <rcutils_repl_str>:
 8012ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013000:	ed2d 8b02 	vpush	{d8}
 8013004:	b087      	sub	sp, #28
 8013006:	4680      	mov	r8, r0
 8013008:	4608      	mov	r0, r1
 801300a:	f8cd 8004 	str.w	r8, [sp, #4]
 801300e:	ee08 2a10 	vmov	s16, r2
 8013012:	468a      	mov	sl, r1
 8013014:	4699      	mov	r9, r3
 8013016:	f7ed f8ed 	bl	80001f4 <strlen>
 801301a:	2600      	movs	r6, #0
 801301c:	4647      	mov	r7, r8
 801301e:	9002      	str	r0, [sp, #8]
 8013020:	46b3      	mov	fp, r6
 8013022:	2510      	movs	r5, #16
 8013024:	46b0      	mov	r8, r6
 8013026:	e01d      	b.n	8013064 <rcutils_repl_str+0x68>
 8013028:	f10b 0b01 	add.w	fp, fp, #1
 801302c:	455e      	cmp	r6, fp
 801302e:	d211      	bcs.n	8013054 <rcutils_repl_str+0x58>
 8013030:	442e      	add	r6, r5
 8013032:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013036:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801303a:	00b1      	lsls	r1, r6, #2
 801303c:	4798      	blx	r3
 801303e:	2800      	cmp	r0, #0
 8013040:	f000 8088 	beq.w	8013154 <rcutils_repl_str+0x158>
 8013044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013048:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801304c:	4680      	mov	r8, r0
 801304e:	bf28      	it	cs
 8013050:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8013054:	9a01      	ldr	r2, [sp, #4]
 8013056:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801305a:	1aa2      	subs	r2, r4, r2
 801305c:	f843 2c04 	str.w	r2, [r3, #-4]
 8013060:	9b02      	ldr	r3, [sp, #8]
 8013062:	18e7      	adds	r7, r4, r3
 8013064:	4651      	mov	r1, sl
 8013066:	4638      	mov	r0, r7
 8013068:	f004 fb61 	bl	801772e <strstr>
 801306c:	4604      	mov	r4, r0
 801306e:	4640      	mov	r0, r8
 8013070:	2c00      	cmp	r4, #0
 8013072:	d1d9      	bne.n	8013028 <rcutils_repl_str+0x2c>
 8013074:	46b8      	mov	r8, r7
 8013076:	4607      	mov	r7, r0
 8013078:	4640      	mov	r0, r8
 801307a:	f7ed f8bb 	bl	80001f4 <strlen>
 801307e:	9b01      	ldr	r3, [sp, #4]
 8013080:	eba8 0303 	sub.w	r3, r8, r3
 8013084:	181c      	adds	r4, r3, r0
 8013086:	9404      	str	r4, [sp, #16]
 8013088:	f1bb 0f00 	cmp.w	fp, #0
 801308c:	d04a      	beq.n	8013124 <rcutils_repl_str+0x128>
 801308e:	ee18 0a10 	vmov	r0, s16
 8013092:	f7ed f8af 	bl	80001f4 <strlen>
 8013096:	9b02      	ldr	r3, [sp, #8]
 8013098:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801309c:	1ac3      	subs	r3, r0, r3
 801309e:	fb0b 4303 	mla	r3, fp, r3, r4
 80130a2:	461a      	mov	r2, r3
 80130a4:	9305      	str	r3, [sp, #20]
 80130a6:	4606      	mov	r6, r0
 80130a8:	f8d9 3000 	ldr.w	r3, [r9]
 80130ac:	1c50      	adds	r0, r2, #1
 80130ae:	4798      	blx	r3
 80130b0:	9003      	str	r0, [sp, #12]
 80130b2:	2800      	cmp	r0, #0
 80130b4:	d04f      	beq.n	8013156 <rcutils_repl_str+0x15a>
 80130b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80130ba:	683a      	ldr	r2, [r7, #0]
 80130bc:	4641      	mov	r1, r8
 80130be:	f004 fbd8 	bl	8017872 <memcpy>
 80130c2:	683d      	ldr	r5, [r7, #0]
 80130c4:	9b03      	ldr	r3, [sp, #12]
 80130c6:	9701      	str	r7, [sp, #4]
 80130c8:	46ba      	mov	sl, r7
 80130ca:	441d      	add	r5, r3
 80130cc:	9f02      	ldr	r7, [sp, #8]
 80130ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80130d2:	2401      	movs	r4, #1
 80130d4:	46d1      	mov	r9, sl
 80130d6:	ee18 aa10 	vmov	sl, s16
 80130da:	e00a      	b.n	80130f2 <rcutils_repl_str+0xf6>
 80130dc:	f8d9 5000 	ldr.w	r5, [r9]
 80130e0:	1aaa      	subs	r2, r5, r2
 80130e2:	1885      	adds	r5, r0, r2
 80130e4:	f004 fbc5 	bl	8017872 <memcpy>
 80130e8:	45a3      	cmp	fp, r4
 80130ea:	f104 0201 	add.w	r2, r4, #1
 80130ee:	d935      	bls.n	801315c <rcutils_repl_str+0x160>
 80130f0:	4614      	mov	r4, r2
 80130f2:	4632      	mov	r2, r6
 80130f4:	4651      	mov	r1, sl
 80130f6:	4628      	mov	r0, r5
 80130f8:	f004 fbbb 	bl	8017872 <memcpy>
 80130fc:	f859 2b04 	ldr.w	r2, [r9], #4
 8013100:	45a3      	cmp	fp, r4
 8013102:	443a      	add	r2, r7
 8013104:	eb05 0006 	add.w	r0, r5, r6
 8013108:	eb08 0102 	add.w	r1, r8, r2
 801310c:	d1e6      	bne.n	80130dc <rcutils_repl_str+0xe0>
 801310e:	9b04      	ldr	r3, [sp, #16]
 8013110:	1a9a      	subs	r2, r3, r2
 8013112:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8013116:	f004 fbac 	bl	8017872 <memcpy>
 801311a:	9a03      	ldr	r2, [sp, #12]
 801311c:	9905      	ldr	r1, [sp, #20]
 801311e:	2300      	movs	r3, #0
 8013120:	5453      	strb	r3, [r2, r1]
 8013122:	e00b      	b.n	801313c <rcutils_repl_str+0x140>
 8013124:	4620      	mov	r0, r4
 8013126:	f8d9 3000 	ldr.w	r3, [r9]
 801312a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801312e:	3001      	adds	r0, #1
 8013130:	4798      	blx	r3
 8013132:	9003      	str	r0, [sp, #12]
 8013134:	b110      	cbz	r0, 801313c <rcutils_repl_str+0x140>
 8013136:	9901      	ldr	r1, [sp, #4]
 8013138:	f004 fb93 	bl	8017862 <strcpy>
 801313c:	4638      	mov	r0, r7
 801313e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013142:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013146:	4798      	blx	r3
 8013148:	9803      	ldr	r0, [sp, #12]
 801314a:	b007      	add	sp, #28
 801314c:	ecbd 8b02 	vpop	{d8}
 8013150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013154:	4647      	mov	r7, r8
 8013156:	2300      	movs	r3, #0
 8013158:	9303      	str	r3, [sp, #12]
 801315a:	e7ef      	b.n	801313c <rcutils_repl_str+0x140>
 801315c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8013160:	e7db      	b.n	801311a <rcutils_repl_str+0x11e>
 8013162:	bf00      	nop

08013164 <rcutils_snprintf>:
 8013164:	b40c      	push	{r2, r3}
 8013166:	b530      	push	{r4, r5, lr}
 8013168:	b083      	sub	sp, #12
 801316a:	ab06      	add	r3, sp, #24
 801316c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013170:	9301      	str	r3, [sp, #4]
 8013172:	b152      	cbz	r2, 801318a <rcutils_snprintf+0x26>
 8013174:	b138      	cbz	r0, 8013186 <rcutils_snprintf+0x22>
 8013176:	b141      	cbz	r1, 801318a <rcutils_snprintf+0x26>
 8013178:	f004 fa7a 	bl	8017670 <vsniprintf>
 801317c:	b003      	add	sp, #12
 801317e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013182:	b002      	add	sp, #8
 8013184:	4770      	bx	lr
 8013186:	2900      	cmp	r1, #0
 8013188:	d0f6      	beq.n	8013178 <rcutils_snprintf+0x14>
 801318a:	f004 fb3d 	bl	8017808 <__errno>
 801318e:	2316      	movs	r3, #22
 8013190:	6003      	str	r3, [r0, #0]
 8013192:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013196:	e7f1      	b.n	801317c <rcutils_snprintf+0x18>

08013198 <rcutils_vsnprintf>:
 8013198:	b570      	push	{r4, r5, r6, lr}
 801319a:	b13a      	cbz	r2, 80131ac <rcutils_vsnprintf+0x14>
 801319c:	b120      	cbz	r0, 80131a8 <rcutils_vsnprintf+0x10>
 801319e:	b129      	cbz	r1, 80131ac <rcutils_vsnprintf+0x14>
 80131a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131a4:	f004 ba64 	b.w	8017670 <vsniprintf>
 80131a8:	2900      	cmp	r1, #0
 80131aa:	d0f9      	beq.n	80131a0 <rcutils_vsnprintf+0x8>
 80131ac:	f004 fb2c 	bl	8017808 <__errno>
 80131b0:	2316      	movs	r3, #22
 80131b2:	6003      	str	r3, [r0, #0]
 80131b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80131b8:	bd70      	pop	{r4, r5, r6, pc}
 80131ba:	bf00      	nop

080131bc <rcutils_strdup>:
 80131bc:	b084      	sub	sp, #16
 80131be:	b570      	push	{r4, r5, r6, lr}
 80131c0:	b082      	sub	sp, #8
 80131c2:	ac07      	add	r4, sp, #28
 80131c4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80131c8:	4605      	mov	r5, r0
 80131ca:	b1b0      	cbz	r0, 80131fa <rcutils_strdup+0x3e>
 80131cc:	f7ed f812 	bl	80001f4 <strlen>
 80131d0:	1c42      	adds	r2, r0, #1
 80131d2:	9b07      	ldr	r3, [sp, #28]
 80131d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80131d6:	9201      	str	r2, [sp, #4]
 80131d8:	4606      	mov	r6, r0
 80131da:	4610      	mov	r0, r2
 80131dc:	4798      	blx	r3
 80131de:	4604      	mov	r4, r0
 80131e0:	b128      	cbz	r0, 80131ee <rcutils_strdup+0x32>
 80131e2:	9a01      	ldr	r2, [sp, #4]
 80131e4:	4629      	mov	r1, r5
 80131e6:	f004 fb44 	bl	8017872 <memcpy>
 80131ea:	2300      	movs	r3, #0
 80131ec:	55a3      	strb	r3, [r4, r6]
 80131ee:	4620      	mov	r0, r4
 80131f0:	b002      	add	sp, #8
 80131f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131f6:	b004      	add	sp, #16
 80131f8:	4770      	bx	lr
 80131fa:	4604      	mov	r4, r0
 80131fc:	e7f7      	b.n	80131ee <rcutils_strdup+0x32>
 80131fe:	bf00      	nop

08013200 <rcutils_strndup>:
 8013200:	b082      	sub	sp, #8
 8013202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013204:	ac06      	add	r4, sp, #24
 8013206:	e884 000c 	stmia.w	r4, {r2, r3}
 801320a:	4605      	mov	r5, r0
 801320c:	b188      	cbz	r0, 8013232 <rcutils_strndup+0x32>
 801320e:	1c4f      	adds	r7, r1, #1
 8013210:	460e      	mov	r6, r1
 8013212:	4638      	mov	r0, r7
 8013214:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013216:	4790      	blx	r2
 8013218:	4604      	mov	r4, r0
 801321a:	b128      	cbz	r0, 8013228 <rcutils_strndup+0x28>
 801321c:	463a      	mov	r2, r7
 801321e:	4629      	mov	r1, r5
 8013220:	f004 fb27 	bl	8017872 <memcpy>
 8013224:	2300      	movs	r3, #0
 8013226:	55a3      	strb	r3, [r4, r6]
 8013228:	4620      	mov	r0, r4
 801322a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801322e:	b002      	add	sp, #8
 8013230:	4770      	bx	lr
 8013232:	4604      	mov	r4, r0
 8013234:	e7f8      	b.n	8013228 <rcutils_strndup+0x28>
 8013236:	bf00      	nop

08013238 <rcutils_get_zero_initialized_string_map>:
 8013238:	4b01      	ldr	r3, [pc, #4]	@ (8013240 <rcutils_get_zero_initialized_string_map+0x8>)
 801323a:	2000      	movs	r0, #0
 801323c:	6018      	str	r0, [r3, #0]
 801323e:	4770      	bx	lr
 8013240:	2000dcf8 	.word	0x2000dcf8

08013244 <rcutils_string_map_reserve>:
 8013244:	2800      	cmp	r0, #0
 8013246:	d05f      	beq.n	8013308 <rcutils_string_map_reserve+0xc4>
 8013248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801324c:	460c      	mov	r4, r1
 801324e:	6801      	ldr	r1, [r0, #0]
 8013250:	b082      	sub	sp, #8
 8013252:	4605      	mov	r5, r0
 8013254:	b129      	cbz	r1, 8013262 <rcutils_string_map_reserve+0x1e>
 8013256:	68cb      	ldr	r3, [r1, #12]
 8013258:	42a3      	cmp	r3, r4
 801325a:	d906      	bls.n	801326a <rcutils_string_map_reserve+0x26>
 801325c:	461c      	mov	r4, r3
 801325e:	2900      	cmp	r1, #0
 8013260:	d1f9      	bne.n	8013256 <rcutils_string_map_reserve+0x12>
 8013262:	201f      	movs	r0, #31
 8013264:	b002      	add	sp, #8
 8013266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801326a:	688b      	ldr	r3, [r1, #8]
 801326c:	42a3      	cmp	r3, r4
 801326e:	d047      	beq.n	8013300 <rcutils_string_map_reserve+0xbc>
 8013270:	6a0e      	ldr	r6, [r1, #32]
 8013272:	2c00      	cmp	r4, #0
 8013274:	d034      	beq.n	80132e0 <rcutils_string_map_reserve+0x9c>
 8013276:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801327a:	d243      	bcs.n	8013304 <rcutils_string_map_reserve+0xc0>
 801327c:	00a7      	lsls	r7, r4, #2
 801327e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8013282:	6808      	ldr	r0, [r1, #0]
 8013284:	4632      	mov	r2, r6
 8013286:	4639      	mov	r1, r7
 8013288:	47c0      	blx	r8
 801328a:	2800      	cmp	r0, #0
 801328c:	d03a      	beq.n	8013304 <rcutils_string_map_reserve+0xc0>
 801328e:	682b      	ldr	r3, [r5, #0]
 8013290:	4632      	mov	r2, r6
 8013292:	6018      	str	r0, [r3, #0]
 8013294:	4639      	mov	r1, r7
 8013296:	6858      	ldr	r0, [r3, #4]
 8013298:	47c0      	blx	r8
 801329a:	2800      	cmp	r0, #0
 801329c:	d032      	beq.n	8013304 <rcutils_string_map_reserve+0xc0>
 801329e:	682d      	ldr	r5, [r5, #0]
 80132a0:	68ab      	ldr	r3, [r5, #8]
 80132a2:	6068      	str	r0, [r5, #4]
 80132a4:	42a3      	cmp	r3, r4
 80132a6:	d226      	bcs.n	80132f6 <rcutils_string_map_reserve+0xb2>
 80132a8:	682a      	ldr	r2, [r5, #0]
 80132aa:	eb00 0c07 	add.w	ip, r0, r7
 80132ae:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80132b2:	45e6      	cmp	lr, ip
 80132b4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80132b8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80132bc:	d203      	bcs.n	80132c6 <rcutils_string_map_reserve+0x82>
 80132be:	eb02 0c07 	add.w	ip, r2, r7
 80132c2:	4566      	cmp	r6, ip
 80132c4:	d322      	bcc.n	801330c <rcutils_string_map_reserve+0xc8>
 80132c6:	1ae3      	subs	r3, r4, r3
 80132c8:	009a      	lsls	r2, r3, #2
 80132ca:	4670      	mov	r0, lr
 80132cc:	2100      	movs	r1, #0
 80132ce:	9201      	str	r2, [sp, #4]
 80132d0:	f004 fa06 	bl	80176e0 <memset>
 80132d4:	9a01      	ldr	r2, [sp, #4]
 80132d6:	2100      	movs	r1, #0
 80132d8:	4630      	mov	r0, r6
 80132da:	f004 fa01 	bl	80176e0 <memset>
 80132de:	e00a      	b.n	80132f6 <rcutils_string_map_reserve+0xb2>
 80132e0:	694f      	ldr	r7, [r1, #20]
 80132e2:	6808      	ldr	r0, [r1, #0]
 80132e4:	4631      	mov	r1, r6
 80132e6:	47b8      	blx	r7
 80132e8:	682b      	ldr	r3, [r5, #0]
 80132ea:	4631      	mov	r1, r6
 80132ec:	6858      	ldr	r0, [r3, #4]
 80132ee:	601c      	str	r4, [r3, #0]
 80132f0:	47b8      	blx	r7
 80132f2:	682d      	ldr	r5, [r5, #0]
 80132f4:	606c      	str	r4, [r5, #4]
 80132f6:	2000      	movs	r0, #0
 80132f8:	60ac      	str	r4, [r5, #8]
 80132fa:	b002      	add	sp, #8
 80132fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013300:	2000      	movs	r0, #0
 8013302:	e7af      	b.n	8013264 <rcutils_string_map_reserve+0x20>
 8013304:	200a      	movs	r0, #10
 8013306:	e7ad      	b.n	8013264 <rcutils_string_map_reserve+0x20>
 8013308:	200b      	movs	r0, #11
 801330a:	4770      	bx	lr
 801330c:	1f0b      	subs	r3, r1, #4
 801330e:	4418      	add	r0, r3
 8013310:	4413      	add	r3, r2
 8013312:	3a04      	subs	r2, #4
 8013314:	4417      	add	r7, r2
 8013316:	2200      	movs	r2, #0
 8013318:	f843 2f04 	str.w	r2, [r3, #4]!
 801331c:	42bb      	cmp	r3, r7
 801331e:	f840 2f04 	str.w	r2, [r0, #4]!
 8013322:	d1f9      	bne.n	8013318 <rcutils_string_map_reserve+0xd4>
 8013324:	e7e7      	b.n	80132f6 <rcutils_string_map_reserve+0xb2>
 8013326:	bf00      	nop

08013328 <rcutils_string_map_init>:
 8013328:	b082      	sub	sp, #8
 801332a:	b570      	push	{r4, r5, r6, lr}
 801332c:	ac04      	add	r4, sp, #16
 801332e:	e884 000c 	stmia.w	r4, {r2, r3}
 8013332:	b380      	cbz	r0, 8013396 <rcutils_string_map_init+0x6e>
 8013334:	6806      	ldr	r6, [r0, #0]
 8013336:	4604      	mov	r4, r0
 8013338:	b12e      	cbz	r6, 8013346 <rcutils_string_map_init+0x1e>
 801333a:	251e      	movs	r5, #30
 801333c:	4628      	mov	r0, r5
 801333e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013342:	b002      	add	sp, #8
 8013344:	4770      	bx	lr
 8013346:	a804      	add	r0, sp, #16
 8013348:	460d      	mov	r5, r1
 801334a:	f7f9 fac5 	bl	800c8d8 <rcutils_allocator_is_valid>
 801334e:	b310      	cbz	r0, 8013396 <rcutils_string_map_init+0x6e>
 8013350:	9b04      	ldr	r3, [sp, #16]
 8013352:	9908      	ldr	r1, [sp, #32]
 8013354:	2024      	movs	r0, #36	@ 0x24
 8013356:	4798      	blx	r3
 8013358:	6020      	str	r0, [r4, #0]
 801335a:	b310      	cbz	r0, 80133a2 <rcutils_string_map_init+0x7a>
 801335c:	f10d 0e10 	add.w	lr, sp, #16
 8013360:	e9c0 6600 	strd	r6, r6, [r0]
 8013364:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8013368:	f100 0c10 	add.w	ip, r0, #16
 801336c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013370:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013374:	f8de 3000 	ldr.w	r3, [lr]
 8013378:	f8cc 3000 	str.w	r3, [ip]
 801337c:	4629      	mov	r1, r5
 801337e:	4620      	mov	r0, r4
 8013380:	f7ff ff60 	bl	8013244 <rcutils_string_map_reserve>
 8013384:	4605      	mov	r5, r0
 8013386:	2800      	cmp	r0, #0
 8013388:	d0d8      	beq.n	801333c <rcutils_string_map_init+0x14>
 801338a:	9b05      	ldr	r3, [sp, #20]
 801338c:	9908      	ldr	r1, [sp, #32]
 801338e:	6820      	ldr	r0, [r4, #0]
 8013390:	4798      	blx	r3
 8013392:	6026      	str	r6, [r4, #0]
 8013394:	e7d2      	b.n	801333c <rcutils_string_map_init+0x14>
 8013396:	250b      	movs	r5, #11
 8013398:	4628      	mov	r0, r5
 801339a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801339e:	b002      	add	sp, #8
 80133a0:	4770      	bx	lr
 80133a2:	250a      	movs	r5, #10
 80133a4:	e7ca      	b.n	801333c <rcutils_string_map_init+0x14>
 80133a6:	bf00      	nop

080133a8 <rcutils_string_map_fini>:
 80133a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133ac:	b082      	sub	sp, #8
 80133ae:	2800      	cmp	r0, #0
 80133b0:	d03a      	beq.n	8013428 <rcutils_string_map_fini+0x80>
 80133b2:	6804      	ldr	r4, [r0, #0]
 80133b4:	4606      	mov	r6, r0
 80133b6:	2c00      	cmp	r4, #0
 80133b8:	d032      	beq.n	8013420 <rcutils_string_map_fini+0x78>
 80133ba:	68a3      	ldr	r3, [r4, #8]
 80133bc:	b32b      	cbz	r3, 801340a <rcutils_string_map_fini+0x62>
 80133be:	2500      	movs	r5, #0
 80133c0:	6822      	ldr	r2, [r4, #0]
 80133c2:	462f      	mov	r7, r5
 80133c4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80133c8:	b1e0      	cbz	r0, 8013404 <rcutils_string_map_fini+0x5c>
 80133ca:	6a21      	ldr	r1, [r4, #32]
 80133cc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80133d0:	9101      	str	r1, [sp, #4]
 80133d2:	47c0      	blx	r8
 80133d4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80133d8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80133dc:	9901      	ldr	r1, [sp, #4]
 80133de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80133e2:	47c0      	blx	r8
 80133e4:	68e3      	ldr	r3, [r4, #12]
 80133e6:	6862      	ldr	r2, [r4, #4]
 80133e8:	3b01      	subs	r3, #1
 80133ea:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80133ee:	60e3      	str	r3, [r4, #12]
 80133f0:	6834      	ldr	r4, [r6, #0]
 80133f2:	68a3      	ldr	r3, [r4, #8]
 80133f4:	3501      	adds	r5, #1
 80133f6:	429d      	cmp	r5, r3
 80133f8:	d207      	bcs.n	801340a <rcutils_string_map_fini+0x62>
 80133fa:	6822      	ldr	r2, [r4, #0]
 80133fc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013400:	2800      	cmp	r0, #0
 8013402:	d1e2      	bne.n	80133ca <rcutils_string_map_fini+0x22>
 8013404:	3501      	adds	r5, #1
 8013406:	429d      	cmp	r5, r3
 8013408:	d3dc      	bcc.n	80133c4 <rcutils_string_map_fini+0x1c>
 801340a:	2100      	movs	r1, #0
 801340c:	4630      	mov	r0, r6
 801340e:	f7ff ff19 	bl	8013244 <rcutils_string_map_reserve>
 8013412:	4604      	mov	r4, r0
 8013414:	b920      	cbnz	r0, 8013420 <rcutils_string_map_fini+0x78>
 8013416:	6830      	ldr	r0, [r6, #0]
 8013418:	6943      	ldr	r3, [r0, #20]
 801341a:	6a01      	ldr	r1, [r0, #32]
 801341c:	4798      	blx	r3
 801341e:	6034      	str	r4, [r6, #0]
 8013420:	4620      	mov	r0, r4
 8013422:	b002      	add	sp, #8
 8013424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013428:	240b      	movs	r4, #11
 801342a:	4620      	mov	r0, r4
 801342c:	b002      	add	sp, #8
 801342e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013432:	bf00      	nop

08013434 <rcutils_string_map_getn>:
 8013434:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013438:	b300      	cbz	r0, 801347c <rcutils_string_map_getn+0x48>
 801343a:	6807      	ldr	r7, [r0, #0]
 801343c:	b1ff      	cbz	r7, 801347e <rcutils_string_map_getn+0x4a>
 801343e:	4688      	mov	r8, r1
 8013440:	b1e1      	cbz	r1, 801347c <rcutils_string_map_getn+0x48>
 8013442:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8013446:	683e      	ldr	r6, [r7, #0]
 8013448:	f1ba 0f00 	cmp.w	sl, #0
 801344c:	d016      	beq.n	801347c <rcutils_string_map_getn+0x48>
 801344e:	4691      	mov	r9, r2
 8013450:	3e04      	subs	r6, #4
 8013452:	2400      	movs	r4, #0
 8013454:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8013458:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801345c:	4628      	mov	r0, r5
 801345e:	3401      	adds	r4, #1
 8013460:	b155      	cbz	r5, 8013478 <rcutils_string_map_getn+0x44>
 8013462:	f7ec fec7 	bl	80001f4 <strlen>
 8013466:	4548      	cmp	r0, r9
 8013468:	4602      	mov	r2, r0
 801346a:	4629      	mov	r1, r5
 801346c:	bf38      	it	cc
 801346e:	464a      	movcc	r2, r9
 8013470:	4640      	mov	r0, r8
 8013472:	f004 f94a 	bl	801770a <strncmp>
 8013476:	b128      	cbz	r0, 8013484 <rcutils_string_map_getn+0x50>
 8013478:	45a2      	cmp	sl, r4
 801347a:	d1eb      	bne.n	8013454 <rcutils_string_map_getn+0x20>
 801347c:	2700      	movs	r7, #0
 801347e:	4638      	mov	r0, r7
 8013480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f853 700b 	ldr.w	r7, [r3, fp]
 801348a:	4638      	mov	r0, r7
 801348c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013490 <rmw_get_zero_initialized_context>:
 8013490:	b510      	push	{r4, lr}
 8013492:	4604      	mov	r4, r0
 8013494:	3010      	adds	r0, #16
 8013496:	f000 f80b 	bl	80134b0 <rmw_get_zero_initialized_init_options>
 801349a:	2300      	movs	r3, #0
 801349c:	2000      	movs	r0, #0
 801349e:	2100      	movs	r1, #0
 80134a0:	e9c4 0100 	strd	r0, r1, [r4]
 80134a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80134a8:	60a3      	str	r3, [r4, #8]
 80134aa:	4620      	mov	r0, r4
 80134ac:	bd10      	pop	{r4, pc}
 80134ae:	bf00      	nop

080134b0 <rmw_get_zero_initialized_init_options>:
 80134b0:	b510      	push	{r4, lr}
 80134b2:	2238      	movs	r2, #56	@ 0x38
 80134b4:	4604      	mov	r4, r0
 80134b6:	2100      	movs	r1, #0
 80134b8:	f004 f912 	bl	80176e0 <memset>
 80134bc:	f104 0010 	add.w	r0, r4, #16
 80134c0:	f000 f806 	bl	80134d0 <rmw_get_default_security_options>
 80134c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80134c8:	60e3      	str	r3, [r4, #12]
 80134ca:	4620      	mov	r0, r4
 80134cc:	bd10      	pop	{r4, pc}
 80134ce:	bf00      	nop

080134d0 <rmw_get_default_security_options>:
 80134d0:	2200      	movs	r2, #0
 80134d2:	7002      	strb	r2, [r0, #0]
 80134d4:	6042      	str	r2, [r0, #4]
 80134d6:	4770      	bx	lr

080134d8 <rmw_subscription_content_filter_options_fini>:
 80134d8:	b1b0      	cbz	r0, 8013508 <rmw_subscription_content_filter_options_fini+0x30>
 80134da:	b538      	push	{r3, r4, r5, lr}
 80134dc:	4604      	mov	r4, r0
 80134de:	4608      	mov	r0, r1
 80134e0:	460d      	mov	r5, r1
 80134e2:	f7f9 f9f9 	bl	800c8d8 <rcutils_allocator_is_valid>
 80134e6:	b168      	cbz	r0, 8013504 <rmw_subscription_content_filter_options_fini+0x2c>
 80134e8:	6820      	ldr	r0, [r4, #0]
 80134ea:	b120      	cbz	r0, 80134f6 <rmw_subscription_content_filter_options_fini+0x1e>
 80134ec:	686b      	ldr	r3, [r5, #4]
 80134ee:	6929      	ldr	r1, [r5, #16]
 80134f0:	4798      	blx	r3
 80134f2:	2300      	movs	r3, #0
 80134f4:	6023      	str	r3, [r4, #0]
 80134f6:	1d20      	adds	r0, r4, #4
 80134f8:	f003 fbd0 	bl	8016c9c <rcutils_string_array_fini>
 80134fc:	3800      	subs	r0, #0
 80134fe:	bf18      	it	ne
 8013500:	2001      	movne	r0, #1
 8013502:	bd38      	pop	{r3, r4, r5, pc}
 8013504:	200b      	movs	r0, #11
 8013506:	bd38      	pop	{r3, r4, r5, pc}
 8013508:	200b      	movs	r0, #11
 801350a:	4770      	bx	lr

0801350c <rmw_get_default_subscription_options>:
 801350c:	2200      	movs	r2, #0
 801350e:	e9c0 2200 	strd	r2, r2, [r0]
 8013512:	6082      	str	r2, [r0, #8]
 8013514:	4770      	bx	lr
 8013516:	bf00      	nop

08013518 <rmw_time_equal>:
 8013518:	b4f0      	push	{r4, r5, r6, r7}
 801351a:	b084      	sub	sp, #16
 801351c:	ac04      	add	r4, sp, #16
 801351e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013522:	4603      	mov	r3, r0
 8013524:	4924      	ldr	r1, [pc, #144]	@ (80135b8 <rmw_time_equal+0xa0>)
 8013526:	9e03      	ldr	r6, [sp, #12]
 8013528:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801352c:	2202      	movs	r2, #2
 801352e:	4299      	cmp	r1, r3
 8013530:	41aa      	sbcs	r2, r5
 8013532:	d330      	bcc.n	8013596 <rmw_time_equal+0x7e>
 8013534:	4c21      	ldr	r4, [pc, #132]	@ (80135bc <rmw_time_equal+0xa4>)
 8013536:	fba3 3204 	umull	r3, r2, r3, r4
 801353a:	fb04 2205 	mla	r2, r4, r5, r2
 801353e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013542:	43dd      	mvns	r5, r3
 8013544:	1a8c      	subs	r4, r1, r2
 8013546:	4285      	cmp	r5, r0
 8013548:	41b4      	sbcs	r4, r6
 801354a:	d332      	bcc.n	80135b2 <rmw_time_equal+0x9a>
 801354c:	eb10 0c03 	adds.w	ip, r0, r3
 8013550:	eb42 0106 	adc.w	r1, r2, r6
 8013554:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8013558:	4817      	ldr	r0, [pc, #92]	@ (80135b8 <rmw_time_equal+0xa0>)
 801355a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801355c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801355e:	2202      	movs	r2, #2
 8013560:	4298      	cmp	r0, r3
 8013562:	41b2      	sbcs	r2, r6
 8013564:	d31c      	bcc.n	80135a0 <rmw_time_equal+0x88>
 8013566:	4c15      	ldr	r4, [pc, #84]	@ (80135bc <rmw_time_equal+0xa4>)
 8013568:	fba3 3204 	umull	r3, r2, r3, r4
 801356c:	fb04 2206 	mla	r2, r4, r6, r2
 8013570:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8013574:	43de      	mvns	r6, r3
 8013576:	1a84      	subs	r4, r0, r2
 8013578:	42ae      	cmp	r6, r5
 801357a:	41bc      	sbcs	r4, r7
 801357c:	d315      	bcc.n	80135aa <rmw_time_equal+0x92>
 801357e:	195b      	adds	r3, r3, r5
 8013580:	eb42 0207 	adc.w	r2, r2, r7
 8013584:	428a      	cmp	r2, r1
 8013586:	bf08      	it	eq
 8013588:	4563      	cmpeq	r3, ip
 801358a:	bf0c      	ite	eq
 801358c:	2001      	moveq	r0, #1
 801358e:	2000      	movne	r0, #0
 8013590:	b004      	add	sp, #16
 8013592:	bcf0      	pop	{r4, r5, r6, r7}
 8013594:	4770      	bx	lr
 8013596:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801359a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801359e:	e7d9      	b.n	8013554 <rmw_time_equal+0x3c>
 80135a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80135a4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80135a8:	e7ec      	b.n	8013584 <rmw_time_equal+0x6c>
 80135aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80135ae:	4602      	mov	r2, r0
 80135b0:	e7e8      	b.n	8013584 <rmw_time_equal+0x6c>
 80135b2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80135b6:	e7cd      	b.n	8013554 <rmw_time_equal+0x3c>
 80135b8:	25c17d04 	.word	0x25c17d04
 80135bc:	3b9aca00 	.word	0x3b9aca00

080135c0 <rmw_time_total_nsec>:
 80135c0:	b470      	push	{r4, r5, r6}
 80135c2:	b085      	sub	sp, #20
 80135c4:	ac04      	add	r4, sp, #16
 80135c6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80135ca:	4603      	mov	r3, r0
 80135cc:	4912      	ldr	r1, [pc, #72]	@ (8013618 <rmw_time_total_nsec+0x58>)
 80135ce:	9e03      	ldr	r6, [sp, #12]
 80135d0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80135d4:	2202      	movs	r2, #2
 80135d6:	4299      	cmp	r1, r3
 80135d8:	41aa      	sbcs	r2, r5
 80135da:	d311      	bcc.n	8013600 <rmw_time_total_nsec+0x40>
 80135dc:	4c0f      	ldr	r4, [pc, #60]	@ (801361c <rmw_time_total_nsec+0x5c>)
 80135de:	fba3 3204 	umull	r3, r2, r3, r4
 80135e2:	fb04 2205 	mla	r2, r4, r5, r2
 80135e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80135ea:	43dd      	mvns	r5, r3
 80135ec:	1a8c      	subs	r4, r1, r2
 80135ee:	4285      	cmp	r5, r0
 80135f0:	41b4      	sbcs	r4, r6
 80135f2:	d30c      	bcc.n	801360e <rmw_time_total_nsec+0x4e>
 80135f4:	1818      	adds	r0, r3, r0
 80135f6:	eb42 0106 	adc.w	r1, r2, r6
 80135fa:	b005      	add	sp, #20
 80135fc:	bc70      	pop	{r4, r5, r6}
 80135fe:	4770      	bx	lr
 8013600:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013604:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013608:	b005      	add	sp, #20
 801360a:	bc70      	pop	{r4, r5, r6}
 801360c:	4770      	bx	lr
 801360e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013612:	b005      	add	sp, #20
 8013614:	bc70      	pop	{r4, r5, r6}
 8013616:	4770      	bx	lr
 8013618:	25c17d04 	.word	0x25c17d04
 801361c:	3b9aca00 	.word	0x3b9aca00

08013620 <rmw_get_zero_initialized_message_info>:
 8013620:	b510      	push	{r4, lr}
 8013622:	2240      	movs	r2, #64	@ 0x40
 8013624:	4604      	mov	r4, r0
 8013626:	2100      	movs	r1, #0
 8013628:	f004 f85a 	bl	80176e0 <memset>
 801362c:	4620      	mov	r0, r4
 801362e:	bd10      	pop	{r4, pc}

08013630 <rmw_validate_full_topic_name>:
 8013630:	2800      	cmp	r0, #0
 8013632:	d057      	beq.n	80136e4 <rmw_validate_full_topic_name+0xb4>
 8013634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013638:	460d      	mov	r5, r1
 801363a:	2900      	cmp	r1, #0
 801363c:	d054      	beq.n	80136e8 <rmw_validate_full_topic_name+0xb8>
 801363e:	4616      	mov	r6, r2
 8013640:	4604      	mov	r4, r0
 8013642:	f7ec fdd7 	bl	80001f4 <strlen>
 8013646:	b148      	cbz	r0, 801365c <rmw_validate_full_topic_name+0x2c>
 8013648:	7823      	ldrb	r3, [r4, #0]
 801364a:	2b2f      	cmp	r3, #47	@ 0x2f
 801364c:	d00d      	beq.n	801366a <rmw_validate_full_topic_name+0x3a>
 801364e:	2302      	movs	r3, #2
 8013650:	602b      	str	r3, [r5, #0]
 8013652:	b13e      	cbz	r6, 8013664 <rmw_validate_full_topic_name+0x34>
 8013654:	2000      	movs	r0, #0
 8013656:	6030      	str	r0, [r6, #0]
 8013658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801365c:	2301      	movs	r3, #1
 801365e:	602b      	str	r3, [r5, #0]
 8013660:	2e00      	cmp	r6, #0
 8013662:	d1f7      	bne.n	8013654 <rmw_validate_full_topic_name+0x24>
 8013664:	2000      	movs	r0, #0
 8013666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801366a:	1e43      	subs	r3, r0, #1
 801366c:	5ce2      	ldrb	r2, [r4, r3]
 801366e:	2a2f      	cmp	r2, #47	@ 0x2f
 8013670:	d03c      	beq.n	80136ec <rmw_validate_full_topic_name+0xbc>
 8013672:	1e63      	subs	r3, r4, #1
 8013674:	eb03 0800 	add.w	r8, r3, r0
 8013678:	f1c4 0e01 	rsb	lr, r4, #1
 801367c:	eb0e 0703 	add.w	r7, lr, r3
 8013680:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8013684:	f021 0220 	bic.w	r2, r1, #32
 8013688:	3a41      	subs	r2, #65	@ 0x41
 801368a:	2a19      	cmp	r2, #25
 801368c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8013690:	d90b      	bls.n	80136aa <rmw_validate_full_topic_name+0x7a>
 8013692:	295f      	cmp	r1, #95	@ 0x5f
 8013694:	d009      	beq.n	80136aa <rmw_validate_full_topic_name+0x7a>
 8013696:	f1bc 0f0a 	cmp.w	ip, #10
 801369a:	d906      	bls.n	80136aa <rmw_validate_full_topic_name+0x7a>
 801369c:	2304      	movs	r3, #4
 801369e:	602b      	str	r3, [r5, #0]
 80136a0:	2e00      	cmp	r6, #0
 80136a2:	d0df      	beq.n	8013664 <rmw_validate_full_topic_name+0x34>
 80136a4:	6037      	str	r7, [r6, #0]
 80136a6:	2000      	movs	r0, #0
 80136a8:	e7d6      	b.n	8013658 <rmw_validate_full_topic_name+0x28>
 80136aa:	4543      	cmp	r3, r8
 80136ac:	d1e6      	bne.n	801367c <rmw_validate_full_topic_name+0x4c>
 80136ae:	4f1a      	ldr	r7, [pc, #104]	@ (8013718 <rmw_validate_full_topic_name+0xe8>)
 80136b0:	2301      	movs	r3, #1
 80136b2:	e004      	b.n	80136be <rmw_validate_full_topic_name+0x8e>
 80136b4:	4298      	cmp	r0, r3
 80136b6:	f104 0401 	add.w	r4, r4, #1
 80136ba:	d91c      	bls.n	80136f6 <rmw_validate_full_topic_name+0xc6>
 80136bc:	4613      	mov	r3, r2
 80136be:	4298      	cmp	r0, r3
 80136c0:	f103 0201 	add.w	r2, r3, #1
 80136c4:	d0f6      	beq.n	80136b4 <rmw_validate_full_topic_name+0x84>
 80136c6:	7821      	ldrb	r1, [r4, #0]
 80136c8:	292f      	cmp	r1, #47	@ 0x2f
 80136ca:	d1f3      	bne.n	80136b4 <rmw_validate_full_topic_name+0x84>
 80136cc:	7861      	ldrb	r1, [r4, #1]
 80136ce:	292f      	cmp	r1, #47	@ 0x2f
 80136d0:	d01c      	beq.n	801370c <rmw_validate_full_topic_name+0xdc>
 80136d2:	5dc9      	ldrb	r1, [r1, r7]
 80136d4:	0749      	lsls	r1, r1, #29
 80136d6:	d5ed      	bpl.n	80136b4 <rmw_validate_full_topic_name+0x84>
 80136d8:	2206      	movs	r2, #6
 80136da:	602a      	str	r2, [r5, #0]
 80136dc:	2e00      	cmp	r6, #0
 80136de:	d0c1      	beq.n	8013664 <rmw_validate_full_topic_name+0x34>
 80136e0:	6033      	str	r3, [r6, #0]
 80136e2:	e7bf      	b.n	8013664 <rmw_validate_full_topic_name+0x34>
 80136e4:	200b      	movs	r0, #11
 80136e6:	4770      	bx	lr
 80136e8:	200b      	movs	r0, #11
 80136ea:	e7b5      	b.n	8013658 <rmw_validate_full_topic_name+0x28>
 80136ec:	2203      	movs	r2, #3
 80136ee:	602a      	str	r2, [r5, #0]
 80136f0:	2e00      	cmp	r6, #0
 80136f2:	d1f5      	bne.n	80136e0 <rmw_validate_full_topic_name+0xb0>
 80136f4:	e7b6      	b.n	8013664 <rmw_validate_full_topic_name+0x34>
 80136f6:	28f7      	cmp	r0, #247	@ 0xf7
 80136f8:	d802      	bhi.n	8013700 <rmw_validate_full_topic_name+0xd0>
 80136fa:	2000      	movs	r0, #0
 80136fc:	6028      	str	r0, [r5, #0]
 80136fe:	e7ab      	b.n	8013658 <rmw_validate_full_topic_name+0x28>
 8013700:	2307      	movs	r3, #7
 8013702:	602b      	str	r3, [r5, #0]
 8013704:	2e00      	cmp	r6, #0
 8013706:	d0ad      	beq.n	8013664 <rmw_validate_full_topic_name+0x34>
 8013708:	23f6      	movs	r3, #246	@ 0xf6
 801370a:	e7e9      	b.n	80136e0 <rmw_validate_full_topic_name+0xb0>
 801370c:	2205      	movs	r2, #5
 801370e:	602a      	str	r2, [r5, #0]
 8013710:	2e00      	cmp	r6, #0
 8013712:	d1e5      	bne.n	80136e0 <rmw_validate_full_topic_name+0xb0>
 8013714:	e7a6      	b.n	8013664 <rmw_validate_full_topic_name+0x34>
 8013716:	bf00      	nop
 8013718:	0801945c 	.word	0x0801945c

0801371c <rmw_validate_namespace_with_size>:
 801371c:	b340      	cbz	r0, 8013770 <rmw_validate_namespace_with_size+0x54>
 801371e:	b570      	push	{r4, r5, r6, lr}
 8013720:	4614      	mov	r4, r2
 8013722:	b0c2      	sub	sp, #264	@ 0x108
 8013724:	b332      	cbz	r2, 8013774 <rmw_validate_namespace_with_size+0x58>
 8013726:	2901      	cmp	r1, #1
 8013728:	460d      	mov	r5, r1
 801372a:	461e      	mov	r6, r3
 801372c:	d102      	bne.n	8013734 <rmw_validate_namespace_with_size+0x18>
 801372e:	7803      	ldrb	r3, [r0, #0]
 8013730:	2b2f      	cmp	r3, #47	@ 0x2f
 8013732:	d012      	beq.n	801375a <rmw_validate_namespace_with_size+0x3e>
 8013734:	aa01      	add	r2, sp, #4
 8013736:	4669      	mov	r1, sp
 8013738:	f7ff ff7a 	bl	8013630 <rmw_validate_full_topic_name>
 801373c:	b978      	cbnz	r0, 801375e <rmw_validate_namespace_with_size+0x42>
 801373e:	9b00      	ldr	r3, [sp, #0]
 8013740:	b14b      	cbz	r3, 8013756 <rmw_validate_namespace_with_size+0x3a>
 8013742:	2b07      	cmp	r3, #7
 8013744:	d007      	beq.n	8013756 <rmw_validate_namespace_with_size+0x3a>
 8013746:	1e5a      	subs	r2, r3, #1
 8013748:	2a05      	cmp	r2, #5
 801374a:	d82b      	bhi.n	80137a4 <rmw_validate_namespace_with_size+0x88>
 801374c:	e8df f002 	tbb	[pc, r2]
 8013750:	1e212427 	.word	0x1e212427
 8013754:	141b      	.short	0x141b
 8013756:	2df5      	cmp	r5, #245	@ 0xf5
 8013758:	d803      	bhi.n	8013762 <rmw_validate_namespace_with_size+0x46>
 801375a:	2000      	movs	r0, #0
 801375c:	6020      	str	r0, [r4, #0]
 801375e:	b042      	add	sp, #264	@ 0x108
 8013760:	bd70      	pop	{r4, r5, r6, pc}
 8013762:	2307      	movs	r3, #7
 8013764:	6023      	str	r3, [r4, #0]
 8013766:	2e00      	cmp	r6, #0
 8013768:	d0f9      	beq.n	801375e <rmw_validate_namespace_with_size+0x42>
 801376a:	23f4      	movs	r3, #244	@ 0xf4
 801376c:	6033      	str	r3, [r6, #0]
 801376e:	e7f6      	b.n	801375e <rmw_validate_namespace_with_size+0x42>
 8013770:	200b      	movs	r0, #11
 8013772:	4770      	bx	lr
 8013774:	200b      	movs	r0, #11
 8013776:	e7f2      	b.n	801375e <rmw_validate_namespace_with_size+0x42>
 8013778:	2306      	movs	r3, #6
 801377a:	6023      	str	r3, [r4, #0]
 801377c:	2e00      	cmp	r6, #0
 801377e:	d0ee      	beq.n	801375e <rmw_validate_namespace_with_size+0x42>
 8013780:	9b01      	ldr	r3, [sp, #4]
 8013782:	6033      	str	r3, [r6, #0]
 8013784:	e7eb      	b.n	801375e <rmw_validate_namespace_with_size+0x42>
 8013786:	2305      	movs	r3, #5
 8013788:	6023      	str	r3, [r4, #0]
 801378a:	e7f7      	b.n	801377c <rmw_validate_namespace_with_size+0x60>
 801378c:	2304      	movs	r3, #4
 801378e:	6023      	str	r3, [r4, #0]
 8013790:	e7f4      	b.n	801377c <rmw_validate_namespace_with_size+0x60>
 8013792:	2303      	movs	r3, #3
 8013794:	6023      	str	r3, [r4, #0]
 8013796:	e7f1      	b.n	801377c <rmw_validate_namespace_with_size+0x60>
 8013798:	2302      	movs	r3, #2
 801379a:	6023      	str	r3, [r4, #0]
 801379c:	e7ee      	b.n	801377c <rmw_validate_namespace_with_size+0x60>
 801379e:	2301      	movs	r3, #1
 80137a0:	6023      	str	r3, [r4, #0]
 80137a2:	e7eb      	b.n	801377c <rmw_validate_namespace_with_size+0x60>
 80137a4:	4a03      	ldr	r2, [pc, #12]	@ (80137b4 <rmw_validate_namespace_with_size+0x98>)
 80137a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80137aa:	a802      	add	r0, sp, #8
 80137ac:	f7ff fcda 	bl	8013164 <rcutils_snprintf>
 80137b0:	2001      	movs	r0, #1
 80137b2:	e7d4      	b.n	801375e <rmw_validate_namespace_with_size+0x42>
 80137b4:	08018e7c 	.word	0x08018e7c

080137b8 <rmw_validate_namespace>:
 80137b8:	b168      	cbz	r0, 80137d6 <rmw_validate_namespace+0x1e>
 80137ba:	b570      	push	{r4, r5, r6, lr}
 80137bc:	460d      	mov	r5, r1
 80137be:	4616      	mov	r6, r2
 80137c0:	4604      	mov	r4, r0
 80137c2:	f7ec fd17 	bl	80001f4 <strlen>
 80137c6:	4633      	mov	r3, r6
 80137c8:	4601      	mov	r1, r0
 80137ca:	462a      	mov	r2, r5
 80137cc:	4620      	mov	r0, r4
 80137ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80137d2:	f7ff bfa3 	b.w	801371c <rmw_validate_namespace_with_size>
 80137d6:	200b      	movs	r0, #11
 80137d8:	4770      	bx	lr
 80137da:	bf00      	nop

080137dc <rmw_namespace_validation_result_string>:
 80137dc:	2807      	cmp	r0, #7
 80137de:	bf9a      	itte	ls
 80137e0:	4b02      	ldrls	r3, [pc, #8]	@ (80137ec <rmw_namespace_validation_result_string+0x10>)
 80137e2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80137e6:	4802      	ldrhi	r0, [pc, #8]	@ (80137f0 <rmw_namespace_validation_result_string+0x14>)
 80137e8:	4770      	bx	lr
 80137ea:	bf00      	nop
 80137ec:	08019074 	.word	0x08019074
 80137f0:	08018ecc 	.word	0x08018ecc

080137f4 <rmw_validate_node_name>:
 80137f4:	2800      	cmp	r0, #0
 80137f6:	d03b      	beq.n	8013870 <rmw_validate_node_name+0x7c>
 80137f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137fc:	460d      	mov	r5, r1
 80137fe:	2900      	cmp	r1, #0
 8013800:	d038      	beq.n	8013874 <rmw_validate_node_name+0x80>
 8013802:	4616      	mov	r6, r2
 8013804:	4604      	mov	r4, r0
 8013806:	f7ec fcf5 	bl	80001f4 <strlen>
 801380a:	b1e0      	cbz	r0, 8013846 <rmw_validate_node_name+0x52>
 801380c:	1e63      	subs	r3, r4, #1
 801380e:	eb03 0800 	add.w	r8, r3, r0
 8013812:	f1c4 0101 	rsb	r1, r4, #1
 8013816:	18cf      	adds	r7, r1, r3
 8013818:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801381c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8013820:	f02e 0c20 	bic.w	ip, lr, #32
 8013824:	2a09      	cmp	r2, #9
 8013826:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801382a:	d914      	bls.n	8013856 <rmw_validate_node_name+0x62>
 801382c:	f1bc 0f19 	cmp.w	ip, #25
 8013830:	d911      	bls.n	8013856 <rmw_validate_node_name+0x62>
 8013832:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8013836:	d00e      	beq.n	8013856 <rmw_validate_node_name+0x62>
 8013838:	2302      	movs	r3, #2
 801383a:	602b      	str	r3, [r5, #0]
 801383c:	b106      	cbz	r6, 8013840 <rmw_validate_node_name+0x4c>
 801383e:	6037      	str	r7, [r6, #0]
 8013840:	2000      	movs	r0, #0
 8013842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013846:	2301      	movs	r3, #1
 8013848:	602b      	str	r3, [r5, #0]
 801384a:	2e00      	cmp	r6, #0
 801384c:	d0f8      	beq.n	8013840 <rmw_validate_node_name+0x4c>
 801384e:	2000      	movs	r0, #0
 8013850:	6030      	str	r0, [r6, #0]
 8013852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013856:	4543      	cmp	r3, r8
 8013858:	d1dd      	bne.n	8013816 <rmw_validate_node_name+0x22>
 801385a:	7822      	ldrb	r2, [r4, #0]
 801385c:	4b0d      	ldr	r3, [pc, #52]	@ (8013894 <rmw_validate_node_name+0xa0>)
 801385e:	5cd3      	ldrb	r3, [r2, r3]
 8013860:	f013 0304 	ands.w	r3, r3, #4
 8013864:	d110      	bne.n	8013888 <rmw_validate_node_name+0x94>
 8013866:	28ff      	cmp	r0, #255	@ 0xff
 8013868:	d806      	bhi.n	8013878 <rmw_validate_node_name+0x84>
 801386a:	602b      	str	r3, [r5, #0]
 801386c:	4618      	mov	r0, r3
 801386e:	e7e8      	b.n	8013842 <rmw_validate_node_name+0x4e>
 8013870:	200b      	movs	r0, #11
 8013872:	4770      	bx	lr
 8013874:	200b      	movs	r0, #11
 8013876:	e7e4      	b.n	8013842 <rmw_validate_node_name+0x4e>
 8013878:	2204      	movs	r2, #4
 801387a:	602a      	str	r2, [r5, #0]
 801387c:	2e00      	cmp	r6, #0
 801387e:	d0df      	beq.n	8013840 <rmw_validate_node_name+0x4c>
 8013880:	22fe      	movs	r2, #254	@ 0xfe
 8013882:	6032      	str	r2, [r6, #0]
 8013884:	4618      	mov	r0, r3
 8013886:	e7dc      	b.n	8013842 <rmw_validate_node_name+0x4e>
 8013888:	2303      	movs	r3, #3
 801388a:	602b      	str	r3, [r5, #0]
 801388c:	2e00      	cmp	r6, #0
 801388e:	d1de      	bne.n	801384e <rmw_validate_node_name+0x5a>
 8013890:	e7d6      	b.n	8013840 <rmw_validate_node_name+0x4c>
 8013892:	bf00      	nop
 8013894:	0801945c 	.word	0x0801945c

08013898 <rmw_node_name_validation_result_string>:
 8013898:	2804      	cmp	r0, #4
 801389a:	bf9a      	itte	ls
 801389c:	4b02      	ldrls	r3, [pc, #8]	@ (80138a8 <rmw_node_name_validation_result_string+0x10>)
 801389e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80138a2:	4802      	ldrhi	r0, [pc, #8]	@ (80138ac <rmw_node_name_validation_result_string+0x14>)
 80138a4:	4770      	bx	lr
 80138a6:	bf00      	nop
 80138a8:	08019180 	.word	0x08019180
 80138ac:	08019094 	.word	0x08019094

080138b0 <get_memory>:
 80138b0:	4603      	mov	r3, r0
 80138b2:	6840      	ldr	r0, [r0, #4]
 80138b4:	b158      	cbz	r0, 80138ce <get_memory+0x1e>
 80138b6:	6842      	ldr	r2, [r0, #4]
 80138b8:	605a      	str	r2, [r3, #4]
 80138ba:	b10a      	cbz	r2, 80138c0 <get_memory+0x10>
 80138bc:	2100      	movs	r1, #0
 80138be:	6011      	str	r1, [r2, #0]
 80138c0:	681a      	ldr	r2, [r3, #0]
 80138c2:	6042      	str	r2, [r0, #4]
 80138c4:	b102      	cbz	r2, 80138c8 <get_memory+0x18>
 80138c6:	6010      	str	r0, [r2, #0]
 80138c8:	2200      	movs	r2, #0
 80138ca:	6002      	str	r2, [r0, #0]
 80138cc:	6018      	str	r0, [r3, #0]
 80138ce:	4770      	bx	lr

080138d0 <put_memory>:
 80138d0:	680b      	ldr	r3, [r1, #0]
 80138d2:	b10b      	cbz	r3, 80138d8 <put_memory+0x8>
 80138d4:	684a      	ldr	r2, [r1, #4]
 80138d6:	605a      	str	r2, [r3, #4]
 80138d8:	684a      	ldr	r2, [r1, #4]
 80138da:	b102      	cbz	r2, 80138de <put_memory+0xe>
 80138dc:	6013      	str	r3, [r2, #0]
 80138de:	6803      	ldr	r3, [r0, #0]
 80138e0:	428b      	cmp	r3, r1
 80138e2:	6843      	ldr	r3, [r0, #4]
 80138e4:	bf08      	it	eq
 80138e6:	6002      	streq	r2, [r0, #0]
 80138e8:	604b      	str	r3, [r1, #4]
 80138ea:	b103      	cbz	r3, 80138ee <put_memory+0x1e>
 80138ec:	6019      	str	r1, [r3, #0]
 80138ee:	2300      	movs	r3, #0
 80138f0:	600b      	str	r3, [r1, #0]
 80138f2:	6041      	str	r1, [r0, #4]
 80138f4:	4770      	bx	lr
 80138f6:	bf00      	nop

080138f8 <rmw_destroy_client>:
 80138f8:	b570      	push	{r4, r5, r6, lr}
 80138fa:	b128      	cbz	r0, 8013908 <rmw_destroy_client+0x10>
 80138fc:	4604      	mov	r4, r0
 80138fe:	6800      	ldr	r0, [r0, #0]
 8013900:	460d      	mov	r5, r1
 8013902:	f7f9 fd8f 	bl	800d424 <is_uxrce_rmw_identifier_valid>
 8013906:	b910      	cbnz	r0, 801390e <rmw_destroy_client+0x16>
 8013908:	2401      	movs	r4, #1
 801390a:	4620      	mov	r0, r4
 801390c:	bd70      	pop	{r4, r5, r6, pc}
 801390e:	6863      	ldr	r3, [r4, #4]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d0f9      	beq.n	8013908 <rmw_destroy_client+0x10>
 8013914:	2d00      	cmp	r5, #0
 8013916:	d0f7      	beq.n	8013908 <rmw_destroy_client+0x10>
 8013918:	6828      	ldr	r0, [r5, #0]
 801391a:	f7f9 fd83 	bl	800d424 <is_uxrce_rmw_identifier_valid>
 801391e:	2800      	cmp	r0, #0
 8013920:	d0f2      	beq.n	8013908 <rmw_destroy_client+0x10>
 8013922:	686e      	ldr	r6, [r5, #4]
 8013924:	2e00      	cmp	r6, #0
 8013926:	d0ef      	beq.n	8013908 <rmw_destroy_client+0x10>
 8013928:	6864      	ldr	r4, [r4, #4]
 801392a:	6932      	ldr	r2, [r6, #16]
 801392c:	6920      	ldr	r0, [r4, #16]
 801392e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013932:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013936:	6819      	ldr	r1, [r3, #0]
 8013938:	f002 f8ec 	bl	8015b14 <uxr_buffer_cancel_data>
 801393c:	4602      	mov	r2, r0
 801393e:	6920      	ldr	r0, [r4, #16]
 8013940:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013944:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013948:	f7f9 fcec 	bl	800d324 <run_xrce_session>
 801394c:	6920      	ldr	r0, [r4, #16]
 801394e:	6932      	ldr	r2, [r6, #16]
 8013950:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013954:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013958:	6819      	ldr	r1, [r3, #0]
 801395a:	f7f9 fe39 	bl	800d5d0 <uxr_buffer_delete_entity>
 801395e:	4602      	mov	r2, r0
 8013960:	6920      	ldr	r0, [r4, #16]
 8013962:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013966:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801396a:	f7f9 fcdb 	bl	800d324 <run_xrce_session>
 801396e:	2800      	cmp	r0, #0
 8013970:	4628      	mov	r0, r5
 8013972:	bf14      	ite	ne
 8013974:	2400      	movne	r4, #0
 8013976:	2402      	moveq	r4, #2
 8013978:	f7f9 fbbc 	bl	800d0f4 <rmw_uxrce_fini_client_memory>
 801397c:	e7c5      	b.n	801390a <rmw_destroy_client+0x12>
 801397e:	bf00      	nop

08013980 <rmw_get_implementation_identifier>:
 8013980:	4b01      	ldr	r3, [pc, #4]	@ (8013988 <rmw_get_implementation_identifier+0x8>)
 8013982:	6818      	ldr	r0, [r3, #0]
 8013984:	4770      	bx	lr
 8013986:	bf00      	nop
 8013988:	080191ac 	.word	0x080191ac

0801398c <rmw_init_options_init>:
 801398c:	b084      	sub	sp, #16
 801398e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013990:	b083      	sub	sp, #12
 8013992:	ad09      	add	r5, sp, #36	@ 0x24
 8013994:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8013998:	b130      	cbz	r0, 80139a8 <rmw_init_options_init+0x1c>
 801399a:	4604      	mov	r4, r0
 801399c:	4628      	mov	r0, r5
 801399e:	f7f8 ff9b 	bl	800c8d8 <rcutils_allocator_is_valid>
 80139a2:	b108      	cbz	r0, 80139a8 <rmw_init_options_init+0x1c>
 80139a4:	68a6      	ldr	r6, [r4, #8]
 80139a6:	b12e      	cbz	r6, 80139b4 <rmw_init_options_init+0x28>
 80139a8:	200b      	movs	r0, #11
 80139aa:	b003      	add	sp, #12
 80139ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80139b0:	b004      	add	sp, #16
 80139b2:	4770      	bx	lr
 80139b4:	2200      	movs	r2, #0
 80139b6:	2300      	movs	r3, #0
 80139b8:	e9c4 2300 	strd	r2, r3, [r4]
 80139bc:	4b22      	ldr	r3, [pc, #136]	@ (8013a48 <rmw_init_options_init+0xbc>)
 80139be:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8013a58 <rmw_init_options_init+0xcc>
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	60a3      	str	r3, [r4, #8]
 80139c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80139c8:	f104 0c20 	add.w	ip, r4, #32
 80139cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80139d0:	466f      	mov	r7, sp
 80139d2:	682b      	ldr	r3, [r5, #0]
 80139d4:	f8cc 3000 	str.w	r3, [ip]
 80139d8:	4638      	mov	r0, r7
 80139da:	f8c4 e01c 	str.w	lr, [r4, #28]
 80139de:	60e6      	str	r6, [r4, #12]
 80139e0:	f7ff fd76 	bl	80134d0 <rmw_get_default_security_options>
 80139e4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80139e8:	f104 0310 	add.w	r3, r4, #16
 80139ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80139f0:	2203      	movs	r2, #3
 80139f2:	4816      	ldr	r0, [pc, #88]	@ (8013a4c <rmw_init_options_init+0xc0>)
 80139f4:	4916      	ldr	r1, [pc, #88]	@ (8013a50 <rmw_init_options_init+0xc4>)
 80139f6:	7626      	strb	r6, [r4, #24]
 80139f8:	f7f9 fabc 	bl	800cf74 <rmw_uxrce_init_init_options_impl_memory>
 80139fc:	4813      	ldr	r0, [pc, #76]	@ (8013a4c <rmw_init_options_init+0xc0>)
 80139fe:	f7ff ff57 	bl	80138b0 <get_memory>
 8013a02:	b1f0      	cbz	r0, 8013a42 <rmw_init_options_init+0xb6>
 8013a04:	4a13      	ldr	r2, [pc, #76]	@ (8013a54 <rmw_init_options_init+0xc8>)
 8013a06:	6883      	ldr	r3, [r0, #8]
 8013a08:	6851      	ldr	r1, [r2, #4]
 8013a0a:	7810      	ldrb	r0, [r2, #0]
 8013a0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8013a0e:	7418      	strb	r0, [r3, #16]
 8013a10:	6159      	str	r1, [r3, #20]
 8013a12:	68d1      	ldr	r1, [r2, #12]
 8013a14:	61d9      	str	r1, [r3, #28]
 8013a16:	6911      	ldr	r1, [r2, #16]
 8013a18:	6219      	str	r1, [r3, #32]
 8013a1a:	6951      	ldr	r1, [r2, #20]
 8013a1c:	6892      	ldr	r2, [r2, #8]
 8013a1e:	619a      	str	r2, [r3, #24]
 8013a20:	6259      	str	r1, [r3, #36]	@ 0x24
 8013a22:	f7fb fa31 	bl	800ee88 <uxr_nanos>
 8013a26:	f003 fb93 	bl	8017150 <srand>
 8013a2a:	f003 fbbf 	bl	80171ac <rand>
 8013a2e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013a30:	6298      	str	r0, [r3, #40]	@ 0x28
 8013a32:	2800      	cmp	r0, #0
 8013a34:	d0f9      	beq.n	8013a2a <rmw_init_options_init+0x9e>
 8013a36:	2000      	movs	r0, #0
 8013a38:	b003      	add	sp, #12
 8013a3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013a3e:	b004      	add	sp, #16
 8013a40:	4770      	bx	lr
 8013a42:	2001      	movs	r0, #1
 8013a44:	e7b1      	b.n	80139aa <rmw_init_options_init+0x1e>
 8013a46:	bf00      	nop
 8013a48:	080191ac 	.word	0x080191ac
 8013a4c:	2000dbdc 	.word	0x2000dbdc
 8013a50:	20009478 	.word	0x20009478
 8013a54:	20009304 	.word	0x20009304
 8013a58:	08018c14 	.word	0x08018c14

08013a5c <rmw_init_options_copy>:
 8013a5c:	b570      	push	{r4, r5, r6, lr}
 8013a5e:	b158      	cbz	r0, 8013a78 <rmw_init_options_copy+0x1c>
 8013a60:	460d      	mov	r5, r1
 8013a62:	b149      	cbz	r1, 8013a78 <rmw_init_options_copy+0x1c>
 8013a64:	4604      	mov	r4, r0
 8013a66:	6880      	ldr	r0, [r0, #8]
 8013a68:	b120      	cbz	r0, 8013a74 <rmw_init_options_copy+0x18>
 8013a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8013ae4 <rmw_init_options_copy+0x88>)
 8013a6c:	6819      	ldr	r1, [r3, #0]
 8013a6e:	f7ec fbb7 	bl	80001e0 <strcmp>
 8013a72:	bb90      	cbnz	r0, 8013ada <rmw_init_options_copy+0x7e>
 8013a74:	68ab      	ldr	r3, [r5, #8]
 8013a76:	b113      	cbz	r3, 8013a7e <rmw_init_options_copy+0x22>
 8013a78:	250b      	movs	r5, #11
 8013a7a:	4628      	mov	r0, r5
 8013a7c:	bd70      	pop	{r4, r5, r6, pc}
 8013a7e:	4623      	mov	r3, r4
 8013a80:	462a      	mov	r2, r5
 8013a82:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8013a86:	f8d3 c000 	ldr.w	ip, [r3]
 8013a8a:	6858      	ldr	r0, [r3, #4]
 8013a8c:	6899      	ldr	r1, [r3, #8]
 8013a8e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8013a92:	f8c2 e00c 	str.w	lr, [r2, #12]
 8013a96:	3310      	adds	r3, #16
 8013a98:	42b3      	cmp	r3, r6
 8013a9a:	f8c2 c000 	str.w	ip, [r2]
 8013a9e:	6050      	str	r0, [r2, #4]
 8013aa0:	6091      	str	r1, [r2, #8]
 8013aa2:	f102 0210 	add.w	r2, r2, #16
 8013aa6:	d1ee      	bne.n	8013a86 <rmw_init_options_copy+0x2a>
 8013aa8:	6819      	ldr	r1, [r3, #0]
 8013aaa:	685b      	ldr	r3, [r3, #4]
 8013aac:	480e      	ldr	r0, [pc, #56]	@ (8013ae8 <rmw_init_options_copy+0x8c>)
 8013aae:	6053      	str	r3, [r2, #4]
 8013ab0:	6011      	str	r1, [r2, #0]
 8013ab2:	f7ff fefd 	bl	80138b0 <get_memory>
 8013ab6:	b198      	cbz	r0, 8013ae0 <rmw_init_options_copy+0x84>
 8013ab8:	6883      	ldr	r3, [r0, #8]
 8013aba:	636b      	str	r3, [r5, #52]	@ 0x34
 8013abc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013abe:	f102 0c10 	add.w	ip, r2, #16
 8013ac2:	f103 0410 	add.w	r4, r3, #16
 8013ac6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013acc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8013ad0:	2500      	movs	r5, #0
 8013ad2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013ad6:	4628      	mov	r0, r5
 8013ad8:	bd70      	pop	{r4, r5, r6, pc}
 8013ada:	250c      	movs	r5, #12
 8013adc:	4628      	mov	r0, r5
 8013ade:	bd70      	pop	{r4, r5, r6, pc}
 8013ae0:	2501      	movs	r5, #1
 8013ae2:	e7ca      	b.n	8013a7a <rmw_init_options_copy+0x1e>
 8013ae4:	080191ac 	.word	0x080191ac
 8013ae8:	2000dbdc 	.word	0x2000dbdc

08013aec <rmw_init_options_fini>:
 8013aec:	2800      	cmp	r0, #0
 8013aee:	d03d      	beq.n	8013b6c <rmw_init_options_fini+0x80>
 8013af0:	b510      	push	{r4, lr}
 8013af2:	4604      	mov	r4, r0
 8013af4:	b08e      	sub	sp, #56	@ 0x38
 8013af6:	3020      	adds	r0, #32
 8013af8:	f7f8 feee 	bl	800c8d8 <rcutils_allocator_is_valid>
 8013afc:	b360      	cbz	r0, 8013b58 <rmw_init_options_fini+0x6c>
 8013afe:	68a0      	ldr	r0, [r4, #8]
 8013b00:	b120      	cbz	r0, 8013b0c <rmw_init_options_fini+0x20>
 8013b02:	4b1c      	ldr	r3, [pc, #112]	@ (8013b74 <rmw_init_options_fini+0x88>)
 8013b04:	6819      	ldr	r1, [r3, #0]
 8013b06:	f7ec fb6b 	bl	80001e0 <strcmp>
 8013b0a:	bb68      	cbnz	r0, 8013b68 <rmw_init_options_fini+0x7c>
 8013b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8013b78 <rmw_init_options_fini+0x8c>)
 8013b0e:	6819      	ldr	r1, [r3, #0]
 8013b10:	b331      	cbz	r1, 8013b60 <rmw_init_options_fini+0x74>
 8013b12:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013b14:	e001      	b.n	8013b1a <rmw_init_options_fini+0x2e>
 8013b16:	6849      	ldr	r1, [r1, #4]
 8013b18:	b311      	cbz	r1, 8013b60 <rmw_init_options_fini+0x74>
 8013b1a:	688b      	ldr	r3, [r1, #8]
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d1fa      	bne.n	8013b16 <rmw_init_options_fini+0x2a>
 8013b20:	4815      	ldr	r0, [pc, #84]	@ (8013b78 <rmw_init_options_fini+0x8c>)
 8013b22:	f7ff fed5 	bl	80138d0 <put_memory>
 8013b26:	4668      	mov	r0, sp
 8013b28:	f7ff fcc2 	bl	80134b0 <rmw_get_zero_initialized_init_options>
 8013b2c:	46ee      	mov	lr, sp
 8013b2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b32:	46a4      	mov	ip, r4
 8013b34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b38:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b48:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013b4c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013b50:	2300      	movs	r3, #0
 8013b52:	4618      	mov	r0, r3
 8013b54:	b00e      	add	sp, #56	@ 0x38
 8013b56:	bd10      	pop	{r4, pc}
 8013b58:	230b      	movs	r3, #11
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	b00e      	add	sp, #56	@ 0x38
 8013b5e:	bd10      	pop	{r4, pc}
 8013b60:	2301      	movs	r3, #1
 8013b62:	4618      	mov	r0, r3
 8013b64:	b00e      	add	sp, #56	@ 0x38
 8013b66:	bd10      	pop	{r4, pc}
 8013b68:	230c      	movs	r3, #12
 8013b6a:	e7f2      	b.n	8013b52 <rmw_init_options_fini+0x66>
 8013b6c:	230b      	movs	r3, #11
 8013b6e:	4618      	mov	r0, r3
 8013b70:	4770      	bx	lr
 8013b72:	bf00      	nop
 8013b74:	080191ac 	.word	0x080191ac
 8013b78:	2000dbdc 	.word	0x2000dbdc

08013b7c <rmw_init>:
 8013b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b80:	b083      	sub	sp, #12
 8013b82:	2800      	cmp	r0, #0
 8013b84:	f000 80d3 	beq.w	8013d2e <rmw_init+0x1b2>
 8013b88:	460e      	mov	r6, r1
 8013b8a:	2900      	cmp	r1, #0
 8013b8c:	f000 80cf 	beq.w	8013d2e <rmw_init+0x1b2>
 8013b90:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8013b92:	4605      	mov	r5, r0
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	f000 80ca 	beq.w	8013d2e <rmw_init+0x1b2>
 8013b9a:	4b78      	ldr	r3, [pc, #480]	@ (8013d7c <rmw_init+0x200>)
 8013b9c:	6880      	ldr	r0, [r0, #8]
 8013b9e:	681f      	ldr	r7, [r3, #0]
 8013ba0:	b128      	cbz	r0, 8013bae <rmw_init+0x32>
 8013ba2:	4639      	mov	r1, r7
 8013ba4:	f7ec fb1c 	bl	80001e0 <strcmp>
 8013ba8:	2800      	cmp	r0, #0
 8013baa:	f040 80ca 	bne.w	8013d42 <rmw_init+0x1c6>
 8013bae:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013bb2:	4c73      	ldr	r4, [pc, #460]	@ (8013d80 <rmw_init+0x204>)
 8013bb4:	4973      	ldr	r1, [pc, #460]	@ (8013d84 <rmw_init+0x208>)
 8013bb6:	4874      	ldr	r0, [pc, #464]	@ (8013d88 <rmw_init+0x20c>)
 8013bb8:	60b7      	str	r7, [r6, #8]
 8013bba:	e9c6 2300 	strd	r2, r3, [r6]
 8013bbe:	68eb      	ldr	r3, [r5, #12]
 8013bc0:	64b3      	str	r3, [r6, #72]	@ 0x48
 8013bc2:	2201      	movs	r2, #1
 8013bc4:	f7f9 f976 	bl	800ceb4 <rmw_uxrce_init_session_memory>
 8013bc8:	4620      	mov	r0, r4
 8013bca:	4970      	ldr	r1, [pc, #448]	@ (8013d8c <rmw_init+0x210>)
 8013bcc:	2204      	movs	r2, #4
 8013bce:	f7f9 f9b1 	bl	800cf34 <rmw_uxrce_init_static_input_buffer_memory>
 8013bd2:	f04f 0800 	mov.w	r8, #0
 8013bd6:	486c      	ldr	r0, [pc, #432]	@ (8013d88 <rmw_init+0x20c>)
 8013bd8:	f884 800d 	strb.w	r8, [r4, #13]
 8013bdc:	f7ff fe68 	bl	80138b0 <get_memory>
 8013be0:	2800      	cmp	r0, #0
 8013be2:	f000 80a9 	beq.w	8013d38 <rmw_init+0x1bc>
 8013be6:	6884      	ldr	r4, [r0, #8]
 8013be8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8013bea:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8013bec:	f890 c010 	ldrb.w	ip, [r0, #16]
 8013bf0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8013bf4:	9101      	str	r1, [sp, #4]
 8013bf6:	6a00      	ldr	r0, [r0, #32]
 8013bf8:	9000      	str	r0, [sp, #0]
 8013bfa:	f104 0910 	add.w	r9, r4, #16
 8013bfe:	4661      	mov	r1, ip
 8013c00:	4648      	mov	r0, r9
 8013c02:	f001 f9bf 	bl	8014f84 <uxr_set_custom_transport_callbacks>
 8013c06:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8013c0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013c0e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8013c12:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8013c16:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8013c1a:	495d      	ldr	r1, [pc, #372]	@ (8013d90 <rmw_init+0x214>)
 8013c1c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8013c20:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8013c24:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8013c28:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8013c2c:	4859      	ldr	r0, [pc, #356]	@ (8013d94 <rmw_init+0x218>)
 8013c2e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8013c32:	2201      	movs	r2, #1
 8013c34:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8013c36:	f7f9 f91d 	bl	800ce74 <rmw_uxrce_init_node_memory>
 8013c3a:	4957      	ldr	r1, [pc, #348]	@ (8013d98 <rmw_init+0x21c>)
 8013c3c:	4857      	ldr	r0, [pc, #348]	@ (8013d9c <rmw_init+0x220>)
 8013c3e:	2205      	movs	r2, #5
 8013c40:	f7f9 f8f8 	bl	800ce34 <rmw_uxrce_init_subscription_memory>
 8013c44:	4956      	ldr	r1, [pc, #344]	@ (8013da0 <rmw_init+0x224>)
 8013c46:	4857      	ldr	r0, [pc, #348]	@ (8013da4 <rmw_init+0x228>)
 8013c48:	220a      	movs	r2, #10
 8013c4a:	f7f9 f8d3 	bl	800cdf4 <rmw_uxrce_init_publisher_memory>
 8013c4e:	4956      	ldr	r1, [pc, #344]	@ (8013da8 <rmw_init+0x22c>)
 8013c50:	4856      	ldr	r0, [pc, #344]	@ (8013dac <rmw_init+0x230>)
 8013c52:	2201      	movs	r2, #1
 8013c54:	f7f9 f88e 	bl	800cd74 <rmw_uxrce_init_service_memory>
 8013c58:	4955      	ldr	r1, [pc, #340]	@ (8013db0 <rmw_init+0x234>)
 8013c5a:	4856      	ldr	r0, [pc, #344]	@ (8013db4 <rmw_init+0x238>)
 8013c5c:	2201      	movs	r2, #1
 8013c5e:	f7f9 f8a9 	bl	800cdb4 <rmw_uxrce_init_client_memory>
 8013c62:	4955      	ldr	r1, [pc, #340]	@ (8013db8 <rmw_init+0x23c>)
 8013c64:	4855      	ldr	r0, [pc, #340]	@ (8013dbc <rmw_init+0x240>)
 8013c66:	220f      	movs	r2, #15
 8013c68:	f7f9 f944 	bl	800cef4 <rmw_uxrce_init_topic_memory>
 8013c6c:	4954      	ldr	r1, [pc, #336]	@ (8013dc0 <rmw_init+0x244>)
 8013c6e:	4855      	ldr	r0, [pc, #340]	@ (8013dc4 <rmw_init+0x248>)
 8013c70:	2203      	movs	r2, #3
 8013c72:	f7f9 f97f 	bl	800cf74 <rmw_uxrce_init_init_options_impl_memory>
 8013c76:	4954      	ldr	r1, [pc, #336]	@ (8013dc8 <rmw_init+0x24c>)
 8013c78:	4854      	ldr	r0, [pc, #336]	@ (8013dcc <rmw_init+0x250>)
 8013c7a:	2204      	movs	r2, #4
 8013c7c:	f7f9 f99a 	bl	800cfb4 <rmw_uxrce_init_wait_set_memory>
 8013c80:	4953      	ldr	r1, [pc, #332]	@ (8013dd0 <rmw_init+0x254>)
 8013c82:	4854      	ldr	r0, [pc, #336]	@ (8013dd4 <rmw_init+0x258>)
 8013c84:	2204      	movs	r2, #4
 8013c86:	f7f9 f9b5 	bl	800cff4 <rmw_uxrce_init_guard_condition_memory>
 8013c8a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8013c8c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8013c8e:	4642      	mov	r2, r8
 8013c90:	f000 fd9e 	bl	80147d0 <rmw_uxrce_transport_init>
 8013c94:	4607      	mov	r7, r0
 8013c96:	2800      	cmp	r0, #0
 8013c98:	d158      	bne.n	8013d4c <rmw_init+0x1d0>
 8013c9a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8013c9c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8013ca0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013ca2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8013ca6:	4628      	mov	r0, r5
 8013ca8:	f7f9 ff52 	bl	800db50 <uxr_init_session>
 8013cac:	494a      	ldr	r1, [pc, #296]	@ (8013dd8 <rmw_init+0x25c>)
 8013cae:	4622      	mov	r2, r4
 8013cb0:	4628      	mov	r0, r5
 8013cb2:	f7f9 ff71 	bl	800db98 <uxr_set_topic_callback>
 8013cb6:	4949      	ldr	r1, [pc, #292]	@ (8013ddc <rmw_init+0x260>)
 8013cb8:	463a      	mov	r2, r7
 8013cba:	4628      	mov	r0, r5
 8013cbc:	f7f9 ff68 	bl	800db90 <uxr_set_status_callback>
 8013cc0:	4947      	ldr	r1, [pc, #284]	@ (8013de0 <rmw_init+0x264>)
 8013cc2:	463a      	mov	r2, r7
 8013cc4:	4628      	mov	r0, r5
 8013cc6:	f7f9 ff6b 	bl	800dba0 <uxr_set_request_callback>
 8013cca:	4946      	ldr	r1, [pc, #280]	@ (8013de4 <rmw_init+0x268>)
 8013ccc:	463a      	mov	r2, r7
 8013cce:	4628      	mov	r0, r5
 8013cd0:	f7f9 ff6a 	bl	800dba8 <uxr_set_reply_callback>
 8013cd4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013cd8:	2304      	movs	r3, #4
 8013cda:	0092      	lsls	r2, r2, #2
 8013cdc:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8013ce0:	4628      	mov	r0, r5
 8013ce2:	f7f9 ff9f 	bl	800dc24 <uxr_create_input_reliable_stream>
 8013ce6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013cea:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8013cee:	0092      	lsls	r2, r2, #2
 8013cf0:	2304      	movs	r3, #4
 8013cf2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8013cf6:	4628      	mov	r0, r5
 8013cf8:	f7f9 ff6c 	bl	800dbd4 <uxr_create_output_reliable_stream>
 8013cfc:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8013d00:	4628      	mov	r0, r5
 8013d02:	f7f9 ff89 	bl	800dc18 <uxr_create_input_best_effort_stream>
 8013d06:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8013d0a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8013d0e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013d12:	3114      	adds	r1, #20
 8013d14:	4628      	mov	r0, r5
 8013d16:	f7f9 ff4b 	bl	800dbb0 <uxr_create_output_best_effort_stream>
 8013d1a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8013d1e:	4628      	mov	r0, r5
 8013d20:	f7fa fcd6 	bl	800e6d0 <uxr_create_session>
 8013d24:	b1f8      	cbz	r0, 8013d66 <rmw_init+0x1ea>
 8013d26:	4638      	mov	r0, r7
 8013d28:	b003      	add	sp, #12
 8013d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d2e:	270b      	movs	r7, #11
 8013d30:	4638      	mov	r0, r7
 8013d32:	b003      	add	sp, #12
 8013d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d38:	2701      	movs	r7, #1
 8013d3a:	4638      	mov	r0, r7
 8013d3c:	b003      	add	sp, #12
 8013d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d42:	270c      	movs	r7, #12
 8013d44:	4638      	mov	r0, r7
 8013d46:	b003      	add	sp, #12
 8013d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d4c:	4648      	mov	r0, r9
 8013d4e:	f001 f95b 	bl	8015008 <uxr_close_custom_transport>
 8013d52:	480d      	ldr	r0, [pc, #52]	@ (8013d88 <rmw_init+0x20c>)
 8013d54:	4621      	mov	r1, r4
 8013d56:	f7ff fdbb 	bl	80138d0 <put_memory>
 8013d5a:	4638      	mov	r0, r7
 8013d5c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8013d60:	b003      	add	sp, #12
 8013d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d66:	4648      	mov	r0, r9
 8013d68:	f001 f94e 	bl	8015008 <uxr_close_custom_transport>
 8013d6c:	4806      	ldr	r0, [pc, #24]	@ (8013d88 <rmw_init+0x20c>)
 8013d6e:	4621      	mov	r1, r4
 8013d70:	f7ff fdae 	bl	80138d0 <put_memory>
 8013d74:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8013d76:	2701      	movs	r7, #1
 8013d78:	e7d5      	b.n	8013d26 <rmw_init+0x1aa>
 8013d7a:	bf00      	nop
 8013d7c:	080191ac 	.word	0x080191ac
 8013d80:	2000dc2c 	.word	0x2000dc2c
 8013d84:	20009ed8 	.word	0x20009ed8
 8013d88:	2000dc1c 	.word	0x2000dc1c
 8013d8c:	2000b480 	.word	0x2000b480
 8013d90:	200094fc 	.word	0x200094fc
 8013d94:	2000dbec 	.word	0x2000dbec
 8013d98:	2000d580 	.word	0x2000d580
 8013d9c:	2000dc3c 	.word	0x2000dc3c
 8013da0:	200095a0 	.word	0x200095a0
 8013da4:	2000dbfc 	.word	0x2000dbfc
 8013da8:	20009e10 	.word	0x20009e10
 8013dac:	2000dc0c 	.word	0x2000dc0c
 8013db0:	20009330 	.word	0x20009330
 8013db4:	20009320 	.word	0x20009320
 8013db8:	2000d9b8 	.word	0x2000d9b8
 8013dbc:	2000dc4c 	.word	0x2000dc4c
 8013dc0:	20009478 	.word	0x20009478
 8013dc4:	2000dbdc 	.word	0x2000dbdc
 8013dc8:	2000db5c 	.word	0x2000db5c
 8013dcc:	2000dc5c 	.word	0x2000dc5c
 8013dd0:	200093f8 	.word	0x200093f8
 8013dd4:	2000dbcc 	.word	0x2000dbcc
 8013dd8:	08016cf5 	.word	0x08016cf5
 8013ddc:	08016ced 	.word	0x08016ced
 8013de0:	08016d8d 	.word	0x08016d8d
 8013de4:	08016e29 	.word	0x08016e29

08013de8 <rmw_context_fini>:
 8013de8:	4b17      	ldr	r3, [pc, #92]	@ (8013e48 <rmw_context_fini+0x60>)
 8013dea:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8013dec:	b570      	push	{r4, r5, r6, lr}
 8013dee:	681c      	ldr	r4, [r3, #0]
 8013df0:	4605      	mov	r5, r0
 8013df2:	b334      	cbz	r4, 8013e42 <rmw_context_fini+0x5a>
 8013df4:	2600      	movs	r6, #0
 8013df6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8013dfa:	6902      	ldr	r2, [r0, #16]
 8013dfc:	428a      	cmp	r2, r1
 8013dfe:	d018      	beq.n	8013e32 <rmw_context_fini+0x4a>
 8013e00:	2c00      	cmp	r4, #0
 8013e02:	d1f8      	bne.n	8013df6 <rmw_context_fini+0xe>
 8013e04:	b189      	cbz	r1, 8013e2a <rmw_context_fini+0x42>
 8013e06:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8013e0a:	789b      	ldrb	r3, [r3, #2]
 8013e0c:	2b01      	cmp	r3, #1
 8013e0e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8013e12:	bf14      	ite	ne
 8013e14:	210a      	movne	r1, #10
 8013e16:	2100      	moveq	r1, #0
 8013e18:	f7fa fc32 	bl	800e680 <uxr_delete_session_retries>
 8013e1c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013e1e:	f7f9 f909 	bl	800d034 <rmw_uxrce_fini_session_memory>
 8013e22:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013e24:	3010      	adds	r0, #16
 8013e26:	f001 f8ef 	bl	8015008 <uxr_close_custom_transport>
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8013e2e:	4630      	mov	r0, r6
 8013e30:	bd70      	pop	{r4, r5, r6, pc}
 8013e32:	3018      	adds	r0, #24
 8013e34:	f000 f90e 	bl	8014054 <rmw_destroy_node>
 8013e38:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8013e3a:	4606      	mov	r6, r0
 8013e3c:	2c00      	cmp	r4, #0
 8013e3e:	d1da      	bne.n	8013df6 <rmw_context_fini+0xe>
 8013e40:	e7e0      	b.n	8013e04 <rmw_context_fini+0x1c>
 8013e42:	4626      	mov	r6, r4
 8013e44:	e7de      	b.n	8013e04 <rmw_context_fini+0x1c>
 8013e46:	bf00      	nop
 8013e48:	2000dbec 	.word	0x2000dbec

08013e4c <create_topic>:
 8013e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e50:	4605      	mov	r5, r0
 8013e52:	b084      	sub	sp, #16
 8013e54:	4822      	ldr	r0, [pc, #136]	@ (8013ee0 <create_topic+0x94>)
 8013e56:	460f      	mov	r7, r1
 8013e58:	4616      	mov	r6, r2
 8013e5a:	f7ff fd29 	bl	80138b0 <get_memory>
 8013e5e:	4604      	mov	r4, r0
 8013e60:	2800      	cmp	r0, #0
 8013e62:	d039      	beq.n	8013ed8 <create_topic+0x8c>
 8013e64:	692b      	ldr	r3, [r5, #16]
 8013e66:	6884      	ldr	r4, [r0, #8]
 8013e68:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8013ee8 <create_topic+0x9c>
 8013e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013e70:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8013e74:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8013e78:	1c42      	adds	r2, r0, #1
 8013e7a:	2102      	movs	r1, #2
 8013e7c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8013e80:	f7f9 fda8 	bl	800d9d4 <uxr_object_id>
 8013e84:	223c      	movs	r2, #60	@ 0x3c
 8013e86:	6120      	str	r0, [r4, #16]
 8013e88:	4641      	mov	r1, r8
 8013e8a:	4638      	mov	r0, r7
 8013e8c:	f7f9 fab0 	bl	800d3f0 <generate_topic_name>
 8013e90:	b1f0      	cbz	r0, 8013ed0 <create_topic+0x84>
 8013e92:	4f14      	ldr	r7, [pc, #80]	@ (8013ee4 <create_topic+0x98>)
 8013e94:	4630      	mov	r0, r6
 8013e96:	2264      	movs	r2, #100	@ 0x64
 8013e98:	4639      	mov	r1, r7
 8013e9a:	f7f9 fa79 	bl	800d390 <generate_type_name>
 8013e9e:	b1b8      	cbz	r0, 8013ed0 <create_topic+0x84>
 8013ea0:	6928      	ldr	r0, [r5, #16]
 8013ea2:	2306      	movs	r3, #6
 8013ea4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013ea8:	f8cd 8000 	str.w	r8, [sp]
 8013eac:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8013eb0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013eb4:	6811      	ldr	r1, [r2, #0]
 8013eb6:	696b      	ldr	r3, [r5, #20]
 8013eb8:	6922      	ldr	r2, [r4, #16]
 8013eba:	f7f9 fc07 	bl	800d6cc <uxr_buffer_create_topic_bin>
 8013ebe:	4602      	mov	r2, r0
 8013ec0:	6928      	ldr	r0, [r5, #16]
 8013ec2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013ec6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013eca:	f7f9 fa2b 	bl	800d324 <run_xrce_session>
 8013ece:	b918      	cbnz	r0, 8013ed8 <create_topic+0x8c>
 8013ed0:	4620      	mov	r0, r4
 8013ed2:	f7f9 f925 	bl	800d120 <rmw_uxrce_fini_topic_memory>
 8013ed6:	2400      	movs	r4, #0
 8013ed8:	4620      	mov	r0, r4
 8013eda:	b004      	add	sp, #16
 8013edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ee0:	2000dc4c 	.word	0x2000dc4c
 8013ee4:	2000dd38 	.word	0x2000dd38
 8013ee8:	2000dcfc 	.word	0x2000dcfc

08013eec <destroy_topic>:
 8013eec:	b538      	push	{r3, r4, r5, lr}
 8013eee:	6985      	ldr	r5, [r0, #24]
 8013ef0:	b1d5      	cbz	r5, 8013f28 <destroy_topic+0x3c>
 8013ef2:	4604      	mov	r4, r0
 8013ef4:	6928      	ldr	r0, [r5, #16]
 8013ef6:	6922      	ldr	r2, [r4, #16]
 8013ef8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013efc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013f00:	6819      	ldr	r1, [r3, #0]
 8013f02:	f7f9 fb65 	bl	800d5d0 <uxr_buffer_delete_entity>
 8013f06:	4602      	mov	r2, r0
 8013f08:	6928      	ldr	r0, [r5, #16]
 8013f0a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013f0e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013f12:	f7f9 fa07 	bl	800d324 <run_xrce_session>
 8013f16:	2800      	cmp	r0, #0
 8013f18:	4620      	mov	r0, r4
 8013f1a:	bf14      	ite	ne
 8013f1c:	2400      	movne	r4, #0
 8013f1e:	2402      	moveq	r4, #2
 8013f20:	f7f9 f8fe 	bl	800d120 <rmw_uxrce_fini_topic_memory>
 8013f24:	4620      	mov	r0, r4
 8013f26:	bd38      	pop	{r3, r4, r5, pc}
 8013f28:	2401      	movs	r4, #1
 8013f2a:	4620      	mov	r0, r4
 8013f2c:	bd38      	pop	{r3, r4, r5, pc}
 8013f2e:	bf00      	nop

08013f30 <create_node>:
 8013f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f34:	b083      	sub	sp, #12
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d05f      	beq.n	8013ffa <create_node+0xca>
 8013f3a:	4606      	mov	r6, r0
 8013f3c:	4835      	ldr	r0, [pc, #212]	@ (8014014 <create_node+0xe4>)
 8013f3e:	460f      	mov	r7, r1
 8013f40:	4690      	mov	r8, r2
 8013f42:	461d      	mov	r5, r3
 8013f44:	f7ff fcb4 	bl	80138b0 <get_memory>
 8013f48:	2800      	cmp	r0, #0
 8013f4a:	d056      	beq.n	8013ffa <create_node+0xca>
 8013f4c:	6884      	ldr	r4, [r0, #8]
 8013f4e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013f50:	6123      	str	r3, [r4, #16]
 8013f52:	f7ff fd15 	bl	8013980 <rmw_get_implementation_identifier>
 8013f56:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8013f5a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8013f5e:	f8c4 9020 	str.w	r9, [r4, #32]
 8013f62:	4630      	mov	r0, r6
 8013f64:	f7ec f946 	bl	80001f4 <strlen>
 8013f68:	1c42      	adds	r2, r0, #1
 8013f6a:	2a3c      	cmp	r2, #60	@ 0x3c
 8013f6c:	f104 0518 	add.w	r5, r4, #24
 8013f70:	d840      	bhi.n	8013ff4 <create_node+0xc4>
 8013f72:	4648      	mov	r0, r9
 8013f74:	4631      	mov	r1, r6
 8013f76:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8013f7a:	f003 fc7a 	bl	8017872 <memcpy>
 8013f7e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8013f82:	4638      	mov	r0, r7
 8013f84:	f7ec f936 	bl	80001f4 <strlen>
 8013f88:	1c42      	adds	r2, r0, #1
 8013f8a:	2a3c      	cmp	r2, #60	@ 0x3c
 8013f8c:	d832      	bhi.n	8013ff4 <create_node+0xc4>
 8013f8e:	4639      	mov	r1, r7
 8013f90:	4648      	mov	r0, r9
 8013f92:	f003 fc6e 	bl	8017872 <memcpy>
 8013f96:	6923      	ldr	r3, [r4, #16]
 8013f98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013f9c:	2101      	movs	r1, #1
 8013f9e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8013fa2:	1842      	adds	r2, r0, r1
 8013fa4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8013fa8:	f7f9 fd14 	bl	800d9d4 <uxr_object_id>
 8013fac:	6160      	str	r0, [r4, #20]
 8013fae:	783b      	ldrb	r3, [r7, #0]
 8013fb0:	2b2f      	cmp	r3, #47	@ 0x2f
 8013fb2:	d127      	bne.n	8014004 <create_node+0xd4>
 8013fb4:	787b      	ldrb	r3, [r7, #1]
 8013fb6:	bb2b      	cbnz	r3, 8014004 <create_node+0xd4>
 8013fb8:	4a17      	ldr	r2, [pc, #92]	@ (8014018 <create_node+0xe8>)
 8013fba:	4818      	ldr	r0, [pc, #96]	@ (801401c <create_node+0xec>)
 8013fbc:	4633      	mov	r3, r6
 8013fbe:	213c      	movs	r1, #60	@ 0x3c
 8013fc0:	f003 fab4 	bl	801752c <sniprintf>
 8013fc4:	6920      	ldr	r0, [r4, #16]
 8013fc6:	4915      	ldr	r1, [pc, #84]	@ (801401c <create_node+0xec>)
 8013fc8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013fcc:	9100      	str	r1, [sp, #0]
 8013fce:	2106      	movs	r1, #6
 8013fd0:	9101      	str	r1, [sp, #4]
 8013fd2:	6811      	ldr	r1, [r2, #0]
 8013fd4:	6962      	ldr	r2, [r4, #20]
 8013fd6:	fa1f f388 	uxth.w	r3, r8
 8013fda:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013fde:	f7f9 fb43 	bl	800d668 <uxr_buffer_create_participant_bin>
 8013fe2:	4602      	mov	r2, r0
 8013fe4:	6920      	ldr	r0, [r4, #16]
 8013fe6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013fea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013fee:	f7f9 f999 	bl	800d324 <run_xrce_session>
 8013ff2:	b918      	cbnz	r0, 8013ffc <create_node+0xcc>
 8013ff4:	4628      	mov	r0, r5
 8013ff6:	f7f9 f823 	bl	800d040 <rmw_uxrce_fini_node_memory>
 8013ffa:	2500      	movs	r5, #0
 8013ffc:	4628      	mov	r0, r5
 8013ffe:	b003      	add	sp, #12
 8014000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014004:	4a06      	ldr	r2, [pc, #24]	@ (8014020 <create_node+0xf0>)
 8014006:	9600      	str	r6, [sp, #0]
 8014008:	463b      	mov	r3, r7
 801400a:	213c      	movs	r1, #60	@ 0x3c
 801400c:	4803      	ldr	r0, [pc, #12]	@ (801401c <create_node+0xec>)
 801400e:	f003 fa8d 	bl	801752c <sniprintf>
 8014012:	e7d7      	b.n	8013fc4 <create_node+0x94>
 8014014:	2000dbec 	.word	0x2000dbec
 8014018:	08018a98 	.word	0x08018a98
 801401c:	2000dd9c 	.word	0x2000dd9c
 8014020:	08018c1c 	.word	0x08018c1c

08014024 <rmw_create_node>:
 8014024:	b199      	cbz	r1, 801404e <rmw_create_node+0x2a>
 8014026:	780b      	ldrb	r3, [r1, #0]
 8014028:	468c      	mov	ip, r1
 801402a:	b183      	cbz	r3, 801404e <rmw_create_node+0x2a>
 801402c:	b410      	push	{r4}
 801402e:	4614      	mov	r4, r2
 8014030:	b14a      	cbz	r2, 8014046 <rmw_create_node+0x22>
 8014032:	7813      	ldrb	r3, [r2, #0]
 8014034:	b13b      	cbz	r3, 8014046 <rmw_create_node+0x22>
 8014036:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8014038:	4603      	mov	r3, r0
 801403a:	4621      	mov	r1, r4
 801403c:	4660      	mov	r0, ip
 801403e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014042:	f7ff bf75 	b.w	8013f30 <create_node>
 8014046:	2000      	movs	r0, #0
 8014048:	f85d 4b04 	ldr.w	r4, [sp], #4
 801404c:	4770      	bx	lr
 801404e:	2000      	movs	r0, #0
 8014050:	4770      	bx	lr
 8014052:	bf00      	nop

08014054 <rmw_destroy_node>:
 8014054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014056:	b328      	cbz	r0, 80140a4 <rmw_destroy_node+0x50>
 8014058:	4607      	mov	r7, r0
 801405a:	6800      	ldr	r0, [r0, #0]
 801405c:	b120      	cbz	r0, 8014068 <rmw_destroy_node+0x14>
 801405e:	4b36      	ldr	r3, [pc, #216]	@ (8014138 <rmw_destroy_node+0xe4>)
 8014060:	6819      	ldr	r1, [r3, #0]
 8014062:	f7ec f8bd 	bl	80001e0 <strcmp>
 8014066:	b9e8      	cbnz	r0, 80140a4 <rmw_destroy_node+0x50>
 8014068:	687d      	ldr	r5, [r7, #4]
 801406a:	b1dd      	cbz	r5, 80140a4 <rmw_destroy_node+0x50>
 801406c:	4b33      	ldr	r3, [pc, #204]	@ (801413c <rmw_destroy_node+0xe8>)
 801406e:	681c      	ldr	r4, [r3, #0]
 8014070:	2c00      	cmp	r4, #0
 8014072:	d05f      	beq.n	8014134 <rmw_destroy_node+0xe0>
 8014074:	2600      	movs	r6, #0
 8014076:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801407a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801407e:	429d      	cmp	r5, r3
 8014080:	d013      	beq.n	80140aa <rmw_destroy_node+0x56>
 8014082:	2c00      	cmp	r4, #0
 8014084:	d1f7      	bne.n	8014076 <rmw_destroy_node+0x22>
 8014086:	4b2e      	ldr	r3, [pc, #184]	@ (8014140 <rmw_destroy_node+0xec>)
 8014088:	681c      	ldr	r4, [r3, #0]
 801408a:	b1c4      	cbz	r4, 80140be <rmw_destroy_node+0x6a>
 801408c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014090:	6a0b      	ldr	r3, [r1, #32]
 8014092:	429d      	cmp	r5, r3
 8014094:	d1f9      	bne.n	801408a <rmw_destroy_node+0x36>
 8014096:	317c      	adds	r1, #124	@ 0x7c
 8014098:	4638      	mov	r0, r7
 801409a:	f000 fae5 	bl	8014668 <rmw_destroy_subscription>
 801409e:	2801      	cmp	r0, #1
 80140a0:	4606      	mov	r6, r0
 80140a2:	d1f2      	bne.n	801408a <rmw_destroy_node+0x36>
 80140a4:	2601      	movs	r6, #1
 80140a6:	4630      	mov	r0, r6
 80140a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140aa:	3184      	adds	r1, #132	@ 0x84
 80140ac:	4638      	mov	r0, r7
 80140ae:	f7f8 fe0f 	bl	800ccd0 <rmw_destroy_publisher>
 80140b2:	2801      	cmp	r0, #1
 80140b4:	4606      	mov	r6, r0
 80140b6:	d0f5      	beq.n	80140a4 <rmw_destroy_node+0x50>
 80140b8:	2c00      	cmp	r4, #0
 80140ba:	d1dc      	bne.n	8014076 <rmw_destroy_node+0x22>
 80140bc:	e7e3      	b.n	8014086 <rmw_destroy_node+0x32>
 80140be:	4b21      	ldr	r3, [pc, #132]	@ (8014144 <rmw_destroy_node+0xf0>)
 80140c0:	681c      	ldr	r4, [r3, #0]
 80140c2:	b16c      	cbz	r4, 80140e0 <rmw_destroy_node+0x8c>
 80140c4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80140c8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80140ca:	429d      	cmp	r5, r3
 80140cc:	d1f9      	bne.n	80140c2 <rmw_destroy_node+0x6e>
 80140ce:	317c      	adds	r1, #124	@ 0x7c
 80140d0:	4638      	mov	r0, r7
 80140d2:	f000 f993 	bl	80143fc <rmw_destroy_service>
 80140d6:	2801      	cmp	r0, #1
 80140d8:	4606      	mov	r6, r0
 80140da:	d0e3      	beq.n	80140a4 <rmw_destroy_node+0x50>
 80140dc:	2c00      	cmp	r4, #0
 80140de:	d1f1      	bne.n	80140c4 <rmw_destroy_node+0x70>
 80140e0:	4b19      	ldr	r3, [pc, #100]	@ (8014148 <rmw_destroy_node+0xf4>)
 80140e2:	681c      	ldr	r4, [r3, #0]
 80140e4:	b16c      	cbz	r4, 8014102 <rmw_destroy_node+0xae>
 80140e6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80140ea:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80140ec:	429d      	cmp	r5, r3
 80140ee:	d1f9      	bne.n	80140e4 <rmw_destroy_node+0x90>
 80140f0:	317c      	adds	r1, #124	@ 0x7c
 80140f2:	4638      	mov	r0, r7
 80140f4:	f7ff fc00 	bl	80138f8 <rmw_destroy_client>
 80140f8:	2801      	cmp	r0, #1
 80140fa:	4606      	mov	r6, r0
 80140fc:	d0d2      	beq.n	80140a4 <rmw_destroy_node+0x50>
 80140fe:	2c00      	cmp	r4, #0
 8014100:	d1f1      	bne.n	80140e6 <rmw_destroy_node+0x92>
 8014102:	6928      	ldr	r0, [r5, #16]
 8014104:	696a      	ldr	r2, [r5, #20]
 8014106:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801410a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801410e:	6819      	ldr	r1, [r3, #0]
 8014110:	f7f9 fa5e 	bl	800d5d0 <uxr_buffer_delete_entity>
 8014114:	4602      	mov	r2, r0
 8014116:	6928      	ldr	r0, [r5, #16]
 8014118:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801411c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014120:	f7f9 f900 	bl	800d324 <run_xrce_session>
 8014124:	2800      	cmp	r0, #0
 8014126:	bf08      	it	eq
 8014128:	2602      	moveq	r6, #2
 801412a:	4638      	mov	r0, r7
 801412c:	f7f8 ff88 	bl	800d040 <rmw_uxrce_fini_node_memory>
 8014130:	4630      	mov	r0, r6
 8014132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014134:	4626      	mov	r6, r4
 8014136:	e7a6      	b.n	8014086 <rmw_destroy_node+0x32>
 8014138:	080191ac 	.word	0x080191ac
 801413c:	2000dbfc 	.word	0x2000dbfc
 8014140:	2000dc3c 	.word	0x2000dc3c
 8014144:	2000dc0c 	.word	0x2000dc0c
 8014148:	20009320 	.word	0x20009320

0801414c <rmw_node_get_graph_guard_condition>:
 801414c:	6843      	ldr	r3, [r0, #4]
 801414e:	6918      	ldr	r0, [r3, #16]
 8014150:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8014154:	4770      	bx	lr
 8014156:	bf00      	nop

08014158 <rmw_send_request>:
 8014158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801415c:	4604      	mov	r4, r0
 801415e:	6800      	ldr	r0, [r0, #0]
 8014160:	b08b      	sub	sp, #44	@ 0x2c
 8014162:	460e      	mov	r6, r1
 8014164:	4615      	mov	r5, r2
 8014166:	b128      	cbz	r0, 8014174 <rmw_send_request+0x1c>
 8014168:	4b21      	ldr	r3, [pc, #132]	@ (80141f0 <rmw_send_request+0x98>)
 801416a:	6819      	ldr	r1, [r3, #0]
 801416c:	f7ec f838 	bl	80001e0 <strcmp>
 8014170:	2800      	cmp	r0, #0
 8014172:	d139      	bne.n	80141e8 <rmw_send_request+0x90>
 8014174:	6864      	ldr	r4, [r4, #4]
 8014176:	6963      	ldr	r3, [r4, #20]
 8014178:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801417c:	689b      	ldr	r3, [r3, #8]
 801417e:	4798      	blx	r3
 8014180:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8014184:	4630      	mov	r0, r6
 8014186:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801418a:	4798      	blx	r3
 801418c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014190:	9000      	str	r0, [sp, #0]
 8014192:	6922      	ldr	r2, [r4, #16]
 8014194:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8014196:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801419a:	ab02      	add	r3, sp, #8
 801419c:	f7fa ff14 	bl	800efc8 <uxr_prepare_output_stream>
 80141a0:	2700      	movs	r7, #0
 80141a2:	6028      	str	r0, [r5, #0]
 80141a4:	606f      	str	r7, [r5, #4]
 80141a6:	b198      	cbz	r0, 80141d0 <rmw_send_request+0x78>
 80141a8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80141ac:	a902      	add	r1, sp, #8
 80141ae:	4630      	mov	r0, r6
 80141b0:	4798      	blx	r3
 80141b2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80141b6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80141ba:	2b01      	cmp	r3, #1
 80141bc:	d00c      	beq.n	80141d8 <rmw_send_request+0x80>
 80141be:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80141c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80141c4:	f7fa f914 	bl	800e3f0 <uxr_run_session_until_confirm_delivery>
 80141c8:	4638      	mov	r0, r7
 80141ca:	b00b      	add	sp, #44	@ 0x2c
 80141cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141d0:	2001      	movs	r0, #1
 80141d2:	b00b      	add	sp, #44	@ 0x2c
 80141d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80141dc:	f7f9 fd48 	bl	800dc70 <uxr_flash_output_streams>
 80141e0:	4638      	mov	r0, r7
 80141e2:	b00b      	add	sp, #44	@ 0x2c
 80141e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141e8:	200c      	movs	r0, #12
 80141ea:	b00b      	add	sp, #44	@ 0x2c
 80141ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141f0:	080191ac 	.word	0x080191ac

080141f4 <rmw_take_request>:
 80141f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141f8:	4605      	mov	r5, r0
 80141fa:	6800      	ldr	r0, [r0, #0]
 80141fc:	b089      	sub	sp, #36	@ 0x24
 80141fe:	460c      	mov	r4, r1
 8014200:	4690      	mov	r8, r2
 8014202:	461e      	mov	r6, r3
 8014204:	b128      	cbz	r0, 8014212 <rmw_take_request+0x1e>
 8014206:	4b28      	ldr	r3, [pc, #160]	@ (80142a8 <rmw_take_request+0xb4>)
 8014208:	6819      	ldr	r1, [r3, #0]
 801420a:	f7eb ffe9 	bl	80001e0 <strcmp>
 801420e:	2800      	cmp	r0, #0
 8014210:	d146      	bne.n	80142a0 <rmw_take_request+0xac>
 8014212:	b10e      	cbz	r6, 8014218 <rmw_take_request+0x24>
 8014214:	2300      	movs	r3, #0
 8014216:	7033      	strb	r3, [r6, #0]
 8014218:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801421c:	f7f9 f804 	bl	800d228 <rmw_uxrce_clean_expired_static_input_buffer>
 8014220:	4648      	mov	r0, r9
 8014222:	f7f8 ffd9 	bl	800d1d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014226:	4607      	mov	r7, r0
 8014228:	b3b0      	cbz	r0, 8014298 <rmw_take_request+0xa4>
 801422a:	6885      	ldr	r5, [r0, #8]
 801422c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8014230:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8014234:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014238:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801423c:	7423      	strb	r3, [r4, #16]
 801423e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8014242:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8014246:	74e2      	strb	r2, [r4, #19]
 8014248:	f8a4 3011 	strh.w	r3, [r4, #17]
 801424c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8014250:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8014254:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8014258:	61e1      	str	r1, [r4, #28]
 801425a:	6162      	str	r2, [r4, #20]
 801425c:	61a3      	str	r3, [r4, #24]
 801425e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014262:	689b      	ldr	r3, [r3, #8]
 8014264:	4798      	blx	r3
 8014266:	6844      	ldr	r4, [r0, #4]
 8014268:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801426c:	f105 0110 	add.w	r1, r5, #16
 8014270:	4668      	mov	r0, sp
 8014272:	f7f7 fa65 	bl	800b740 <ucdr_init_buffer>
 8014276:	68e3      	ldr	r3, [r4, #12]
 8014278:	4641      	mov	r1, r8
 801427a:	4668      	mov	r0, sp
 801427c:	4798      	blx	r3
 801427e:	4639      	mov	r1, r7
 8014280:	4604      	mov	r4, r0
 8014282:	480a      	ldr	r0, [pc, #40]	@ (80142ac <rmw_take_request+0xb8>)
 8014284:	f7ff fb24 	bl	80138d0 <put_memory>
 8014288:	b106      	cbz	r6, 801428c <rmw_take_request+0x98>
 801428a:	7034      	strb	r4, [r6, #0]
 801428c:	f084 0001 	eor.w	r0, r4, #1
 8014290:	b2c0      	uxtb	r0, r0
 8014292:	b009      	add	sp, #36	@ 0x24
 8014294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014298:	2001      	movs	r0, #1
 801429a:	b009      	add	sp, #36	@ 0x24
 801429c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142a0:	200c      	movs	r0, #12
 80142a2:	b009      	add	sp, #36	@ 0x24
 80142a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142a8:	080191ac 	.word	0x080191ac
 80142ac:	2000dc2c 	.word	0x2000dc2c

080142b0 <rmw_send_response>:
 80142b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142b2:	4605      	mov	r5, r0
 80142b4:	6800      	ldr	r0, [r0, #0]
 80142b6:	b091      	sub	sp, #68	@ 0x44
 80142b8:	460c      	mov	r4, r1
 80142ba:	4616      	mov	r6, r2
 80142bc:	b128      	cbz	r0, 80142ca <rmw_send_response+0x1a>
 80142be:	4b29      	ldr	r3, [pc, #164]	@ (8014364 <rmw_send_response+0xb4>)
 80142c0:	6819      	ldr	r1, [r3, #0]
 80142c2:	f7eb ff8d 	bl	80001e0 <strcmp>
 80142c6:	2800      	cmp	r0, #0
 80142c8:	d141      	bne.n	801434e <rmw_send_response+0x9e>
 80142ca:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80142ce:	9306      	str	r3, [sp, #24]
 80142d0:	4623      	mov	r3, r4
 80142d2:	9207      	str	r2, [sp, #28]
 80142d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142d8:	686d      	ldr	r5, [r5, #4]
 80142da:	789b      	ldrb	r3, [r3, #2]
 80142dc:	68a1      	ldr	r1, [r4, #8]
 80142de:	f88d 2017 	strb.w	r2, [sp, #23]
 80142e2:	f88d 3016 	strb.w	r3, [sp, #22]
 80142e6:	68e2      	ldr	r2, [r4, #12]
 80142e8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80142ec:	6860      	ldr	r0, [r4, #4]
 80142ee:	f8ad 3014 	strh.w	r3, [sp, #20]
 80142f2:	ab02      	add	r3, sp, #8
 80142f4:	c307      	stmia	r3!, {r0, r1, r2}
 80142f6:	696b      	ldr	r3, [r5, #20]
 80142f8:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80142fa:	68db      	ldr	r3, [r3, #12]
 80142fc:	4798      	blx	r3
 80142fe:	6844      	ldr	r4, [r0, #4]
 8014300:	4630      	mov	r0, r6
 8014302:	6923      	ldr	r3, [r4, #16]
 8014304:	4798      	blx	r3
 8014306:	f100 0318 	add.w	r3, r0, #24
 801430a:	6938      	ldr	r0, [r7, #16]
 801430c:	9300      	str	r3, [sp, #0]
 801430e:	692a      	ldr	r2, [r5, #16]
 8014310:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8014312:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014316:	ab08      	add	r3, sp, #32
 8014318:	f7fa fe56 	bl	800efc8 <uxr_prepare_output_stream>
 801431c:	b910      	cbnz	r0, 8014324 <rmw_send_response+0x74>
 801431e:	2001      	movs	r0, #1
 8014320:	b011      	add	sp, #68	@ 0x44
 8014322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014324:	a902      	add	r1, sp, #8
 8014326:	a808      	add	r0, sp, #32
 8014328:	f7fb ff86 	bl	8010238 <uxr_serialize_SampleIdentity>
 801432c:	68a3      	ldr	r3, [r4, #8]
 801432e:	a908      	add	r1, sp, #32
 8014330:	4630      	mov	r0, r6
 8014332:	4798      	blx	r3
 8014334:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8014338:	6938      	ldr	r0, [r7, #16]
 801433a:	2b01      	cmp	r3, #1
 801433c:	d00a      	beq.n	8014354 <rmw_send_response+0xa4>
 801433e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8014340:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014344:	f7fa f854 	bl	800e3f0 <uxr_run_session_until_confirm_delivery>
 8014348:	2000      	movs	r0, #0
 801434a:	b011      	add	sp, #68	@ 0x44
 801434c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801434e:	200c      	movs	r0, #12
 8014350:	b011      	add	sp, #68	@ 0x44
 8014352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014354:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014358:	f7f9 fc8a 	bl	800dc70 <uxr_flash_output_streams>
 801435c:	2000      	movs	r0, #0
 801435e:	b011      	add	sp, #68	@ 0x44
 8014360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014362:	bf00      	nop
 8014364:	080191ac 	.word	0x080191ac

08014368 <rmw_take_response>:
 8014368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801436c:	4604      	mov	r4, r0
 801436e:	6800      	ldr	r0, [r0, #0]
 8014370:	b088      	sub	sp, #32
 8014372:	4688      	mov	r8, r1
 8014374:	4617      	mov	r7, r2
 8014376:	461d      	mov	r5, r3
 8014378:	b120      	cbz	r0, 8014384 <rmw_take_response+0x1c>
 801437a:	4b1e      	ldr	r3, [pc, #120]	@ (80143f4 <rmw_take_response+0x8c>)
 801437c:	6819      	ldr	r1, [r3, #0]
 801437e:	f7eb ff2f 	bl	80001e0 <strcmp>
 8014382:	bb78      	cbnz	r0, 80143e4 <rmw_take_response+0x7c>
 8014384:	b10d      	cbz	r5, 801438a <rmw_take_response+0x22>
 8014386:	2300      	movs	r3, #0
 8014388:	702b      	strb	r3, [r5, #0]
 801438a:	6864      	ldr	r4, [r4, #4]
 801438c:	f7f8 ff4c 	bl	800d228 <rmw_uxrce_clean_expired_static_input_buffer>
 8014390:	4620      	mov	r0, r4
 8014392:	f7f8 ff21 	bl	800d1d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014396:	4606      	mov	r6, r0
 8014398:	b340      	cbz	r0, 80143ec <rmw_take_response+0x84>
 801439a:	6963      	ldr	r3, [r4, #20]
 801439c:	6884      	ldr	r4, [r0, #8]
 801439e:	68db      	ldr	r3, [r3, #12]
 80143a0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80143a4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80143a8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80143ac:	4798      	blx	r3
 80143ae:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80143b2:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80143b6:	f104 0110 	add.w	r1, r4, #16
 80143ba:	4668      	mov	r0, sp
 80143bc:	f7f7 f9c0 	bl	800b740 <ucdr_init_buffer>
 80143c0:	4639      	mov	r1, r7
 80143c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80143c6:	4668      	mov	r0, sp
 80143c8:	4798      	blx	r3
 80143ca:	4631      	mov	r1, r6
 80143cc:	4604      	mov	r4, r0
 80143ce:	480a      	ldr	r0, [pc, #40]	@ (80143f8 <rmw_take_response+0x90>)
 80143d0:	f7ff fa7e 	bl	80138d0 <put_memory>
 80143d4:	b105      	cbz	r5, 80143d8 <rmw_take_response+0x70>
 80143d6:	702c      	strb	r4, [r5, #0]
 80143d8:	f084 0001 	eor.w	r0, r4, #1
 80143dc:	b2c0      	uxtb	r0, r0
 80143de:	b008      	add	sp, #32
 80143e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143e4:	200c      	movs	r0, #12
 80143e6:	b008      	add	sp, #32
 80143e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ec:	2001      	movs	r0, #1
 80143ee:	b008      	add	sp, #32
 80143f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143f4:	080191ac 	.word	0x080191ac
 80143f8:	2000dc2c 	.word	0x2000dc2c

080143fc <rmw_destroy_service>:
 80143fc:	b570      	push	{r4, r5, r6, lr}
 80143fe:	b128      	cbz	r0, 801440c <rmw_destroy_service+0x10>
 8014400:	4604      	mov	r4, r0
 8014402:	6800      	ldr	r0, [r0, #0]
 8014404:	460d      	mov	r5, r1
 8014406:	f7f9 f80d 	bl	800d424 <is_uxrce_rmw_identifier_valid>
 801440a:	b910      	cbnz	r0, 8014412 <rmw_destroy_service+0x16>
 801440c:	2401      	movs	r4, #1
 801440e:	4620      	mov	r0, r4
 8014410:	bd70      	pop	{r4, r5, r6, pc}
 8014412:	6863      	ldr	r3, [r4, #4]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d0f9      	beq.n	801440c <rmw_destroy_service+0x10>
 8014418:	2d00      	cmp	r5, #0
 801441a:	d0f7      	beq.n	801440c <rmw_destroy_service+0x10>
 801441c:	6828      	ldr	r0, [r5, #0]
 801441e:	f7f9 f801 	bl	800d424 <is_uxrce_rmw_identifier_valid>
 8014422:	2800      	cmp	r0, #0
 8014424:	d0f2      	beq.n	801440c <rmw_destroy_service+0x10>
 8014426:	686e      	ldr	r6, [r5, #4]
 8014428:	2e00      	cmp	r6, #0
 801442a:	d0ef      	beq.n	801440c <rmw_destroy_service+0x10>
 801442c:	6864      	ldr	r4, [r4, #4]
 801442e:	6932      	ldr	r2, [r6, #16]
 8014430:	6920      	ldr	r0, [r4, #16]
 8014432:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014436:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801443a:	6819      	ldr	r1, [r3, #0]
 801443c:	f001 fb6a 	bl	8015b14 <uxr_buffer_cancel_data>
 8014440:	4602      	mov	r2, r0
 8014442:	6920      	ldr	r0, [r4, #16]
 8014444:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014448:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801444c:	f7f8 ff6a 	bl	800d324 <run_xrce_session>
 8014450:	6920      	ldr	r0, [r4, #16]
 8014452:	6932      	ldr	r2, [r6, #16]
 8014454:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014458:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801445c:	6819      	ldr	r1, [r3, #0]
 801445e:	f7f9 f8b7 	bl	800d5d0 <uxr_buffer_delete_entity>
 8014462:	4602      	mov	r2, r0
 8014464:	6920      	ldr	r0, [r4, #16]
 8014466:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801446a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801446e:	f7f8 ff59 	bl	800d324 <run_xrce_session>
 8014472:	2800      	cmp	r0, #0
 8014474:	4628      	mov	r0, r5
 8014476:	bf14      	ite	ne
 8014478:	2400      	movne	r4, #0
 801447a:	2402      	moveq	r4, #2
 801447c:	f7f8 fe24 	bl	800d0c8 <rmw_uxrce_fini_service_memory>
 8014480:	e7c5      	b.n	801440e <rmw_destroy_service+0x12>
 8014482:	bf00      	nop

08014484 <rmw_create_subscription>:
 8014484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014488:	b08d      	sub	sp, #52	@ 0x34
 801448a:	2800      	cmp	r0, #0
 801448c:	f000 80d1 	beq.w	8014632 <rmw_create_subscription+0x1ae>
 8014490:	460e      	mov	r6, r1
 8014492:	2900      	cmp	r1, #0
 8014494:	f000 80cd 	beq.w	8014632 <rmw_create_subscription+0x1ae>
 8014498:	4604      	mov	r4, r0
 801449a:	6800      	ldr	r0, [r0, #0]
 801449c:	4615      	mov	r5, r2
 801449e:	4698      	mov	r8, r3
 80144a0:	f7f8 ffc0 	bl	800d424 <is_uxrce_rmw_identifier_valid>
 80144a4:	2800      	cmp	r0, #0
 80144a6:	f000 80c4 	beq.w	8014632 <rmw_create_subscription+0x1ae>
 80144aa:	2d00      	cmp	r5, #0
 80144ac:	f000 80c1 	beq.w	8014632 <rmw_create_subscription+0x1ae>
 80144b0:	782b      	ldrb	r3, [r5, #0]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	f000 80bd 	beq.w	8014632 <rmw_create_subscription+0x1ae>
 80144b8:	f1b8 0f00 	cmp.w	r8, #0
 80144bc:	f000 80b9 	beq.w	8014632 <rmw_create_subscription+0x1ae>
 80144c0:	485e      	ldr	r0, [pc, #376]	@ (801463c <rmw_create_subscription+0x1b8>)
 80144c2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80144c6:	f7ff f9f3 	bl	80138b0 <get_memory>
 80144ca:	4604      	mov	r4, r0
 80144cc:	2800      	cmp	r0, #0
 80144ce:	f000 80b1 	beq.w	8014634 <rmw_create_subscription+0x1b0>
 80144d2:	6887      	ldr	r7, [r0, #8]
 80144d4:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 80144d8:	f7ff fa52 	bl	8013980 <rmw_get_implementation_identifier>
 80144dc:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 80144e0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80144e2:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 80144e6:	4628      	mov	r0, r5
 80144e8:	f7eb fe84 	bl	80001f4 <strlen>
 80144ec:	3001      	adds	r0, #1
 80144ee:	283c      	cmp	r0, #60	@ 0x3c
 80144f0:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80144f4:	f200 8096 	bhi.w	8014624 <rmw_create_subscription+0x1a0>
 80144f8:	4a51      	ldr	r2, [pc, #324]	@ (8014640 <rmw_create_subscription+0x1bc>)
 80144fa:	462b      	mov	r3, r5
 80144fc:	213c      	movs	r1, #60	@ 0x3c
 80144fe:	4650      	mov	r0, sl
 8014500:	f003 f814 	bl	801752c <sniprintf>
 8014504:	4641      	mov	r1, r8
 8014506:	f8c7 9020 	str.w	r9, [r7, #32]
 801450a:	2250      	movs	r2, #80	@ 0x50
 801450c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8014510:	f003 f9af 	bl	8017872 <memcpy>
 8014514:	494b      	ldr	r1, [pc, #300]	@ (8014644 <rmw_create_subscription+0x1c0>)
 8014516:	4630      	mov	r0, r6
 8014518:	f7f8 ff92 	bl	800d440 <get_message_typesupport_handle>
 801451c:	2800      	cmp	r0, #0
 801451e:	f000 8081 	beq.w	8014624 <rmw_create_subscription+0x1a0>
 8014522:	6842      	ldr	r2, [r0, #4]
 8014524:	61ba      	str	r2, [r7, #24]
 8014526:	2a00      	cmp	r2, #0
 8014528:	d07c      	beq.n	8014624 <rmw_create_subscription+0x1a0>
 801452a:	4629      	mov	r1, r5
 801452c:	4643      	mov	r3, r8
 801452e:	4648      	mov	r0, r9
 8014530:	f7ff fc8c 	bl	8013e4c <create_topic>
 8014534:	61f8      	str	r0, [r7, #28]
 8014536:	2800      	cmp	r0, #0
 8014538:	d078      	beq.n	801462c <rmw_create_subscription+0x1a8>
 801453a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801453e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014542:	2104      	movs	r1, #4
 8014544:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8014548:	1c42      	adds	r2, r0, #1
 801454a:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801454e:	f7f9 fa41 	bl	800d9d4 <uxr_object_id>
 8014552:	6138      	str	r0, [r7, #16]
 8014554:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014558:	2506      	movs	r5, #6
 801455a:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801455e:	9500      	str	r5, [sp, #0]
 8014560:	6819      	ldr	r1, [r3, #0]
 8014562:	693a      	ldr	r2, [r7, #16]
 8014564:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014568:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801456c:	f7f9 f914 	bl	800d798 <uxr_buffer_create_subscriber_bin>
 8014570:	4602      	mov	r2, r0
 8014572:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014576:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801457a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801457e:	f7f8 fed1 	bl	800d324 <run_xrce_session>
 8014582:	2800      	cmp	r0, #0
 8014584:	d04e      	beq.n	8014624 <rmw_create_subscription+0x1a0>
 8014586:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801458a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801458e:	4629      	mov	r1, r5
 8014590:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8014594:	1c42      	adds	r2, r0, #1
 8014596:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801459a:	f7f9 fa1b 	bl	800d9d4 <uxr_object_id>
 801459e:	ae08      	add	r6, sp, #32
 80145a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80145a4:	69fb      	ldr	r3, [r7, #28]
 80145a6:	6178      	str	r0, [r7, #20]
 80145a8:	4641      	mov	r1, r8
 80145aa:	4630      	mov	r0, r6
 80145ac:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 80145b0:	9305      	str	r3, [sp, #20]
 80145b2:	f7f8 fed3 	bl	800d35c <convert_qos_profile>
 80145b6:	9503      	str	r5, [sp, #12]
 80145b8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80145bc:	9b05      	ldr	r3, [sp, #20]
 80145be:	9001      	str	r0, [sp, #4]
 80145c0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80145c4:	691b      	ldr	r3, [r3, #16]
 80145c6:	9300      	str	r3, [sp, #0]
 80145c8:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 80145cc:	f8db 1000 	ldr.w	r1, [fp]
 80145d0:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80145d4:	f7f9 f986 	bl	800d8e4 <uxr_buffer_create_datareader_bin>
 80145d8:	4602      	mov	r2, r0
 80145da:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80145de:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80145e2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80145e6:	f7f8 fe9d 	bl	800d324 <run_xrce_session>
 80145ea:	b1d8      	cbz	r0, 8014624 <rmw_create_subscription+0x1a0>
 80145ec:	f898 3008 	ldrb.w	r3, [r8, #8]
 80145f0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80145f4:	2b02      	cmp	r3, #2
 80145f6:	bf0c      	ite	eq
 80145f8:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 80145fc:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8014600:	9307      	str	r3, [sp, #28]
 8014602:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8014606:	2200      	movs	r2, #0
 8014608:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 801460c:	ab0a      	add	r3, sp, #40	@ 0x28
 801460e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014612:	9300      	str	r3, [sp, #0]
 8014614:	697a      	ldr	r2, [r7, #20]
 8014616:	9b07      	ldr	r3, [sp, #28]
 8014618:	6809      	ldr	r1, [r1, #0]
 801461a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801461e:	f001 fa3f 	bl	8015aa0 <uxr_buffer_request_data>
 8014622:	e007      	b.n	8014634 <rmw_create_subscription+0x1b0>
 8014624:	69f8      	ldr	r0, [r7, #28]
 8014626:	b108      	cbz	r0, 801462c <rmw_create_subscription+0x1a8>
 8014628:	f7f8 fd7a 	bl	800d120 <rmw_uxrce_fini_topic_memory>
 801462c:	4620      	mov	r0, r4
 801462e:	f7f8 fd35 	bl	800d09c <rmw_uxrce_fini_subscription_memory>
 8014632:	2400      	movs	r4, #0
 8014634:	4620      	mov	r0, r4
 8014636:	b00d      	add	sp, #52	@ 0x34
 8014638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801463c:	2000dc3c 	.word	0x2000dc3c
 8014640:	08018a98 	.word	0x08018a98
 8014644:	08018828 	.word	0x08018828

08014648 <rmw_subscription_get_actual_qos>:
 8014648:	b150      	cbz	r0, 8014660 <rmw_subscription_get_actual_qos+0x18>
 801464a:	b508      	push	{r3, lr}
 801464c:	460b      	mov	r3, r1
 801464e:	b149      	cbz	r1, 8014664 <rmw_subscription_get_actual_qos+0x1c>
 8014650:	6841      	ldr	r1, [r0, #4]
 8014652:	2250      	movs	r2, #80	@ 0x50
 8014654:	3128      	adds	r1, #40	@ 0x28
 8014656:	4618      	mov	r0, r3
 8014658:	f003 f90b 	bl	8017872 <memcpy>
 801465c:	2000      	movs	r0, #0
 801465e:	bd08      	pop	{r3, pc}
 8014660:	200b      	movs	r0, #11
 8014662:	4770      	bx	lr
 8014664:	200b      	movs	r0, #11
 8014666:	bd08      	pop	{r3, pc}

08014668 <rmw_destroy_subscription>:
 8014668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801466a:	b128      	cbz	r0, 8014678 <rmw_destroy_subscription+0x10>
 801466c:	4604      	mov	r4, r0
 801466e:	6800      	ldr	r0, [r0, #0]
 8014670:	460d      	mov	r5, r1
 8014672:	f7f8 fed7 	bl	800d424 <is_uxrce_rmw_identifier_valid>
 8014676:	b910      	cbnz	r0, 801467e <rmw_destroy_subscription+0x16>
 8014678:	2401      	movs	r4, #1
 801467a:	4620      	mov	r0, r4
 801467c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801467e:	6863      	ldr	r3, [r4, #4]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d0f9      	beq.n	8014678 <rmw_destroy_subscription+0x10>
 8014684:	2d00      	cmp	r5, #0
 8014686:	d0f7      	beq.n	8014678 <rmw_destroy_subscription+0x10>
 8014688:	6828      	ldr	r0, [r5, #0]
 801468a:	f7f8 fecb 	bl	800d424 <is_uxrce_rmw_identifier_valid>
 801468e:	2800      	cmp	r0, #0
 8014690:	d0f2      	beq.n	8014678 <rmw_destroy_subscription+0x10>
 8014692:	686c      	ldr	r4, [r5, #4]
 8014694:	2c00      	cmp	r4, #0
 8014696:	d0ef      	beq.n	8014678 <rmw_destroy_subscription+0x10>
 8014698:	6a26      	ldr	r6, [r4, #32]
 801469a:	6962      	ldr	r2, [r4, #20]
 801469c:	6930      	ldr	r0, [r6, #16]
 801469e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80146a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80146a6:	6819      	ldr	r1, [r3, #0]
 80146a8:	f001 fa34 	bl	8015b14 <uxr_buffer_cancel_data>
 80146ac:	4602      	mov	r2, r0
 80146ae:	6930      	ldr	r0, [r6, #16]
 80146b0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80146b4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80146b8:	f7f8 fe34 	bl	800d324 <run_xrce_session>
 80146bc:	69e0      	ldr	r0, [r4, #28]
 80146be:	f7ff fc15 	bl	8013eec <destroy_topic>
 80146c2:	6a23      	ldr	r3, [r4, #32]
 80146c4:	6962      	ldr	r2, [r4, #20]
 80146c6:	6918      	ldr	r0, [r3, #16]
 80146c8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80146cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80146d0:	6819      	ldr	r1, [r3, #0]
 80146d2:	f7f8 ff7d 	bl	800d5d0 <uxr_buffer_delete_entity>
 80146d6:	6a23      	ldr	r3, [r4, #32]
 80146d8:	6922      	ldr	r2, [r4, #16]
 80146da:	691b      	ldr	r3, [r3, #16]
 80146dc:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80146e0:	4604      	mov	r4, r0
 80146e2:	6809      	ldr	r1, [r1, #0]
 80146e4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80146e8:	f7f8 ff72 	bl	800d5d0 <uxr_buffer_delete_entity>
 80146ec:	6937      	ldr	r7, [r6, #16]
 80146ee:	4622      	mov	r2, r4
 80146f0:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80146f4:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80146f8:	4604      	mov	r4, r0
 80146fa:	4638      	mov	r0, r7
 80146fc:	f7f8 fe12 	bl	800d324 <run_xrce_session>
 8014700:	6936      	ldr	r6, [r6, #16]
 8014702:	4622      	mov	r2, r4
 8014704:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8014708:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 801470c:	4604      	mov	r4, r0
 801470e:	4630      	mov	r0, r6
 8014710:	f7f8 fe08 	bl	800d324 <run_xrce_session>
 8014714:	b12c      	cbz	r4, 8014722 <rmw_destroy_subscription+0xba>
 8014716:	b120      	cbz	r0, 8014722 <rmw_destroy_subscription+0xba>
 8014718:	2400      	movs	r4, #0
 801471a:	4628      	mov	r0, r5
 801471c:	f7f8 fcbe 	bl	800d09c <rmw_uxrce_fini_subscription_memory>
 8014720:	e7ab      	b.n	801467a <rmw_destroy_subscription+0x12>
 8014722:	2402      	movs	r4, #2
 8014724:	e7f9      	b.n	801471a <rmw_destroy_subscription+0xb2>
 8014726:	bf00      	nop

08014728 <rmw_take_with_info>:
 8014728:	b5f0      	push	{r4, r5, r6, r7, lr}
 801472a:	4604      	mov	r4, r0
 801472c:	6800      	ldr	r0, [r0, #0]
 801472e:	b089      	sub	sp, #36	@ 0x24
 8014730:	460f      	mov	r7, r1
 8014732:	4615      	mov	r5, r2
 8014734:	b128      	cbz	r0, 8014742 <rmw_take_with_info+0x1a>
 8014736:	4b24      	ldr	r3, [pc, #144]	@ (80147c8 <rmw_take_with_info+0xa0>)
 8014738:	6819      	ldr	r1, [r3, #0]
 801473a:	f7eb fd51 	bl	80001e0 <strcmp>
 801473e:	2800      	cmp	r0, #0
 8014740:	d13e      	bne.n	80147c0 <rmw_take_with_info+0x98>
 8014742:	b305      	cbz	r5, 8014786 <rmw_take_with_info+0x5e>
 8014744:	6864      	ldr	r4, [r4, #4]
 8014746:	2300      	movs	r3, #0
 8014748:	702b      	strb	r3, [r5, #0]
 801474a:	f7f8 fd6d 	bl	800d228 <rmw_uxrce_clean_expired_static_input_buffer>
 801474e:	4620      	mov	r0, r4
 8014750:	f7f8 fd42 	bl	800d1d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014754:	4606      	mov	r6, r0
 8014756:	b1f0      	cbz	r0, 8014796 <rmw_take_with_info+0x6e>
 8014758:	6881      	ldr	r1, [r0, #8]
 801475a:	4668      	mov	r0, sp
 801475c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014760:	3110      	adds	r1, #16
 8014762:	f7f6 ffed 	bl	800b740 <ucdr_init_buffer>
 8014766:	69a3      	ldr	r3, [r4, #24]
 8014768:	4639      	mov	r1, r7
 801476a:	68db      	ldr	r3, [r3, #12]
 801476c:	4668      	mov	r0, sp
 801476e:	4798      	blx	r3
 8014770:	4631      	mov	r1, r6
 8014772:	4604      	mov	r4, r0
 8014774:	4815      	ldr	r0, [pc, #84]	@ (80147cc <rmw_take_with_info+0xa4>)
 8014776:	f7ff f8ab 	bl	80138d0 <put_memory>
 801477a:	702c      	strb	r4, [r5, #0]
 801477c:	f084 0001 	eor.w	r0, r4, #1
 8014780:	b2c0      	uxtb	r0, r0
 8014782:	b009      	add	sp, #36	@ 0x24
 8014784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014786:	6864      	ldr	r4, [r4, #4]
 8014788:	f7f8 fd4e 	bl	800d228 <rmw_uxrce_clean_expired_static_input_buffer>
 801478c:	4620      	mov	r0, r4
 801478e:	f7f8 fd23 	bl	800d1d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014792:	4605      	mov	r5, r0
 8014794:	b910      	cbnz	r0, 801479c <rmw_take_with_info+0x74>
 8014796:	2001      	movs	r0, #1
 8014798:	b009      	add	sp, #36	@ 0x24
 801479a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801479c:	68a9      	ldr	r1, [r5, #8]
 801479e:	4668      	mov	r0, sp
 80147a0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80147a4:	3110      	adds	r1, #16
 80147a6:	f7f6 ffcb 	bl	800b740 <ucdr_init_buffer>
 80147aa:	69a3      	ldr	r3, [r4, #24]
 80147ac:	4639      	mov	r1, r7
 80147ae:	68db      	ldr	r3, [r3, #12]
 80147b0:	4668      	mov	r0, sp
 80147b2:	4798      	blx	r3
 80147b4:	4629      	mov	r1, r5
 80147b6:	4604      	mov	r4, r0
 80147b8:	4804      	ldr	r0, [pc, #16]	@ (80147cc <rmw_take_with_info+0xa4>)
 80147ba:	f7ff f889 	bl	80138d0 <put_memory>
 80147be:	e7dd      	b.n	801477c <rmw_take_with_info+0x54>
 80147c0:	200c      	movs	r0, #12
 80147c2:	b009      	add	sp, #36	@ 0x24
 80147c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147c6:	bf00      	nop
 80147c8:	080191ac 	.word	0x080191ac
 80147cc:	2000dc2c 	.word	0x2000dc2c

080147d0 <rmw_uxrce_transport_init>:
 80147d0:	b508      	push	{r3, lr}
 80147d2:	b108      	cbz	r0, 80147d8 <rmw_uxrce_transport_init+0x8>
 80147d4:	f100 0210 	add.w	r2, r0, #16
 80147d8:	b139      	cbz	r1, 80147ea <rmw_uxrce_transport_init+0x1a>
 80147da:	6949      	ldr	r1, [r1, #20]
 80147dc:	4610      	mov	r0, r2
 80147de:	f000 fbdf 	bl	8014fa0 <uxr_init_custom_transport>
 80147e2:	f080 0001 	eor.w	r0, r0, #1
 80147e6:	b2c0      	uxtb	r0, r0
 80147e8:	bd08      	pop	{r3, pc}
 80147ea:	4b04      	ldr	r3, [pc, #16]	@ (80147fc <rmw_uxrce_transport_init+0x2c>)
 80147ec:	4610      	mov	r0, r2
 80147ee:	6859      	ldr	r1, [r3, #4]
 80147f0:	f000 fbd6 	bl	8014fa0 <uxr_init_custom_transport>
 80147f4:	f080 0001 	eor.w	r0, r0, #1
 80147f8:	b2c0      	uxtb	r0, r0
 80147fa:	bd08      	pop	{r3, pc}
 80147fc:	20009304 	.word	0x20009304

08014800 <rmw_wait>:
 8014800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014804:	b089      	sub	sp, #36	@ 0x24
 8014806:	4605      	mov	r5, r0
 8014808:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801480a:	460e      	mov	r6, r1
 801480c:	4698      	mov	r8, r3
 801480e:	4691      	mov	r9, r2
 8014810:	2a00      	cmp	r2, #0
 8014812:	f000 810a 	beq.w	8014a2a <rmw_wait+0x22a>
 8014816:	b16c      	cbz	r4, 8014834 <rmw_wait+0x34>
 8014818:	4bae      	ldr	r3, [pc, #696]	@ (8014ad4 <rmw_wait+0x2d4>)
 801481a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801481c:	af04      	add	r7, sp, #16
 801481e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8014822:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014826:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801482a:	f7fe fe75 	bl	8013518 <rmw_time_equal>
 801482e:	2800      	cmp	r0, #0
 8014830:	f000 8127 	beq.w	8014a82 <rmw_wait+0x282>
 8014834:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014838:	f7f8 fcf6 	bl	800d228 <rmw_uxrce_clean_expired_static_input_buffer>
 801483c:	4ba6      	ldr	r3, [pc, #664]	@ (8014ad8 <rmw_wait+0x2d8>)
 801483e:	681c      	ldr	r4, [r3, #0]
 8014840:	b14c      	cbz	r4, 8014856 <rmw_wait+0x56>
 8014842:	4623      	mov	r3, r4
 8014844:	2100      	movs	r1, #0
 8014846:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801484a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801484e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8014852:	2b00      	cmp	r3, #0
 8014854:	d1f7      	bne.n	8014846 <rmw_wait+0x46>
 8014856:	f1b9 0f00 	cmp.w	r9, #0
 801485a:	d011      	beq.n	8014880 <rmw_wait+0x80>
 801485c:	f8d9 1000 	ldr.w	r1, [r9]
 8014860:	b171      	cbz	r1, 8014880 <rmw_wait+0x80>
 8014862:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8014866:	2300      	movs	r3, #0
 8014868:	2001      	movs	r0, #1
 801486a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801486e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014870:	6912      	ldr	r2, [r2, #16]
 8014872:	3301      	adds	r3, #1
 8014874:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014878:	4299      	cmp	r1, r3
 801487a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801487e:	d1f4      	bne.n	801486a <rmw_wait+0x6a>
 8014880:	f1b8 0f00 	cmp.w	r8, #0
 8014884:	d011      	beq.n	80148aa <rmw_wait+0xaa>
 8014886:	f8d8 1000 	ldr.w	r1, [r8]
 801488a:	b171      	cbz	r1, 80148aa <rmw_wait+0xaa>
 801488c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8014890:	2300      	movs	r3, #0
 8014892:	2001      	movs	r0, #1
 8014894:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014898:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801489a:	6912      	ldr	r2, [r2, #16]
 801489c:	3301      	adds	r3, #1
 801489e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80148a2:	4299      	cmp	r1, r3
 80148a4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80148a8:	d1f4      	bne.n	8014894 <rmw_wait+0x94>
 80148aa:	b185      	cbz	r5, 80148ce <rmw_wait+0xce>
 80148ac:	6829      	ldr	r1, [r5, #0]
 80148ae:	b171      	cbz	r1, 80148ce <rmw_wait+0xce>
 80148b0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80148b4:	2300      	movs	r3, #0
 80148b6:	2001      	movs	r0, #1
 80148b8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80148bc:	6a12      	ldr	r2, [r2, #32]
 80148be:	6912      	ldr	r2, [r2, #16]
 80148c0:	3301      	adds	r3, #1
 80148c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80148c6:	4299      	cmp	r1, r3
 80148c8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80148cc:	d1f4      	bne.n	80148b8 <rmw_wait+0xb8>
 80148ce:	b34c      	cbz	r4, 8014924 <rmw_wait+0x124>
 80148d0:	4622      	mov	r2, r4
 80148d2:	2300      	movs	r3, #0
 80148d4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80148d8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80148dc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80148e0:	440b      	add	r3, r1
 80148e2:	b2db      	uxtb	r3, r3
 80148e4:	2a00      	cmp	r2, #0
 80148e6:	d1f5      	bne.n	80148d4 <rmw_wait+0xd4>
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	f000 8084 	beq.w	80149f6 <rmw_wait+0x1f6>
 80148ee:	1c7a      	adds	r2, r7, #1
 80148f0:	d00d      	beq.n	801490e <rmw_wait+0x10e>
 80148f2:	ee07 7a90 	vmov	s15, r7
 80148f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80148fa:	ee07 3a90 	vmov	s15, r3
 80148fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014906:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801490a:	ee17 7a90 	vmov	r7, s15
 801490e:	68a0      	ldr	r0, [r4, #8]
 8014910:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8014914:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8014918:	2b00      	cmp	r3, #0
 801491a:	f040 8090 	bne.w	8014a3e <rmw_wait+0x23e>
 801491e:	6864      	ldr	r4, [r4, #4]
 8014920:	2c00      	cmp	r4, #0
 8014922:	d1f4      	bne.n	801490e <rmw_wait+0x10e>
 8014924:	f1b9 0f00 	cmp.w	r9, #0
 8014928:	f000 80bc 	beq.w	8014aa4 <rmw_wait+0x2a4>
 801492c:	f8d9 7000 	ldr.w	r7, [r9]
 8014930:	2f00      	cmp	r7, #0
 8014932:	f000 808e 	beq.w	8014a52 <rmw_wait+0x252>
 8014936:	2400      	movs	r4, #0
 8014938:	4627      	mov	r7, r4
 801493a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801493e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014942:	f7f8 fc49 	bl	800d1d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014946:	2800      	cmp	r0, #0
 8014948:	d05f      	beq.n	8014a0a <rmw_wait+0x20a>
 801494a:	f8d9 3000 	ldr.w	r3, [r9]
 801494e:	3401      	adds	r4, #1
 8014950:	42a3      	cmp	r3, r4
 8014952:	f04f 0701 	mov.w	r7, #1
 8014956:	d8f0      	bhi.n	801493a <rmw_wait+0x13a>
 8014958:	f1b8 0f00 	cmp.w	r8, #0
 801495c:	d012      	beq.n	8014984 <rmw_wait+0x184>
 801495e:	f8d8 3000 	ldr.w	r3, [r8]
 8014962:	b17b      	cbz	r3, 8014984 <rmw_wait+0x184>
 8014964:	2400      	movs	r4, #0
 8014966:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801496a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801496e:	f7f8 fc33 	bl	800d1d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014972:	2800      	cmp	r0, #0
 8014974:	d051      	beq.n	8014a1a <rmw_wait+0x21a>
 8014976:	f8d8 3000 	ldr.w	r3, [r8]
 801497a:	3401      	adds	r4, #1
 801497c:	42a3      	cmp	r3, r4
 801497e:	f04f 0701 	mov.w	r7, #1
 8014982:	d8f0      	bhi.n	8014966 <rmw_wait+0x166>
 8014984:	b1dd      	cbz	r5, 80149be <rmw_wait+0x1be>
 8014986:	682b      	ldr	r3, [r5, #0]
 8014988:	b1cb      	cbz	r3, 80149be <rmw_wait+0x1be>
 801498a:	2400      	movs	r4, #0
 801498c:	686b      	ldr	r3, [r5, #4]
 801498e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014992:	f7f8 fc21 	bl	800d1d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014996:	b158      	cbz	r0, 80149b0 <rmw_wait+0x1b0>
 8014998:	682b      	ldr	r3, [r5, #0]
 801499a:	3401      	adds	r4, #1
 801499c:	42a3      	cmp	r3, r4
 801499e:	d969      	bls.n	8014a74 <rmw_wait+0x274>
 80149a0:	686b      	ldr	r3, [r5, #4]
 80149a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80149a6:	2701      	movs	r7, #1
 80149a8:	f7f8 fc16 	bl	800d1d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80149ac:	2800      	cmp	r0, #0
 80149ae:	d1f3      	bne.n	8014998 <rmw_wait+0x198>
 80149b0:	e9d5 3200 	ldrd	r3, r2, [r5]
 80149b4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80149b8:	3401      	adds	r4, #1
 80149ba:	42a3      	cmp	r3, r4
 80149bc:	d8e6      	bhi.n	801498c <rmw_wait+0x18c>
 80149be:	b1a6      	cbz	r6, 80149ea <rmw_wait+0x1ea>
 80149c0:	6834      	ldr	r4, [r6, #0]
 80149c2:	b194      	cbz	r4, 80149ea <rmw_wait+0x1ea>
 80149c4:	2300      	movs	r3, #0
 80149c6:	461d      	mov	r5, r3
 80149c8:	e004      	b.n	80149d4 <rmw_wait+0x1d4>
 80149ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80149ce:	3301      	adds	r3, #1
 80149d0:	42a3      	cmp	r3, r4
 80149d2:	d00a      	beq.n	80149ea <rmw_wait+0x1ea>
 80149d4:	6870      	ldr	r0, [r6, #4]
 80149d6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80149da:	7c0a      	ldrb	r2, [r1, #16]
 80149dc:	2a00      	cmp	r2, #0
 80149de:	d0f4      	beq.n	80149ca <rmw_wait+0x1ca>
 80149e0:	3301      	adds	r3, #1
 80149e2:	42a3      	cmp	r3, r4
 80149e4:	740d      	strb	r5, [r1, #16]
 80149e6:	4617      	mov	r7, r2
 80149e8:	d1f4      	bne.n	80149d4 <rmw_wait+0x1d4>
 80149ea:	2f00      	cmp	r7, #0
 80149ec:	d03e      	beq.n	8014a6c <rmw_wait+0x26c>
 80149ee:	2000      	movs	r0, #0
 80149f0:	b009      	add	sp, #36	@ 0x24
 80149f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149f6:	68a0      	ldr	r0, [r4, #8]
 80149f8:	2100      	movs	r1, #0
 80149fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80149fe:	f7f9 fcbd 	bl	800e37c <uxr_run_session_timeout>
 8014a02:	6864      	ldr	r4, [r4, #4]
 8014a04:	2c00      	cmp	r4, #0
 8014a06:	d1f6      	bne.n	80149f6 <rmw_wait+0x1f6>
 8014a08:	e78c      	b.n	8014924 <rmw_wait+0x124>
 8014a0a:	e9d9 3200 	ldrd	r3, r2, [r9]
 8014a0e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014a12:	3401      	adds	r4, #1
 8014a14:	42a3      	cmp	r3, r4
 8014a16:	d890      	bhi.n	801493a <rmw_wait+0x13a>
 8014a18:	e79e      	b.n	8014958 <rmw_wait+0x158>
 8014a1a:	e9d8 3200 	ldrd	r3, r2, [r8]
 8014a1e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014a22:	3401      	adds	r4, #1
 8014a24:	429c      	cmp	r4, r3
 8014a26:	d39e      	bcc.n	8014966 <rmw_wait+0x166>
 8014a28:	e7ac      	b.n	8014984 <rmw_wait+0x184>
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	f47f aef3 	bne.w	8014816 <rmw_wait+0x16>
 8014a30:	2800      	cmp	r0, #0
 8014a32:	f47f aef0 	bne.w	8014816 <rmw_wait+0x16>
 8014a36:	2900      	cmp	r1, #0
 8014a38:	f47f aeed 	bne.w	8014816 <rmw_wait+0x16>
 8014a3c:	e7d7      	b.n	80149ee <rmw_wait+0x1ee>
 8014a3e:	4639      	mov	r1, r7
 8014a40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014a44:	f7f9 fcb4 	bl	800e3b0 <uxr_run_session_until_data>
 8014a48:	6864      	ldr	r4, [r4, #4]
 8014a4a:	2c00      	cmp	r4, #0
 8014a4c:	f47f af5f 	bne.w	801490e <rmw_wait+0x10e>
 8014a50:	e768      	b.n	8014924 <rmw_wait+0x124>
 8014a52:	f1b8 0f00 	cmp.w	r8, #0
 8014a56:	d032      	beq.n	8014abe <rmw_wait+0x2be>
 8014a58:	f8d8 3000 	ldr.w	r3, [r8]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d181      	bne.n	8014964 <rmw_wait+0x164>
 8014a60:	461f      	mov	r7, r3
 8014a62:	2d00      	cmp	r5, #0
 8014a64:	d18f      	bne.n	8014986 <rmw_wait+0x186>
 8014a66:	462f      	mov	r7, r5
 8014a68:	2e00      	cmp	r6, #0
 8014a6a:	d1a9      	bne.n	80149c0 <rmw_wait+0x1c0>
 8014a6c:	2002      	movs	r0, #2
 8014a6e:	b009      	add	sp, #36	@ 0x24
 8014a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a74:	2e00      	cmp	r6, #0
 8014a76:	d0ba      	beq.n	80149ee <rmw_wait+0x1ee>
 8014a78:	6834      	ldr	r4, [r6, #0]
 8014a7a:	2701      	movs	r7, #1
 8014a7c:	2c00      	cmp	r4, #0
 8014a7e:	d1a1      	bne.n	80149c4 <rmw_wait+0x1c4>
 8014a80:	e7b5      	b.n	80149ee <rmw_wait+0x1ee>
 8014a82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014a86:	f7fe fd9b 	bl	80135c0 <rmw_time_total_nsec>
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	4a13      	ldr	r2, [pc, #76]	@ (8014adc <rmw_wait+0x2dc>)
 8014a8e:	f7ec f8fd 	bl	8000c8c <__aeabi_uldivmod>
 8014a92:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8014a96:	f171 0300 	sbcs.w	r3, r1, #0
 8014a9a:	4607      	mov	r7, r0
 8014a9c:	bfa8      	it	ge
 8014a9e:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8014aa2:	e6c9      	b.n	8014838 <rmw_wait+0x38>
 8014aa4:	f1b8 0f00 	cmp.w	r8, #0
 8014aa8:	d009      	beq.n	8014abe <rmw_wait+0x2be>
 8014aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8014aae:	464f      	mov	r7, r9
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	f47f af57 	bne.w	8014964 <rmw_wait+0x164>
 8014ab6:	2d00      	cmp	r5, #0
 8014ab8:	f47f af65 	bne.w	8014986 <rmw_wait+0x186>
 8014abc:	e7d3      	b.n	8014a66 <rmw_wait+0x266>
 8014abe:	b17d      	cbz	r5, 8014ae0 <rmw_wait+0x2e0>
 8014ac0:	682b      	ldr	r3, [r5, #0]
 8014ac2:	4647      	mov	r7, r8
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	f47f af60 	bne.w	801498a <rmw_wait+0x18a>
 8014aca:	2e00      	cmp	r6, #0
 8014acc:	f47f af78 	bne.w	80149c0 <rmw_wait+0x1c0>
 8014ad0:	e7cc      	b.n	8014a6c <rmw_wait+0x26c>
 8014ad2:	bf00      	nop
 8014ad4:	080186e0 	.word	0x080186e0
 8014ad8:	2000dc1c 	.word	0x2000dc1c
 8014adc:	000f4240 	.word	0x000f4240
 8014ae0:	2e00      	cmp	r6, #0
 8014ae2:	d0c3      	beq.n	8014a6c <rmw_wait+0x26c>
 8014ae4:	6834      	ldr	r4, [r6, #0]
 8014ae6:	462f      	mov	r7, r5
 8014ae8:	2c00      	cmp	r4, #0
 8014aea:	f47f af6b 	bne.w	80149c4 <rmw_wait+0x1c4>
 8014aee:	e7bd      	b.n	8014a6c <rmw_wait+0x26c>

08014af0 <rmw_create_wait_set>:
 8014af0:	b508      	push	{r3, lr}
 8014af2:	4803      	ldr	r0, [pc, #12]	@ (8014b00 <rmw_create_wait_set+0x10>)
 8014af4:	f7fe fedc 	bl	80138b0 <get_memory>
 8014af8:	b108      	cbz	r0, 8014afe <rmw_create_wait_set+0xe>
 8014afa:	6880      	ldr	r0, [r0, #8]
 8014afc:	3010      	adds	r0, #16
 8014afe:	bd08      	pop	{r3, pc}
 8014b00:	2000dc5c 	.word	0x2000dc5c

08014b04 <rmw_destroy_wait_set>:
 8014b04:	b508      	push	{r3, lr}
 8014b06:	4b08      	ldr	r3, [pc, #32]	@ (8014b28 <rmw_destroy_wait_set+0x24>)
 8014b08:	6819      	ldr	r1, [r3, #0]
 8014b0a:	b911      	cbnz	r1, 8014b12 <rmw_destroy_wait_set+0xe>
 8014b0c:	e00a      	b.n	8014b24 <rmw_destroy_wait_set+0x20>
 8014b0e:	6849      	ldr	r1, [r1, #4]
 8014b10:	b141      	cbz	r1, 8014b24 <rmw_destroy_wait_set+0x20>
 8014b12:	688b      	ldr	r3, [r1, #8]
 8014b14:	3310      	adds	r3, #16
 8014b16:	4298      	cmp	r0, r3
 8014b18:	d1f9      	bne.n	8014b0e <rmw_destroy_wait_set+0xa>
 8014b1a:	4803      	ldr	r0, [pc, #12]	@ (8014b28 <rmw_destroy_wait_set+0x24>)
 8014b1c:	f7fe fed8 	bl	80138d0 <put_memory>
 8014b20:	2000      	movs	r0, #0
 8014b22:	bd08      	pop	{r3, pc}
 8014b24:	2001      	movs	r0, #1
 8014b26:	bd08      	pop	{r3, pc}
 8014b28:	2000dc5c 	.word	0x2000dc5c

08014b2c <rmw_uros_epoch_nanos>:
 8014b2c:	4b05      	ldr	r3, [pc, #20]	@ (8014b44 <rmw_uros_epoch_nanos+0x18>)
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	b123      	cbz	r3, 8014b3c <rmw_uros_epoch_nanos+0x10>
 8014b32:	6898      	ldr	r0, [r3, #8]
 8014b34:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014b38:	f7f9 b890 	b.w	800dc5c <uxr_epoch_nanos>
 8014b3c:	2000      	movs	r0, #0
 8014b3e:	2100      	movs	r1, #0
 8014b40:	4770      	bx	lr
 8014b42:	bf00      	nop
 8014b44:	2000dc1c 	.word	0x2000dc1c

08014b48 <std_msgs__msg__Int16__init>:
 8014b48:	3800      	subs	r0, #0
 8014b4a:	bf18      	it	ne
 8014b4c:	2001      	movne	r0, #1
 8014b4e:	4770      	bx	lr

08014b50 <std_msgs__msg__Int16__fini>:
 8014b50:	4770      	bx	lr
 8014b52:	bf00      	nop

08014b54 <ucdr_serialize_endian_array_char>:
 8014b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b58:	4619      	mov	r1, r3
 8014b5a:	461f      	mov	r7, r3
 8014b5c:	4605      	mov	r5, r0
 8014b5e:	4690      	mov	r8, r2
 8014b60:	f7f6 fd9a 	bl	800b698 <ucdr_check_buffer_available_for>
 8014b64:	b9e0      	cbnz	r0, 8014ba0 <ucdr_serialize_endian_array_char+0x4c>
 8014b66:	463e      	mov	r6, r7
 8014b68:	e009      	b.n	8014b7e <ucdr_serialize_endian_array_char+0x2a>
 8014b6a:	68a8      	ldr	r0, [r5, #8]
 8014b6c:	f002 fe81 	bl	8017872 <memcpy>
 8014b70:	68ab      	ldr	r3, [r5, #8]
 8014b72:	6928      	ldr	r0, [r5, #16]
 8014b74:	4423      	add	r3, r4
 8014b76:	4420      	add	r0, r4
 8014b78:	1b36      	subs	r6, r6, r4
 8014b7a:	60ab      	str	r3, [r5, #8]
 8014b7c:	6128      	str	r0, [r5, #16]
 8014b7e:	4631      	mov	r1, r6
 8014b80:	2201      	movs	r2, #1
 8014b82:	4628      	mov	r0, r5
 8014b84:	f7f6 fe10 	bl	800b7a8 <ucdr_check_final_buffer_behavior_array>
 8014b88:	1bb9      	subs	r1, r7, r6
 8014b8a:	4441      	add	r1, r8
 8014b8c:	4604      	mov	r4, r0
 8014b8e:	4602      	mov	r2, r0
 8014b90:	2800      	cmp	r0, #0
 8014b92:	d1ea      	bne.n	8014b6a <ucdr_serialize_endian_array_char+0x16>
 8014b94:	2301      	movs	r3, #1
 8014b96:	7da8      	ldrb	r0, [r5, #22]
 8014b98:	756b      	strb	r3, [r5, #21]
 8014b9a:	4058      	eors	r0, r3
 8014b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ba0:	463a      	mov	r2, r7
 8014ba2:	68a8      	ldr	r0, [r5, #8]
 8014ba4:	4641      	mov	r1, r8
 8014ba6:	f002 fe64 	bl	8017872 <memcpy>
 8014baa:	68aa      	ldr	r2, [r5, #8]
 8014bac:	692b      	ldr	r3, [r5, #16]
 8014bae:	443a      	add	r2, r7
 8014bb0:	443b      	add	r3, r7
 8014bb2:	60aa      	str	r2, [r5, #8]
 8014bb4:	612b      	str	r3, [r5, #16]
 8014bb6:	e7ed      	b.n	8014b94 <ucdr_serialize_endian_array_char+0x40>

08014bb8 <ucdr_deserialize_endian_array_char>:
 8014bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bbc:	4619      	mov	r1, r3
 8014bbe:	461f      	mov	r7, r3
 8014bc0:	4605      	mov	r5, r0
 8014bc2:	4690      	mov	r8, r2
 8014bc4:	f7f6 fd68 	bl	800b698 <ucdr_check_buffer_available_for>
 8014bc8:	b9e0      	cbnz	r0, 8014c04 <ucdr_deserialize_endian_array_char+0x4c>
 8014bca:	463e      	mov	r6, r7
 8014bcc:	e009      	b.n	8014be2 <ucdr_deserialize_endian_array_char+0x2a>
 8014bce:	68a9      	ldr	r1, [r5, #8]
 8014bd0:	f002 fe4f 	bl	8017872 <memcpy>
 8014bd4:	68ab      	ldr	r3, [r5, #8]
 8014bd6:	6928      	ldr	r0, [r5, #16]
 8014bd8:	4423      	add	r3, r4
 8014bda:	4420      	add	r0, r4
 8014bdc:	1b36      	subs	r6, r6, r4
 8014bde:	60ab      	str	r3, [r5, #8]
 8014be0:	6128      	str	r0, [r5, #16]
 8014be2:	2201      	movs	r2, #1
 8014be4:	4631      	mov	r1, r6
 8014be6:	4628      	mov	r0, r5
 8014be8:	f7f6 fdde 	bl	800b7a8 <ucdr_check_final_buffer_behavior_array>
 8014bec:	4604      	mov	r4, r0
 8014bee:	1bb8      	subs	r0, r7, r6
 8014bf0:	4440      	add	r0, r8
 8014bf2:	4622      	mov	r2, r4
 8014bf4:	2c00      	cmp	r4, #0
 8014bf6:	d1ea      	bne.n	8014bce <ucdr_deserialize_endian_array_char+0x16>
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	7da8      	ldrb	r0, [r5, #22]
 8014bfc:	756b      	strb	r3, [r5, #21]
 8014bfe:	4058      	eors	r0, r3
 8014c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c04:	463a      	mov	r2, r7
 8014c06:	68a9      	ldr	r1, [r5, #8]
 8014c08:	4640      	mov	r0, r8
 8014c0a:	f002 fe32 	bl	8017872 <memcpy>
 8014c0e:	68aa      	ldr	r2, [r5, #8]
 8014c10:	692b      	ldr	r3, [r5, #16]
 8014c12:	443a      	add	r2, r7
 8014c14:	443b      	add	r3, r7
 8014c16:	60aa      	str	r2, [r5, #8]
 8014c18:	612b      	str	r3, [r5, #16]
 8014c1a:	e7ed      	b.n	8014bf8 <ucdr_deserialize_endian_array_char+0x40>

08014c1c <ucdr_serialize_array_uint8_t>:
 8014c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c20:	4688      	mov	r8, r1
 8014c22:	4611      	mov	r1, r2
 8014c24:	4617      	mov	r7, r2
 8014c26:	4605      	mov	r5, r0
 8014c28:	f7f6 fd36 	bl	800b698 <ucdr_check_buffer_available_for>
 8014c2c:	b9e0      	cbnz	r0, 8014c68 <ucdr_serialize_array_uint8_t+0x4c>
 8014c2e:	463e      	mov	r6, r7
 8014c30:	e009      	b.n	8014c46 <ucdr_serialize_array_uint8_t+0x2a>
 8014c32:	68a8      	ldr	r0, [r5, #8]
 8014c34:	f002 fe1d 	bl	8017872 <memcpy>
 8014c38:	68aa      	ldr	r2, [r5, #8]
 8014c3a:	692b      	ldr	r3, [r5, #16]
 8014c3c:	4422      	add	r2, r4
 8014c3e:	4423      	add	r3, r4
 8014c40:	1b36      	subs	r6, r6, r4
 8014c42:	60aa      	str	r2, [r5, #8]
 8014c44:	612b      	str	r3, [r5, #16]
 8014c46:	4631      	mov	r1, r6
 8014c48:	2201      	movs	r2, #1
 8014c4a:	4628      	mov	r0, r5
 8014c4c:	f7f6 fdac 	bl	800b7a8 <ucdr_check_final_buffer_behavior_array>
 8014c50:	1bb9      	subs	r1, r7, r6
 8014c52:	4441      	add	r1, r8
 8014c54:	4604      	mov	r4, r0
 8014c56:	4602      	mov	r2, r0
 8014c58:	2800      	cmp	r0, #0
 8014c5a:	d1ea      	bne.n	8014c32 <ucdr_serialize_array_uint8_t+0x16>
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	7da8      	ldrb	r0, [r5, #22]
 8014c60:	756b      	strb	r3, [r5, #21]
 8014c62:	4058      	eors	r0, r3
 8014c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c68:	463a      	mov	r2, r7
 8014c6a:	68a8      	ldr	r0, [r5, #8]
 8014c6c:	4641      	mov	r1, r8
 8014c6e:	f002 fe00 	bl	8017872 <memcpy>
 8014c72:	68aa      	ldr	r2, [r5, #8]
 8014c74:	692b      	ldr	r3, [r5, #16]
 8014c76:	443a      	add	r2, r7
 8014c78:	443b      	add	r3, r7
 8014c7a:	60aa      	str	r2, [r5, #8]
 8014c7c:	612b      	str	r3, [r5, #16]
 8014c7e:	e7ed      	b.n	8014c5c <ucdr_serialize_array_uint8_t+0x40>

08014c80 <ucdr_serialize_endian_array_uint8_t>:
 8014c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c84:	4619      	mov	r1, r3
 8014c86:	461f      	mov	r7, r3
 8014c88:	4605      	mov	r5, r0
 8014c8a:	4690      	mov	r8, r2
 8014c8c:	f7f6 fd04 	bl	800b698 <ucdr_check_buffer_available_for>
 8014c90:	b9e0      	cbnz	r0, 8014ccc <ucdr_serialize_endian_array_uint8_t+0x4c>
 8014c92:	463e      	mov	r6, r7
 8014c94:	e009      	b.n	8014caa <ucdr_serialize_endian_array_uint8_t+0x2a>
 8014c96:	68a8      	ldr	r0, [r5, #8]
 8014c98:	f002 fdeb 	bl	8017872 <memcpy>
 8014c9c:	68ab      	ldr	r3, [r5, #8]
 8014c9e:	6928      	ldr	r0, [r5, #16]
 8014ca0:	4423      	add	r3, r4
 8014ca2:	4420      	add	r0, r4
 8014ca4:	1b36      	subs	r6, r6, r4
 8014ca6:	60ab      	str	r3, [r5, #8]
 8014ca8:	6128      	str	r0, [r5, #16]
 8014caa:	4631      	mov	r1, r6
 8014cac:	2201      	movs	r2, #1
 8014cae:	4628      	mov	r0, r5
 8014cb0:	f7f6 fd7a 	bl	800b7a8 <ucdr_check_final_buffer_behavior_array>
 8014cb4:	1bb9      	subs	r1, r7, r6
 8014cb6:	4441      	add	r1, r8
 8014cb8:	4604      	mov	r4, r0
 8014cba:	4602      	mov	r2, r0
 8014cbc:	2800      	cmp	r0, #0
 8014cbe:	d1ea      	bne.n	8014c96 <ucdr_serialize_endian_array_uint8_t+0x16>
 8014cc0:	2301      	movs	r3, #1
 8014cc2:	7da8      	ldrb	r0, [r5, #22]
 8014cc4:	756b      	strb	r3, [r5, #21]
 8014cc6:	4058      	eors	r0, r3
 8014cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ccc:	463a      	mov	r2, r7
 8014cce:	68a8      	ldr	r0, [r5, #8]
 8014cd0:	4641      	mov	r1, r8
 8014cd2:	f002 fdce 	bl	8017872 <memcpy>
 8014cd6:	68aa      	ldr	r2, [r5, #8]
 8014cd8:	692b      	ldr	r3, [r5, #16]
 8014cda:	443a      	add	r2, r7
 8014cdc:	443b      	add	r3, r7
 8014cde:	60aa      	str	r2, [r5, #8]
 8014ce0:	612b      	str	r3, [r5, #16]
 8014ce2:	e7ed      	b.n	8014cc0 <ucdr_serialize_endian_array_uint8_t+0x40>

08014ce4 <ucdr_deserialize_array_uint8_t>:
 8014ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ce8:	4688      	mov	r8, r1
 8014cea:	4611      	mov	r1, r2
 8014cec:	4617      	mov	r7, r2
 8014cee:	4605      	mov	r5, r0
 8014cf0:	f7f6 fcd2 	bl	800b698 <ucdr_check_buffer_available_for>
 8014cf4:	b9e0      	cbnz	r0, 8014d30 <ucdr_deserialize_array_uint8_t+0x4c>
 8014cf6:	463e      	mov	r6, r7
 8014cf8:	e009      	b.n	8014d0e <ucdr_deserialize_array_uint8_t+0x2a>
 8014cfa:	68a9      	ldr	r1, [r5, #8]
 8014cfc:	f002 fdb9 	bl	8017872 <memcpy>
 8014d00:	68aa      	ldr	r2, [r5, #8]
 8014d02:	692b      	ldr	r3, [r5, #16]
 8014d04:	4422      	add	r2, r4
 8014d06:	4423      	add	r3, r4
 8014d08:	1b36      	subs	r6, r6, r4
 8014d0a:	60aa      	str	r2, [r5, #8]
 8014d0c:	612b      	str	r3, [r5, #16]
 8014d0e:	2201      	movs	r2, #1
 8014d10:	4631      	mov	r1, r6
 8014d12:	4628      	mov	r0, r5
 8014d14:	f7f6 fd48 	bl	800b7a8 <ucdr_check_final_buffer_behavior_array>
 8014d18:	4604      	mov	r4, r0
 8014d1a:	1bb8      	subs	r0, r7, r6
 8014d1c:	4440      	add	r0, r8
 8014d1e:	4622      	mov	r2, r4
 8014d20:	2c00      	cmp	r4, #0
 8014d22:	d1ea      	bne.n	8014cfa <ucdr_deserialize_array_uint8_t+0x16>
 8014d24:	2301      	movs	r3, #1
 8014d26:	7da8      	ldrb	r0, [r5, #22]
 8014d28:	756b      	strb	r3, [r5, #21]
 8014d2a:	4058      	eors	r0, r3
 8014d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d30:	463a      	mov	r2, r7
 8014d32:	68a9      	ldr	r1, [r5, #8]
 8014d34:	4640      	mov	r0, r8
 8014d36:	f002 fd9c 	bl	8017872 <memcpy>
 8014d3a:	68aa      	ldr	r2, [r5, #8]
 8014d3c:	692b      	ldr	r3, [r5, #16]
 8014d3e:	443a      	add	r2, r7
 8014d40:	443b      	add	r3, r7
 8014d42:	60aa      	str	r2, [r5, #8]
 8014d44:	612b      	str	r3, [r5, #16]
 8014d46:	e7ed      	b.n	8014d24 <ucdr_deserialize_array_uint8_t+0x40>

08014d48 <ucdr_deserialize_endian_array_uint8_t>:
 8014d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d4c:	4619      	mov	r1, r3
 8014d4e:	461f      	mov	r7, r3
 8014d50:	4605      	mov	r5, r0
 8014d52:	4690      	mov	r8, r2
 8014d54:	f7f6 fca0 	bl	800b698 <ucdr_check_buffer_available_for>
 8014d58:	b9e0      	cbnz	r0, 8014d94 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8014d5a:	463e      	mov	r6, r7
 8014d5c:	e009      	b.n	8014d72 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8014d5e:	68a9      	ldr	r1, [r5, #8]
 8014d60:	f002 fd87 	bl	8017872 <memcpy>
 8014d64:	68ab      	ldr	r3, [r5, #8]
 8014d66:	6928      	ldr	r0, [r5, #16]
 8014d68:	4423      	add	r3, r4
 8014d6a:	4420      	add	r0, r4
 8014d6c:	1b36      	subs	r6, r6, r4
 8014d6e:	60ab      	str	r3, [r5, #8]
 8014d70:	6128      	str	r0, [r5, #16]
 8014d72:	2201      	movs	r2, #1
 8014d74:	4631      	mov	r1, r6
 8014d76:	4628      	mov	r0, r5
 8014d78:	f7f6 fd16 	bl	800b7a8 <ucdr_check_final_buffer_behavior_array>
 8014d7c:	4604      	mov	r4, r0
 8014d7e:	1bb8      	subs	r0, r7, r6
 8014d80:	4440      	add	r0, r8
 8014d82:	4622      	mov	r2, r4
 8014d84:	2c00      	cmp	r4, #0
 8014d86:	d1ea      	bne.n	8014d5e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8014d88:	2301      	movs	r3, #1
 8014d8a:	7da8      	ldrb	r0, [r5, #22]
 8014d8c:	756b      	strb	r3, [r5, #21]
 8014d8e:	4058      	eors	r0, r3
 8014d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d94:	463a      	mov	r2, r7
 8014d96:	68a9      	ldr	r1, [r5, #8]
 8014d98:	4640      	mov	r0, r8
 8014d9a:	f002 fd6a 	bl	8017872 <memcpy>
 8014d9e:	68aa      	ldr	r2, [r5, #8]
 8014da0:	692b      	ldr	r3, [r5, #16]
 8014da2:	443a      	add	r2, r7
 8014da4:	443b      	add	r3, r7
 8014da6:	60aa      	str	r2, [r5, #8]
 8014da8:	612b      	str	r3, [r5, #16]
 8014daa:	e7ed      	b.n	8014d88 <ucdr_deserialize_endian_array_uint8_t+0x40>

08014dac <ucdr_serialize_sequence_char>:
 8014dac:	b570      	push	{r4, r5, r6, lr}
 8014dae:	4615      	mov	r5, r2
 8014db0:	460e      	mov	r6, r1
 8014db2:	7d01      	ldrb	r1, [r0, #20]
 8014db4:	4604      	mov	r4, r0
 8014db6:	f7f5 fe2f 	bl	800aa18 <ucdr_serialize_endian_uint32_t>
 8014dba:	b90d      	cbnz	r5, 8014dc0 <ucdr_serialize_sequence_char+0x14>
 8014dbc:	2001      	movs	r0, #1
 8014dbe:	bd70      	pop	{r4, r5, r6, pc}
 8014dc0:	7d21      	ldrb	r1, [r4, #20]
 8014dc2:	462b      	mov	r3, r5
 8014dc4:	4632      	mov	r2, r6
 8014dc6:	4620      	mov	r0, r4
 8014dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014dcc:	f7ff bec2 	b.w	8014b54 <ucdr_serialize_endian_array_char>

08014dd0 <ucdr_deserialize_sequence_char>:
 8014dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dd4:	461d      	mov	r5, r3
 8014dd6:	4616      	mov	r6, r2
 8014dd8:	460f      	mov	r7, r1
 8014dda:	461a      	mov	r2, r3
 8014ddc:	7d01      	ldrb	r1, [r0, #20]
 8014dde:	4604      	mov	r4, r0
 8014de0:	f7f5 ff42 	bl	800ac68 <ucdr_deserialize_endian_uint32_t>
 8014de4:	682b      	ldr	r3, [r5, #0]
 8014de6:	429e      	cmp	r6, r3
 8014de8:	bf3c      	itt	cc
 8014dea:	2201      	movcc	r2, #1
 8014dec:	75a2      	strbcc	r2, [r4, #22]
 8014dee:	b913      	cbnz	r3, 8014df6 <ucdr_deserialize_sequence_char+0x26>
 8014df0:	2001      	movs	r0, #1
 8014df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014df6:	7d21      	ldrb	r1, [r4, #20]
 8014df8:	463a      	mov	r2, r7
 8014dfa:	4620      	mov	r0, r4
 8014dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e00:	f7ff beda 	b.w	8014bb8 <ucdr_deserialize_endian_array_char>

08014e04 <ucdr_serialize_sequence_uint8_t>:
 8014e04:	b570      	push	{r4, r5, r6, lr}
 8014e06:	4615      	mov	r5, r2
 8014e08:	460e      	mov	r6, r1
 8014e0a:	7d01      	ldrb	r1, [r0, #20]
 8014e0c:	4604      	mov	r4, r0
 8014e0e:	f7f5 fe03 	bl	800aa18 <ucdr_serialize_endian_uint32_t>
 8014e12:	b90d      	cbnz	r5, 8014e18 <ucdr_serialize_sequence_uint8_t+0x14>
 8014e14:	2001      	movs	r0, #1
 8014e16:	bd70      	pop	{r4, r5, r6, pc}
 8014e18:	7d21      	ldrb	r1, [r4, #20]
 8014e1a:	462b      	mov	r3, r5
 8014e1c:	4632      	mov	r2, r6
 8014e1e:	4620      	mov	r0, r4
 8014e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e24:	f7ff bf2c 	b.w	8014c80 <ucdr_serialize_endian_array_uint8_t>

08014e28 <ucdr_deserialize_sequence_uint8_t>:
 8014e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e2c:	461d      	mov	r5, r3
 8014e2e:	4616      	mov	r6, r2
 8014e30:	460f      	mov	r7, r1
 8014e32:	461a      	mov	r2, r3
 8014e34:	7d01      	ldrb	r1, [r0, #20]
 8014e36:	4604      	mov	r4, r0
 8014e38:	f7f5 ff16 	bl	800ac68 <ucdr_deserialize_endian_uint32_t>
 8014e3c:	682b      	ldr	r3, [r5, #0]
 8014e3e:	429e      	cmp	r6, r3
 8014e40:	bf3c      	itt	cc
 8014e42:	2201      	movcc	r2, #1
 8014e44:	75a2      	strbcc	r2, [r4, #22]
 8014e46:	b913      	cbnz	r3, 8014e4e <ucdr_deserialize_sequence_uint8_t+0x26>
 8014e48:	2001      	movs	r0, #1
 8014e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e4e:	7d21      	ldrb	r1, [r4, #20]
 8014e50:	463a      	mov	r2, r7
 8014e52:	4620      	mov	r0, r4
 8014e54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e58:	f7ff bf76 	b.w	8014d48 <ucdr_deserialize_endian_array_uint8_t>

08014e5c <ucdr_serialize_string>:
 8014e5c:	b510      	push	{r4, lr}
 8014e5e:	b082      	sub	sp, #8
 8014e60:	4604      	mov	r4, r0
 8014e62:	4608      	mov	r0, r1
 8014e64:	9101      	str	r1, [sp, #4]
 8014e66:	f7eb f9c5 	bl	80001f4 <strlen>
 8014e6a:	9901      	ldr	r1, [sp, #4]
 8014e6c:	1c42      	adds	r2, r0, #1
 8014e6e:	4620      	mov	r0, r4
 8014e70:	b002      	add	sp, #8
 8014e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e76:	f7ff bf99 	b.w	8014dac <ucdr_serialize_sequence_char>
 8014e7a:	bf00      	nop

08014e7c <ucdr_deserialize_string>:
 8014e7c:	b500      	push	{lr}
 8014e7e:	b083      	sub	sp, #12
 8014e80:	ab01      	add	r3, sp, #4
 8014e82:	f7ff ffa5 	bl	8014dd0 <ucdr_deserialize_sequence_char>
 8014e86:	b003      	add	sp, #12
 8014e88:	f85d fb04 	ldr.w	pc, [sp], #4

08014e8c <get_custom_error>:
 8014e8c:	4b01      	ldr	r3, [pc, #4]	@ (8014e94 <get_custom_error+0x8>)
 8014e8e:	7818      	ldrb	r0, [r3, #0]
 8014e90:	4770      	bx	lr
 8014e92:	bf00      	nop
 8014e94:	2000ddd8 	.word	0x2000ddd8

08014e98 <recv_custom_msg>:
 8014e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e9c:	4693      	mov	fp, r2
 8014e9e:	b089      	sub	sp, #36	@ 0x24
 8014ea0:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014ea4:	9305      	str	r3, [sp, #20]
 8014ea6:	468a      	mov	sl, r1
 8014ea8:	2100      	movs	r1, #0
 8014eaa:	4604      	mov	r4, r0
 8014eac:	f88d 101e 	strb.w	r1, [sp, #30]
 8014eb0:	b322      	cbz	r2, 8014efc <recv_custom_msg+0x64>
 8014eb2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8014eb6:	f10d 081f 	add.w	r8, sp, #31
 8014eba:	af05      	add	r7, sp, #20
 8014ebc:	f10d 061e 	add.w	r6, sp, #30
 8014ec0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8014ec4:	e002      	b.n	8014ecc <recv_custom_msg+0x34>
 8014ec6:	9b05      	ldr	r3, [sp, #20]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	dd0f      	ble.n	8014eec <recv_custom_msg+0x54>
 8014ecc:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8014ed0:	4623      	mov	r3, r4
 8014ed2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014ed6:	e9cd 5600 	strd	r5, r6, [sp]
 8014eda:	4622      	mov	r2, r4
 8014edc:	4648      	mov	r0, r9
 8014ede:	f001 f92d 	bl	801613c <uxr_read_framed_msg>
 8014ee2:	2800      	cmp	r0, #0
 8014ee4:	d0ef      	beq.n	8014ec6 <recv_custom_msg+0x2e>
 8014ee6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014eea:	b1b3      	cbz	r3, 8014f1a <recv_custom_msg+0x82>
 8014eec:	4b0f      	ldr	r3, [pc, #60]	@ (8014f2c <recv_custom_msg+0x94>)
 8014eee:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8014ef2:	701a      	strb	r2, [r3, #0]
 8014ef4:	2000      	movs	r0, #0
 8014ef6:	b009      	add	sp, #36	@ 0x24
 8014ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014efc:	f10d 021f 	add.w	r2, sp, #31
 8014f00:	9200      	str	r2, [sp, #0]
 8014f02:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8014f06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014f0a:	4601      	mov	r1, r0
 8014f0c:	47a8      	blx	r5
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	d0ec      	beq.n	8014eec <recv_custom_msg+0x54>
 8014f12:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d1e8      	bne.n	8014eec <recv_custom_msg+0x54>
 8014f1a:	f8cb 0000 	str.w	r0, [fp]
 8014f1e:	2001      	movs	r0, #1
 8014f20:	f8ca 4000 	str.w	r4, [sl]
 8014f24:	b009      	add	sp, #36	@ 0x24
 8014f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f2a:	bf00      	nop
 8014f2c:	2000ddd8 	.word	0x2000ddd8

08014f30 <send_custom_msg>:
 8014f30:	b530      	push	{r4, r5, lr}
 8014f32:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8014f36:	b087      	sub	sp, #28
 8014f38:	4615      	mov	r5, r2
 8014f3a:	b974      	cbnz	r4, 8014f5a <send_custom_msg+0x2a>
 8014f3c:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8014f40:	f10d 0317 	add.w	r3, sp, #23
 8014f44:	47a0      	blx	r4
 8014f46:	b108      	cbz	r0, 8014f4c <send_custom_msg+0x1c>
 8014f48:	42a8      	cmp	r0, r5
 8014f4a:	d015      	beq.n	8014f78 <send_custom_msg+0x48>
 8014f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8014f80 <send_custom_msg+0x50>)
 8014f4e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8014f52:	701a      	strb	r2, [r3, #0]
 8014f54:	2000      	movs	r0, #0
 8014f56:	b007      	add	sp, #28
 8014f58:	bd30      	pop	{r4, r5, pc}
 8014f5a:	460b      	mov	r3, r1
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	f10d 0117 	add.w	r1, sp, #23
 8014f62:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014f66:	4602      	mov	r2, r0
 8014f68:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8014f6c:	9500      	str	r5, [sp, #0]
 8014f6e:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8014f72:	f000 feeb 	bl	8015d4c <uxr_write_framed_msg>
 8014f76:	e7e6      	b.n	8014f46 <send_custom_msg+0x16>
 8014f78:	2001      	movs	r0, #1
 8014f7a:	b007      	add	sp, #28
 8014f7c:	bd30      	pop	{r4, r5, pc}
 8014f7e:	bf00      	nop
 8014f80:	2000ddd8 	.word	0x2000ddd8

08014f84 <uxr_set_custom_transport_callbacks>:
 8014f84:	b410      	push	{r4}
 8014f86:	9c01      	ldr	r4, [sp, #4]
 8014f88:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8014f8c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8014f90:	9b02      	ldr	r3, [sp, #8]
 8014f92:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8014f96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f9a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8014f9e:	4770      	bx	lr

08014fa0 <uxr_init_custom_transport>:
 8014fa0:	b538      	push	{r3, r4, r5, lr}
 8014fa2:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8014fa6:	b303      	cbz	r3, 8014fea <uxr_init_custom_transport+0x4a>
 8014fa8:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8014fac:	4604      	mov	r4, r0
 8014fae:	b1e2      	cbz	r2, 8014fea <uxr_init_custom_transport+0x4a>
 8014fb0:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8014fb4:	b1ca      	cbz	r2, 8014fea <uxr_init_custom_transport+0x4a>
 8014fb6:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8014fba:	b1b2      	cbz	r2, 8014fea <uxr_init_custom_transport+0x4a>
 8014fbc:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8014fc0:	4798      	blx	r3
 8014fc2:	4605      	mov	r5, r0
 8014fc4:	b188      	cbz	r0, 8014fea <uxr_init_custom_transport+0x4a>
 8014fc6:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8014fca:	b98b      	cbnz	r3, 8014ff0 <uxr_init_custom_transport+0x50>
 8014fcc:	490b      	ldr	r1, [pc, #44]	@ (8014ffc <uxr_init_custom_transport+0x5c>)
 8014fce:	4b0c      	ldr	r3, [pc, #48]	@ (8015000 <uxr_init_custom_transport+0x60>)
 8014fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8015004 <uxr_init_custom_transport+0x64>)
 8014fd2:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8014fd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014fda:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8014fde:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8014fe2:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8014fe6:	4628      	mov	r0, r5
 8014fe8:	bd38      	pop	{r3, r4, r5, pc}
 8014fea:	2500      	movs	r5, #0
 8014fec:	4628      	mov	r0, r5
 8014fee:	bd38      	pop	{r3, r4, r5, pc}
 8014ff0:	2100      	movs	r1, #0
 8014ff2:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8014ff6:	f000 fea3 	bl	8015d40 <uxr_init_framing_io>
 8014ffa:	e7e7      	b.n	8014fcc <uxr_init_custom_transport+0x2c>
 8014ffc:	08014f31 	.word	0x08014f31
 8015000:	08014e99 	.word	0x08014e99
 8015004:	08014e8d 	.word	0x08014e8d

08015008 <uxr_close_custom_transport>:
 8015008:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801500c:	4718      	bx	r3
 801500e:	bf00      	nop

08015010 <uxr_init_input_best_effort_stream>:
 8015010:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015014:	8003      	strh	r3, [r0, #0]
 8015016:	4770      	bx	lr

08015018 <uxr_reset_input_best_effort_stream>:
 8015018:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801501c:	8003      	strh	r3, [r0, #0]
 801501e:	4770      	bx	lr

08015020 <uxr_receive_best_effort_message>:
 8015020:	b538      	push	{r3, r4, r5, lr}
 8015022:	4604      	mov	r4, r0
 8015024:	8800      	ldrh	r0, [r0, #0]
 8015026:	460d      	mov	r5, r1
 8015028:	f000 fe72 	bl	8015d10 <uxr_seq_num_cmp>
 801502c:	4603      	mov	r3, r0
 801502e:	2b00      	cmp	r3, #0
 8015030:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015034:	bfb8      	it	lt
 8015036:	8025      	strhlt	r5, [r4, #0]
 8015038:	bd38      	pop	{r3, r4, r5, pc}
 801503a:	bf00      	nop

0801503c <on_full_input_buffer>:
 801503c:	b570      	push	{r4, r5, r6, lr}
 801503e:	4605      	mov	r5, r0
 8015040:	460c      	mov	r4, r1
 8015042:	682b      	ldr	r3, [r5, #0]
 8015044:	6809      	ldr	r1, [r1, #0]
 8015046:	8920      	ldrh	r0, [r4, #8]
 8015048:	6862      	ldr	r2, [r4, #4]
 801504a:	fbb2 f2f0 	udiv	r2, r2, r0
 801504e:	eba3 0c01 	sub.w	ip, r3, r1
 8015052:	fbbc fcf2 	udiv	ip, ip, r2
 8015056:	f10c 0c01 	add.w	ip, ip, #1
 801505a:	fa1f f38c 	uxth.w	r3, ip
 801505e:	fbb3 f6f0 	udiv	r6, r3, r0
 8015062:	fb00 3316 	mls	r3, r0, r6, r3
 8015066:	b29b      	uxth	r3, r3
 8015068:	fb02 f303 	mul.w	r3, r2, r3
 801506c:	1d18      	adds	r0, r3, #4
 801506e:	4408      	add	r0, r1
 8015070:	7d26      	ldrb	r6, [r4, #20]
 8015072:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015076:	b116      	cbz	r6, 801507e <on_full_input_buffer+0x42>
 8015078:	2600      	movs	r6, #0
 801507a:	f840 6c04 	str.w	r6, [r0, #-4]
 801507e:	2a03      	cmp	r2, #3
 8015080:	d801      	bhi.n	8015086 <on_full_input_buffer+0x4a>
 8015082:	2001      	movs	r0, #1
 8015084:	bd70      	pop	{r4, r5, r6, pc}
 8015086:	3308      	adds	r3, #8
 8015088:	4419      	add	r1, r3
 801508a:	4628      	mov	r0, r5
 801508c:	692b      	ldr	r3, [r5, #16]
 801508e:	3a04      	subs	r2, #4
 8015090:	f7f6 fb4e 	bl	800b730 <ucdr_init_buffer_origin>
 8015094:	4628      	mov	r0, r5
 8015096:	4903      	ldr	r1, [pc, #12]	@ (80150a4 <on_full_input_buffer+0x68>)
 8015098:	4622      	mov	r2, r4
 801509a:	f7f6 fb25 	bl	800b6e8 <ucdr_set_on_full_buffer_callback>
 801509e:	2000      	movs	r0, #0
 80150a0:	bd70      	pop	{r4, r5, r6, pc}
 80150a2:	bf00      	nop
 80150a4:	0801503d 	.word	0x0801503d

080150a8 <uxr_init_input_reliable_stream>:
 80150a8:	b500      	push	{lr}
 80150aa:	e9c0 1200 	strd	r1, r2, [r0]
 80150ae:	f04f 0e00 	mov.w	lr, #0
 80150b2:	9a01      	ldr	r2, [sp, #4]
 80150b4:	8103      	strh	r3, [r0, #8]
 80150b6:	6102      	str	r2, [r0, #16]
 80150b8:	f880 e014 	strb.w	lr, [r0, #20]
 80150bc:	b1d3      	cbz	r3, 80150f4 <uxr_init_input_reliable_stream+0x4c>
 80150be:	f8c1 e000 	str.w	lr, [r1]
 80150c2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80150c6:	f1bc 0f01 	cmp.w	ip, #1
 80150ca:	d913      	bls.n	80150f4 <uxr_init_input_reliable_stream+0x4c>
 80150cc:	2301      	movs	r3, #1
 80150ce:	fbb3 f1fc 	udiv	r1, r3, ip
 80150d2:	fb0c 3111 	mls	r1, ip, r1, r3
 80150d6:	b289      	uxth	r1, r1
 80150d8:	6842      	ldr	r2, [r0, #4]
 80150da:	fbb2 f2fc 	udiv	r2, r2, ip
 80150de:	fb01 f202 	mul.w	r2, r1, r2
 80150e2:	6801      	ldr	r1, [r0, #0]
 80150e4:	f841 e002 	str.w	lr, [r1, r2]
 80150e8:	3301      	adds	r3, #1
 80150ea:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80150ee:	b29b      	uxth	r3, r3
 80150f0:	459c      	cmp	ip, r3
 80150f2:	d8ec      	bhi.n	80150ce <uxr_init_input_reliable_stream+0x26>
 80150f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150f8:	60c3      	str	r3, [r0, #12]
 80150fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80150fe:	bf00      	nop

08015100 <uxr_reset_input_reliable_stream>:
 8015100:	8901      	ldrh	r1, [r0, #8]
 8015102:	b1e9      	cbz	r1, 8015140 <uxr_reset_input_reliable_stream+0x40>
 8015104:	f04f 0c00 	mov.w	ip, #0
 8015108:	b500      	push	{lr}
 801510a:	4663      	mov	r3, ip
 801510c:	46e6      	mov	lr, ip
 801510e:	fbb3 f2f1 	udiv	r2, r3, r1
 8015112:	fb01 3312 	mls	r3, r1, r2, r3
 8015116:	b29b      	uxth	r3, r3
 8015118:	6842      	ldr	r2, [r0, #4]
 801511a:	fbb2 f2f1 	udiv	r2, r2, r1
 801511e:	fb02 f303 	mul.w	r3, r2, r3
 8015122:	6802      	ldr	r2, [r0, #0]
 8015124:	f842 e003 	str.w	lr, [r2, r3]
 8015128:	f10c 0c01 	add.w	ip, ip, #1
 801512c:	8901      	ldrh	r1, [r0, #8]
 801512e:	fa1f f38c 	uxth.w	r3, ip
 8015132:	4299      	cmp	r1, r3
 8015134:	d8eb      	bhi.n	801510e <uxr_reset_input_reliable_stream+0xe>
 8015136:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801513a:	60c3      	str	r3, [r0, #12]
 801513c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015140:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015144:	60c3      	str	r3, [r0, #12]
 8015146:	4770      	bx	lr

08015148 <uxr_receive_reliable_message>:
 8015148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801514c:	4604      	mov	r4, r0
 801514e:	460d      	mov	r5, r1
 8015150:	8901      	ldrh	r1, [r0, #8]
 8015152:	8980      	ldrh	r0, [r0, #12]
 8015154:	4690      	mov	r8, r2
 8015156:	461f      	mov	r7, r3
 8015158:	f000 fdd2 	bl	8015d00 <uxr_seq_num_add>
 801515c:	4629      	mov	r1, r5
 801515e:	4606      	mov	r6, r0
 8015160:	89a0      	ldrh	r0, [r4, #12]
 8015162:	f000 fdd5 	bl	8015d10 <uxr_seq_num_cmp>
 8015166:	2800      	cmp	r0, #0
 8015168:	db0a      	blt.n	8015180 <uxr_receive_reliable_message+0x38>
 801516a:	2600      	movs	r6, #0
 801516c:	89e0      	ldrh	r0, [r4, #14]
 801516e:	4629      	mov	r1, r5
 8015170:	f000 fdce 	bl	8015d10 <uxr_seq_num_cmp>
 8015174:	2800      	cmp	r0, #0
 8015176:	da00      	bge.n	801517a <uxr_receive_reliable_message+0x32>
 8015178:	81e5      	strh	r5, [r4, #14]
 801517a:	4630      	mov	r0, r6
 801517c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015180:	4630      	mov	r0, r6
 8015182:	4629      	mov	r1, r5
 8015184:	f000 fdc4 	bl	8015d10 <uxr_seq_num_cmp>
 8015188:	2800      	cmp	r0, #0
 801518a:	dbee      	blt.n	801516a <uxr_receive_reliable_message+0x22>
 801518c:	6923      	ldr	r3, [r4, #16]
 801518e:	4640      	mov	r0, r8
 8015190:	4798      	blx	r3
 8015192:	2101      	movs	r1, #1
 8015194:	4681      	mov	r9, r0
 8015196:	89a0      	ldrh	r0, [r4, #12]
 8015198:	f000 fdb2 	bl	8015d00 <uxr_seq_num_add>
 801519c:	f1b9 0f00 	cmp.w	r9, #0
 80151a0:	d101      	bne.n	80151a6 <uxr_receive_reliable_message+0x5e>
 80151a2:	4285      	cmp	r5, r0
 80151a4:	d047      	beq.n	8015236 <uxr_receive_reliable_message+0xee>
 80151a6:	8922      	ldrh	r2, [r4, #8]
 80151a8:	fbb5 f0f2 	udiv	r0, r5, r2
 80151ac:	fb02 5010 	mls	r0, r2, r0, r5
 80151b0:	b280      	uxth	r0, r0
 80151b2:	6863      	ldr	r3, [r4, #4]
 80151b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80151b8:	fb00 f303 	mul.w	r3, r0, r3
 80151bc:	6820      	ldr	r0, [r4, #0]
 80151be:	3304      	adds	r3, #4
 80151c0:	4418      	add	r0, r3
 80151c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d1cf      	bne.n	801516a <uxr_receive_reliable_message+0x22>
 80151ca:	4641      	mov	r1, r8
 80151cc:	463a      	mov	r2, r7
 80151ce:	f002 fb50 	bl	8017872 <memcpy>
 80151d2:	8921      	ldrh	r1, [r4, #8]
 80151d4:	fbb5 f2f1 	udiv	r2, r5, r1
 80151d8:	fb01 5212 	mls	r2, r1, r2, r5
 80151dc:	b292      	uxth	r2, r2
 80151de:	6863      	ldr	r3, [r4, #4]
 80151e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80151e4:	fb02 f303 	mul.w	r3, r2, r3
 80151e8:	6822      	ldr	r2, [r4, #0]
 80151ea:	50d7      	str	r7, [r2, r3]
 80151ec:	9a08      	ldr	r2, [sp, #32]
 80151ee:	2301      	movs	r3, #1
 80151f0:	7013      	strb	r3, [r2, #0]
 80151f2:	f1b9 0f00 	cmp.w	r9, #0
 80151f6:	d0b8      	beq.n	801516a <uxr_receive_reliable_message+0x22>
 80151f8:	89a6      	ldrh	r6, [r4, #12]
 80151fa:	4630      	mov	r0, r6
 80151fc:	2101      	movs	r1, #1
 80151fe:	f000 fd7f 	bl	8015d00 <uxr_seq_num_add>
 8015202:	8922      	ldrh	r2, [r4, #8]
 8015204:	6863      	ldr	r3, [r4, #4]
 8015206:	fbb3 f3f2 	udiv	r3, r3, r2
 801520a:	4606      	mov	r6, r0
 801520c:	fbb0 f0f2 	udiv	r0, r0, r2
 8015210:	fb02 6010 	mls	r0, r2, r0, r6
 8015214:	b280      	uxth	r0, r0
 8015216:	fb00 f303 	mul.w	r3, r0, r3
 801521a:	6820      	ldr	r0, [r4, #0]
 801521c:	3304      	adds	r3, #4
 801521e:	4418      	add	r0, r3
 8015220:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d0a0      	beq.n	801516a <uxr_receive_reliable_message+0x22>
 8015228:	6923      	ldr	r3, [r4, #16]
 801522a:	4798      	blx	r3
 801522c:	2802      	cmp	r0, #2
 801522e:	d008      	beq.n	8015242 <uxr_receive_reliable_message+0xfa>
 8015230:	2801      	cmp	r0, #1
 8015232:	d0e2      	beq.n	80151fa <uxr_receive_reliable_message+0xb2>
 8015234:	e799      	b.n	801516a <uxr_receive_reliable_message+0x22>
 8015236:	9b08      	ldr	r3, [sp, #32]
 8015238:	81a5      	strh	r5, [r4, #12]
 801523a:	2601      	movs	r6, #1
 801523c:	f883 9000 	strb.w	r9, [r3]
 8015240:	e794      	b.n	801516c <uxr_receive_reliable_message+0x24>
 8015242:	2601      	movs	r6, #1
 8015244:	e792      	b.n	801516c <uxr_receive_reliable_message+0x24>
 8015246:	bf00      	nop

08015248 <uxr_next_input_reliable_buffer_available>:
 8015248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801524c:	4604      	mov	r4, r0
 801524e:	460f      	mov	r7, r1
 8015250:	8980      	ldrh	r0, [r0, #12]
 8015252:	2101      	movs	r1, #1
 8015254:	4690      	mov	r8, r2
 8015256:	f000 fd53 	bl	8015d00 <uxr_seq_num_add>
 801525a:	8922      	ldrh	r2, [r4, #8]
 801525c:	fbb0 f6f2 	udiv	r6, r0, r2
 8015260:	fb02 0616 	mls	r6, r2, r6, r0
 8015264:	b2b6      	uxth	r6, r6
 8015266:	6863      	ldr	r3, [r4, #4]
 8015268:	fbb3 f3f2 	udiv	r3, r3, r2
 801526c:	fb06 f303 	mul.w	r3, r6, r3
 8015270:	6826      	ldr	r6, [r4, #0]
 8015272:	3304      	adds	r3, #4
 8015274:	441e      	add	r6, r3
 8015276:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801527a:	f1b9 0f00 	cmp.w	r9, #0
 801527e:	d023      	beq.n	80152c8 <uxr_next_input_reliable_buffer_available+0x80>
 8015280:	6923      	ldr	r3, [r4, #16]
 8015282:	4605      	mov	r5, r0
 8015284:	4630      	mov	r0, r6
 8015286:	4798      	blx	r3
 8015288:	4682      	mov	sl, r0
 801528a:	b300      	cbz	r0, 80152ce <uxr_next_input_reliable_buffer_available+0x86>
 801528c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015290:	2101      	movs	r1, #1
 8015292:	4650      	mov	r0, sl
 8015294:	f000 fd34 	bl	8015d00 <uxr_seq_num_add>
 8015298:	8921      	ldrh	r1, [r4, #8]
 801529a:	fbb0 f2f1 	udiv	r2, r0, r1
 801529e:	4682      	mov	sl, r0
 80152a0:	fb01 0212 	mls	r2, r1, r2, r0
 80152a4:	e9d4 0300 	ldrd	r0, r3, [r4]
 80152a8:	b292      	uxth	r2, r2
 80152aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80152ae:	fb02 f303 	mul.w	r3, r2, r3
 80152b2:	3304      	adds	r3, #4
 80152b4:	4418      	add	r0, r3
 80152b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80152ba:	b12b      	cbz	r3, 80152c8 <uxr_next_input_reliable_buffer_available+0x80>
 80152bc:	6923      	ldr	r3, [r4, #16]
 80152be:	4798      	blx	r3
 80152c0:	2802      	cmp	r0, #2
 80152c2:	d01b      	beq.n	80152fc <uxr_next_input_reliable_buffer_available+0xb4>
 80152c4:	2801      	cmp	r0, #1
 80152c6:	d0e3      	beq.n	8015290 <uxr_next_input_reliable_buffer_available+0x48>
 80152c8:	2000      	movs	r0, #0
 80152ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152ce:	464a      	mov	r2, r9
 80152d0:	4631      	mov	r1, r6
 80152d2:	4638      	mov	r0, r7
 80152d4:	f7f6 fa34 	bl	800b740 <ucdr_init_buffer>
 80152d8:	8921      	ldrh	r1, [r4, #8]
 80152da:	fbb5 f2f1 	udiv	r2, r5, r1
 80152de:	fb01 5212 	mls	r2, r1, r2, r5
 80152e2:	b292      	uxth	r2, r2
 80152e4:	6863      	ldr	r3, [r4, #4]
 80152e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80152ea:	fb02 f303 	mul.w	r3, r2, r3
 80152ee:	6822      	ldr	r2, [r4, #0]
 80152f0:	f842 a003 	str.w	sl, [r2, r3]
 80152f4:	2001      	movs	r0, #1
 80152f6:	81a5      	strh	r5, [r4, #12]
 80152f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152fc:	8920      	ldrh	r0, [r4, #8]
 80152fe:	fbb5 f3f0 	udiv	r3, r5, r0
 8015302:	fb00 5513 	mls	r5, r0, r3, r5
 8015306:	b2ad      	uxth	r5, r5
 8015308:	6863      	ldr	r3, [r4, #4]
 801530a:	fbb3 f3f0 	udiv	r3, r3, r0
 801530e:	fb03 f505 	mul.w	r5, r3, r5
 8015312:	6823      	ldr	r3, [r4, #0]
 8015314:	2000      	movs	r0, #0
 8015316:	5158      	str	r0, [r3, r5]
 8015318:	eb06 0108 	add.w	r1, r6, r8
 801531c:	eba9 0208 	sub.w	r2, r9, r8
 8015320:	4638      	mov	r0, r7
 8015322:	f7f6 fa0d 	bl	800b740 <ucdr_init_buffer>
 8015326:	4638      	mov	r0, r7
 8015328:	4903      	ldr	r1, [pc, #12]	@ (8015338 <uxr_next_input_reliable_buffer_available+0xf0>)
 801532a:	4622      	mov	r2, r4
 801532c:	f7f6 f9dc 	bl	800b6e8 <ucdr_set_on_full_buffer_callback>
 8015330:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8015334:	2001      	movs	r0, #1
 8015336:	e7c8      	b.n	80152ca <uxr_next_input_reliable_buffer_available+0x82>
 8015338:	0801503d 	.word	0x0801503d

0801533c <uxr_process_heartbeat>:
 801533c:	b538      	push	{r3, r4, r5, lr}
 801533e:	4611      	mov	r1, r2
 8015340:	4604      	mov	r4, r0
 8015342:	89c0      	ldrh	r0, [r0, #14]
 8015344:	4615      	mov	r5, r2
 8015346:	f000 fce3 	bl	8015d10 <uxr_seq_num_cmp>
 801534a:	2800      	cmp	r0, #0
 801534c:	bfb8      	it	lt
 801534e:	81e5      	strhlt	r5, [r4, #14]
 8015350:	bd38      	pop	{r3, r4, r5, pc}
 8015352:	bf00      	nop

08015354 <uxr_compute_acknack>:
 8015354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015358:	8903      	ldrh	r3, [r0, #8]
 801535a:	8985      	ldrh	r5, [r0, #12]
 801535c:	4604      	mov	r4, r0
 801535e:	460e      	mov	r6, r1
 8015360:	b1d3      	cbz	r3, 8015398 <uxr_compute_acknack+0x44>
 8015362:	4628      	mov	r0, r5
 8015364:	2701      	movs	r7, #1
 8015366:	e003      	b.n	8015370 <uxr_compute_acknack+0x1c>
 8015368:	4567      	cmp	r7, ip
 801536a:	d215      	bcs.n	8015398 <uxr_compute_acknack+0x44>
 801536c:	89a0      	ldrh	r0, [r4, #12]
 801536e:	3701      	adds	r7, #1
 8015370:	b2b9      	uxth	r1, r7
 8015372:	f000 fcc5 	bl	8015d00 <uxr_seq_num_add>
 8015376:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801537a:	fbb0 f3fc 	udiv	r3, r0, ip
 801537e:	fb0c 0313 	mls	r3, ip, r3, r0
 8015382:	b29a      	uxth	r2, r3
 8015384:	e9d4 1300 	ldrd	r1, r3, [r4]
 8015388:	fbb3 f3fc 	udiv	r3, r3, ip
 801538c:	fb02 f303 	mul.w	r3, r2, r3
 8015390:	58cb      	ldr	r3, [r1, r3]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d1e8      	bne.n	8015368 <uxr_compute_acknack+0x14>
 8015396:	4605      	mov	r5, r0
 8015398:	8035      	strh	r5, [r6, #0]
 801539a:	2101      	movs	r1, #1
 801539c:	4628      	mov	r0, r5
 801539e:	89e7      	ldrh	r7, [r4, #14]
 80153a0:	f000 fcb2 	bl	8015d08 <uxr_seq_num_sub>
 80153a4:	4601      	mov	r1, r0
 80153a6:	4638      	mov	r0, r7
 80153a8:	f000 fcae 	bl	8015d08 <uxr_seq_num_sub>
 80153ac:	4605      	mov	r5, r0
 80153ae:	b318      	cbz	r0, 80153f8 <uxr_compute_acknack+0xa4>
 80153b0:	f04f 0900 	mov.w	r9, #0
 80153b4:	464f      	mov	r7, r9
 80153b6:	f04f 0801 	mov.w	r8, #1
 80153ba:	fa1f f189 	uxth.w	r1, r9
 80153be:	8830      	ldrh	r0, [r6, #0]
 80153c0:	f000 fc9e 	bl	8015d00 <uxr_seq_num_add>
 80153c4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80153c8:	fbb0 f3fc 	udiv	r3, r0, ip
 80153cc:	e9d4 1200 	ldrd	r1, r2, [r4]
 80153d0:	fb03 001c 	mls	r0, r3, ip, r0
 80153d4:	b283      	uxth	r3, r0
 80153d6:	fbb2 f2fc 	udiv	r2, r2, ip
 80153da:	fb02 f303 	mul.w	r3, r2, r3
 80153de:	fa08 f209 	lsl.w	r2, r8, r9
 80153e2:	58cb      	ldr	r3, [r1, r3]
 80153e4:	f109 0901 	add.w	r9, r9, #1
 80153e8:	b90b      	cbnz	r3, 80153ee <uxr_compute_acknack+0x9a>
 80153ea:	4317      	orrs	r7, r2
 80153ec:	b2bf      	uxth	r7, r7
 80153ee:	454d      	cmp	r5, r9
 80153f0:	d1e3      	bne.n	80153ba <uxr_compute_acknack+0x66>
 80153f2:	4638      	mov	r0, r7
 80153f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153f8:	4607      	mov	r7, r0
 80153fa:	4638      	mov	r0, r7
 80153fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015400 <uxr_init_output_best_effort_stream>:
 8015400:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8015404:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015408:	6001      	str	r1, [r0, #0]
 801540a:	7303      	strb	r3, [r0, #12]
 801540c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015410:	4770      	bx	lr
 8015412:	bf00      	nop

08015414 <uxr_reset_output_best_effort_stream>:
 8015414:	7b02      	ldrb	r2, [r0, #12]
 8015416:	6042      	str	r2, [r0, #4]
 8015418:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801541c:	81c3      	strh	r3, [r0, #14]
 801541e:	4770      	bx	lr

08015420 <uxr_prepare_best_effort_buffer_to_write>:
 8015420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015422:	4604      	mov	r4, r0
 8015424:	b083      	sub	sp, #12
 8015426:	6840      	ldr	r0, [r0, #4]
 8015428:	460d      	mov	r5, r1
 801542a:	4616      	mov	r6, r2
 801542c:	f7f9 fd0c 	bl	800ee48 <uxr_submessage_padding>
 8015430:	6863      	ldr	r3, [r4, #4]
 8015432:	4418      	add	r0, r3
 8015434:	68a3      	ldr	r3, [r4, #8]
 8015436:	1942      	adds	r2, r0, r5
 8015438:	4293      	cmp	r3, r2
 801543a:	bf2c      	ite	cs
 801543c:	2701      	movcs	r7, #1
 801543e:	2700      	movcc	r7, #0
 8015440:	d202      	bcs.n	8015448 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8015442:	4638      	mov	r0, r7
 8015444:	b003      	add	sp, #12
 8015446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015448:	9000      	str	r0, [sp, #0]
 801544a:	6821      	ldr	r1, [r4, #0]
 801544c:	4630      	mov	r0, r6
 801544e:	2300      	movs	r3, #0
 8015450:	f7f6 f964 	bl	800b71c <ucdr_init_buffer_origin_offset>
 8015454:	6861      	ldr	r1, [r4, #4]
 8015456:	4638      	mov	r0, r7
 8015458:	4429      	add	r1, r5
 801545a:	6061      	str	r1, [r4, #4]
 801545c:	b003      	add	sp, #12
 801545e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015460 <uxr_prepare_best_effort_buffer_to_send>:
 8015460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015464:	4604      	mov	r4, r0
 8015466:	461d      	mov	r5, r3
 8015468:	6840      	ldr	r0, [r0, #4]
 801546a:	7b23      	ldrb	r3, [r4, #12]
 801546c:	4298      	cmp	r0, r3
 801546e:	bf8c      	ite	hi
 8015470:	2601      	movhi	r6, #1
 8015472:	2600      	movls	r6, #0
 8015474:	d802      	bhi.n	801547c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015476:	4630      	mov	r0, r6
 8015478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801547c:	4688      	mov	r8, r1
 801547e:	89e0      	ldrh	r0, [r4, #14]
 8015480:	2101      	movs	r1, #1
 8015482:	4617      	mov	r7, r2
 8015484:	f000 fc3c 	bl	8015d00 <uxr_seq_num_add>
 8015488:	6823      	ldr	r3, [r4, #0]
 801548a:	81e0      	strh	r0, [r4, #14]
 801548c:	8028      	strh	r0, [r5, #0]
 801548e:	f8c8 3000 	str.w	r3, [r8]
 8015492:	6863      	ldr	r3, [r4, #4]
 8015494:	603b      	str	r3, [r7, #0]
 8015496:	7b23      	ldrb	r3, [r4, #12]
 8015498:	6063      	str	r3, [r4, #4]
 801549a:	4630      	mov	r0, r6
 801549c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154a0 <on_full_output_buffer>:
 80154a0:	b538      	push	{r3, r4, r5, lr}
 80154a2:	6802      	ldr	r2, [r0, #0]
 80154a4:	460c      	mov	r4, r1
 80154a6:	6809      	ldr	r1, [r1, #0]
 80154a8:	8923      	ldrh	r3, [r4, #8]
 80154aa:	eba2 0c01 	sub.w	ip, r2, r1
 80154ae:	6862      	ldr	r2, [r4, #4]
 80154b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80154b4:	fbbc fcf2 	udiv	ip, ip, r2
 80154b8:	f10c 0c01 	add.w	ip, ip, #1
 80154bc:	fa1f fc8c 	uxth.w	ip, ip
 80154c0:	fbbc fef3 	udiv	lr, ip, r3
 80154c4:	fb03 c31e 	mls	r3, r3, lr, ip
 80154c8:	b29b      	uxth	r3, r3
 80154ca:	fb02 f303 	mul.w	r3, r2, r3
 80154ce:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80154d2:	58ca      	ldr	r2, [r1, r3]
 80154d4:	4463      	add	r3, ip
 80154d6:	eba2 020c 	sub.w	r2, r2, ip
 80154da:	3308      	adds	r3, #8
 80154dc:	4605      	mov	r5, r0
 80154de:	4419      	add	r1, r3
 80154e0:	3a04      	subs	r2, #4
 80154e2:	6903      	ldr	r3, [r0, #16]
 80154e4:	f7f6 f924 	bl	800b730 <ucdr_init_buffer_origin>
 80154e8:	4628      	mov	r0, r5
 80154ea:	4903      	ldr	r1, [pc, #12]	@ (80154f8 <on_full_output_buffer+0x58>)
 80154ec:	4622      	mov	r2, r4
 80154ee:	f7f6 f8fb 	bl	800b6e8 <ucdr_set_on_full_buffer_callback>
 80154f2:	2000      	movs	r0, #0
 80154f4:	bd38      	pop	{r3, r4, r5, pc}
 80154f6:	bf00      	nop
 80154f8:	080154a1 	.word	0x080154a1

080154fc <uxr_init_output_reliable_stream>:
 80154fc:	b410      	push	{r4}
 80154fe:	f89d c004 	ldrb.w	ip, [sp, #4]
 8015502:	8103      	strh	r3, [r0, #8]
 8015504:	e9c0 1200 	strd	r1, r2, [r0]
 8015508:	f880 c00c 	strb.w	ip, [r0, #12]
 801550c:	b1d3      	cbz	r3, 8015544 <uxr_init_output_reliable_stream+0x48>
 801550e:	f8c1 c000 	str.w	ip, [r1]
 8015512:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015516:	f1bc 0f01 	cmp.w	ip, #1
 801551a:	d913      	bls.n	8015544 <uxr_init_output_reliable_stream+0x48>
 801551c:	2301      	movs	r3, #1
 801551e:	fbb3 f1fc 	udiv	r1, r3, ip
 8015522:	fb0c 3111 	mls	r1, ip, r1, r3
 8015526:	b289      	uxth	r1, r1
 8015528:	6842      	ldr	r2, [r0, #4]
 801552a:	6804      	ldr	r4, [r0, #0]
 801552c:	fbb2 f2fc 	udiv	r2, r2, ip
 8015530:	fb01 f202 	mul.w	r2, r1, r2
 8015534:	7b01      	ldrb	r1, [r0, #12]
 8015536:	50a1      	str	r1, [r4, r2]
 8015538:	3301      	adds	r3, #1
 801553a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801553e:	b29b      	uxth	r3, r3
 8015540:	459c      	cmp	ip, r3
 8015542:	d8ec      	bhi.n	801551e <uxr_init_output_reliable_stream+0x22>
 8015544:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015548:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801554c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015550:	4905      	ldr	r1, [pc, #20]	@ (8015568 <uxr_init_output_reliable_stream+0x6c>)
 8015552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015556:	f8c0 100e 	str.w	r1, [r0, #14]
 801555a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801555e:	2300      	movs	r3, #0
 8015560:	8242      	strh	r2, [r0, #18]
 8015562:	8403      	strh	r3, [r0, #32]
 8015564:	4770      	bx	lr
 8015566:	bf00      	nop
 8015568:	ffff0000 	.word	0xffff0000

0801556c <uxr_reset_output_reliable_stream>:
 801556c:	8901      	ldrh	r1, [r0, #8]
 801556e:	b1b1      	cbz	r1, 801559e <uxr_reset_output_reliable_stream+0x32>
 8015570:	f04f 0c00 	mov.w	ip, #0
 8015574:	4663      	mov	r3, ip
 8015576:	fbb3 f2f1 	udiv	r2, r3, r1
 801557a:	fb01 3312 	mls	r3, r1, r2, r3
 801557e:	b29b      	uxth	r3, r3
 8015580:	6842      	ldr	r2, [r0, #4]
 8015582:	fbb2 f2f1 	udiv	r2, r2, r1
 8015586:	6801      	ldr	r1, [r0, #0]
 8015588:	fb02 f303 	mul.w	r3, r2, r3
 801558c:	7b02      	ldrb	r2, [r0, #12]
 801558e:	50ca      	str	r2, [r1, r3]
 8015590:	f10c 0c01 	add.w	ip, ip, #1
 8015594:	8901      	ldrh	r1, [r0, #8]
 8015596:	fa1f f38c 	uxth.w	r3, ip
 801559a:	4299      	cmp	r1, r3
 801559c:	d8eb      	bhi.n	8015576 <uxr_reset_output_reliable_stream+0xa>
 801559e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80155a2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80155a6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80155aa:	4904      	ldr	r1, [pc, #16]	@ (80155bc <uxr_reset_output_reliable_stream+0x50>)
 80155ac:	f8c0 100e 	str.w	r1, [r0, #14]
 80155b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80155b4:	2300      	movs	r3, #0
 80155b6:	8242      	strh	r2, [r0, #18]
 80155b8:	8403      	strh	r3, [r0, #32]
 80155ba:	4770      	bx	lr
 80155bc:	ffff0000 	.word	0xffff0000

080155c0 <uxr_prepare_reliable_buffer_to_write>:
 80155c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155c4:	4604      	mov	r4, r0
 80155c6:	b091      	sub	sp, #68	@ 0x44
 80155c8:	8900      	ldrh	r0, [r0, #8]
 80155ca:	89e6      	ldrh	r6, [r4, #14]
 80155cc:	6823      	ldr	r3, [r4, #0]
 80155ce:	9204      	str	r2, [sp, #16]
 80155d0:	fbb6 f2f0 	udiv	r2, r6, r0
 80155d4:	fb00 6212 	mls	r2, r0, r2, r6
 80155d8:	b292      	uxth	r2, r2
 80155da:	6865      	ldr	r5, [r4, #4]
 80155dc:	fbb5 f5f0 	udiv	r5, r5, r0
 80155e0:	fb05 3202 	mla	r2, r5, r2, r3
 80155e4:	3204      	adds	r2, #4
 80155e6:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80155ea:	f894 900c 	ldrb.w	r9, [r4, #12]
 80155ee:	9203      	str	r2, [sp, #12]
 80155f0:	468b      	mov	fp, r1
 80155f2:	1f2f      	subs	r7, r5, #4
 80155f4:	2800      	cmp	r0, #0
 80155f6:	f000 814c 	beq.w	8015892 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80155fa:	f04f 0c00 	mov.w	ip, #0
 80155fe:	46e2      	mov	sl, ip
 8015600:	4661      	mov	r1, ip
 8015602:	fbb1 f2f0 	udiv	r2, r1, r0
 8015606:	fb00 1212 	mls	r2, r0, r2, r1
 801560a:	b292      	uxth	r2, r2
 801560c:	fb05 f202 	mul.w	r2, r5, r2
 8015610:	f10c 0c01 	add.w	ip, ip, #1
 8015614:	589a      	ldr	r2, [r3, r2]
 8015616:	454a      	cmp	r2, r9
 8015618:	bf08      	it	eq
 801561a:	f10a 0a01 	addeq.w	sl, sl, #1
 801561e:	fa1f f18c 	uxth.w	r1, ip
 8015622:	bf08      	it	eq
 8015624:	fa1f fa8a 	uxtheq.w	sl, sl
 8015628:	4281      	cmp	r1, r0
 801562a:	d3ea      	bcc.n	8015602 <uxr_prepare_reliable_buffer_to_write+0x42>
 801562c:	4640      	mov	r0, r8
 801562e:	2104      	movs	r1, #4
 8015630:	f8cd a014 	str.w	sl, [sp, #20]
 8015634:	f7f6 f888 	bl	800b748 <ucdr_alignment>
 8015638:	4480      	add	r8, r0
 801563a:	eb08 020b 	add.w	r2, r8, fp
 801563e:	42ba      	cmp	r2, r7
 8015640:	f240 80cd 	bls.w	80157de <uxr_prepare_reliable_buffer_to_write+0x21e>
 8015644:	7b22      	ldrb	r2, [r4, #12]
 8015646:	445a      	add	r2, fp
 8015648:	42ba      	cmp	r2, r7
 801564a:	f240 80b5 	bls.w	80157b8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801564e:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8015652:	33fc      	adds	r3, #252	@ 0xfc
 8015654:	b2ba      	uxth	r2, r7
 8015656:	4413      	add	r3, r2
 8015658:	b29b      	uxth	r3, r3
 801565a:	fb0a f903 	mul.w	r9, sl, r3
 801565e:	45d9      	cmp	r9, fp
 8015660:	9305      	str	r3, [sp, #20]
 8015662:	9306      	str	r3, [sp, #24]
 8015664:	f0c0 80b7 	bcc.w	80157d6 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015668:	f108 0304 	add.w	r3, r8, #4
 801566c:	42bb      	cmp	r3, r7
 801566e:	f080 80db 	bcs.w	8015828 <uxr_prepare_reliable_buffer_to_write+0x268>
 8015672:	f1a2 0904 	sub.w	r9, r2, #4
 8015676:	eba9 0908 	sub.w	r9, r9, r8
 801567a:	9b05      	ldr	r3, [sp, #20]
 801567c:	fa1f f989 	uxth.w	r9, r9
 8015680:	ebab 0b09 	sub.w	fp, fp, r9
 8015684:	fbbb f2f3 	udiv	r2, fp, r3
 8015688:	fb03 b312 	mls	r3, r3, r2, fp
 801568c:	2b00      	cmp	r3, #0
 801568e:	f000 80c8 	beq.w	8015822 <uxr_prepare_reliable_buffer_to_write+0x262>
 8015692:	3201      	adds	r2, #1
 8015694:	b292      	uxth	r2, r2
 8015696:	9306      	str	r3, [sp, #24]
 8015698:	4552      	cmp	r2, sl
 801569a:	f200 809c 	bhi.w	80157d6 <uxr_prepare_reliable_buffer_to_write+0x216>
 801569e:	f10d 0b20 	add.w	fp, sp, #32
 80156a2:	2a00      	cmp	r2, #0
 80156a4:	d042      	beq.n	801572c <uxr_prepare_reliable_buffer_to_write+0x16c>
 80156a6:	f8cd 801c 	str.w	r8, [sp, #28]
 80156aa:	f04f 0a00 	mov.w	sl, #0
 80156ae:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80156b2:	9505      	str	r5, [sp, #20]
 80156b4:	f10d 0b20 	add.w	fp, sp, #32
 80156b8:	4615      	mov	r5, r2
 80156ba:	e000      	b.n	80156be <uxr_prepare_reliable_buffer_to_write+0xfe>
 80156bc:	46c1      	mov	r9, r8
 80156be:	8920      	ldrh	r0, [r4, #8]
 80156c0:	fbb6 f2f0 	udiv	r2, r6, r0
 80156c4:	fb00 6112 	mls	r1, r0, r2, r6
 80156c8:	b28a      	uxth	r2, r1
 80156ca:	6863      	ldr	r3, [r4, #4]
 80156cc:	fbb3 f1f0 	udiv	r1, r3, r0
 80156d0:	6823      	ldr	r3, [r4, #0]
 80156d2:	fb02 f101 	mul.w	r1, r2, r1
 80156d6:	3104      	adds	r1, #4
 80156d8:	4419      	add	r1, r3
 80156da:	4658      	mov	r0, fp
 80156dc:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80156e0:	9200      	str	r2, [sp, #0]
 80156e2:	2300      	movs	r3, #0
 80156e4:	463a      	mov	r2, r7
 80156e6:	f7f6 f819 	bl	800b71c <ucdr_init_buffer_origin_offset>
 80156ea:	464a      	mov	r2, r9
 80156ec:	2300      	movs	r3, #0
 80156ee:	210d      	movs	r1, #13
 80156f0:	4658      	mov	r0, fp
 80156f2:	f7f9 fb69 	bl	800edc8 <uxr_buffer_submessage_header>
 80156f6:	8921      	ldrh	r1, [r4, #8]
 80156f8:	fbb6 f2f1 	udiv	r2, r6, r1
 80156fc:	fb01 6212 	mls	r2, r1, r2, r6
 8015700:	b292      	uxth	r2, r2
 8015702:	6863      	ldr	r3, [r4, #4]
 8015704:	fbb3 f3f1 	udiv	r3, r3, r1
 8015708:	fb02 f303 	mul.w	r3, r2, r3
 801570c:	6822      	ldr	r2, [r4, #0]
 801570e:	4630      	mov	r0, r6
 8015710:	50d7      	str	r7, [r2, r3]
 8015712:	2101      	movs	r1, #1
 8015714:	f000 faf4 	bl	8015d00 <uxr_seq_num_add>
 8015718:	f10a 0a01 	add.w	sl, sl, #1
 801571c:	fa1f f38a 	uxth.w	r3, sl
 8015720:	429d      	cmp	r5, r3
 8015722:	4606      	mov	r6, r0
 8015724:	d8ca      	bhi.n	80156bc <uxr_prepare_reliable_buffer_to_write+0xfc>
 8015726:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801572a:	9d05      	ldr	r5, [sp, #20]
 801572c:	8920      	ldrh	r0, [r4, #8]
 801572e:	fbb6 f3f0 	udiv	r3, r6, r0
 8015732:	fb00 6313 	mls	r3, r0, r3, r6
 8015736:	b299      	uxth	r1, r3
 8015738:	6863      	ldr	r3, [r4, #4]
 801573a:	fbb3 f3f0 	udiv	r3, r3, r0
 801573e:	fb01 f303 	mul.w	r3, r1, r3
 8015742:	6821      	ldr	r1, [r4, #0]
 8015744:	3304      	adds	r3, #4
 8015746:	4419      	add	r1, r3
 8015748:	463a      	mov	r2, r7
 801574a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801574e:	9000      	str	r0, [sp, #0]
 8015750:	2300      	movs	r3, #0
 8015752:	4658      	mov	r0, fp
 8015754:	f7f5 ffe2 	bl	800b71c <ucdr_init_buffer_origin_offset>
 8015758:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801575c:	4658      	mov	r0, fp
 801575e:	fa1f f289 	uxth.w	r2, r9
 8015762:	2302      	movs	r3, #2
 8015764:	210d      	movs	r1, #13
 8015766:	f7f9 fb2f 	bl	800edc8 <uxr_buffer_submessage_header>
 801576a:	9b03      	ldr	r3, [sp, #12]
 801576c:	8927      	ldrh	r7, [r4, #8]
 801576e:	7b20      	ldrb	r0, [r4, #12]
 8015770:	f108 0104 	add.w	r1, r8, #4
 8015774:	440b      	add	r3, r1
 8015776:	4619      	mov	r1, r3
 8015778:	fbb6 f3f7 	udiv	r3, r6, r7
 801577c:	fb07 6313 	mls	r3, r7, r3, r6
 8015780:	f1a5 0208 	sub.w	r2, r5, #8
 8015784:	b29d      	uxth	r5, r3
 8015786:	3004      	adds	r0, #4
 8015788:	6863      	ldr	r3, [r4, #4]
 801578a:	fbb3 f3f7 	udiv	r3, r3, r7
 801578e:	fb05 f303 	mul.w	r3, r5, r3
 8015792:	6825      	ldr	r5, [r4, #0]
 8015794:	4448      	add	r0, r9
 8015796:	50e8      	str	r0, [r5, r3]
 8015798:	9d04      	ldr	r5, [sp, #16]
 801579a:	eba2 0208 	sub.w	r2, r2, r8
 801579e:	4628      	mov	r0, r5
 80157a0:	f7f5 ffce 	bl	800b740 <ucdr_init_buffer>
 80157a4:	4628      	mov	r0, r5
 80157a6:	493c      	ldr	r1, [pc, #240]	@ (8015898 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80157a8:	4622      	mov	r2, r4
 80157aa:	f7f5 ff9d 	bl	800b6e8 <ucdr_set_on_full_buffer_callback>
 80157ae:	2001      	movs	r0, #1
 80157b0:	81e6      	strh	r6, [r4, #14]
 80157b2:	b011      	add	sp, #68	@ 0x44
 80157b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157b8:	2101      	movs	r1, #1
 80157ba:	89e0      	ldrh	r0, [r4, #14]
 80157bc:	f000 faa0 	bl	8015d00 <uxr_seq_num_add>
 80157c0:	8921      	ldrh	r1, [r4, #8]
 80157c2:	4605      	mov	r5, r0
 80157c4:	8a60      	ldrh	r0, [r4, #18]
 80157c6:	f000 fa9b 	bl	8015d00 <uxr_seq_num_add>
 80157ca:	4601      	mov	r1, r0
 80157cc:	4628      	mov	r0, r5
 80157ce:	f000 fa9f 	bl	8015d10 <uxr_seq_num_cmp>
 80157d2:	2800      	cmp	r0, #0
 80157d4:	dd42      	ble.n	801585c <uxr_prepare_reliable_buffer_to_write+0x29c>
 80157d6:	2000      	movs	r0, #0
 80157d8:	b011      	add	sp, #68	@ 0x44
 80157da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157de:	8921      	ldrh	r1, [r4, #8]
 80157e0:	8a60      	ldrh	r0, [r4, #18]
 80157e2:	9205      	str	r2, [sp, #20]
 80157e4:	f000 fa8c 	bl	8015d00 <uxr_seq_num_add>
 80157e8:	4601      	mov	r1, r0
 80157ea:	4630      	mov	r0, r6
 80157ec:	f000 fa90 	bl	8015d10 <uxr_seq_num_cmp>
 80157f0:	2800      	cmp	r0, #0
 80157f2:	9a05      	ldr	r2, [sp, #20]
 80157f4:	dcef      	bgt.n	80157d6 <uxr_prepare_reliable_buffer_to_write+0x216>
 80157f6:	8927      	ldrh	r7, [r4, #8]
 80157f8:	fbb6 f3f7 	udiv	r3, r6, r7
 80157fc:	fb07 6313 	mls	r3, r7, r3, r6
 8015800:	b29d      	uxth	r5, r3
 8015802:	6863      	ldr	r3, [r4, #4]
 8015804:	6824      	ldr	r4, [r4, #0]
 8015806:	fbb3 f3f7 	udiv	r3, r3, r7
 801580a:	fb05 f303 	mul.w	r3, r5, r3
 801580e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8015812:	50e2      	str	r2, [r4, r3]
 8015814:	2300      	movs	r3, #0
 8015816:	f8cd 8000 	str.w	r8, [sp]
 801581a:	f7f5 ff7f 	bl	800b71c <ucdr_init_buffer_origin_offset>
 801581e:	2001      	movs	r0, #1
 8015820:	e7da      	b.n	80157d8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8015822:	b293      	uxth	r3, r2
 8015824:	461a      	mov	r2, r3
 8015826:	e737      	b.n	8015698 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8015828:	4630      	mov	r0, r6
 801582a:	2101      	movs	r1, #1
 801582c:	9207      	str	r2, [sp, #28]
 801582e:	f000 fa67 	bl	8015d00 <uxr_seq_num_add>
 8015832:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015836:	fbb0 f1fc 	udiv	r1, r0, ip
 801583a:	fb0c 0111 	mls	r1, ip, r1, r0
 801583e:	4606      	mov	r6, r0
 8015840:	b288      	uxth	r0, r1
 8015842:	6863      	ldr	r3, [r4, #4]
 8015844:	fbb3 f1fc 	udiv	r1, r3, ip
 8015848:	6823      	ldr	r3, [r4, #0]
 801584a:	9a07      	ldr	r2, [sp, #28]
 801584c:	fb00 f101 	mul.w	r1, r0, r1
 8015850:	3104      	adds	r1, #4
 8015852:	440b      	add	r3, r1
 8015854:	9303      	str	r3, [sp, #12]
 8015856:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801585a:	e70a      	b.n	8015672 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801585c:	8921      	ldrh	r1, [r4, #8]
 801585e:	fbb5 f3f1 	udiv	r3, r5, r1
 8015862:	fb01 5313 	mls	r3, r1, r3, r5
 8015866:	b29a      	uxth	r2, r3
 8015868:	6863      	ldr	r3, [r4, #4]
 801586a:	fbb3 f3f1 	udiv	r3, r3, r1
 801586e:	6821      	ldr	r1, [r4, #0]
 8015870:	9804      	ldr	r0, [sp, #16]
 8015872:	fb02 f303 	mul.w	r3, r2, r3
 8015876:	3304      	adds	r3, #4
 8015878:	7b22      	ldrb	r2, [r4, #12]
 801587a:	4419      	add	r1, r3
 801587c:	445a      	add	r2, fp
 801587e:	f841 2c04 	str.w	r2, [r1, #-4]
 8015882:	7b23      	ldrb	r3, [r4, #12]
 8015884:	9300      	str	r3, [sp, #0]
 8015886:	2300      	movs	r3, #0
 8015888:	f7f5 ff48 	bl	800b71c <ucdr_init_buffer_origin_offset>
 801588c:	81e5      	strh	r5, [r4, #14]
 801588e:	2001      	movs	r0, #1
 8015890:	e7a2      	b.n	80157d8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8015892:	4682      	mov	sl, r0
 8015894:	e6ca      	b.n	801562c <uxr_prepare_reliable_buffer_to_write+0x6c>
 8015896:	bf00      	nop
 8015898:	080154a1 	.word	0x080154a1

0801589c <uxr_prepare_next_reliable_buffer_to_send>:
 801589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801589e:	4604      	mov	r4, r0
 80158a0:	460f      	mov	r7, r1
 80158a2:	8a00      	ldrh	r0, [r0, #16]
 80158a4:	2101      	movs	r1, #1
 80158a6:	4616      	mov	r6, r2
 80158a8:	461d      	mov	r5, r3
 80158aa:	f000 fa29 	bl	8015d00 <uxr_seq_num_add>
 80158ae:	8028      	strh	r0, [r5, #0]
 80158b0:	8922      	ldrh	r2, [r4, #8]
 80158b2:	fbb0 f3f2 	udiv	r3, r0, r2
 80158b6:	fb02 0c13 	mls	ip, r2, r3, r0
 80158ba:	fa1f fc8c 	uxth.w	ip, ip
 80158be:	6863      	ldr	r3, [r4, #4]
 80158c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80158c4:	fb0c fc03 	mul.w	ip, ip, r3
 80158c8:	6823      	ldr	r3, [r4, #0]
 80158ca:	89e1      	ldrh	r1, [r4, #14]
 80158cc:	f10c 0c04 	add.w	ip, ip, #4
 80158d0:	4463      	add	r3, ip
 80158d2:	603b      	str	r3, [r7, #0]
 80158d4:	6823      	ldr	r3, [r4, #0]
 80158d6:	449c      	add	ip, r3
 80158d8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80158dc:	6033      	str	r3, [r6, #0]
 80158de:	f000 fa17 	bl	8015d10 <uxr_seq_num_cmp>
 80158e2:	2800      	cmp	r0, #0
 80158e4:	dd01      	ble.n	80158ea <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80158e6:	2000      	movs	r0, #0
 80158e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158ea:	7b23      	ldrb	r3, [r4, #12]
 80158ec:	6832      	ldr	r2, [r6, #0]
 80158ee:	429a      	cmp	r2, r3
 80158f0:	d9f9      	bls.n	80158e6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80158f2:	8a61      	ldrh	r1, [r4, #18]
 80158f4:	8a20      	ldrh	r0, [r4, #16]
 80158f6:	f000 fa07 	bl	8015d08 <uxr_seq_num_sub>
 80158fa:	8923      	ldrh	r3, [r4, #8]
 80158fc:	4283      	cmp	r3, r0
 80158fe:	d0f2      	beq.n	80158e6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015900:	8828      	ldrh	r0, [r5, #0]
 8015902:	89e3      	ldrh	r3, [r4, #14]
 8015904:	8220      	strh	r0, [r4, #16]
 8015906:	4298      	cmp	r0, r3
 8015908:	d001      	beq.n	801590e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801590a:	2001      	movs	r0, #1
 801590c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801590e:	2101      	movs	r1, #1
 8015910:	f000 f9f6 	bl	8015d00 <uxr_seq_num_add>
 8015914:	81e0      	strh	r0, [r4, #14]
 8015916:	2001      	movs	r0, #1
 8015918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801591a:	bf00      	nop

0801591c <uxr_update_output_stream_heartbeat_timestamp>:
 801591c:	b570      	push	{r4, r5, r6, lr}
 801591e:	8a01      	ldrh	r1, [r0, #16]
 8015920:	4604      	mov	r4, r0
 8015922:	8a40      	ldrh	r0, [r0, #18]
 8015924:	4615      	mov	r5, r2
 8015926:	461e      	mov	r6, r3
 8015928:	f000 f9f2 	bl	8015d10 <uxr_seq_num_cmp>
 801592c:	2800      	cmp	r0, #0
 801592e:	db07      	blt.n	8015940 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8015930:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015934:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015938:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801593c:	2000      	movs	r0, #0
 801593e:	bd70      	pop	{r4, r5, r6, pc}
 8015940:	f894 0020 	ldrb.w	r0, [r4, #32]
 8015944:	b940      	cbnz	r0, 8015958 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8015946:	2301      	movs	r3, #1
 8015948:	f884 3020 	strb.w	r3, [r4, #32]
 801594c:	3564      	adds	r5, #100	@ 0x64
 801594e:	f146 0600 	adc.w	r6, r6, #0
 8015952:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015956:	bd70      	pop	{r4, r5, r6, pc}
 8015958:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801595c:	4295      	cmp	r5, r2
 801595e:	eb76 0303 	sbcs.w	r3, r6, r3
 8015962:	bfa5      	ittet	ge
 8015964:	3001      	addge	r0, #1
 8015966:	f884 0020 	strbge.w	r0, [r4, #32]
 801596a:	2000      	movlt	r0, #0
 801596c:	2001      	movge	r0, #1
 801596e:	e7ed      	b.n	801594c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08015970 <uxr_begin_output_nack_buffer_it>:
 8015970:	8a40      	ldrh	r0, [r0, #18]
 8015972:	4770      	bx	lr

08015974 <uxr_next_reliable_nack_buffer_to_send>:
 8015974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015978:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801597c:	b082      	sub	sp, #8
 801597e:	f1b8 0f00 	cmp.w	r8, #0
 8015982:	d011      	beq.n	80159a8 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8015984:	4604      	mov	r4, r0
 8015986:	8818      	ldrh	r0, [r3, #0]
 8015988:	460e      	mov	r6, r1
 801598a:	4617      	mov	r7, r2
 801598c:	461d      	mov	r5, r3
 801598e:	2101      	movs	r1, #1
 8015990:	f000 f9b6 	bl	8015d00 <uxr_seq_num_add>
 8015994:	8028      	strh	r0, [r5, #0]
 8015996:	8a21      	ldrh	r1, [r4, #16]
 8015998:	f000 f9ba 	bl	8015d10 <uxr_seq_num_cmp>
 801599c:	2800      	cmp	r0, #0
 801599e:	dd07      	ble.n	80159b0 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80159a0:	f04f 0800 	mov.w	r8, #0
 80159a4:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 80159a8:	4640      	mov	r0, r8
 80159aa:	b002      	add	sp, #8
 80159ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159b0:	8921      	ldrh	r1, [r4, #8]
 80159b2:	8828      	ldrh	r0, [r5, #0]
 80159b4:	6823      	ldr	r3, [r4, #0]
 80159b6:	fbb0 f2f1 	udiv	r2, r0, r1
 80159ba:	fb01 0c12 	mls	ip, r1, r2, r0
 80159be:	fa1f f28c 	uxth.w	r2, ip
 80159c2:	9301      	str	r3, [sp, #4]
 80159c4:	6863      	ldr	r3, [r4, #4]
 80159c6:	fbb3 fcf1 	udiv	ip, r3, r1
 80159ca:	9b01      	ldr	r3, [sp, #4]
 80159cc:	fb02 fc0c 	mul.w	ip, r2, ip
 80159d0:	f10c 0c04 	add.w	ip, ip, #4
 80159d4:	4463      	add	r3, ip
 80159d6:	6033      	str	r3, [r6, #0]
 80159d8:	6823      	ldr	r3, [r4, #0]
 80159da:	4463      	add	r3, ip
 80159dc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80159e0:	603b      	str	r3, [r7, #0]
 80159e2:	7b22      	ldrb	r2, [r4, #12]
 80159e4:	429a      	cmp	r2, r3
 80159e6:	d0d2      	beq.n	801598e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80159e8:	4640      	mov	r0, r8
 80159ea:	b002      	add	sp, #8
 80159ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080159f0 <uxr_process_acknack>:
 80159f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159f2:	4604      	mov	r4, r0
 80159f4:	460e      	mov	r6, r1
 80159f6:	4610      	mov	r0, r2
 80159f8:	2101      	movs	r1, #1
 80159fa:	f000 f985 	bl	8015d08 <uxr_seq_num_sub>
 80159fe:	8a61      	ldrh	r1, [r4, #18]
 8015a00:	f000 f982 	bl	8015d08 <uxr_seq_num_sub>
 8015a04:	b1c0      	cbz	r0, 8015a38 <uxr_process_acknack+0x48>
 8015a06:	4605      	mov	r5, r0
 8015a08:	2700      	movs	r7, #0
 8015a0a:	2101      	movs	r1, #1
 8015a0c:	8a60      	ldrh	r0, [r4, #18]
 8015a0e:	f000 f977 	bl	8015d00 <uxr_seq_num_add>
 8015a12:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015a16:	fbb0 f1fc 	udiv	r1, r0, ip
 8015a1a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015a1e:	fb0c 0111 	mls	r1, ip, r1, r0
 8015a22:	b289      	uxth	r1, r1
 8015a24:	3701      	adds	r7, #1
 8015a26:	fbb3 f3fc 	udiv	r3, r3, ip
 8015a2a:	fb01 f303 	mul.w	r3, r1, r3
 8015a2e:	42bd      	cmp	r5, r7
 8015a30:	7b21      	ldrb	r1, [r4, #12]
 8015a32:	8260      	strh	r0, [r4, #18]
 8015a34:	50d1      	str	r1, [r2, r3]
 8015a36:	d1e8      	bne.n	8015a0a <uxr_process_acknack+0x1a>
 8015a38:	3e00      	subs	r6, #0
 8015a3a:	f04f 0300 	mov.w	r3, #0
 8015a3e:	bf18      	it	ne
 8015a40:	2601      	movne	r6, #1
 8015a42:	f884 3020 	strb.w	r3, [r4, #32]
 8015a46:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8015a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015a4c <uxr_is_output_up_to_date>:
 8015a4c:	8a01      	ldrh	r1, [r0, #16]
 8015a4e:	8a40      	ldrh	r0, [r0, #18]
 8015a50:	b508      	push	{r3, lr}
 8015a52:	f000 f95d 	bl	8015d10 <uxr_seq_num_cmp>
 8015a56:	fab0 f080 	clz	r0, r0
 8015a5a:	0940      	lsrs	r0, r0, #5
 8015a5c:	bd08      	pop	{r3, pc}
 8015a5e:	bf00      	nop

08015a60 <get_available_free_slots>:
 8015a60:	8902      	ldrh	r2, [r0, #8]
 8015a62:	b1da      	cbz	r2, 8015a9c <get_available_free_slots+0x3c>
 8015a64:	b530      	push	{r4, r5, lr}
 8015a66:	2100      	movs	r1, #0
 8015a68:	6843      	ldr	r3, [r0, #4]
 8015a6a:	6805      	ldr	r5, [r0, #0]
 8015a6c:	7b04      	ldrb	r4, [r0, #12]
 8015a6e:	fbb3 fef2 	udiv	lr, r3, r2
 8015a72:	4608      	mov	r0, r1
 8015a74:	460b      	mov	r3, r1
 8015a76:	fbb3 fcf2 	udiv	ip, r3, r2
 8015a7a:	fb02 331c 	mls	r3, r2, ip, r3
 8015a7e:	b29b      	uxth	r3, r3
 8015a80:	fb0e f303 	mul.w	r3, lr, r3
 8015a84:	3101      	adds	r1, #1
 8015a86:	f855 c003 	ldr.w	ip, [r5, r3]
 8015a8a:	4564      	cmp	r4, ip
 8015a8c:	bf08      	it	eq
 8015a8e:	3001      	addeq	r0, #1
 8015a90:	b28b      	uxth	r3, r1
 8015a92:	bf08      	it	eq
 8015a94:	b280      	uxtheq	r0, r0
 8015a96:	4293      	cmp	r3, r2
 8015a98:	d3ed      	bcc.n	8015a76 <get_available_free_slots+0x16>
 8015a9a:	bd30      	pop	{r4, r5, pc}
 8015a9c:	4610      	mov	r0, r2
 8015a9e:	4770      	bx	lr

08015aa0 <uxr_buffer_request_data>:
 8015aa0:	b530      	push	{r4, r5, lr}
 8015aa2:	b095      	sub	sp, #84	@ 0x54
 8015aa4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8015aa8:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8015aaa:	9303      	str	r3, [sp, #12]
 8015aac:	2200      	movs	r2, #0
 8015aae:	2d00      	cmp	r5, #0
 8015ab0:	bf14      	ite	ne
 8015ab2:	2101      	movne	r1, #1
 8015ab4:	4611      	moveq	r1, r2
 8015ab6:	4604      	mov	r4, r0
 8015ab8:	f88d 301c 	strb.w	r3, [sp, #28]
 8015abc:	f88d 201d 	strb.w	r2, [sp, #29]
 8015ac0:	f88d 201e 	strb.w	r2, [sp, #30]
 8015ac4:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8015ac8:	d021      	beq.n	8015b0e <uxr_buffer_request_data+0x6e>
 8015aca:	682a      	ldr	r2, [r5, #0]
 8015acc:	686b      	ldr	r3, [r5, #4]
 8015ace:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8015ad2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015ad6:	2210      	movs	r2, #16
 8015ad8:	2308      	movs	r3, #8
 8015ada:	2100      	movs	r1, #0
 8015adc:	e9cd 3100 	strd	r3, r1, [sp]
 8015ae0:	4620      	mov	r0, r4
 8015ae2:	9905      	ldr	r1, [sp, #20]
 8015ae4:	ab0c      	add	r3, sp, #48	@ 0x30
 8015ae6:	f7f8 fed1 	bl	800e88c <uxr_prepare_stream_to_write_submessage>
 8015aea:	b918      	cbnz	r0, 8015af4 <uxr_buffer_request_data+0x54>
 8015aec:	4604      	mov	r4, r0
 8015aee:	4620      	mov	r0, r4
 8015af0:	b015      	add	sp, #84	@ 0x54
 8015af2:	bd30      	pop	{r4, r5, pc}
 8015af4:	9904      	ldr	r1, [sp, #16]
 8015af6:	aa06      	add	r2, sp, #24
 8015af8:	4620      	mov	r0, r4
 8015afa:	f7f8 fffd 	bl	800eaf8 <uxr_init_base_object_request>
 8015afe:	a906      	add	r1, sp, #24
 8015b00:	4604      	mov	r4, r0
 8015b02:	a80c      	add	r0, sp, #48	@ 0x30
 8015b04:	f7fa faf8 	bl	80100f8 <uxr_serialize_READ_DATA_Payload>
 8015b08:	4620      	mov	r0, r4
 8015b0a:	b015      	add	sp, #84	@ 0x54
 8015b0c:	bd30      	pop	{r4, r5, pc}
 8015b0e:	2208      	movs	r2, #8
 8015b10:	e7e2      	b.n	8015ad8 <uxr_buffer_request_data+0x38>
 8015b12:	bf00      	nop

08015b14 <uxr_buffer_cancel_data>:
 8015b14:	b510      	push	{r4, lr}
 8015b16:	b094      	sub	sp, #80	@ 0x50
 8015b18:	2300      	movs	r3, #0
 8015b1a:	9202      	str	r2, [sp, #8]
 8015b1c:	9205      	str	r2, [sp, #20]
 8015b1e:	9301      	str	r3, [sp, #4]
 8015b20:	2201      	movs	r2, #1
 8015b22:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015b26:	f88d 301e 	strb.w	r3, [sp, #30]
 8015b2a:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8015b2e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015b32:	2308      	movs	r3, #8
 8015b34:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8015b38:	9300      	str	r3, [sp, #0]
 8015b3a:	2210      	movs	r2, #16
 8015b3c:	ab0c      	add	r3, sp, #48	@ 0x30
 8015b3e:	4604      	mov	r4, r0
 8015b40:	9103      	str	r1, [sp, #12]
 8015b42:	f7f8 fea3 	bl	800e88c <uxr_prepare_stream_to_write_submessage>
 8015b46:	b918      	cbnz	r0, 8015b50 <uxr_buffer_cancel_data+0x3c>
 8015b48:	4604      	mov	r4, r0
 8015b4a:	4620      	mov	r0, r4
 8015b4c:	b014      	add	sp, #80	@ 0x50
 8015b4e:	bd10      	pop	{r4, pc}
 8015b50:	9905      	ldr	r1, [sp, #20]
 8015b52:	aa06      	add	r2, sp, #24
 8015b54:	4620      	mov	r0, r4
 8015b56:	f7f8 ffcf 	bl	800eaf8 <uxr_init_base_object_request>
 8015b5a:	a906      	add	r1, sp, #24
 8015b5c:	4604      	mov	r4, r0
 8015b5e:	a80c      	add	r0, sp, #48	@ 0x30
 8015b60:	f7fa faca 	bl	80100f8 <uxr_serialize_READ_DATA_Payload>
 8015b64:	4620      	mov	r0, r4
 8015b66:	b014      	add	sp, #80	@ 0x50
 8015b68:	bd10      	pop	{r4, pc}
 8015b6a:	bf00      	nop

08015b6c <read_submessage_format>:
 8015b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b70:	b095      	sub	sp, #84	@ 0x54
 8015b72:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8015b76:	b113      	cbz	r3, 8015b7e <read_submessage_format+0x12>
 8015b78:	b015      	add	sp, #84	@ 0x54
 8015b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b7e:	460c      	mov	r4, r1
 8015b80:	4615      	mov	r5, r2
 8015b82:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8015b86:	4607      	mov	r7, r0
 8015b88:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8015b8a:	9004      	str	r0, [sp, #16]
 8015b8c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8015b8e:	9005      	str	r0, [sp, #20]
 8015b90:	1a52      	subs	r2, r2, r1
 8015b92:	a80c      	add	r0, sp, #48	@ 0x30
 8015b94:	4699      	mov	r9, r3
 8015b96:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8015b9a:	f7f5 fdd1 	bl	800b740 <ucdr_init_buffer>
 8015b9e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015ba2:	a80c      	add	r0, sp, #48	@ 0x30
 8015ba4:	f7f5 fda0 	bl	800b6e8 <ucdr_set_on_full_buffer_callback>
 8015ba8:	69e2      	ldr	r2, [r4, #28]
 8015baa:	b19a      	cbz	r2, 8015bd4 <read_submessage_format+0x68>
 8015bac:	f1b8 0f07 	cmp.w	r8, #7
 8015bb0:	f882 9014 	strb.w	r9, [r2, #20]
 8015bb4:	d040      	beq.n	8015c38 <read_submessage_format+0xcc>
 8015bb6:	f1b8 0f08 	cmp.w	r8, #8
 8015bba:	d02e      	beq.n	8015c1a <read_submessage_format+0xae>
 8015bbc:	f1b8 0f06 	cmp.w	r8, #6
 8015bc0:	d011      	beq.n	8015be6 <read_submessage_format+0x7a>
 8015bc2:	2301      	movs	r3, #1
 8015bc4:	7513      	strb	r3, [r2, #20]
 8015bc6:	4629      	mov	r1, r5
 8015bc8:	4620      	mov	r0, r4
 8015bca:	f7f5 fe09 	bl	800b7e0 <ucdr_advance_buffer>
 8015bce:	b015      	add	sp, #84	@ 0x54
 8015bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bd4:	f1b8 0f07 	cmp.w	r8, #7
 8015bd8:	d02e      	beq.n	8015c38 <read_submessage_format+0xcc>
 8015bda:	f1b8 0f08 	cmp.w	r8, #8
 8015bde:	d01c      	beq.n	8015c1a <read_submessage_format+0xae>
 8015be0:	f1b8 0f06 	cmp.w	r8, #6
 8015be4:	d1ef      	bne.n	8015bc6 <read_submessage_format+0x5a>
 8015be6:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8015bea:	f1b8 0f00 	cmp.w	r8, #0
 8015bee:	d011      	beq.n	8015c14 <read_submessage_format+0xa8>
 8015bf0:	ab0c      	add	r3, sp, #48	@ 0x30
 8015bf2:	e9cd 3500 	strd	r3, r5, [sp]
 8015bf6:	2306      	movs	r3, #6
 8015bf8:	f88d 3016 	strb.w	r3, [sp, #22]
 8015bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015c00:	9302      	str	r3, [sp, #8]
 8015c02:	4632      	mov	r2, r6
 8015c04:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015c08:	4638      	mov	r0, r7
 8015c0a:	47c0      	blx	r8
 8015c0c:	2301      	movs	r3, #1
 8015c0e:	69e2      	ldr	r2, [r4, #28]
 8015c10:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8015c14:	2a00      	cmp	r2, #0
 8015c16:	d1d4      	bne.n	8015bc2 <read_submessage_format+0x56>
 8015c18:	e7d5      	b.n	8015bc6 <read_submessage_format+0x5a>
 8015c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d0f8      	beq.n	8015c14 <read_submessage_format+0xa8>
 8015c22:	a906      	add	r1, sp, #24
 8015c24:	a80c      	add	r0, sp, #48	@ 0x30
 8015c26:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8015c2a:	f7fa fb2b 	bl	8010284 <uxr_deserialize_SampleIdentity>
 8015c2e:	b9a0      	cbnz	r0, 8015c5a <read_submessage_format+0xee>
 8015c30:	69e2      	ldr	r2, [r4, #28]
 8015c32:	2a00      	cmp	r2, #0
 8015c34:	d1c5      	bne.n	8015bc2 <read_submessage_format+0x56>
 8015c36:	e7c6      	b.n	8015bc6 <read_submessage_format+0x5a>
 8015c38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8015c3c:	b13b      	cbz	r3, 8015c4e <read_submessage_format+0xe2>
 8015c3e:	a906      	add	r1, sp, #24
 8015c40:	a80c      	add	r0, sp, #48	@ 0x30
 8015c42:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8015c46:	f7f9 fff1 	bl	800fc2c <uxr_deserialize_BaseObjectRequest>
 8015c4a:	bb60      	cbnz	r0, 8015ca6 <read_submessage_format+0x13a>
 8015c4c:	69e2      	ldr	r2, [r4, #28]
 8015c4e:	68a3      	ldr	r3, [r4, #8]
 8015c50:	442b      	add	r3, r5
 8015c52:	60a3      	str	r3, [r4, #8]
 8015c54:	2a00      	cmp	r2, #0
 8015c56:	d1b4      	bne.n	8015bc2 <read_submessage_format+0x56>
 8015c58:	e7b5      	b.n	8015bc6 <read_submessage_format+0x5a>
 8015c5a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8015c5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015c60:	1a52      	subs	r2, r2, r1
 8015c62:	eba8 0803 	sub.w	r8, r8, r3
 8015c66:	a80c      	add	r0, sp, #48	@ 0x30
 8015c68:	f7f5 fd6a 	bl	800b740 <ucdr_init_buffer>
 8015c6c:	44a8      	add	r8, r5
 8015c6e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015c72:	a80c      	add	r0, sp, #48	@ 0x30
 8015c74:	f7f5 fd38 	bl	800b6e8 <ucdr_set_on_full_buffer_callback>
 8015c78:	fa1f f888 	uxth.w	r8, r8
 8015c7c:	ab0c      	add	r3, sp, #48	@ 0x30
 8015c7e:	9300      	str	r3, [sp, #0]
 8015c80:	f8cd 8004 	str.w	r8, [sp, #4]
 8015c84:	2108      	movs	r1, #8
 8015c86:	f88d 1016 	strb.w	r1, [sp, #22]
 8015c8a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8015c8e:	9102      	str	r1, [sp, #8]
 8015c90:	ab06      	add	r3, sp, #24
 8015c92:	4632      	mov	r2, r6
 8015c94:	9905      	ldr	r1, [sp, #20]
 8015c96:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8015c9a:	4638      	mov	r0, r7
 8015c9c:	47b0      	blx	r6
 8015c9e:	2301      	movs	r3, #1
 8015ca0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8015ca4:	e7c4      	b.n	8015c30 <read_submessage_format+0xc4>
 8015ca6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8015caa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015cac:	1a52      	subs	r2, r2, r1
 8015cae:	a80c      	add	r0, sp, #48	@ 0x30
 8015cb0:	eba8 0803 	sub.w	r8, r8, r3
 8015cb4:	f7f5 fd44 	bl	800b740 <ucdr_init_buffer>
 8015cb8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015cbc:	a80c      	add	r0, sp, #48	@ 0x30
 8015cbe:	f7f5 fd13 	bl	800b6e8 <ucdr_set_on_full_buffer_callback>
 8015cc2:	ab0c      	add	r3, sp, #48	@ 0x30
 8015cc4:	9300      	str	r3, [sp, #0]
 8015cc6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8015cca:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8015cce:	44a8      	add	r8, r5
 8015cd0:	fa1f f888 	uxth.w	r8, r8
 8015cd4:	f8cd 8004 	str.w	r8, [sp, #4]
 8015cd8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015cdc:	2107      	movs	r1, #7
 8015cde:	f88d 1016 	strb.w	r1, [sp, #22]
 8015ce2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8015ce6:	9102      	str	r1, [sp, #8]
 8015ce8:	4632      	mov	r2, r6
 8015cea:	b29b      	uxth	r3, r3
 8015cec:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8015cf0:	9905      	ldr	r1, [sp, #20]
 8015cf2:	4638      	mov	r0, r7
 8015cf4:	47b0      	blx	r6
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8015cfc:	e7a6      	b.n	8015c4c <read_submessage_format+0xe0>
 8015cfe:	bf00      	nop

08015d00 <uxr_seq_num_add>:
 8015d00:	4408      	add	r0, r1
 8015d02:	b280      	uxth	r0, r0
 8015d04:	4770      	bx	lr
 8015d06:	bf00      	nop

08015d08 <uxr_seq_num_sub>:
 8015d08:	1a40      	subs	r0, r0, r1
 8015d0a:	b280      	uxth	r0, r0
 8015d0c:	4770      	bx	lr
 8015d0e:	bf00      	nop

08015d10 <uxr_seq_num_cmp>:
 8015d10:	4288      	cmp	r0, r1
 8015d12:	d011      	beq.n	8015d38 <uxr_seq_num_cmp+0x28>
 8015d14:	d309      	bcc.n	8015d2a <uxr_seq_num_cmp+0x1a>
 8015d16:	4288      	cmp	r0, r1
 8015d18:	d910      	bls.n	8015d3c <uxr_seq_num_cmp+0x2c>
 8015d1a:	1a40      	subs	r0, r0, r1
 8015d1c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8015d20:	bfd4      	ite	le
 8015d22:	2001      	movle	r0, #1
 8015d24:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8015d28:	4770      	bx	lr
 8015d2a:	1a0b      	subs	r3, r1, r0
 8015d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015d30:	daf1      	bge.n	8015d16 <uxr_seq_num_cmp+0x6>
 8015d32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d36:	4770      	bx	lr
 8015d38:	2000      	movs	r0, #0
 8015d3a:	4770      	bx	lr
 8015d3c:	2001      	movs	r0, #1
 8015d3e:	4770      	bx	lr

08015d40 <uxr_init_framing_io>:
 8015d40:	2300      	movs	r3, #0
 8015d42:	7041      	strb	r1, [r0, #1]
 8015d44:	7003      	strb	r3, [r0, #0]
 8015d46:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8015d48:	4770      	bx	lr
 8015d4a:	bf00      	nop

08015d4c <uxr_write_framed_msg>:
 8015d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d50:	4617      	mov	r7, r2
 8015d52:	7842      	ldrb	r2, [r0, #1]
 8015d54:	b083      	sub	sp, #12
 8015d56:	460e      	mov	r6, r1
 8015d58:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8015d5c:	469a      	mov	sl, r3
 8015d5e:	2901      	cmp	r1, #1
 8015d60:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8015d64:	4604      	mov	r4, r0
 8015d66:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8015d6a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8015d6e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8015d72:	f240 8137 	bls.w	8015fe4 <uxr_write_framed_msg+0x298>
 8015d76:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015d7a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8015d7e:	2901      	cmp	r1, #1
 8015d80:	f04f 0202 	mov.w	r2, #2
 8015d84:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d88:	f240 808f 	bls.w	8015eaa <uxr_write_framed_msg+0x15e>
 8015d8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d8e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8015d92:	b2dd      	uxtb	r5, r3
 8015d94:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015d98:	2203      	movs	r2, #3
 8015d9a:	2901      	cmp	r1, #1
 8015d9c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015da0:	f240 809a 	bls.w	8015ed8 <uxr_write_framed_msg+0x18c>
 8015da4:	18a1      	adds	r1, r4, r2
 8015da6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015da8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8015dac:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015db0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015db4:	3201      	adds	r2, #1
 8015db6:	2801      	cmp	r0, #1
 8015db8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015dbc:	f240 80a0 	bls.w	8015f00 <uxr_write_framed_msg+0x1b4>
 8015dc0:	18a0      	adds	r0, r4, r2
 8015dc2:	3201      	adds	r2, #1
 8015dc4:	b2d2      	uxtb	r2, r2
 8015dc6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015dca:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	f000 80a9 	beq.w	8015f26 <uxr_write_framed_msg+0x1da>
 8015dd4:	f04f 0900 	mov.w	r9, #0
 8015dd8:	46c8      	mov	r8, r9
 8015dda:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015dde:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015de2:	2901      	cmp	r1, #1
 8015de4:	f240 80c3 	bls.w	8015f6e <uxr_write_framed_msg+0x222>
 8015de8:	2a29      	cmp	r2, #41	@ 0x29
 8015dea:	f200 809f 	bhi.w	8015f2c <uxr_write_framed_msg+0x1e0>
 8015dee:	18a1      	adds	r1, r4, r2
 8015df0:	3201      	adds	r2, #1
 8015df2:	b2d2      	uxtb	r2, r2
 8015df4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8015df8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015dfc:	ea89 0303 	eor.w	r3, r9, r3
 8015e00:	498c      	ldr	r1, [pc, #560]	@ (8016034 <uxr_write_framed_msg+0x2e8>)
 8015e02:	b2db      	uxtb	r3, r3
 8015e04:	f108 0801 	add.w	r8, r8, #1
 8015e08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015e0c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8015e10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e12:	4543      	cmp	r3, r8
 8015e14:	d8e1      	bhi.n	8015dda <uxr_write_framed_msg+0x8e>
 8015e16:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015e1a:	fa5f f889 	uxtb.w	r8, r9
 8015e1e:	9301      	str	r3, [sp, #4]
 8015e20:	f04f 0900 	mov.w	r9, #0
 8015e24:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8015e28:	fa5f f18a 	uxtb.w	r1, sl
 8015e2c:	2901      	cmp	r1, #1
 8015e2e:	d921      	bls.n	8015e74 <uxr_write_framed_msg+0x128>
 8015e30:	2a29      	cmp	r2, #41	@ 0x29
 8015e32:	f240 80af 	bls.w	8015f94 <uxr_write_framed_msg+0x248>
 8015e36:	2500      	movs	r5, #0
 8015e38:	e000      	b.n	8015e3c <uxr_write_framed_msg+0xf0>
 8015e3a:	b160      	cbz	r0, 8015e56 <uxr_write_framed_msg+0x10a>
 8015e3c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015e40:	1b52      	subs	r2, r2, r5
 8015e42:	465b      	mov	r3, fp
 8015e44:	4421      	add	r1, r4
 8015e46:	4638      	mov	r0, r7
 8015e48:	47b0      	blx	r6
 8015e4a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015e4e:	4405      	add	r5, r0
 8015e50:	4295      	cmp	r5, r2
 8015e52:	d3f2      	bcc.n	8015e3a <uxr_write_framed_msg+0xee>
 8015e54:	d003      	beq.n	8015e5e <uxr_write_framed_msg+0x112>
 8015e56:	2000      	movs	r0, #0
 8015e58:	b003      	add	sp, #12
 8015e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e5e:	fa5f f18a 	uxtb.w	r1, sl
 8015e62:	f04f 0300 	mov.w	r3, #0
 8015e66:	2901      	cmp	r1, #1
 8015e68:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015e6c:	f04f 0200 	mov.w	r2, #0
 8015e70:	f200 8090 	bhi.w	8015f94 <uxr_write_framed_msg+0x248>
 8015e74:	1c51      	adds	r1, r2, #1
 8015e76:	b2c9      	uxtb	r1, r1
 8015e78:	2929      	cmp	r1, #41	@ 0x29
 8015e7a:	d8dc      	bhi.n	8015e36 <uxr_write_framed_msg+0xea>
 8015e7c:	18a5      	adds	r5, r4, r2
 8015e7e:	4421      	add	r1, r4
 8015e80:	3202      	adds	r2, #2
 8015e82:	f088 0820 	eor.w	r8, r8, #32
 8015e86:	4648      	mov	r0, r9
 8015e88:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8015e8c:	b2d2      	uxtb	r2, r2
 8015e8e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8015e92:	f04f 0901 	mov.w	r9, #1
 8015e96:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8015e9a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015e9e:	2800      	cmp	r0, #0
 8015ea0:	f040 8085 	bne.w	8015fae <uxr_write_framed_msg+0x262>
 8015ea4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015ea8:	e7bc      	b.n	8015e24 <uxr_write_framed_msg+0xd8>
 8015eaa:	4611      	mov	r1, r2
 8015eac:	f04f 0c03 	mov.w	ip, #3
 8015eb0:	2204      	movs	r2, #4
 8015eb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015eb4:	4421      	add	r1, r4
 8015eb6:	b2dd      	uxtb	r5, r3
 8015eb8:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8015ebc:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8015ec0:	44a4      	add	ip, r4
 8015ec2:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015ec6:	f080 0020 	eor.w	r0, r0, #32
 8015eca:	2901      	cmp	r1, #1
 8015ecc:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8015ed0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015ed4:	f63f af66 	bhi.w	8015da4 <uxr_write_framed_msg+0x58>
 8015ed8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015eda:	18a0      	adds	r0, r4, r2
 8015edc:	f085 0520 	eor.w	r5, r5, #32
 8015ee0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015ee4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015ee8:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8015eec:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8015ef0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015ef4:	3202      	adds	r2, #2
 8015ef6:	2801      	cmp	r0, #1
 8015ef8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015efc:	f63f af60 	bhi.w	8015dc0 <uxr_write_framed_msg+0x74>
 8015f00:	1c50      	adds	r0, r2, #1
 8015f02:	18a5      	adds	r5, r4, r2
 8015f04:	fa54 f080 	uxtab	r0, r4, r0
 8015f08:	3202      	adds	r2, #2
 8015f0a:	f081 0120 	eor.w	r1, r1, #32
 8015f0e:	b2d2      	uxtb	r2, r2
 8015f10:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015f14:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8015f18:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015f1c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	f47f af57 	bne.w	8015dd4 <uxr_write_framed_msg+0x88>
 8015f26:	9301      	str	r3, [sp, #4]
 8015f28:	4698      	mov	r8, r3
 8015f2a:	e779      	b.n	8015e20 <uxr_write_framed_msg+0xd4>
 8015f2c:	2500      	movs	r5, #0
 8015f2e:	e001      	b.n	8015f34 <uxr_write_framed_msg+0x1e8>
 8015f30:	2800      	cmp	r0, #0
 8015f32:	d090      	beq.n	8015e56 <uxr_write_framed_msg+0x10a>
 8015f34:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015f38:	1b52      	subs	r2, r2, r5
 8015f3a:	465b      	mov	r3, fp
 8015f3c:	4421      	add	r1, r4
 8015f3e:	4638      	mov	r0, r7
 8015f40:	47b0      	blx	r6
 8015f42:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015f46:	4405      	add	r5, r0
 8015f48:	4295      	cmp	r5, r2
 8015f4a:	d3f1      	bcc.n	8015f30 <uxr_write_framed_msg+0x1e4>
 8015f4c:	d183      	bne.n	8015e56 <uxr_write_framed_msg+0x10a>
 8015f4e:	f04f 0300 	mov.w	r3, #0
 8015f52:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015f56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015f58:	4543      	cmp	r3, r8
 8015f5a:	d964      	bls.n	8016026 <uxr_write_framed_msg+0x2da>
 8015f5c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015f60:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015f64:	2901      	cmp	r1, #1
 8015f66:	f04f 0200 	mov.w	r2, #0
 8015f6a:	f63f af3d 	bhi.w	8015de8 <uxr_write_framed_msg+0x9c>
 8015f6e:	1c51      	adds	r1, r2, #1
 8015f70:	b2c9      	uxtb	r1, r1
 8015f72:	2929      	cmp	r1, #41	@ 0x29
 8015f74:	d8da      	bhi.n	8015f2c <uxr_write_framed_msg+0x1e0>
 8015f76:	18a0      	adds	r0, r4, r2
 8015f78:	4421      	add	r1, r4
 8015f7a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8015f7e:	3202      	adds	r2, #2
 8015f80:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8015f84:	b2d2      	uxtb	r2, r2
 8015f86:	f083 0020 	eor.w	r0, r3, #32
 8015f8a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8015f8e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015f92:	e733      	b.n	8015dfc <uxr_write_framed_msg+0xb0>
 8015f94:	18a1      	adds	r1, r4, r2
 8015f96:	3201      	adds	r2, #1
 8015f98:	4648      	mov	r0, r9
 8015f9a:	b2d2      	uxtb	r2, r2
 8015f9c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8015fa0:	f04f 0901 	mov.w	r9, #1
 8015fa4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015fa8:	2800      	cmp	r0, #0
 8015faa:	f43f af7b 	beq.w	8015ea4 <uxr_write_framed_msg+0x158>
 8015fae:	2500      	movs	r5, #0
 8015fb0:	e002      	b.n	8015fb8 <uxr_write_framed_msg+0x26c>
 8015fb2:	2800      	cmp	r0, #0
 8015fb4:	f43f af4f 	beq.w	8015e56 <uxr_write_framed_msg+0x10a>
 8015fb8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015fbc:	1b52      	subs	r2, r2, r5
 8015fbe:	465b      	mov	r3, fp
 8015fc0:	4421      	add	r1, r4
 8015fc2:	4638      	mov	r0, r7
 8015fc4:	47b0      	blx	r6
 8015fc6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015fca:	4405      	add	r5, r0
 8015fcc:	4295      	cmp	r5, r2
 8015fce:	d3f0      	bcc.n	8015fb2 <uxr_write_framed_msg+0x266>
 8015fd0:	f47f af41 	bne.w	8015e56 <uxr_write_framed_msg+0x10a>
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015fda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015fdc:	b298      	uxth	r0, r3
 8015fde:	b003      	add	sp, #12
 8015fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fe4:	217d      	movs	r1, #125	@ 0x7d
 8015fe6:	f082 0220 	eor.w	r2, r2, #32
 8015fea:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8015fee:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015ff2:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8015ff6:	2901      	cmp	r1, #1
 8015ff8:	f04f 0203 	mov.w	r2, #3
 8015ffc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016000:	d804      	bhi.n	801600c <uxr_write_framed_msg+0x2c0>
 8016002:	4611      	mov	r1, r2
 8016004:	f04f 0c04 	mov.w	ip, #4
 8016008:	2205      	movs	r2, #5
 801600a:	e752      	b.n	8015eb2 <uxr_write_framed_msg+0x166>
 801600c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801600e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8016012:	b2dd      	uxtb	r5, r3
 8016014:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8016018:	2204      	movs	r2, #4
 801601a:	2901      	cmp	r1, #1
 801601c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016020:	f63f aec0 	bhi.w	8015da4 <uxr_write_framed_msg+0x58>
 8016024:	e758      	b.n	8015ed8 <uxr_write_framed_msg+0x18c>
 8016026:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801602a:	fa5f f889 	uxtb.w	r8, r9
 801602e:	9301      	str	r3, [sp, #4]
 8016030:	2200      	movs	r2, #0
 8016032:	e6f5      	b.n	8015e20 <uxr_write_framed_msg+0xd4>
 8016034:	080191b0 	.word	0x080191b0

08016038 <uxr_framing_read_transport>:
 8016038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801603c:	4604      	mov	r4, r0
 801603e:	b083      	sub	sp, #12
 8016040:	461f      	mov	r7, r3
 8016042:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8016046:	4689      	mov	r9, r1
 8016048:	4692      	mov	sl, r2
 801604a:	f7f8 ff03 	bl	800ee54 <uxr_millis>
 801604e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016052:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8016056:	42b3      	cmp	r3, r6
 8016058:	4680      	mov	r8, r0
 801605a:	d061      	beq.n	8016120 <uxr_framing_read_transport+0xe8>
 801605c:	d81c      	bhi.n	8016098 <uxr_framing_read_transport+0x60>
 801605e:	1e75      	subs	r5, r6, #1
 8016060:	1aed      	subs	r5, r5, r3
 8016062:	b2ed      	uxtb	r5, r5
 8016064:	2600      	movs	r6, #0
 8016066:	455d      	cmp	r5, fp
 8016068:	d81f      	bhi.n	80160aa <uxr_framing_read_transport+0x72>
 801606a:	19ab      	adds	r3, r5, r6
 801606c:	455b      	cmp	r3, fp
 801606e:	bf84      	itt	hi
 8016070:	ebab 0605 	subhi.w	r6, fp, r5
 8016074:	b2f6      	uxtbhi	r6, r6
 8016076:	b9ed      	cbnz	r5, 80160b4 <uxr_framing_read_transport+0x7c>
 8016078:	f04f 0b00 	mov.w	fp, #0
 801607c:	f7f8 feea 	bl	800ee54 <uxr_millis>
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	eba0 0808 	sub.w	r8, r0, r8
 8016086:	eba3 0308 	sub.w	r3, r3, r8
 801608a:	4658      	mov	r0, fp
 801608c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016090:	603b      	str	r3, [r7, #0]
 8016092:	b003      	add	sp, #12
 8016094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016098:	2e00      	cmp	r6, #0
 801609a:	d049      	beq.n	8016130 <uxr_framing_read_transport+0xf8>
 801609c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80160a0:	b2ed      	uxtb	r5, r5
 80160a2:	3e01      	subs	r6, #1
 80160a4:	455d      	cmp	r5, fp
 80160a6:	b2f6      	uxtb	r6, r6
 80160a8:	d9df      	bls.n	801606a <uxr_framing_read_transport+0x32>
 80160aa:	fa5f f58b 	uxtb.w	r5, fp
 80160ae:	2600      	movs	r6, #0
 80160b0:	2d00      	cmp	r5, #0
 80160b2:	d0e1      	beq.n	8016078 <uxr_framing_read_transport+0x40>
 80160b4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80160b8:	3102      	adds	r1, #2
 80160ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80160bc:	9300      	str	r3, [sp, #0]
 80160be:	683b      	ldr	r3, [r7, #0]
 80160c0:	4421      	add	r1, r4
 80160c2:	462a      	mov	r2, r5
 80160c4:	4650      	mov	r0, sl
 80160c6:	47c8      	blx	r9
 80160c8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80160cc:	4a1a      	ldr	r2, [pc, #104]	@ (8016138 <uxr_framing_read_transport+0x100>)
 80160ce:	4403      	add	r3, r0
 80160d0:	0859      	lsrs	r1, r3, #1
 80160d2:	fba2 2101 	umull	r2, r1, r2, r1
 80160d6:	0889      	lsrs	r1, r1, #2
 80160d8:	222a      	movs	r2, #42	@ 0x2a
 80160da:	fb02 3111 	mls	r1, r2, r1, r3
 80160de:	4683      	mov	fp, r0
 80160e0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80160e4:	2800      	cmp	r0, #0
 80160e6:	d0c7      	beq.n	8016078 <uxr_framing_read_transport+0x40>
 80160e8:	42a8      	cmp	r0, r5
 80160ea:	d1c7      	bne.n	801607c <uxr_framing_read_transport+0x44>
 80160ec:	2e00      	cmp	r6, #0
 80160ee:	d0c5      	beq.n	801607c <uxr_framing_read_transport+0x44>
 80160f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80160f2:	9300      	str	r3, [sp, #0]
 80160f4:	3102      	adds	r1, #2
 80160f6:	4632      	mov	r2, r6
 80160f8:	4421      	add	r1, r4
 80160fa:	2300      	movs	r3, #0
 80160fc:	4650      	mov	r0, sl
 80160fe:	47c8      	blx	r9
 8016100:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016104:	4a0c      	ldr	r2, [pc, #48]	@ (8016138 <uxr_framing_read_transport+0x100>)
 8016106:	180b      	adds	r3, r1, r0
 8016108:	0859      	lsrs	r1, r3, #1
 801610a:	fba2 1201 	umull	r1, r2, r2, r1
 801610e:	0892      	lsrs	r2, r2, #2
 8016110:	212a      	movs	r1, #42	@ 0x2a
 8016112:	fb01 3312 	mls	r3, r1, r2, r3
 8016116:	eb00 0b05 	add.w	fp, r0, r5
 801611a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801611e:	e7ad      	b.n	801607c <uxr_framing_read_transport+0x44>
 8016120:	2600      	movs	r6, #0
 8016122:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8016126:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8016128:	d9bf      	bls.n	80160aa <uxr_framing_read_transport+0x72>
 801612a:	2102      	movs	r1, #2
 801612c:	2529      	movs	r5, #41	@ 0x29
 801612e:	e7c4      	b.n	80160ba <uxr_framing_read_transport+0x82>
 8016130:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8016134:	b2ed      	uxtb	r5, r5
 8016136:	e796      	b.n	8016066 <uxr_framing_read_transport+0x2e>
 8016138:	30c30c31 	.word	0x30c30c31

0801613c <uxr_read_framed_msg>:
 801613c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016140:	461e      	mov	r6, r3
 8016142:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8016146:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801614a:	429d      	cmp	r5, r3
 801614c:	b083      	sub	sp, #12
 801614e:	4604      	mov	r4, r0
 8016150:	4688      	mov	r8, r1
 8016152:	4691      	mov	r9, r2
 8016154:	f000 8188 	beq.w	8016468 <uxr_read_framed_msg+0x32c>
 8016158:	7823      	ldrb	r3, [r4, #0]
 801615a:	4dc1      	ldr	r5, [pc, #772]	@ (8016460 <uxr_read_framed_msg+0x324>)
 801615c:	4fc1      	ldr	r7, [pc, #772]	@ (8016464 <uxr_read_framed_msg+0x328>)
 801615e:	2b07      	cmp	r3, #7
 8016160:	d8fd      	bhi.n	801615e <uxr_read_framed_msg+0x22>
 8016162:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016166:	0115      	.short	0x0115
 8016168:	00d600f6 	.word	0x00d600f6
 801616c:	009000b9 	.word	0x009000b9
 8016170:	0030004d 	.word	0x0030004d
 8016174:	0008      	.short	0x0008
 8016176:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801617a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801617e:	4299      	cmp	r1, r3
 8016180:	f000 814a 	beq.w	8016418 <uxr_read_framed_msg+0x2dc>
 8016184:	18e2      	adds	r2, r4, r3
 8016186:	7892      	ldrb	r2, [r2, #2]
 8016188:	2a7d      	cmp	r2, #125	@ 0x7d
 801618a:	f000 8199 	beq.w	80164c0 <uxr_read_framed_msg+0x384>
 801618e:	3301      	adds	r3, #1
 8016190:	0858      	lsrs	r0, r3, #1
 8016192:	fba5 1000 	umull	r1, r0, r5, r0
 8016196:	0880      	lsrs	r0, r0, #2
 8016198:	212a      	movs	r1, #42	@ 0x2a
 801619a:	fb01 3310 	mls	r3, r1, r0, r3
 801619e:	2a7e      	cmp	r2, #126	@ 0x7e
 80161a0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80161a4:	f000 8252 	beq.w	801664c <uxr_read_framed_msg+0x510>
 80161a8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80161aa:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80161ac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80161b0:	b29b      	uxth	r3, r3
 80161b2:	2200      	movs	r2, #0
 80161b4:	4299      	cmp	r1, r3
 80161b6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80161b8:	7022      	strb	r2, [r4, #0]
 80161ba:	f000 8179 	beq.w	80164b0 <uxr_read_framed_msg+0x374>
 80161be:	2000      	movs	r0, #0
 80161c0:	b003      	add	sp, #12
 80161c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161c6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80161ca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80161ce:	4299      	cmp	r1, r3
 80161d0:	f000 8131 	beq.w	8016436 <uxr_read_framed_msg+0x2fa>
 80161d4:	18e2      	adds	r2, r4, r3
 80161d6:	7890      	ldrb	r0, [r2, #2]
 80161d8:	287d      	cmp	r0, #125	@ 0x7d
 80161da:	f000 8190 	beq.w	80164fe <uxr_read_framed_msg+0x3c2>
 80161de:	3301      	adds	r3, #1
 80161e0:	085a      	lsrs	r2, r3, #1
 80161e2:	fba5 1202 	umull	r1, r2, r5, r2
 80161e6:	0892      	lsrs	r2, r2, #2
 80161e8:	212a      	movs	r1, #42	@ 0x2a
 80161ea:	fb01 3312 	mls	r3, r1, r2, r3
 80161ee:	287e      	cmp	r0, #126	@ 0x7e
 80161f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80161f4:	f000 821a 	beq.w	801662c <uxr_read_framed_msg+0x4f0>
 80161f8:	2307      	movs	r3, #7
 80161fa:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80161fc:	7023      	strb	r3, [r4, #0]
 80161fe:	e7ae      	b.n	801615e <uxr_read_framed_msg+0x22>
 8016200:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016202:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8016206:	459e      	cmp	lr, r3
 8016208:	d938      	bls.n	801627c <uxr_read_framed_msg+0x140>
 801620a:	ee07 8a90 	vmov	s15, r8
 801620e:	212a      	movs	r1, #42	@ 0x2a
 8016210:	e020      	b.n	8016254 <uxr_read_framed_msg+0x118>
 8016212:	f89b c002 	ldrb.w	ip, [fp, #2]
 8016216:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801621a:	f000 80d4 	beq.w	80163c6 <uxr_read_framed_msg+0x28a>
 801621e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8016222:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016226:	f000 8219 	beq.w	801665c <uxr_read_framed_msg+0x520>
 801622a:	f806 c003 	strb.w	ip, [r6, r3]
 801622e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8016232:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016234:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8016238:	ea8a 000c 	eor.w	r0, sl, ip
 801623c:	b2c0      	uxtb	r0, r0
 801623e:	3301      	adds	r3, #1
 8016240:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8016244:	b29b      	uxth	r3, r3
 8016246:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801624a:	4573      	cmp	r3, lr
 801624c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801624e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8016250:	f080 8120 	bcs.w	8016494 <uxr_read_framed_msg+0x358>
 8016254:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8016258:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801625c:	f100 0c01 	add.w	ip, r0, #1
 8016260:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016264:	fba5 8202 	umull	r8, r2, r5, r2
 8016268:	0892      	lsrs	r2, r2, #2
 801626a:	4582      	cmp	sl, r0
 801626c:	eb04 0b00 	add.w	fp, r4, r0
 8016270:	fb01 c212 	mls	r2, r1, r2, ip
 8016274:	d1cd      	bne.n	8016212 <uxr_read_framed_msg+0xd6>
 8016276:	ee17 8a90 	vmov	r8, s15
 801627a:	459e      	cmp	lr, r3
 801627c:	f040 8111 	bne.w	80164a2 <uxr_read_framed_msg+0x366>
 8016280:	2306      	movs	r3, #6
 8016282:	7023      	strb	r3, [r4, #0]
 8016284:	e76b      	b.n	801615e <uxr_read_framed_msg+0x22>
 8016286:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801628a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801628e:	4298      	cmp	r0, r3
 8016290:	f000 80c2 	beq.w	8016418 <uxr_read_framed_msg+0x2dc>
 8016294:	18e2      	adds	r2, r4, r3
 8016296:	7891      	ldrb	r1, [r2, #2]
 8016298:	297d      	cmp	r1, #125	@ 0x7d
 801629a:	f000 814c 	beq.w	8016536 <uxr_read_framed_msg+0x3fa>
 801629e:	3301      	adds	r3, #1
 80162a0:	085a      	lsrs	r2, r3, #1
 80162a2:	fba5 0202 	umull	r0, r2, r5, r2
 80162a6:	0892      	lsrs	r2, r2, #2
 80162a8:	202a      	movs	r0, #42	@ 0x2a
 80162aa:	fb00 3312 	mls	r3, r0, r2, r3
 80162ae:	297e      	cmp	r1, #126	@ 0x7e
 80162b0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80162b4:	f000 81ca 	beq.w	801664c <uxr_read_framed_msg+0x510>
 80162b8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80162ba:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80162be:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80162c0:	b29b      	uxth	r3, r3
 80162c2:	2000      	movs	r0, #0
 80162c4:	428b      	cmp	r3, r1
 80162c6:	8623      	strh	r3, [r4, #48]	@ 0x30
 80162c8:	8660      	strh	r0, [r4, #50]	@ 0x32
 80162ca:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80162cc:	f240 80df 	bls.w	801648e <uxr_read_framed_msg+0x352>
 80162d0:	7020      	strb	r0, [r4, #0]
 80162d2:	b003      	add	sp, #12
 80162d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162d8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80162dc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80162e0:	4299      	cmp	r1, r3
 80162e2:	f000 80a8 	beq.w	8016436 <uxr_read_framed_msg+0x2fa>
 80162e6:	18e2      	adds	r2, r4, r3
 80162e8:	7890      	ldrb	r0, [r2, #2]
 80162ea:	287d      	cmp	r0, #125	@ 0x7d
 80162ec:	f000 8164 	beq.w	80165b8 <uxr_read_framed_msg+0x47c>
 80162f0:	3301      	adds	r3, #1
 80162f2:	085a      	lsrs	r2, r3, #1
 80162f4:	fba5 1202 	umull	r1, r2, r5, r2
 80162f8:	0892      	lsrs	r2, r2, #2
 80162fa:	212a      	movs	r1, #42	@ 0x2a
 80162fc:	fb01 3312 	mls	r3, r1, r2, r3
 8016300:	287e      	cmp	r0, #126	@ 0x7e
 8016302:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016306:	f000 8191 	beq.w	801662c <uxr_read_framed_msg+0x4f0>
 801630a:	2304      	movs	r3, #4
 801630c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801630e:	7023      	strb	r3, [r4, #0]
 8016310:	e725      	b.n	801615e <uxr_read_framed_msg+0x22>
 8016312:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016316:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801631a:	4290      	cmp	r0, r2
 801631c:	f000 80b3 	beq.w	8016486 <uxr_read_framed_msg+0x34a>
 8016320:	18a3      	adds	r3, r4, r2
 8016322:	7899      	ldrb	r1, [r3, #2]
 8016324:	297d      	cmp	r1, #125	@ 0x7d
 8016326:	f000 8164 	beq.w	80165f2 <uxr_read_framed_msg+0x4b6>
 801632a:	3201      	adds	r2, #1
 801632c:	0850      	lsrs	r0, r2, #1
 801632e:	fba5 3000 	umull	r3, r0, r5, r0
 8016332:	0880      	lsrs	r0, r0, #2
 8016334:	232a      	movs	r3, #42	@ 0x2a
 8016336:	fb03 2210 	mls	r2, r3, r0, r2
 801633a:	297e      	cmp	r1, #126	@ 0x7e
 801633c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016340:	f000 8188 	beq.w	8016654 <uxr_read_framed_msg+0x518>
 8016344:	7863      	ldrb	r3, [r4, #1]
 8016346:	428b      	cmp	r3, r1
 8016348:	bf0c      	ite	eq
 801634a:	2303      	moveq	r3, #3
 801634c:	2300      	movne	r3, #0
 801634e:	7023      	strb	r3, [r4, #0]
 8016350:	e705      	b.n	801615e <uxr_read_framed_msg+0x22>
 8016352:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016356:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801635a:	2200      	movs	r2, #0
 801635c:	4299      	cmp	r1, r3
 801635e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8016362:	d06c      	beq.n	801643e <uxr_read_framed_msg+0x302>
 8016364:	18e2      	adds	r2, r4, r3
 8016366:	7890      	ldrb	r0, [r2, #2]
 8016368:	287d      	cmp	r0, #125	@ 0x7d
 801636a:	f000 8101 	beq.w	8016570 <uxr_read_framed_msg+0x434>
 801636e:	3301      	adds	r3, #1
 8016370:	085a      	lsrs	r2, r3, #1
 8016372:	fba5 1202 	umull	r1, r2, r5, r2
 8016376:	0892      	lsrs	r2, r2, #2
 8016378:	212a      	movs	r1, #42	@ 0x2a
 801637a:	fb01 3312 	mls	r3, r1, r2, r3
 801637e:	287e      	cmp	r0, #126	@ 0x7e
 8016380:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016384:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016388:	d059      	beq.n	801643e <uxr_read_framed_msg+0x302>
 801638a:	2302      	movs	r3, #2
 801638c:	7023      	strb	r3, [r4, #0]
 801638e:	e6e6      	b.n	801615e <uxr_read_framed_msg+0x22>
 8016390:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8016394:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016398:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801639c:	1c51      	adds	r1, r2, #1
 801639e:	084b      	lsrs	r3, r1, #1
 80163a0:	fba5 c303 	umull	ip, r3, r5, r3
 80163a4:	089b      	lsrs	r3, r3, #2
 80163a6:	fb0e 1313 	mls	r3, lr, r3, r1
 80163aa:	4592      	cmp	sl, r2
 80163ac:	eb04 0002 	add.w	r0, r4, r2
 80163b0:	b2da      	uxtb	r2, r3
 80163b2:	f43f af04 	beq.w	80161be <uxr_read_framed_msg+0x82>
 80163b6:	7883      	ldrb	r3, [r0, #2]
 80163b8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80163bc:	2b7e      	cmp	r3, #126	@ 0x7e
 80163be:	d1ed      	bne.n	801639c <uxr_read_framed_msg+0x260>
 80163c0:	2301      	movs	r3, #1
 80163c2:	7023      	strb	r3, [r4, #0]
 80163c4:	e6cb      	b.n	801615e <uxr_read_framed_msg+0x22>
 80163c6:	f100 0c01 	add.w	ip, r0, #1
 80163ca:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80163ce:	fba5 8202 	umull	r8, r2, r5, r2
 80163d2:	0892      	lsrs	r2, r2, #2
 80163d4:	fb01 c212 	mls	r2, r1, r2, ip
 80163d8:	eb04 0c02 	add.w	ip, r4, r2
 80163dc:	b2d2      	uxtb	r2, r2
 80163de:	4592      	cmp	sl, r2
 80163e0:	f100 0002 	add.w	r0, r0, #2
 80163e4:	f43f af47 	beq.w	8016276 <uxr_read_framed_msg+0x13a>
 80163e8:	0842      	lsrs	r2, r0, #1
 80163ea:	f89c a002 	ldrb.w	sl, [ip, #2]
 80163ee:	fba5 8202 	umull	r8, r2, r5, r2
 80163f2:	0892      	lsrs	r2, r2, #2
 80163f4:	fb01 0012 	mls	r0, r1, r2, r0
 80163f8:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 80163fc:	f08a 0c20 	eor.w	ip, sl, #32
 8016400:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8016404:	f47f af11 	bne.w	801622a <uxr_read_framed_msg+0xee>
 8016408:	459e      	cmp	lr, r3
 801640a:	ee17 8a90 	vmov	r8, s15
 801640e:	f43f af37 	beq.w	8016280 <uxr_read_framed_msg+0x144>
 8016412:	2301      	movs	r3, #1
 8016414:	7023      	strb	r3, [r4, #0]
 8016416:	e6a2      	b.n	801615e <uxr_read_framed_msg+0x22>
 8016418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801641a:	9300      	str	r3, [sp, #0]
 801641c:	2301      	movs	r3, #1
 801641e:	9301      	str	r3, [sp, #4]
 8016420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016422:	464a      	mov	r2, r9
 8016424:	4641      	mov	r1, r8
 8016426:	4620      	mov	r0, r4
 8016428:	f7ff fe06 	bl	8016038 <uxr_framing_read_transport>
 801642c:	2800      	cmp	r0, #0
 801642e:	f43f aec6 	beq.w	80161be <uxr_read_framed_msg+0x82>
 8016432:	7823      	ldrb	r3, [r4, #0]
 8016434:	e693      	b.n	801615e <uxr_read_framed_msg+0x22>
 8016436:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016438:	9300      	str	r3, [sp, #0]
 801643a:	2302      	movs	r3, #2
 801643c:	e7ef      	b.n	801641e <uxr_read_framed_msg+0x2e2>
 801643e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016440:	9300      	str	r3, [sp, #0]
 8016442:	2304      	movs	r3, #4
 8016444:	9301      	str	r3, [sp, #4]
 8016446:	464a      	mov	r2, r9
 8016448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801644a:	4641      	mov	r1, r8
 801644c:	4620      	mov	r0, r4
 801644e:	f7ff fdf3 	bl	8016038 <uxr_framing_read_transport>
 8016452:	2800      	cmp	r0, #0
 8016454:	d1ed      	bne.n	8016432 <uxr_read_framed_msg+0x2f6>
 8016456:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801645a:	2b7e      	cmp	r3, #126	@ 0x7e
 801645c:	d0e9      	beq.n	8016432 <uxr_read_framed_msg+0x2f6>
 801645e:	e6ae      	b.n	80161be <uxr_read_framed_msg+0x82>
 8016460:	30c30c31 	.word	0x30c30c31
 8016464:	080191b0 	.word	0x080191b0
 8016468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801646a:	9300      	str	r3, [sp, #0]
 801646c:	2305      	movs	r3, #5
 801646e:	9301      	str	r3, [sp, #4]
 8016470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016472:	f7ff fde1 	bl	8016038 <uxr_framing_read_transport>
 8016476:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801647a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801647e:	429a      	cmp	r2, r3
 8016480:	f43f ae9d 	beq.w	80161be <uxr_read_framed_msg+0x82>
 8016484:	e668      	b.n	8016158 <uxr_read_framed_msg+0x1c>
 8016486:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016488:	9300      	str	r3, [sp, #0]
 801648a:	2303      	movs	r3, #3
 801648c:	e7c7      	b.n	801641e <uxr_read_framed_msg+0x2e2>
 801648e:	2305      	movs	r3, #5
 8016490:	7023      	strb	r3, [r4, #0]
 8016492:	e664      	b.n	801615e <uxr_read_framed_msg+0x22>
 8016494:	ee17 8a90 	vmov	r8, s15
 8016498:	f43f aef2 	beq.w	8016280 <uxr_read_framed_msg+0x144>
 801649c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80164a0:	d08e      	beq.n	80163c0 <uxr_read_framed_msg+0x284>
 80164a2:	ebae 0303 	sub.w	r3, lr, r3
 80164a6:	3302      	adds	r3, #2
 80164a8:	9301      	str	r3, [sp, #4]
 80164aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80164ac:	9300      	str	r3, [sp, #0]
 80164ae:	e7b7      	b.n	8016420 <uxr_read_framed_msg+0x2e4>
 80164b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80164b2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80164b6:	7013      	strb	r3, [r2, #0]
 80164b8:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80164ba:	b003      	add	sp, #12
 80164bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164c0:	f103 0c01 	add.w	ip, r3, #1
 80164c4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80164c8:	fba5 0202 	umull	r0, r2, r5, r2
 80164cc:	0892      	lsrs	r2, r2, #2
 80164ce:	202a      	movs	r0, #42	@ 0x2a
 80164d0:	fb00 c212 	mls	r2, r0, r2, ip
 80164d4:	fa5f fc82 	uxtb.w	ip, r2
 80164d8:	4561      	cmp	r1, ip
 80164da:	d09d      	beq.n	8016418 <uxr_read_framed_msg+0x2dc>
 80164dc:	3302      	adds	r3, #2
 80164de:	4422      	add	r2, r4
 80164e0:	0859      	lsrs	r1, r3, #1
 80164e2:	7892      	ldrb	r2, [r2, #2]
 80164e4:	fba5 c101 	umull	ip, r1, r5, r1
 80164e8:	0889      	lsrs	r1, r1, #2
 80164ea:	fb00 3311 	mls	r3, r0, r1, r3
 80164ee:	2a7e      	cmp	r2, #126	@ 0x7e
 80164f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80164f4:	f000 80aa 	beq.w	801664c <uxr_read_framed_msg+0x510>
 80164f8:	f082 0220 	eor.w	r2, r2, #32
 80164fc:	e654      	b.n	80161a8 <uxr_read_framed_msg+0x6c>
 80164fe:	1c58      	adds	r0, r3, #1
 8016500:	0842      	lsrs	r2, r0, #1
 8016502:	fba5 c202 	umull	ip, r2, r5, r2
 8016506:	0892      	lsrs	r2, r2, #2
 8016508:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801650c:	fb0c 0212 	mls	r2, ip, r2, r0
 8016510:	b2d0      	uxtb	r0, r2
 8016512:	4281      	cmp	r1, r0
 8016514:	d08f      	beq.n	8016436 <uxr_read_framed_msg+0x2fa>
 8016516:	4422      	add	r2, r4
 8016518:	3302      	adds	r3, #2
 801651a:	7890      	ldrb	r0, [r2, #2]
 801651c:	085a      	lsrs	r2, r3, #1
 801651e:	fba5 1202 	umull	r1, r2, r5, r2
 8016522:	0892      	lsrs	r2, r2, #2
 8016524:	fb0c 3312 	mls	r3, ip, r2, r3
 8016528:	287e      	cmp	r0, #126	@ 0x7e
 801652a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801652e:	d07d      	beq.n	801662c <uxr_read_framed_msg+0x4f0>
 8016530:	f080 0020 	eor.w	r0, r0, #32
 8016534:	e660      	b.n	80161f8 <uxr_read_framed_msg+0xbc>
 8016536:	1c59      	adds	r1, r3, #1
 8016538:	084a      	lsrs	r2, r1, #1
 801653a:	fba5 c202 	umull	ip, r2, r5, r2
 801653e:	0892      	lsrs	r2, r2, #2
 8016540:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016544:	fb0c 1212 	mls	r2, ip, r2, r1
 8016548:	b2d1      	uxtb	r1, r2
 801654a:	4288      	cmp	r0, r1
 801654c:	f43f af64 	beq.w	8016418 <uxr_read_framed_msg+0x2dc>
 8016550:	4422      	add	r2, r4
 8016552:	3302      	adds	r3, #2
 8016554:	7891      	ldrb	r1, [r2, #2]
 8016556:	085a      	lsrs	r2, r3, #1
 8016558:	fba5 0202 	umull	r0, r2, r5, r2
 801655c:	0892      	lsrs	r2, r2, #2
 801655e:	fb0c 3312 	mls	r3, ip, r2, r3
 8016562:	297e      	cmp	r1, #126	@ 0x7e
 8016564:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016568:	d070      	beq.n	801664c <uxr_read_framed_msg+0x510>
 801656a:	f081 0120 	eor.w	r1, r1, #32
 801656e:	e6a3      	b.n	80162b8 <uxr_read_framed_msg+0x17c>
 8016570:	f103 0c01 	add.w	ip, r3, #1
 8016574:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016578:	fba5 0202 	umull	r0, r2, r5, r2
 801657c:	0892      	lsrs	r2, r2, #2
 801657e:	202a      	movs	r0, #42	@ 0x2a
 8016580:	fb00 c212 	mls	r2, r0, r2, ip
 8016584:	fa5f fc82 	uxtb.w	ip, r2
 8016588:	4561      	cmp	r1, ip
 801658a:	f43f af58 	beq.w	801643e <uxr_read_framed_msg+0x302>
 801658e:	4422      	add	r2, r4
 8016590:	3302      	adds	r3, #2
 8016592:	7891      	ldrb	r1, [r2, #2]
 8016594:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8016598:	085a      	lsrs	r2, r3, #1
 801659a:	fba5 c202 	umull	ip, r2, r5, r2
 801659e:	0892      	lsrs	r2, r2, #2
 80165a0:	fb00 3312 	mls	r3, r0, r2, r3
 80165a4:	297e      	cmp	r1, #126	@ 0x7e
 80165a6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80165aa:	f43f af48 	beq.w	801643e <uxr_read_framed_msg+0x302>
 80165ae:	f081 0120 	eor.w	r1, r1, #32
 80165b2:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80165b6:	e6e8      	b.n	801638a <uxr_read_framed_msg+0x24e>
 80165b8:	1c58      	adds	r0, r3, #1
 80165ba:	0842      	lsrs	r2, r0, #1
 80165bc:	fba5 c202 	umull	ip, r2, r5, r2
 80165c0:	0892      	lsrs	r2, r2, #2
 80165c2:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80165c6:	fb0c 0212 	mls	r2, ip, r2, r0
 80165ca:	b2d0      	uxtb	r0, r2
 80165cc:	4281      	cmp	r1, r0
 80165ce:	f43f af32 	beq.w	8016436 <uxr_read_framed_msg+0x2fa>
 80165d2:	4422      	add	r2, r4
 80165d4:	3302      	adds	r3, #2
 80165d6:	7890      	ldrb	r0, [r2, #2]
 80165d8:	085a      	lsrs	r2, r3, #1
 80165da:	fba5 1202 	umull	r1, r2, r5, r2
 80165de:	0892      	lsrs	r2, r2, #2
 80165e0:	fb0c 3312 	mls	r3, ip, r2, r3
 80165e4:	287e      	cmp	r0, #126	@ 0x7e
 80165e6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80165ea:	d01f      	beq.n	801662c <uxr_read_framed_msg+0x4f0>
 80165ec:	f080 0020 	eor.w	r0, r0, #32
 80165f0:	e68b      	b.n	801630a <uxr_read_framed_msg+0x1ce>
 80165f2:	1c51      	adds	r1, r2, #1
 80165f4:	084b      	lsrs	r3, r1, #1
 80165f6:	fba5 c303 	umull	ip, r3, r5, r3
 80165fa:	089b      	lsrs	r3, r3, #2
 80165fc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016600:	fb0c 1313 	mls	r3, ip, r3, r1
 8016604:	b2d9      	uxtb	r1, r3
 8016606:	4288      	cmp	r0, r1
 8016608:	f43f af3d 	beq.w	8016486 <uxr_read_framed_msg+0x34a>
 801660c:	3202      	adds	r2, #2
 801660e:	4423      	add	r3, r4
 8016610:	0850      	lsrs	r0, r2, #1
 8016612:	789b      	ldrb	r3, [r3, #2]
 8016614:	fba5 1000 	umull	r1, r0, r5, r0
 8016618:	0880      	lsrs	r0, r0, #2
 801661a:	fb0c 2210 	mls	r2, ip, r0, r2
 801661e:	2b7e      	cmp	r3, #126	@ 0x7e
 8016620:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016624:	d016      	beq.n	8016654 <uxr_read_framed_msg+0x518>
 8016626:	f083 0120 	eor.w	r1, r3, #32
 801662a:	e68b      	b.n	8016344 <uxr_read_framed_msg+0x208>
 801662c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801662e:	9300      	str	r3, [sp, #0]
 8016630:	2302      	movs	r3, #2
 8016632:	9301      	str	r3, [sp, #4]
 8016634:	464a      	mov	r2, r9
 8016636:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016638:	4641      	mov	r1, r8
 801663a:	4620      	mov	r0, r4
 801663c:	f7ff fcfc 	bl	8016038 <uxr_framing_read_transport>
 8016640:	2800      	cmp	r0, #0
 8016642:	f47f aef6 	bne.w	8016432 <uxr_read_framed_msg+0x2f6>
 8016646:	2301      	movs	r3, #1
 8016648:	7023      	strb	r3, [r4, #0]
 801664a:	e588      	b.n	801615e <uxr_read_framed_msg+0x22>
 801664c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801664e:	9300      	str	r3, [sp, #0]
 8016650:	2301      	movs	r3, #1
 8016652:	e7ee      	b.n	8016632 <uxr_read_framed_msg+0x4f6>
 8016654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016656:	9300      	str	r3, [sp, #0]
 8016658:	2303      	movs	r3, #3
 801665a:	e7ea      	b.n	8016632 <uxr_read_framed_msg+0x4f6>
 801665c:	ee17 8a90 	vmov	r8, s15
 8016660:	e6ae      	b.n	80163c0 <uxr_read_framed_msg+0x284>
 8016662:	bf00      	nop

08016664 <rcl_get_default_domain_id>:
 8016664:	b530      	push	{r4, r5, lr}
 8016666:	b083      	sub	sp, #12
 8016668:	2300      	movs	r3, #0
 801666a:	9300      	str	r3, [sp, #0]
 801666c:	b1d0      	cbz	r0, 80166a4 <rcl_get_default_domain_id+0x40>
 801666e:	4604      	mov	r4, r0
 8016670:	4669      	mov	r1, sp
 8016672:	4815      	ldr	r0, [pc, #84]	@ (80166c8 <rcl_get_default_domain_id+0x64>)
 8016674:	f7fc fc60 	bl	8012f38 <rcutils_get_env>
 8016678:	4602      	mov	r2, r0
 801667a:	b110      	cbz	r0, 8016682 <rcl_get_default_domain_id+0x1e>
 801667c:	2001      	movs	r0, #1
 801667e:	b003      	add	sp, #12
 8016680:	bd30      	pop	{r4, r5, pc}
 8016682:	9b00      	ldr	r3, [sp, #0]
 8016684:	b18b      	cbz	r3, 80166aa <rcl_get_default_domain_id+0x46>
 8016686:	7818      	ldrb	r0, [r3, #0]
 8016688:	2800      	cmp	r0, #0
 801668a:	d0f8      	beq.n	801667e <rcl_get_default_domain_id+0x1a>
 801668c:	a901      	add	r1, sp, #4
 801668e:	4618      	mov	r0, r3
 8016690:	9201      	str	r2, [sp, #4]
 8016692:	f000 fe6d 	bl	8017370 <strtoul>
 8016696:	4605      	mov	r5, r0
 8016698:	b150      	cbz	r0, 80166b0 <rcl_get_default_domain_id+0x4c>
 801669a:	1c43      	adds	r3, r0, #1
 801669c:	d00d      	beq.n	80166ba <rcl_get_default_domain_id+0x56>
 801669e:	6025      	str	r5, [r4, #0]
 80166a0:	2000      	movs	r0, #0
 80166a2:	e7ec      	b.n	801667e <rcl_get_default_domain_id+0x1a>
 80166a4:	200b      	movs	r0, #11
 80166a6:	b003      	add	sp, #12
 80166a8:	bd30      	pop	{r4, r5, pc}
 80166aa:	4618      	mov	r0, r3
 80166ac:	b003      	add	sp, #12
 80166ae:	bd30      	pop	{r4, r5, pc}
 80166b0:	9b01      	ldr	r3, [sp, #4]
 80166b2:	781b      	ldrb	r3, [r3, #0]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d0f2      	beq.n	801669e <rcl_get_default_domain_id+0x3a>
 80166b8:	e7e0      	b.n	801667c <rcl_get_default_domain_id+0x18>
 80166ba:	f001 f8a5 	bl	8017808 <__errno>
 80166be:	6803      	ldr	r3, [r0, #0]
 80166c0:	2b22      	cmp	r3, #34	@ 0x22
 80166c2:	d1ec      	bne.n	801669e <rcl_get_default_domain_id+0x3a>
 80166c4:	e7da      	b.n	801667c <rcl_get_default_domain_id+0x18>
 80166c6:	bf00      	nop
 80166c8:	080193b0 	.word	0x080193b0

080166cc <rcl_expand_topic_name>:
 80166cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166d0:	b08b      	sub	sp, #44	@ 0x2c
 80166d2:	9306      	str	r3, [sp, #24]
 80166d4:	2800      	cmp	r0, #0
 80166d6:	f000 80ad 	beq.w	8016834 <rcl_expand_topic_name+0x168>
 80166da:	460e      	mov	r6, r1
 80166dc:	2900      	cmp	r1, #0
 80166de:	f000 80a9 	beq.w	8016834 <rcl_expand_topic_name+0x168>
 80166e2:	4617      	mov	r7, r2
 80166e4:	2a00      	cmp	r2, #0
 80166e6:	f000 80a5 	beq.w	8016834 <rcl_expand_topic_name+0x168>
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	f000 80a2 	beq.w	8016834 <rcl_expand_topic_name+0x168>
 80166f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	f000 809e 	beq.w	8016834 <rcl_expand_topic_name+0x168>
 80166f8:	2200      	movs	r2, #0
 80166fa:	a909      	add	r1, sp, #36	@ 0x24
 80166fc:	4680      	mov	r8, r0
 80166fe:	f000 f9fb 	bl	8016af8 <rcl_validate_topic_name>
 8016702:	4604      	mov	r4, r0
 8016704:	2800      	cmp	r0, #0
 8016706:	f040 8096 	bne.w	8016836 <rcl_expand_topic_name+0x16a>
 801670a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801670c:	2b00      	cmp	r3, #0
 801670e:	f040 809a 	bne.w	8016846 <rcl_expand_topic_name+0x17a>
 8016712:	4602      	mov	r2, r0
 8016714:	a909      	add	r1, sp, #36	@ 0x24
 8016716:	4630      	mov	r0, r6
 8016718:	f7fd f86c 	bl	80137f4 <rmw_validate_node_name>
 801671c:	2800      	cmp	r0, #0
 801671e:	f040 808e 	bne.w	801683e <rcl_expand_topic_name+0x172>
 8016722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016724:	2a00      	cmp	r2, #0
 8016726:	f040 8093 	bne.w	8016850 <rcl_expand_topic_name+0x184>
 801672a:	a909      	add	r1, sp, #36	@ 0x24
 801672c:	4638      	mov	r0, r7
 801672e:	f7fd f843 	bl	80137b8 <rmw_validate_namespace>
 8016732:	2800      	cmp	r0, #0
 8016734:	f040 8083 	bne.w	801683e <rcl_expand_topic_name+0x172>
 8016738:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801673a:	2c00      	cmp	r4, #0
 801673c:	f040 80ed 	bne.w	801691a <rcl_expand_topic_name+0x24e>
 8016740:	217b      	movs	r1, #123	@ 0x7b
 8016742:	4640      	mov	r0, r8
 8016744:	f000 ffd4 	bl	80176f0 <strchr>
 8016748:	f898 3000 	ldrb.w	r3, [r8]
 801674c:	2b2f      	cmp	r3, #47	@ 0x2f
 801674e:	4605      	mov	r5, r0
 8016750:	f000 809e 	beq.w	8016890 <rcl_expand_topic_name+0x1c4>
 8016754:	2b7e      	cmp	r3, #126	@ 0x7e
 8016756:	f040 80a2 	bne.w	801689e <rcl_expand_topic_name+0x1d2>
 801675a:	4638      	mov	r0, r7
 801675c:	f7e9 fd4a 	bl	80001f4 <strlen>
 8016760:	4a82      	ldr	r2, [pc, #520]	@ (801696c <rcl_expand_topic_name+0x2a0>)
 8016762:	4b83      	ldr	r3, [pc, #524]	@ (8016970 <rcl_expand_topic_name+0x2a4>)
 8016764:	2801      	cmp	r0, #1
 8016766:	bf18      	it	ne
 8016768:	4613      	movne	r3, r2
 801676a:	9302      	str	r3, [sp, #8]
 801676c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801676e:	9300      	str	r3, [sp, #0]
 8016770:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016774:	f108 0301 	add.w	r3, r8, #1
 8016778:	9305      	str	r3, [sp, #20]
 801677a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801677e:	9301      	str	r3, [sp, #4]
 8016780:	ab14      	add	r3, sp, #80	@ 0x50
 8016782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016784:	f7fc fc00 	bl	8012f88 <rcutils_format_string_limit>
 8016788:	4682      	mov	sl, r0
 801678a:	2800      	cmp	r0, #0
 801678c:	f000 80c7 	beq.w	801691e <rcl_expand_topic_name+0x252>
 8016790:	2d00      	cmp	r5, #0
 8016792:	f000 80a2 	beq.w	80168da <rcl_expand_topic_name+0x20e>
 8016796:	217b      	movs	r1, #123	@ 0x7b
 8016798:	f000 ffaa 	bl	80176f0 <strchr>
 801679c:	46d1      	mov	r9, sl
 801679e:	4605      	mov	r5, r0
 80167a0:	9407      	str	r4, [sp, #28]
 80167a2:	46d3      	mov	fp, sl
 80167a4:	464c      	mov	r4, r9
 80167a6:	2d00      	cmp	r5, #0
 80167a8:	f000 80be 	beq.w	8016928 <rcl_expand_topic_name+0x25c>
 80167ac:	217d      	movs	r1, #125	@ 0x7d
 80167ae:	4620      	mov	r0, r4
 80167b0:	f000 ff9e 	bl	80176f0 <strchr>
 80167b4:	eba0 0905 	sub.w	r9, r0, r5
 80167b8:	f109 0a01 	add.w	sl, r9, #1
 80167bc:	486d      	ldr	r0, [pc, #436]	@ (8016974 <rcl_expand_topic_name+0x2a8>)
 80167be:	4652      	mov	r2, sl
 80167c0:	4629      	mov	r1, r5
 80167c2:	f000 ffa2 	bl	801770a <strncmp>
 80167c6:	2800      	cmp	r0, #0
 80167c8:	d067      	beq.n	801689a <rcl_expand_topic_name+0x1ce>
 80167ca:	486b      	ldr	r0, [pc, #428]	@ (8016978 <rcl_expand_topic_name+0x2ac>)
 80167cc:	4652      	mov	r2, sl
 80167ce:	4629      	mov	r1, r5
 80167d0:	f000 ff9b 	bl	801770a <strncmp>
 80167d4:	b130      	cbz	r0, 80167e4 <rcl_expand_topic_name+0x118>
 80167d6:	4869      	ldr	r0, [pc, #420]	@ (801697c <rcl_expand_topic_name+0x2b0>)
 80167d8:	4652      	mov	r2, sl
 80167da:	4629      	mov	r1, r5
 80167dc:	f000 ff95 	bl	801770a <strncmp>
 80167e0:	2800      	cmp	r0, #0
 80167e2:	d137      	bne.n	8016854 <rcl_expand_topic_name+0x188>
 80167e4:	46b9      	mov	r9, r7
 80167e6:	ab16      	add	r3, sp, #88	@ 0x58
 80167e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80167ec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80167f0:	ab14      	add	r3, sp, #80	@ 0x50
 80167f2:	4628      	mov	r0, r5
 80167f4:	cb0c      	ldmia	r3, {r2, r3}
 80167f6:	4651      	mov	r1, sl
 80167f8:	f7fc fd02 	bl	8013200 <rcutils_strndup>
 80167fc:	4605      	mov	r5, r0
 80167fe:	2800      	cmp	r0, #0
 8016800:	f000 809c 	beq.w	801693c <rcl_expand_topic_name+0x270>
 8016804:	464a      	mov	r2, r9
 8016806:	4620      	mov	r0, r4
 8016808:	ab14      	add	r3, sp, #80	@ 0x50
 801680a:	4629      	mov	r1, r5
 801680c:	f7fc fbf6 	bl	8012ffc <rcutils_repl_str>
 8016810:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016812:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016814:	4604      	mov	r4, r0
 8016816:	4628      	mov	r0, r5
 8016818:	4798      	blx	r3
 801681a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801681c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801681e:	4658      	mov	r0, fp
 8016820:	4798      	blx	r3
 8016822:	2c00      	cmp	r4, #0
 8016824:	d07b      	beq.n	801691e <rcl_expand_topic_name+0x252>
 8016826:	217b      	movs	r1, #123	@ 0x7b
 8016828:	4620      	mov	r0, r4
 801682a:	f000 ff61 	bl	80176f0 <strchr>
 801682e:	46a3      	mov	fp, r4
 8016830:	4605      	mov	r5, r0
 8016832:	e7b8      	b.n	80167a6 <rcl_expand_topic_name+0xda>
 8016834:	240b      	movs	r4, #11
 8016836:	4620      	mov	r0, r4
 8016838:	b00b      	add	sp, #44	@ 0x2c
 801683a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801683e:	f7f9 fdd9 	bl	80103f4 <rcl_convert_rmw_ret_to_rcl_ret>
 8016842:	4604      	mov	r4, r0
 8016844:	e7f7      	b.n	8016836 <rcl_expand_topic_name+0x16a>
 8016846:	2467      	movs	r4, #103	@ 0x67
 8016848:	4620      	mov	r0, r4
 801684a:	b00b      	add	sp, #44	@ 0x2c
 801684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016850:	24c9      	movs	r4, #201	@ 0xc9
 8016852:	e7f0      	b.n	8016836 <rcl_expand_topic_name+0x16a>
 8016854:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016858:	9806      	ldr	r0, [sp, #24]
 801685a:	1c69      	adds	r1, r5, #1
 801685c:	f7fc fdea 	bl	8013434 <rcutils_string_map_getn>
 8016860:	4681      	mov	r9, r0
 8016862:	2800      	cmp	r0, #0
 8016864:	d1bf      	bne.n	80167e6 <rcl_expand_topic_name+0x11a>
 8016866:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016868:	aa16      	add	r2, sp, #88	@ 0x58
 801686a:	6018      	str	r0, [r3, #0]
 801686c:	ca07      	ldmia	r2, {r0, r1, r2}
 801686e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016872:	ab14      	add	r3, sp, #80	@ 0x50
 8016874:	cb0c      	ldmia	r3, {r2, r3}
 8016876:	4651      	mov	r1, sl
 8016878:	4628      	mov	r0, r5
 801687a:	f7fc fcc1 	bl	8013200 <rcutils_strndup>
 801687e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016880:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016882:	4798      	blx	r3
 8016884:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016886:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016888:	4658      	mov	r0, fp
 801688a:	2469      	movs	r4, #105	@ 0x69
 801688c:	4798      	blx	r3
 801688e:	e7d2      	b.n	8016836 <rcl_expand_topic_name+0x16a>
 8016890:	2800      	cmp	r0, #0
 8016892:	d05b      	beq.n	801694c <rcl_expand_topic_name+0x280>
 8016894:	46c1      	mov	r9, r8
 8016896:	46a2      	mov	sl, r4
 8016898:	e782      	b.n	80167a0 <rcl_expand_topic_name+0xd4>
 801689a:	46b1      	mov	r9, r6
 801689c:	e7a3      	b.n	80167e6 <rcl_expand_topic_name+0x11a>
 801689e:	2800      	cmp	r0, #0
 80168a0:	d1f8      	bne.n	8016894 <rcl_expand_topic_name+0x1c8>
 80168a2:	4638      	mov	r0, r7
 80168a4:	f7e9 fca6 	bl	80001f4 <strlen>
 80168a8:	4a35      	ldr	r2, [pc, #212]	@ (8016980 <rcl_expand_topic_name+0x2b4>)
 80168aa:	4b36      	ldr	r3, [pc, #216]	@ (8016984 <rcl_expand_topic_name+0x2b8>)
 80168ac:	f8cd 8010 	str.w	r8, [sp, #16]
 80168b0:	2801      	cmp	r0, #1
 80168b2:	bf18      	it	ne
 80168b4:	4613      	movne	r3, r2
 80168b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80168ba:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80168be:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80168c0:	9703      	str	r7, [sp, #12]
 80168c2:	9200      	str	r2, [sp, #0]
 80168c4:	ab14      	add	r3, sp, #80	@ 0x50
 80168c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80168c8:	f7fc fb5e 	bl	8012f88 <rcutils_format_string_limit>
 80168cc:	4682      	mov	sl, r0
 80168ce:	4653      	mov	r3, sl
 80168d0:	b32b      	cbz	r3, 801691e <rcl_expand_topic_name+0x252>
 80168d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80168d4:	f8c3 a000 	str.w	sl, [r3]
 80168d8:	e7ad      	b.n	8016836 <rcl_expand_topic_name+0x16a>
 80168da:	f89a 3000 	ldrb.w	r3, [sl]
 80168de:	2b2f      	cmp	r3, #47	@ 0x2f
 80168e0:	d0f7      	beq.n	80168d2 <rcl_expand_topic_name+0x206>
 80168e2:	4638      	mov	r0, r7
 80168e4:	f7e9 fc86 	bl	80001f4 <strlen>
 80168e8:	4a25      	ldr	r2, [pc, #148]	@ (8016980 <rcl_expand_topic_name+0x2b4>)
 80168ea:	4b26      	ldr	r3, [pc, #152]	@ (8016984 <rcl_expand_topic_name+0x2b8>)
 80168ec:	f8cd a010 	str.w	sl, [sp, #16]
 80168f0:	2801      	cmp	r0, #1
 80168f2:	bf18      	it	ne
 80168f4:	4613      	movne	r3, r2
 80168f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80168fa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80168fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016900:	9703      	str	r7, [sp, #12]
 8016902:	9200      	str	r2, [sp, #0]
 8016904:	ab14      	add	r3, sp, #80	@ 0x50
 8016906:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016908:	f7fc fb3e 	bl	8012f88 <rcutils_format_string_limit>
 801690c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801690e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016910:	4605      	mov	r5, r0
 8016912:	4650      	mov	r0, sl
 8016914:	4798      	blx	r3
 8016916:	46aa      	mov	sl, r5
 8016918:	e7d9      	b.n	80168ce <rcl_expand_topic_name+0x202>
 801691a:	24ca      	movs	r4, #202	@ 0xca
 801691c:	e78b      	b.n	8016836 <rcl_expand_topic_name+0x16a>
 801691e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016920:	2300      	movs	r3, #0
 8016922:	6013      	str	r3, [r2, #0]
 8016924:	240a      	movs	r4, #10
 8016926:	e786      	b.n	8016836 <rcl_expand_topic_name+0x16a>
 8016928:	465b      	mov	r3, fp
 801692a:	9c07      	ldr	r4, [sp, #28]
 801692c:	46da      	mov	sl, fp
 801692e:	2b00      	cmp	r3, #0
 8016930:	d1d3      	bne.n	80168da <rcl_expand_topic_name+0x20e>
 8016932:	f898 3000 	ldrb.w	r3, [r8]
 8016936:	2b2f      	cmp	r3, #47	@ 0x2f
 8016938:	d0cb      	beq.n	80168d2 <rcl_expand_topic_name+0x206>
 801693a:	e7b2      	b.n	80168a2 <rcl_expand_topic_name+0x1d6>
 801693c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016940:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016942:	6015      	str	r5, [r2, #0]
 8016944:	4658      	mov	r0, fp
 8016946:	4798      	blx	r3
 8016948:	240a      	movs	r4, #10
 801694a:	e774      	b.n	8016836 <rcl_expand_topic_name+0x16a>
 801694c:	ab17      	add	r3, sp, #92	@ 0x5c
 801694e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016952:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016956:	ab14      	add	r3, sp, #80	@ 0x50
 8016958:	cb0e      	ldmia	r3, {r1, r2, r3}
 801695a:	4640      	mov	r0, r8
 801695c:	f7fc fc2e 	bl	80131bc <rcutils_strdup>
 8016960:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016962:	2800      	cmp	r0, #0
 8016964:	6018      	str	r0, [r3, #0]
 8016966:	bf08      	it	eq
 8016968:	240a      	moveq	r4, #10
 801696a:	e764      	b.n	8016836 <rcl_expand_topic_name+0x16a>
 801696c:	080193c0 	.word	0x080193c0
 8016970:	08018a94 	.word	0x08018a94
 8016974:	080193c8 	.word	0x080193c8
 8016978:	080193d0 	.word	0x080193d0
 801697c:	080193d8 	.word	0x080193d8
 8016980:	08018c1c 	.word	0x08018c1c
 8016984:	08018aa4 	.word	0x08018aa4

08016988 <rcl_get_default_topic_name_substitutions>:
 8016988:	2800      	cmp	r0, #0
 801698a:	bf0c      	ite	eq
 801698c:	200b      	moveq	r0, #11
 801698e:	2000      	movne	r0, #0
 8016990:	4770      	bx	lr
 8016992:	bf00      	nop

08016994 <rcl_get_zero_initialized_guard_condition>:
 8016994:	4a03      	ldr	r2, [pc, #12]	@ (80169a4 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016996:	4603      	mov	r3, r0
 8016998:	e892 0003 	ldmia.w	r2, {r0, r1}
 801699c:	e883 0003 	stmia.w	r3, {r0, r1}
 80169a0:	4618      	mov	r0, r3
 80169a2:	4770      	bx	lr
 80169a4:	080193e4 	.word	0x080193e4

080169a8 <rcl_guard_condition_init_from_rmw>:
 80169a8:	b082      	sub	sp, #8
 80169aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169ae:	b086      	sub	sp, #24
 80169b0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80169b4:	4604      	mov	r4, r0
 80169b6:	f84c 3f04 	str.w	r3, [ip, #4]!
 80169ba:	460e      	mov	r6, r1
 80169bc:	4617      	mov	r7, r2
 80169be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80169c2:	f10d 0e04 	add.w	lr, sp, #4
 80169c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80169ca:	f8dc 3000 	ldr.w	r3, [ip]
 80169ce:	f8ce 3000 	str.w	r3, [lr]
 80169d2:	a801      	add	r0, sp, #4
 80169d4:	f7f5 ff80 	bl	800c8d8 <rcutils_allocator_is_valid>
 80169d8:	b350      	cbz	r0, 8016a30 <rcl_guard_condition_init_from_rmw+0x88>
 80169da:	b34c      	cbz	r4, 8016a30 <rcl_guard_condition_init_from_rmw+0x88>
 80169dc:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80169e0:	f1b8 0f00 	cmp.w	r8, #0
 80169e4:	d11e      	bne.n	8016a24 <rcl_guard_condition_init_from_rmw+0x7c>
 80169e6:	b31f      	cbz	r7, 8016a30 <rcl_guard_condition_init_from_rmw+0x88>
 80169e8:	4638      	mov	r0, r7
 80169ea:	f7f9 fd21 	bl	8010430 <rcl_context_is_valid>
 80169ee:	b328      	cbz	r0, 8016a3c <rcl_guard_condition_init_from_rmw+0x94>
 80169f0:	9b01      	ldr	r3, [sp, #4]
 80169f2:	9905      	ldr	r1, [sp, #20]
 80169f4:	201c      	movs	r0, #28
 80169f6:	4798      	blx	r3
 80169f8:	4605      	mov	r5, r0
 80169fa:	6060      	str	r0, [r4, #4]
 80169fc:	b358      	cbz	r0, 8016a56 <rcl_guard_condition_init_from_rmw+0xae>
 80169fe:	b1fe      	cbz	r6, 8016a40 <rcl_guard_condition_init_from_rmw+0x98>
 8016a00:	6006      	str	r6, [r0, #0]
 8016a02:	f880 8004 	strb.w	r8, [r0, #4]
 8016a06:	ac01      	add	r4, sp, #4
 8016a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a0a:	f105 0c08 	add.w	ip, r5, #8
 8016a0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a12:	6823      	ldr	r3, [r4, #0]
 8016a14:	f8cc 3000 	str.w	r3, [ip]
 8016a18:	2000      	movs	r0, #0
 8016a1a:	b006      	add	sp, #24
 8016a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a20:	b002      	add	sp, #8
 8016a22:	4770      	bx	lr
 8016a24:	2064      	movs	r0, #100	@ 0x64
 8016a26:	b006      	add	sp, #24
 8016a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a2c:	b002      	add	sp, #8
 8016a2e:	4770      	bx	lr
 8016a30:	200b      	movs	r0, #11
 8016a32:	b006      	add	sp, #24
 8016a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a38:	b002      	add	sp, #8
 8016a3a:	4770      	bx	lr
 8016a3c:	2065      	movs	r0, #101	@ 0x65
 8016a3e:	e7f2      	b.n	8016a26 <rcl_guard_condition_init_from_rmw+0x7e>
 8016a40:	6838      	ldr	r0, [r7, #0]
 8016a42:	3028      	adds	r0, #40	@ 0x28
 8016a44:	f000 fa3a 	bl	8016ebc <rmw_create_guard_condition>
 8016a48:	6028      	str	r0, [r5, #0]
 8016a4a:	6865      	ldr	r5, [r4, #4]
 8016a4c:	682e      	ldr	r6, [r5, #0]
 8016a4e:	b126      	cbz	r6, 8016a5a <rcl_guard_condition_init_from_rmw+0xb2>
 8016a50:	2301      	movs	r3, #1
 8016a52:	712b      	strb	r3, [r5, #4]
 8016a54:	e7d7      	b.n	8016a06 <rcl_guard_condition_init_from_rmw+0x5e>
 8016a56:	200a      	movs	r0, #10
 8016a58:	e7e5      	b.n	8016a26 <rcl_guard_condition_init_from_rmw+0x7e>
 8016a5a:	4628      	mov	r0, r5
 8016a5c:	9b02      	ldr	r3, [sp, #8]
 8016a5e:	9905      	ldr	r1, [sp, #20]
 8016a60:	4798      	blx	r3
 8016a62:	6066      	str	r6, [r4, #4]
 8016a64:	2001      	movs	r0, #1
 8016a66:	e7de      	b.n	8016a26 <rcl_guard_condition_init_from_rmw+0x7e>

08016a68 <rcl_guard_condition_fini>:
 8016a68:	b570      	push	{r4, r5, r6, lr}
 8016a6a:	b082      	sub	sp, #8
 8016a6c:	b1f0      	cbz	r0, 8016aac <rcl_guard_condition_fini+0x44>
 8016a6e:	6843      	ldr	r3, [r0, #4]
 8016a70:	4604      	mov	r4, r0
 8016a72:	b163      	cbz	r3, 8016a8e <rcl_guard_condition_fini+0x26>
 8016a74:	6818      	ldr	r0, [r3, #0]
 8016a76:	68de      	ldr	r6, [r3, #12]
 8016a78:	6999      	ldr	r1, [r3, #24]
 8016a7a:	b160      	cbz	r0, 8016a96 <rcl_guard_condition_fini+0x2e>
 8016a7c:	791d      	ldrb	r5, [r3, #4]
 8016a7e:	b965      	cbnz	r5, 8016a9a <rcl_guard_condition_fini+0x32>
 8016a80:	4618      	mov	r0, r3
 8016a82:	47b0      	blx	r6
 8016a84:	2300      	movs	r3, #0
 8016a86:	4628      	mov	r0, r5
 8016a88:	6063      	str	r3, [r4, #4]
 8016a8a:	b002      	add	sp, #8
 8016a8c:	bd70      	pop	{r4, r5, r6, pc}
 8016a8e:	461d      	mov	r5, r3
 8016a90:	4628      	mov	r0, r5
 8016a92:	b002      	add	sp, #8
 8016a94:	bd70      	pop	{r4, r5, r6, pc}
 8016a96:	4605      	mov	r5, r0
 8016a98:	e7f2      	b.n	8016a80 <rcl_guard_condition_fini+0x18>
 8016a9a:	9101      	str	r1, [sp, #4]
 8016a9c:	f000 fa22 	bl	8016ee4 <rmw_destroy_guard_condition>
 8016aa0:	1e05      	subs	r5, r0, #0
 8016aa2:	6863      	ldr	r3, [r4, #4]
 8016aa4:	9901      	ldr	r1, [sp, #4]
 8016aa6:	bf18      	it	ne
 8016aa8:	2501      	movne	r5, #1
 8016aaa:	e7e9      	b.n	8016a80 <rcl_guard_condition_fini+0x18>
 8016aac:	250b      	movs	r5, #11
 8016aae:	4628      	mov	r0, r5
 8016ab0:	b002      	add	sp, #8
 8016ab2:	bd70      	pop	{r4, r5, r6, pc}

08016ab4 <rcl_guard_condition_get_default_options>:
 8016ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ab6:	b087      	sub	sp, #28
 8016ab8:	4606      	mov	r6, r0
 8016aba:	4668      	mov	r0, sp
 8016abc:	f7f5 fefe 	bl	800c8bc <rcutils_get_default_allocator>
 8016ac0:	4b09      	ldr	r3, [pc, #36]	@ (8016ae8 <rcl_guard_condition_get_default_options+0x34>)
 8016ac2:	46ee      	mov	lr, sp
 8016ac4:	469c      	mov	ip, r3
 8016ac6:	461d      	mov	r5, r3
 8016ac8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016acc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ad2:	4634      	mov	r4, r6
 8016ad4:	f8de 7000 	ldr.w	r7, [lr]
 8016ad8:	f8cc 7000 	str.w	r7, [ip]
 8016adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ade:	4630      	mov	r0, r6
 8016ae0:	6027      	str	r7, [r4, #0]
 8016ae2:	b007      	add	sp, #28
 8016ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ae6:	bf00      	nop
 8016ae8:	2000dddc 	.word	0x2000dddc

08016aec <rcl_guard_condition_get_rmw_handle>:
 8016aec:	b110      	cbz	r0, 8016af4 <rcl_guard_condition_get_rmw_handle+0x8>
 8016aee:	6840      	ldr	r0, [r0, #4]
 8016af0:	b100      	cbz	r0, 8016af4 <rcl_guard_condition_get_rmw_handle+0x8>
 8016af2:	6800      	ldr	r0, [r0, #0]
 8016af4:	4770      	bx	lr
 8016af6:	bf00      	nop

08016af8 <rcl_validate_topic_name>:
 8016af8:	2800      	cmp	r0, #0
 8016afa:	d07a      	beq.n	8016bf2 <rcl_validate_topic_name+0xfa>
 8016afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b00:	460e      	mov	r6, r1
 8016b02:	2900      	cmp	r1, #0
 8016b04:	d07c      	beq.n	8016c00 <rcl_validate_topic_name+0x108>
 8016b06:	4617      	mov	r7, r2
 8016b08:	4605      	mov	r5, r0
 8016b0a:	f7e9 fb73 	bl	80001f4 <strlen>
 8016b0e:	b1b0      	cbz	r0, 8016b3e <rcl_validate_topic_name+0x46>
 8016b10:	f895 9000 	ldrb.w	r9, [r5]
 8016b14:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8016c98 <rcl_validate_topic_name+0x1a0>
 8016b18:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8016b1c:	f013 0304 	ands.w	r3, r3, #4
 8016b20:	d169      	bne.n	8016bf6 <rcl_validate_topic_name+0xfe>
 8016b22:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8016b26:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016b2a:	2a2f      	cmp	r2, #47	@ 0x2f
 8016b2c:	d10e      	bne.n	8016b4c <rcl_validate_topic_name+0x54>
 8016b2e:	2202      	movs	r2, #2
 8016b30:	6032      	str	r2, [r6, #0]
 8016b32:	b36f      	cbz	r7, 8016b90 <rcl_validate_topic_name+0x98>
 8016b34:	f8c7 8000 	str.w	r8, [r7]
 8016b38:	4618      	mov	r0, r3
 8016b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b3e:	2301      	movs	r3, #1
 8016b40:	6033      	str	r3, [r6, #0]
 8016b42:	b32f      	cbz	r7, 8016b90 <rcl_validate_topic_name+0x98>
 8016b44:	2000      	movs	r0, #0
 8016b46:	6038      	str	r0, [r7, #0]
 8016b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b4c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8016b50:	461c      	mov	r4, r3
 8016b52:	4619      	mov	r1, r3
 8016b54:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016b58:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016b5c:	f1be 0f09 	cmp.w	lr, #9
 8016b60:	d919      	bls.n	8016b96 <rcl_validate_topic_name+0x9e>
 8016b62:	f022 0e20 	bic.w	lr, r2, #32
 8016b66:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8016b6a:	f1be 0f19 	cmp.w	lr, #25
 8016b6e:	d912      	bls.n	8016b96 <rcl_validate_topic_name+0x9e>
 8016b70:	2a5f      	cmp	r2, #95	@ 0x5f
 8016b72:	d019      	beq.n	8016ba8 <rcl_validate_topic_name+0xb0>
 8016b74:	2a2f      	cmp	r2, #47	@ 0x2f
 8016b76:	d051      	beq.n	8016c1c <rcl_validate_topic_name+0x124>
 8016b78:	2a7e      	cmp	r2, #126	@ 0x7e
 8016b7a:	d048      	beq.n	8016c0e <rcl_validate_topic_name+0x116>
 8016b7c:	2a7b      	cmp	r2, #123	@ 0x7b
 8016b7e:	d054      	beq.n	8016c2a <rcl_validate_topic_name+0x132>
 8016b80:	2a7d      	cmp	r2, #125	@ 0x7d
 8016b82:	d161      	bne.n	8016c48 <rcl_validate_topic_name+0x150>
 8016b84:	2c00      	cmp	r4, #0
 8016b86:	d155      	bne.n	8016c34 <rcl_validate_topic_name+0x13c>
 8016b88:	2305      	movs	r3, #5
 8016b8a:	6033      	str	r3, [r6, #0]
 8016b8c:	b107      	cbz	r7, 8016b90 <rcl_validate_topic_name+0x98>
 8016b8e:	6039      	str	r1, [r7, #0]
 8016b90:	2000      	movs	r0, #0
 8016b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b96:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016b9a:	0752      	lsls	r2, r2, #29
 8016b9c:	d504      	bpl.n	8016ba8 <rcl_validate_topic_name+0xb0>
 8016b9e:	b11c      	cbz	r4, 8016ba8 <rcl_validate_topic_name+0xb0>
 8016ba0:	b111      	cbz	r1, 8016ba8 <rcl_validate_topic_name+0xb0>
 8016ba2:	1e4a      	subs	r2, r1, #1
 8016ba4:	429a      	cmp	r2, r3
 8016ba6:	d02d      	beq.n	8016c04 <rcl_validate_topic_name+0x10c>
 8016ba8:	3101      	adds	r1, #1
 8016baa:	4288      	cmp	r0, r1
 8016bac:	d1d2      	bne.n	8016b54 <rcl_validate_topic_name+0x5c>
 8016bae:	2c00      	cmp	r4, #0
 8016bb0:	d145      	bne.n	8016c3e <rcl_validate_topic_name+0x146>
 8016bb2:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8016bb6:	d04f      	beq.n	8016c58 <rcl_validate_topic_name+0x160>
 8016bb8:	4620      	mov	r0, r4
 8016bba:	2301      	movs	r3, #1
 8016bbc:	e006      	b.n	8016bcc <rcl_validate_topic_name+0xd4>
 8016bbe:	428b      	cmp	r3, r1
 8016bc0:	f105 0501 	add.w	r5, r5, #1
 8016bc4:	f103 0201 	add.w	r2, r3, #1
 8016bc8:	d236      	bcs.n	8016c38 <rcl_validate_topic_name+0x140>
 8016bca:	4613      	mov	r3, r2
 8016bcc:	4580      	cmp	r8, r0
 8016bce:	f100 0001 	add.w	r0, r0, #1
 8016bd2:	d0f4      	beq.n	8016bbe <rcl_validate_topic_name+0xc6>
 8016bd4:	782a      	ldrb	r2, [r5, #0]
 8016bd6:	2a2f      	cmp	r2, #47	@ 0x2f
 8016bd8:	d1f1      	bne.n	8016bbe <rcl_validate_topic_name+0xc6>
 8016bda:	786a      	ldrb	r2, [r5, #1]
 8016bdc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016be0:	0754      	lsls	r4, r2, #29
 8016be2:	d5ec      	bpl.n	8016bbe <rcl_validate_topic_name+0xc6>
 8016be4:	2204      	movs	r2, #4
 8016be6:	6032      	str	r2, [r6, #0]
 8016be8:	2f00      	cmp	r7, #0
 8016bea:	d0d1      	beq.n	8016b90 <rcl_validate_topic_name+0x98>
 8016bec:	603b      	str	r3, [r7, #0]
 8016bee:	2000      	movs	r0, #0
 8016bf0:	e7aa      	b.n	8016b48 <rcl_validate_topic_name+0x50>
 8016bf2:	200b      	movs	r0, #11
 8016bf4:	4770      	bx	lr
 8016bf6:	2304      	movs	r3, #4
 8016bf8:	6033      	str	r3, [r6, #0]
 8016bfa:	2f00      	cmp	r7, #0
 8016bfc:	d1a2      	bne.n	8016b44 <rcl_validate_topic_name+0x4c>
 8016bfe:	e7c7      	b.n	8016b90 <rcl_validate_topic_name+0x98>
 8016c00:	200b      	movs	r0, #11
 8016c02:	e7a1      	b.n	8016b48 <rcl_validate_topic_name+0x50>
 8016c04:	2309      	movs	r3, #9
 8016c06:	6033      	str	r3, [r6, #0]
 8016c08:	2f00      	cmp	r7, #0
 8016c0a:	d1c0      	bne.n	8016b8e <rcl_validate_topic_name+0x96>
 8016c0c:	e7c0      	b.n	8016b90 <rcl_validate_topic_name+0x98>
 8016c0e:	2900      	cmp	r1, #0
 8016c10:	d0ca      	beq.n	8016ba8 <rcl_validate_topic_name+0xb0>
 8016c12:	2306      	movs	r3, #6
 8016c14:	6033      	str	r3, [r6, #0]
 8016c16:	2f00      	cmp	r7, #0
 8016c18:	d1b9      	bne.n	8016b8e <rcl_validate_topic_name+0x96>
 8016c1a:	e7b9      	b.n	8016b90 <rcl_validate_topic_name+0x98>
 8016c1c:	2c00      	cmp	r4, #0
 8016c1e:	d0c3      	beq.n	8016ba8 <rcl_validate_topic_name+0xb0>
 8016c20:	2308      	movs	r3, #8
 8016c22:	6033      	str	r3, [r6, #0]
 8016c24:	2f00      	cmp	r7, #0
 8016c26:	d1b2      	bne.n	8016b8e <rcl_validate_topic_name+0x96>
 8016c28:	e7b2      	b.n	8016b90 <rcl_validate_topic_name+0x98>
 8016c2a:	2c00      	cmp	r4, #0
 8016c2c:	d1f8      	bne.n	8016c20 <rcl_validate_topic_name+0x128>
 8016c2e:	460b      	mov	r3, r1
 8016c30:	2401      	movs	r4, #1
 8016c32:	e7b9      	b.n	8016ba8 <rcl_validate_topic_name+0xb0>
 8016c34:	2400      	movs	r4, #0
 8016c36:	e7b7      	b.n	8016ba8 <rcl_validate_topic_name+0xb0>
 8016c38:	2000      	movs	r0, #0
 8016c3a:	6030      	str	r0, [r6, #0]
 8016c3c:	e784      	b.n	8016b48 <rcl_validate_topic_name+0x50>
 8016c3e:	2205      	movs	r2, #5
 8016c40:	6032      	str	r2, [r6, #0]
 8016c42:	2f00      	cmp	r7, #0
 8016c44:	d1d2      	bne.n	8016bec <rcl_validate_topic_name+0xf4>
 8016c46:	e7a3      	b.n	8016b90 <rcl_validate_topic_name+0x98>
 8016c48:	2c00      	cmp	r4, #0
 8016c4a:	bf14      	ite	ne
 8016c4c:	2308      	movne	r3, #8
 8016c4e:	2303      	moveq	r3, #3
 8016c50:	6033      	str	r3, [r6, #0]
 8016c52:	2f00      	cmp	r7, #0
 8016c54:	d19b      	bne.n	8016b8e <rcl_validate_topic_name+0x96>
 8016c56:	e79b      	b.n	8016b90 <rcl_validate_topic_name+0x98>
 8016c58:	2301      	movs	r3, #1
 8016c5a:	e00a      	b.n	8016c72 <rcl_validate_topic_name+0x17a>
 8016c5c:	2c01      	cmp	r4, #1
 8016c5e:	d013      	beq.n	8016c88 <rcl_validate_topic_name+0x190>
 8016c60:	4299      	cmp	r1, r3
 8016c62:	f104 0401 	add.w	r4, r4, #1
 8016c66:	f105 0501 	add.w	r5, r5, #1
 8016c6a:	f103 0201 	add.w	r2, r3, #1
 8016c6e:	d9e3      	bls.n	8016c38 <rcl_validate_topic_name+0x140>
 8016c70:	4613      	mov	r3, r2
 8016c72:	45a0      	cmp	r8, r4
 8016c74:	d0f4      	beq.n	8016c60 <rcl_validate_topic_name+0x168>
 8016c76:	782a      	ldrb	r2, [r5, #0]
 8016c78:	2a2f      	cmp	r2, #47	@ 0x2f
 8016c7a:	d1ef      	bne.n	8016c5c <rcl_validate_topic_name+0x164>
 8016c7c:	786a      	ldrb	r2, [r5, #1]
 8016c7e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016c82:	0752      	lsls	r2, r2, #29
 8016c84:	d5ec      	bpl.n	8016c60 <rcl_validate_topic_name+0x168>
 8016c86:	e7ad      	b.n	8016be4 <rcl_validate_topic_name+0xec>
 8016c88:	2307      	movs	r3, #7
 8016c8a:	6033      	str	r3, [r6, #0]
 8016c8c:	2f00      	cmp	r7, #0
 8016c8e:	f43f af7f 	beq.w	8016b90 <rcl_validate_topic_name+0x98>
 8016c92:	603c      	str	r4, [r7, #0]
 8016c94:	2000      	movs	r0, #0
 8016c96:	e757      	b.n	8016b48 <rcl_validate_topic_name+0x50>
 8016c98:	0801945c 	.word	0x0801945c

08016c9c <rcutils_string_array_fini>:
 8016c9c:	b320      	cbz	r0, 8016ce8 <rcutils_string_array_fini+0x4c>
 8016c9e:	b570      	push	{r4, r5, r6, lr}
 8016ca0:	4604      	mov	r4, r0
 8016ca2:	6840      	ldr	r0, [r0, #4]
 8016ca4:	b1d8      	cbz	r0, 8016cde <rcutils_string_array_fini+0x42>
 8016ca6:	f104 0008 	add.w	r0, r4, #8
 8016caa:	f7f5 fe15 	bl	800c8d8 <rcutils_allocator_is_valid>
 8016cae:	b1b8      	cbz	r0, 8016ce0 <rcutils_string_array_fini+0x44>
 8016cb0:	6823      	ldr	r3, [r4, #0]
 8016cb2:	b1bb      	cbz	r3, 8016ce4 <rcutils_string_array_fini+0x48>
 8016cb4:	2500      	movs	r5, #0
 8016cb6:	6860      	ldr	r0, [r4, #4]
 8016cb8:	462e      	mov	r6, r5
 8016cba:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8016cbe:	68e3      	ldr	r3, [r4, #12]
 8016cc0:	69a1      	ldr	r1, [r4, #24]
 8016cc2:	4798      	blx	r3
 8016cc4:	e9d4 3000 	ldrd	r3, r0, [r4]
 8016cc8:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8016ccc:	3501      	adds	r5, #1
 8016cce:	429d      	cmp	r5, r3
 8016cd0:	d3f3      	bcc.n	8016cba <rcutils_string_array_fini+0x1e>
 8016cd2:	68e3      	ldr	r3, [r4, #12]
 8016cd4:	69a1      	ldr	r1, [r4, #24]
 8016cd6:	4798      	blx	r3
 8016cd8:	2000      	movs	r0, #0
 8016cda:	e9c4 0000 	strd	r0, r0, [r4]
 8016cde:	bd70      	pop	{r4, r5, r6, pc}
 8016ce0:	200b      	movs	r0, #11
 8016ce2:	bd70      	pop	{r4, r5, r6, pc}
 8016ce4:	6860      	ldr	r0, [r4, #4]
 8016ce6:	e7f4      	b.n	8016cd2 <rcutils_string_array_fini+0x36>
 8016ce8:	200b      	movs	r0, #11
 8016cea:	4770      	bx	lr

08016cec <on_status>:
 8016cec:	b082      	sub	sp, #8
 8016cee:	b002      	add	sp, #8
 8016cf0:	4770      	bx	lr
 8016cf2:	bf00      	nop

08016cf4 <on_topic>:
 8016cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cf8:	4a22      	ldr	r2, [pc, #136]	@ (8016d84 <on_topic+0x90>)
 8016cfa:	b094      	sub	sp, #80	@ 0x50
 8016cfc:	6812      	ldr	r2, [r2, #0]
 8016cfe:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8016d00:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016d04:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016d08:	b3c2      	cbz	r2, 8016d7c <on_topic+0x88>
 8016d0a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8016d0e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8016d12:	e001      	b.n	8016d18 <on_topic+0x24>
 8016d14:	6852      	ldr	r2, [r2, #4]
 8016d16:	b38a      	cbz	r2, 8016d7c <on_topic+0x88>
 8016d18:	6894      	ldr	r4, [r2, #8]
 8016d1a:	8aa3      	ldrh	r3, [r4, #20]
 8016d1c:	428b      	cmp	r3, r1
 8016d1e:	d1f9      	bne.n	8016d14 <on_topic+0x20>
 8016d20:	7da3      	ldrb	r3, [r4, #22]
 8016d22:	4283      	cmp	r3, r0
 8016d24:	d1f6      	bne.n	8016d14 <on_topic+0x20>
 8016d26:	2248      	movs	r2, #72	@ 0x48
 8016d28:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016d2c:	4668      	mov	r0, sp
 8016d2e:	f000 fda0 	bl	8017872 <memcpy>
 8016d32:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8016d36:	cb0c      	ldmia	r3, {r2, r3}
 8016d38:	4620      	mov	r0, r4
 8016d3a:	f7f6 f9fd 	bl	800d138 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016d3e:	4607      	mov	r7, r0
 8016d40:	b1e0      	cbz	r0, 8016d7c <on_topic+0x88>
 8016d42:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016d46:	4632      	mov	r2, r6
 8016d48:	4628      	mov	r0, r5
 8016d4a:	f108 0110 	add.w	r1, r8, #16
 8016d4e:	f7fd ffc9 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 8016d52:	b930      	cbnz	r0, 8016d62 <on_topic+0x6e>
 8016d54:	480c      	ldr	r0, [pc, #48]	@ (8016d88 <on_topic+0x94>)
 8016d56:	4639      	mov	r1, r7
 8016d58:	b014      	add	sp, #80	@ 0x50
 8016d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d5e:	f7fc bdb7 	b.w	80138d0 <put_memory>
 8016d62:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8016d66:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8016d6a:	f7fd fedf 	bl	8014b2c <rmw_uros_epoch_nanos>
 8016d6e:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8016d72:	2305      	movs	r3, #5
 8016d74:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016d78:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8016d7c:	b014      	add	sp, #80	@ 0x50
 8016d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d82:	bf00      	nop
 8016d84:	2000dc3c 	.word	0x2000dc3c
 8016d88:	2000dc2c 	.word	0x2000dc2c

08016d8c <on_request>:
 8016d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d90:	4823      	ldr	r0, [pc, #140]	@ (8016e20 <on_request+0x94>)
 8016d92:	b094      	sub	sp, #80	@ 0x50
 8016d94:	6800      	ldr	r0, [r0, #0]
 8016d96:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016d98:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016d9c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016d9e:	2800      	cmp	r0, #0
 8016da0:	d03b      	beq.n	8016e1a <on_request+0x8e>
 8016da2:	461d      	mov	r5, r3
 8016da4:	e001      	b.n	8016daa <on_request+0x1e>
 8016da6:	6840      	ldr	r0, [r0, #4]
 8016da8:	b3b8      	cbz	r0, 8016e1a <on_request+0x8e>
 8016daa:	6884      	ldr	r4, [r0, #8]
 8016dac:	8b21      	ldrh	r1, [r4, #24]
 8016dae:	4291      	cmp	r1, r2
 8016db0:	d1f9      	bne.n	8016da6 <on_request+0x1a>
 8016db2:	2248      	movs	r2, #72	@ 0x48
 8016db4:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016db8:	4668      	mov	r0, sp
 8016dba:	f000 fd5a 	bl	8017872 <memcpy>
 8016dbe:	f104 0320 	add.w	r3, r4, #32
 8016dc2:	cb0c      	ldmia	r3, {r2, r3}
 8016dc4:	4620      	mov	r0, r4
 8016dc6:	f7f6 f9b7 	bl	800d138 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016dca:	4680      	mov	r8, r0
 8016dcc:	b328      	cbz	r0, 8016e1a <on_request+0x8e>
 8016dce:	4638      	mov	r0, r7
 8016dd0:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016dd4:	4632      	mov	r2, r6
 8016dd6:	f107 0110 	add.w	r1, r7, #16
 8016dda:	f7fd ff83 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 8016dde:	b930      	cbnz	r0, 8016dee <on_request+0x62>
 8016de0:	4810      	ldr	r0, [pc, #64]	@ (8016e24 <on_request+0x98>)
 8016de2:	4641      	mov	r1, r8
 8016de4:	b014      	add	sp, #80	@ 0x50
 8016de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016dea:	f7fc bd71 	b.w	80138d0 <put_memory>
 8016dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016df0:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8016df4:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016df8:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016dfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016e04:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016e08:	f7fd fe90 	bl	8014b2c <rmw_uros_epoch_nanos>
 8016e0c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016e10:	2303      	movs	r3, #3
 8016e12:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016e16:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016e1a:	b014      	add	sp, #80	@ 0x50
 8016e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e20:	2000dc0c 	.word	0x2000dc0c
 8016e24:	2000dc2c 	.word	0x2000dc2c

08016e28 <on_reply>:
 8016e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e2c:	4821      	ldr	r0, [pc, #132]	@ (8016eb4 <on_reply+0x8c>)
 8016e2e:	b094      	sub	sp, #80	@ 0x50
 8016e30:	6800      	ldr	r0, [r0, #0]
 8016e32:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016e34:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016e38:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016e3a:	b3b8      	cbz	r0, 8016eac <on_reply+0x84>
 8016e3c:	461d      	mov	r5, r3
 8016e3e:	e001      	b.n	8016e44 <on_reply+0x1c>
 8016e40:	6840      	ldr	r0, [r0, #4]
 8016e42:	b398      	cbz	r0, 8016eac <on_reply+0x84>
 8016e44:	6884      	ldr	r4, [r0, #8]
 8016e46:	8b21      	ldrh	r1, [r4, #24]
 8016e48:	4291      	cmp	r1, r2
 8016e4a:	d1f9      	bne.n	8016e40 <on_reply+0x18>
 8016e4c:	2248      	movs	r2, #72	@ 0x48
 8016e4e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016e52:	4668      	mov	r0, sp
 8016e54:	f000 fd0d 	bl	8017872 <memcpy>
 8016e58:	f104 0320 	add.w	r3, r4, #32
 8016e5c:	cb0c      	ldmia	r3, {r2, r3}
 8016e5e:	4620      	mov	r0, r4
 8016e60:	f7f6 f96a 	bl	800d138 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016e64:	4680      	mov	r8, r0
 8016e66:	b308      	cbz	r0, 8016eac <on_reply+0x84>
 8016e68:	4638      	mov	r0, r7
 8016e6a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016e6e:	4632      	mov	r2, r6
 8016e70:	f107 0110 	add.w	r1, r7, #16
 8016e74:	f7fd ff36 	bl	8014ce4 <ucdr_deserialize_array_uint8_t>
 8016e78:	b930      	cbnz	r0, 8016e88 <on_reply+0x60>
 8016e7a:	480f      	ldr	r0, [pc, #60]	@ (8016eb8 <on_reply+0x90>)
 8016e7c:	4641      	mov	r1, r8
 8016e7e:	b014      	add	sp, #80	@ 0x50
 8016e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e84:	f7fc bd24 	b.w	80138d0 <put_memory>
 8016e88:	2200      	movs	r2, #0
 8016e8a:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8016e8e:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016e92:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016e96:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8016e9a:	f7fd fe47 	bl	8014b2c <rmw_uros_epoch_nanos>
 8016e9e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016ea2:	2304      	movs	r3, #4
 8016ea4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016ea8:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016eac:	b014      	add	sp, #80	@ 0x50
 8016eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eb2:	bf00      	nop
 8016eb4:	20009320 	.word	0x20009320
 8016eb8:	2000dc2c 	.word	0x2000dc2c

08016ebc <rmw_create_guard_condition>:
 8016ebc:	b538      	push	{r3, r4, r5, lr}
 8016ebe:	4605      	mov	r5, r0
 8016ec0:	4807      	ldr	r0, [pc, #28]	@ (8016ee0 <rmw_create_guard_condition+0x24>)
 8016ec2:	f7fc fcf5 	bl	80138b0 <get_memory>
 8016ec6:	b148      	cbz	r0, 8016edc <rmw_create_guard_condition+0x20>
 8016ec8:	6884      	ldr	r4, [r0, #8]
 8016eca:	2300      	movs	r3, #0
 8016ecc:	7423      	strb	r3, [r4, #16]
 8016ece:	61e5      	str	r5, [r4, #28]
 8016ed0:	f7fc fd56 	bl	8013980 <rmw_get_implementation_identifier>
 8016ed4:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016ed8:	f104 0014 	add.w	r0, r4, #20
 8016edc:	bd38      	pop	{r3, r4, r5, pc}
 8016ede:	bf00      	nop
 8016ee0:	2000dbcc 	.word	0x2000dbcc

08016ee4 <rmw_destroy_guard_condition>:
 8016ee4:	b508      	push	{r3, lr}
 8016ee6:	4b08      	ldr	r3, [pc, #32]	@ (8016f08 <rmw_destroy_guard_condition+0x24>)
 8016ee8:	6819      	ldr	r1, [r3, #0]
 8016eea:	b911      	cbnz	r1, 8016ef2 <rmw_destroy_guard_condition+0xe>
 8016eec:	e00a      	b.n	8016f04 <rmw_destroy_guard_condition+0x20>
 8016eee:	6849      	ldr	r1, [r1, #4]
 8016ef0:	b141      	cbz	r1, 8016f04 <rmw_destroy_guard_condition+0x20>
 8016ef2:	688b      	ldr	r3, [r1, #8]
 8016ef4:	3314      	adds	r3, #20
 8016ef6:	4298      	cmp	r0, r3
 8016ef8:	d1f9      	bne.n	8016eee <rmw_destroy_guard_condition+0xa>
 8016efa:	4803      	ldr	r0, [pc, #12]	@ (8016f08 <rmw_destroy_guard_condition+0x24>)
 8016efc:	f7fc fce8 	bl	80138d0 <put_memory>
 8016f00:	2000      	movs	r0, #0
 8016f02:	bd08      	pop	{r3, pc}
 8016f04:	2001      	movs	r0, #1
 8016f06:	bd08      	pop	{r3, pc}
 8016f08:	2000dbcc 	.word	0x2000dbcc

08016f0c <calloc>:
 8016f0c:	4b02      	ldr	r3, [pc, #8]	@ (8016f18 <calloc+0xc>)
 8016f0e:	460a      	mov	r2, r1
 8016f10:	4601      	mov	r1, r0
 8016f12:	6818      	ldr	r0, [r3, #0]
 8016f14:	f000 b802 	b.w	8016f1c <_calloc_r>
 8016f18:	20000268 	.word	0x20000268

08016f1c <_calloc_r>:
 8016f1c:	b570      	push	{r4, r5, r6, lr}
 8016f1e:	fba1 5402 	umull	r5, r4, r1, r2
 8016f22:	b93c      	cbnz	r4, 8016f34 <_calloc_r+0x18>
 8016f24:	4629      	mov	r1, r5
 8016f26:	f000 f887 	bl	8017038 <_malloc_r>
 8016f2a:	4606      	mov	r6, r0
 8016f2c:	b928      	cbnz	r0, 8016f3a <_calloc_r+0x1e>
 8016f2e:	2600      	movs	r6, #0
 8016f30:	4630      	mov	r0, r6
 8016f32:	bd70      	pop	{r4, r5, r6, pc}
 8016f34:	220c      	movs	r2, #12
 8016f36:	6002      	str	r2, [r0, #0]
 8016f38:	e7f9      	b.n	8016f2e <_calloc_r+0x12>
 8016f3a:	462a      	mov	r2, r5
 8016f3c:	4621      	mov	r1, r4
 8016f3e:	f000 fbcf 	bl	80176e0 <memset>
 8016f42:	e7f5      	b.n	8016f30 <_calloc_r+0x14>

08016f44 <getenv>:
 8016f44:	b507      	push	{r0, r1, r2, lr}
 8016f46:	4b04      	ldr	r3, [pc, #16]	@ (8016f58 <getenv+0x14>)
 8016f48:	4601      	mov	r1, r0
 8016f4a:	aa01      	add	r2, sp, #4
 8016f4c:	6818      	ldr	r0, [r3, #0]
 8016f4e:	f000 f805 	bl	8016f5c <_findenv_r>
 8016f52:	b003      	add	sp, #12
 8016f54:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f58:	20000268 	.word	0x20000268

08016f5c <_findenv_r>:
 8016f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f60:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8016fd0 <_findenv_r+0x74>
 8016f64:	4606      	mov	r6, r0
 8016f66:	4689      	mov	r9, r1
 8016f68:	4617      	mov	r7, r2
 8016f6a:	f000 fcaf 	bl	80178cc <__env_lock>
 8016f6e:	f8da 4000 	ldr.w	r4, [sl]
 8016f72:	b134      	cbz	r4, 8016f82 <_findenv_r+0x26>
 8016f74:	464b      	mov	r3, r9
 8016f76:	4698      	mov	r8, r3
 8016f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f7c:	b13a      	cbz	r2, 8016f8e <_findenv_r+0x32>
 8016f7e:	2a3d      	cmp	r2, #61	@ 0x3d
 8016f80:	d1f9      	bne.n	8016f76 <_findenv_r+0x1a>
 8016f82:	4630      	mov	r0, r6
 8016f84:	f000 fca8 	bl	80178d8 <__env_unlock>
 8016f88:	2000      	movs	r0, #0
 8016f8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f8e:	eba8 0809 	sub.w	r8, r8, r9
 8016f92:	46a3      	mov	fp, r4
 8016f94:	f854 0b04 	ldr.w	r0, [r4], #4
 8016f98:	2800      	cmp	r0, #0
 8016f9a:	d0f2      	beq.n	8016f82 <_findenv_r+0x26>
 8016f9c:	4642      	mov	r2, r8
 8016f9e:	4649      	mov	r1, r9
 8016fa0:	f000 fbb3 	bl	801770a <strncmp>
 8016fa4:	2800      	cmp	r0, #0
 8016fa6:	d1f4      	bne.n	8016f92 <_findenv_r+0x36>
 8016fa8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016fac:	eb03 0508 	add.w	r5, r3, r8
 8016fb0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016fb4:	2b3d      	cmp	r3, #61	@ 0x3d
 8016fb6:	d1ec      	bne.n	8016f92 <_findenv_r+0x36>
 8016fb8:	f8da 3000 	ldr.w	r3, [sl]
 8016fbc:	ebab 0303 	sub.w	r3, fp, r3
 8016fc0:	109b      	asrs	r3, r3, #2
 8016fc2:	4630      	mov	r0, r6
 8016fc4:	603b      	str	r3, [r7, #0]
 8016fc6:	f000 fc87 	bl	80178d8 <__env_unlock>
 8016fca:	1c68      	adds	r0, r5, #1
 8016fcc:	e7dd      	b.n	8016f8a <_findenv_r+0x2e>
 8016fce:	bf00      	nop
 8016fd0:	20000000 	.word	0x20000000

08016fd4 <malloc>:
 8016fd4:	4b02      	ldr	r3, [pc, #8]	@ (8016fe0 <malloc+0xc>)
 8016fd6:	4601      	mov	r1, r0
 8016fd8:	6818      	ldr	r0, [r3, #0]
 8016fda:	f000 b82d 	b.w	8017038 <_malloc_r>
 8016fde:	bf00      	nop
 8016fe0:	20000268 	.word	0x20000268

08016fe4 <free>:
 8016fe4:	4b02      	ldr	r3, [pc, #8]	@ (8016ff0 <free+0xc>)
 8016fe6:	4601      	mov	r1, r0
 8016fe8:	6818      	ldr	r0, [r3, #0]
 8016fea:	f000 bc7b 	b.w	80178e4 <_free_r>
 8016fee:	bf00      	nop
 8016ff0:	20000268 	.word	0x20000268

08016ff4 <sbrk_aligned>:
 8016ff4:	b570      	push	{r4, r5, r6, lr}
 8016ff6:	4e0f      	ldr	r6, [pc, #60]	@ (8017034 <sbrk_aligned+0x40>)
 8016ff8:	460c      	mov	r4, r1
 8016ffa:	6831      	ldr	r1, [r6, #0]
 8016ffc:	4605      	mov	r5, r0
 8016ffe:	b911      	cbnz	r1, 8017006 <sbrk_aligned+0x12>
 8017000:	f000 fbe0 	bl	80177c4 <_sbrk_r>
 8017004:	6030      	str	r0, [r6, #0]
 8017006:	4621      	mov	r1, r4
 8017008:	4628      	mov	r0, r5
 801700a:	f000 fbdb 	bl	80177c4 <_sbrk_r>
 801700e:	1c43      	adds	r3, r0, #1
 8017010:	d103      	bne.n	801701a <sbrk_aligned+0x26>
 8017012:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017016:	4620      	mov	r0, r4
 8017018:	bd70      	pop	{r4, r5, r6, pc}
 801701a:	1cc4      	adds	r4, r0, #3
 801701c:	f024 0403 	bic.w	r4, r4, #3
 8017020:	42a0      	cmp	r0, r4
 8017022:	d0f8      	beq.n	8017016 <sbrk_aligned+0x22>
 8017024:	1a21      	subs	r1, r4, r0
 8017026:	4628      	mov	r0, r5
 8017028:	f000 fbcc 	bl	80177c4 <_sbrk_r>
 801702c:	3001      	adds	r0, #1
 801702e:	d1f2      	bne.n	8017016 <sbrk_aligned+0x22>
 8017030:	e7ef      	b.n	8017012 <sbrk_aligned+0x1e>
 8017032:	bf00      	nop
 8017034:	2000ddf0 	.word	0x2000ddf0

08017038 <_malloc_r>:
 8017038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801703c:	1ccd      	adds	r5, r1, #3
 801703e:	f025 0503 	bic.w	r5, r5, #3
 8017042:	3508      	adds	r5, #8
 8017044:	2d0c      	cmp	r5, #12
 8017046:	bf38      	it	cc
 8017048:	250c      	movcc	r5, #12
 801704a:	2d00      	cmp	r5, #0
 801704c:	4606      	mov	r6, r0
 801704e:	db01      	blt.n	8017054 <_malloc_r+0x1c>
 8017050:	42a9      	cmp	r1, r5
 8017052:	d904      	bls.n	801705e <_malloc_r+0x26>
 8017054:	230c      	movs	r3, #12
 8017056:	6033      	str	r3, [r6, #0]
 8017058:	2000      	movs	r0, #0
 801705a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801705e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017134 <_malloc_r+0xfc>
 8017062:	f000 f869 	bl	8017138 <__malloc_lock>
 8017066:	f8d8 3000 	ldr.w	r3, [r8]
 801706a:	461c      	mov	r4, r3
 801706c:	bb44      	cbnz	r4, 80170c0 <_malloc_r+0x88>
 801706e:	4629      	mov	r1, r5
 8017070:	4630      	mov	r0, r6
 8017072:	f7ff ffbf 	bl	8016ff4 <sbrk_aligned>
 8017076:	1c43      	adds	r3, r0, #1
 8017078:	4604      	mov	r4, r0
 801707a:	d158      	bne.n	801712e <_malloc_r+0xf6>
 801707c:	f8d8 4000 	ldr.w	r4, [r8]
 8017080:	4627      	mov	r7, r4
 8017082:	2f00      	cmp	r7, #0
 8017084:	d143      	bne.n	801710e <_malloc_r+0xd6>
 8017086:	2c00      	cmp	r4, #0
 8017088:	d04b      	beq.n	8017122 <_malloc_r+0xea>
 801708a:	6823      	ldr	r3, [r4, #0]
 801708c:	4639      	mov	r1, r7
 801708e:	4630      	mov	r0, r6
 8017090:	eb04 0903 	add.w	r9, r4, r3
 8017094:	f000 fb96 	bl	80177c4 <_sbrk_r>
 8017098:	4581      	cmp	r9, r0
 801709a:	d142      	bne.n	8017122 <_malloc_r+0xea>
 801709c:	6821      	ldr	r1, [r4, #0]
 801709e:	1a6d      	subs	r5, r5, r1
 80170a0:	4629      	mov	r1, r5
 80170a2:	4630      	mov	r0, r6
 80170a4:	f7ff ffa6 	bl	8016ff4 <sbrk_aligned>
 80170a8:	3001      	adds	r0, #1
 80170aa:	d03a      	beq.n	8017122 <_malloc_r+0xea>
 80170ac:	6823      	ldr	r3, [r4, #0]
 80170ae:	442b      	add	r3, r5
 80170b0:	6023      	str	r3, [r4, #0]
 80170b2:	f8d8 3000 	ldr.w	r3, [r8]
 80170b6:	685a      	ldr	r2, [r3, #4]
 80170b8:	bb62      	cbnz	r2, 8017114 <_malloc_r+0xdc>
 80170ba:	f8c8 7000 	str.w	r7, [r8]
 80170be:	e00f      	b.n	80170e0 <_malloc_r+0xa8>
 80170c0:	6822      	ldr	r2, [r4, #0]
 80170c2:	1b52      	subs	r2, r2, r5
 80170c4:	d420      	bmi.n	8017108 <_malloc_r+0xd0>
 80170c6:	2a0b      	cmp	r2, #11
 80170c8:	d917      	bls.n	80170fa <_malloc_r+0xc2>
 80170ca:	1961      	adds	r1, r4, r5
 80170cc:	42a3      	cmp	r3, r4
 80170ce:	6025      	str	r5, [r4, #0]
 80170d0:	bf18      	it	ne
 80170d2:	6059      	strne	r1, [r3, #4]
 80170d4:	6863      	ldr	r3, [r4, #4]
 80170d6:	bf08      	it	eq
 80170d8:	f8c8 1000 	streq.w	r1, [r8]
 80170dc:	5162      	str	r2, [r4, r5]
 80170de:	604b      	str	r3, [r1, #4]
 80170e0:	4630      	mov	r0, r6
 80170e2:	f000 f82f 	bl	8017144 <__malloc_unlock>
 80170e6:	f104 000b 	add.w	r0, r4, #11
 80170ea:	1d23      	adds	r3, r4, #4
 80170ec:	f020 0007 	bic.w	r0, r0, #7
 80170f0:	1ac2      	subs	r2, r0, r3
 80170f2:	bf1c      	itt	ne
 80170f4:	1a1b      	subne	r3, r3, r0
 80170f6:	50a3      	strne	r3, [r4, r2]
 80170f8:	e7af      	b.n	801705a <_malloc_r+0x22>
 80170fa:	6862      	ldr	r2, [r4, #4]
 80170fc:	42a3      	cmp	r3, r4
 80170fe:	bf0c      	ite	eq
 8017100:	f8c8 2000 	streq.w	r2, [r8]
 8017104:	605a      	strne	r2, [r3, #4]
 8017106:	e7eb      	b.n	80170e0 <_malloc_r+0xa8>
 8017108:	4623      	mov	r3, r4
 801710a:	6864      	ldr	r4, [r4, #4]
 801710c:	e7ae      	b.n	801706c <_malloc_r+0x34>
 801710e:	463c      	mov	r4, r7
 8017110:	687f      	ldr	r7, [r7, #4]
 8017112:	e7b6      	b.n	8017082 <_malloc_r+0x4a>
 8017114:	461a      	mov	r2, r3
 8017116:	685b      	ldr	r3, [r3, #4]
 8017118:	42a3      	cmp	r3, r4
 801711a:	d1fb      	bne.n	8017114 <_malloc_r+0xdc>
 801711c:	2300      	movs	r3, #0
 801711e:	6053      	str	r3, [r2, #4]
 8017120:	e7de      	b.n	80170e0 <_malloc_r+0xa8>
 8017122:	230c      	movs	r3, #12
 8017124:	6033      	str	r3, [r6, #0]
 8017126:	4630      	mov	r0, r6
 8017128:	f000 f80c 	bl	8017144 <__malloc_unlock>
 801712c:	e794      	b.n	8017058 <_malloc_r+0x20>
 801712e:	6005      	str	r5, [r0, #0]
 8017130:	e7d6      	b.n	80170e0 <_malloc_r+0xa8>
 8017132:	bf00      	nop
 8017134:	2000ddf4 	.word	0x2000ddf4

08017138 <__malloc_lock>:
 8017138:	4801      	ldr	r0, [pc, #4]	@ (8017140 <__malloc_lock+0x8>)
 801713a:	f000 bb90 	b.w	801785e <__retarget_lock_acquire_recursive>
 801713e:	bf00      	nop
 8017140:	2000df39 	.word	0x2000df39

08017144 <__malloc_unlock>:
 8017144:	4801      	ldr	r0, [pc, #4]	@ (801714c <__malloc_unlock+0x8>)
 8017146:	f000 bb8b 	b.w	8017860 <__retarget_lock_release_recursive>
 801714a:	bf00      	nop
 801714c:	2000df39 	.word	0x2000df39

08017150 <srand>:
 8017150:	b538      	push	{r3, r4, r5, lr}
 8017152:	4b10      	ldr	r3, [pc, #64]	@ (8017194 <srand+0x44>)
 8017154:	681d      	ldr	r5, [r3, #0]
 8017156:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017158:	4604      	mov	r4, r0
 801715a:	b9b3      	cbnz	r3, 801718a <srand+0x3a>
 801715c:	2018      	movs	r0, #24
 801715e:	f7ff ff39 	bl	8016fd4 <malloc>
 8017162:	4602      	mov	r2, r0
 8017164:	6328      	str	r0, [r5, #48]	@ 0x30
 8017166:	b920      	cbnz	r0, 8017172 <srand+0x22>
 8017168:	4b0b      	ldr	r3, [pc, #44]	@ (8017198 <srand+0x48>)
 801716a:	480c      	ldr	r0, [pc, #48]	@ (801719c <srand+0x4c>)
 801716c:	2146      	movs	r1, #70	@ 0x46
 801716e:	f000 fb8f 	bl	8017890 <__assert_func>
 8017172:	490b      	ldr	r1, [pc, #44]	@ (80171a0 <srand+0x50>)
 8017174:	4b0b      	ldr	r3, [pc, #44]	@ (80171a4 <srand+0x54>)
 8017176:	e9c0 1300 	strd	r1, r3, [r0]
 801717a:	4b0b      	ldr	r3, [pc, #44]	@ (80171a8 <srand+0x58>)
 801717c:	6083      	str	r3, [r0, #8]
 801717e:	230b      	movs	r3, #11
 8017180:	8183      	strh	r3, [r0, #12]
 8017182:	2100      	movs	r1, #0
 8017184:	2001      	movs	r0, #1
 8017186:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801718a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801718c:	2200      	movs	r2, #0
 801718e:	611c      	str	r4, [r3, #16]
 8017190:	615a      	str	r2, [r3, #20]
 8017192:	bd38      	pop	{r3, r4, r5, pc}
 8017194:	20000268 	.word	0x20000268
 8017198:	080193ec 	.word	0x080193ec
 801719c:	08019403 	.word	0x08019403
 80171a0:	abcd330e 	.word	0xabcd330e
 80171a4:	e66d1234 	.word	0xe66d1234
 80171a8:	0005deec 	.word	0x0005deec

080171ac <rand>:
 80171ac:	4b16      	ldr	r3, [pc, #88]	@ (8017208 <rand+0x5c>)
 80171ae:	b510      	push	{r4, lr}
 80171b0:	681c      	ldr	r4, [r3, #0]
 80171b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80171b4:	b9b3      	cbnz	r3, 80171e4 <rand+0x38>
 80171b6:	2018      	movs	r0, #24
 80171b8:	f7ff ff0c 	bl	8016fd4 <malloc>
 80171bc:	4602      	mov	r2, r0
 80171be:	6320      	str	r0, [r4, #48]	@ 0x30
 80171c0:	b920      	cbnz	r0, 80171cc <rand+0x20>
 80171c2:	4b12      	ldr	r3, [pc, #72]	@ (801720c <rand+0x60>)
 80171c4:	4812      	ldr	r0, [pc, #72]	@ (8017210 <rand+0x64>)
 80171c6:	2152      	movs	r1, #82	@ 0x52
 80171c8:	f000 fb62 	bl	8017890 <__assert_func>
 80171cc:	4911      	ldr	r1, [pc, #68]	@ (8017214 <rand+0x68>)
 80171ce:	4b12      	ldr	r3, [pc, #72]	@ (8017218 <rand+0x6c>)
 80171d0:	e9c0 1300 	strd	r1, r3, [r0]
 80171d4:	4b11      	ldr	r3, [pc, #68]	@ (801721c <rand+0x70>)
 80171d6:	6083      	str	r3, [r0, #8]
 80171d8:	230b      	movs	r3, #11
 80171da:	8183      	strh	r3, [r0, #12]
 80171dc:	2100      	movs	r1, #0
 80171de:	2001      	movs	r0, #1
 80171e0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80171e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80171e6:	480e      	ldr	r0, [pc, #56]	@ (8017220 <rand+0x74>)
 80171e8:	690b      	ldr	r3, [r1, #16]
 80171ea:	694c      	ldr	r4, [r1, #20]
 80171ec:	4a0d      	ldr	r2, [pc, #52]	@ (8017224 <rand+0x78>)
 80171ee:	4358      	muls	r0, r3
 80171f0:	fb02 0004 	mla	r0, r2, r4, r0
 80171f4:	fba3 3202 	umull	r3, r2, r3, r2
 80171f8:	3301      	adds	r3, #1
 80171fa:	eb40 0002 	adc.w	r0, r0, r2
 80171fe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017202:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017206:	bd10      	pop	{r4, pc}
 8017208:	20000268 	.word	0x20000268
 801720c:	080193ec 	.word	0x080193ec
 8017210:	08019403 	.word	0x08019403
 8017214:	abcd330e 	.word	0xabcd330e
 8017218:	e66d1234 	.word	0xe66d1234
 801721c:	0005deec 	.word	0x0005deec
 8017220:	5851f42d 	.word	0x5851f42d
 8017224:	4c957f2d 	.word	0x4c957f2d

08017228 <realloc>:
 8017228:	4b02      	ldr	r3, [pc, #8]	@ (8017234 <realloc+0xc>)
 801722a:	460a      	mov	r2, r1
 801722c:	4601      	mov	r1, r0
 801722e:	6818      	ldr	r0, [r3, #0]
 8017230:	f000 b802 	b.w	8017238 <_realloc_r>
 8017234:	20000268 	.word	0x20000268

08017238 <_realloc_r>:
 8017238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801723c:	4680      	mov	r8, r0
 801723e:	4615      	mov	r5, r2
 8017240:	460c      	mov	r4, r1
 8017242:	b921      	cbnz	r1, 801724e <_realloc_r+0x16>
 8017244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017248:	4611      	mov	r1, r2
 801724a:	f7ff bef5 	b.w	8017038 <_malloc_r>
 801724e:	b92a      	cbnz	r2, 801725c <_realloc_r+0x24>
 8017250:	f000 fb48 	bl	80178e4 <_free_r>
 8017254:	2400      	movs	r4, #0
 8017256:	4620      	mov	r0, r4
 8017258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801725c:	f000 fb8c 	bl	8017978 <_malloc_usable_size_r>
 8017260:	4285      	cmp	r5, r0
 8017262:	4606      	mov	r6, r0
 8017264:	d802      	bhi.n	801726c <_realloc_r+0x34>
 8017266:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801726a:	d8f4      	bhi.n	8017256 <_realloc_r+0x1e>
 801726c:	4629      	mov	r1, r5
 801726e:	4640      	mov	r0, r8
 8017270:	f7ff fee2 	bl	8017038 <_malloc_r>
 8017274:	4607      	mov	r7, r0
 8017276:	2800      	cmp	r0, #0
 8017278:	d0ec      	beq.n	8017254 <_realloc_r+0x1c>
 801727a:	42b5      	cmp	r5, r6
 801727c:	462a      	mov	r2, r5
 801727e:	4621      	mov	r1, r4
 8017280:	bf28      	it	cs
 8017282:	4632      	movcs	r2, r6
 8017284:	f000 faf5 	bl	8017872 <memcpy>
 8017288:	4621      	mov	r1, r4
 801728a:	4640      	mov	r0, r8
 801728c:	f000 fb2a 	bl	80178e4 <_free_r>
 8017290:	463c      	mov	r4, r7
 8017292:	e7e0      	b.n	8017256 <_realloc_r+0x1e>

08017294 <_strtoul_l.constprop.0>:
 8017294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017298:	4e34      	ldr	r6, [pc, #208]	@ (801736c <_strtoul_l.constprop.0+0xd8>)
 801729a:	4686      	mov	lr, r0
 801729c:	460d      	mov	r5, r1
 801729e:	4628      	mov	r0, r5
 80172a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172a4:	5d37      	ldrb	r7, [r6, r4]
 80172a6:	f017 0708 	ands.w	r7, r7, #8
 80172aa:	d1f8      	bne.n	801729e <_strtoul_l.constprop.0+0xa>
 80172ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80172ae:	d12f      	bne.n	8017310 <_strtoul_l.constprop.0+0x7c>
 80172b0:	782c      	ldrb	r4, [r5, #0]
 80172b2:	2701      	movs	r7, #1
 80172b4:	1c85      	adds	r5, r0, #2
 80172b6:	f033 0010 	bics.w	r0, r3, #16
 80172ba:	d109      	bne.n	80172d0 <_strtoul_l.constprop.0+0x3c>
 80172bc:	2c30      	cmp	r4, #48	@ 0x30
 80172be:	d12c      	bne.n	801731a <_strtoul_l.constprop.0+0x86>
 80172c0:	7828      	ldrb	r0, [r5, #0]
 80172c2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80172c6:	2858      	cmp	r0, #88	@ 0x58
 80172c8:	d127      	bne.n	801731a <_strtoul_l.constprop.0+0x86>
 80172ca:	786c      	ldrb	r4, [r5, #1]
 80172cc:	2310      	movs	r3, #16
 80172ce:	3502      	adds	r5, #2
 80172d0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80172d4:	2600      	movs	r6, #0
 80172d6:	fbb8 f8f3 	udiv	r8, r8, r3
 80172da:	fb03 f908 	mul.w	r9, r3, r8
 80172de:	ea6f 0909 	mvn.w	r9, r9
 80172e2:	4630      	mov	r0, r6
 80172e4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80172e8:	f1bc 0f09 	cmp.w	ip, #9
 80172ec:	d81c      	bhi.n	8017328 <_strtoul_l.constprop.0+0x94>
 80172ee:	4664      	mov	r4, ip
 80172f0:	42a3      	cmp	r3, r4
 80172f2:	dd2a      	ble.n	801734a <_strtoul_l.constprop.0+0xb6>
 80172f4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80172f8:	d007      	beq.n	801730a <_strtoul_l.constprop.0+0x76>
 80172fa:	4580      	cmp	r8, r0
 80172fc:	d322      	bcc.n	8017344 <_strtoul_l.constprop.0+0xb0>
 80172fe:	d101      	bne.n	8017304 <_strtoul_l.constprop.0+0x70>
 8017300:	45a1      	cmp	r9, r4
 8017302:	db1f      	blt.n	8017344 <_strtoul_l.constprop.0+0xb0>
 8017304:	fb00 4003 	mla	r0, r0, r3, r4
 8017308:	2601      	movs	r6, #1
 801730a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801730e:	e7e9      	b.n	80172e4 <_strtoul_l.constprop.0+0x50>
 8017310:	2c2b      	cmp	r4, #43	@ 0x2b
 8017312:	bf04      	itt	eq
 8017314:	782c      	ldrbeq	r4, [r5, #0]
 8017316:	1c85      	addeq	r5, r0, #2
 8017318:	e7cd      	b.n	80172b6 <_strtoul_l.constprop.0+0x22>
 801731a:	2b00      	cmp	r3, #0
 801731c:	d1d8      	bne.n	80172d0 <_strtoul_l.constprop.0+0x3c>
 801731e:	2c30      	cmp	r4, #48	@ 0x30
 8017320:	bf0c      	ite	eq
 8017322:	2308      	moveq	r3, #8
 8017324:	230a      	movne	r3, #10
 8017326:	e7d3      	b.n	80172d0 <_strtoul_l.constprop.0+0x3c>
 8017328:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801732c:	f1bc 0f19 	cmp.w	ip, #25
 8017330:	d801      	bhi.n	8017336 <_strtoul_l.constprop.0+0xa2>
 8017332:	3c37      	subs	r4, #55	@ 0x37
 8017334:	e7dc      	b.n	80172f0 <_strtoul_l.constprop.0+0x5c>
 8017336:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801733a:	f1bc 0f19 	cmp.w	ip, #25
 801733e:	d804      	bhi.n	801734a <_strtoul_l.constprop.0+0xb6>
 8017340:	3c57      	subs	r4, #87	@ 0x57
 8017342:	e7d5      	b.n	80172f0 <_strtoul_l.constprop.0+0x5c>
 8017344:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017348:	e7df      	b.n	801730a <_strtoul_l.constprop.0+0x76>
 801734a:	1c73      	adds	r3, r6, #1
 801734c:	d106      	bne.n	801735c <_strtoul_l.constprop.0+0xc8>
 801734e:	2322      	movs	r3, #34	@ 0x22
 8017350:	f8ce 3000 	str.w	r3, [lr]
 8017354:	4630      	mov	r0, r6
 8017356:	b932      	cbnz	r2, 8017366 <_strtoul_l.constprop.0+0xd2>
 8017358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801735c:	b107      	cbz	r7, 8017360 <_strtoul_l.constprop.0+0xcc>
 801735e:	4240      	negs	r0, r0
 8017360:	2a00      	cmp	r2, #0
 8017362:	d0f9      	beq.n	8017358 <_strtoul_l.constprop.0+0xc4>
 8017364:	b106      	cbz	r6, 8017368 <_strtoul_l.constprop.0+0xd4>
 8017366:	1e69      	subs	r1, r5, #1
 8017368:	6011      	str	r1, [r2, #0]
 801736a:	e7f5      	b.n	8017358 <_strtoul_l.constprop.0+0xc4>
 801736c:	0801945c 	.word	0x0801945c

08017370 <strtoul>:
 8017370:	4613      	mov	r3, r2
 8017372:	460a      	mov	r2, r1
 8017374:	4601      	mov	r1, r0
 8017376:	4802      	ldr	r0, [pc, #8]	@ (8017380 <strtoul+0x10>)
 8017378:	6800      	ldr	r0, [r0, #0]
 801737a:	f7ff bf8b 	b.w	8017294 <_strtoul_l.constprop.0>
 801737e:	bf00      	nop
 8017380:	20000268 	.word	0x20000268

08017384 <std>:
 8017384:	2300      	movs	r3, #0
 8017386:	b510      	push	{r4, lr}
 8017388:	4604      	mov	r4, r0
 801738a:	e9c0 3300 	strd	r3, r3, [r0]
 801738e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017392:	6083      	str	r3, [r0, #8]
 8017394:	8181      	strh	r1, [r0, #12]
 8017396:	6643      	str	r3, [r0, #100]	@ 0x64
 8017398:	81c2      	strh	r2, [r0, #14]
 801739a:	6183      	str	r3, [r0, #24]
 801739c:	4619      	mov	r1, r3
 801739e:	2208      	movs	r2, #8
 80173a0:	305c      	adds	r0, #92	@ 0x5c
 80173a2:	f000 f99d 	bl	80176e0 <memset>
 80173a6:	4b0d      	ldr	r3, [pc, #52]	@ (80173dc <std+0x58>)
 80173a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80173aa:	4b0d      	ldr	r3, [pc, #52]	@ (80173e0 <std+0x5c>)
 80173ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80173ae:	4b0d      	ldr	r3, [pc, #52]	@ (80173e4 <std+0x60>)
 80173b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80173b2:	4b0d      	ldr	r3, [pc, #52]	@ (80173e8 <std+0x64>)
 80173b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80173b6:	4b0d      	ldr	r3, [pc, #52]	@ (80173ec <std+0x68>)
 80173b8:	6224      	str	r4, [r4, #32]
 80173ba:	429c      	cmp	r4, r3
 80173bc:	d006      	beq.n	80173cc <std+0x48>
 80173be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80173c2:	4294      	cmp	r4, r2
 80173c4:	d002      	beq.n	80173cc <std+0x48>
 80173c6:	33d0      	adds	r3, #208	@ 0xd0
 80173c8:	429c      	cmp	r4, r3
 80173ca:	d105      	bne.n	80173d8 <std+0x54>
 80173cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80173d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173d4:	f000 ba42 	b.w	801785c <__retarget_lock_init_recursive>
 80173d8:	bd10      	pop	{r4, pc}
 80173da:	bf00      	nop
 80173dc:	08017595 	.word	0x08017595
 80173e0:	080175b7 	.word	0x080175b7
 80173e4:	080175ef 	.word	0x080175ef
 80173e8:	08017613 	.word	0x08017613
 80173ec:	2000ddf8 	.word	0x2000ddf8

080173f0 <stdio_exit_handler>:
 80173f0:	4a02      	ldr	r2, [pc, #8]	@ (80173fc <stdio_exit_handler+0xc>)
 80173f2:	4903      	ldr	r1, [pc, #12]	@ (8017400 <stdio_exit_handler+0x10>)
 80173f4:	4803      	ldr	r0, [pc, #12]	@ (8017404 <stdio_exit_handler+0x14>)
 80173f6:	f000 b869 	b.w	80174cc <_fwalk_sglue>
 80173fa:	bf00      	nop
 80173fc:	2000025c 	.word	0x2000025c
 8017400:	080182e1 	.word	0x080182e1
 8017404:	2000026c 	.word	0x2000026c

08017408 <cleanup_stdio>:
 8017408:	6841      	ldr	r1, [r0, #4]
 801740a:	4b0c      	ldr	r3, [pc, #48]	@ (801743c <cleanup_stdio+0x34>)
 801740c:	4299      	cmp	r1, r3
 801740e:	b510      	push	{r4, lr}
 8017410:	4604      	mov	r4, r0
 8017412:	d001      	beq.n	8017418 <cleanup_stdio+0x10>
 8017414:	f000 ff64 	bl	80182e0 <_fflush_r>
 8017418:	68a1      	ldr	r1, [r4, #8]
 801741a:	4b09      	ldr	r3, [pc, #36]	@ (8017440 <cleanup_stdio+0x38>)
 801741c:	4299      	cmp	r1, r3
 801741e:	d002      	beq.n	8017426 <cleanup_stdio+0x1e>
 8017420:	4620      	mov	r0, r4
 8017422:	f000 ff5d 	bl	80182e0 <_fflush_r>
 8017426:	68e1      	ldr	r1, [r4, #12]
 8017428:	4b06      	ldr	r3, [pc, #24]	@ (8017444 <cleanup_stdio+0x3c>)
 801742a:	4299      	cmp	r1, r3
 801742c:	d004      	beq.n	8017438 <cleanup_stdio+0x30>
 801742e:	4620      	mov	r0, r4
 8017430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017434:	f000 bf54 	b.w	80182e0 <_fflush_r>
 8017438:	bd10      	pop	{r4, pc}
 801743a:	bf00      	nop
 801743c:	2000ddf8 	.word	0x2000ddf8
 8017440:	2000de60 	.word	0x2000de60
 8017444:	2000dec8 	.word	0x2000dec8

08017448 <global_stdio_init.part.0>:
 8017448:	b510      	push	{r4, lr}
 801744a:	4b0b      	ldr	r3, [pc, #44]	@ (8017478 <global_stdio_init.part.0+0x30>)
 801744c:	4c0b      	ldr	r4, [pc, #44]	@ (801747c <global_stdio_init.part.0+0x34>)
 801744e:	4a0c      	ldr	r2, [pc, #48]	@ (8017480 <global_stdio_init.part.0+0x38>)
 8017450:	601a      	str	r2, [r3, #0]
 8017452:	4620      	mov	r0, r4
 8017454:	2200      	movs	r2, #0
 8017456:	2104      	movs	r1, #4
 8017458:	f7ff ff94 	bl	8017384 <std>
 801745c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017460:	2201      	movs	r2, #1
 8017462:	2109      	movs	r1, #9
 8017464:	f7ff ff8e 	bl	8017384 <std>
 8017468:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801746c:	2202      	movs	r2, #2
 801746e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017472:	2112      	movs	r1, #18
 8017474:	f7ff bf86 	b.w	8017384 <std>
 8017478:	2000df30 	.word	0x2000df30
 801747c:	2000ddf8 	.word	0x2000ddf8
 8017480:	080173f1 	.word	0x080173f1

08017484 <__sfp_lock_acquire>:
 8017484:	4801      	ldr	r0, [pc, #4]	@ (801748c <__sfp_lock_acquire+0x8>)
 8017486:	f000 b9ea 	b.w	801785e <__retarget_lock_acquire_recursive>
 801748a:	bf00      	nop
 801748c:	2000df3a 	.word	0x2000df3a

08017490 <__sfp_lock_release>:
 8017490:	4801      	ldr	r0, [pc, #4]	@ (8017498 <__sfp_lock_release+0x8>)
 8017492:	f000 b9e5 	b.w	8017860 <__retarget_lock_release_recursive>
 8017496:	bf00      	nop
 8017498:	2000df3a 	.word	0x2000df3a

0801749c <__sinit>:
 801749c:	b510      	push	{r4, lr}
 801749e:	4604      	mov	r4, r0
 80174a0:	f7ff fff0 	bl	8017484 <__sfp_lock_acquire>
 80174a4:	6a23      	ldr	r3, [r4, #32]
 80174a6:	b11b      	cbz	r3, 80174b0 <__sinit+0x14>
 80174a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174ac:	f7ff bff0 	b.w	8017490 <__sfp_lock_release>
 80174b0:	4b04      	ldr	r3, [pc, #16]	@ (80174c4 <__sinit+0x28>)
 80174b2:	6223      	str	r3, [r4, #32]
 80174b4:	4b04      	ldr	r3, [pc, #16]	@ (80174c8 <__sinit+0x2c>)
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d1f5      	bne.n	80174a8 <__sinit+0xc>
 80174bc:	f7ff ffc4 	bl	8017448 <global_stdio_init.part.0>
 80174c0:	e7f2      	b.n	80174a8 <__sinit+0xc>
 80174c2:	bf00      	nop
 80174c4:	08017409 	.word	0x08017409
 80174c8:	2000df30 	.word	0x2000df30

080174cc <_fwalk_sglue>:
 80174cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174d0:	4607      	mov	r7, r0
 80174d2:	4688      	mov	r8, r1
 80174d4:	4614      	mov	r4, r2
 80174d6:	2600      	movs	r6, #0
 80174d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80174dc:	f1b9 0901 	subs.w	r9, r9, #1
 80174e0:	d505      	bpl.n	80174ee <_fwalk_sglue+0x22>
 80174e2:	6824      	ldr	r4, [r4, #0]
 80174e4:	2c00      	cmp	r4, #0
 80174e6:	d1f7      	bne.n	80174d8 <_fwalk_sglue+0xc>
 80174e8:	4630      	mov	r0, r6
 80174ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174ee:	89ab      	ldrh	r3, [r5, #12]
 80174f0:	2b01      	cmp	r3, #1
 80174f2:	d907      	bls.n	8017504 <_fwalk_sglue+0x38>
 80174f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80174f8:	3301      	adds	r3, #1
 80174fa:	d003      	beq.n	8017504 <_fwalk_sglue+0x38>
 80174fc:	4629      	mov	r1, r5
 80174fe:	4638      	mov	r0, r7
 8017500:	47c0      	blx	r8
 8017502:	4306      	orrs	r6, r0
 8017504:	3568      	adds	r5, #104	@ 0x68
 8017506:	e7e9      	b.n	80174dc <_fwalk_sglue+0x10>

08017508 <iprintf>:
 8017508:	b40f      	push	{r0, r1, r2, r3}
 801750a:	b507      	push	{r0, r1, r2, lr}
 801750c:	4906      	ldr	r1, [pc, #24]	@ (8017528 <iprintf+0x20>)
 801750e:	ab04      	add	r3, sp, #16
 8017510:	6808      	ldr	r0, [r1, #0]
 8017512:	f853 2b04 	ldr.w	r2, [r3], #4
 8017516:	6881      	ldr	r1, [r0, #8]
 8017518:	9301      	str	r3, [sp, #4]
 801751a:	f000 fbb7 	bl	8017c8c <_vfiprintf_r>
 801751e:	b003      	add	sp, #12
 8017520:	f85d eb04 	ldr.w	lr, [sp], #4
 8017524:	b004      	add	sp, #16
 8017526:	4770      	bx	lr
 8017528:	20000268 	.word	0x20000268

0801752c <sniprintf>:
 801752c:	b40c      	push	{r2, r3}
 801752e:	b530      	push	{r4, r5, lr}
 8017530:	4b17      	ldr	r3, [pc, #92]	@ (8017590 <sniprintf+0x64>)
 8017532:	1e0c      	subs	r4, r1, #0
 8017534:	681d      	ldr	r5, [r3, #0]
 8017536:	b09d      	sub	sp, #116	@ 0x74
 8017538:	da08      	bge.n	801754c <sniprintf+0x20>
 801753a:	238b      	movs	r3, #139	@ 0x8b
 801753c:	602b      	str	r3, [r5, #0]
 801753e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017542:	b01d      	add	sp, #116	@ 0x74
 8017544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017548:	b002      	add	sp, #8
 801754a:	4770      	bx	lr
 801754c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017550:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017554:	bf14      	ite	ne
 8017556:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801755a:	4623      	moveq	r3, r4
 801755c:	9304      	str	r3, [sp, #16]
 801755e:	9307      	str	r3, [sp, #28]
 8017560:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017564:	9002      	str	r0, [sp, #8]
 8017566:	9006      	str	r0, [sp, #24]
 8017568:	f8ad 3016 	strh.w	r3, [sp, #22]
 801756c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801756e:	ab21      	add	r3, sp, #132	@ 0x84
 8017570:	a902      	add	r1, sp, #8
 8017572:	4628      	mov	r0, r5
 8017574:	9301      	str	r3, [sp, #4]
 8017576:	f000 fa63 	bl	8017a40 <_svfiprintf_r>
 801757a:	1c43      	adds	r3, r0, #1
 801757c:	bfbc      	itt	lt
 801757e:	238b      	movlt	r3, #139	@ 0x8b
 8017580:	602b      	strlt	r3, [r5, #0]
 8017582:	2c00      	cmp	r4, #0
 8017584:	d0dd      	beq.n	8017542 <sniprintf+0x16>
 8017586:	9b02      	ldr	r3, [sp, #8]
 8017588:	2200      	movs	r2, #0
 801758a:	701a      	strb	r2, [r3, #0]
 801758c:	e7d9      	b.n	8017542 <sniprintf+0x16>
 801758e:	bf00      	nop
 8017590:	20000268 	.word	0x20000268

08017594 <__sread>:
 8017594:	b510      	push	{r4, lr}
 8017596:	460c      	mov	r4, r1
 8017598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801759c:	f000 f900 	bl	80177a0 <_read_r>
 80175a0:	2800      	cmp	r0, #0
 80175a2:	bfab      	itete	ge
 80175a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80175a6:	89a3      	ldrhlt	r3, [r4, #12]
 80175a8:	181b      	addge	r3, r3, r0
 80175aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80175ae:	bfac      	ite	ge
 80175b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80175b2:	81a3      	strhlt	r3, [r4, #12]
 80175b4:	bd10      	pop	{r4, pc}

080175b6 <__swrite>:
 80175b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175ba:	461f      	mov	r7, r3
 80175bc:	898b      	ldrh	r3, [r1, #12]
 80175be:	05db      	lsls	r3, r3, #23
 80175c0:	4605      	mov	r5, r0
 80175c2:	460c      	mov	r4, r1
 80175c4:	4616      	mov	r6, r2
 80175c6:	d505      	bpl.n	80175d4 <__swrite+0x1e>
 80175c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175cc:	2302      	movs	r3, #2
 80175ce:	2200      	movs	r2, #0
 80175d0:	f000 f8d4 	bl	801777c <_lseek_r>
 80175d4:	89a3      	ldrh	r3, [r4, #12]
 80175d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80175da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80175de:	81a3      	strh	r3, [r4, #12]
 80175e0:	4632      	mov	r2, r6
 80175e2:	463b      	mov	r3, r7
 80175e4:	4628      	mov	r0, r5
 80175e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80175ea:	f000 b8fb 	b.w	80177e4 <_write_r>

080175ee <__sseek>:
 80175ee:	b510      	push	{r4, lr}
 80175f0:	460c      	mov	r4, r1
 80175f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175f6:	f000 f8c1 	bl	801777c <_lseek_r>
 80175fa:	1c43      	adds	r3, r0, #1
 80175fc:	89a3      	ldrh	r3, [r4, #12]
 80175fe:	bf15      	itete	ne
 8017600:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017602:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017606:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801760a:	81a3      	strheq	r3, [r4, #12]
 801760c:	bf18      	it	ne
 801760e:	81a3      	strhne	r3, [r4, #12]
 8017610:	bd10      	pop	{r4, pc}

08017612 <__sclose>:
 8017612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017616:	f000 b8a1 	b.w	801775c <_close_r>

0801761a <_vsniprintf_r>:
 801761a:	b530      	push	{r4, r5, lr}
 801761c:	4614      	mov	r4, r2
 801761e:	2c00      	cmp	r4, #0
 8017620:	b09b      	sub	sp, #108	@ 0x6c
 8017622:	4605      	mov	r5, r0
 8017624:	461a      	mov	r2, r3
 8017626:	da05      	bge.n	8017634 <_vsniprintf_r+0x1a>
 8017628:	238b      	movs	r3, #139	@ 0x8b
 801762a:	6003      	str	r3, [r0, #0]
 801762c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017630:	b01b      	add	sp, #108	@ 0x6c
 8017632:	bd30      	pop	{r4, r5, pc}
 8017634:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017638:	f8ad 300c 	strh.w	r3, [sp, #12]
 801763c:	bf14      	ite	ne
 801763e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017642:	4623      	moveq	r3, r4
 8017644:	9302      	str	r3, [sp, #8]
 8017646:	9305      	str	r3, [sp, #20]
 8017648:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801764c:	9100      	str	r1, [sp, #0]
 801764e:	9104      	str	r1, [sp, #16]
 8017650:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017654:	4669      	mov	r1, sp
 8017656:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017658:	f000 f9f2 	bl	8017a40 <_svfiprintf_r>
 801765c:	1c43      	adds	r3, r0, #1
 801765e:	bfbc      	itt	lt
 8017660:	238b      	movlt	r3, #139	@ 0x8b
 8017662:	602b      	strlt	r3, [r5, #0]
 8017664:	2c00      	cmp	r4, #0
 8017666:	d0e3      	beq.n	8017630 <_vsniprintf_r+0x16>
 8017668:	9b00      	ldr	r3, [sp, #0]
 801766a:	2200      	movs	r2, #0
 801766c:	701a      	strb	r2, [r3, #0]
 801766e:	e7df      	b.n	8017630 <_vsniprintf_r+0x16>

08017670 <vsniprintf>:
 8017670:	b507      	push	{r0, r1, r2, lr}
 8017672:	9300      	str	r3, [sp, #0]
 8017674:	4613      	mov	r3, r2
 8017676:	460a      	mov	r2, r1
 8017678:	4601      	mov	r1, r0
 801767a:	4803      	ldr	r0, [pc, #12]	@ (8017688 <vsniprintf+0x18>)
 801767c:	6800      	ldr	r0, [r0, #0]
 801767e:	f7ff ffcc 	bl	801761a <_vsniprintf_r>
 8017682:	b003      	add	sp, #12
 8017684:	f85d fb04 	ldr.w	pc, [sp], #4
 8017688:	20000268 	.word	0x20000268

0801768c <memcmp>:
 801768c:	b510      	push	{r4, lr}
 801768e:	3901      	subs	r1, #1
 8017690:	4402      	add	r2, r0
 8017692:	4290      	cmp	r0, r2
 8017694:	d101      	bne.n	801769a <memcmp+0xe>
 8017696:	2000      	movs	r0, #0
 8017698:	e005      	b.n	80176a6 <memcmp+0x1a>
 801769a:	7803      	ldrb	r3, [r0, #0]
 801769c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80176a0:	42a3      	cmp	r3, r4
 80176a2:	d001      	beq.n	80176a8 <memcmp+0x1c>
 80176a4:	1b18      	subs	r0, r3, r4
 80176a6:	bd10      	pop	{r4, pc}
 80176a8:	3001      	adds	r0, #1
 80176aa:	e7f2      	b.n	8017692 <memcmp+0x6>

080176ac <memmove>:
 80176ac:	4288      	cmp	r0, r1
 80176ae:	b510      	push	{r4, lr}
 80176b0:	eb01 0402 	add.w	r4, r1, r2
 80176b4:	d902      	bls.n	80176bc <memmove+0x10>
 80176b6:	4284      	cmp	r4, r0
 80176b8:	4623      	mov	r3, r4
 80176ba:	d807      	bhi.n	80176cc <memmove+0x20>
 80176bc:	1e43      	subs	r3, r0, #1
 80176be:	42a1      	cmp	r1, r4
 80176c0:	d008      	beq.n	80176d4 <memmove+0x28>
 80176c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80176c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80176ca:	e7f8      	b.n	80176be <memmove+0x12>
 80176cc:	4402      	add	r2, r0
 80176ce:	4601      	mov	r1, r0
 80176d0:	428a      	cmp	r2, r1
 80176d2:	d100      	bne.n	80176d6 <memmove+0x2a>
 80176d4:	bd10      	pop	{r4, pc}
 80176d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80176da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80176de:	e7f7      	b.n	80176d0 <memmove+0x24>

080176e0 <memset>:
 80176e0:	4402      	add	r2, r0
 80176e2:	4603      	mov	r3, r0
 80176e4:	4293      	cmp	r3, r2
 80176e6:	d100      	bne.n	80176ea <memset+0xa>
 80176e8:	4770      	bx	lr
 80176ea:	f803 1b01 	strb.w	r1, [r3], #1
 80176ee:	e7f9      	b.n	80176e4 <memset+0x4>

080176f0 <strchr>:
 80176f0:	b2c9      	uxtb	r1, r1
 80176f2:	4603      	mov	r3, r0
 80176f4:	4618      	mov	r0, r3
 80176f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80176fa:	b112      	cbz	r2, 8017702 <strchr+0x12>
 80176fc:	428a      	cmp	r2, r1
 80176fe:	d1f9      	bne.n	80176f4 <strchr+0x4>
 8017700:	4770      	bx	lr
 8017702:	2900      	cmp	r1, #0
 8017704:	bf18      	it	ne
 8017706:	2000      	movne	r0, #0
 8017708:	4770      	bx	lr

0801770a <strncmp>:
 801770a:	b510      	push	{r4, lr}
 801770c:	b16a      	cbz	r2, 801772a <strncmp+0x20>
 801770e:	3901      	subs	r1, #1
 8017710:	1884      	adds	r4, r0, r2
 8017712:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017716:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801771a:	429a      	cmp	r2, r3
 801771c:	d103      	bne.n	8017726 <strncmp+0x1c>
 801771e:	42a0      	cmp	r0, r4
 8017720:	d001      	beq.n	8017726 <strncmp+0x1c>
 8017722:	2a00      	cmp	r2, #0
 8017724:	d1f5      	bne.n	8017712 <strncmp+0x8>
 8017726:	1ad0      	subs	r0, r2, r3
 8017728:	bd10      	pop	{r4, pc}
 801772a:	4610      	mov	r0, r2
 801772c:	e7fc      	b.n	8017728 <strncmp+0x1e>

0801772e <strstr>:
 801772e:	780a      	ldrb	r2, [r1, #0]
 8017730:	b570      	push	{r4, r5, r6, lr}
 8017732:	b96a      	cbnz	r2, 8017750 <strstr+0x22>
 8017734:	bd70      	pop	{r4, r5, r6, pc}
 8017736:	429a      	cmp	r2, r3
 8017738:	d109      	bne.n	801774e <strstr+0x20>
 801773a:	460c      	mov	r4, r1
 801773c:	4605      	mov	r5, r0
 801773e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017742:	2b00      	cmp	r3, #0
 8017744:	d0f6      	beq.n	8017734 <strstr+0x6>
 8017746:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801774a:	429e      	cmp	r6, r3
 801774c:	d0f7      	beq.n	801773e <strstr+0x10>
 801774e:	3001      	adds	r0, #1
 8017750:	7803      	ldrb	r3, [r0, #0]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d1ef      	bne.n	8017736 <strstr+0x8>
 8017756:	4618      	mov	r0, r3
 8017758:	e7ec      	b.n	8017734 <strstr+0x6>
	...

0801775c <_close_r>:
 801775c:	b538      	push	{r3, r4, r5, lr}
 801775e:	4d06      	ldr	r5, [pc, #24]	@ (8017778 <_close_r+0x1c>)
 8017760:	2300      	movs	r3, #0
 8017762:	4604      	mov	r4, r0
 8017764:	4608      	mov	r0, r1
 8017766:	602b      	str	r3, [r5, #0]
 8017768:	f7eb f974 	bl	8002a54 <_close>
 801776c:	1c43      	adds	r3, r0, #1
 801776e:	d102      	bne.n	8017776 <_close_r+0x1a>
 8017770:	682b      	ldr	r3, [r5, #0]
 8017772:	b103      	cbz	r3, 8017776 <_close_r+0x1a>
 8017774:	6023      	str	r3, [r4, #0]
 8017776:	bd38      	pop	{r3, r4, r5, pc}
 8017778:	2000df34 	.word	0x2000df34

0801777c <_lseek_r>:
 801777c:	b538      	push	{r3, r4, r5, lr}
 801777e:	4d07      	ldr	r5, [pc, #28]	@ (801779c <_lseek_r+0x20>)
 8017780:	4604      	mov	r4, r0
 8017782:	4608      	mov	r0, r1
 8017784:	4611      	mov	r1, r2
 8017786:	2200      	movs	r2, #0
 8017788:	602a      	str	r2, [r5, #0]
 801778a:	461a      	mov	r2, r3
 801778c:	f7eb f989 	bl	8002aa2 <_lseek>
 8017790:	1c43      	adds	r3, r0, #1
 8017792:	d102      	bne.n	801779a <_lseek_r+0x1e>
 8017794:	682b      	ldr	r3, [r5, #0]
 8017796:	b103      	cbz	r3, 801779a <_lseek_r+0x1e>
 8017798:	6023      	str	r3, [r4, #0]
 801779a:	bd38      	pop	{r3, r4, r5, pc}
 801779c:	2000df34 	.word	0x2000df34

080177a0 <_read_r>:
 80177a0:	b538      	push	{r3, r4, r5, lr}
 80177a2:	4d07      	ldr	r5, [pc, #28]	@ (80177c0 <_read_r+0x20>)
 80177a4:	4604      	mov	r4, r0
 80177a6:	4608      	mov	r0, r1
 80177a8:	4611      	mov	r1, r2
 80177aa:	2200      	movs	r2, #0
 80177ac:	602a      	str	r2, [r5, #0]
 80177ae:	461a      	mov	r2, r3
 80177b0:	f7eb f917 	bl	80029e2 <_read>
 80177b4:	1c43      	adds	r3, r0, #1
 80177b6:	d102      	bne.n	80177be <_read_r+0x1e>
 80177b8:	682b      	ldr	r3, [r5, #0]
 80177ba:	b103      	cbz	r3, 80177be <_read_r+0x1e>
 80177bc:	6023      	str	r3, [r4, #0]
 80177be:	bd38      	pop	{r3, r4, r5, pc}
 80177c0:	2000df34 	.word	0x2000df34

080177c4 <_sbrk_r>:
 80177c4:	b538      	push	{r3, r4, r5, lr}
 80177c6:	4d06      	ldr	r5, [pc, #24]	@ (80177e0 <_sbrk_r+0x1c>)
 80177c8:	2300      	movs	r3, #0
 80177ca:	4604      	mov	r4, r0
 80177cc:	4608      	mov	r0, r1
 80177ce:	602b      	str	r3, [r5, #0]
 80177d0:	f7eb f974 	bl	8002abc <_sbrk>
 80177d4:	1c43      	adds	r3, r0, #1
 80177d6:	d102      	bne.n	80177de <_sbrk_r+0x1a>
 80177d8:	682b      	ldr	r3, [r5, #0]
 80177da:	b103      	cbz	r3, 80177de <_sbrk_r+0x1a>
 80177dc:	6023      	str	r3, [r4, #0]
 80177de:	bd38      	pop	{r3, r4, r5, pc}
 80177e0:	2000df34 	.word	0x2000df34

080177e4 <_write_r>:
 80177e4:	b538      	push	{r3, r4, r5, lr}
 80177e6:	4d07      	ldr	r5, [pc, #28]	@ (8017804 <_write_r+0x20>)
 80177e8:	4604      	mov	r4, r0
 80177ea:	4608      	mov	r0, r1
 80177ec:	4611      	mov	r1, r2
 80177ee:	2200      	movs	r2, #0
 80177f0:	602a      	str	r2, [r5, #0]
 80177f2:	461a      	mov	r2, r3
 80177f4:	f7eb f912 	bl	8002a1c <_write>
 80177f8:	1c43      	adds	r3, r0, #1
 80177fa:	d102      	bne.n	8017802 <_write_r+0x1e>
 80177fc:	682b      	ldr	r3, [r5, #0]
 80177fe:	b103      	cbz	r3, 8017802 <_write_r+0x1e>
 8017800:	6023      	str	r3, [r4, #0]
 8017802:	bd38      	pop	{r3, r4, r5, pc}
 8017804:	2000df34 	.word	0x2000df34

08017808 <__errno>:
 8017808:	4b01      	ldr	r3, [pc, #4]	@ (8017810 <__errno+0x8>)
 801780a:	6818      	ldr	r0, [r3, #0]
 801780c:	4770      	bx	lr
 801780e:	bf00      	nop
 8017810:	20000268 	.word	0x20000268

08017814 <__libc_init_array>:
 8017814:	b570      	push	{r4, r5, r6, lr}
 8017816:	4d0d      	ldr	r5, [pc, #52]	@ (801784c <__libc_init_array+0x38>)
 8017818:	4c0d      	ldr	r4, [pc, #52]	@ (8017850 <__libc_init_array+0x3c>)
 801781a:	1b64      	subs	r4, r4, r5
 801781c:	10a4      	asrs	r4, r4, #2
 801781e:	2600      	movs	r6, #0
 8017820:	42a6      	cmp	r6, r4
 8017822:	d109      	bne.n	8017838 <__libc_init_array+0x24>
 8017824:	4d0b      	ldr	r5, [pc, #44]	@ (8017854 <__libc_init_array+0x40>)
 8017826:	4c0c      	ldr	r4, [pc, #48]	@ (8017858 <__libc_init_array+0x44>)
 8017828:	f000 fef8 	bl	801861c <_init>
 801782c:	1b64      	subs	r4, r4, r5
 801782e:	10a4      	asrs	r4, r4, #2
 8017830:	2600      	movs	r6, #0
 8017832:	42a6      	cmp	r6, r4
 8017834:	d105      	bne.n	8017842 <__libc_init_array+0x2e>
 8017836:	bd70      	pop	{r4, r5, r6, pc}
 8017838:	f855 3b04 	ldr.w	r3, [r5], #4
 801783c:	4798      	blx	r3
 801783e:	3601      	adds	r6, #1
 8017840:	e7ee      	b.n	8017820 <__libc_init_array+0xc>
 8017842:	f855 3b04 	ldr.w	r3, [r5], #4
 8017846:	4798      	blx	r3
 8017848:	3601      	adds	r6, #1
 801784a:	e7f2      	b.n	8017832 <__libc_init_array+0x1e>
 801784c:	080195d4 	.word	0x080195d4
 8017850:	080195d4 	.word	0x080195d4
 8017854:	080195d4 	.word	0x080195d4
 8017858:	080195e0 	.word	0x080195e0

0801785c <__retarget_lock_init_recursive>:
 801785c:	4770      	bx	lr

0801785e <__retarget_lock_acquire_recursive>:
 801785e:	4770      	bx	lr

08017860 <__retarget_lock_release_recursive>:
 8017860:	4770      	bx	lr

08017862 <strcpy>:
 8017862:	4603      	mov	r3, r0
 8017864:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017868:	f803 2b01 	strb.w	r2, [r3], #1
 801786c:	2a00      	cmp	r2, #0
 801786e:	d1f9      	bne.n	8017864 <strcpy+0x2>
 8017870:	4770      	bx	lr

08017872 <memcpy>:
 8017872:	440a      	add	r2, r1
 8017874:	4291      	cmp	r1, r2
 8017876:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801787a:	d100      	bne.n	801787e <memcpy+0xc>
 801787c:	4770      	bx	lr
 801787e:	b510      	push	{r4, lr}
 8017880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017888:	4291      	cmp	r1, r2
 801788a:	d1f9      	bne.n	8017880 <memcpy+0xe>
 801788c:	bd10      	pop	{r4, pc}
	...

08017890 <__assert_func>:
 8017890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017892:	4614      	mov	r4, r2
 8017894:	461a      	mov	r2, r3
 8017896:	4b09      	ldr	r3, [pc, #36]	@ (80178bc <__assert_func+0x2c>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	4605      	mov	r5, r0
 801789c:	68d8      	ldr	r0, [r3, #12]
 801789e:	b954      	cbnz	r4, 80178b6 <__assert_func+0x26>
 80178a0:	4b07      	ldr	r3, [pc, #28]	@ (80178c0 <__assert_func+0x30>)
 80178a2:	461c      	mov	r4, r3
 80178a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80178a8:	9100      	str	r1, [sp, #0]
 80178aa:	462b      	mov	r3, r5
 80178ac:	4905      	ldr	r1, [pc, #20]	@ (80178c4 <__assert_func+0x34>)
 80178ae:	f000 fd3f 	bl	8018330 <fiprintf>
 80178b2:	f000 fde3 	bl	801847c <abort>
 80178b6:	4b04      	ldr	r3, [pc, #16]	@ (80178c8 <__assert_func+0x38>)
 80178b8:	e7f4      	b.n	80178a4 <__assert_func+0x14>
 80178ba:	bf00      	nop
 80178bc:	20000268 	.word	0x20000268
 80178c0:	08019597 	.word	0x08019597
 80178c4:	08019569 	.word	0x08019569
 80178c8:	0801955c 	.word	0x0801955c

080178cc <__env_lock>:
 80178cc:	4801      	ldr	r0, [pc, #4]	@ (80178d4 <__env_lock+0x8>)
 80178ce:	f7ff bfc6 	b.w	801785e <__retarget_lock_acquire_recursive>
 80178d2:	bf00      	nop
 80178d4:	2000df38 	.word	0x2000df38

080178d8 <__env_unlock>:
 80178d8:	4801      	ldr	r0, [pc, #4]	@ (80178e0 <__env_unlock+0x8>)
 80178da:	f7ff bfc1 	b.w	8017860 <__retarget_lock_release_recursive>
 80178de:	bf00      	nop
 80178e0:	2000df38 	.word	0x2000df38

080178e4 <_free_r>:
 80178e4:	b538      	push	{r3, r4, r5, lr}
 80178e6:	4605      	mov	r5, r0
 80178e8:	2900      	cmp	r1, #0
 80178ea:	d041      	beq.n	8017970 <_free_r+0x8c>
 80178ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80178f0:	1f0c      	subs	r4, r1, #4
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	bfb8      	it	lt
 80178f6:	18e4      	addlt	r4, r4, r3
 80178f8:	f7ff fc1e 	bl	8017138 <__malloc_lock>
 80178fc:	4a1d      	ldr	r2, [pc, #116]	@ (8017974 <_free_r+0x90>)
 80178fe:	6813      	ldr	r3, [r2, #0]
 8017900:	b933      	cbnz	r3, 8017910 <_free_r+0x2c>
 8017902:	6063      	str	r3, [r4, #4]
 8017904:	6014      	str	r4, [r2, #0]
 8017906:	4628      	mov	r0, r5
 8017908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801790c:	f7ff bc1a 	b.w	8017144 <__malloc_unlock>
 8017910:	42a3      	cmp	r3, r4
 8017912:	d908      	bls.n	8017926 <_free_r+0x42>
 8017914:	6820      	ldr	r0, [r4, #0]
 8017916:	1821      	adds	r1, r4, r0
 8017918:	428b      	cmp	r3, r1
 801791a:	bf01      	itttt	eq
 801791c:	6819      	ldreq	r1, [r3, #0]
 801791e:	685b      	ldreq	r3, [r3, #4]
 8017920:	1809      	addeq	r1, r1, r0
 8017922:	6021      	streq	r1, [r4, #0]
 8017924:	e7ed      	b.n	8017902 <_free_r+0x1e>
 8017926:	461a      	mov	r2, r3
 8017928:	685b      	ldr	r3, [r3, #4]
 801792a:	b10b      	cbz	r3, 8017930 <_free_r+0x4c>
 801792c:	42a3      	cmp	r3, r4
 801792e:	d9fa      	bls.n	8017926 <_free_r+0x42>
 8017930:	6811      	ldr	r1, [r2, #0]
 8017932:	1850      	adds	r0, r2, r1
 8017934:	42a0      	cmp	r0, r4
 8017936:	d10b      	bne.n	8017950 <_free_r+0x6c>
 8017938:	6820      	ldr	r0, [r4, #0]
 801793a:	4401      	add	r1, r0
 801793c:	1850      	adds	r0, r2, r1
 801793e:	4283      	cmp	r3, r0
 8017940:	6011      	str	r1, [r2, #0]
 8017942:	d1e0      	bne.n	8017906 <_free_r+0x22>
 8017944:	6818      	ldr	r0, [r3, #0]
 8017946:	685b      	ldr	r3, [r3, #4]
 8017948:	6053      	str	r3, [r2, #4]
 801794a:	4408      	add	r0, r1
 801794c:	6010      	str	r0, [r2, #0]
 801794e:	e7da      	b.n	8017906 <_free_r+0x22>
 8017950:	d902      	bls.n	8017958 <_free_r+0x74>
 8017952:	230c      	movs	r3, #12
 8017954:	602b      	str	r3, [r5, #0]
 8017956:	e7d6      	b.n	8017906 <_free_r+0x22>
 8017958:	6820      	ldr	r0, [r4, #0]
 801795a:	1821      	adds	r1, r4, r0
 801795c:	428b      	cmp	r3, r1
 801795e:	bf04      	itt	eq
 8017960:	6819      	ldreq	r1, [r3, #0]
 8017962:	685b      	ldreq	r3, [r3, #4]
 8017964:	6063      	str	r3, [r4, #4]
 8017966:	bf04      	itt	eq
 8017968:	1809      	addeq	r1, r1, r0
 801796a:	6021      	streq	r1, [r4, #0]
 801796c:	6054      	str	r4, [r2, #4]
 801796e:	e7ca      	b.n	8017906 <_free_r+0x22>
 8017970:	bd38      	pop	{r3, r4, r5, pc}
 8017972:	bf00      	nop
 8017974:	2000ddf4 	.word	0x2000ddf4

08017978 <_malloc_usable_size_r>:
 8017978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801797c:	1f18      	subs	r0, r3, #4
 801797e:	2b00      	cmp	r3, #0
 8017980:	bfbc      	itt	lt
 8017982:	580b      	ldrlt	r3, [r1, r0]
 8017984:	18c0      	addlt	r0, r0, r3
 8017986:	4770      	bx	lr

08017988 <__ssputs_r>:
 8017988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801798c:	688e      	ldr	r6, [r1, #8]
 801798e:	461f      	mov	r7, r3
 8017990:	42be      	cmp	r6, r7
 8017992:	680b      	ldr	r3, [r1, #0]
 8017994:	4682      	mov	sl, r0
 8017996:	460c      	mov	r4, r1
 8017998:	4690      	mov	r8, r2
 801799a:	d82d      	bhi.n	80179f8 <__ssputs_r+0x70>
 801799c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80179a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80179a4:	d026      	beq.n	80179f4 <__ssputs_r+0x6c>
 80179a6:	6965      	ldr	r5, [r4, #20]
 80179a8:	6909      	ldr	r1, [r1, #16]
 80179aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80179ae:	eba3 0901 	sub.w	r9, r3, r1
 80179b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80179b6:	1c7b      	adds	r3, r7, #1
 80179b8:	444b      	add	r3, r9
 80179ba:	106d      	asrs	r5, r5, #1
 80179bc:	429d      	cmp	r5, r3
 80179be:	bf38      	it	cc
 80179c0:	461d      	movcc	r5, r3
 80179c2:	0553      	lsls	r3, r2, #21
 80179c4:	d527      	bpl.n	8017a16 <__ssputs_r+0x8e>
 80179c6:	4629      	mov	r1, r5
 80179c8:	f7ff fb36 	bl	8017038 <_malloc_r>
 80179cc:	4606      	mov	r6, r0
 80179ce:	b360      	cbz	r0, 8017a2a <__ssputs_r+0xa2>
 80179d0:	6921      	ldr	r1, [r4, #16]
 80179d2:	464a      	mov	r2, r9
 80179d4:	f7ff ff4d 	bl	8017872 <memcpy>
 80179d8:	89a3      	ldrh	r3, [r4, #12]
 80179da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80179de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80179e2:	81a3      	strh	r3, [r4, #12]
 80179e4:	6126      	str	r6, [r4, #16]
 80179e6:	6165      	str	r5, [r4, #20]
 80179e8:	444e      	add	r6, r9
 80179ea:	eba5 0509 	sub.w	r5, r5, r9
 80179ee:	6026      	str	r6, [r4, #0]
 80179f0:	60a5      	str	r5, [r4, #8]
 80179f2:	463e      	mov	r6, r7
 80179f4:	42be      	cmp	r6, r7
 80179f6:	d900      	bls.n	80179fa <__ssputs_r+0x72>
 80179f8:	463e      	mov	r6, r7
 80179fa:	6820      	ldr	r0, [r4, #0]
 80179fc:	4632      	mov	r2, r6
 80179fe:	4641      	mov	r1, r8
 8017a00:	f7ff fe54 	bl	80176ac <memmove>
 8017a04:	68a3      	ldr	r3, [r4, #8]
 8017a06:	1b9b      	subs	r3, r3, r6
 8017a08:	60a3      	str	r3, [r4, #8]
 8017a0a:	6823      	ldr	r3, [r4, #0]
 8017a0c:	4433      	add	r3, r6
 8017a0e:	6023      	str	r3, [r4, #0]
 8017a10:	2000      	movs	r0, #0
 8017a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a16:	462a      	mov	r2, r5
 8017a18:	f7ff fc0e 	bl	8017238 <_realloc_r>
 8017a1c:	4606      	mov	r6, r0
 8017a1e:	2800      	cmp	r0, #0
 8017a20:	d1e0      	bne.n	80179e4 <__ssputs_r+0x5c>
 8017a22:	6921      	ldr	r1, [r4, #16]
 8017a24:	4650      	mov	r0, sl
 8017a26:	f7ff ff5d 	bl	80178e4 <_free_r>
 8017a2a:	230c      	movs	r3, #12
 8017a2c:	f8ca 3000 	str.w	r3, [sl]
 8017a30:	89a3      	ldrh	r3, [r4, #12]
 8017a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a36:	81a3      	strh	r3, [r4, #12]
 8017a38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a3c:	e7e9      	b.n	8017a12 <__ssputs_r+0x8a>
	...

08017a40 <_svfiprintf_r>:
 8017a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a44:	4698      	mov	r8, r3
 8017a46:	898b      	ldrh	r3, [r1, #12]
 8017a48:	061b      	lsls	r3, r3, #24
 8017a4a:	b09d      	sub	sp, #116	@ 0x74
 8017a4c:	4607      	mov	r7, r0
 8017a4e:	460d      	mov	r5, r1
 8017a50:	4614      	mov	r4, r2
 8017a52:	d510      	bpl.n	8017a76 <_svfiprintf_r+0x36>
 8017a54:	690b      	ldr	r3, [r1, #16]
 8017a56:	b973      	cbnz	r3, 8017a76 <_svfiprintf_r+0x36>
 8017a58:	2140      	movs	r1, #64	@ 0x40
 8017a5a:	f7ff faed 	bl	8017038 <_malloc_r>
 8017a5e:	6028      	str	r0, [r5, #0]
 8017a60:	6128      	str	r0, [r5, #16]
 8017a62:	b930      	cbnz	r0, 8017a72 <_svfiprintf_r+0x32>
 8017a64:	230c      	movs	r3, #12
 8017a66:	603b      	str	r3, [r7, #0]
 8017a68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a6c:	b01d      	add	sp, #116	@ 0x74
 8017a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a72:	2340      	movs	r3, #64	@ 0x40
 8017a74:	616b      	str	r3, [r5, #20]
 8017a76:	2300      	movs	r3, #0
 8017a78:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a7a:	2320      	movs	r3, #32
 8017a7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017a80:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a84:	2330      	movs	r3, #48	@ 0x30
 8017a86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017c24 <_svfiprintf_r+0x1e4>
 8017a8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017a8e:	f04f 0901 	mov.w	r9, #1
 8017a92:	4623      	mov	r3, r4
 8017a94:	469a      	mov	sl, r3
 8017a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a9a:	b10a      	cbz	r2, 8017aa0 <_svfiprintf_r+0x60>
 8017a9c:	2a25      	cmp	r2, #37	@ 0x25
 8017a9e:	d1f9      	bne.n	8017a94 <_svfiprintf_r+0x54>
 8017aa0:	ebba 0b04 	subs.w	fp, sl, r4
 8017aa4:	d00b      	beq.n	8017abe <_svfiprintf_r+0x7e>
 8017aa6:	465b      	mov	r3, fp
 8017aa8:	4622      	mov	r2, r4
 8017aaa:	4629      	mov	r1, r5
 8017aac:	4638      	mov	r0, r7
 8017aae:	f7ff ff6b 	bl	8017988 <__ssputs_r>
 8017ab2:	3001      	adds	r0, #1
 8017ab4:	f000 80a7 	beq.w	8017c06 <_svfiprintf_r+0x1c6>
 8017ab8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017aba:	445a      	add	r2, fp
 8017abc:	9209      	str	r2, [sp, #36]	@ 0x24
 8017abe:	f89a 3000 	ldrb.w	r3, [sl]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	f000 809f 	beq.w	8017c06 <_svfiprintf_r+0x1c6>
 8017ac8:	2300      	movs	r3, #0
 8017aca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017ace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ad2:	f10a 0a01 	add.w	sl, sl, #1
 8017ad6:	9304      	str	r3, [sp, #16]
 8017ad8:	9307      	str	r3, [sp, #28]
 8017ada:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017ade:	931a      	str	r3, [sp, #104]	@ 0x68
 8017ae0:	4654      	mov	r4, sl
 8017ae2:	2205      	movs	r2, #5
 8017ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ae8:	484e      	ldr	r0, [pc, #312]	@ (8017c24 <_svfiprintf_r+0x1e4>)
 8017aea:	f7e8 fb91 	bl	8000210 <memchr>
 8017aee:	9a04      	ldr	r2, [sp, #16]
 8017af0:	b9d8      	cbnz	r0, 8017b2a <_svfiprintf_r+0xea>
 8017af2:	06d0      	lsls	r0, r2, #27
 8017af4:	bf44      	itt	mi
 8017af6:	2320      	movmi	r3, #32
 8017af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017afc:	0711      	lsls	r1, r2, #28
 8017afe:	bf44      	itt	mi
 8017b00:	232b      	movmi	r3, #43	@ 0x2b
 8017b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b06:	f89a 3000 	ldrb.w	r3, [sl]
 8017b0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017b0c:	d015      	beq.n	8017b3a <_svfiprintf_r+0xfa>
 8017b0e:	9a07      	ldr	r2, [sp, #28]
 8017b10:	4654      	mov	r4, sl
 8017b12:	2000      	movs	r0, #0
 8017b14:	f04f 0c0a 	mov.w	ip, #10
 8017b18:	4621      	mov	r1, r4
 8017b1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b1e:	3b30      	subs	r3, #48	@ 0x30
 8017b20:	2b09      	cmp	r3, #9
 8017b22:	d94b      	bls.n	8017bbc <_svfiprintf_r+0x17c>
 8017b24:	b1b0      	cbz	r0, 8017b54 <_svfiprintf_r+0x114>
 8017b26:	9207      	str	r2, [sp, #28]
 8017b28:	e014      	b.n	8017b54 <_svfiprintf_r+0x114>
 8017b2a:	eba0 0308 	sub.w	r3, r0, r8
 8017b2e:	fa09 f303 	lsl.w	r3, r9, r3
 8017b32:	4313      	orrs	r3, r2
 8017b34:	9304      	str	r3, [sp, #16]
 8017b36:	46a2      	mov	sl, r4
 8017b38:	e7d2      	b.n	8017ae0 <_svfiprintf_r+0xa0>
 8017b3a:	9b03      	ldr	r3, [sp, #12]
 8017b3c:	1d19      	adds	r1, r3, #4
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	9103      	str	r1, [sp, #12]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	bfbb      	ittet	lt
 8017b46:	425b      	neglt	r3, r3
 8017b48:	f042 0202 	orrlt.w	r2, r2, #2
 8017b4c:	9307      	strge	r3, [sp, #28]
 8017b4e:	9307      	strlt	r3, [sp, #28]
 8017b50:	bfb8      	it	lt
 8017b52:	9204      	strlt	r2, [sp, #16]
 8017b54:	7823      	ldrb	r3, [r4, #0]
 8017b56:	2b2e      	cmp	r3, #46	@ 0x2e
 8017b58:	d10a      	bne.n	8017b70 <_svfiprintf_r+0x130>
 8017b5a:	7863      	ldrb	r3, [r4, #1]
 8017b5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8017b5e:	d132      	bne.n	8017bc6 <_svfiprintf_r+0x186>
 8017b60:	9b03      	ldr	r3, [sp, #12]
 8017b62:	1d1a      	adds	r2, r3, #4
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	9203      	str	r2, [sp, #12]
 8017b68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017b6c:	3402      	adds	r4, #2
 8017b6e:	9305      	str	r3, [sp, #20]
 8017b70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017c34 <_svfiprintf_r+0x1f4>
 8017b74:	7821      	ldrb	r1, [r4, #0]
 8017b76:	2203      	movs	r2, #3
 8017b78:	4650      	mov	r0, sl
 8017b7a:	f7e8 fb49 	bl	8000210 <memchr>
 8017b7e:	b138      	cbz	r0, 8017b90 <_svfiprintf_r+0x150>
 8017b80:	9b04      	ldr	r3, [sp, #16]
 8017b82:	eba0 000a 	sub.w	r0, r0, sl
 8017b86:	2240      	movs	r2, #64	@ 0x40
 8017b88:	4082      	lsls	r2, r0
 8017b8a:	4313      	orrs	r3, r2
 8017b8c:	3401      	adds	r4, #1
 8017b8e:	9304      	str	r3, [sp, #16]
 8017b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b94:	4824      	ldr	r0, [pc, #144]	@ (8017c28 <_svfiprintf_r+0x1e8>)
 8017b96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017b9a:	2206      	movs	r2, #6
 8017b9c:	f7e8 fb38 	bl	8000210 <memchr>
 8017ba0:	2800      	cmp	r0, #0
 8017ba2:	d036      	beq.n	8017c12 <_svfiprintf_r+0x1d2>
 8017ba4:	4b21      	ldr	r3, [pc, #132]	@ (8017c2c <_svfiprintf_r+0x1ec>)
 8017ba6:	bb1b      	cbnz	r3, 8017bf0 <_svfiprintf_r+0x1b0>
 8017ba8:	9b03      	ldr	r3, [sp, #12]
 8017baa:	3307      	adds	r3, #7
 8017bac:	f023 0307 	bic.w	r3, r3, #7
 8017bb0:	3308      	adds	r3, #8
 8017bb2:	9303      	str	r3, [sp, #12]
 8017bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017bb6:	4433      	add	r3, r6
 8017bb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8017bba:	e76a      	b.n	8017a92 <_svfiprintf_r+0x52>
 8017bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8017bc0:	460c      	mov	r4, r1
 8017bc2:	2001      	movs	r0, #1
 8017bc4:	e7a8      	b.n	8017b18 <_svfiprintf_r+0xd8>
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	3401      	adds	r4, #1
 8017bca:	9305      	str	r3, [sp, #20]
 8017bcc:	4619      	mov	r1, r3
 8017bce:	f04f 0c0a 	mov.w	ip, #10
 8017bd2:	4620      	mov	r0, r4
 8017bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017bd8:	3a30      	subs	r2, #48	@ 0x30
 8017bda:	2a09      	cmp	r2, #9
 8017bdc:	d903      	bls.n	8017be6 <_svfiprintf_r+0x1a6>
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d0c6      	beq.n	8017b70 <_svfiprintf_r+0x130>
 8017be2:	9105      	str	r1, [sp, #20]
 8017be4:	e7c4      	b.n	8017b70 <_svfiprintf_r+0x130>
 8017be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8017bea:	4604      	mov	r4, r0
 8017bec:	2301      	movs	r3, #1
 8017bee:	e7f0      	b.n	8017bd2 <_svfiprintf_r+0x192>
 8017bf0:	ab03      	add	r3, sp, #12
 8017bf2:	9300      	str	r3, [sp, #0]
 8017bf4:	462a      	mov	r2, r5
 8017bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8017c30 <_svfiprintf_r+0x1f0>)
 8017bf8:	a904      	add	r1, sp, #16
 8017bfa:	4638      	mov	r0, r7
 8017bfc:	f3af 8000 	nop.w
 8017c00:	1c42      	adds	r2, r0, #1
 8017c02:	4606      	mov	r6, r0
 8017c04:	d1d6      	bne.n	8017bb4 <_svfiprintf_r+0x174>
 8017c06:	89ab      	ldrh	r3, [r5, #12]
 8017c08:	065b      	lsls	r3, r3, #25
 8017c0a:	f53f af2d 	bmi.w	8017a68 <_svfiprintf_r+0x28>
 8017c0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017c10:	e72c      	b.n	8017a6c <_svfiprintf_r+0x2c>
 8017c12:	ab03      	add	r3, sp, #12
 8017c14:	9300      	str	r3, [sp, #0]
 8017c16:	462a      	mov	r2, r5
 8017c18:	4b05      	ldr	r3, [pc, #20]	@ (8017c30 <_svfiprintf_r+0x1f0>)
 8017c1a:	a904      	add	r1, sp, #16
 8017c1c:	4638      	mov	r0, r7
 8017c1e:	f000 f9bb 	bl	8017f98 <_printf_i>
 8017c22:	e7ed      	b.n	8017c00 <_svfiprintf_r+0x1c0>
 8017c24:	08019598 	.word	0x08019598
 8017c28:	080195a2 	.word	0x080195a2
 8017c2c:	00000000 	.word	0x00000000
 8017c30:	08017989 	.word	0x08017989
 8017c34:	0801959e 	.word	0x0801959e

08017c38 <__sfputc_r>:
 8017c38:	6893      	ldr	r3, [r2, #8]
 8017c3a:	3b01      	subs	r3, #1
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	b410      	push	{r4}
 8017c40:	6093      	str	r3, [r2, #8]
 8017c42:	da08      	bge.n	8017c56 <__sfputc_r+0x1e>
 8017c44:	6994      	ldr	r4, [r2, #24]
 8017c46:	42a3      	cmp	r3, r4
 8017c48:	db01      	blt.n	8017c4e <__sfputc_r+0x16>
 8017c4a:	290a      	cmp	r1, #10
 8017c4c:	d103      	bne.n	8017c56 <__sfputc_r+0x1e>
 8017c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c52:	f000 bb7f 	b.w	8018354 <__swbuf_r>
 8017c56:	6813      	ldr	r3, [r2, #0]
 8017c58:	1c58      	adds	r0, r3, #1
 8017c5a:	6010      	str	r0, [r2, #0]
 8017c5c:	7019      	strb	r1, [r3, #0]
 8017c5e:	4608      	mov	r0, r1
 8017c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c64:	4770      	bx	lr

08017c66 <__sfputs_r>:
 8017c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c68:	4606      	mov	r6, r0
 8017c6a:	460f      	mov	r7, r1
 8017c6c:	4614      	mov	r4, r2
 8017c6e:	18d5      	adds	r5, r2, r3
 8017c70:	42ac      	cmp	r4, r5
 8017c72:	d101      	bne.n	8017c78 <__sfputs_r+0x12>
 8017c74:	2000      	movs	r0, #0
 8017c76:	e007      	b.n	8017c88 <__sfputs_r+0x22>
 8017c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c7c:	463a      	mov	r2, r7
 8017c7e:	4630      	mov	r0, r6
 8017c80:	f7ff ffda 	bl	8017c38 <__sfputc_r>
 8017c84:	1c43      	adds	r3, r0, #1
 8017c86:	d1f3      	bne.n	8017c70 <__sfputs_r+0xa>
 8017c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017c8c <_vfiprintf_r>:
 8017c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c90:	460d      	mov	r5, r1
 8017c92:	b09d      	sub	sp, #116	@ 0x74
 8017c94:	4614      	mov	r4, r2
 8017c96:	4698      	mov	r8, r3
 8017c98:	4606      	mov	r6, r0
 8017c9a:	b118      	cbz	r0, 8017ca4 <_vfiprintf_r+0x18>
 8017c9c:	6a03      	ldr	r3, [r0, #32]
 8017c9e:	b90b      	cbnz	r3, 8017ca4 <_vfiprintf_r+0x18>
 8017ca0:	f7ff fbfc 	bl	801749c <__sinit>
 8017ca4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ca6:	07d9      	lsls	r1, r3, #31
 8017ca8:	d405      	bmi.n	8017cb6 <_vfiprintf_r+0x2a>
 8017caa:	89ab      	ldrh	r3, [r5, #12]
 8017cac:	059a      	lsls	r2, r3, #22
 8017cae:	d402      	bmi.n	8017cb6 <_vfiprintf_r+0x2a>
 8017cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017cb2:	f7ff fdd4 	bl	801785e <__retarget_lock_acquire_recursive>
 8017cb6:	89ab      	ldrh	r3, [r5, #12]
 8017cb8:	071b      	lsls	r3, r3, #28
 8017cba:	d501      	bpl.n	8017cc0 <_vfiprintf_r+0x34>
 8017cbc:	692b      	ldr	r3, [r5, #16]
 8017cbe:	b99b      	cbnz	r3, 8017ce8 <_vfiprintf_r+0x5c>
 8017cc0:	4629      	mov	r1, r5
 8017cc2:	4630      	mov	r0, r6
 8017cc4:	f000 fb84 	bl	80183d0 <__swsetup_r>
 8017cc8:	b170      	cbz	r0, 8017ce8 <_vfiprintf_r+0x5c>
 8017cca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ccc:	07dc      	lsls	r4, r3, #31
 8017cce:	d504      	bpl.n	8017cda <_vfiprintf_r+0x4e>
 8017cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017cd4:	b01d      	add	sp, #116	@ 0x74
 8017cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cda:	89ab      	ldrh	r3, [r5, #12]
 8017cdc:	0598      	lsls	r0, r3, #22
 8017cde:	d4f7      	bmi.n	8017cd0 <_vfiprintf_r+0x44>
 8017ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017ce2:	f7ff fdbd 	bl	8017860 <__retarget_lock_release_recursive>
 8017ce6:	e7f3      	b.n	8017cd0 <_vfiprintf_r+0x44>
 8017ce8:	2300      	movs	r3, #0
 8017cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8017cec:	2320      	movs	r3, #32
 8017cee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017cf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8017cf6:	2330      	movs	r3, #48	@ 0x30
 8017cf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017ea8 <_vfiprintf_r+0x21c>
 8017cfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017d00:	f04f 0901 	mov.w	r9, #1
 8017d04:	4623      	mov	r3, r4
 8017d06:	469a      	mov	sl, r3
 8017d08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d0c:	b10a      	cbz	r2, 8017d12 <_vfiprintf_r+0x86>
 8017d0e:	2a25      	cmp	r2, #37	@ 0x25
 8017d10:	d1f9      	bne.n	8017d06 <_vfiprintf_r+0x7a>
 8017d12:	ebba 0b04 	subs.w	fp, sl, r4
 8017d16:	d00b      	beq.n	8017d30 <_vfiprintf_r+0xa4>
 8017d18:	465b      	mov	r3, fp
 8017d1a:	4622      	mov	r2, r4
 8017d1c:	4629      	mov	r1, r5
 8017d1e:	4630      	mov	r0, r6
 8017d20:	f7ff ffa1 	bl	8017c66 <__sfputs_r>
 8017d24:	3001      	adds	r0, #1
 8017d26:	f000 80a7 	beq.w	8017e78 <_vfiprintf_r+0x1ec>
 8017d2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017d2c:	445a      	add	r2, fp
 8017d2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8017d30:	f89a 3000 	ldrb.w	r3, [sl]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	f000 809f 	beq.w	8017e78 <_vfiprintf_r+0x1ec>
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d44:	f10a 0a01 	add.w	sl, sl, #1
 8017d48:	9304      	str	r3, [sp, #16]
 8017d4a:	9307      	str	r3, [sp, #28]
 8017d4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017d50:	931a      	str	r3, [sp, #104]	@ 0x68
 8017d52:	4654      	mov	r4, sl
 8017d54:	2205      	movs	r2, #5
 8017d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d5a:	4853      	ldr	r0, [pc, #332]	@ (8017ea8 <_vfiprintf_r+0x21c>)
 8017d5c:	f7e8 fa58 	bl	8000210 <memchr>
 8017d60:	9a04      	ldr	r2, [sp, #16]
 8017d62:	b9d8      	cbnz	r0, 8017d9c <_vfiprintf_r+0x110>
 8017d64:	06d1      	lsls	r1, r2, #27
 8017d66:	bf44      	itt	mi
 8017d68:	2320      	movmi	r3, #32
 8017d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017d6e:	0713      	lsls	r3, r2, #28
 8017d70:	bf44      	itt	mi
 8017d72:	232b      	movmi	r3, #43	@ 0x2b
 8017d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017d78:	f89a 3000 	ldrb.w	r3, [sl]
 8017d7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d7e:	d015      	beq.n	8017dac <_vfiprintf_r+0x120>
 8017d80:	9a07      	ldr	r2, [sp, #28]
 8017d82:	4654      	mov	r4, sl
 8017d84:	2000      	movs	r0, #0
 8017d86:	f04f 0c0a 	mov.w	ip, #10
 8017d8a:	4621      	mov	r1, r4
 8017d8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d90:	3b30      	subs	r3, #48	@ 0x30
 8017d92:	2b09      	cmp	r3, #9
 8017d94:	d94b      	bls.n	8017e2e <_vfiprintf_r+0x1a2>
 8017d96:	b1b0      	cbz	r0, 8017dc6 <_vfiprintf_r+0x13a>
 8017d98:	9207      	str	r2, [sp, #28]
 8017d9a:	e014      	b.n	8017dc6 <_vfiprintf_r+0x13a>
 8017d9c:	eba0 0308 	sub.w	r3, r0, r8
 8017da0:	fa09 f303 	lsl.w	r3, r9, r3
 8017da4:	4313      	orrs	r3, r2
 8017da6:	9304      	str	r3, [sp, #16]
 8017da8:	46a2      	mov	sl, r4
 8017daa:	e7d2      	b.n	8017d52 <_vfiprintf_r+0xc6>
 8017dac:	9b03      	ldr	r3, [sp, #12]
 8017dae:	1d19      	adds	r1, r3, #4
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	9103      	str	r1, [sp, #12]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	bfbb      	ittet	lt
 8017db8:	425b      	neglt	r3, r3
 8017dba:	f042 0202 	orrlt.w	r2, r2, #2
 8017dbe:	9307      	strge	r3, [sp, #28]
 8017dc0:	9307      	strlt	r3, [sp, #28]
 8017dc2:	bfb8      	it	lt
 8017dc4:	9204      	strlt	r2, [sp, #16]
 8017dc6:	7823      	ldrb	r3, [r4, #0]
 8017dc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8017dca:	d10a      	bne.n	8017de2 <_vfiprintf_r+0x156>
 8017dcc:	7863      	ldrb	r3, [r4, #1]
 8017dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8017dd0:	d132      	bne.n	8017e38 <_vfiprintf_r+0x1ac>
 8017dd2:	9b03      	ldr	r3, [sp, #12]
 8017dd4:	1d1a      	adds	r2, r3, #4
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	9203      	str	r2, [sp, #12]
 8017dda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017dde:	3402      	adds	r4, #2
 8017de0:	9305      	str	r3, [sp, #20]
 8017de2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017eb8 <_vfiprintf_r+0x22c>
 8017de6:	7821      	ldrb	r1, [r4, #0]
 8017de8:	2203      	movs	r2, #3
 8017dea:	4650      	mov	r0, sl
 8017dec:	f7e8 fa10 	bl	8000210 <memchr>
 8017df0:	b138      	cbz	r0, 8017e02 <_vfiprintf_r+0x176>
 8017df2:	9b04      	ldr	r3, [sp, #16]
 8017df4:	eba0 000a 	sub.w	r0, r0, sl
 8017df8:	2240      	movs	r2, #64	@ 0x40
 8017dfa:	4082      	lsls	r2, r0
 8017dfc:	4313      	orrs	r3, r2
 8017dfe:	3401      	adds	r4, #1
 8017e00:	9304      	str	r3, [sp, #16]
 8017e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e06:	4829      	ldr	r0, [pc, #164]	@ (8017eac <_vfiprintf_r+0x220>)
 8017e08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017e0c:	2206      	movs	r2, #6
 8017e0e:	f7e8 f9ff 	bl	8000210 <memchr>
 8017e12:	2800      	cmp	r0, #0
 8017e14:	d03f      	beq.n	8017e96 <_vfiprintf_r+0x20a>
 8017e16:	4b26      	ldr	r3, [pc, #152]	@ (8017eb0 <_vfiprintf_r+0x224>)
 8017e18:	bb1b      	cbnz	r3, 8017e62 <_vfiprintf_r+0x1d6>
 8017e1a:	9b03      	ldr	r3, [sp, #12]
 8017e1c:	3307      	adds	r3, #7
 8017e1e:	f023 0307 	bic.w	r3, r3, #7
 8017e22:	3308      	adds	r3, #8
 8017e24:	9303      	str	r3, [sp, #12]
 8017e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e28:	443b      	add	r3, r7
 8017e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e2c:	e76a      	b.n	8017d04 <_vfiprintf_r+0x78>
 8017e2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e32:	460c      	mov	r4, r1
 8017e34:	2001      	movs	r0, #1
 8017e36:	e7a8      	b.n	8017d8a <_vfiprintf_r+0xfe>
 8017e38:	2300      	movs	r3, #0
 8017e3a:	3401      	adds	r4, #1
 8017e3c:	9305      	str	r3, [sp, #20]
 8017e3e:	4619      	mov	r1, r3
 8017e40:	f04f 0c0a 	mov.w	ip, #10
 8017e44:	4620      	mov	r0, r4
 8017e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e4a:	3a30      	subs	r2, #48	@ 0x30
 8017e4c:	2a09      	cmp	r2, #9
 8017e4e:	d903      	bls.n	8017e58 <_vfiprintf_r+0x1cc>
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d0c6      	beq.n	8017de2 <_vfiprintf_r+0x156>
 8017e54:	9105      	str	r1, [sp, #20]
 8017e56:	e7c4      	b.n	8017de2 <_vfiprintf_r+0x156>
 8017e58:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e5c:	4604      	mov	r4, r0
 8017e5e:	2301      	movs	r3, #1
 8017e60:	e7f0      	b.n	8017e44 <_vfiprintf_r+0x1b8>
 8017e62:	ab03      	add	r3, sp, #12
 8017e64:	9300      	str	r3, [sp, #0]
 8017e66:	462a      	mov	r2, r5
 8017e68:	4b12      	ldr	r3, [pc, #72]	@ (8017eb4 <_vfiprintf_r+0x228>)
 8017e6a:	a904      	add	r1, sp, #16
 8017e6c:	4630      	mov	r0, r6
 8017e6e:	f3af 8000 	nop.w
 8017e72:	4607      	mov	r7, r0
 8017e74:	1c78      	adds	r0, r7, #1
 8017e76:	d1d6      	bne.n	8017e26 <_vfiprintf_r+0x19a>
 8017e78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017e7a:	07d9      	lsls	r1, r3, #31
 8017e7c:	d405      	bmi.n	8017e8a <_vfiprintf_r+0x1fe>
 8017e7e:	89ab      	ldrh	r3, [r5, #12]
 8017e80:	059a      	lsls	r2, r3, #22
 8017e82:	d402      	bmi.n	8017e8a <_vfiprintf_r+0x1fe>
 8017e84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017e86:	f7ff fceb 	bl	8017860 <__retarget_lock_release_recursive>
 8017e8a:	89ab      	ldrh	r3, [r5, #12]
 8017e8c:	065b      	lsls	r3, r3, #25
 8017e8e:	f53f af1f 	bmi.w	8017cd0 <_vfiprintf_r+0x44>
 8017e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e94:	e71e      	b.n	8017cd4 <_vfiprintf_r+0x48>
 8017e96:	ab03      	add	r3, sp, #12
 8017e98:	9300      	str	r3, [sp, #0]
 8017e9a:	462a      	mov	r2, r5
 8017e9c:	4b05      	ldr	r3, [pc, #20]	@ (8017eb4 <_vfiprintf_r+0x228>)
 8017e9e:	a904      	add	r1, sp, #16
 8017ea0:	4630      	mov	r0, r6
 8017ea2:	f000 f879 	bl	8017f98 <_printf_i>
 8017ea6:	e7e4      	b.n	8017e72 <_vfiprintf_r+0x1e6>
 8017ea8:	08019598 	.word	0x08019598
 8017eac:	080195a2 	.word	0x080195a2
 8017eb0:	00000000 	.word	0x00000000
 8017eb4:	08017c67 	.word	0x08017c67
 8017eb8:	0801959e 	.word	0x0801959e

08017ebc <_printf_common>:
 8017ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ec0:	4616      	mov	r6, r2
 8017ec2:	4698      	mov	r8, r3
 8017ec4:	688a      	ldr	r2, [r1, #8]
 8017ec6:	690b      	ldr	r3, [r1, #16]
 8017ec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017ecc:	4293      	cmp	r3, r2
 8017ece:	bfb8      	it	lt
 8017ed0:	4613      	movlt	r3, r2
 8017ed2:	6033      	str	r3, [r6, #0]
 8017ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017ed8:	4607      	mov	r7, r0
 8017eda:	460c      	mov	r4, r1
 8017edc:	b10a      	cbz	r2, 8017ee2 <_printf_common+0x26>
 8017ede:	3301      	adds	r3, #1
 8017ee0:	6033      	str	r3, [r6, #0]
 8017ee2:	6823      	ldr	r3, [r4, #0]
 8017ee4:	0699      	lsls	r1, r3, #26
 8017ee6:	bf42      	ittt	mi
 8017ee8:	6833      	ldrmi	r3, [r6, #0]
 8017eea:	3302      	addmi	r3, #2
 8017eec:	6033      	strmi	r3, [r6, #0]
 8017eee:	6825      	ldr	r5, [r4, #0]
 8017ef0:	f015 0506 	ands.w	r5, r5, #6
 8017ef4:	d106      	bne.n	8017f04 <_printf_common+0x48>
 8017ef6:	f104 0a19 	add.w	sl, r4, #25
 8017efa:	68e3      	ldr	r3, [r4, #12]
 8017efc:	6832      	ldr	r2, [r6, #0]
 8017efe:	1a9b      	subs	r3, r3, r2
 8017f00:	42ab      	cmp	r3, r5
 8017f02:	dc26      	bgt.n	8017f52 <_printf_common+0x96>
 8017f04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017f08:	6822      	ldr	r2, [r4, #0]
 8017f0a:	3b00      	subs	r3, #0
 8017f0c:	bf18      	it	ne
 8017f0e:	2301      	movne	r3, #1
 8017f10:	0692      	lsls	r2, r2, #26
 8017f12:	d42b      	bmi.n	8017f6c <_printf_common+0xb0>
 8017f14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017f18:	4641      	mov	r1, r8
 8017f1a:	4638      	mov	r0, r7
 8017f1c:	47c8      	blx	r9
 8017f1e:	3001      	adds	r0, #1
 8017f20:	d01e      	beq.n	8017f60 <_printf_common+0xa4>
 8017f22:	6823      	ldr	r3, [r4, #0]
 8017f24:	6922      	ldr	r2, [r4, #16]
 8017f26:	f003 0306 	and.w	r3, r3, #6
 8017f2a:	2b04      	cmp	r3, #4
 8017f2c:	bf02      	ittt	eq
 8017f2e:	68e5      	ldreq	r5, [r4, #12]
 8017f30:	6833      	ldreq	r3, [r6, #0]
 8017f32:	1aed      	subeq	r5, r5, r3
 8017f34:	68a3      	ldr	r3, [r4, #8]
 8017f36:	bf0c      	ite	eq
 8017f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017f3c:	2500      	movne	r5, #0
 8017f3e:	4293      	cmp	r3, r2
 8017f40:	bfc4      	itt	gt
 8017f42:	1a9b      	subgt	r3, r3, r2
 8017f44:	18ed      	addgt	r5, r5, r3
 8017f46:	2600      	movs	r6, #0
 8017f48:	341a      	adds	r4, #26
 8017f4a:	42b5      	cmp	r5, r6
 8017f4c:	d11a      	bne.n	8017f84 <_printf_common+0xc8>
 8017f4e:	2000      	movs	r0, #0
 8017f50:	e008      	b.n	8017f64 <_printf_common+0xa8>
 8017f52:	2301      	movs	r3, #1
 8017f54:	4652      	mov	r2, sl
 8017f56:	4641      	mov	r1, r8
 8017f58:	4638      	mov	r0, r7
 8017f5a:	47c8      	blx	r9
 8017f5c:	3001      	adds	r0, #1
 8017f5e:	d103      	bne.n	8017f68 <_printf_common+0xac>
 8017f60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f68:	3501      	adds	r5, #1
 8017f6a:	e7c6      	b.n	8017efa <_printf_common+0x3e>
 8017f6c:	18e1      	adds	r1, r4, r3
 8017f6e:	1c5a      	adds	r2, r3, #1
 8017f70:	2030      	movs	r0, #48	@ 0x30
 8017f72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017f76:	4422      	add	r2, r4
 8017f78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017f7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017f80:	3302      	adds	r3, #2
 8017f82:	e7c7      	b.n	8017f14 <_printf_common+0x58>
 8017f84:	2301      	movs	r3, #1
 8017f86:	4622      	mov	r2, r4
 8017f88:	4641      	mov	r1, r8
 8017f8a:	4638      	mov	r0, r7
 8017f8c:	47c8      	blx	r9
 8017f8e:	3001      	adds	r0, #1
 8017f90:	d0e6      	beq.n	8017f60 <_printf_common+0xa4>
 8017f92:	3601      	adds	r6, #1
 8017f94:	e7d9      	b.n	8017f4a <_printf_common+0x8e>
	...

08017f98 <_printf_i>:
 8017f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017f9c:	7e0f      	ldrb	r7, [r1, #24]
 8017f9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017fa0:	2f78      	cmp	r7, #120	@ 0x78
 8017fa2:	4691      	mov	r9, r2
 8017fa4:	4680      	mov	r8, r0
 8017fa6:	460c      	mov	r4, r1
 8017fa8:	469a      	mov	sl, r3
 8017faa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017fae:	d807      	bhi.n	8017fc0 <_printf_i+0x28>
 8017fb0:	2f62      	cmp	r7, #98	@ 0x62
 8017fb2:	d80a      	bhi.n	8017fca <_printf_i+0x32>
 8017fb4:	2f00      	cmp	r7, #0
 8017fb6:	f000 80d2 	beq.w	801815e <_printf_i+0x1c6>
 8017fba:	2f58      	cmp	r7, #88	@ 0x58
 8017fbc:	f000 80b9 	beq.w	8018132 <_printf_i+0x19a>
 8017fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017fc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017fc8:	e03a      	b.n	8018040 <_printf_i+0xa8>
 8017fca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017fce:	2b15      	cmp	r3, #21
 8017fd0:	d8f6      	bhi.n	8017fc0 <_printf_i+0x28>
 8017fd2:	a101      	add	r1, pc, #4	@ (adr r1, 8017fd8 <_printf_i+0x40>)
 8017fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017fd8:	08018031 	.word	0x08018031
 8017fdc:	08018045 	.word	0x08018045
 8017fe0:	08017fc1 	.word	0x08017fc1
 8017fe4:	08017fc1 	.word	0x08017fc1
 8017fe8:	08017fc1 	.word	0x08017fc1
 8017fec:	08017fc1 	.word	0x08017fc1
 8017ff0:	08018045 	.word	0x08018045
 8017ff4:	08017fc1 	.word	0x08017fc1
 8017ff8:	08017fc1 	.word	0x08017fc1
 8017ffc:	08017fc1 	.word	0x08017fc1
 8018000:	08017fc1 	.word	0x08017fc1
 8018004:	08018145 	.word	0x08018145
 8018008:	0801806f 	.word	0x0801806f
 801800c:	080180ff 	.word	0x080180ff
 8018010:	08017fc1 	.word	0x08017fc1
 8018014:	08017fc1 	.word	0x08017fc1
 8018018:	08018167 	.word	0x08018167
 801801c:	08017fc1 	.word	0x08017fc1
 8018020:	0801806f 	.word	0x0801806f
 8018024:	08017fc1 	.word	0x08017fc1
 8018028:	08017fc1 	.word	0x08017fc1
 801802c:	08018107 	.word	0x08018107
 8018030:	6833      	ldr	r3, [r6, #0]
 8018032:	1d1a      	adds	r2, r3, #4
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	6032      	str	r2, [r6, #0]
 8018038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801803c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018040:	2301      	movs	r3, #1
 8018042:	e09d      	b.n	8018180 <_printf_i+0x1e8>
 8018044:	6833      	ldr	r3, [r6, #0]
 8018046:	6820      	ldr	r0, [r4, #0]
 8018048:	1d19      	adds	r1, r3, #4
 801804a:	6031      	str	r1, [r6, #0]
 801804c:	0606      	lsls	r6, r0, #24
 801804e:	d501      	bpl.n	8018054 <_printf_i+0xbc>
 8018050:	681d      	ldr	r5, [r3, #0]
 8018052:	e003      	b.n	801805c <_printf_i+0xc4>
 8018054:	0645      	lsls	r5, r0, #25
 8018056:	d5fb      	bpl.n	8018050 <_printf_i+0xb8>
 8018058:	f9b3 5000 	ldrsh.w	r5, [r3]
 801805c:	2d00      	cmp	r5, #0
 801805e:	da03      	bge.n	8018068 <_printf_i+0xd0>
 8018060:	232d      	movs	r3, #45	@ 0x2d
 8018062:	426d      	negs	r5, r5
 8018064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018068:	4859      	ldr	r0, [pc, #356]	@ (80181d0 <_printf_i+0x238>)
 801806a:	230a      	movs	r3, #10
 801806c:	e011      	b.n	8018092 <_printf_i+0xfa>
 801806e:	6821      	ldr	r1, [r4, #0]
 8018070:	6833      	ldr	r3, [r6, #0]
 8018072:	0608      	lsls	r0, r1, #24
 8018074:	f853 5b04 	ldr.w	r5, [r3], #4
 8018078:	d402      	bmi.n	8018080 <_printf_i+0xe8>
 801807a:	0649      	lsls	r1, r1, #25
 801807c:	bf48      	it	mi
 801807e:	b2ad      	uxthmi	r5, r5
 8018080:	2f6f      	cmp	r7, #111	@ 0x6f
 8018082:	4853      	ldr	r0, [pc, #332]	@ (80181d0 <_printf_i+0x238>)
 8018084:	6033      	str	r3, [r6, #0]
 8018086:	bf14      	ite	ne
 8018088:	230a      	movne	r3, #10
 801808a:	2308      	moveq	r3, #8
 801808c:	2100      	movs	r1, #0
 801808e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018092:	6866      	ldr	r6, [r4, #4]
 8018094:	60a6      	str	r6, [r4, #8]
 8018096:	2e00      	cmp	r6, #0
 8018098:	bfa2      	ittt	ge
 801809a:	6821      	ldrge	r1, [r4, #0]
 801809c:	f021 0104 	bicge.w	r1, r1, #4
 80180a0:	6021      	strge	r1, [r4, #0]
 80180a2:	b90d      	cbnz	r5, 80180a8 <_printf_i+0x110>
 80180a4:	2e00      	cmp	r6, #0
 80180a6:	d04b      	beq.n	8018140 <_printf_i+0x1a8>
 80180a8:	4616      	mov	r6, r2
 80180aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80180ae:	fb03 5711 	mls	r7, r3, r1, r5
 80180b2:	5dc7      	ldrb	r7, [r0, r7]
 80180b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80180b8:	462f      	mov	r7, r5
 80180ba:	42bb      	cmp	r3, r7
 80180bc:	460d      	mov	r5, r1
 80180be:	d9f4      	bls.n	80180aa <_printf_i+0x112>
 80180c0:	2b08      	cmp	r3, #8
 80180c2:	d10b      	bne.n	80180dc <_printf_i+0x144>
 80180c4:	6823      	ldr	r3, [r4, #0]
 80180c6:	07df      	lsls	r7, r3, #31
 80180c8:	d508      	bpl.n	80180dc <_printf_i+0x144>
 80180ca:	6923      	ldr	r3, [r4, #16]
 80180cc:	6861      	ldr	r1, [r4, #4]
 80180ce:	4299      	cmp	r1, r3
 80180d0:	bfde      	ittt	le
 80180d2:	2330      	movle	r3, #48	@ 0x30
 80180d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80180d8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80180dc:	1b92      	subs	r2, r2, r6
 80180de:	6122      	str	r2, [r4, #16]
 80180e0:	f8cd a000 	str.w	sl, [sp]
 80180e4:	464b      	mov	r3, r9
 80180e6:	aa03      	add	r2, sp, #12
 80180e8:	4621      	mov	r1, r4
 80180ea:	4640      	mov	r0, r8
 80180ec:	f7ff fee6 	bl	8017ebc <_printf_common>
 80180f0:	3001      	adds	r0, #1
 80180f2:	d14a      	bne.n	801818a <_printf_i+0x1f2>
 80180f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80180f8:	b004      	add	sp, #16
 80180fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180fe:	6823      	ldr	r3, [r4, #0]
 8018100:	f043 0320 	orr.w	r3, r3, #32
 8018104:	6023      	str	r3, [r4, #0]
 8018106:	4833      	ldr	r0, [pc, #204]	@ (80181d4 <_printf_i+0x23c>)
 8018108:	2778      	movs	r7, #120	@ 0x78
 801810a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801810e:	6823      	ldr	r3, [r4, #0]
 8018110:	6831      	ldr	r1, [r6, #0]
 8018112:	061f      	lsls	r7, r3, #24
 8018114:	f851 5b04 	ldr.w	r5, [r1], #4
 8018118:	d402      	bmi.n	8018120 <_printf_i+0x188>
 801811a:	065f      	lsls	r7, r3, #25
 801811c:	bf48      	it	mi
 801811e:	b2ad      	uxthmi	r5, r5
 8018120:	6031      	str	r1, [r6, #0]
 8018122:	07d9      	lsls	r1, r3, #31
 8018124:	bf44      	itt	mi
 8018126:	f043 0320 	orrmi.w	r3, r3, #32
 801812a:	6023      	strmi	r3, [r4, #0]
 801812c:	b11d      	cbz	r5, 8018136 <_printf_i+0x19e>
 801812e:	2310      	movs	r3, #16
 8018130:	e7ac      	b.n	801808c <_printf_i+0xf4>
 8018132:	4827      	ldr	r0, [pc, #156]	@ (80181d0 <_printf_i+0x238>)
 8018134:	e7e9      	b.n	801810a <_printf_i+0x172>
 8018136:	6823      	ldr	r3, [r4, #0]
 8018138:	f023 0320 	bic.w	r3, r3, #32
 801813c:	6023      	str	r3, [r4, #0]
 801813e:	e7f6      	b.n	801812e <_printf_i+0x196>
 8018140:	4616      	mov	r6, r2
 8018142:	e7bd      	b.n	80180c0 <_printf_i+0x128>
 8018144:	6833      	ldr	r3, [r6, #0]
 8018146:	6825      	ldr	r5, [r4, #0]
 8018148:	6961      	ldr	r1, [r4, #20]
 801814a:	1d18      	adds	r0, r3, #4
 801814c:	6030      	str	r0, [r6, #0]
 801814e:	062e      	lsls	r6, r5, #24
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	d501      	bpl.n	8018158 <_printf_i+0x1c0>
 8018154:	6019      	str	r1, [r3, #0]
 8018156:	e002      	b.n	801815e <_printf_i+0x1c6>
 8018158:	0668      	lsls	r0, r5, #25
 801815a:	d5fb      	bpl.n	8018154 <_printf_i+0x1bc>
 801815c:	8019      	strh	r1, [r3, #0]
 801815e:	2300      	movs	r3, #0
 8018160:	6123      	str	r3, [r4, #16]
 8018162:	4616      	mov	r6, r2
 8018164:	e7bc      	b.n	80180e0 <_printf_i+0x148>
 8018166:	6833      	ldr	r3, [r6, #0]
 8018168:	1d1a      	adds	r2, r3, #4
 801816a:	6032      	str	r2, [r6, #0]
 801816c:	681e      	ldr	r6, [r3, #0]
 801816e:	6862      	ldr	r2, [r4, #4]
 8018170:	2100      	movs	r1, #0
 8018172:	4630      	mov	r0, r6
 8018174:	f7e8 f84c 	bl	8000210 <memchr>
 8018178:	b108      	cbz	r0, 801817e <_printf_i+0x1e6>
 801817a:	1b80      	subs	r0, r0, r6
 801817c:	6060      	str	r0, [r4, #4]
 801817e:	6863      	ldr	r3, [r4, #4]
 8018180:	6123      	str	r3, [r4, #16]
 8018182:	2300      	movs	r3, #0
 8018184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018188:	e7aa      	b.n	80180e0 <_printf_i+0x148>
 801818a:	6923      	ldr	r3, [r4, #16]
 801818c:	4632      	mov	r2, r6
 801818e:	4649      	mov	r1, r9
 8018190:	4640      	mov	r0, r8
 8018192:	47d0      	blx	sl
 8018194:	3001      	adds	r0, #1
 8018196:	d0ad      	beq.n	80180f4 <_printf_i+0x15c>
 8018198:	6823      	ldr	r3, [r4, #0]
 801819a:	079b      	lsls	r3, r3, #30
 801819c:	d413      	bmi.n	80181c6 <_printf_i+0x22e>
 801819e:	68e0      	ldr	r0, [r4, #12]
 80181a0:	9b03      	ldr	r3, [sp, #12]
 80181a2:	4298      	cmp	r0, r3
 80181a4:	bfb8      	it	lt
 80181a6:	4618      	movlt	r0, r3
 80181a8:	e7a6      	b.n	80180f8 <_printf_i+0x160>
 80181aa:	2301      	movs	r3, #1
 80181ac:	4632      	mov	r2, r6
 80181ae:	4649      	mov	r1, r9
 80181b0:	4640      	mov	r0, r8
 80181b2:	47d0      	blx	sl
 80181b4:	3001      	adds	r0, #1
 80181b6:	d09d      	beq.n	80180f4 <_printf_i+0x15c>
 80181b8:	3501      	adds	r5, #1
 80181ba:	68e3      	ldr	r3, [r4, #12]
 80181bc:	9903      	ldr	r1, [sp, #12]
 80181be:	1a5b      	subs	r3, r3, r1
 80181c0:	42ab      	cmp	r3, r5
 80181c2:	dcf2      	bgt.n	80181aa <_printf_i+0x212>
 80181c4:	e7eb      	b.n	801819e <_printf_i+0x206>
 80181c6:	2500      	movs	r5, #0
 80181c8:	f104 0619 	add.w	r6, r4, #25
 80181cc:	e7f5      	b.n	80181ba <_printf_i+0x222>
 80181ce:	bf00      	nop
 80181d0:	080195a9 	.word	0x080195a9
 80181d4:	080195ba 	.word	0x080195ba

080181d8 <__sflush_r>:
 80181d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80181dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181e0:	0716      	lsls	r6, r2, #28
 80181e2:	4605      	mov	r5, r0
 80181e4:	460c      	mov	r4, r1
 80181e6:	d454      	bmi.n	8018292 <__sflush_r+0xba>
 80181e8:	684b      	ldr	r3, [r1, #4]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	dc02      	bgt.n	80181f4 <__sflush_r+0x1c>
 80181ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	dd48      	ble.n	8018286 <__sflush_r+0xae>
 80181f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80181f6:	2e00      	cmp	r6, #0
 80181f8:	d045      	beq.n	8018286 <__sflush_r+0xae>
 80181fa:	2300      	movs	r3, #0
 80181fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018200:	682f      	ldr	r7, [r5, #0]
 8018202:	6a21      	ldr	r1, [r4, #32]
 8018204:	602b      	str	r3, [r5, #0]
 8018206:	d030      	beq.n	801826a <__sflush_r+0x92>
 8018208:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801820a:	89a3      	ldrh	r3, [r4, #12]
 801820c:	0759      	lsls	r1, r3, #29
 801820e:	d505      	bpl.n	801821c <__sflush_r+0x44>
 8018210:	6863      	ldr	r3, [r4, #4]
 8018212:	1ad2      	subs	r2, r2, r3
 8018214:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018216:	b10b      	cbz	r3, 801821c <__sflush_r+0x44>
 8018218:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801821a:	1ad2      	subs	r2, r2, r3
 801821c:	2300      	movs	r3, #0
 801821e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018220:	6a21      	ldr	r1, [r4, #32]
 8018222:	4628      	mov	r0, r5
 8018224:	47b0      	blx	r6
 8018226:	1c43      	adds	r3, r0, #1
 8018228:	89a3      	ldrh	r3, [r4, #12]
 801822a:	d106      	bne.n	801823a <__sflush_r+0x62>
 801822c:	6829      	ldr	r1, [r5, #0]
 801822e:	291d      	cmp	r1, #29
 8018230:	d82b      	bhi.n	801828a <__sflush_r+0xb2>
 8018232:	4a2a      	ldr	r2, [pc, #168]	@ (80182dc <__sflush_r+0x104>)
 8018234:	410a      	asrs	r2, r1
 8018236:	07d6      	lsls	r6, r2, #31
 8018238:	d427      	bmi.n	801828a <__sflush_r+0xb2>
 801823a:	2200      	movs	r2, #0
 801823c:	6062      	str	r2, [r4, #4]
 801823e:	04d9      	lsls	r1, r3, #19
 8018240:	6922      	ldr	r2, [r4, #16]
 8018242:	6022      	str	r2, [r4, #0]
 8018244:	d504      	bpl.n	8018250 <__sflush_r+0x78>
 8018246:	1c42      	adds	r2, r0, #1
 8018248:	d101      	bne.n	801824e <__sflush_r+0x76>
 801824a:	682b      	ldr	r3, [r5, #0]
 801824c:	b903      	cbnz	r3, 8018250 <__sflush_r+0x78>
 801824e:	6560      	str	r0, [r4, #84]	@ 0x54
 8018250:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018252:	602f      	str	r7, [r5, #0]
 8018254:	b1b9      	cbz	r1, 8018286 <__sflush_r+0xae>
 8018256:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801825a:	4299      	cmp	r1, r3
 801825c:	d002      	beq.n	8018264 <__sflush_r+0x8c>
 801825e:	4628      	mov	r0, r5
 8018260:	f7ff fb40 	bl	80178e4 <_free_r>
 8018264:	2300      	movs	r3, #0
 8018266:	6363      	str	r3, [r4, #52]	@ 0x34
 8018268:	e00d      	b.n	8018286 <__sflush_r+0xae>
 801826a:	2301      	movs	r3, #1
 801826c:	4628      	mov	r0, r5
 801826e:	47b0      	blx	r6
 8018270:	4602      	mov	r2, r0
 8018272:	1c50      	adds	r0, r2, #1
 8018274:	d1c9      	bne.n	801820a <__sflush_r+0x32>
 8018276:	682b      	ldr	r3, [r5, #0]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d0c6      	beq.n	801820a <__sflush_r+0x32>
 801827c:	2b1d      	cmp	r3, #29
 801827e:	d001      	beq.n	8018284 <__sflush_r+0xac>
 8018280:	2b16      	cmp	r3, #22
 8018282:	d11e      	bne.n	80182c2 <__sflush_r+0xea>
 8018284:	602f      	str	r7, [r5, #0]
 8018286:	2000      	movs	r0, #0
 8018288:	e022      	b.n	80182d0 <__sflush_r+0xf8>
 801828a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801828e:	b21b      	sxth	r3, r3
 8018290:	e01b      	b.n	80182ca <__sflush_r+0xf2>
 8018292:	690f      	ldr	r7, [r1, #16]
 8018294:	2f00      	cmp	r7, #0
 8018296:	d0f6      	beq.n	8018286 <__sflush_r+0xae>
 8018298:	0793      	lsls	r3, r2, #30
 801829a:	680e      	ldr	r6, [r1, #0]
 801829c:	bf08      	it	eq
 801829e:	694b      	ldreq	r3, [r1, #20]
 80182a0:	600f      	str	r7, [r1, #0]
 80182a2:	bf18      	it	ne
 80182a4:	2300      	movne	r3, #0
 80182a6:	eba6 0807 	sub.w	r8, r6, r7
 80182aa:	608b      	str	r3, [r1, #8]
 80182ac:	f1b8 0f00 	cmp.w	r8, #0
 80182b0:	dde9      	ble.n	8018286 <__sflush_r+0xae>
 80182b2:	6a21      	ldr	r1, [r4, #32]
 80182b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80182b6:	4643      	mov	r3, r8
 80182b8:	463a      	mov	r2, r7
 80182ba:	4628      	mov	r0, r5
 80182bc:	47b0      	blx	r6
 80182be:	2800      	cmp	r0, #0
 80182c0:	dc08      	bgt.n	80182d4 <__sflush_r+0xfc>
 80182c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80182ca:	81a3      	strh	r3, [r4, #12]
 80182cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80182d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182d4:	4407      	add	r7, r0
 80182d6:	eba8 0800 	sub.w	r8, r8, r0
 80182da:	e7e7      	b.n	80182ac <__sflush_r+0xd4>
 80182dc:	dfbffffe 	.word	0xdfbffffe

080182e0 <_fflush_r>:
 80182e0:	b538      	push	{r3, r4, r5, lr}
 80182e2:	690b      	ldr	r3, [r1, #16]
 80182e4:	4605      	mov	r5, r0
 80182e6:	460c      	mov	r4, r1
 80182e8:	b913      	cbnz	r3, 80182f0 <_fflush_r+0x10>
 80182ea:	2500      	movs	r5, #0
 80182ec:	4628      	mov	r0, r5
 80182ee:	bd38      	pop	{r3, r4, r5, pc}
 80182f0:	b118      	cbz	r0, 80182fa <_fflush_r+0x1a>
 80182f2:	6a03      	ldr	r3, [r0, #32]
 80182f4:	b90b      	cbnz	r3, 80182fa <_fflush_r+0x1a>
 80182f6:	f7ff f8d1 	bl	801749c <__sinit>
 80182fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d0f3      	beq.n	80182ea <_fflush_r+0xa>
 8018302:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018304:	07d0      	lsls	r0, r2, #31
 8018306:	d404      	bmi.n	8018312 <_fflush_r+0x32>
 8018308:	0599      	lsls	r1, r3, #22
 801830a:	d402      	bmi.n	8018312 <_fflush_r+0x32>
 801830c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801830e:	f7ff faa6 	bl	801785e <__retarget_lock_acquire_recursive>
 8018312:	4628      	mov	r0, r5
 8018314:	4621      	mov	r1, r4
 8018316:	f7ff ff5f 	bl	80181d8 <__sflush_r>
 801831a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801831c:	07da      	lsls	r2, r3, #31
 801831e:	4605      	mov	r5, r0
 8018320:	d4e4      	bmi.n	80182ec <_fflush_r+0xc>
 8018322:	89a3      	ldrh	r3, [r4, #12]
 8018324:	059b      	lsls	r3, r3, #22
 8018326:	d4e1      	bmi.n	80182ec <_fflush_r+0xc>
 8018328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801832a:	f7ff fa99 	bl	8017860 <__retarget_lock_release_recursive>
 801832e:	e7dd      	b.n	80182ec <_fflush_r+0xc>

08018330 <fiprintf>:
 8018330:	b40e      	push	{r1, r2, r3}
 8018332:	b503      	push	{r0, r1, lr}
 8018334:	4601      	mov	r1, r0
 8018336:	ab03      	add	r3, sp, #12
 8018338:	4805      	ldr	r0, [pc, #20]	@ (8018350 <fiprintf+0x20>)
 801833a:	f853 2b04 	ldr.w	r2, [r3], #4
 801833e:	6800      	ldr	r0, [r0, #0]
 8018340:	9301      	str	r3, [sp, #4]
 8018342:	f7ff fca3 	bl	8017c8c <_vfiprintf_r>
 8018346:	b002      	add	sp, #8
 8018348:	f85d eb04 	ldr.w	lr, [sp], #4
 801834c:	b003      	add	sp, #12
 801834e:	4770      	bx	lr
 8018350:	20000268 	.word	0x20000268

08018354 <__swbuf_r>:
 8018354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018356:	460e      	mov	r6, r1
 8018358:	4614      	mov	r4, r2
 801835a:	4605      	mov	r5, r0
 801835c:	b118      	cbz	r0, 8018366 <__swbuf_r+0x12>
 801835e:	6a03      	ldr	r3, [r0, #32]
 8018360:	b90b      	cbnz	r3, 8018366 <__swbuf_r+0x12>
 8018362:	f7ff f89b 	bl	801749c <__sinit>
 8018366:	69a3      	ldr	r3, [r4, #24]
 8018368:	60a3      	str	r3, [r4, #8]
 801836a:	89a3      	ldrh	r3, [r4, #12]
 801836c:	071a      	lsls	r2, r3, #28
 801836e:	d501      	bpl.n	8018374 <__swbuf_r+0x20>
 8018370:	6923      	ldr	r3, [r4, #16]
 8018372:	b943      	cbnz	r3, 8018386 <__swbuf_r+0x32>
 8018374:	4621      	mov	r1, r4
 8018376:	4628      	mov	r0, r5
 8018378:	f000 f82a 	bl	80183d0 <__swsetup_r>
 801837c:	b118      	cbz	r0, 8018386 <__swbuf_r+0x32>
 801837e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018382:	4638      	mov	r0, r7
 8018384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018386:	6823      	ldr	r3, [r4, #0]
 8018388:	6922      	ldr	r2, [r4, #16]
 801838a:	1a98      	subs	r0, r3, r2
 801838c:	6963      	ldr	r3, [r4, #20]
 801838e:	b2f6      	uxtb	r6, r6
 8018390:	4283      	cmp	r3, r0
 8018392:	4637      	mov	r7, r6
 8018394:	dc05      	bgt.n	80183a2 <__swbuf_r+0x4e>
 8018396:	4621      	mov	r1, r4
 8018398:	4628      	mov	r0, r5
 801839a:	f7ff ffa1 	bl	80182e0 <_fflush_r>
 801839e:	2800      	cmp	r0, #0
 80183a0:	d1ed      	bne.n	801837e <__swbuf_r+0x2a>
 80183a2:	68a3      	ldr	r3, [r4, #8]
 80183a4:	3b01      	subs	r3, #1
 80183a6:	60a3      	str	r3, [r4, #8]
 80183a8:	6823      	ldr	r3, [r4, #0]
 80183aa:	1c5a      	adds	r2, r3, #1
 80183ac:	6022      	str	r2, [r4, #0]
 80183ae:	701e      	strb	r6, [r3, #0]
 80183b0:	6962      	ldr	r2, [r4, #20]
 80183b2:	1c43      	adds	r3, r0, #1
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d004      	beq.n	80183c2 <__swbuf_r+0x6e>
 80183b8:	89a3      	ldrh	r3, [r4, #12]
 80183ba:	07db      	lsls	r3, r3, #31
 80183bc:	d5e1      	bpl.n	8018382 <__swbuf_r+0x2e>
 80183be:	2e0a      	cmp	r6, #10
 80183c0:	d1df      	bne.n	8018382 <__swbuf_r+0x2e>
 80183c2:	4621      	mov	r1, r4
 80183c4:	4628      	mov	r0, r5
 80183c6:	f7ff ff8b 	bl	80182e0 <_fflush_r>
 80183ca:	2800      	cmp	r0, #0
 80183cc:	d0d9      	beq.n	8018382 <__swbuf_r+0x2e>
 80183ce:	e7d6      	b.n	801837e <__swbuf_r+0x2a>

080183d0 <__swsetup_r>:
 80183d0:	b538      	push	{r3, r4, r5, lr}
 80183d2:	4b29      	ldr	r3, [pc, #164]	@ (8018478 <__swsetup_r+0xa8>)
 80183d4:	4605      	mov	r5, r0
 80183d6:	6818      	ldr	r0, [r3, #0]
 80183d8:	460c      	mov	r4, r1
 80183da:	b118      	cbz	r0, 80183e4 <__swsetup_r+0x14>
 80183dc:	6a03      	ldr	r3, [r0, #32]
 80183de:	b90b      	cbnz	r3, 80183e4 <__swsetup_r+0x14>
 80183e0:	f7ff f85c 	bl	801749c <__sinit>
 80183e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183e8:	0719      	lsls	r1, r3, #28
 80183ea:	d422      	bmi.n	8018432 <__swsetup_r+0x62>
 80183ec:	06da      	lsls	r2, r3, #27
 80183ee:	d407      	bmi.n	8018400 <__swsetup_r+0x30>
 80183f0:	2209      	movs	r2, #9
 80183f2:	602a      	str	r2, [r5, #0]
 80183f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80183f8:	81a3      	strh	r3, [r4, #12]
 80183fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80183fe:	e033      	b.n	8018468 <__swsetup_r+0x98>
 8018400:	0758      	lsls	r0, r3, #29
 8018402:	d512      	bpl.n	801842a <__swsetup_r+0x5a>
 8018404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018406:	b141      	cbz	r1, 801841a <__swsetup_r+0x4a>
 8018408:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801840c:	4299      	cmp	r1, r3
 801840e:	d002      	beq.n	8018416 <__swsetup_r+0x46>
 8018410:	4628      	mov	r0, r5
 8018412:	f7ff fa67 	bl	80178e4 <_free_r>
 8018416:	2300      	movs	r3, #0
 8018418:	6363      	str	r3, [r4, #52]	@ 0x34
 801841a:	89a3      	ldrh	r3, [r4, #12]
 801841c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018420:	81a3      	strh	r3, [r4, #12]
 8018422:	2300      	movs	r3, #0
 8018424:	6063      	str	r3, [r4, #4]
 8018426:	6923      	ldr	r3, [r4, #16]
 8018428:	6023      	str	r3, [r4, #0]
 801842a:	89a3      	ldrh	r3, [r4, #12]
 801842c:	f043 0308 	orr.w	r3, r3, #8
 8018430:	81a3      	strh	r3, [r4, #12]
 8018432:	6923      	ldr	r3, [r4, #16]
 8018434:	b94b      	cbnz	r3, 801844a <__swsetup_r+0x7a>
 8018436:	89a3      	ldrh	r3, [r4, #12]
 8018438:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801843c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018440:	d003      	beq.n	801844a <__swsetup_r+0x7a>
 8018442:	4621      	mov	r1, r4
 8018444:	4628      	mov	r0, r5
 8018446:	f000 f846 	bl	80184d6 <__smakebuf_r>
 801844a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801844e:	f013 0201 	ands.w	r2, r3, #1
 8018452:	d00a      	beq.n	801846a <__swsetup_r+0x9a>
 8018454:	2200      	movs	r2, #0
 8018456:	60a2      	str	r2, [r4, #8]
 8018458:	6962      	ldr	r2, [r4, #20]
 801845a:	4252      	negs	r2, r2
 801845c:	61a2      	str	r2, [r4, #24]
 801845e:	6922      	ldr	r2, [r4, #16]
 8018460:	b942      	cbnz	r2, 8018474 <__swsetup_r+0xa4>
 8018462:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018466:	d1c5      	bne.n	80183f4 <__swsetup_r+0x24>
 8018468:	bd38      	pop	{r3, r4, r5, pc}
 801846a:	0799      	lsls	r1, r3, #30
 801846c:	bf58      	it	pl
 801846e:	6962      	ldrpl	r2, [r4, #20]
 8018470:	60a2      	str	r2, [r4, #8]
 8018472:	e7f4      	b.n	801845e <__swsetup_r+0x8e>
 8018474:	2000      	movs	r0, #0
 8018476:	e7f7      	b.n	8018468 <__swsetup_r+0x98>
 8018478:	20000268 	.word	0x20000268

0801847c <abort>:
 801847c:	b508      	push	{r3, lr}
 801847e:	2006      	movs	r0, #6
 8018480:	f000 f88e 	bl	80185a0 <raise>
 8018484:	2001      	movs	r0, #1
 8018486:	f7ea faa1 	bl	80029cc <_exit>

0801848a <__swhatbuf_r>:
 801848a:	b570      	push	{r4, r5, r6, lr}
 801848c:	460c      	mov	r4, r1
 801848e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018492:	2900      	cmp	r1, #0
 8018494:	b096      	sub	sp, #88	@ 0x58
 8018496:	4615      	mov	r5, r2
 8018498:	461e      	mov	r6, r3
 801849a:	da0d      	bge.n	80184b8 <__swhatbuf_r+0x2e>
 801849c:	89a3      	ldrh	r3, [r4, #12]
 801849e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80184a2:	f04f 0100 	mov.w	r1, #0
 80184a6:	bf14      	ite	ne
 80184a8:	2340      	movne	r3, #64	@ 0x40
 80184aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80184ae:	2000      	movs	r0, #0
 80184b0:	6031      	str	r1, [r6, #0]
 80184b2:	602b      	str	r3, [r5, #0]
 80184b4:	b016      	add	sp, #88	@ 0x58
 80184b6:	bd70      	pop	{r4, r5, r6, pc}
 80184b8:	466a      	mov	r2, sp
 80184ba:	f000 f879 	bl	80185b0 <_fstat_r>
 80184be:	2800      	cmp	r0, #0
 80184c0:	dbec      	blt.n	801849c <__swhatbuf_r+0x12>
 80184c2:	9901      	ldr	r1, [sp, #4]
 80184c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80184c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80184cc:	4259      	negs	r1, r3
 80184ce:	4159      	adcs	r1, r3
 80184d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80184d4:	e7eb      	b.n	80184ae <__swhatbuf_r+0x24>

080184d6 <__smakebuf_r>:
 80184d6:	898b      	ldrh	r3, [r1, #12]
 80184d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80184da:	079d      	lsls	r5, r3, #30
 80184dc:	4606      	mov	r6, r0
 80184de:	460c      	mov	r4, r1
 80184e0:	d507      	bpl.n	80184f2 <__smakebuf_r+0x1c>
 80184e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80184e6:	6023      	str	r3, [r4, #0]
 80184e8:	6123      	str	r3, [r4, #16]
 80184ea:	2301      	movs	r3, #1
 80184ec:	6163      	str	r3, [r4, #20]
 80184ee:	b003      	add	sp, #12
 80184f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184f2:	ab01      	add	r3, sp, #4
 80184f4:	466a      	mov	r2, sp
 80184f6:	f7ff ffc8 	bl	801848a <__swhatbuf_r>
 80184fa:	9f00      	ldr	r7, [sp, #0]
 80184fc:	4605      	mov	r5, r0
 80184fe:	4639      	mov	r1, r7
 8018500:	4630      	mov	r0, r6
 8018502:	f7fe fd99 	bl	8017038 <_malloc_r>
 8018506:	b948      	cbnz	r0, 801851c <__smakebuf_r+0x46>
 8018508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801850c:	059a      	lsls	r2, r3, #22
 801850e:	d4ee      	bmi.n	80184ee <__smakebuf_r+0x18>
 8018510:	f023 0303 	bic.w	r3, r3, #3
 8018514:	f043 0302 	orr.w	r3, r3, #2
 8018518:	81a3      	strh	r3, [r4, #12]
 801851a:	e7e2      	b.n	80184e2 <__smakebuf_r+0xc>
 801851c:	89a3      	ldrh	r3, [r4, #12]
 801851e:	6020      	str	r0, [r4, #0]
 8018520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018524:	81a3      	strh	r3, [r4, #12]
 8018526:	9b01      	ldr	r3, [sp, #4]
 8018528:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801852c:	b15b      	cbz	r3, 8018546 <__smakebuf_r+0x70>
 801852e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018532:	4630      	mov	r0, r6
 8018534:	f000 f84e 	bl	80185d4 <_isatty_r>
 8018538:	b128      	cbz	r0, 8018546 <__smakebuf_r+0x70>
 801853a:	89a3      	ldrh	r3, [r4, #12]
 801853c:	f023 0303 	bic.w	r3, r3, #3
 8018540:	f043 0301 	orr.w	r3, r3, #1
 8018544:	81a3      	strh	r3, [r4, #12]
 8018546:	89a3      	ldrh	r3, [r4, #12]
 8018548:	431d      	orrs	r5, r3
 801854a:	81a5      	strh	r5, [r4, #12]
 801854c:	e7cf      	b.n	80184ee <__smakebuf_r+0x18>

0801854e <_raise_r>:
 801854e:	291f      	cmp	r1, #31
 8018550:	b538      	push	{r3, r4, r5, lr}
 8018552:	4605      	mov	r5, r0
 8018554:	460c      	mov	r4, r1
 8018556:	d904      	bls.n	8018562 <_raise_r+0x14>
 8018558:	2316      	movs	r3, #22
 801855a:	6003      	str	r3, [r0, #0]
 801855c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018560:	bd38      	pop	{r3, r4, r5, pc}
 8018562:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018564:	b112      	cbz	r2, 801856c <_raise_r+0x1e>
 8018566:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801856a:	b94b      	cbnz	r3, 8018580 <_raise_r+0x32>
 801856c:	4628      	mov	r0, r5
 801856e:	f000 f853 	bl	8018618 <_getpid_r>
 8018572:	4622      	mov	r2, r4
 8018574:	4601      	mov	r1, r0
 8018576:	4628      	mov	r0, r5
 8018578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801857c:	f000 b83a 	b.w	80185f4 <_kill_r>
 8018580:	2b01      	cmp	r3, #1
 8018582:	d00a      	beq.n	801859a <_raise_r+0x4c>
 8018584:	1c59      	adds	r1, r3, #1
 8018586:	d103      	bne.n	8018590 <_raise_r+0x42>
 8018588:	2316      	movs	r3, #22
 801858a:	6003      	str	r3, [r0, #0]
 801858c:	2001      	movs	r0, #1
 801858e:	e7e7      	b.n	8018560 <_raise_r+0x12>
 8018590:	2100      	movs	r1, #0
 8018592:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018596:	4620      	mov	r0, r4
 8018598:	4798      	blx	r3
 801859a:	2000      	movs	r0, #0
 801859c:	e7e0      	b.n	8018560 <_raise_r+0x12>
	...

080185a0 <raise>:
 80185a0:	4b02      	ldr	r3, [pc, #8]	@ (80185ac <raise+0xc>)
 80185a2:	4601      	mov	r1, r0
 80185a4:	6818      	ldr	r0, [r3, #0]
 80185a6:	f7ff bfd2 	b.w	801854e <_raise_r>
 80185aa:	bf00      	nop
 80185ac:	20000268 	.word	0x20000268

080185b0 <_fstat_r>:
 80185b0:	b538      	push	{r3, r4, r5, lr}
 80185b2:	4d07      	ldr	r5, [pc, #28]	@ (80185d0 <_fstat_r+0x20>)
 80185b4:	2300      	movs	r3, #0
 80185b6:	4604      	mov	r4, r0
 80185b8:	4608      	mov	r0, r1
 80185ba:	4611      	mov	r1, r2
 80185bc:	602b      	str	r3, [r5, #0]
 80185be:	f7ea fa55 	bl	8002a6c <_fstat>
 80185c2:	1c43      	adds	r3, r0, #1
 80185c4:	d102      	bne.n	80185cc <_fstat_r+0x1c>
 80185c6:	682b      	ldr	r3, [r5, #0]
 80185c8:	b103      	cbz	r3, 80185cc <_fstat_r+0x1c>
 80185ca:	6023      	str	r3, [r4, #0]
 80185cc:	bd38      	pop	{r3, r4, r5, pc}
 80185ce:	bf00      	nop
 80185d0:	2000df34 	.word	0x2000df34

080185d4 <_isatty_r>:
 80185d4:	b538      	push	{r3, r4, r5, lr}
 80185d6:	4d06      	ldr	r5, [pc, #24]	@ (80185f0 <_isatty_r+0x1c>)
 80185d8:	2300      	movs	r3, #0
 80185da:	4604      	mov	r4, r0
 80185dc:	4608      	mov	r0, r1
 80185de:	602b      	str	r3, [r5, #0]
 80185e0:	f7ea fa54 	bl	8002a8c <_isatty>
 80185e4:	1c43      	adds	r3, r0, #1
 80185e6:	d102      	bne.n	80185ee <_isatty_r+0x1a>
 80185e8:	682b      	ldr	r3, [r5, #0]
 80185ea:	b103      	cbz	r3, 80185ee <_isatty_r+0x1a>
 80185ec:	6023      	str	r3, [r4, #0]
 80185ee:	bd38      	pop	{r3, r4, r5, pc}
 80185f0:	2000df34 	.word	0x2000df34

080185f4 <_kill_r>:
 80185f4:	b538      	push	{r3, r4, r5, lr}
 80185f6:	4d07      	ldr	r5, [pc, #28]	@ (8018614 <_kill_r+0x20>)
 80185f8:	2300      	movs	r3, #0
 80185fa:	4604      	mov	r4, r0
 80185fc:	4608      	mov	r0, r1
 80185fe:	4611      	mov	r1, r2
 8018600:	602b      	str	r3, [r5, #0]
 8018602:	f7ea f9d3 	bl	80029ac <_kill>
 8018606:	1c43      	adds	r3, r0, #1
 8018608:	d102      	bne.n	8018610 <_kill_r+0x1c>
 801860a:	682b      	ldr	r3, [r5, #0]
 801860c:	b103      	cbz	r3, 8018610 <_kill_r+0x1c>
 801860e:	6023      	str	r3, [r4, #0]
 8018610:	bd38      	pop	{r3, r4, r5, pc}
 8018612:	bf00      	nop
 8018614:	2000df34 	.word	0x2000df34

08018618 <_getpid_r>:
 8018618:	f7ea b9c0 	b.w	800299c <_getpid>

0801861c <_init>:
 801861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801861e:	bf00      	nop
 8018620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018622:	bc08      	pop	{r3}
 8018624:	469e      	mov	lr, r3
 8018626:	4770      	bx	lr

08018628 <_fini>:
 8018628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801862a:	bf00      	nop
 801862c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801862e:	bc08      	pop	{r3}
 8018630:	469e      	mov	lr, r3
 8018632:	4770      	bx	lr
