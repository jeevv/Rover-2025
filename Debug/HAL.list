
HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000173b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f94  08017558  08017558  00018558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080184ec  080184ec  0001a2b8  2**0
                  CONTENTS
  4 .ARM          00000008  080184ec  080184ec  000194ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080184f4  080184f4  0001a2b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080184f4  080184f4  000194f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018500  08018500  00019500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b8  20000000  08018504  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dc3c  200002b8  080187bc  0001a2b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000def4  080187bc  0001aef4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a2b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cac8  00000000  00000000  0001a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e96  00000000  00000000  00036db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  0003ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001362  00000000  00000000  0003c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008ba4  00000000  00000000  0003d87a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d9eb  00000000  00000000  0004641e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6b63  00000000  00000000  00063e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0010a96c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007970  00000000  00000000  0010a9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00112354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b8 	.word	0x200002b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801753c 	.word	0x0801753c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002bc 	.word	0x200002bc
 80001dc:	0801753c 	.word	0x0801753c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_ldivmod>:
 8000bec:	b97b      	cbnz	r3, 8000c0e <__aeabi_ldivmod+0x22>
 8000bee:	b972      	cbnz	r2, 8000c0e <__aeabi_ldivmod+0x22>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bfbe      	ittt	lt
 8000bf4:	2000      	movlt	r0, #0
 8000bf6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bfa:	e006      	blt.n	8000c0a <__aeabi_ldivmod+0x1e>
 8000bfc:	bf08      	it	eq
 8000bfe:	2800      	cmpeq	r0, #0
 8000c00:	bf1c      	itt	ne
 8000c02:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c06:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0a:	f000 b9b5 	b.w	8000f78 <__aeabi_idiv0>
 8000c0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c16:	2900      	cmp	r1, #0
 8000c18:	db09      	blt.n	8000c2e <__aeabi_ldivmod+0x42>
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db1a      	blt.n	8000c54 <__aeabi_ldivmod+0x68>
 8000c1e:	f000 f84d 	bl	8000cbc <__udivmoddi4>
 8000c22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2a:	b004      	add	sp, #16
 8000c2c:	4770      	bx	lr
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db1b      	blt.n	8000c70 <__aeabi_ldivmod+0x84>
 8000c38:	f000 f840 	bl	8000cbc <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4240      	negs	r0, r0
 8000c48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	4770      	bx	lr
 8000c54:	4252      	negs	r2, r2
 8000c56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5a:	f000 f82f 	bl	8000cbc <__udivmoddi4>
 8000c5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c66:	b004      	add	sp, #16
 8000c68:	4240      	negs	r0, r0
 8000c6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f821 	bl	8000cbc <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ca0:	f000 b96a 	b.w	8000f78 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f806 	bl	8000cbc <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9d08      	ldr	r5, [sp, #32]
 8000cc2:	460c      	mov	r4, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14e      	bne.n	8000d66 <__udivmoddi4+0xaa>
 8000cc8:	4694      	mov	ip, r2
 8000cca:	458c      	cmp	ip, r1
 8000ccc:	4686      	mov	lr, r0
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	d962      	bls.n	8000d9a <__udivmoddi4+0xde>
 8000cd4:	b14a      	cbz	r2, 8000cea <__udivmoddi4+0x2e>
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	4091      	lsls	r1, r2
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	4319      	orrs	r1, r3
 8000ce6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f f68c 	uxth.w	r6, ip
 8000cf2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d02:	fb04 f106 	mul.w	r1, r4, r6
 8000d06:	4299      	cmp	r1, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x64>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d12:	f080 8112 	bcs.w	8000f3a <__udivmoddi4+0x27e>
 8000d16:	4299      	cmp	r1, r3
 8000d18:	f240 810f 	bls.w	8000f3a <__udivmoddi4+0x27e>
 8000d1c:	3c02      	subs	r4, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a59      	subs	r1, r3, r1
 8000d22:	fa1f f38e 	uxth.w	r3, lr
 8000d26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d32:	fb00 f606 	mul.w	r6, r0, r6
 8000d36:	429e      	cmp	r6, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x94>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d42:	f080 80fc 	bcs.w	8000f3e <__udivmoddi4+0x282>
 8000d46:	429e      	cmp	r6, r3
 8000d48:	f240 80f9 	bls.w	8000f3e <__udivmoddi4+0x282>
 8000d4c:	4463      	add	r3, ip
 8000d4e:	3802      	subs	r0, #2
 8000d50:	1b9b      	subs	r3, r3, r6
 8000d52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d56:	2100      	movs	r1, #0
 8000d58:	b11d      	cbz	r5, 8000d62 <__udivmoddi4+0xa6>
 8000d5a:	40d3      	lsrs	r3, r2
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d905      	bls.n	8000d76 <__udivmoddi4+0xba>
 8000d6a:	b10d      	cbz	r5, 8000d70 <__udivmoddi4+0xb4>
 8000d6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	4608      	mov	r0, r1
 8000d74:	e7f5      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000d76:	fab3 f183 	clz	r1, r3
 8000d7a:	2900      	cmp	r1, #0
 8000d7c:	d146      	bne.n	8000e0c <__udivmoddi4+0x150>
 8000d7e:	42a3      	cmp	r3, r4
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xcc>
 8000d82:	4290      	cmp	r0, r2
 8000d84:	f0c0 80f0 	bcc.w	8000f68 <__udivmoddi4+0x2ac>
 8000d88:	1a86      	subs	r6, r0, r2
 8000d8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	d0e6      	beq.n	8000d62 <__udivmoddi4+0xa6>
 8000d94:	e9c5 6300 	strd	r6, r3, [r5]
 8000d98:	e7e3      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	f040 8090 	bne.w	8000ec0 <__udivmoddi4+0x204>
 8000da0:	eba1 040c 	sub.w	r4, r1, ip
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	2101      	movs	r1, #1
 8000dae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000db2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dbe:	fb07 f006 	mul.w	r0, r7, r6
 8000dc2:	4298      	cmp	r0, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x11c>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x11a>
 8000dd0:	4298      	cmp	r0, r3
 8000dd2:	f200 80cd 	bhi.w	8000f70 <__udivmoddi4+0x2b4>
 8000dd6:	4626      	mov	r6, r4
 8000dd8:	1a1c      	subs	r4, r3, r0
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000de2:	fb08 4410 	mls	r4, r8, r0, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb00 f707 	mul.w	r7, r0, r7
 8000dee:	429f      	cmp	r7, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x148>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x146>
 8000dfc:	429f      	cmp	r7, r3
 8000dfe:	f200 80b0 	bhi.w	8000f62 <__udivmoddi4+0x2a6>
 8000e02:	4620      	mov	r0, r4
 8000e04:	1bdb      	subs	r3, r3, r7
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0x9c>
 8000e0c:	f1c1 0620 	rsb	r6, r1, #32
 8000e10:	408b      	lsls	r3, r1
 8000e12:	fa22 f706 	lsr.w	r7, r2, r6
 8000e16:	431f      	orrs	r7, r3
 8000e18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e20:	ea43 030c 	orr.w	r3, r3, ip
 8000e24:	40f4      	lsrs	r4, r6
 8000e26:	fa00 f801 	lsl.w	r8, r0, r1
 8000e2a:	0c38      	lsrs	r0, r7, #16
 8000e2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e30:	fbb4 fef0 	udiv	lr, r4, r0
 8000e34:	fa1f fc87 	uxth.w	ip, r7
 8000e38:	fb00 441e 	mls	r4, r0, lr, r4
 8000e3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e40:	fb0e f90c 	mul.w	r9, lr, ip
 8000e44:	45a1      	cmp	r9, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	d90a      	bls.n	8000e62 <__udivmoddi4+0x1a6>
 8000e4c:	193c      	adds	r4, r7, r4
 8000e4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e52:	f080 8084 	bcs.w	8000f5e <__udivmoddi4+0x2a2>
 8000e56:	45a1      	cmp	r9, r4
 8000e58:	f240 8081 	bls.w	8000f5e <__udivmoddi4+0x2a2>
 8000e5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e60:	443c      	add	r4, r7
 8000e62:	eba4 0409 	sub.w	r4, r4, r9
 8000e66:	fa1f f983 	uxth.w	r9, r3
 8000e6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e7a:	45a4      	cmp	ip, r4
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x1d2>
 8000e7e:	193c      	adds	r4, r7, r4
 8000e80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e84:	d267      	bcs.n	8000f56 <__udivmoddi4+0x29a>
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d965      	bls.n	8000f56 <__udivmoddi4+0x29a>
 8000e8a:	3b02      	subs	r3, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e92:	fba0 9302 	umull	r9, r3, r0, r2
 8000e96:	eba4 040c 	sub.w	r4, r4, ip
 8000e9a:	429c      	cmp	r4, r3
 8000e9c:	46ce      	mov	lr, r9
 8000e9e:	469c      	mov	ip, r3
 8000ea0:	d351      	bcc.n	8000f46 <__udivmoddi4+0x28a>
 8000ea2:	d04e      	beq.n	8000f42 <__udivmoddi4+0x286>
 8000ea4:	b155      	cbz	r5, 8000ebc <__udivmoddi4+0x200>
 8000ea6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000eae:	fa04 f606 	lsl.w	r6, r4, r6
 8000eb2:	40cb      	lsrs	r3, r1
 8000eb4:	431e      	orrs	r6, r3
 8000eb6:	40cc      	lsrs	r4, r1
 8000eb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	e750      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000ec0:	f1c2 0320 	rsb	r3, r2, #32
 8000ec4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ed0:	4094      	lsls	r4, r2
 8000ed2:	430c      	orrs	r4, r1
 8000ed4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000edc:	fa1f f78c 	uxth.w	r7, ip
 8000ee0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee8:	0c23      	lsrs	r3, r4, #16
 8000eea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eee:	fb00 f107 	mul.w	r1, r0, r7
 8000ef2:	4299      	cmp	r1, r3
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x24c>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efe:	d22c      	bcs.n	8000f5a <__udivmoddi4+0x29e>
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d92a      	bls.n	8000f5a <__udivmoddi4+0x29e>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1a5b      	subs	r3, r3, r1
 8000f0a:	b2a4      	uxth	r4, r4
 8000f0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f10:	fb08 3311 	mls	r3, r8, r1, r3
 8000f14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f18:	fb01 f307 	mul.w	r3, r1, r7
 8000f1c:	42a3      	cmp	r3, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x276>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f28:	d213      	bcs.n	8000f52 <__udivmoddi4+0x296>
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	d911      	bls.n	8000f52 <__udivmoddi4+0x296>
 8000f2e:	3902      	subs	r1, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	1ae4      	subs	r4, r4, r3
 8000f34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f38:	e739      	b.n	8000dae <__udivmoddi4+0xf2>
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	e6f0      	b.n	8000d20 <__udivmoddi4+0x64>
 8000f3e:	4608      	mov	r0, r1
 8000f40:	e706      	b.n	8000d50 <__udivmoddi4+0x94>
 8000f42:	45c8      	cmp	r8, r9
 8000f44:	d2ae      	bcs.n	8000ea4 <__udivmoddi4+0x1e8>
 8000f46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4e:	3801      	subs	r0, #1
 8000f50:	e7a8      	b.n	8000ea4 <__udivmoddi4+0x1e8>
 8000f52:	4631      	mov	r1, r6
 8000f54:	e7ed      	b.n	8000f32 <__udivmoddi4+0x276>
 8000f56:	4603      	mov	r3, r0
 8000f58:	e799      	b.n	8000e8e <__udivmoddi4+0x1d2>
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	e7d4      	b.n	8000f08 <__udivmoddi4+0x24c>
 8000f5e:	46d6      	mov	lr, sl
 8000f60:	e77f      	b.n	8000e62 <__udivmoddi4+0x1a6>
 8000f62:	4463      	add	r3, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e74d      	b.n	8000e04 <__udivmoddi4+0x148>
 8000f68:	4606      	mov	r6, r0
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	e70f      	b.n	8000d90 <__udivmoddi4+0xd4>
 8000f70:	3e02      	subs	r6, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	e730      	b.n	8000dd8 <__udivmoddi4+0x11c>
 8000f76:	bf00      	nop

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f88:	f006 fc32 	bl	80077f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80010f8 <pvPortMallocMicroROS+0x17c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000f94:	f000 f986 	bl	80012a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f98:	4b58      	ldr	r3, [pc, #352]	@ (80010fc <pvPortMallocMicroROS+0x180>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f040 8090 	bne.w	80010c6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d01e      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fac:	2208      	movs	r2, #8
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d015      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f023 0307 	bic.w	r3, r3, #7
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fd6:	f383 8811 	msr	BASEPRI, r3
 8000fda:	f3bf 8f6f 	isb	sy
 8000fde:	f3bf 8f4f 	dsb	sy
 8000fe2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	e7fd      	b.n	8000fe6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d06a      	beq.n	80010c6 <pvPortMallocMicroROS+0x14a>
 8000ff0:	4b43      	ldr	r3, [pc, #268]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d865      	bhi.n	80010c6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000ffa:	4b42      	ldr	r3, [pc, #264]	@ (8001104 <pvPortMallocMicroROS+0x188>)
 8000ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000ffe:	4b41      	ldr	r3, [pc, #260]	@ (8001104 <pvPortMallocMicroROS+0x188>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001004:	e004      	b.n	8001010 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	d903      	bls.n	8001022 <pvPortMallocMicroROS+0xa6>
 800101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f1      	bne.n	8001006 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001022:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <pvPortMallocMicroROS+0x17c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001028:	429a      	cmp	r2, r3
 800102a:	d04c      	beq.n	80010c6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2208      	movs	r2, #8
 8001032:	4413      	add	r3, r2
 8001034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	1ad2      	subs	r2, r2, r3
 8001046:	2308      	movs	r3, #8
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	429a      	cmp	r2, r3
 800104c:	d920      	bls.n	8001090 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800104e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00b      	beq.n	8001078 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001064:	f383 8811 	msr	BASEPRI, r3
 8001068:	f3bf 8f6f 	isb	sy
 800106c:	f3bf 8f4f 	dsb	sy
 8001070:	613b      	str	r3, [r7, #16]
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	1ad2      	subs	r2, r2, r3
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800108a:	69b8      	ldr	r0, [r7, #24]
 800108c:	f000 f96c 	bl	8001368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 800109c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <pvPortMallocMicroROS+0x18c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d203      	bcs.n	80010b2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a16      	ldr	r2, [pc, #88]	@ (8001108 <pvPortMallocMicroROS+0x18c>)
 80010b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <pvPortMallocMicroROS+0x180>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010c6:	f006 fba1 	bl	800780c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <pvPortMallocMicroROS+0x170>
	__asm volatile
 80010d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d8:	f383 8811 	msr	BASEPRI, r3
 80010dc:	f3bf 8f6f 	isb	sy
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	60fb      	str	r3, [r7, #12]
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80010ec:	69fb      	ldr	r3, [r7, #28]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3728      	adds	r7, #40	@ 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20003edc 	.word	0x20003edc
 80010fc:	20003ee8 	.word	0x20003ee8
 8001100:	20003ee0 	.word	0x20003ee0
 8001104:	20003ed4 	.word	0x20003ed4
 8001108:	20003ee4 	.word	0x20003ee4

0800110c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d04a      	beq.n	80011b4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800111e:	2308      	movs	r3, #8
 8001120:	425b      	negs	r3, r3
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4413      	add	r3, r2
 8001126:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10b      	bne.n	8001152 <vPortFreeMicroROS+0x46>
	__asm volatile
 800113a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800113e:	f383 8811 	msr	BASEPRI, r3
 8001142:	f3bf 8f6f 	isb	sy
 8001146:	f3bf 8f4f 	dsb	sy
 800114a:	60fb      	str	r3, [r7, #12]
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	e7fd      	b.n	800114e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <vPortFreeMicroROS+0x66>
	__asm volatile
 800115a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800115e:	f383 8811 	msr	BASEPRI, r3
 8001162:	f3bf 8f6f 	isb	sy
 8001166:	f3bf 8f4f 	dsb	sy
 800116a:	60bb      	str	r3, [r7, #8]
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	e7fd      	b.n	800116e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4013      	ands	r3, r2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d019      	beq.n	80011b4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d115      	bne.n	80011b4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001198:	f006 fb2a 	bl	80077f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <vPortFreeMicroROS+0xb4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <vPortFreeMicroROS+0xb4>)
 80011a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011aa:	6938      	ldr	r0, [r7, #16]
 80011ac:	f000 f8dc 	bl	8001368 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011b0:	f006 fb2c 	bl	800780c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20003ee8 	.word	0x20003ee8
 80011c0:	20003ee0 	.word	0x20003ee0

080011c4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011d0:	2308      	movs	r3, #8
 80011d2:	425b      	negs	r3, r3
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	4413      	add	r3, r2
 80011d8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <getBlockSize+0x38>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]

	return count;
 80011ec:	68fb      	ldr	r3, [r7, #12]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20003ee8 	.word	0x20003ee8

08001200 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800120a:	f006 faf1 	bl	80077f0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800120e:	6838      	ldr	r0, [r7, #0]
 8001210:	f7ff feb4 	bl	8000f7c <pvPortMallocMicroROS>
 8001214:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d017      	beq.n	800124c <pvPortReallocMicroROS+0x4c>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d014      	beq.n	800124c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffce 	bl	80011c4 <getBlockSize>
 8001228:	4603      	mov	r3, r0
 800122a:	2208      	movs	r2, #8
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d201      	bcs.n	800123c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	68b8      	ldr	r0, [r7, #8]
 8001242:	f015 faa6 	bl	8016792 <memcpy>

		vPortFreeMicroROS(pv);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff60 	bl	800110c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800124c:	f006 fade 	bl	800780c <xTaskResumeAll>

	return newmem;
 8001250:	68bb      	ldr	r3, [r7, #8]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001264:	f006 fac4 	bl	80077f0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff fe82 	bl	8000f7c <pvPortMallocMicroROS>
 8001278:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800127e:	e004      	b.n	800128a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	613a      	str	r2, [r7, #16]
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	1e5a      	subs	r2, r3, #1
 800128e:	617a      	str	r2, [r7, #20]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f5      	bne.n	8001280 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001294:	f006 faba 	bl	800780c <xTaskResumeAll>
  	return mem;
 8001298:	68fb      	ldr	r3, [r7, #12]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012aa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80012ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012b0:	4b27      	ldr	r3, [pc, #156]	@ (8001350 <prvHeapInit+0xac>)
 80012b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00c      	beq.n	80012d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3307      	adds	r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f023 0307 	bic.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001350 <prvHeapInit+0xac>)
 80012d4:	4413      	add	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <prvHeapInit+0xb0>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <prvHeapInit+0xb0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80012f0:	2208      	movs	r2, #8
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f023 0307 	bic.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4a15      	ldr	r2, [pc, #84]	@ (8001358 <prvHeapInit+0xb4>)
 8001304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <prvHeapInit+0xb4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800130e:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <prvHeapInit+0xb4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	1ad2      	subs	r2, r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <prvHeapInit+0xb4>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <prvHeapInit+0xb8>)
 8001332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <prvHeapInit+0xbc>)
 800133a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800133c:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <prvHeapInit+0xc0>)
 800133e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	200002d4 	.word	0x200002d4
 8001354:	20003ed4 	.word	0x20003ed4
 8001358:	20003edc 	.word	0x20003edc
 800135c:	20003ee4 	.word	0x20003ee4
 8001360:	20003ee0 	.word	0x20003ee0
 8001364:	20003ee8 	.word	0x20003ee8

08001368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <prvInsertBlockIntoFreeList+0xac>)
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e002      	b.n	800137c <prvInsertBlockIntoFreeList+0x14>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	d8f7      	bhi.n	8001376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	4413      	add	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	d108      	bne.n	80013aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	441a      	add	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	441a      	add	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d118      	bne.n	80013f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <prvInsertBlockIntoFreeList+0xb0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d00d      	beq.n	80013e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	441a      	add	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e008      	b.n	80013f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <prvInsertBlockIntoFreeList+0xb0>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e003      	b.n	80013f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d002      	beq.n	8001406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20003ed4 	.word	0x20003ed4
 8001418:	20003edc 	.word	0x20003edc
 800141c:	00000000 	.word	0x00000000

08001420 <subscription_cmd_vel_callback>:
#define GYRO_XOUT_H_REG 0x43
#define PWR_MGMT_1_REG 0x6B
#define WHO_AM_I_REG 0x75

void subscription_cmd_vel_callback(const void * msgin)
{
 8001420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001424:	b088      	sub	sp, #32
 8001426:	af00      	add	r7, sp, #0
 8001428:	6178      	str	r0, [r7, #20]
	geometry_msgs__msg__Twist * msg = (geometry_msgs__msg__Twist *)msgin;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	61fb      	str	r3, [r7, #28]

	LeftWheelVelocity = msg->linear.x - msg->angular.z*Length;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800143a:	a3af      	add	r3, pc, #700	@ (adr r3, 80016f8 <subscription_cmd_vel_callback+0x2d8>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff f8f2 	bl	8000628 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4620      	mov	r0, r4
 800144a:	4629      	mov	r1, r5
 800144c:	f7fe ff34 	bl	80002b8 <__aeabi_dsub>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	49b0      	ldr	r1, [pc, #704]	@ (8001718 <subscription_cmd_vel_callback+0x2f8>)
 8001456:	e9c1 2300 	strd	r2, r3, [r1]
	RightWheelVelocity = msg->linear.x + msg->angular.z*Length;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001466:	a3a4      	add	r3, pc, #656	@ (adr r3, 80016f8 <subscription_cmd_vel_callback+0x2d8>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f8dc 	bl	8000628 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7fe ff20 	bl	80002bc <__adddf3>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	49a6      	ldr	r1, [pc, #664]	@ (800171c <subscription_cmd_vel_callback+0x2fc>)
 8001482:	e9c1 2300 	strd	r2, r3, [r1]


	LeftMotorSpeed = (int)(LeftWheelVelocity/WheelRadius) * 60/6.2831;            //w of motor in rpm
 8001486:	4ba4      	ldr	r3, [pc, #656]	@ (8001718 <subscription_cmd_vel_callback+0x2f8>)
 8001488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148c:	a39c      	add	r3, pc, #624	@ (adr r3, 8001700 <subscription_cmd_vel_callback+0x2e0>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f9f3 	bl	800087c <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fb5d 	bl	8000b5c <__aeabi_d2iz>
 80014a2:	4602      	mov	r2, r0
 80014a4:	4613      	mov	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f851 	bl	8000554 <__aeabi_i2d>
 80014b2:	a395      	add	r3, pc, #596	@ (adr r3, 8001708 <subscription_cmd_vel_callback+0x2e8>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7ff f9e0 	bl	800087c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4997      	ldr	r1, [pc, #604]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 80014c2:	e9c1 2300 	strd	r2, r3, [r1]
	RightMotorSpeed = (int)(RightWheelVelocity/WheelRadius) * 60/6.2831;
 80014c6:	4b95      	ldr	r3, [pc, #596]	@ (800171c <subscription_cmd_vel_callback+0x2fc>)
 80014c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014cc:	a38c      	add	r3, pc, #560	@ (adr r3, 8001700 <subscription_cmd_vel_callback+0x2e0>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f9d3 	bl	800087c <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fb3d 	bl	8000b5c <__aeabi_d2iz>
 80014e2:	4602      	mov	r2, r0
 80014e4:	4613      	mov	r3, r2
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f831 	bl	8000554 <__aeabi_i2d>
 80014f2:	a385      	add	r3, pc, #532	@ (adr r3, 8001708 <subscription_cmd_vel_callback+0x2e8>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f9c0 	bl	800087c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4988      	ldr	r1, [pc, #544]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 8001502:	e9c1 2300 	strd	r2, r3, [r1]
	//PWM2 Right motor PA6
	//PWM1 Right motor PA7
	//PWM2 Left motor PB1
	//PWM1 Left motor PB0

	if (LeftMotorSpeed>=0 && LeftMotorSpeed<=1000 && RightMotorSpeed>=0 && RightMotorSpeed<=1000)	//front
 8001506:	4b86      	ldr	r3, [pc, #536]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 8001508:	e9d3 0100 	ldrd	r0, r1, [r3]
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f7ff fb0e 	bl	8000b34 <__aeabi_dcmpge>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d042      	beq.n	80015a4 <subscription_cmd_vel_callback+0x184>
 800151e:	4b80      	ldr	r3, [pc, #512]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 8001520:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b7f      	ldr	r3, [pc, #508]	@ (8001728 <subscription_cmd_vel_callback+0x308>)
 800152a:	f7ff faf9 	bl	8000b20 <__aeabi_dcmple>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d037      	beq.n	80015a4 <subscription_cmd_vel_callback+0x184>
 8001534:	4b7b      	ldr	r3, [pc, #492]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 8001536:	e9d3 0100 	ldrd	r0, r1, [r3]
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	f7ff faf7 	bl	8000b34 <__aeabi_dcmpge>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d02b      	beq.n	80015a4 <subscription_cmd_vel_callback+0x184>
 800154c:	4b75      	ldr	r3, [pc, #468]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 800154e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b74      	ldr	r3, [pc, #464]	@ (8001728 <subscription_cmd_vel_callback+0x308>)
 8001558:	f7ff fae2 	bl	8000b20 <__aeabi_dcmple>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d020      	beq.n	80015a4 <subscription_cmd_vel_callback+0x184>
	{
 		TIM3->CCR1 = LeftMotorSpeed;
 8001562:	4b6f      	ldr	r3, [pc, #444]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	4c70      	ldr	r4, [pc, #448]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb1d 	bl	8000bac <__aeabi_d2uiz>
 8001572:	4603      	mov	r3, r0
 8001574:	6363      	str	r3, [r4, #52]	@ 0x34
//		TIM3->CCR2 = 0;
		TIM3->CCR3 = RightMotorSpeed;
 8001576:	4b6b      	ldr	r3, [pc, #428]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	4c6b      	ldr	r4, [pc, #428]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f7ff fb13 	bl	8000bac <__aeabi_d2uiz>
 8001586:	4603      	mov	r3, r0
 8001588:	63e3      	str	r3, [r4, #60]	@ 0x3c
//		TIM3->CCR4 = 0;
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 800158a:	2201      	movs	r2, #1
 800158c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001590:	4867      	ldr	r0, [pc, #412]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 8001592:	f002 f943 	bl	800381c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800159c:	4864      	ldr	r0, [pc, #400]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 800159e:	f002 f93d 	bl	800381c <HAL_GPIO_WritePin>
 80015a2:	e126      	b.n	80017f2 <subscription_cmd_vel_callback+0x3d2>
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
	}
	else if (LeftMotorSpeed<=0 && LeftMotorSpeed>=-1000 && RightMotorSpeed<=0 && RightMotorSpeed>=-1000)	//back
 80015a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 80015a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	f7ff fab5 	bl	8000b20 <__aeabi_dcmple>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d04a      	beq.n	8001652 <subscription_cmd_vel_callback+0x232>
 80015bc:	4b58      	ldr	r3, [pc, #352]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 80015be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c2:	a353      	add	r3, pc, #332	@ (adr r3, 8001710 <subscription_cmd_vel_callback+0x2f0>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7ff fab4 	bl	8000b34 <__aeabi_dcmpge>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d03f      	beq.n	8001652 <subscription_cmd_vel_callback+0x232>
 80015d2:	4b54      	ldr	r3, [pc, #336]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 80015d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	f7ff fa9e 	bl	8000b20 <__aeabi_dcmple>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d033      	beq.n	8001652 <subscription_cmd_vel_callback+0x232>
 80015ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 80015ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f0:	a347      	add	r3, pc, #284	@ (adr r3, 8001710 <subscription_cmd_vel_callback+0x2f0>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff fa9d 	bl	8000b34 <__aeabi_dcmpge>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d028      	beq.n	8001652 <subscription_cmd_vel_callback+0x232>
//		TIM3->CCR4 = -RightMotorSpeed;
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
		TIM3->CCR1 = -LeftMotorSpeed;
 8001600:	4b47      	ldr	r3, [pc, #284]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	60ba      	str	r2, [r7, #8]
 8001608:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4c47      	ldr	r4, [pc, #284]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 8001610:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001614:	f7ff faca 	bl	8000bac <__aeabi_d2uiz>
 8001618:	4603      	mov	r3, r0
 800161a:	6363      	str	r3, [r4, #52]	@ 0x34
//		TIM3->CCR2 = 0;
		TIM3->CCR3 = -RightMotorSpeed;
 800161c:	4b41      	ldr	r3, [pc, #260]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	603a      	str	r2, [r7, #0]
 8001624:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4c40      	ldr	r4, [pc, #256]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 800162c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001630:	f7ff fabc 	bl	8000bac <__aeabi_d2uiz>
 8001634:	4603      	mov	r3, r0
 8001636:	63e3      	str	r3, [r4, #60]	@ 0x3c
//		TIM3->CCR4 = 0;
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800163e:	483c      	ldr	r0, [pc, #240]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 8001640:	f002 f8ec 	bl	800381c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8001644:	2201      	movs	r2, #1
 8001646:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800164a:	4839      	ldr	r0, [pc, #228]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 800164c:	f002 f8e6 	bl	800381c <HAL_GPIO_WritePin>
 8001650:	e0cf      	b.n	80017f2 <subscription_cmd_vel_callback+0x3d2>
	}
	else if (LeftMotorSpeed<=0 && LeftMotorSpeed>=-1000 && RightMotorSpeed>=0 && RightMotorSpeed<=1000)		//left
 8001652:	4b33      	ldr	r3, [pc, #204]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 8001654:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	f7ff fa5e 	bl	8000b20 <__aeabi_dcmple>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d064      	beq.n	8001734 <subscription_cmd_vel_callback+0x314>
 800166a:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 800166c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001670:	a327      	add	r3, pc, #156	@ (adr r3, 8001710 <subscription_cmd_vel_callback+0x2f0>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7ff fa5d 	bl	8000b34 <__aeabi_dcmpge>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d059      	beq.n	8001734 <subscription_cmd_vel_callback+0x314>
 8001680:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 8001682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	f7ff fa51 	bl	8000b34 <__aeabi_dcmpge>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d04d      	beq.n	8001734 <subscription_cmd_vel_callback+0x314>
 8001698:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 800169a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <subscription_cmd_vel_callback+0x308>)
 80016a4:	f7ff fa3c 	bl	8000b20 <__aeabi_dcmple>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d042      	beq.n	8001734 <subscription_cmd_vel_callback+0x314>
//		TIM3->CCR4 = RightMotorSpeed;
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
		TIM3->CCR1 = -LeftMotorSpeed;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	4692      	mov	sl, r2
 80016b6:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80016ba:	4c1c      	ldr	r4, [pc, #112]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 80016bc:	4650      	mov	r0, sl
 80016be:	4659      	mov	r1, fp
 80016c0:	f7ff fa74 	bl	8000bac <__aeabi_d2uiz>
 80016c4:	4603      	mov	r3, r0
 80016c6:	6363      	str	r3, [r4, #52]	@ 0x34
//		TIM3->CCR2 = 0;
		TIM3->CCR3 = RightMotorSpeed;
 80016c8:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	4c17      	ldr	r4, [pc, #92]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f7ff fa6a 	bl	8000bac <__aeabi_d2uiz>
 80016d8:	4603      	mov	r3, r0
 80016da:	63e3      	str	r3, [r4, #60]	@ 0x3c
//		TIM3->CCR4 = 0;
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016e2:	4813      	ldr	r0, [pc, #76]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 80016e4:	f002 f89a 	bl	800381c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016ee:	4810      	ldr	r0, [pc, #64]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 80016f0:	f002 f894 	bl	800381c <HAL_GPIO_WritePin>
 80016f4:	e07d      	b.n	80017f2 <subscription_cmd_vel_callback+0x3d2>
 80016f6:	bf00      	nop
 80016f8:	cccccccd 	.word	0xcccccccd
 80016fc:	3fcccccc 	.word	0x3fcccccc
 8001700:	1eb851ec 	.word	0x1eb851ec
 8001704:	3fb1eb85 	.word	0x3fb1eb85
 8001708:	f765fd8b 	.word	0xf765fd8b
 800170c:	401921e4 	.word	0x401921e4
 8001710:	00000000 	.word	0x00000000
 8001714:	c08f4000 	.word	0xc08f4000
 8001718:	200040a0 	.word	0x200040a0
 800171c:	200040a8 	.word	0x200040a8
 8001720:	200040b0 	.word	0x200040b0
 8001724:	200040b8 	.word	0x200040b8
 8001728:	408f4000 	.word	0x408f4000
 800172c:	40000400 	.word	0x40000400
 8001730:	40020c00 	.word	0x40020c00
	}
	else if (LeftMotorSpeed>=0 && LeftMotorSpeed<=1000 && RightMotorSpeed<=0 && RightMotorSpeed>=-1000)		//right
 8001734:	4b34      	ldr	r3, [pc, #208]	@ (8001808 <subscription_cmd_vel_callback+0x3e8>)
 8001736:	e9d3 0100 	ldrd	r0, r1, [r3]
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	f7ff f9f7 	bl	8000b34 <__aeabi_dcmpge>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d045      	beq.n	80017d8 <subscription_cmd_vel_callback+0x3b8>
 800174c:	4b2e      	ldr	r3, [pc, #184]	@ (8001808 <subscription_cmd_vel_callback+0x3e8>)
 800174e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <subscription_cmd_vel_callback+0x3ec>)
 8001758:	f7ff f9e2 	bl	8000b20 <__aeabi_dcmple>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d03a      	beq.n	80017d8 <subscription_cmd_vel_callback+0x3b8>
 8001762:	4b2b      	ldr	r3, [pc, #172]	@ (8001810 <subscription_cmd_vel_callback+0x3f0>)
 8001764:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	f7ff f9d6 	bl	8000b20 <__aeabi_dcmple>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d02e      	beq.n	80017d8 <subscription_cmd_vel_callback+0x3b8>
 800177a:	4b25      	ldr	r3, [pc, #148]	@ (8001810 <subscription_cmd_vel_callback+0x3f0>)
 800177c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001780:	a31f      	add	r3, pc, #124	@ (adr r3, 8001800 <subscription_cmd_vel_callback+0x3e0>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7ff f9d5 	bl	8000b34 <__aeabi_dcmpge>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d023      	beq.n	80017d8 <subscription_cmd_vel_callback+0x3b8>
//		TIM3->CCR4 = 0;
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
		TIM3->CCR1 = LeftMotorSpeed;
 8001790:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <subscription_cmd_vel_callback+0x3e8>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	4c1f      	ldr	r4, [pc, #124]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff fa06 	bl	8000bac <__aeabi_d2uiz>
 80017a0:	4603      	mov	r3, r0
 80017a2:	6363      	str	r3, [r4, #52]	@ 0x34
//		TIM3->CCR2 = 0;
		TIM3->CCR3 = -RightMotorSpeed;
 80017a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <subscription_cmd_vel_callback+0x3f0>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017aa:	4690      	mov	r8, r2
 80017ac:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80017b0:	4c18      	ldr	r4, [pc, #96]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 80017b2:	4640      	mov	r0, r8
 80017b4:	4649      	mov	r1, r9
 80017b6:	f7ff f9f9 	bl	8000bac <__aeabi_d2uiz>
 80017ba:	4603      	mov	r3, r0
 80017bc:	63e3      	str	r3, [r4, #60]	@ 0x3c
//		TIM3->CCR4 = 0;
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 80017be:	2201      	movs	r2, #1
 80017c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017c4:	4814      	ldr	r0, [pc, #80]	@ (8001818 <subscription_cmd_vel_callback+0x3f8>)
 80017c6:	f002 f829 	bl	800381c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80017ca:	2201      	movs	r2, #1
 80017cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017d0:	4811      	ldr	r0, [pc, #68]	@ (8001818 <subscription_cmd_vel_callback+0x3f8>)
 80017d2:	f002 f823 	bl	800381c <HAL_GPIO_WritePin>
 80017d6:	e00c      	b.n	80017f2 <subscription_cmd_vel_callback+0x3d2>
	}
	else
	{
		TIM3->CCR1 = 0;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = 0;
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = 0;
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = 0;
 80017ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	641a      	str	r2, [r3, #64]	@ 0x40
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
	}
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3720      	adds	r7, #32
 80017f6:	46bd      	mov	sp, r7
 80017f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017fc:	f3af 8000 	nop.w
 8001800:	00000000 	.word	0x00000000
 8001804:	c08f4000 	.word	0xc08f4000
 8001808:	200040b0 	.word	0x200040b0
 800180c:	408f4000 	.word	0x408f4000
 8001810:	200040b8 	.word	0x200040b8
 8001814:	40000400 	.word	0x40000400
 8001818:	40020c00 	.word	0x40020c00

0800181c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)					//PA0 LeftWheelEncoderChannelA  PE11 LeftWheelEncoderChannelB
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d11b      	bne.n	8001864 <HAL_GPIO_EXTI_Callback+0x48>
	{
//		LeftWheelEncoder++;
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == 1) LeftWheelEncoder++;
 800182c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001830:	481d      	ldr	r0, [pc, #116]	@ (80018a8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001832:	f001 ffdb 	bl	80037ec <HAL_GPIO_ReadPin>
 8001836:	4603      	mov	r3, r0
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_GPIO_EXTI_Callback+0x2c>
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_GPIO_EXTI_Callback+0x90>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	4a1a      	ldr	r2, [pc, #104]	@ (80018ac <HAL_GPIO_EXTI_Callback+0x90>)
 8001844:	6013      	str	r3, [r2, #0]
	{
//		RightWheelEncoder++;
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 0) RightWheelEncoder++;
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 1) RightWheelEncoder--;
	}
}
 8001846:	e02b      	b.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == 0) LeftWheelEncoder--;
 8001848:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800184c:	4816      	ldr	r0, [pc, #88]	@ (80018a8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800184e:	f001 ffcd 	bl	80037ec <HAL_GPIO_ReadPin>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d123      	bne.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_GPIO_EXTI_Callback+0x90>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3b01      	subs	r3, #1
 800185e:	4a13      	ldr	r2, [pc, #76]	@ (80018ac <HAL_GPIO_EXTI_Callback+0x90>)
 8001860:	6013      	str	r3, [r2, #0]
}
 8001862:	e01d      	b.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
	else if (GPIO_Pin == GPIO_PIN_1)					//PA1 RightWheelEncoderChannelA  PE12 RightWheelEncoderChannelB
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d11a      	bne.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 0) RightWheelEncoder++;
 800186a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800186e:	480e      	ldr	r0, [pc, #56]	@ (80018a8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001870:	f001 ffbc 	bl	80037ec <HAL_GPIO_ReadPin>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d105      	bne.n	8001886 <HAL_GPIO_EXTI_Callback+0x6a>
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x94>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	4a0b      	ldr	r2, [pc, #44]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	e00c      	b.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 1) RightWheelEncoder--;
 8001886:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800188a:	4807      	ldr	r0, [pc, #28]	@ (80018a8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800188c:	f001 ffae 	bl	80037ec <HAL_GPIO_ReadPin>
 8001890:	4603      	mov	r3, r0
 8001892:	2b01      	cmp	r3, #1
 8001894:	d104      	bne.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3b01      	subs	r3, #1
 800189c:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x94>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40021000 	.word	0x40021000
 80018ac:	20004094 	.word	0x20004094
 80018b0:	20004098 	.word	0x20004098

080018b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b8:	f001 f88e 	bl	80029d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018bc:	f000 f830 	bl	8001920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c0:	f000 f9ae 	bl	8001c20 <MX_GPIO_Init>
  MX_DMA_Init();
 80018c4:	f000 f984 	bl	8001bd0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018c8:	f000 f958 	bl	8001b7c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80018cc:	f000 f8be 	bl	8001a4c <MX_TIM3_Init>
  MX_I2C2_Init();
 80018d0:	f000 f88e 	bl	80019f0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80018d4:	2100      	movs	r1, #0
 80018d6:	480e      	ldr	r0, [pc, #56]	@ (8001910 <main+0x5c>)
 80018d8:	f002 fe56 	bl	8004588 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80018dc:	2104      	movs	r1, #4
 80018de:	480c      	ldr	r0, [pc, #48]	@ (8001910 <main+0x5c>)
 80018e0:	f002 fe52 	bl	8004588 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80018e4:	2108      	movs	r1, #8
 80018e6:	480a      	ldr	r0, [pc, #40]	@ (8001910 <main+0x5c>)
 80018e8:	f002 fe4e 	bl	8004588 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80018ec:	210c      	movs	r1, #12
 80018ee:	4808      	ldr	r0, [pc, #32]	@ (8001910 <main+0x5c>)
 80018f0:	f002 fe4a 	bl	8004588 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018f4:	f004 fe5e 	bl	80065b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80018f8:	4a06      	ldr	r2, [pc, #24]	@ (8001914 <main+0x60>)
 80018fa:	2100      	movs	r1, #0
 80018fc:	4806      	ldr	r0, [pc, #24]	@ (8001918 <main+0x64>)
 80018fe:	f004 fea3 	bl	8006648 <osThreadNew>
 8001902:	4603      	mov	r3, r0
 8001904:	4a05      	ldr	r2, [pc, #20]	@ (800191c <main+0x68>)
 8001906:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001908:	f004 fe78 	bl	80065fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <main+0x58>
 8001910:	20003f40 	.word	0x20003f40
 8001914:	08017610 	.word	0x08017610
 8001918:	08001d91 	.word	0x08001d91
 800191c:	20004090 	.word	0x20004090

08001920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b094      	sub	sp, #80	@ 0x50
 8001924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001926:	f107 0320 	add.w	r3, r7, #32
 800192a:	2230      	movs	r2, #48	@ 0x30
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f014 fe66 	bl	8016600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	4b27      	ldr	r3, [pc, #156]	@ (80019e8 <SystemClock_Config+0xc8>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	4a26      	ldr	r2, [pc, #152]	@ (80019e8 <SystemClock_Config+0xc8>)
 800194e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001952:	6413      	str	r3, [r2, #64]	@ 0x40
 8001954:	4b24      	ldr	r3, [pc, #144]	@ (80019e8 <SystemClock_Config+0xc8>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	4b21      	ldr	r3, [pc, #132]	@ (80019ec <SystemClock_Config+0xcc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a20      	ldr	r2, [pc, #128]	@ (80019ec <SystemClock_Config+0xcc>)
 800196a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <SystemClock_Config+0xcc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800197c:	2301      	movs	r3, #1
 800197e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001980:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001986:	2302      	movs	r3, #2
 8001988:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800198a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800198e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001990:	2304      	movs	r3, #4
 8001992:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001994:	23c0      	movs	r3, #192	@ 0xc0
 8001996:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001998:	2304      	movs	r3, #4
 800199a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800199c:	2308      	movs	r3, #8
 800199e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a0:	f107 0320 	add.w	r3, r7, #32
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 f8af 	bl	8003b08 <HAL_RCC_OscConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019b0:	f000 faea 	bl	8001f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b4:	230f      	movs	r3, #15
 80019b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b8:	2302      	movs	r3, #2
 80019ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	2103      	movs	r1, #3
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 fb11 	bl	8003ff8 <HAL_RCC_ClockConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019dc:	f000 fad4 	bl	8001f88 <Error_Handler>
  }
}
 80019e0:	bf00      	nop
 80019e2:	3750      	adds	r7, #80	@ 0x50
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000

080019f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019f4:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <MX_I2C2_Init+0x50>)
 80019f6:	4a13      	ldr	r2, [pc, #76]	@ (8001a44 <MX_I2C2_Init+0x54>)
 80019f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019fa:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <MX_I2C2_Init+0x50>)
 80019fc:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <MX_I2C2_Init+0x58>)
 80019fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <MX_I2C2_Init+0x50>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <MX_I2C2_Init+0x50>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <MX_I2C2_Init+0x50>)
 8001a0e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a12:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a14:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <MX_I2C2_Init+0x50>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a1a:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <MX_I2C2_Init+0x50>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a20:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <MX_I2C2_Init+0x50>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <MX_I2C2_Init+0x50>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a2c:	4804      	ldr	r0, [pc, #16]	@ (8001a40 <MX_I2C2_Init+0x50>)
 8001a2e:	f001 ff27 	bl	8003880 <HAL_I2C_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a38:	f000 faa6 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20003eec 	.word	0x20003eec
 8001a44:	40005800 	.word	0x40005800
 8001a48:	000186a0 	.word	0x000186a0

08001a4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08e      	sub	sp, #56	@ 0x38
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a60:	f107 0320 	add.w	r3, r7, #32
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
 8001a78:	615a      	str	r2, [r3, #20]
 8001a7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b74 <MX_TIM3_Init+0x128>)
 8001a7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b78 <MX_TIM3_Init+0x12c>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001a82:	4b3c      	ldr	r3, [pc, #240]	@ (8001b74 <MX_TIM3_Init+0x128>)
 8001a84:	2209      	movs	r2, #9
 8001a86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b3a      	ldr	r3, [pc, #232]	@ (8001b74 <MX_TIM3_Init+0x128>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001a8e:	4b39      	ldr	r3, [pc, #228]	@ (8001b74 <MX_TIM3_Init+0x128>)
 8001a90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b37      	ldr	r3, [pc, #220]	@ (8001b74 <MX_TIM3_Init+0x128>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a9c:	4b35      	ldr	r3, [pc, #212]	@ (8001b74 <MX_TIM3_Init+0x128>)
 8001a9e:	2280      	movs	r2, #128	@ 0x80
 8001aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aa2:	4834      	ldr	r0, [pc, #208]	@ (8001b74 <MX_TIM3_Init+0x128>)
 8001aa4:	f002 fcc8 	bl	8004438 <HAL_TIM_Base_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001aae:	f000 fa6b 	bl	8001f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ab8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001abc:	4619      	mov	r1, r3
 8001abe:	482d      	ldr	r0, [pc, #180]	@ (8001b74 <MX_TIM3_Init+0x128>)
 8001ac0:	f002 fed4 	bl	800486c <HAL_TIM_ConfigClockSource>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001aca:	f000 fa5d 	bl	8001f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ace:	4829      	ldr	r0, [pc, #164]	@ (8001b74 <MX_TIM3_Init+0x128>)
 8001ad0:	f002 fd01 	bl	80044d6 <HAL_TIM_PWM_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001ada:	f000 fa55 	bl	8001f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ae6:	f107 0320 	add.w	r3, r7, #32
 8001aea:	4619      	mov	r1, r3
 8001aec:	4821      	ldr	r0, [pc, #132]	@ (8001b74 <MX_TIM3_Init+0x128>)
 8001aee:	f003 fa5d 	bl	8004fac <HAL_TIMEx_MasterConfigSynchronization>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001af8:	f000 fa46 	bl	8001f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001afc:	2360      	movs	r3, #96	@ 0x60
 8001afe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	4619      	mov	r1, r3
 8001b12:	4818      	ldr	r0, [pc, #96]	@ (8001b74 <MX_TIM3_Init+0x128>)
 8001b14:	f002 fde8 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b1e:	f000 fa33 	bl	8001f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2204      	movs	r2, #4
 8001b26:	4619      	mov	r1, r3
 8001b28:	4812      	ldr	r0, [pc, #72]	@ (8001b74 <MX_TIM3_Init+0x128>)
 8001b2a:	f002 fddd 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001b34:	f000 fa28 	bl	8001f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480d      	ldr	r0, [pc, #52]	@ (8001b74 <MX_TIM3_Init+0x128>)
 8001b40:	f002 fdd2 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001b4a:	f000 fa1d 	bl	8001f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	220c      	movs	r2, #12
 8001b52:	4619      	mov	r1, r3
 8001b54:	4807      	ldr	r0, [pc, #28]	@ (8001b74 <MX_TIM3_Init+0x128>)
 8001b56:	f002 fdc7 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001b60:	f000 fa12 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b64:	4803      	ldr	r0, [pc, #12]	@ (8001b74 <MX_TIM3_Init+0x128>)
 8001b66:	f000 fc21 	bl	80023ac <HAL_TIM_MspPostInit>

}
 8001b6a:	bf00      	nop
 8001b6c:	3738      	adds	r7, #56	@ 0x38
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20003f40 	.word	0x20003f40
 8001b78:	40000400 	.word	0x40000400

08001b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	@ (8001bcc <MX_USART2_UART_Init+0x50>)
 8001b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001bb4:	f003 fa68 	bl	8005088 <HAL_UART_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bbe:	f000 f9e3 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20003f88 	.word	0x20003f88
 8001bcc:	40004400 	.word	0x40004400

08001bd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <MX_DMA_Init+0x4c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a0f      	ldr	r2, [pc, #60]	@ (8001c1c <MX_DMA_Init+0x4c>)
 8001be0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <MX_DMA_Init+0x4c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2105      	movs	r1, #5
 8001bf6:	2010      	movs	r0, #16
 8001bf8:	f001 f83b 	bl	8002c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001bfc:	2010      	movs	r0, #16
 8001bfe:	f001 f854 	bl	8002caa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2105      	movs	r1, #5
 8001c06:	2011      	movs	r0, #17
 8001c08:	f001 f833 	bl	8002c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001c0c:	2011      	movs	r0, #17
 8001c0e:	f001 f84c 	bl	8002caa <HAL_NVIC_EnableIRQ>

}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800

08001c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08c      	sub	sp, #48	@ 0x30
 8001c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	4b51      	ldr	r3, [pc, #324]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	4a50      	ldr	r2, [pc, #320]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c46:	4b4e      	ldr	r3, [pc, #312]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	61bb      	str	r3, [r7, #24]
 8001c50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	4b4a      	ldr	r3, [pc, #296]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	4a49      	ldr	r2, [pc, #292]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c62:	4b47      	ldr	r3, [pc, #284]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	4b43      	ldr	r3, [pc, #268]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	4a42      	ldr	r2, [pc, #264]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7e:	4b40      	ldr	r3, [pc, #256]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	4a3b      	ldr	r2, [pc, #236]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001c94:	f043 0302 	orr.w	r3, r3, #2
 8001c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9a:	4b39      	ldr	r3, [pc, #228]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	4b35      	ldr	r3, [pc, #212]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	4a34      	ldr	r2, [pc, #208]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001cb0:	f043 0310 	orr.w	r3, r3, #16
 8001cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb6:	4b32      	ldr	r3, [pc, #200]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a2d      	ldr	r2, [pc, #180]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d80 <MX_GPIO_Init+0x160>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001ce4:	4827      	ldr	r0, [pc, #156]	@ (8001d84 <MX_GPIO_Init+0x164>)
 8001ce6:	f001 fd99 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cea:	2303      	movs	r3, #3
 8001cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4822      	ldr	r0, [pc, #136]	@ (8001d88 <MX_GPIO_Init+0x168>)
 8001d00:	f001 fbf0 	bl	80034e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d04:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4619      	mov	r1, r3
 8001d18:	481c      	ldr	r0, [pc, #112]	@ (8001d8c <MX_GPIO_Init+0x16c>)
 8001d1a:	f001 fbe3 	bl	80034e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d1e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	4619      	mov	r1, r3
 8001d32:	4814      	ldr	r0, [pc, #80]	@ (8001d84 <MX_GPIO_Init+0x164>)
 8001d34:	f001 fbd6 	bl	80034e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d38:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	4619      	mov	r1, r3
 8001d50:	480c      	ldr	r0, [pc, #48]	@ (8001d84 <MX_GPIO_Init+0x164>)
 8001d52:	f001 fbc7 	bl	80034e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2105      	movs	r1, #5
 8001d5a:	2006      	movs	r0, #6
 8001d5c:	f000 ff89 	bl	8002c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d60:	2006      	movs	r0, #6
 8001d62:	f000 ffa2 	bl	8002caa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2105      	movs	r1, #5
 8001d6a:	2007      	movs	r0, #7
 8001d6c:	f000 ff81 	bl	8002c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d70:	2007      	movs	r0, #7
 8001d72:	f000 ff9a 	bl	8002caa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d76:	bf00      	nop
 8001d78:	3730      	adds	r7, #48	@ 0x30
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	40021000 	.word	0x40021000

08001d90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d90:	b5b0      	push	{r4, r5, r7, lr}
 8001d92:	b0e6      	sub	sp, #408	@ 0x198
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001d9a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d9e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	  // micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8001da0:	4b65      	ldr	r3, [pc, #404]	@ (8001f38 <StartDefaultTask+0x1a8>)
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	4b65      	ldr	r3, [pc, #404]	@ (8001f3c <StartDefaultTask+0x1ac>)
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	4b65      	ldr	r3, [pc, #404]	@ (8001f40 <StartDefaultTask+0x1b0>)
 8001daa:	4a66      	ldr	r2, [pc, #408]	@ (8001f44 <StartDefaultTask+0x1b4>)
 8001dac:	4966      	ldr	r1, [pc, #408]	@ (8001f48 <StartDefaultTask+0x1b8>)
 8001dae:	2001      	movs	r0, #1
 8001db0:	f009 fdb6 	bl	800b920 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001db4:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001db8:	4618      	mov	r0, r3
 8001dba:	f009 fce3 	bl	800b784 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001dbe:	4b63      	ldr	r3, [pc, #396]	@ (8001f4c <StartDefaultTask+0x1bc>)
 8001dc0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001dc4:	4b62      	ldr	r3, [pc, #392]	@ (8001f50 <StartDefaultTask+0x1c0>)
 8001dc6:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001dca:	4b62      	ldr	r3, [pc, #392]	@ (8001f54 <StartDefaultTask+0x1c4>)
 8001dcc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001dd0:	4b61      	ldr	r3, [pc, #388]	@ (8001f58 <StartDefaultTask+0x1c8>)
 8001dd2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001dd6:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f009 fce0 	bl	800b7a0 <rcutils_set_default_allocator>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f083 0301 	eor.w	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d004      	beq.n	8001df6 <StartDefaultTask+0x66>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001dec:	f240 2165 	movw	r1, #613	@ 0x265
 8001df0:	485a      	ldr	r0, [pc, #360]	@ (8001f5c <StartDefaultTask+0x1cc>)
 8001df2:	f014 fb19 	bl	8016428 <iprintf>
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  geometry_msgs__msg__Twist imu;
     rcl_publisher_t imu_pub;

	  allocator = rcl_get_default_allocator();
 8001df6:	463b      	mov	r3, r7
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f009 fcef 	bl	800b7dc <rcutils_get_default_allocator>
 8001dfe:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e02:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e06:	f107 04e8 	add.w	r4, r7, #232	@ 0xe8
 8001e0a:	461d      	mov	r5, r3
 8001e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e10:	682b      	ldr	r3, [r5, #0]
 8001e12:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8001e14:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001e18:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	f009 fbba 	bl	800b598 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "stm32_microros", "", &support);
 8001e24:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001e28:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8001e2c:	4a4c      	ldr	r2, [pc, #304]	@ (8001f60 <StartDefaultTask+0x1d0>)
 8001e2e:	494d      	ldr	r1, [pc, #308]	@ (8001f64 <StartDefaultTask+0x1d4>)
 8001e30:	f009 fbfc 	bl	800b62c <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8001e34:	f00a face 	bl	800c3d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001e3e:	f507 70b8 	add.w	r0, r7, #368	@ 0x170
 8001e42:	4b49      	ldr	r3, [pc, #292]	@ (8001f68 <StartDefaultTask+0x1d8>)
 8001e44:	f009 fc2e 	bl	800b6a4 <rclc_publisher_init_default>
	    &publisher1,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int16),
	    "lwheel");

	  rclc_publisher_init_default(
 8001e48:	f00a fac4 	bl	800c3d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001e52:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8001e56:	4b45      	ldr	r3, [pc, #276]	@ (8001f6c <StartDefaultTask+0x1dc>)
 8001e58:	f009 fc24 	bl	800b6a4 <rclc_publisher_init_default>
	  	    &publisher2,
	  	    &node,
	  	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int16),
	  	    "rwheel");
	  rclc_publisher_init_default(
 8001e5c:	f007 f954 	bl	8009108 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001e66:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8001e6a:	4b41      	ldr	r3, [pc, #260]	@ (8001f70 <StartDefaultTask+0x1e0>)
 8001e6c:	f009 fc1a 	bl	800b6a4 <rclc_publisher_init_default>
	  		ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	  		"imu_raw");

	  // create subscriber

	  	  rclc_subscription_init_default(
 8001e70:	f007 f94a 	bl	8009108 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001e7a:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8001e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f74 <StartDefaultTask+0x1e4>)
 8001e80:	f009 fc44 	bl	800b70c <rclc_subscription_init_default>
	  	     &node,
	  	     ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	  	     "cmd_vel");

	  	// create executor
	  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001e84:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e88:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f009 f8af 	bl	800aff0 <rclc_executor_get_zero_initialized_executor>
	  	rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001e92:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001e96:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8001e9a:	f107 0020 	add.w	r0, r7, #32
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f009 f8b2 	bl	800b008 <rclc_executor_init>
	  	rclc_executor_add_subscription(&executor, &subscriber_cmd_vel, &sub_cmd_vel_msg, &subscription_cmd_vel_callback, ON_NEW_DATA);
 8001ea4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001ea8:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8001eac:	f107 0020 	add.w	r0, r7, #32
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	4b30      	ldr	r3, [pc, #192]	@ (8001f78 <StartDefaultTask+0x1e8>)
 8001eb6:	f009 f917 	bl	800b0e8 <rclc_executor_add_subscription>

	  for(;;)
	  {
		msg1.data = LeftWheelEncoder;
 8001eba:	4b30      	ldr	r3, [pc, #192]	@ (8001f7c <StartDefaultTask+0x1ec>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	b21b      	sxth	r3, r3
 8001ec0:	f8a7 3164 	strh.w	r3, [r7, #356]	@ 0x164
		msg2.data = RightWheelEncoder;
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f80 <StartDefaultTask+0x1f0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	f8a7 3160 	strh.w	r3, [r7, #352]	@ 0x160

	    rcl_ret_t ret1 = rcl_publish(&publisher1, &msg1, NULL);
 8001ece:	f507 71b2 	add.w	r1, r7, #356	@ 0x164
 8001ed2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f008 fcfb 	bl	800a8d4 <rcl_publish>
 8001ede:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c
	    rcl_ret_t ret2 = rcl_publish(&publisher2, &msg2, NULL);
 8001ee2:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001ee6:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001eea:	2200      	movs	r2, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f008 fcf1 	bl	800a8d4 <rcl_publish>
 8001ef2:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
	    rcl_publish(&imu_pub, &imu, NULL);
 8001ef6:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001efa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001efe:	2200      	movs	r2, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f008 fce7 	bl	800a8d4 <rcl_publish>

	    rclc_executor_spin_some(&executor, 1000);    	// waits for 1000ns for ros data, theres no data it continues, if there is data then it executes subscription callback
 8001f06:	f107 0120 	add.w	r1, r7, #32
 8001f0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	4608      	mov	r0, r1
 8001f14:	f009 fb08 	bl	800b528 <rclc_executor_spin_some>



	    if ((ret1 | ret2) != RCL_RET_OK)
 8001f18:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8001f1c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001f20:	4313      	orrs	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d004      	beq.n	8001f30 <StartDefaultTask+0x1a0>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 8001f26:	f44f 712b 	mov.w	r1, #684	@ 0x2ac
 8001f2a:	4816      	ldr	r0, [pc, #88]	@ (8001f84 <StartDefaultTask+0x1f4>)
 8001f2c:	f014 fa7c 	bl	8016428 <iprintf>
	    }
	    osDelay(10);
 8001f30:	200a      	movs	r0, #10
 8001f32:	f004 fc1b 	bl	800676c <osDelay>
	  {
 8001f36:	e7c0      	b.n	8001eba <StartDefaultTask+0x12a>
 8001f38:	080028dd 	.word	0x080028dd
 8001f3c:	08002875 	.word	0x08002875
 8001f40:	08002855 	.word	0x08002855
 8001f44:	08002829 	.word	0x08002829
 8001f48:	20003f88 	.word	0x20003f88
 8001f4c:	08001f95 	.word	0x08001f95
 8001f50:	08001fd9 	.word	0x08001fd9
 8001f54:	08002011 	.word	0x08002011
 8001f58:	0800207d 	.word	0x0800207d
 8001f5c:	08017564 	.word	0x08017564
 8001f60:	0801758c 	.word	0x0801758c
 8001f64:	08017590 	.word	0x08017590
 8001f68:	080175a0 	.word	0x080175a0
 8001f6c:	080175a8 	.word	0x080175a8
 8001f70:	080175b0 	.word	0x080175b0
 8001f74:	080175b8 	.word	0x080175b8
 8001f78:	08001421 	.word	0x08001421
 8001f7c:	20004094 	.word	0x20004094
 8001f80:	20004098 	.word	0x20004098
 8001f84:	080175c0 	.word	0x080175c0

08001f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f8c:	b672      	cpsid	i
}
 8001f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <Error_Handler+0x8>

08001f94 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <microros_allocate+0x3c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <microros_allocate+0x3c>)
 8001fac:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <microros_allocate+0x40>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <microros_allocate+0x40>)
 8001fbc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe ffdc 	bl	8000f7c <pvPortMallocMicroROS>
 8001fc4:	4603      	mov	r3, r0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200040c0 	.word	0x200040c0
 8001fd4:	200040c4 	.word	0x200040c4

08001fd8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00c      	beq.n	8002002 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff f8eb 	bl	80011c4 <getBlockSize>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a06      	ldr	r2, [pc, #24]	@ (800200c <microros_deallocate+0x34>)
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4b04      	ldr	r3, [pc, #16]	@ (800200c <microros_deallocate+0x34>)
 8001ffa:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff f885 	bl	800110c <vPortFreeMicroROS>
  }
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200040c4 	.word	0x200040c4

08002010 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800201c:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <microros_reallocate+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	4413      	add	r3, r2
 8002026:	461a      	mov	r2, r3
 8002028:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <microros_reallocate+0x64>)
 800202a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800202c:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <microros_reallocate+0x68>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4413      	add	r3, r2
 8002036:	461a      	mov	r2, r3
 8002038:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <microros_reallocate+0x68>)
 800203a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d104      	bne.n	800204c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002042:	68b8      	ldr	r0, [r7, #8]
 8002044:	f7fe ff9a 	bl	8000f7c <pvPortMallocMicroROS>
 8002048:	4603      	mov	r3, r0
 800204a:	e00e      	b.n	800206a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f7ff f8b9 	bl	80011c4 <getBlockSize>
 8002052:	4603      	mov	r3, r0
 8002054:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <microros_reallocate+0x68>)
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	461a      	mov	r2, r3
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <microros_reallocate+0x68>)
 800205e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff f8cc 	bl	8001200 <pvPortReallocMicroROS>
 8002068:	4603      	mov	r3, r0
  }
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200040c0 	.word	0x200040c0
 8002078:	200040c4 	.word	0x200040c4

0800207c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	fb02 f303 	mul.w	r3, r2, r3
 8002090:	4a0c      	ldr	r2, [pc, #48]	@ (80020c4 <microros_zero_allocate+0x48>)
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	4413      	add	r3, r2
 8002096:	461a      	mov	r2, r3
 8002098:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <microros_zero_allocate+0x48>)
 800209a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	fb02 f303 	mul.w	r3, r2, r3
 80020a4:	4a08      	ldr	r2, [pc, #32]	@ (80020c8 <microros_zero_allocate+0x4c>)
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	4413      	add	r3, r2
 80020aa:	461a      	mov	r2, r3
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <microros_zero_allocate+0x4c>)
 80020ae:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f7ff f8d1 	bl	800125a <pvPortCallocMicroROS>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200040c0 	.word	0x200040c0
 80020c8:	200040c4 	.word	0x200040c4
 80020cc:	00000000 	.word	0x00000000

080020d0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80020d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80020e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020e6:	a320      	add	r3, pc, #128	@ (adr r3, 8002168 <UTILS_NanosecondsToTimespec+0x98>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe fd7e 	bl	8000bec <__aeabi_ldivmod>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80020fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020fe:	a31a      	add	r3, pc, #104	@ (adr r3, 8002168 <UTILS_NanosecondsToTimespec+0x98>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	f7fe fd72 	bl	8000bec <__aeabi_ldivmod>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	da20      	bge.n	8002156 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4a11      	ldr	r2, [pc, #68]	@ (8002160 <UTILS_NanosecondsToTimespec+0x90>)
 800211a:	fb82 1203 	smull	r1, r2, r2, r3
 800211e:	1712      	asrs	r2, r2, #28
 8002120:	17db      	asrs	r3, r3, #31
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	3301      	adds	r3, #1
 8002126:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	6979      	ldr	r1, [r7, #20]
 8002130:	17c8      	asrs	r0, r1, #31
 8002132:	460c      	mov	r4, r1
 8002134:	4605      	mov	r5, r0
 8002136:	ebb2 0804 	subs.w	r8, r2, r4
 800213a:	eb63 0905 	sbc.w	r9, r3, r5
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	4906      	ldr	r1, [pc, #24]	@ (8002164 <UTILS_NanosecondsToTimespec+0x94>)
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	441a      	add	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	609a      	str	r2, [r3, #8]
    }
}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002160:	44b82fa1 	.word	0x44b82fa1
 8002164:	3b9aca00 	.word	0x3b9aca00
 8002168:	3b9aca00 	.word	0x3b9aca00
 800216c:	00000000 	.word	0x00000000

08002170 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002174:	b08e      	sub	sp, #56	@ 0x38
 8002176:	af00      	add	r7, sp, #0
 8002178:	6278      	str	r0, [r7, #36]	@ 0x24
 800217a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800217c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002180:	2300      	movs	r3, #0
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002192:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002196:	4618      	mov	r0, r3
 8002198:	f005 fdb4 	bl	8007d04 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800219c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800219e:	17da      	asrs	r2, r3, #31
 80021a0:	61bb      	str	r3, [r7, #24]
 80021a2:	61fa      	str	r2, [r7, #28]
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	69b9      	ldr	r1, [r7, #24]
 80021ae:	000b      	movs	r3, r1
 80021b0:	2200      	movs	r2, #0
 80021b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80021b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b8:	2200      	movs	r2, #0
 80021ba:	461c      	mov	r4, r3
 80021bc:	4615      	mov	r5, r2
 80021be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80021c2:	1911      	adds	r1, r2, r4
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	416b      	adcs	r3, r5
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80021ce:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80021d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	f04f 0400 	mov.w	r4, #0
 80021de:	f04f 0500 	mov.w	r5, #0
 80021e2:	015d      	lsls	r5, r3, #5
 80021e4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80021e8:	0154      	lsls	r4, r2, #5
 80021ea:	4622      	mov	r2, r4
 80021ec:	462b      	mov	r3, r5
 80021ee:	ebb2 0800 	subs.w	r8, r2, r0
 80021f2:	eb63 0901 	sbc.w	r9, r3, r1
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002202:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002206:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800220a:	4690      	mov	r8, r2
 800220c:	4699      	mov	r9, r3
 800220e:	eb18 0a00 	adds.w	sl, r8, r0
 8002212:	eb49 0b01 	adc.w	fp, r9, r1
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002222:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002226:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800222a:	ebb2 040a 	subs.w	r4, r2, sl
 800222e:	603c      	str	r4, [r7, #0]
 8002230:	eb63 030b 	sbc.w	r3, r3, fp
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	e9d7 4500 	ldrd	r4, r5, [r7]
 800223a:	4623      	mov	r3, r4
 800223c:	181b      	adds	r3, r3, r0
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	462b      	mov	r3, r5
 8002242:	eb41 0303 	adc.w	r3, r1, r3
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	6a3a      	ldr	r2, [r7, #32]
 800224a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800224e:	f7ff ff3f 	bl	80020d0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002252:	2300      	movs	r3, #0
 8002254:	4618      	mov	r0, r3
 8002256:	3738      	adds	r7, #56	@ 0x38
 8002258:	46bd      	mov	sp, r7
 800225a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002260 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4b12      	ldr	r3, [pc, #72]	@ (80022b4 <HAL_MspInit+0x54>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	4a11      	ldr	r2, [pc, #68]	@ (80022b4 <HAL_MspInit+0x54>)
 8002270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002274:	6453      	str	r3, [r2, #68]	@ 0x44
 8002276:	4b0f      	ldr	r3, [pc, #60]	@ (80022b4 <HAL_MspInit+0x54>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_MspInit+0x54>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	4a0a      	ldr	r2, [pc, #40]	@ (80022b4 <HAL_MspInit+0x54>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002290:	6413      	str	r3, [r2, #64]	@ 0x40
 8002292:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <HAL_MspInit+0x54>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	210f      	movs	r1, #15
 80022a2:	f06f 0001 	mvn.w	r0, #1
 80022a6:	f000 fce4 	bl	8002c72 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800

080022b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a21      	ldr	r2, [pc, #132]	@ (800235c <HAL_I2C_MspInit+0xa4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d13c      	bne.n	8002354 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <HAL_I2C_MspInit+0xa8>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002360 <HAL_I2C_MspInit+0xa8>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <HAL_I2C_MspInit+0xa8>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022fc:	2312      	movs	r3, #18
 80022fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002308:	2304      	movs	r3, #4
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	4619      	mov	r1, r3
 8002312:	4814      	ldr	r0, [pc, #80]	@ (8002364 <HAL_I2C_MspInit+0xac>)
 8002314:	f001 f8e6 	bl	80034e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002318:	2308      	movs	r3, #8
 800231a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231c:	2312      	movs	r3, #18
 800231e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002324:	2303      	movs	r3, #3
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002328:	2309      	movs	r3, #9
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4619      	mov	r1, r3
 8002332:	480c      	ldr	r0, [pc, #48]	@ (8002364 <HAL_I2C_MspInit+0xac>)
 8002334:	f001 f8d6 	bl	80034e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <HAL_I2C_MspInit+0xa8>)
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	4a07      	ldr	r2, [pc, #28]	@ (8002360 <HAL_I2C_MspInit+0xa8>)
 8002342:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002346:	6413      	str	r3, [r2, #64]	@ 0x40
 8002348:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <HAL_I2C_MspInit+0xa8>)
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002354:	bf00      	nop
 8002356:	3728      	adds	r7, #40	@ 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40005800 	.word	0x40005800
 8002360:	40023800 	.word	0x40023800
 8002364:	40020400 	.word	0x40020400

08002368 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0b      	ldr	r2, [pc, #44]	@ (80023a4 <HAL_TIM_Base_MspInit+0x3c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d10d      	bne.n	8002396 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b0a      	ldr	r3, [pc, #40]	@ (80023a8 <HAL_TIM_Base_MspInit+0x40>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	4a09      	ldr	r2, [pc, #36]	@ (80023a8 <HAL_TIM_Base_MspInit+0x40>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6413      	str	r3, [r2, #64]	@ 0x40
 800238a:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <HAL_TIM_Base_MspInit+0x40>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40000400 	.word	0x40000400
 80023a8:	40023800 	.word	0x40023800

080023ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	@ 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a21      	ldr	r2, [pc, #132]	@ (8002450 <HAL_TIM_MspPostInit+0xa4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d13b      	bne.n	8002446 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	4b20      	ldr	r3, [pc, #128]	@ (8002454 <HAL_TIM_MspPostInit+0xa8>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002454 <HAL_TIM_MspPostInit+0xa8>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023de:	4b1d      	ldr	r3, [pc, #116]	@ (8002454 <HAL_TIM_MspPostInit+0xa8>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <HAL_TIM_MspPostInit+0xa8>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	4a18      	ldr	r2, [pc, #96]	@ (8002454 <HAL_TIM_MspPostInit+0xa8>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fa:	4b16      	ldr	r3, [pc, #88]	@ (8002454 <HAL_TIM_MspPostInit+0xa8>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002406:	23c0      	movs	r3, #192	@ 0xc0
 8002408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002416:	2302      	movs	r3, #2
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241a:	f107 0314 	add.w	r3, r7, #20
 800241e:	4619      	mov	r1, r3
 8002420:	480d      	ldr	r0, [pc, #52]	@ (8002458 <HAL_TIM_MspPostInit+0xac>)
 8002422:	f001 f85f 	bl	80034e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002426:	2303      	movs	r3, #3
 8002428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002436:	2302      	movs	r3, #2
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	4806      	ldr	r0, [pc, #24]	@ (800245c <HAL_TIM_MspPostInit+0xb0>)
 8002442:	f001 f84f 	bl	80034e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002446:	bf00      	nop
 8002448:	3728      	adds	r7, #40	@ 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40000400 	.word	0x40000400
 8002454:	40023800 	.word	0x40023800
 8002458:	40020000 	.word	0x40020000
 800245c:	40020400 	.word	0x40020400

08002460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	@ 0x28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a4d      	ldr	r2, [pc, #308]	@ (80025b4 <HAL_UART_MspInit+0x154>)
 800247e:	4293      	cmp	r3, r2
 8002480:	f040 8093 	bne.w	80025aa <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	4b4b      	ldr	r3, [pc, #300]	@ (80025b8 <HAL_UART_MspInit+0x158>)
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	4a4a      	ldr	r2, [pc, #296]	@ (80025b8 <HAL_UART_MspInit+0x158>)
 800248e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002492:	6413      	str	r3, [r2, #64]	@ 0x40
 8002494:	4b48      	ldr	r3, [pc, #288]	@ (80025b8 <HAL_UART_MspInit+0x158>)
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	4b44      	ldr	r3, [pc, #272]	@ (80025b8 <HAL_UART_MspInit+0x158>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a8:	4a43      	ldr	r2, [pc, #268]	@ (80025b8 <HAL_UART_MspInit+0x158>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80024b0:	4b41      	ldr	r3, [pc, #260]	@ (80025b8 <HAL_UART_MspInit+0x158>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024bc:	230c      	movs	r3, #12
 80024be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024cc:	2307      	movs	r3, #7
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	4619      	mov	r1, r3
 80024d6:	4839      	ldr	r0, [pc, #228]	@ (80025bc <HAL_UART_MspInit+0x15c>)
 80024d8:	f001 f804 	bl	80034e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80024dc:	4b38      	ldr	r3, [pc, #224]	@ (80025c0 <HAL_UART_MspInit+0x160>)
 80024de:	4a39      	ldr	r2, [pc, #228]	@ (80025c4 <HAL_UART_MspInit+0x164>)
 80024e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80024e2:	4b37      	ldr	r3, [pc, #220]	@ (80025c0 <HAL_UART_MspInit+0x160>)
 80024e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ea:	4b35      	ldr	r3, [pc, #212]	@ (80025c0 <HAL_UART_MspInit+0x160>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024f0:	4b33      	ldr	r3, [pc, #204]	@ (80025c0 <HAL_UART_MspInit+0x160>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024f6:	4b32      	ldr	r3, [pc, #200]	@ (80025c0 <HAL_UART_MspInit+0x160>)
 80024f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024fe:	4b30      	ldr	r3, [pc, #192]	@ (80025c0 <HAL_UART_MspInit+0x160>)
 8002500:	2200      	movs	r2, #0
 8002502:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002504:	4b2e      	ldr	r3, [pc, #184]	@ (80025c0 <HAL_UART_MspInit+0x160>)
 8002506:	2200      	movs	r2, #0
 8002508:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800250a:	4b2d      	ldr	r3, [pc, #180]	@ (80025c0 <HAL_UART_MspInit+0x160>)
 800250c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002510:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002512:	4b2b      	ldr	r3, [pc, #172]	@ (80025c0 <HAL_UART_MspInit+0x160>)
 8002514:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002518:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800251a:	4b29      	ldr	r3, [pc, #164]	@ (80025c0 <HAL_UART_MspInit+0x160>)
 800251c:	2200      	movs	r2, #0
 800251e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002520:	4827      	ldr	r0, [pc, #156]	@ (80025c0 <HAL_UART_MspInit+0x160>)
 8002522:	f000 fbdd 	bl	8002ce0 <HAL_DMA_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800252c:	f7ff fd2c 	bl	8001f88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a23      	ldr	r2, [pc, #140]	@ (80025c0 <HAL_UART_MspInit+0x160>)
 8002534:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002536:	4a22      	ldr	r2, [pc, #136]	@ (80025c0 <HAL_UART_MspInit+0x160>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800253c:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <HAL_UART_MspInit+0x168>)
 800253e:	4a23      	ldr	r2, [pc, #140]	@ (80025cc <HAL_UART_MspInit+0x16c>)
 8002540:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002542:	4b21      	ldr	r3, [pc, #132]	@ (80025c8 <HAL_UART_MspInit+0x168>)
 8002544:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002548:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800254a:	4b1f      	ldr	r3, [pc, #124]	@ (80025c8 <HAL_UART_MspInit+0x168>)
 800254c:	2240      	movs	r2, #64	@ 0x40
 800254e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002550:	4b1d      	ldr	r3, [pc, #116]	@ (80025c8 <HAL_UART_MspInit+0x168>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002556:	4b1c      	ldr	r3, [pc, #112]	@ (80025c8 <HAL_UART_MspInit+0x168>)
 8002558:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800255c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800255e:	4b1a      	ldr	r3, [pc, #104]	@ (80025c8 <HAL_UART_MspInit+0x168>)
 8002560:	2200      	movs	r2, #0
 8002562:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002564:	4b18      	ldr	r3, [pc, #96]	@ (80025c8 <HAL_UART_MspInit+0x168>)
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800256a:	4b17      	ldr	r3, [pc, #92]	@ (80025c8 <HAL_UART_MspInit+0x168>)
 800256c:	2200      	movs	r2, #0
 800256e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002570:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <HAL_UART_MspInit+0x168>)
 8002572:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002576:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002578:	4b13      	ldr	r3, [pc, #76]	@ (80025c8 <HAL_UART_MspInit+0x168>)
 800257a:	2200      	movs	r2, #0
 800257c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800257e:	4812      	ldr	r0, [pc, #72]	@ (80025c8 <HAL_UART_MspInit+0x168>)
 8002580:	f000 fbae 	bl	8002ce0 <HAL_DMA_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800258a:	f7ff fcfd 	bl	8001f88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a0d      	ldr	r2, [pc, #52]	@ (80025c8 <HAL_UART_MspInit+0x168>)
 8002592:	639a      	str	r2, [r3, #56]	@ 0x38
 8002594:	4a0c      	ldr	r2, [pc, #48]	@ (80025c8 <HAL_UART_MspInit+0x168>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2105      	movs	r1, #5
 800259e:	2026      	movs	r0, #38	@ 0x26
 80025a0:	f000 fb67 	bl	8002c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025a4:	2026      	movs	r0, #38	@ 0x26
 80025a6:	f000 fb80 	bl	8002caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	@ 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40004400 	.word	0x40004400
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020000 	.word	0x40020000
 80025c0:	20003fd0 	.word	0x20003fd0
 80025c4:	40026088 	.word	0x40026088
 80025c8:	20004030 	.word	0x20004030
 80025cc:	400260a0 	.word	0x400260a0

080025d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <NMI_Handler+0x4>

080025d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <HardFault_Handler+0x4>

080025e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <MemManage_Handler+0x4>

080025e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <BusFault_Handler+0x4>

080025f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <UsageFault_Handler+0x4>

080025f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800260a:	f000 fa37 	bl	8002a7c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800260e:	f005 fcfd 	bl	800800c <xTaskGetSchedulerState>
 8002612:	4603      	mov	r3, r0
 8002614:	2b01      	cmp	r3, #1
 8002616:	d001      	beq.n	800261c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002618:	f006 faf6 	bl	8008c08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}

08002620 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002624:	2001      	movs	r0, #1
 8002626:	f001 f913 	bl	8003850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}

0800262e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002632:	2002      	movs	r0, #2
 8002634:	f001 f90c 	bl	8003850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002640:	4802      	ldr	r0, [pc, #8]	@ (800264c <DMA1_Stream5_IRQHandler+0x10>)
 8002642:	f000 fce5 	bl	8003010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20003fd0 	.word	0x20003fd0

08002650 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002654:	4802      	ldr	r0, [pc, #8]	@ (8002660 <DMA1_Stream6_IRQHandler+0x10>)
 8002656:	f000 fcdb 	bl	8003010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20004030 	.word	0x20004030

08002664 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002668:	4802      	ldr	r0, [pc, #8]	@ (8002674 <USART2_IRQHandler+0x10>)
 800266a:	f002 fe71 	bl	8005350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20003f88 	.word	0x20003f88

08002678 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return 1;
 800267c:	2301      	movs	r3, #1
}
 800267e:	4618      	mov	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <_kill>:

int _kill(int pid, int sig)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002692:	f014 f849 	bl	8016728 <__errno>
 8002696:	4603      	mov	r3, r0
 8002698:	2216      	movs	r2, #22
 800269a:	601a      	str	r2, [r3, #0]
  return -1;
 800269c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <_exit>:

void _exit (int status)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ffe7 	bl	8002688 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026ba:	bf00      	nop
 80026bc:	e7fd      	b.n	80026ba <_exit+0x12>

080026be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	e00a      	b.n	80026e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026d0:	f3af 8000 	nop.w
 80026d4:	4601      	mov	r1, r0
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	60ba      	str	r2, [r7, #8]
 80026dc:	b2ca      	uxtb	r2, r1
 80026de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3301      	adds	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	dbf0      	blt.n	80026d0 <_read+0x12>
  }

  return len;
 80026ee:	687b      	ldr	r3, [r7, #4]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	e009      	b.n	800271e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	60ba      	str	r2, [r7, #8]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	3301      	adds	r3, #1
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	429a      	cmp	r2, r3
 8002724:	dbf1      	blt.n	800270a <_write+0x12>
  }
  return len;
 8002726:	687b      	ldr	r3, [r7, #4]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <_close>:

int _close(int file)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002738:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002758:	605a      	str	r2, [r3, #4]
  return 0;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <_isatty>:

int _isatty(int file)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002770:	2301      	movs	r3, #1
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027a0:	4a14      	ldr	r2, [pc, #80]	@ (80027f4 <_sbrk+0x5c>)
 80027a2:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <_sbrk+0x60>)
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027ac:	4b13      	ldr	r3, [pc, #76]	@ (80027fc <_sbrk+0x64>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b4:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <_sbrk+0x64>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	@ (8002800 <_sbrk+0x68>)
 80027b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ba:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <_sbrk+0x64>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d207      	bcs.n	80027d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027c8:	f013 ffae 	bl	8016728 <__errno>
 80027cc:	4603      	mov	r3, r0
 80027ce:	220c      	movs	r2, #12
 80027d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027d6:	e009      	b.n	80027ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027d8:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <_sbrk+0x64>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027de:	4b07      	ldr	r3, [pc, #28]	@ (80027fc <_sbrk+0x64>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	4a05      	ldr	r2, [pc, #20]	@ (80027fc <_sbrk+0x64>)
 80027e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ea:	68fb      	ldr	r3, [r7, #12]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20020000 	.word	0x20020000
 80027f8:	00000400 	.word	0x00000400
 80027fc:	200040cc 	.word	0x200040cc
 8002800:	2000def8 	.word	0x2000def8

08002804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <SystemInit+0x20>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280e:	4a05      	ldr	r2, [pc, #20]	@ (8002824 <SystemInit+0x20>)
 8002810:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002814:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002836:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002838:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800283c:	4904      	ldr	r1, [pc, #16]	@ (8002850 <cubemx_transport_open+0x28>)
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f002 fce2 	bl	8005208 <HAL_UART_Receive_DMA>
    return true;
 8002844:	2301      	movs	r3, #1
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200040d0 	.word	0x200040d0

08002854 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002862:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f002 fcf4 	bl	8005252 <HAL_UART_DMAStop>
    return true;
 800286a:	2301      	movs	r3, #1
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002888:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b20      	cmp	r3, #32
 8002894:	d11c      	bne.n	80028d0 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	b29b      	uxth	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	6978      	ldr	r0, [r7, #20]
 80028a0:	f002 fc42 	bl	8005128 <HAL_UART_Transmit_DMA>
 80028a4:	4603      	mov	r3, r0
 80028a6:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80028a8:	e002      	b.n	80028b0 <cubemx_transport_write+0x3c>
            osDelay(1);
 80028aa:	2001      	movs	r0, #1
 80028ac:	f003 ff5e 	bl	800676c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <cubemx_transport_write+0x4e>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d1f3      	bne.n	80028aa <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80028c2:	7cfb      	ldrb	r3, [r7, #19]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <cubemx_transport_write+0x58>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	e002      	b.n	80028d2 <cubemx_transport_write+0x5e>
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80028d0:	2300      	movs	r3, #0
    }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80028f0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80028f6:	b672      	cpsid	i
}
 80028f8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002906:	4a1c      	ldr	r2, [pc, #112]	@ (8002978 <cubemx_transport_read+0x9c>)
 8002908:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800290a:	b662      	cpsie	i
}
 800290c:	bf00      	nop
        __enable_irq();
        ms_used++;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3301      	adds	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002914:	2001      	movs	r0, #1
 8002916:	f003 ff29 	bl	800676c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800291a:	4b18      	ldr	r3, [pc, #96]	@ (800297c <cubemx_transport_read+0xa0>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	4b16      	ldr	r3, [pc, #88]	@ (8002978 <cubemx_transport_read+0x9c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d103      	bne.n	800292e <cubemx_transport_read+0x52>
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	dbe3      	blt.n	80028f6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002932:	e011      	b.n	8002958 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002934:	4b11      	ldr	r3, [pc, #68]	@ (800297c <cubemx_transport_read+0xa0>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	440b      	add	r3, r1
 800293e:	4910      	ldr	r1, [pc, #64]	@ (8002980 <cubemx_transport_read+0xa4>)
 8002940:	5c8a      	ldrb	r2, [r1, r2]
 8002942:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002944:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <cubemx_transport_read+0xa0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800294e:	4a0b      	ldr	r2, [pc, #44]	@ (800297c <cubemx_transport_read+0xa0>)
 8002950:	6013      	str	r3, [r2, #0]
        wrote++;
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	3301      	adds	r3, #1
 8002956:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002958:	4b08      	ldr	r3, [pc, #32]	@ (800297c <cubemx_transport_read+0xa0>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <cubemx_transport_read+0x9c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d003      	beq.n	800296c <cubemx_transport_read+0x90>
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	429a      	cmp	r2, r3
 800296a:	d3e3      	bcc.n	8002934 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 800296c:	69bb      	ldr	r3, [r7, #24]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200048d4 	.word	0x200048d4
 800297c:	200048d0 	.word	0x200048d0
 8002980:	200040d0 	.word	0x200040d0

08002984 <Reset_Handler>:
 8002984:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029bc <LoopFillZerobss+0xe>
 8002988:	f7ff ff3c 	bl	8002804 <SystemInit>
 800298c:	480c      	ldr	r0, [pc, #48]	@ (80029c0 <LoopFillZerobss+0x12>)
 800298e:	490d      	ldr	r1, [pc, #52]	@ (80029c4 <LoopFillZerobss+0x16>)
 8002990:	4a0d      	ldr	r2, [pc, #52]	@ (80029c8 <LoopFillZerobss+0x1a>)
 8002992:	2300      	movs	r3, #0
 8002994:	e002      	b.n	800299c <LoopCopyDataInit>

08002996 <CopyDataInit>:
 8002996:	58d4      	ldr	r4, [r2, r3]
 8002998:	50c4      	str	r4, [r0, r3]
 800299a:	3304      	adds	r3, #4

0800299c <LoopCopyDataInit>:
 800299c:	18c4      	adds	r4, r0, r3
 800299e:	428c      	cmp	r4, r1
 80029a0:	d3f9      	bcc.n	8002996 <CopyDataInit>
 80029a2:	4a0a      	ldr	r2, [pc, #40]	@ (80029cc <LoopFillZerobss+0x1e>)
 80029a4:	4c0a      	ldr	r4, [pc, #40]	@ (80029d0 <LoopFillZerobss+0x22>)
 80029a6:	2300      	movs	r3, #0
 80029a8:	e001      	b.n	80029ae <LoopFillZerobss>

080029aa <FillZerobss>:
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	3204      	adds	r2, #4

080029ae <LoopFillZerobss>:
 80029ae:	42a2      	cmp	r2, r4
 80029b0:	d3fb      	bcc.n	80029aa <FillZerobss>
 80029b2:	f013 febf 	bl	8016734 <__libc_init_array>
 80029b6:	f7fe ff7d 	bl	80018b4 <main>
 80029ba:	4770      	bx	lr
 80029bc:	20020000 	.word	0x20020000
 80029c0:	20000000 	.word	0x20000000
 80029c4:	200002b8 	.word	0x200002b8
 80029c8:	08018504 	.word	0x08018504
 80029cc:	200002b8 	.word	0x200002b8
 80029d0:	2000def4 	.word	0x2000def4

080029d4 <ADC_IRQHandler>:
 80029d4:	e7fe      	b.n	80029d4 <ADC_IRQHandler>
	...

080029d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002a18 <HAL_Init+0x40>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a18 <HAL_Init+0x40>)
 80029e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a18 <HAL_Init+0x40>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002a18 <HAL_Init+0x40>)
 80029ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f4:	4b08      	ldr	r3, [pc, #32]	@ (8002a18 <HAL_Init+0x40>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a07      	ldr	r2, [pc, #28]	@ (8002a18 <HAL_Init+0x40>)
 80029fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a00:	2003      	movs	r0, #3
 8002a02:	f000 f92b 	bl	8002c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a06:	200f      	movs	r0, #15
 8002a08:	f000 f808 	bl	8002a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a0c:	f7ff fc28 	bl	8002260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023c00 	.word	0x40023c00

08002a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a24:	4b12      	ldr	r3, [pc, #72]	@ (8002a70 <HAL_InitTick+0x54>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_InitTick+0x58>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f943 	bl	8002cc6 <HAL_SYSTICK_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00e      	b.n	8002a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b0f      	cmp	r3, #15
 8002a4e:	d80a      	bhi.n	8002a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a50:	2200      	movs	r2, #0
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a58:	f000 f90b 	bl	8002c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a5c:	4a06      	ldr	r2, [pc, #24]	@ (8002a78 <HAL_InitTick+0x5c>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000004 	.word	0x20000004
 8002a74:	2000000c 	.word	0x2000000c
 8002a78:	20000008 	.word	0x20000008

08002a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a80:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <HAL_IncTick+0x20>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_IncTick+0x24>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a04      	ldr	r2, [pc, #16]	@ (8002aa0 <HAL_IncTick+0x24>)
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	2000000c 	.word	0x2000000c
 8002aa0:	200048d8 	.word	0x200048d8

08002aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	@ (8002ab8 <HAL_GetTick+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	200048d8 	.word	0x200048d8

08002abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002acc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aee:	4a04      	ldr	r2, [pc, #16]	@ (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	60d3      	str	r3, [r2, #12]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b08:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <__NVIC_GetPriorityGrouping+0x18>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	f003 0307 	and.w	r3, r3, #7
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	db0b      	blt.n	8002b4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	f003 021f 	and.w	r2, r3, #31
 8002b38:	4907      	ldr	r1, [pc, #28]	@ (8002b58 <__NVIC_EnableIRQ+0x38>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2001      	movs	r0, #1
 8002b42:	fa00 f202 	lsl.w	r2, r0, r2
 8002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000e100 	.word	0xe000e100

08002b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	6039      	str	r1, [r7, #0]
 8002b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	db0a      	blt.n	8002b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	490c      	ldr	r1, [pc, #48]	@ (8002ba8 <__NVIC_SetPriority+0x4c>)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	0112      	lsls	r2, r2, #4
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	440b      	add	r3, r1
 8002b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b84:	e00a      	b.n	8002b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4908      	ldr	r1, [pc, #32]	@ (8002bac <__NVIC_SetPriority+0x50>)
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	3b04      	subs	r3, #4
 8002b94:	0112      	lsls	r2, r2, #4
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	440b      	add	r3, r1
 8002b9a:	761a      	strb	r2, [r3, #24]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000e100 	.word	0xe000e100
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	@ 0x24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f1c3 0307 	rsb	r3, r3, #7
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	bf28      	it	cs
 8002bce:	2304      	movcs	r3, #4
 8002bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	2b06      	cmp	r3, #6
 8002bd8:	d902      	bls.n	8002be0 <NVIC_EncodePriority+0x30>
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3b03      	subs	r3, #3
 8002bde:	e000      	b.n	8002be2 <NVIC_EncodePriority+0x32>
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	43d9      	mvns	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	4313      	orrs	r3, r2
         );
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3724      	adds	r7, #36	@ 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c28:	d301      	bcc.n	8002c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e00f      	b.n	8002c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c58 <SysTick_Config+0x40>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c36:	210f      	movs	r1, #15
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c3c:	f7ff ff8e 	bl	8002b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c40:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <SysTick_Config+0x40>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c46:	4b04      	ldr	r3, [pc, #16]	@ (8002c58 <SysTick_Config+0x40>)
 8002c48:	2207      	movs	r2, #7
 8002c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	e000e010 	.word	0xe000e010

08002c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ff29 	bl	8002abc <__NVIC_SetPriorityGrouping>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b086      	sub	sp, #24
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c84:	f7ff ff3e 	bl	8002b04 <__NVIC_GetPriorityGrouping>
 8002c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	6978      	ldr	r0, [r7, #20]
 8002c90:	f7ff ff8e 	bl	8002bb0 <NVIC_EncodePriority>
 8002c94:	4602      	mov	r2, r0
 8002c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff5d 	bl	8002b5c <__NVIC_SetPriority>
}
 8002ca2:	bf00      	nop
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff31 	bl	8002b20 <__NVIC_EnableIRQ>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff ffa2 	bl	8002c18 <SysTick_Config>
 8002cd4:	4603      	mov	r3, r0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cec:	f7ff feda 	bl	8002aa4 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e099      	b.n	8002e30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d1c:	e00f      	b.n	8002d3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d1e:	f7ff fec1 	bl	8002aa4 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d908      	bls.n	8002d3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2203      	movs	r2, #3
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e078      	b.n	8002e30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e8      	bne.n	8002d1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4b38      	ldr	r3, [pc, #224]	@ (8002e38 <HAL_DMA_Init+0x158>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d107      	bne.n	8002da8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	4313      	orrs	r3, r2
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f023 0307 	bic.w	r3, r3, #7
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d117      	bne.n	8002e02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00e      	beq.n	8002e02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fb01 	bl	80033ec <DMA_CheckFifoParam>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2240      	movs	r2, #64	@ 0x40
 8002df4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e016      	b.n	8002e30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fab8 	bl	8003380 <DMA_CalcBaseAndBitshift>
 8002e10:	4603      	mov	r3, r0
 8002e12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e18:	223f      	movs	r2, #63	@ 0x3f
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	f010803f 	.word	0xf010803f

08002e3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_DMA_Start_IT+0x26>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e040      	b.n	8002ee4 <HAL_DMA_Start_IT+0xa8>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d12f      	bne.n	8002ed6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 fa4a 	bl	8003324 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	223f      	movs	r2, #63	@ 0x3f
 8002e96:	409a      	lsls	r2, r3
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0216 	orr.w	r2, r2, #22
 8002eaa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0208 	orr.w	r2, r2, #8
 8002ec2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e005      	b.n	8002ee2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002efa:	f7ff fdd3 	bl	8002aa4 <HAL_GetTick>
 8002efe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d008      	beq.n	8002f1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2280      	movs	r2, #128	@ 0x80
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e052      	b.n	8002fc4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0216 	bic.w	r2, r2, #22
 8002f2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d103      	bne.n	8002f4e <HAL_DMA_Abort+0x62>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0208 	bic.w	r2, r2, #8
 8002f5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f6e:	e013      	b.n	8002f98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f70:	f7ff fd98 	bl	8002aa4 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b05      	cmp	r3, #5
 8002f7c:	d90c      	bls.n	8002f98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2203      	movs	r2, #3
 8002f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e015      	b.n	8002fc4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1e4      	bne.n	8002f70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002faa:	223f      	movs	r2, #63	@ 0x3f
 8002fac:	409a      	lsls	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d004      	beq.n	8002fea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2280      	movs	r2, #128	@ 0x80
 8002fe4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e00c      	b.n	8003004 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2205      	movs	r2, #5
 8002fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800301c:	4b8e      	ldr	r3, [pc, #568]	@ (8003258 <HAL_DMA_IRQHandler+0x248>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a8e      	ldr	r2, [pc, #568]	@ (800325c <HAL_DMA_IRQHandler+0x24c>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	0a9b      	lsrs	r3, r3, #10
 8003028:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303a:	2208      	movs	r2, #8
 800303c:	409a      	lsls	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01a      	beq.n	800307c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d013      	beq.n	800307c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0204 	bic.w	r2, r2, #4
 8003062:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003068:	2208      	movs	r2, #8
 800306a:	409a      	lsls	r2, r3
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003074:	f043 0201 	orr.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003080:	2201      	movs	r2, #1
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d012      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00b      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309e:	2201      	movs	r2, #1
 80030a0:	409a      	lsls	r2, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030aa:	f043 0202 	orr.w	r2, r3, #2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b6:	2204      	movs	r2, #4
 80030b8:	409a      	lsls	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d012      	beq.n	80030e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00b      	beq.n	80030e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	2204      	movs	r2, #4
 80030d6:	409a      	lsls	r2, r3
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e0:	f043 0204 	orr.w	r2, r3, #4
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ec:	2210      	movs	r2, #16
 80030ee:	409a      	lsls	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d043      	beq.n	8003180 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d03c      	beq.n	8003180 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310a:	2210      	movs	r2, #16
 800310c:	409a      	lsls	r2, r3
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d018      	beq.n	8003152 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d108      	bne.n	8003140 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d024      	beq.n	8003180 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	4798      	blx	r3
 800313e:	e01f      	b.n	8003180 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01b      	beq.n	8003180 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
 8003150:	e016      	b.n	8003180 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d107      	bne.n	8003170 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0208 	bic.w	r2, r2, #8
 800316e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003184:	2220      	movs	r2, #32
 8003186:	409a      	lsls	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 808f 	beq.w	80032b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8087 	beq.w	80032b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a6:	2220      	movs	r2, #32
 80031a8:	409a      	lsls	r2, r3
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d136      	bne.n	8003228 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0216 	bic.w	r2, r2, #22
 80031c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695a      	ldr	r2, [r3, #20]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d103      	bne.n	80031ea <HAL_DMA_IRQHandler+0x1da>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0208 	bic.w	r2, r2, #8
 80031f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fe:	223f      	movs	r2, #63	@ 0x3f
 8003200:	409a      	lsls	r2, r3
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321a:	2b00      	cmp	r3, #0
 800321c:	d07e      	beq.n	800331c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4798      	blx	r3
        }
        return;
 8003226:	e079      	b.n	800331c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01d      	beq.n	8003272 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10d      	bne.n	8003260 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003248:	2b00      	cmp	r3, #0
 800324a:	d031      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4798      	blx	r3
 8003254:	e02c      	b.n	80032b0 <HAL_DMA_IRQHandler+0x2a0>
 8003256:	bf00      	nop
 8003258:	20000004 	.word	0x20000004
 800325c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d023      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	4798      	blx	r3
 8003270:	e01e      	b.n	80032b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10f      	bne.n	80032a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0210 	bic.w	r2, r2, #16
 800328e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d032      	beq.n	800331e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d022      	beq.n	800330a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2205      	movs	r2, #5
 80032c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	3301      	adds	r3, #1
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d307      	bcc.n	80032f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f2      	bne.n	80032dc <HAL_DMA_IRQHandler+0x2cc>
 80032f6:	e000      	b.n	80032fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	4798      	blx	r3
 800331a:	e000      	b.n	800331e <HAL_DMA_IRQHandler+0x30e>
        return;
 800331c:	bf00      	nop
    }
  }
}
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003340:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b40      	cmp	r3, #64	@ 0x40
 8003350:	d108      	bne.n	8003364 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003362:	e007      	b.n	8003374 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	60da      	str	r2, [r3, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	3b10      	subs	r3, #16
 8003390:	4a14      	ldr	r2, [pc, #80]	@ (80033e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	091b      	lsrs	r3, r3, #4
 8003398:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800339a:	4a13      	ldr	r2, [pc, #76]	@ (80033e8 <DMA_CalcBaseAndBitshift+0x68>)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d909      	bls.n	80033c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	1d1a      	adds	r2, r3, #4
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	659a      	str	r2, [r3, #88]	@ 0x58
 80033c0:	e007      	b.n	80033d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033ca:	f023 0303 	bic.w	r3, r3, #3
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	aaaaaaab 	.word	0xaaaaaaab
 80033e8:	0801764c 	.word	0x0801764c

080033ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d11f      	bne.n	8003446 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d856      	bhi.n	80034ba <DMA_CheckFifoParam+0xce>
 800340c:	a201      	add	r2, pc, #4	@ (adr r2, 8003414 <DMA_CheckFifoParam+0x28>)
 800340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003412:	bf00      	nop
 8003414:	08003425 	.word	0x08003425
 8003418:	08003437 	.word	0x08003437
 800341c:	08003425 	.word	0x08003425
 8003420:	080034bb 	.word	0x080034bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003428:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d046      	beq.n	80034be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003434:	e043      	b.n	80034be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800343e:	d140      	bne.n	80034c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003444:	e03d      	b.n	80034c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800344e:	d121      	bne.n	8003494 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d837      	bhi.n	80034c6 <DMA_CheckFifoParam+0xda>
 8003456:	a201      	add	r2, pc, #4	@ (adr r2, 800345c <DMA_CheckFifoParam+0x70>)
 8003458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345c:	0800346d 	.word	0x0800346d
 8003460:	08003473 	.word	0x08003473
 8003464:	0800346d 	.word	0x0800346d
 8003468:	08003485 	.word	0x08003485
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      break;
 8003470:	e030      	b.n	80034d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003476:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d025      	beq.n	80034ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003482:	e022      	b.n	80034ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800348c:	d11f      	bne.n	80034ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003492:	e01c      	b.n	80034ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d903      	bls.n	80034a2 <DMA_CheckFifoParam+0xb6>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b03      	cmp	r3, #3
 800349e:	d003      	beq.n	80034a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034a0:	e018      	b.n	80034d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
      break;
 80034a6:	e015      	b.n	80034d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00e      	beq.n	80034d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
      break;
 80034b8:	e00b      	b.n	80034d2 <DMA_CheckFifoParam+0xe6>
      break;
 80034ba:	bf00      	nop
 80034bc:	e00a      	b.n	80034d4 <DMA_CheckFifoParam+0xe8>
      break;
 80034be:	bf00      	nop
 80034c0:	e008      	b.n	80034d4 <DMA_CheckFifoParam+0xe8>
      break;
 80034c2:	bf00      	nop
 80034c4:	e006      	b.n	80034d4 <DMA_CheckFifoParam+0xe8>
      break;
 80034c6:	bf00      	nop
 80034c8:	e004      	b.n	80034d4 <DMA_CheckFifoParam+0xe8>
      break;
 80034ca:	bf00      	nop
 80034cc:	e002      	b.n	80034d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80034ce:	bf00      	nop
 80034d0:	e000      	b.n	80034d4 <DMA_CheckFifoParam+0xe8>
      break;
 80034d2:	bf00      	nop
    }
  } 
  
  return status; 
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop

080034e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	@ 0x24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	e159      	b.n	80037b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003500:	2201      	movs	r2, #1
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	429a      	cmp	r2, r3
 800351a:	f040 8148 	bne.w	80037ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b01      	cmp	r3, #1
 8003528:	d005      	beq.n	8003536 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003532:	2b02      	cmp	r3, #2
 8003534:	d130      	bne.n	8003598 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	2203      	movs	r2, #3
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800356c:	2201      	movs	r2, #1
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 0201 	and.w	r2, r3, #1
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d017      	beq.n	80035d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	2203      	movs	r2, #3
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d123      	bne.n	8003628 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	08da      	lsrs	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3208      	adds	r2, #8
 80035e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	220f      	movs	r2, #15
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	08da      	lsrs	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3208      	adds	r2, #8
 8003622:	69b9      	ldr	r1, [r7, #24]
 8003624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	2203      	movs	r2, #3
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0203 	and.w	r2, r3, #3
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80a2 	beq.w	80037ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	4b57      	ldr	r3, [pc, #348]	@ (80037cc <HAL_GPIO_Init+0x2e8>)
 8003670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003672:	4a56      	ldr	r2, [pc, #344]	@ (80037cc <HAL_GPIO_Init+0x2e8>)
 8003674:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003678:	6453      	str	r3, [r2, #68]	@ 0x44
 800367a:	4b54      	ldr	r3, [pc, #336]	@ (80037cc <HAL_GPIO_Init+0x2e8>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003686:	4a52      	ldr	r2, [pc, #328]	@ (80037d0 <HAL_GPIO_Init+0x2ec>)
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	089b      	lsrs	r3, r3, #2
 800368c:	3302      	adds	r3, #2
 800368e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	220f      	movs	r2, #15
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a49      	ldr	r2, [pc, #292]	@ (80037d4 <HAL_GPIO_Init+0x2f0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d019      	beq.n	80036e6 <HAL_GPIO_Init+0x202>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a48      	ldr	r2, [pc, #288]	@ (80037d8 <HAL_GPIO_Init+0x2f4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <HAL_GPIO_Init+0x1fe>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a47      	ldr	r2, [pc, #284]	@ (80037dc <HAL_GPIO_Init+0x2f8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00d      	beq.n	80036de <HAL_GPIO_Init+0x1fa>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a46      	ldr	r2, [pc, #280]	@ (80037e0 <HAL_GPIO_Init+0x2fc>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d007      	beq.n	80036da <HAL_GPIO_Init+0x1f6>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a45      	ldr	r2, [pc, #276]	@ (80037e4 <HAL_GPIO_Init+0x300>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_GPIO_Init+0x1f2>
 80036d2:	2304      	movs	r3, #4
 80036d4:	e008      	b.n	80036e8 <HAL_GPIO_Init+0x204>
 80036d6:	2307      	movs	r3, #7
 80036d8:	e006      	b.n	80036e8 <HAL_GPIO_Init+0x204>
 80036da:	2303      	movs	r3, #3
 80036dc:	e004      	b.n	80036e8 <HAL_GPIO_Init+0x204>
 80036de:	2302      	movs	r3, #2
 80036e0:	e002      	b.n	80036e8 <HAL_GPIO_Init+0x204>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <HAL_GPIO_Init+0x204>
 80036e6:	2300      	movs	r3, #0
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	f002 0203 	and.w	r2, r2, #3
 80036ee:	0092      	lsls	r2, r2, #2
 80036f0:	4093      	lsls	r3, r2
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036f8:	4935      	ldr	r1, [pc, #212]	@ (80037d0 <HAL_GPIO_Init+0x2ec>)
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	089b      	lsrs	r3, r3, #2
 80036fe:	3302      	adds	r3, #2
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003706:	4b38      	ldr	r3, [pc, #224]	@ (80037e8 <HAL_GPIO_Init+0x304>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	43db      	mvns	r3, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4013      	ands	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800372a:	4a2f      	ldr	r2, [pc, #188]	@ (80037e8 <HAL_GPIO_Init+0x304>)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003730:	4b2d      	ldr	r3, [pc, #180]	@ (80037e8 <HAL_GPIO_Init+0x304>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003754:	4a24      	ldr	r2, [pc, #144]	@ (80037e8 <HAL_GPIO_Init+0x304>)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800375a:	4b23      	ldr	r3, [pc, #140]	@ (80037e8 <HAL_GPIO_Init+0x304>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800377e:	4a1a      	ldr	r2, [pc, #104]	@ (80037e8 <HAL_GPIO_Init+0x304>)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003784:	4b18      	ldr	r3, [pc, #96]	@ (80037e8 <HAL_GPIO_Init+0x304>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037a8:	4a0f      	ldr	r2, [pc, #60]	@ (80037e8 <HAL_GPIO_Init+0x304>)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3301      	adds	r3, #1
 80037b2:	61fb      	str	r3, [r7, #28]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	2b0f      	cmp	r3, #15
 80037b8:	f67f aea2 	bls.w	8003500 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	3724      	adds	r7, #36	@ 0x24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40013800 	.word	0x40013800
 80037d4:	40020000 	.word	0x40020000
 80037d8:	40020400 	.word	0x40020400
 80037dc:	40020800 	.word	0x40020800
 80037e0:	40020c00 	.word	0x40020c00
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40013c00 	.word	0x40013c00

080037ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
 8003808:	e001      	b.n	800380e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
 8003828:	4613      	mov	r3, r2
 800382a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800382c:	787b      	ldrb	r3, [r7, #1]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003832:	887a      	ldrh	r2, [r7, #2]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003838:	e003      	b.n	8003842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800383a:	887b      	ldrh	r3, [r7, #2]
 800383c:	041a      	lsls	r2, r3, #16
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	619a      	str	r2, [r3, #24]
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800385a:	4b08      	ldr	r3, [pc, #32]	@ (800387c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d006      	beq.n	8003874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003866:	4a05      	ldr	r2, [pc, #20]	@ (800387c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd ffd4 	bl	800181c <HAL_GPIO_EXTI_Callback>
  }
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40013c00 	.word	0x40013c00

08003880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e12b      	b.n	8003aea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fe fd06 	bl	80022b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2224      	movs	r2, #36	@ 0x24
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e4:	f000 fd80 	bl	80043e8 <HAL_RCC_GetPCLK1Freq>
 80038e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4a81      	ldr	r2, [pc, #516]	@ (8003af4 <HAL_I2C_Init+0x274>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d807      	bhi.n	8003904 <HAL_I2C_Init+0x84>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a80      	ldr	r2, [pc, #512]	@ (8003af8 <HAL_I2C_Init+0x278>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	bf94      	ite	ls
 80038fc:	2301      	movls	r3, #1
 80038fe:	2300      	movhi	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e006      	b.n	8003912 <HAL_I2C_Init+0x92>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a7d      	ldr	r2, [pc, #500]	@ (8003afc <HAL_I2C_Init+0x27c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	bf94      	ite	ls
 800390c:	2301      	movls	r3, #1
 800390e:	2300      	movhi	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e0e7      	b.n	8003aea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a78      	ldr	r2, [pc, #480]	@ (8003b00 <HAL_I2C_Init+0x280>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	0c9b      	lsrs	r3, r3, #18
 8003924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4a6a      	ldr	r2, [pc, #424]	@ (8003af4 <HAL_I2C_Init+0x274>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d802      	bhi.n	8003954 <HAL_I2C_Init+0xd4>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	3301      	adds	r3, #1
 8003952:	e009      	b.n	8003968 <HAL_I2C_Init+0xe8>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	4a69      	ldr	r2, [pc, #420]	@ (8003b04 <HAL_I2C_Init+0x284>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	3301      	adds	r3, #1
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	430b      	orrs	r3, r1
 800396e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800397a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	495c      	ldr	r1, [pc, #368]	@ (8003af4 <HAL_I2C_Init+0x274>)
 8003984:	428b      	cmp	r3, r1
 8003986:	d819      	bhi.n	80039bc <HAL_I2C_Init+0x13c>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e59      	subs	r1, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	fbb1 f3f3 	udiv	r3, r1, r3
 8003996:	1c59      	adds	r1, r3, #1
 8003998:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800399c:	400b      	ands	r3, r1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_I2C_Init+0x138>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1e59      	subs	r1, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80039b0:	3301      	adds	r3, #1
 80039b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b6:	e051      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 80039b8:	2304      	movs	r3, #4
 80039ba:	e04f      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d111      	bne.n	80039e8 <HAL_I2C_Init+0x168>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1e58      	subs	r0, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	440b      	add	r3, r1
 80039d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e012      	b.n	8003a0e <HAL_I2C_Init+0x18e>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1e58      	subs	r0, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	0099      	lsls	r1, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fe:	3301      	adds	r3, #1
 8003a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_Init+0x196>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e022      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10e      	bne.n	8003a3c <HAL_I2C_Init+0x1bc>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1e58      	subs	r0, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	440b      	add	r3, r1
 8003a2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a3a:	e00f      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1e58      	subs	r0, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	0099      	lsls	r1, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	6809      	ldr	r1, [r1, #0]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a8a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6911      	ldr	r1, [r2, #16]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68d2      	ldr	r2, [r2, #12]
 8003a96:	4311      	orrs	r1, r2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	000186a0 	.word	0x000186a0
 8003af8:	001e847f 	.word	0x001e847f
 8003afc:	003d08ff 	.word	0x003d08ff
 8003b00:	431bde83 	.word	0x431bde83
 8003b04:	10624dd3 	.word	0x10624dd3

08003b08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e267      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d075      	beq.n	8003c12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b26:	4b88      	ldr	r3, [pc, #544]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d00c      	beq.n	8003b4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b32:	4b85      	ldr	r3, [pc, #532]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d112      	bne.n	8003b64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b3e:	4b82      	ldr	r3, [pc, #520]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b4a:	d10b      	bne.n	8003b64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d05b      	beq.n	8003c10 <HAL_RCC_OscConfig+0x108>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d157      	bne.n	8003c10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e242      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b6c:	d106      	bne.n	8003b7c <HAL_RCC_OscConfig+0x74>
 8003b6e:	4b76      	ldr	r3, [pc, #472]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a75      	ldr	r2, [pc, #468]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e01d      	b.n	8003bb8 <HAL_RCC_OscConfig+0xb0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b84:	d10c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x98>
 8003b86:	4b70      	ldr	r3, [pc, #448]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a6f      	ldr	r2, [pc, #444]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	4b6d      	ldr	r3, [pc, #436]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a6c      	ldr	r2, [pc, #432]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e00b      	b.n	8003bb8 <HAL_RCC_OscConfig+0xb0>
 8003ba0:	4b69      	ldr	r3, [pc, #420]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a68      	ldr	r2, [pc, #416]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	4b66      	ldr	r3, [pc, #408]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a65      	ldr	r2, [pc, #404]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d013      	beq.n	8003be8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7fe ff70 	bl	8002aa4 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bc8:	f7fe ff6c 	bl	8002aa4 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b64      	cmp	r3, #100	@ 0x64
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e207      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bda:	4b5b      	ldr	r3, [pc, #364]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0xc0>
 8003be6:	e014      	b.n	8003c12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fe ff5c 	bl	8002aa4 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf0:	f7fe ff58 	bl	8002aa4 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	@ 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e1f3      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c02:	4b51      	ldr	r3, [pc, #324]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0xe8>
 8003c0e:	e000      	b.n	8003c12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d063      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c2a:	4b47      	ldr	r3, [pc, #284]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d11c      	bne.n	8003c70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c36:	4b44      	ldr	r3, [pc, #272]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d116      	bne.n	8003c70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c42:	4b41      	ldr	r3, [pc, #260]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_RCC_OscConfig+0x152>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d001      	beq.n	8003c5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e1c7      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4937      	ldr	r1, [pc, #220]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6e:	e03a      	b.n	8003ce6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d020      	beq.n	8003cba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c78:	4b34      	ldr	r3, [pc, #208]	@ (8003d4c <HAL_RCC_OscConfig+0x244>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7e:	f7fe ff11 	bl	8002aa4 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c86:	f7fe ff0d 	bl	8002aa4 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e1a8      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c98:	4b2b      	ldr	r3, [pc, #172]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca4:	4b28      	ldr	r3, [pc, #160]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4925      	ldr	r1, [pc, #148]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	600b      	str	r3, [r1, #0]
 8003cb8:	e015      	b.n	8003ce6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cba:	4b24      	ldr	r3, [pc, #144]	@ (8003d4c <HAL_RCC_OscConfig+0x244>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fe fef0 	bl	8002aa4 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc8:	f7fe feec 	bl	8002aa4 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e187      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cda:	4b1b      	ldr	r3, [pc, #108]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d036      	beq.n	8003d60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d016      	beq.n	8003d28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfa:	4b15      	ldr	r3, [pc, #84]	@ (8003d50 <HAL_RCC_OscConfig+0x248>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d00:	f7fe fed0 	bl	8002aa4 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d08:	f7fe fecc 	bl	8002aa4 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e167      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d48 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x200>
 8003d26:	e01b      	b.n	8003d60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d28:	4b09      	ldr	r3, [pc, #36]	@ (8003d50 <HAL_RCC_OscConfig+0x248>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2e:	f7fe feb9 	bl	8002aa4 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d34:	e00e      	b.n	8003d54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d36:	f7fe feb5 	bl	8002aa4 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d907      	bls.n	8003d54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e150      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	42470000 	.word	0x42470000
 8003d50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d54:	4b88      	ldr	r3, [pc, #544]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1ea      	bne.n	8003d36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8097 	beq.w	8003e9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d72:	4b81      	ldr	r3, [pc, #516]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10f      	bne.n	8003d9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	4b7d      	ldr	r3, [pc, #500]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	4a7c      	ldr	r2, [pc, #496]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d8e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9e:	4b77      	ldr	r3, [pc, #476]	@ (8003f7c <HAL_RCC_OscConfig+0x474>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d118      	bne.n	8003ddc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003daa:	4b74      	ldr	r3, [pc, #464]	@ (8003f7c <HAL_RCC_OscConfig+0x474>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a73      	ldr	r2, [pc, #460]	@ (8003f7c <HAL_RCC_OscConfig+0x474>)
 8003db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db6:	f7fe fe75 	bl	8002aa4 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dbe:	f7fe fe71 	bl	8002aa4 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e10c      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd0:	4b6a      	ldr	r3, [pc, #424]	@ (8003f7c <HAL_RCC_OscConfig+0x474>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d106      	bne.n	8003df2 <HAL_RCC_OscConfig+0x2ea>
 8003de4:	4b64      	ldr	r3, [pc, #400]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de8:	4a63      	ldr	r2, [pc, #396]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003dea:	f043 0301 	orr.w	r3, r3, #1
 8003dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df0:	e01c      	b.n	8003e2c <HAL_RCC_OscConfig+0x324>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b05      	cmp	r3, #5
 8003df8:	d10c      	bne.n	8003e14 <HAL_RCC_OscConfig+0x30c>
 8003dfa:	4b5f      	ldr	r3, [pc, #380]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfe:	4a5e      	ldr	r2, [pc, #376]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003e00:	f043 0304 	orr.w	r3, r3, #4
 8003e04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e06:	4b5c      	ldr	r3, [pc, #368]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0a:	4a5b      	ldr	r2, [pc, #364]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e12:	e00b      	b.n	8003e2c <HAL_RCC_OscConfig+0x324>
 8003e14:	4b58      	ldr	r3, [pc, #352]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e18:	4a57      	ldr	r2, [pc, #348]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e20:	4b55      	ldr	r3, [pc, #340]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e24:	4a54      	ldr	r2, [pc, #336]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003e26:	f023 0304 	bic.w	r3, r3, #4
 8003e2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d015      	beq.n	8003e60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e34:	f7fe fe36 	bl	8002aa4 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e3c:	f7fe fe32 	bl	8002aa4 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e0cb      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e52:	4b49      	ldr	r3, [pc, #292]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0ee      	beq.n	8003e3c <HAL_RCC_OscConfig+0x334>
 8003e5e:	e014      	b.n	8003e8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e60:	f7fe fe20 	bl	8002aa4 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e66:	e00a      	b.n	8003e7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e68:	f7fe fe1c 	bl	8002aa4 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e0b5      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1ee      	bne.n	8003e68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d105      	bne.n	8003e9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e90:	4b39      	ldr	r3, [pc, #228]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e94:	4a38      	ldr	r2, [pc, #224]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003e96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80a1 	beq.w	8003fe8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ea6:	4b34      	ldr	r3, [pc, #208]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d05c      	beq.n	8003f6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d141      	bne.n	8003f3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eba:	4b31      	ldr	r3, [pc, #196]	@ (8003f80 <HAL_RCC_OscConfig+0x478>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fdf0 	bl	8002aa4 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec8:	f7fe fdec 	bl	8002aa4 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e087      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eda:	4b27      	ldr	r3, [pc, #156]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	019b      	lsls	r3, r3, #6
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efc:	085b      	lsrs	r3, r3, #1
 8003efe:	3b01      	subs	r3, #1
 8003f00:	041b      	lsls	r3, r3, #16
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	061b      	lsls	r3, r3, #24
 8003f0a:	491b      	ldr	r1, [pc, #108]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f10:	4b1b      	ldr	r3, [pc, #108]	@ (8003f80 <HAL_RCC_OscConfig+0x478>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f16:	f7fe fdc5 	bl	8002aa4 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1e:	f7fe fdc1 	bl	8002aa4 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e05c      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f30:	4b11      	ldr	r3, [pc, #68]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x416>
 8003f3c:	e054      	b.n	8003fe8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3e:	4b10      	ldr	r3, [pc, #64]	@ (8003f80 <HAL_RCC_OscConfig+0x478>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fe fdae 	bl	8002aa4 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fe fdaa 	bl	8002aa4 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e045      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5e:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <HAL_RCC_OscConfig+0x470>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x444>
 8003f6a:	e03d      	b.n	8003fe8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d107      	bne.n	8003f84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e038      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40007000 	.word	0x40007000
 8003f80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f84:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <HAL_RCC_OscConfig+0x4ec>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d028      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d121      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d11a      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d111      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fca:	085b      	lsrs	r3, r3, #1
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d107      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40023800 	.word	0x40023800

08003ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0cc      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800400c:	4b68      	ldr	r3, [pc, #416]	@ (80041b0 <HAL_RCC_ClockConfig+0x1b8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d90c      	bls.n	8004034 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401a:	4b65      	ldr	r3, [pc, #404]	@ (80041b0 <HAL_RCC_ClockConfig+0x1b8>)
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004022:	4b63      	ldr	r3, [pc, #396]	@ (80041b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d001      	beq.n	8004034 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0b8      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d020      	beq.n	8004082 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800404c:	4b59      	ldr	r3, [pc, #356]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	4a58      	ldr	r2, [pc, #352]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004056:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004064:	4b53      	ldr	r3, [pc, #332]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4a52      	ldr	r2, [pc, #328]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800406e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004070:	4b50      	ldr	r3, [pc, #320]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	494d      	ldr	r1, [pc, #308]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d044      	beq.n	8004118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d107      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004096:	4b47      	ldr	r3, [pc, #284]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d119      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e07f      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d003      	beq.n	80040b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d107      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b6:	4b3f      	ldr	r3, [pc, #252]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e06f      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c6:	4b3b      	ldr	r3, [pc, #236]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e067      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040d6:	4b37      	ldr	r3, [pc, #220]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f023 0203 	bic.w	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	4934      	ldr	r1, [pc, #208]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040e8:	f7fe fcdc 	bl	8002aa4 <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ee:	e00a      	b.n	8004106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f0:	f7fe fcd8 	bl	8002aa4 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e04f      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004106:	4b2b      	ldr	r3, [pc, #172]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 020c 	and.w	r2, r3, #12
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	429a      	cmp	r2, r3
 8004116:	d1eb      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004118:	4b25      	ldr	r3, [pc, #148]	@ (80041b0 <HAL_RCC_ClockConfig+0x1b8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d20c      	bcs.n	8004140 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004126:	4b22      	ldr	r3, [pc, #136]	@ (80041b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412e:	4b20      	ldr	r3, [pc, #128]	@ (80041b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d001      	beq.n	8004140 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e032      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800414c:	4b19      	ldr	r3, [pc, #100]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	4916      	ldr	r1, [pc, #88]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	4313      	orrs	r3, r2
 800415c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800416a:	4b12      	ldr	r3, [pc, #72]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	490e      	ldr	r1, [pc, #56]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800417e:	f000 f821 	bl	80041c4 <HAL_RCC_GetSysClockFreq>
 8004182:	4602      	mov	r2, r0
 8004184:	4b0b      	ldr	r3, [pc, #44]	@ (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	091b      	lsrs	r3, r3, #4
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	490a      	ldr	r1, [pc, #40]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004190:	5ccb      	ldrb	r3, [r1, r3]
 8004192:	fa22 f303 	lsr.w	r3, r2, r3
 8004196:	4a09      	ldr	r2, [pc, #36]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800419a:	4b09      	ldr	r3, [pc, #36]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fc3c 	bl	8002a1c <HAL_InitTick>

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40023c00 	.word	0x40023c00
 80041b4:	40023800 	.word	0x40023800
 80041b8:	08017634 	.word	0x08017634
 80041bc:	20000004 	.word	0x20000004
 80041c0:	20000008 	.word	0x20000008

080041c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c8:	b094      	sub	sp, #80	@ 0x50
 80041ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80041d0:	2300      	movs	r3, #0
 80041d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041d4:	2300      	movs	r3, #0
 80041d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041dc:	4b79      	ldr	r3, [pc, #484]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 030c 	and.w	r3, r3, #12
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d00d      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0x40>
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	f200 80e1 	bhi.w	80043b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <HAL_RCC_GetSysClockFreq+0x34>
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d003      	beq.n	80041fe <HAL_RCC_GetSysClockFreq+0x3a>
 80041f6:	e0db      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041f8:	4b73      	ldr	r3, [pc, #460]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80041fa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80041fc:	e0db      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041fe:	4b73      	ldr	r3, [pc, #460]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004200:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004202:	e0d8      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004204:	4b6f      	ldr	r3, [pc, #444]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800420c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800420e:	4b6d      	ldr	r3, [pc, #436]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d063      	beq.n	80042e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800421a:	4b6a      	ldr	r3, [pc, #424]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	099b      	lsrs	r3, r3, #6
 8004220:	2200      	movs	r2, #0
 8004222:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004224:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422c:	633b      	str	r3, [r7, #48]	@ 0x30
 800422e:	2300      	movs	r3, #0
 8004230:	637b      	str	r3, [r7, #52]	@ 0x34
 8004232:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004236:	4622      	mov	r2, r4
 8004238:	462b      	mov	r3, r5
 800423a:	f04f 0000 	mov.w	r0, #0
 800423e:	f04f 0100 	mov.w	r1, #0
 8004242:	0159      	lsls	r1, r3, #5
 8004244:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004248:	0150      	lsls	r0, r2, #5
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4621      	mov	r1, r4
 8004250:	1a51      	subs	r1, r2, r1
 8004252:	6139      	str	r1, [r7, #16]
 8004254:	4629      	mov	r1, r5
 8004256:	eb63 0301 	sbc.w	r3, r3, r1
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004268:	4659      	mov	r1, fp
 800426a:	018b      	lsls	r3, r1, #6
 800426c:	4651      	mov	r1, sl
 800426e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004272:	4651      	mov	r1, sl
 8004274:	018a      	lsls	r2, r1, #6
 8004276:	4651      	mov	r1, sl
 8004278:	ebb2 0801 	subs.w	r8, r2, r1
 800427c:	4659      	mov	r1, fp
 800427e:	eb63 0901 	sbc.w	r9, r3, r1
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800428e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004296:	4690      	mov	r8, r2
 8004298:	4699      	mov	r9, r3
 800429a:	4623      	mov	r3, r4
 800429c:	eb18 0303 	adds.w	r3, r8, r3
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	462b      	mov	r3, r5
 80042a4:	eb49 0303 	adc.w	r3, r9, r3
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042b6:	4629      	mov	r1, r5
 80042b8:	024b      	lsls	r3, r1, #9
 80042ba:	4621      	mov	r1, r4
 80042bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042c0:	4621      	mov	r1, r4
 80042c2:	024a      	lsls	r2, r1, #9
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ca:	2200      	movs	r2, #0
 80042cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042d4:	f7fc fcda 	bl	8000c8c <__aeabi_uldivmod>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4613      	mov	r3, r2
 80042de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e0:	e058      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e2:	4b38      	ldr	r3, [pc, #224]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	099b      	lsrs	r3, r3, #6
 80042e8:	2200      	movs	r2, #0
 80042ea:	4618      	mov	r0, r3
 80042ec:	4611      	mov	r1, r2
 80042ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042f2:	623b      	str	r3, [r7, #32]
 80042f4:	2300      	movs	r3, #0
 80042f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042fc:	4642      	mov	r2, r8
 80042fe:	464b      	mov	r3, r9
 8004300:	f04f 0000 	mov.w	r0, #0
 8004304:	f04f 0100 	mov.w	r1, #0
 8004308:	0159      	lsls	r1, r3, #5
 800430a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800430e:	0150      	lsls	r0, r2, #5
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4641      	mov	r1, r8
 8004316:	ebb2 0a01 	subs.w	sl, r2, r1
 800431a:	4649      	mov	r1, r9
 800431c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800432c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004330:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004334:	ebb2 040a 	subs.w	r4, r2, sl
 8004338:	eb63 050b 	sbc.w	r5, r3, fp
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	00eb      	lsls	r3, r5, #3
 8004346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800434a:	00e2      	lsls	r2, r4, #3
 800434c:	4614      	mov	r4, r2
 800434e:	461d      	mov	r5, r3
 8004350:	4643      	mov	r3, r8
 8004352:	18e3      	adds	r3, r4, r3
 8004354:	603b      	str	r3, [r7, #0]
 8004356:	464b      	mov	r3, r9
 8004358:	eb45 0303 	adc.w	r3, r5, r3
 800435c:	607b      	str	r3, [r7, #4]
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800436a:	4629      	mov	r1, r5
 800436c:	028b      	lsls	r3, r1, #10
 800436e:	4621      	mov	r1, r4
 8004370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004374:	4621      	mov	r1, r4
 8004376:	028a      	lsls	r2, r1, #10
 8004378:	4610      	mov	r0, r2
 800437a:	4619      	mov	r1, r3
 800437c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800437e:	2200      	movs	r2, #0
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	61fa      	str	r2, [r7, #28]
 8004384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004388:	f7fc fc80 	bl	8000c8c <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4613      	mov	r3, r2
 8004392:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004394:	4b0b      	ldr	r3, [pc, #44]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	3301      	adds	r3, #1
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80043a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043ae:	e002      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043b0:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80043b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3750      	adds	r7, #80	@ 0x50
 80043bc:	46bd      	mov	sp, r7
 80043be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043c2:	bf00      	nop
 80043c4:	40023800 	.word	0x40023800
 80043c8:	00f42400 	.word	0x00f42400
 80043cc:	007a1200 	.word	0x007a1200

080043d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d4:	4b03      	ldr	r3, [pc, #12]	@ (80043e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043d6:	681b      	ldr	r3, [r3, #0]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	20000004 	.word	0x20000004

080043e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043ec:	f7ff fff0 	bl	80043d0 <HAL_RCC_GetHCLKFreq>
 80043f0:	4602      	mov	r2, r0
 80043f2:	4b05      	ldr	r3, [pc, #20]	@ (8004408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	0a9b      	lsrs	r3, r3, #10
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	4903      	ldr	r1, [pc, #12]	@ (800440c <HAL_RCC_GetPCLK1Freq+0x24>)
 80043fe:	5ccb      	ldrb	r3, [r1, r3]
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004404:	4618      	mov	r0, r3
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40023800 	.word	0x40023800
 800440c:	08017644 	.word	0x08017644

08004410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004414:	f7ff ffdc 	bl	80043d0 <HAL_RCC_GetHCLKFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b05      	ldr	r3, [pc, #20]	@ (8004430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	0b5b      	lsrs	r3, r3, #13
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	4903      	ldr	r1, [pc, #12]	@ (8004434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800442c:	4618      	mov	r0, r3
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40023800 	.word	0x40023800
 8004434:	08017644 	.word	0x08017644

08004438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e041      	b.n	80044ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fd ff82 	bl	8002368 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f000 fac0 	bl	80049fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e041      	b.n	800456c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f839 	bl	8004574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2202      	movs	r2, #2
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3304      	adds	r3, #4
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f000 fa71 	bl	80049fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <HAL_TIM_PWM_Start+0x24>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	bf14      	ite	ne
 80045a4:	2301      	movne	r3, #1
 80045a6:	2300      	moveq	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e022      	b.n	80045f2 <HAL_TIM_PWM_Start+0x6a>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d109      	bne.n	80045c6 <HAL_TIM_PWM_Start+0x3e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	bf14      	ite	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	2300      	moveq	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	e015      	b.n	80045f2 <HAL_TIM_PWM_Start+0x6a>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d109      	bne.n	80045e0 <HAL_TIM_PWM_Start+0x58>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e008      	b.n	80045f2 <HAL_TIM_PWM_Start+0x6a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e068      	b.n	80046cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <HAL_TIM_PWM_Start+0x82>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004608:	e013      	b.n	8004632 <HAL_TIM_PWM_Start+0xaa>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b04      	cmp	r3, #4
 800460e:	d104      	bne.n	800461a <HAL_TIM_PWM_Start+0x92>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004618:	e00b      	b.n	8004632 <HAL_TIM_PWM_Start+0xaa>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b08      	cmp	r3, #8
 800461e:	d104      	bne.n	800462a <HAL_TIM_PWM_Start+0xa2>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004628:	e003      	b.n	8004632 <HAL_TIM_PWM_Start+0xaa>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2201      	movs	r2, #1
 8004638:	6839      	ldr	r1, [r7, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fc90 	bl	8004f60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a23      	ldr	r2, [pc, #140]	@ (80046d4 <HAL_TIM_PWM_Start+0x14c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d107      	bne.n	800465a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004658:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1d      	ldr	r2, [pc, #116]	@ (80046d4 <HAL_TIM_PWM_Start+0x14c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d018      	beq.n	8004696 <HAL_TIM_PWM_Start+0x10e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800466c:	d013      	beq.n	8004696 <HAL_TIM_PWM_Start+0x10e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a19      	ldr	r2, [pc, #100]	@ (80046d8 <HAL_TIM_PWM_Start+0x150>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00e      	beq.n	8004696 <HAL_TIM_PWM_Start+0x10e>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a17      	ldr	r2, [pc, #92]	@ (80046dc <HAL_TIM_PWM_Start+0x154>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d009      	beq.n	8004696 <HAL_TIM_PWM_Start+0x10e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a16      	ldr	r2, [pc, #88]	@ (80046e0 <HAL_TIM_PWM_Start+0x158>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d004      	beq.n	8004696 <HAL_TIM_PWM_Start+0x10e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a14      	ldr	r2, [pc, #80]	@ (80046e4 <HAL_TIM_PWM_Start+0x15c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d111      	bne.n	80046ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b06      	cmp	r3, #6
 80046a6:	d010      	beq.n	80046ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b8:	e007      	b.n	80046ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0201 	orr.w	r2, r2, #1
 80046c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40010000 	.word	0x40010000
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40000800 	.word	0x40000800
 80046e0:	40000c00 	.word	0x40000c00
 80046e4:	40014000 	.word	0x40014000

080046e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004702:	2302      	movs	r3, #2
 8004704:	e0ae      	b.n	8004864 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b0c      	cmp	r3, #12
 8004712:	f200 809f 	bhi.w	8004854 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004716:	a201      	add	r2, pc, #4	@ (adr r2, 800471c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471c:	08004751 	.word	0x08004751
 8004720:	08004855 	.word	0x08004855
 8004724:	08004855 	.word	0x08004855
 8004728:	08004855 	.word	0x08004855
 800472c:	08004791 	.word	0x08004791
 8004730:	08004855 	.word	0x08004855
 8004734:	08004855 	.word	0x08004855
 8004738:	08004855 	.word	0x08004855
 800473c:	080047d3 	.word	0x080047d3
 8004740:	08004855 	.word	0x08004855
 8004744:	08004855 	.word	0x08004855
 8004748:	08004855 	.word	0x08004855
 800474c:	08004813 	.word	0x08004813
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f9dc 	bl	8004b14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0208 	orr.w	r2, r2, #8
 800476a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0204 	bic.w	r2, r2, #4
 800477a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6999      	ldr	r1, [r3, #24]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	619a      	str	r2, [r3, #24]
      break;
 800478e:	e064      	b.n	800485a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fa22 	bl	8004be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6999      	ldr	r1, [r3, #24]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	021a      	lsls	r2, r3, #8
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	619a      	str	r2, [r3, #24]
      break;
 80047d0:	e043      	b.n	800485a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fa6d 	bl	8004cb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0208 	orr.w	r2, r2, #8
 80047ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0204 	bic.w	r2, r2, #4
 80047fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69d9      	ldr	r1, [r3, #28]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	61da      	str	r2, [r3, #28]
      break;
 8004810:	e023      	b.n	800485a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fab7 	bl	8004d8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800482c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800483c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69d9      	ldr	r1, [r3, #28]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	021a      	lsls	r2, r3, #8
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	61da      	str	r2, [r3, #28]
      break;
 8004852:	e002      	b.n	800485a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	75fb      	strb	r3, [r7, #23]
      break;
 8004858:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004862:	7dfb      	ldrb	r3, [r7, #23]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_TIM_ConfigClockSource+0x1c>
 8004884:	2302      	movs	r3, #2
 8004886:	e0b4      	b.n	80049f2 <HAL_TIM_ConfigClockSource+0x186>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048c0:	d03e      	beq.n	8004940 <HAL_TIM_ConfigClockSource+0xd4>
 80048c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048c6:	f200 8087 	bhi.w	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 80048ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ce:	f000 8086 	beq.w	80049de <HAL_TIM_ConfigClockSource+0x172>
 80048d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d6:	d87f      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 80048d8:	2b70      	cmp	r3, #112	@ 0x70
 80048da:	d01a      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0xa6>
 80048dc:	2b70      	cmp	r3, #112	@ 0x70
 80048de:	d87b      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 80048e0:	2b60      	cmp	r3, #96	@ 0x60
 80048e2:	d050      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0x11a>
 80048e4:	2b60      	cmp	r3, #96	@ 0x60
 80048e6:	d877      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 80048e8:	2b50      	cmp	r3, #80	@ 0x50
 80048ea:	d03c      	beq.n	8004966 <HAL_TIM_ConfigClockSource+0xfa>
 80048ec:	2b50      	cmp	r3, #80	@ 0x50
 80048ee:	d873      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 80048f0:	2b40      	cmp	r3, #64	@ 0x40
 80048f2:	d058      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0x13a>
 80048f4:	2b40      	cmp	r3, #64	@ 0x40
 80048f6:	d86f      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 80048f8:	2b30      	cmp	r3, #48	@ 0x30
 80048fa:	d064      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x15a>
 80048fc:	2b30      	cmp	r3, #48	@ 0x30
 80048fe:	d86b      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004900:	2b20      	cmp	r3, #32
 8004902:	d060      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004904:	2b20      	cmp	r3, #32
 8004906:	d867      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d05c      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x15a>
 800490c:	2b10      	cmp	r3, #16
 800490e:	d05a      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004910:	e062      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004922:	f000 fafd 	bl	8004f20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	609a      	str	r2, [r3, #8]
      break;
 800493e:	e04f      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004950:	f000 fae6 	bl	8004f20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004962:	609a      	str	r2, [r3, #8]
      break;
 8004964:	e03c      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004972:	461a      	mov	r2, r3
 8004974:	f000 fa5a 	bl	8004e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2150      	movs	r1, #80	@ 0x50
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fab3 	bl	8004eea <TIM_ITRx_SetConfig>
      break;
 8004984:	e02c      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004992:	461a      	mov	r2, r3
 8004994:	f000 fa79 	bl	8004e8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2160      	movs	r1, #96	@ 0x60
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 faa3 	bl	8004eea <TIM_ITRx_SetConfig>
      break;
 80049a4:	e01c      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b2:	461a      	mov	r2, r3
 80049b4:	f000 fa3a 	bl	8004e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2140      	movs	r1, #64	@ 0x40
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fa93 	bl	8004eea <TIM_ITRx_SetConfig>
      break;
 80049c4:	e00c      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4619      	mov	r1, r3
 80049d0:	4610      	mov	r0, r2
 80049d2:	f000 fa8a 	bl	8004eea <TIM_ITRx_SetConfig>
      break;
 80049d6:	e003      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
      break;
 80049dc:	e000      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a3a      	ldr	r2, [pc, #232]	@ (8004af8 <TIM_Base_SetConfig+0xfc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00f      	beq.n	8004a34 <TIM_Base_SetConfig+0x38>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a1a:	d00b      	beq.n	8004a34 <TIM_Base_SetConfig+0x38>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a37      	ldr	r2, [pc, #220]	@ (8004afc <TIM_Base_SetConfig+0x100>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d007      	beq.n	8004a34 <TIM_Base_SetConfig+0x38>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a36      	ldr	r2, [pc, #216]	@ (8004b00 <TIM_Base_SetConfig+0x104>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <TIM_Base_SetConfig+0x38>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a35      	ldr	r2, [pc, #212]	@ (8004b04 <TIM_Base_SetConfig+0x108>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d108      	bne.n	8004a46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a2b      	ldr	r2, [pc, #172]	@ (8004af8 <TIM_Base_SetConfig+0xfc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d01b      	beq.n	8004a86 <TIM_Base_SetConfig+0x8a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a54:	d017      	beq.n	8004a86 <TIM_Base_SetConfig+0x8a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a28      	ldr	r2, [pc, #160]	@ (8004afc <TIM_Base_SetConfig+0x100>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <TIM_Base_SetConfig+0x8a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a27      	ldr	r2, [pc, #156]	@ (8004b00 <TIM_Base_SetConfig+0x104>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00f      	beq.n	8004a86 <TIM_Base_SetConfig+0x8a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a26      	ldr	r2, [pc, #152]	@ (8004b04 <TIM_Base_SetConfig+0x108>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00b      	beq.n	8004a86 <TIM_Base_SetConfig+0x8a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a25      	ldr	r2, [pc, #148]	@ (8004b08 <TIM_Base_SetConfig+0x10c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d007      	beq.n	8004a86 <TIM_Base_SetConfig+0x8a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a24      	ldr	r2, [pc, #144]	@ (8004b0c <TIM_Base_SetConfig+0x110>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d003      	beq.n	8004a86 <TIM_Base_SetConfig+0x8a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a23      	ldr	r2, [pc, #140]	@ (8004b10 <TIM_Base_SetConfig+0x114>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d108      	bne.n	8004a98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a0e      	ldr	r2, [pc, #56]	@ (8004af8 <TIM_Base_SetConfig+0xfc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d103      	bne.n	8004acc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d105      	bne.n	8004aea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f023 0201 	bic.w	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	611a      	str	r2, [r3, #16]
  }
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40010000 	.word	0x40010000
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800
 8004b04:	40000c00 	.word	0x40000c00
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	40014400 	.word	0x40014400
 8004b10:	40014800 	.word	0x40014800

08004b14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f023 0201 	bic.w	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0303 	bic.w	r3, r3, #3
 8004b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f023 0302 	bic.w	r3, r3, #2
 8004b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bdc <TIM_OC1_SetConfig+0xc8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d10c      	bne.n	8004b8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f023 0308 	bic.w	r3, r3, #8
 8004b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f023 0304 	bic.w	r3, r3, #4
 8004b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a13      	ldr	r2, [pc, #76]	@ (8004bdc <TIM_OC1_SetConfig+0xc8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d111      	bne.n	8004bb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	621a      	str	r2, [r3, #32]
}
 8004bd0:	bf00      	nop
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	40010000 	.word	0x40010000

08004be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f023 0210 	bic.w	r2, r3, #16
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	021b      	lsls	r3, r3, #8
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f023 0320 	bic.w	r3, r3, #32
 8004c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004cb4 <TIM_OC2_SetConfig+0xd4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10d      	bne.n	8004c5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a15      	ldr	r2, [pc, #84]	@ (8004cb4 <TIM_OC2_SetConfig+0xd4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d113      	bne.n	8004c8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40010000 	.word	0x40010000

08004cb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0303 	bic.w	r3, r3, #3
 8004cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a1d      	ldr	r2, [pc, #116]	@ (8004d88 <TIM_OC3_SetConfig+0xd0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d10d      	bne.n	8004d32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a14      	ldr	r2, [pc, #80]	@ (8004d88 <TIM_OC3_SetConfig+0xd0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d113      	bne.n	8004d62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	621a      	str	r2, [r3, #32]
}
 8004d7c:	bf00      	nop
 8004d7e:	371c      	adds	r7, #28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	40010000 	.word	0x40010000

08004d8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	031b      	lsls	r3, r3, #12
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a10      	ldr	r2, [pc, #64]	@ (8004e28 <TIM_OC4_SetConfig+0x9c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d109      	bne.n	8004e00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004df2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	019b      	lsls	r3, r3, #6
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	621a      	str	r2, [r3, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40010000 	.word	0x40010000

08004e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0201 	bic.w	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f023 030a 	bic.w	r3, r3, #10
 8004e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	621a      	str	r2, [r3, #32]
}
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b087      	sub	sp, #28
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f023 0210 	bic.w	r2, r3, #16
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	031b      	lsls	r3, r3, #12
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	621a      	str	r2, [r3, #32]
}
 8004ede:	bf00      	nop
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b085      	sub	sp, #20
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f043 0307 	orr.w	r3, r3, #7
 8004f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	609a      	str	r2, [r3, #8]
}
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	021a      	lsls	r2, r3, #8
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	609a      	str	r2, [r3, #8]
}
 8004f54:	bf00      	nop
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f003 031f 	and.w	r3, r3, #31
 8004f72:	2201      	movs	r2, #1
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a1a      	ldr	r2, [r3, #32]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	43db      	mvns	r3, r3
 8004f82:	401a      	ands	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a1a      	ldr	r2, [r3, #32]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 031f 	and.w	r3, r3, #31
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	fa01 f303 	lsl.w	r3, r1, r3
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e050      	b.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1c      	ldr	r2, [pc, #112]	@ (8005074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d018      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005010:	d013      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a18      	ldr	r2, [pc, #96]	@ (8005078 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00e      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a16      	ldr	r2, [pc, #88]	@ (800507c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d009      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a15      	ldr	r2, [pc, #84]	@ (8005080 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d004      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a13      	ldr	r2, [pc, #76]	@ (8005084 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d10c      	bne.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005040:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	4313      	orrs	r3, r2
 800504a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40010000 	.word	0x40010000
 8005078:	40000400 	.word	0x40000400
 800507c:	40000800 	.word	0x40000800
 8005080:	40000c00 	.word	0x40000c00
 8005084:	40014000 	.word	0x40014000

08005088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e042      	b.n	8005120 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fd f9d6 	bl	8002460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2224      	movs	r2, #36	@ 0x24
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 ffc9 	bl	8006064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695a      	ldr	r2, [r3, #20]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08c      	sub	sp, #48	@ 0x30
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	4613      	mov	r3, r2
 8005134:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b20      	cmp	r3, #32
 8005140:	d156      	bne.n	80051f0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_UART_Transmit_DMA+0x26>
 8005148:	88fb      	ldrh	r3, [r7, #6]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e04f      	b.n	80051f2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	88fa      	ldrh	r2, [r7, #6]
 800515c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2221      	movs	r2, #33	@ 0x21
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005176:	4a21      	ldr	r2, [pc, #132]	@ (80051fc <HAL_UART_Transmit_DMA+0xd4>)
 8005178:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517e:	4a20      	ldr	r2, [pc, #128]	@ (8005200 <HAL_UART_Transmit_DMA+0xd8>)
 8005180:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005186:	4a1f      	ldr	r2, [pc, #124]	@ (8005204 <HAL_UART_Transmit_DMA+0xdc>)
 8005188:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518e:	2200      	movs	r2, #0
 8005190:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005192:	f107 0308 	add.w	r3, r7, #8
 8005196:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800519c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519e:	6819      	ldr	r1, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3304      	adds	r3, #4
 80051a6:	461a      	mov	r2, r3
 80051a8:	88fb      	ldrh	r3, [r7, #6]
 80051aa:	f7fd fe47 	bl	8002e3c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3314      	adds	r3, #20
 80051be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	617b      	str	r3, [r7, #20]
   return(result);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3314      	adds	r3, #20
 80051d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80051da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6a39      	ldr	r1, [r7, #32]
 80051de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e5      	bne.n	80051b8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	e000      	b.n	80051f2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80051f0:	2302      	movs	r3, #2
  }
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3730      	adds	r7, #48	@ 0x30
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	080058f1 	.word	0x080058f1
 8005200:	0800598b 	.word	0x0800598b
 8005204:	08005b0f 	.word	0x08005b0f

08005208 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b20      	cmp	r3, #32
 8005220:	d112      	bne.n	8005248 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <HAL_UART_Receive_DMA+0x26>
 8005228:	88fb      	ldrh	r3, [r7, #6]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e00b      	b.n	800524a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	461a      	mov	r2, r3
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fcb0 	bl	8005ba4 <UART_Start_Receive_DMA>
 8005244:	4603      	mov	r3, r0
 8005246:	e000      	b.n	800524a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b090      	sub	sp, #64	@ 0x40
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800525a:	2300      	movs	r3, #0
 800525c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005268:	2b80      	cmp	r3, #128	@ 0x80
 800526a:	bf0c      	ite	eq
 800526c:	2301      	moveq	r3, #1
 800526e:	2300      	movne	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b21      	cmp	r3, #33	@ 0x21
 800527e:	d128      	bne.n	80052d2 <HAL_UART_DMAStop+0x80>
 8005280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d025      	beq.n	80052d2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3314      	adds	r3, #20
 800528c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	623b      	str	r3, [r7, #32]
   return(result);
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800529c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3314      	adds	r3, #20
 80052a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80052a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e5      	bne.n	8005286 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d004      	beq.n	80052cc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fd fe10 	bl	8002eec <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fd03 	bl	8005cd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052dc:	2b40      	cmp	r3, #64	@ 0x40
 80052de:	bf0c      	ite	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	2300      	movne	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b22      	cmp	r3, #34	@ 0x22
 80052f2:	d128      	bne.n	8005346 <HAL_UART_DMAStop+0xf4>
 80052f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d025      	beq.n	8005346 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3314      	adds	r3, #20
 8005300:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	60fb      	str	r3, [r7, #12]
   return(result);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005310:	637b      	str	r3, [r7, #52]	@ 0x34
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3314      	adds	r3, #20
 8005318:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800531a:	61fa      	str	r2, [r7, #28]
 800531c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	69b9      	ldr	r1, [r7, #24]
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	617b      	str	r3, [r7, #20]
   return(result);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e5      	bne.n	80052fa <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d004      	beq.n	8005340 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533a:	4618      	mov	r0, r3
 800533c:	f7fd fdd6 	bl	8002eec <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fcf1 	bl	8005d28 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3740      	adds	r7, #64	@ 0x40
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b0ba      	sub	sp, #232	@ 0xe8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005376:	2300      	movs	r3, #0
 8005378:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800537c:	2300      	movs	r3, #0
 800537e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800538e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10f      	bne.n	80053b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d009      	beq.n	80053b6 <HAL_UART_IRQHandler+0x66>
 80053a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fd99 	bl	8005ee6 <UART_Receive_IT>
      return;
 80053b4:	e25b      	b.n	800586e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 80de 	beq.w	800557c <HAL_UART_IRQHandler+0x22c>
 80053c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d106      	bne.n	80053da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80d1 	beq.w	800557c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <HAL_UART_IRQHandler+0xae>
 80053e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f6:	f043 0201 	orr.w	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <HAL_UART_IRQHandler+0xd2>
 800540a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541a:	f043 0202 	orr.w	r2, r3, #2
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <HAL_UART_IRQHandler+0xf6>
 800542e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543e:	f043 0204 	orr.w	r2, r3, #4
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d011      	beq.n	8005476 <HAL_UART_IRQHandler+0x126>
 8005452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d105      	bne.n	800546a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800545e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546e:	f043 0208 	orr.w	r2, r3, #8
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 81f2 	beq.w	8005864 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_UART_IRQHandler+0x14e>
 800548c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005490:	f003 0320 	and.w	r3, r3, #32
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fd24 	bl	8005ee6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a8:	2b40      	cmp	r3, #64	@ 0x40
 80054aa:	bf0c      	ite	eq
 80054ac:	2301      	moveq	r3, #1
 80054ae:	2300      	movne	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d103      	bne.n	80054ca <HAL_UART_IRQHandler+0x17a>
 80054c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d04f      	beq.n	800556a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fc2c 	bl	8005d28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054da:	2b40      	cmp	r3, #64	@ 0x40
 80054dc:	d141      	bne.n	8005562 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3314      	adds	r3, #20
 80054e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3314      	adds	r3, #20
 8005506:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800550a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800550e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005516:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1d9      	bne.n	80054de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d013      	beq.n	800555a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005536:	4a7e      	ldr	r2, [pc, #504]	@ (8005730 <HAL_UART_IRQHandler+0x3e0>)
 8005538:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553e:	4618      	mov	r0, r3
 8005540:	f7fd fd44 	bl	8002fcc <HAL_DMA_Abort_IT>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d016      	beq.n	8005578 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005554:	4610      	mov	r0, r2
 8005556:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005558:	e00e      	b.n	8005578 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9b2 	bl	80058c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005560:	e00a      	b.n	8005578 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f9ae 	bl	80058c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005568:	e006      	b.n	8005578 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f9aa 	bl	80058c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005576:	e175      	b.n	8005864 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005578:	bf00      	nop
    return;
 800557a:	e173      	b.n	8005864 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005580:	2b01      	cmp	r3, #1
 8005582:	f040 814f 	bne.w	8005824 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 8148 	beq.w	8005824 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005598:	f003 0310 	and.w	r3, r3, #16
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8141 	beq.w	8005824 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055a2:	2300      	movs	r3, #0
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60bb      	str	r3, [r7, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c2:	2b40      	cmp	r3, #64	@ 0x40
 80055c4:	f040 80b6 	bne.w	8005734 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 8145 	beq.w	8005868 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055e6:	429a      	cmp	r2, r3
 80055e8:	f080 813e 	bcs.w	8005868 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055fe:	f000 8088 	beq.w	8005712 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	330c      	adds	r3, #12
 8005608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005618:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800561c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	330c      	adds	r3, #12
 800562a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800562e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005632:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800563a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1d9      	bne.n	8005602 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3314      	adds	r3, #20
 8005654:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800565e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3314      	adds	r3, #20
 800566e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005672:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005676:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800567a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005684:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e1      	bne.n	800564e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3314      	adds	r3, #20
 8005690:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800569a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800569c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3314      	adds	r3, #20
 80056aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e3      	bne.n	800568a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	330c      	adds	r3, #12
 80056d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056e2:	f023 0310 	bic.w	r3, r3, #16
 80056e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	330c      	adds	r3, #12
 80056f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80056f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80056f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e3      	bne.n	80056d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570c:	4618      	mov	r0, r3
 800570e:	f7fd fbed 	bl	8002eec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2202      	movs	r2, #2
 8005716:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005720:	b29b      	uxth	r3, r3
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	b29b      	uxth	r3, r3
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f8d5 	bl	80058d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800572e:	e09b      	b.n	8005868 <HAL_UART_IRQHandler+0x518>
 8005730:	08005def 	.word	0x08005def
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800573c:	b29b      	uxth	r3, r3
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 808e 	beq.w	800586c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8089 	beq.w	800586c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	330c      	adds	r3, #12
 8005760:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800576a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005770:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	330c      	adds	r3, #12
 800577a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800577e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005780:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005784:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800578c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e3      	bne.n	800575a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3314      	adds	r3, #20
 8005798:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	623b      	str	r3, [r7, #32]
   return(result);
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3314      	adds	r3, #20
 80057b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80057b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e3      	bne.n	8005792 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	330c      	adds	r3, #12
 80057de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0310 	bic.w	r3, r3, #16
 80057ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	330c      	adds	r3, #12
 80057f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80057fc:	61fa      	str	r2, [r7, #28]
 80057fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	69b9      	ldr	r1, [r7, #24]
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	617b      	str	r3, [r7, #20]
   return(result);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e3      	bne.n	80057d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005816:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f85b 	bl	80058d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005822:	e023      	b.n	800586c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <HAL_UART_IRQHandler+0x4f4>
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 faea 	bl	8005e16 <UART_Transmit_IT>
    return;
 8005842:	e014      	b.n	800586e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00e      	beq.n	800586e <HAL_UART_IRQHandler+0x51e>
 8005850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fb2a 	bl	8005eb6 <UART_EndTransmit_IT>
    return;
 8005862:	e004      	b.n	800586e <HAL_UART_IRQHandler+0x51e>
    return;
 8005864:	bf00      	nop
 8005866:	e002      	b.n	800586e <HAL_UART_IRQHandler+0x51e>
      return;
 8005868:	bf00      	nop
 800586a:	e000      	b.n	800586e <HAL_UART_IRQHandler+0x51e>
      return;
 800586c:	bf00      	nop
  }
}
 800586e:	37e8      	adds	r7, #232	@ 0xe8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b090      	sub	sp, #64	@ 0x40
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005908:	2b00      	cmp	r3, #0
 800590a:	d137      	bne.n	800597c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800590c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800590e:	2200      	movs	r2, #0
 8005910:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3314      	adds	r3, #20
 8005918:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	623b      	str	r3, [r7, #32]
   return(result);
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005928:	63bb      	str	r3, [r7, #56]	@ 0x38
 800592a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3314      	adds	r3, #20
 8005930:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005932:	633a      	str	r2, [r7, #48]	@ 0x30
 8005934:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e5      	bne.n	8005912 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330c      	adds	r3, #12
 800594c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	60fb      	str	r3, [r7, #12]
   return(result);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800595c:	637b      	str	r3, [r7, #52]	@ 0x34
 800595e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005966:	61fa      	str	r2, [r7, #28]
 8005968:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	69b9      	ldr	r1, [r7, #24]
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	617b      	str	r3, [r7, #20]
   return(result);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e5      	bne.n	8005946 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800597a:	e002      	b.n	8005982 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800597c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800597e:	f7ff ff79 	bl	8005874 <HAL_UART_TxCpltCallback>
}
 8005982:	bf00      	nop
 8005984:	3740      	adds	r7, #64	@ 0x40
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005996:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f7ff ff75 	bl	8005888 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b09c      	sub	sp, #112	@ 0x70
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d172      	bne.n	8005aa8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80059c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059c4:	2200      	movs	r2, #0
 80059c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	330c      	adds	r3, #12
 80059ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80059e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80059ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e5      	bne.n	80059c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3314      	adds	r3, #20
 8005a02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
 8005a12:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3314      	adds	r3, #20
 8005a1a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005a1c:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a1e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e5      	bne.n	80059fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3314      	adds	r3, #20
 8005a36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a46:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3314      	adds	r3, #20
 8005a4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005a50:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e5      	bne.n	8005a30 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d119      	bne.n	8005aa8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	330c      	adds	r3, #12
 8005a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0310 	bic.w	r3, r3, #16
 8005a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	330c      	adds	r3, #12
 8005a92:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005a94:	61fa      	str	r2, [r7, #28]
 8005a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	69b9      	ldr	r1, [r7, #24]
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e5      	bne.n	8005a74 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aaa:	2200      	movs	r2, #0
 8005aac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d106      	bne.n	8005ac4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ab8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005aba:	4619      	mov	r1, r3
 8005abc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005abe:	f7ff ff0b 	bl	80058d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ac2:	e002      	b.n	8005aca <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005ac4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005ac6:	f7ff fee9 	bl	800589c <HAL_UART_RxCpltCallback>
}
 8005aca:	bf00      	nop
 8005acc:	3770      	adds	r7, #112	@ 0x70
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d108      	bne.n	8005b00 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005af2:	085b      	lsrs	r3, r3, #1
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	4619      	mov	r1, r3
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f7ff feed 	bl	80058d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005afe:	e002      	b.n	8005b06 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f7ff fed5 	bl	80058b0 <HAL_UART_RxHalfCpltCallback>
}
 8005b06:	bf00      	nop
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b2a:	2b80      	cmp	r3, #128	@ 0x80
 8005b2c:	bf0c      	ite	eq
 8005b2e:	2301      	moveq	r3, #1
 8005b30:	2300      	movne	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b21      	cmp	r3, #33	@ 0x21
 8005b40:	d108      	bne.n	8005b54 <UART_DMAError+0x46>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d005      	beq.n	8005b54 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005b4e:	68b8      	ldr	r0, [r7, #8]
 8005b50:	f000 f8c2 	bl	8005cd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5e:	2b40      	cmp	r3, #64	@ 0x40
 8005b60:	bf0c      	ite	eq
 8005b62:	2301      	moveq	r3, #1
 8005b64:	2300      	movne	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b22      	cmp	r3, #34	@ 0x22
 8005b74:	d108      	bne.n	8005b88 <UART_DMAError+0x7a>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005b82:	68b8      	ldr	r0, [r7, #8]
 8005b84:	f000 f8d0 	bl	8005d28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8c:	f043 0210 	orr.w	r2, r3, #16
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b94:	68b8      	ldr	r0, [r7, #8]
 8005b96:	f7ff fe95 	bl	80058c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b098      	sub	sp, #96	@ 0x60
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2222      	movs	r2, #34	@ 0x22
 8005bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd0:	4a3e      	ldr	r2, [pc, #248]	@ (8005ccc <UART_Start_Receive_DMA+0x128>)
 8005bd2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd8:	4a3d      	ldr	r2, [pc, #244]	@ (8005cd0 <UART_Start_Receive_DMA+0x12c>)
 8005bda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be0:	4a3c      	ldr	r2, [pc, #240]	@ (8005cd4 <UART_Start_Receive_DMA+0x130>)
 8005be2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be8:	2200      	movs	r2, #0
 8005bea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005bec:	f107 0308 	add.w	r3, r7, #8
 8005bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	88fb      	ldrh	r3, [r7, #6]
 8005c04:	f7fd f91a 	bl	8002e3c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005c08:	2300      	movs	r3, #0
 8005c0a:	613b      	str	r3, [r7, #16]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	613b      	str	r3, [r7, #16]
 8005c1c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d019      	beq.n	8005c5a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	330c      	adds	r3, #12
 8005c44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c46:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005c48:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005c4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e5      	bne.n	8005c26 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3314      	adds	r3, #20
 8005c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6c:	f043 0301 	orr.w	r3, r3, #1
 8005c70:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3314      	adds	r3, #20
 8005c78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c7a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005c7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005c80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e5      	bne.n	8005c5a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3314      	adds	r3, #20
 8005c94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ca4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3314      	adds	r3, #20
 8005cac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005cae:	627a      	str	r2, [r7, #36]	@ 0x24
 8005cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	6a39      	ldr	r1, [r7, #32]
 8005cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e5      	bne.n	8005c8e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3760      	adds	r7, #96	@ 0x60
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	080059a7 	.word	0x080059a7
 8005cd0:	08005ad3 	.word	0x08005ad3
 8005cd4:	08005b0f 	.word	0x08005b0f

08005cd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b089      	sub	sp, #36	@ 0x24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	61ba      	str	r2, [r7, #24]
 8005d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	6979      	ldr	r1, [r7, #20]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e5      	bne.n	8005ce0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005d1c:	bf00      	nop
 8005d1e:	3724      	adds	r7, #36	@ 0x24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b095      	sub	sp, #84	@ 0x54
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d50:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e5      	bne.n	8005d30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3314      	adds	r3, #20
 8005d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f023 0301 	bic.w	r3, r3, #1
 8005d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3314      	adds	r3, #20
 8005d82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e5      	bne.n	8005d64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d119      	bne.n	8005dd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	330c      	adds	r3, #12
 8005da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	e853 3f00 	ldrex	r3, [r3]
 8005dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f023 0310 	bic.w	r3, r3, #16
 8005db6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dc0:	61ba      	str	r2, [r7, #24]
 8005dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	6979      	ldr	r1, [r7, #20]
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e5      	bne.n	8005da0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005de2:	bf00      	nop
 8005de4:	3754      	adds	r7, #84	@ 0x54
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f7ff fd5b 	bl	80058c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e0e:	bf00      	nop
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b21      	cmp	r3, #33	@ 0x21
 8005e28:	d13e      	bne.n	8005ea8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e32:	d114      	bne.n	8005e5e <UART_Transmit_IT+0x48>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d110      	bne.n	8005e5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	1c9a      	adds	r2, r3, #2
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	621a      	str	r2, [r3, #32]
 8005e5c:	e008      	b.n	8005e70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	1c59      	adds	r1, r3, #1
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6211      	str	r1, [r2, #32]
 8005e68:	781a      	ldrb	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10f      	bne.n	8005ea4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ea2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	e000      	b.n	8005eaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ea8:	2302      	movs	r3, #2
  }
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ecc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff fccc 	bl	8005874 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b08c      	sub	sp, #48	@ 0x30
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b22      	cmp	r3, #34	@ 0x22
 8005ef8:	f040 80ae 	bne.w	8006058 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f04:	d117      	bne.n	8005f36 <UART_Receive_IT+0x50>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d113      	bne.n	8005f36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f16:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2e:	1c9a      	adds	r2, r3, #2
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f34:	e026      	b.n	8005f84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f48:	d007      	beq.n	8005f5a <UART_Receive_IT+0x74>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <UART_Receive_IT+0x82>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f64:	701a      	strb	r2, [r3, #0]
 8005f66:	e008      	b.n	8005f7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	4619      	mov	r1, r3
 8005f92:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d15d      	bne.n	8006054 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0220 	bic.w	r2, r2, #32
 8005fa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695a      	ldr	r2, [r3, #20]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0201 	bic.w	r2, r2, #1
 8005fc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d135      	bne.n	800604a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	330c      	adds	r3, #12
 8005fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f023 0310 	bic.w	r3, r3, #16
 8005ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	330c      	adds	r3, #12
 8006002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006004:	623a      	str	r2, [r7, #32]
 8006006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006008:	69f9      	ldr	r1, [r7, #28]
 800600a:	6a3a      	ldr	r2, [r7, #32]
 800600c:	e841 2300 	strex	r3, r2, [r1]
 8006010:	61bb      	str	r3, [r7, #24]
   return(result);
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e5      	bne.n	8005fe4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0310 	and.w	r3, r3, #16
 8006022:	2b10      	cmp	r3, #16
 8006024:	d10a      	bne.n	800603c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff fc48 	bl	80058d8 <HAL_UARTEx_RxEventCallback>
 8006048:	e002      	b.n	8006050 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff fc26 	bl	800589c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	e002      	b.n	800605a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	e000      	b.n	800605a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006058:	2302      	movs	r3, #2
  }
}
 800605a:	4618      	mov	r0, r3
 800605c:	3730      	adds	r7, #48	@ 0x30
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006068:	b0c0      	sub	sp, #256	@ 0x100
 800606a:	af00      	add	r7, sp, #0
 800606c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006080:	68d9      	ldr	r1, [r3, #12]
 8006082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	ea40 0301 	orr.w	r3, r0, r1
 800608c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	431a      	orrs	r2, r3
 800609c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060bc:	f021 010c 	bic.w	r1, r1, #12
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060ca:	430b      	orrs	r3, r1
 80060cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060de:	6999      	ldr	r1, [r3, #24]
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	ea40 0301 	orr.w	r3, r0, r1
 80060ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b8f      	ldr	r3, [pc, #572]	@ (8006330 <UART_SetConfig+0x2cc>)
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d005      	beq.n	8006104 <UART_SetConfig+0xa0>
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006334 <UART_SetConfig+0x2d0>)
 8006100:	429a      	cmp	r2, r3
 8006102:	d104      	bne.n	800610e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006104:	f7fe f984 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 8006108:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800610c:	e003      	b.n	8006116 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800610e:	f7fe f96b 	bl	80043e8 <HAL_RCC_GetPCLK1Freq>
 8006112:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006120:	f040 810c 	bne.w	800633c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006128:	2200      	movs	r2, #0
 800612a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800612e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006132:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006136:	4622      	mov	r2, r4
 8006138:	462b      	mov	r3, r5
 800613a:	1891      	adds	r1, r2, r2
 800613c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800613e:	415b      	adcs	r3, r3
 8006140:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006142:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006146:	4621      	mov	r1, r4
 8006148:	eb12 0801 	adds.w	r8, r2, r1
 800614c:	4629      	mov	r1, r5
 800614e:	eb43 0901 	adc.w	r9, r3, r1
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	f04f 0300 	mov.w	r3, #0
 800615a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800615e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006162:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006166:	4690      	mov	r8, r2
 8006168:	4699      	mov	r9, r3
 800616a:	4623      	mov	r3, r4
 800616c:	eb18 0303 	adds.w	r3, r8, r3
 8006170:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006174:	462b      	mov	r3, r5
 8006176:	eb49 0303 	adc.w	r3, r9, r3
 800617a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800617e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800618a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800618e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006192:	460b      	mov	r3, r1
 8006194:	18db      	adds	r3, r3, r3
 8006196:	653b      	str	r3, [r7, #80]	@ 0x50
 8006198:	4613      	mov	r3, r2
 800619a:	eb42 0303 	adc.w	r3, r2, r3
 800619e:	657b      	str	r3, [r7, #84]	@ 0x54
 80061a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061a8:	f7fa fd70 	bl	8000c8c <__aeabi_uldivmod>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4b61      	ldr	r3, [pc, #388]	@ (8006338 <UART_SetConfig+0x2d4>)
 80061b2:	fba3 2302 	umull	r2, r3, r3, r2
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	011c      	lsls	r4, r3, #4
 80061ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061be:	2200      	movs	r2, #0
 80061c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061cc:	4642      	mov	r2, r8
 80061ce:	464b      	mov	r3, r9
 80061d0:	1891      	adds	r1, r2, r2
 80061d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061d4:	415b      	adcs	r3, r3
 80061d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061dc:	4641      	mov	r1, r8
 80061de:	eb12 0a01 	adds.w	sl, r2, r1
 80061e2:	4649      	mov	r1, r9
 80061e4:	eb43 0b01 	adc.w	fp, r3, r1
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	f04f 0300 	mov.w	r3, #0
 80061f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061fc:	4692      	mov	sl, r2
 80061fe:	469b      	mov	fp, r3
 8006200:	4643      	mov	r3, r8
 8006202:	eb1a 0303 	adds.w	r3, sl, r3
 8006206:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800620a:	464b      	mov	r3, r9
 800620c:	eb4b 0303 	adc.w	r3, fp, r3
 8006210:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006220:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006224:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006228:	460b      	mov	r3, r1
 800622a:	18db      	adds	r3, r3, r3
 800622c:	643b      	str	r3, [r7, #64]	@ 0x40
 800622e:	4613      	mov	r3, r2
 8006230:	eb42 0303 	adc.w	r3, r2, r3
 8006234:	647b      	str	r3, [r7, #68]	@ 0x44
 8006236:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800623a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800623e:	f7fa fd25 	bl	8000c8c <__aeabi_uldivmod>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4611      	mov	r1, r2
 8006248:	4b3b      	ldr	r3, [pc, #236]	@ (8006338 <UART_SetConfig+0x2d4>)
 800624a:	fba3 2301 	umull	r2, r3, r3, r1
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	2264      	movs	r2, #100	@ 0x64
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	1acb      	subs	r3, r1, r3
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800625e:	4b36      	ldr	r3, [pc, #216]	@ (8006338 <UART_SetConfig+0x2d4>)
 8006260:	fba3 2302 	umull	r2, r3, r3, r2
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800626c:	441c      	add	r4, r3
 800626e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006272:	2200      	movs	r2, #0
 8006274:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006278:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800627c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006280:	4642      	mov	r2, r8
 8006282:	464b      	mov	r3, r9
 8006284:	1891      	adds	r1, r2, r2
 8006286:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006288:	415b      	adcs	r3, r3
 800628a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800628c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006290:	4641      	mov	r1, r8
 8006292:	1851      	adds	r1, r2, r1
 8006294:	6339      	str	r1, [r7, #48]	@ 0x30
 8006296:	4649      	mov	r1, r9
 8006298:	414b      	adcs	r3, r1
 800629a:	637b      	str	r3, [r7, #52]	@ 0x34
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062a8:	4659      	mov	r1, fp
 80062aa:	00cb      	lsls	r3, r1, #3
 80062ac:	4651      	mov	r1, sl
 80062ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062b2:	4651      	mov	r1, sl
 80062b4:	00ca      	lsls	r2, r1, #3
 80062b6:	4610      	mov	r0, r2
 80062b8:	4619      	mov	r1, r3
 80062ba:	4603      	mov	r3, r0
 80062bc:	4642      	mov	r2, r8
 80062be:	189b      	adds	r3, r3, r2
 80062c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062c4:	464b      	mov	r3, r9
 80062c6:	460a      	mov	r2, r1
 80062c8:	eb42 0303 	adc.w	r3, r2, r3
 80062cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062e4:	460b      	mov	r3, r1
 80062e6:	18db      	adds	r3, r3, r3
 80062e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ea:	4613      	mov	r3, r2
 80062ec:	eb42 0303 	adc.w	r3, r2, r3
 80062f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80062fa:	f7fa fcc7 	bl	8000c8c <__aeabi_uldivmod>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4b0d      	ldr	r3, [pc, #52]	@ (8006338 <UART_SetConfig+0x2d4>)
 8006304:	fba3 1302 	umull	r1, r3, r3, r2
 8006308:	095b      	lsrs	r3, r3, #5
 800630a:	2164      	movs	r1, #100	@ 0x64
 800630c:	fb01 f303 	mul.w	r3, r1, r3
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	3332      	adds	r3, #50	@ 0x32
 8006316:	4a08      	ldr	r2, [pc, #32]	@ (8006338 <UART_SetConfig+0x2d4>)
 8006318:	fba2 2303 	umull	r2, r3, r2, r3
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	f003 0207 	and.w	r2, r3, #7
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4422      	add	r2, r4
 800632a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800632c:	e106      	b.n	800653c <UART_SetConfig+0x4d8>
 800632e:	bf00      	nop
 8006330:	40011000 	.word	0x40011000
 8006334:	40011400 	.word	0x40011400
 8006338:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800633c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006340:	2200      	movs	r2, #0
 8006342:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006346:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800634a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800634e:	4642      	mov	r2, r8
 8006350:	464b      	mov	r3, r9
 8006352:	1891      	adds	r1, r2, r2
 8006354:	6239      	str	r1, [r7, #32]
 8006356:	415b      	adcs	r3, r3
 8006358:	627b      	str	r3, [r7, #36]	@ 0x24
 800635a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800635e:	4641      	mov	r1, r8
 8006360:	1854      	adds	r4, r2, r1
 8006362:	4649      	mov	r1, r9
 8006364:	eb43 0501 	adc.w	r5, r3, r1
 8006368:	f04f 0200 	mov.w	r2, #0
 800636c:	f04f 0300 	mov.w	r3, #0
 8006370:	00eb      	lsls	r3, r5, #3
 8006372:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006376:	00e2      	lsls	r2, r4, #3
 8006378:	4614      	mov	r4, r2
 800637a:	461d      	mov	r5, r3
 800637c:	4643      	mov	r3, r8
 800637e:	18e3      	adds	r3, r4, r3
 8006380:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006384:	464b      	mov	r3, r9
 8006386:	eb45 0303 	adc.w	r3, r5, r3
 800638a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800639a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800639e:	f04f 0200 	mov.w	r2, #0
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063aa:	4629      	mov	r1, r5
 80063ac:	008b      	lsls	r3, r1, #2
 80063ae:	4621      	mov	r1, r4
 80063b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063b4:	4621      	mov	r1, r4
 80063b6:	008a      	lsls	r2, r1, #2
 80063b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063bc:	f7fa fc66 	bl	8000c8c <__aeabi_uldivmod>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4b60      	ldr	r3, [pc, #384]	@ (8006548 <UART_SetConfig+0x4e4>)
 80063c6:	fba3 2302 	umull	r2, r3, r3, r2
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	011c      	lsls	r4, r3, #4
 80063ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063e0:	4642      	mov	r2, r8
 80063e2:	464b      	mov	r3, r9
 80063e4:	1891      	adds	r1, r2, r2
 80063e6:	61b9      	str	r1, [r7, #24]
 80063e8:	415b      	adcs	r3, r3
 80063ea:	61fb      	str	r3, [r7, #28]
 80063ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063f0:	4641      	mov	r1, r8
 80063f2:	1851      	adds	r1, r2, r1
 80063f4:	6139      	str	r1, [r7, #16]
 80063f6:	4649      	mov	r1, r9
 80063f8:	414b      	adcs	r3, r1
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006408:	4659      	mov	r1, fp
 800640a:	00cb      	lsls	r3, r1, #3
 800640c:	4651      	mov	r1, sl
 800640e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006412:	4651      	mov	r1, sl
 8006414:	00ca      	lsls	r2, r1, #3
 8006416:	4610      	mov	r0, r2
 8006418:	4619      	mov	r1, r3
 800641a:	4603      	mov	r3, r0
 800641c:	4642      	mov	r2, r8
 800641e:	189b      	adds	r3, r3, r2
 8006420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006424:	464b      	mov	r3, r9
 8006426:	460a      	mov	r2, r1
 8006428:	eb42 0303 	adc.w	r3, r2, r3
 800642c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	67bb      	str	r3, [r7, #120]	@ 0x78
 800643a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006448:	4649      	mov	r1, r9
 800644a:	008b      	lsls	r3, r1, #2
 800644c:	4641      	mov	r1, r8
 800644e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006452:	4641      	mov	r1, r8
 8006454:	008a      	lsls	r2, r1, #2
 8006456:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800645a:	f7fa fc17 	bl	8000c8c <__aeabi_uldivmod>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4611      	mov	r1, r2
 8006464:	4b38      	ldr	r3, [pc, #224]	@ (8006548 <UART_SetConfig+0x4e4>)
 8006466:	fba3 2301 	umull	r2, r3, r3, r1
 800646a:	095b      	lsrs	r3, r3, #5
 800646c:	2264      	movs	r2, #100	@ 0x64
 800646e:	fb02 f303 	mul.w	r3, r2, r3
 8006472:	1acb      	subs	r3, r1, r3
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	3332      	adds	r3, #50	@ 0x32
 8006478:	4a33      	ldr	r2, [pc, #204]	@ (8006548 <UART_SetConfig+0x4e4>)
 800647a:	fba2 2303 	umull	r2, r3, r2, r3
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006484:	441c      	add	r4, r3
 8006486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800648a:	2200      	movs	r2, #0
 800648c:	673b      	str	r3, [r7, #112]	@ 0x70
 800648e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006490:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006494:	4642      	mov	r2, r8
 8006496:	464b      	mov	r3, r9
 8006498:	1891      	adds	r1, r2, r2
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	415b      	adcs	r3, r3
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064a4:	4641      	mov	r1, r8
 80064a6:	1851      	adds	r1, r2, r1
 80064a8:	6039      	str	r1, [r7, #0]
 80064aa:	4649      	mov	r1, r9
 80064ac:	414b      	adcs	r3, r1
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	f04f 0300 	mov.w	r3, #0
 80064b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064bc:	4659      	mov	r1, fp
 80064be:	00cb      	lsls	r3, r1, #3
 80064c0:	4651      	mov	r1, sl
 80064c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064c6:	4651      	mov	r1, sl
 80064c8:	00ca      	lsls	r2, r1, #3
 80064ca:	4610      	mov	r0, r2
 80064cc:	4619      	mov	r1, r3
 80064ce:	4603      	mov	r3, r0
 80064d0:	4642      	mov	r2, r8
 80064d2:	189b      	adds	r3, r3, r2
 80064d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064d6:	464b      	mov	r3, r9
 80064d8:	460a      	mov	r2, r1
 80064da:	eb42 0303 	adc.w	r3, r2, r3
 80064de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80064ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80064f8:	4649      	mov	r1, r9
 80064fa:	008b      	lsls	r3, r1, #2
 80064fc:	4641      	mov	r1, r8
 80064fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006502:	4641      	mov	r1, r8
 8006504:	008a      	lsls	r2, r1, #2
 8006506:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800650a:	f7fa fbbf 	bl	8000c8c <__aeabi_uldivmod>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4b0d      	ldr	r3, [pc, #52]	@ (8006548 <UART_SetConfig+0x4e4>)
 8006514:	fba3 1302 	umull	r1, r3, r3, r2
 8006518:	095b      	lsrs	r3, r3, #5
 800651a:	2164      	movs	r1, #100	@ 0x64
 800651c:	fb01 f303 	mul.w	r3, r1, r3
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	3332      	adds	r3, #50	@ 0x32
 8006526:	4a08      	ldr	r2, [pc, #32]	@ (8006548 <UART_SetConfig+0x4e4>)
 8006528:	fba2 2303 	umull	r2, r3, r2, r3
 800652c:	095b      	lsrs	r3, r3, #5
 800652e:	f003 020f 	and.w	r2, r3, #15
 8006532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4422      	add	r2, r4
 800653a:	609a      	str	r2, [r3, #8]
}
 800653c:	bf00      	nop
 800653e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006542:	46bd      	mov	sp, r7
 8006544:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006548:	51eb851f 	.word	0x51eb851f

0800654c <__NVIC_SetPriority>:
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	6039      	str	r1, [r7, #0]
 8006556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800655c:	2b00      	cmp	r3, #0
 800655e:	db0a      	blt.n	8006576 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	b2da      	uxtb	r2, r3
 8006564:	490c      	ldr	r1, [pc, #48]	@ (8006598 <__NVIC_SetPriority+0x4c>)
 8006566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800656a:	0112      	lsls	r2, r2, #4
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	440b      	add	r3, r1
 8006570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006574:	e00a      	b.n	800658c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	b2da      	uxtb	r2, r3
 800657a:	4908      	ldr	r1, [pc, #32]	@ (800659c <__NVIC_SetPriority+0x50>)
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	f003 030f 	and.w	r3, r3, #15
 8006582:	3b04      	subs	r3, #4
 8006584:	0112      	lsls	r2, r2, #4
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	440b      	add	r3, r1
 800658a:	761a      	strb	r2, [r3, #24]
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	e000e100 	.word	0xe000e100
 800659c:	e000ed00 	.word	0xe000ed00

080065a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80065a4:	2100      	movs	r1, #0
 80065a6:	f06f 0004 	mvn.w	r0, #4
 80065aa:	f7ff ffcf 	bl	800654c <__NVIC_SetPriority>
#endif
}
 80065ae:	bf00      	nop
 80065b0:	bd80      	pop	{r7, pc}
	...

080065b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065ba:	f3ef 8305 	mrs	r3, IPSR
 80065be:	603b      	str	r3, [r7, #0]
  return(result);
 80065c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80065c6:	f06f 0305 	mvn.w	r3, #5
 80065ca:	607b      	str	r3, [r7, #4]
 80065cc:	e00c      	b.n	80065e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80065ce:	4b0a      	ldr	r3, [pc, #40]	@ (80065f8 <osKernelInitialize+0x44>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d105      	bne.n	80065e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80065d6:	4b08      	ldr	r3, [pc, #32]	@ (80065f8 <osKernelInitialize+0x44>)
 80065d8:	2201      	movs	r2, #1
 80065da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80065dc:	2300      	movs	r3, #0
 80065de:	607b      	str	r3, [r7, #4]
 80065e0:	e002      	b.n	80065e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80065e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065e8:	687b      	ldr	r3, [r7, #4]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	200048dc 	.word	0x200048dc

080065fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006602:	f3ef 8305 	mrs	r3, IPSR
 8006606:	603b      	str	r3, [r7, #0]
  return(result);
 8006608:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <osKernelStart+0x1a>
    stat = osErrorISR;
 800660e:	f06f 0305 	mvn.w	r3, #5
 8006612:	607b      	str	r3, [r7, #4]
 8006614:	e010      	b.n	8006638 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006616:	4b0b      	ldr	r3, [pc, #44]	@ (8006644 <osKernelStart+0x48>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d109      	bne.n	8006632 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800661e:	f7ff ffbf 	bl	80065a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006622:	4b08      	ldr	r3, [pc, #32]	@ (8006644 <osKernelStart+0x48>)
 8006624:	2202      	movs	r2, #2
 8006626:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006628:	f001 f87a 	bl	8007720 <vTaskStartScheduler>
      stat = osOK;
 800662c:	2300      	movs	r3, #0
 800662e:	607b      	str	r3, [r7, #4]
 8006630:	e002      	b.n	8006638 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006632:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006636:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006638:	687b      	ldr	r3, [r7, #4]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	200048dc 	.word	0x200048dc

08006648 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006648:	b580      	push	{r7, lr}
 800664a:	b08e      	sub	sp, #56	@ 0x38
 800664c:	af04      	add	r7, sp, #16
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006654:	2300      	movs	r3, #0
 8006656:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006658:	f3ef 8305 	mrs	r3, IPSR
 800665c:	617b      	str	r3, [r7, #20]
  return(result);
 800665e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006660:	2b00      	cmp	r3, #0
 8006662:	d17e      	bne.n	8006762 <osThreadNew+0x11a>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d07b      	beq.n	8006762 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800666a:	2380      	movs	r3, #128	@ 0x80
 800666c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800666e:	2318      	movs	r3, #24
 8006670:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006672:	2300      	movs	r3, #0
 8006674:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800667a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d045      	beq.n	800670e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d002      	beq.n	8006690 <osThreadNew+0x48>
        name = attr->name;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d008      	beq.n	80066b6 <osThreadNew+0x6e>
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	2b38      	cmp	r3, #56	@ 0x38
 80066a8:	d805      	bhi.n	80066b6 <osThreadNew+0x6e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <osThreadNew+0x72>
        return (NULL);
 80066b6:	2300      	movs	r3, #0
 80066b8:	e054      	b.n	8006764 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	089b      	lsrs	r3, r3, #2
 80066c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00e      	beq.n	80066f0 <osThreadNew+0xa8>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	2b5b      	cmp	r3, #91	@ 0x5b
 80066d8:	d90a      	bls.n	80066f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d006      	beq.n	80066f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <osThreadNew+0xa8>
        mem = 1;
 80066ea:	2301      	movs	r3, #1
 80066ec:	61bb      	str	r3, [r7, #24]
 80066ee:	e010      	b.n	8006712 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10c      	bne.n	8006712 <osThreadNew+0xca>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d108      	bne.n	8006712 <osThreadNew+0xca>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d104      	bne.n	8006712 <osThreadNew+0xca>
          mem = 0;
 8006708:	2300      	movs	r3, #0
 800670a:	61bb      	str	r3, [r7, #24]
 800670c:	e001      	b.n	8006712 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d110      	bne.n	800673a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006720:	9202      	str	r2, [sp, #8]
 8006722:	9301      	str	r3, [sp, #4]
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	6a3a      	ldr	r2, [r7, #32]
 800672c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 fe1a 	bl	8007368 <xTaskCreateStatic>
 8006734:	4603      	mov	r3, r0
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	e013      	b.n	8006762 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d110      	bne.n	8006762 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	b29a      	uxth	r2, r3
 8006744:	f107 0310 	add.w	r3, r7, #16
 8006748:	9301      	str	r3, [sp, #4]
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 fe68 	bl	8007428 <xTaskCreate>
 8006758:	4603      	mov	r3, r0
 800675a:	2b01      	cmp	r3, #1
 800675c:	d001      	beq.n	8006762 <osThreadNew+0x11a>
            hTask = NULL;
 800675e:	2300      	movs	r3, #0
 8006760:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006762:	693b      	ldr	r3, [r7, #16]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3728      	adds	r7, #40	@ 0x28
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006774:	f3ef 8305 	mrs	r3, IPSR
 8006778:	60bb      	str	r3, [r7, #8]
  return(result);
 800677a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <osDelay+0x1c>
    stat = osErrorISR;
 8006780:	f06f 0305 	mvn.w	r3, #5
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	e007      	b.n	8006798 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 ff8e 	bl	80076b4 <vTaskDelay>
    }
  }

  return (stat);
 8006798:	68fb      	ldr	r3, [r7, #12]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4a07      	ldr	r2, [pc, #28]	@ (80067d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80067b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	4a06      	ldr	r2, [pc, #24]	@ (80067d4 <vApplicationGetIdleTaskMemory+0x30>)
 80067ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2280      	movs	r2, #128	@ 0x80
 80067c0:	601a      	str	r2, [r3, #0]
}
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	200048e0 	.word	0x200048e0
 80067d4:	2000493c 	.word	0x2000493c

080067d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4a07      	ldr	r2, [pc, #28]	@ (8006804 <vApplicationGetTimerTaskMemory+0x2c>)
 80067e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	4a06      	ldr	r2, [pc, #24]	@ (8006808 <vApplicationGetTimerTaskMemory+0x30>)
 80067ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80067f6:	601a      	str	r2, [r3, #0]
}
 80067f8:	bf00      	nop
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	20004b3c 	.word	0x20004b3c
 8006808:	20004b98 	.word	0x20004b98

0800680c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f103 0208 	add.w	r2, r3, #8
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006824:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f103 0208 	add.w	r2, r3, #8
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f103 0208 	add.w	r2, r3, #8
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	601a      	str	r2, [r3, #0]
}
 80068a2:	bf00      	nop
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068ae:	b480      	push	{r7}
 80068b0:	b085      	sub	sp, #20
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068c4:	d103      	bne.n	80068ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	e00c      	b.n	80068e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3308      	adds	r3, #8
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	e002      	b.n	80068dc <vListInsert+0x2e>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d2f6      	bcs.n	80068d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	601a      	str	r2, [r3, #0]
}
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6892      	ldr	r2, [r2, #8]
 8006936:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6852      	ldr	r2, [r2, #4]
 8006940:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	429a      	cmp	r2, r3
 800694a:	d103      	bne.n	8006954 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	1e5a      	subs	r2, r3, #1
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10b      	bne.n	80069a0 <xQueueGenericReset+0x2c>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	60bb      	str	r3, [r7, #8]
}
 800699a:	bf00      	nop
 800699c:	bf00      	nop
 800699e:	e7fd      	b.n	800699c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069a0:	f002 f8a2 	bl	8008ae8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ac:	68f9      	ldr	r1, [r7, #12]
 80069ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80069b0:	fb01 f303 	mul.w	r3, r1, r3
 80069b4:	441a      	add	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d0:	3b01      	subs	r3, #1
 80069d2:	68f9      	ldr	r1, [r7, #12]
 80069d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	441a      	add	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	22ff      	movs	r2, #255	@ 0xff
 80069e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	22ff      	movs	r2, #255	@ 0xff
 80069ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d114      	bne.n	8006a20 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d01a      	beq.n	8006a34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3310      	adds	r3, #16
 8006a02:	4618      	mov	r0, r3
 8006a04:	f001 f91a 	bl	8007c3c <xTaskRemoveFromEventList>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d012      	beq.n	8006a34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a44 <xQueueGenericReset+0xd0>)
 8006a10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	e009      	b.n	8006a34 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3310      	adds	r3, #16
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7ff fef1 	bl	800680c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3324      	adds	r3, #36	@ 0x24
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff feec 	bl	800680c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a34:	f002 f88a 	bl	8008b4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a38:	2301      	movs	r3, #1
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08e      	sub	sp, #56	@ 0x38
 8006a4c:	af02      	add	r7, sp, #8
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10b      	bne.n	8006a74 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a6e:	bf00      	nop
 8006a70:	bf00      	nop
 8006a72:	e7fd      	b.n	8006a70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10b      	bne.n	8006a92 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a8c:	bf00      	nop
 8006a8e:	bf00      	nop
 8006a90:	e7fd      	b.n	8006a8e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <xQueueGenericCreateStatic+0x56>
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <xQueueGenericCreateStatic+0x5a>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e000      	b.n	8006aa4 <xQueueGenericCreateStatic+0x5c>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	623b      	str	r3, [r7, #32]
}
 8006aba:	bf00      	nop
 8006abc:	bf00      	nop
 8006abe:	e7fd      	b.n	8006abc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d102      	bne.n	8006acc <xQueueGenericCreateStatic+0x84>
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <xQueueGenericCreateStatic+0x88>
 8006acc:	2301      	movs	r3, #1
 8006ace:	e000      	b.n	8006ad2 <xQueueGenericCreateStatic+0x8a>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10b      	bne.n	8006aee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	61fb      	str	r3, [r7, #28]
}
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop
 8006aec:	e7fd      	b.n	8006aea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006aee:	2350      	movs	r3, #80	@ 0x50
 8006af0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b50      	cmp	r3, #80	@ 0x50
 8006af6:	d00b      	beq.n	8006b10 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	61bb      	str	r3, [r7, #24]
}
 8006b0a:	bf00      	nop
 8006b0c:	bf00      	nop
 8006b0e:	e7fd      	b.n	8006b0c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b10:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00d      	beq.n	8006b38 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b24:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 f805 	bl	8006b42 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3730      	adds	r7, #48	@ 0x30
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]
 8006b4e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d103      	bne.n	8006b5e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	e002      	b.n	8006b64 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b70:	2101      	movs	r1, #1
 8006b72:	69b8      	ldr	r0, [r7, #24]
 8006b74:	f7ff fefe 	bl	8006974 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	78fa      	ldrb	r2, [r7, #3]
 8006b7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b80:	bf00      	nop
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08e      	sub	sp, #56	@ 0x38
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b96:	2300      	movs	r3, #0
 8006b98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10b      	bne.n	8006bbc <xQueueGenericSend+0x34>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006bb6:	bf00      	nop
 8006bb8:	bf00      	nop
 8006bba:	e7fd      	b.n	8006bb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d103      	bne.n	8006bca <xQueueGenericSend+0x42>
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <xQueueGenericSend+0x46>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <xQueueGenericSend+0x48>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10b      	bne.n	8006bec <xQueueGenericSend+0x64>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006be6:	bf00      	nop
 8006be8:	bf00      	nop
 8006bea:	e7fd      	b.n	8006be8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d103      	bne.n	8006bfa <xQueueGenericSend+0x72>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <xQueueGenericSend+0x76>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e000      	b.n	8006c00 <xQueueGenericSend+0x78>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10b      	bne.n	8006c1c <xQueueGenericSend+0x94>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	623b      	str	r3, [r7, #32]
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c1c:	f001 f9f6 	bl	800800c <xTaskGetSchedulerState>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d102      	bne.n	8006c2c <xQueueGenericSend+0xa4>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <xQueueGenericSend+0xa8>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e000      	b.n	8006c32 <xQueueGenericSend+0xaa>
 8006c30:	2300      	movs	r3, #0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10b      	bne.n	8006c4e <xQueueGenericSend+0xc6>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	61fb      	str	r3, [r7, #28]
}
 8006c48:	bf00      	nop
 8006c4a:	bf00      	nop
 8006c4c:	e7fd      	b.n	8006c4a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c4e:	f001 ff4b 	bl	8008ae8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d302      	bcc.n	8006c64 <xQueueGenericSend+0xdc>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d129      	bne.n	8006cb8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c6a:	f000 fa0f 	bl	800708c <prvCopyDataToQueue>
 8006c6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d010      	beq.n	8006c9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	3324      	adds	r3, #36	@ 0x24
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 ffdd 	bl	8007c3c <xTaskRemoveFromEventList>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d013      	beq.n	8006cb0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c88:	4b3f      	ldr	r3, [pc, #252]	@ (8006d88 <xQueueGenericSend+0x200>)
 8006c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	e00a      	b.n	8006cb0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d007      	beq.n	8006cb0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ca0:	4b39      	ldr	r3, [pc, #228]	@ (8006d88 <xQueueGenericSend+0x200>)
 8006ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006cb0:	f001 ff4c 	bl	8008b4c <vPortExitCritical>
				return pdPASS;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e063      	b.n	8006d80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d103      	bne.n	8006cc6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cbe:	f001 ff45 	bl	8008b4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	e05c      	b.n	8006d80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d106      	bne.n	8006cda <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ccc:	f107 0314 	add.w	r3, r7, #20
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f001 f83f 	bl	8007d54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cda:	f001 ff37 	bl	8008b4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cde:	f000 fd87 	bl	80077f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ce2:	f001 ff01 	bl	8008ae8 <vPortEnterCritical>
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cec:	b25b      	sxtb	r3, r3
 8006cee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cf2:	d103      	bne.n	8006cfc <xQueueGenericSend+0x174>
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d02:	b25b      	sxtb	r3, r3
 8006d04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d08:	d103      	bne.n	8006d12 <xQueueGenericSend+0x18a>
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d12:	f001 ff1b 	bl	8008b4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d16:	1d3a      	adds	r2, r7, #4
 8006d18:	f107 0314 	add.w	r3, r7, #20
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f001 f82e 	bl	8007d80 <xTaskCheckForTimeOut>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d124      	bne.n	8006d74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d2c:	f000 faa6 	bl	800727c <prvIsQueueFull>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d018      	beq.n	8006d68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d38:	3310      	adds	r3, #16
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 ff2a 	bl	8007b98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d46:	f000 fa31 	bl	80071ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d4a:	f000 fd5f 	bl	800780c <xTaskResumeAll>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f47f af7c 	bne.w	8006c4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006d56:	4b0c      	ldr	r3, [pc, #48]	@ (8006d88 <xQueueGenericSend+0x200>)
 8006d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	e772      	b.n	8006c4e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d6a:	f000 fa1f 	bl	80071ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d6e:	f000 fd4d 	bl	800780c <xTaskResumeAll>
 8006d72:	e76c      	b.n	8006c4e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d76:	f000 fa19 	bl	80071ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d7a:	f000 fd47 	bl	800780c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3738      	adds	r7, #56	@ 0x38
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	e000ed04 	.word	0xe000ed04

08006d8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b090      	sub	sp, #64	@ 0x40
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10b      	bne.n	8006dbc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
 8006dba:	e7fd      	b.n	8006db8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d103      	bne.n	8006dca <xQueueGenericSendFromISR+0x3e>
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <xQueueGenericSendFromISR+0x42>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e000      	b.n	8006dd0 <xQueueGenericSendFromISR+0x44>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10b      	bne.n	8006dec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006de6:	bf00      	nop
 8006de8:	bf00      	nop
 8006dea:	e7fd      	b.n	8006de8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d103      	bne.n	8006dfa <xQueueGenericSendFromISR+0x6e>
 8006df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d101      	bne.n	8006dfe <xQueueGenericSendFromISR+0x72>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <xQueueGenericSendFromISR+0x74>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10b      	bne.n	8006e1c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	623b      	str	r3, [r7, #32]
}
 8006e16:	bf00      	nop
 8006e18:	bf00      	nop
 8006e1a:	e7fd      	b.n	8006e18 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e1c:	f001 ff44 	bl	8008ca8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e20:	f3ef 8211 	mrs	r2, BASEPRI
 8006e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	61fa      	str	r2, [r7, #28]
 8006e36:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e38:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e3a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d302      	bcc.n	8006e4e <xQueueGenericSendFromISR+0xc2>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d12f      	bne.n	8006eae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	68b9      	ldr	r1, [r7, #8]
 8006e62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006e64:	f000 f912 	bl	800708c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e68:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e70:	d112      	bne.n	8006e98 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d016      	beq.n	8006ea8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7c:	3324      	adds	r3, #36	@ 0x24
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fedc 	bl	8007c3c <xTaskRemoveFromEventList>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00e      	beq.n	8006ea8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	e007      	b.n	8006ea8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	b25a      	sxtb	r2, r3
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006eac:	e001      	b.n	8006eb2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ebc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3740      	adds	r7, #64	@ 0x40
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08c      	sub	sp, #48	@ 0x30
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10b      	bne.n	8006efa <xQueueReceive+0x32>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	623b      	str	r3, [r7, #32]
}
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop
 8006ef8:	e7fd      	b.n	8006ef6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d103      	bne.n	8006f08 <xQueueReceive+0x40>
 8006f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <xQueueReceive+0x44>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e000      	b.n	8006f0e <xQueueReceive+0x46>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10b      	bne.n	8006f2a <xQueueReceive+0x62>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	61fb      	str	r3, [r7, #28]
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	e7fd      	b.n	8006f26 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f2a:	f001 f86f 	bl	800800c <xTaskGetSchedulerState>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d102      	bne.n	8006f3a <xQueueReceive+0x72>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <xQueueReceive+0x76>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e000      	b.n	8006f40 <xQueueReceive+0x78>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10b      	bne.n	8006f5c <xQueueReceive+0x94>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	61bb      	str	r3, [r7, #24]
}
 8006f56:	bf00      	nop
 8006f58:	bf00      	nop
 8006f5a:	e7fd      	b.n	8006f58 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f5c:	f001 fdc4 	bl	8008ae8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01f      	beq.n	8006fac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f6c:	68b9      	ldr	r1, [r7, #8]
 8006f6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f70:	f000 f8f6 	bl	8007160 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f76:	1e5a      	subs	r2, r3, #1
 8006f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00f      	beq.n	8006fa4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f86:	3310      	adds	r3, #16
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 fe57 	bl	8007c3c <xTaskRemoveFromEventList>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d007      	beq.n	8006fa4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f94:	4b3c      	ldr	r3, [pc, #240]	@ (8007088 <xQueueReceive+0x1c0>)
 8006f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fa4:	f001 fdd2 	bl	8008b4c <vPortExitCritical>
				return pdPASS;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e069      	b.n	8007080 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d103      	bne.n	8006fba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fb2:	f001 fdcb 	bl	8008b4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e062      	b.n	8007080 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d106      	bne.n	8006fce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fc0:	f107 0310 	add.w	r3, r7, #16
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 fec5 	bl	8007d54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fce:	f001 fdbd 	bl	8008b4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fd2:	f000 fc0d 	bl	80077f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fd6:	f001 fd87 	bl	8008ae8 <vPortEnterCritical>
 8006fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fe0:	b25b      	sxtb	r3, r3
 8006fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fe6:	d103      	bne.n	8006ff0 <xQueueReceive+0x128>
 8006fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ff6:	b25b      	sxtb	r3, r3
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ffc:	d103      	bne.n	8007006 <xQueueReceive+0x13e>
 8006ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007006:	f001 fda1 	bl	8008b4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800700a:	1d3a      	adds	r2, r7, #4
 800700c:	f107 0310 	add.w	r3, r7, #16
 8007010:	4611      	mov	r1, r2
 8007012:	4618      	mov	r0, r3
 8007014:	f000 feb4 	bl	8007d80 <xTaskCheckForTimeOut>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d123      	bne.n	8007066 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800701e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007020:	f000 f916 	bl	8007250 <prvIsQueueEmpty>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d017      	beq.n	800705a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800702a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702c:	3324      	adds	r3, #36	@ 0x24
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	4611      	mov	r1, r2
 8007032:	4618      	mov	r0, r3
 8007034:	f000 fdb0 	bl	8007b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800703a:	f000 f8b7 	bl	80071ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800703e:	f000 fbe5 	bl	800780c <xTaskResumeAll>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d189      	bne.n	8006f5c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007048:	4b0f      	ldr	r3, [pc, #60]	@ (8007088 <xQueueReceive+0x1c0>)
 800704a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	e780      	b.n	8006f5c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800705a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800705c:	f000 f8a6 	bl	80071ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007060:	f000 fbd4 	bl	800780c <xTaskResumeAll>
 8007064:	e77a      	b.n	8006f5c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007068:	f000 f8a0 	bl	80071ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800706c:	f000 fbce 	bl	800780c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007070:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007072:	f000 f8ed 	bl	8007250 <prvIsQueueEmpty>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	f43f af6f 	beq.w	8006f5c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800707e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007080:	4618      	mov	r0, r3
 8007082:	3730      	adds	r7, #48	@ 0x30
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	e000ed04 	.word	0xe000ed04

0800708c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007098:	2300      	movs	r3, #0
 800709a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10d      	bne.n	80070c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d14d      	bne.n	800714e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 ffc6 	bl	8008048 <xTaskPriorityDisinherit>
 80070bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	609a      	str	r2, [r3, #8]
 80070c4:	e043      	b.n	800714e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d119      	bne.n	8007100 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6858      	ldr	r0, [r3, #4]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d4:	461a      	mov	r2, r3
 80070d6:	68b9      	ldr	r1, [r7, #8]
 80070d8:	f00f fb5b 	bl	8016792 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e4:	441a      	add	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d32b      	bcc.n	800714e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	605a      	str	r2, [r3, #4]
 80070fe:	e026      	b.n	800714e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	68d8      	ldr	r0, [r3, #12]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007108:	461a      	mov	r2, r3
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	f00f fb41 	bl	8016792 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	68da      	ldr	r2, [r3, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007118:	425b      	negs	r3, r3
 800711a:	441a      	add	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	68da      	ldr	r2, [r3, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	429a      	cmp	r2, r3
 800712a:	d207      	bcs.n	800713c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007134:	425b      	negs	r3, r3
 8007136:	441a      	add	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b02      	cmp	r3, #2
 8007140:	d105      	bne.n	800714e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	3b01      	subs	r3, #1
 800714c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007156:	697b      	ldr	r3, [r7, #20]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	d018      	beq.n	80071a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717a:	441a      	add	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	429a      	cmp	r2, r3
 800718a:	d303      	bcc.n	8007194 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68d9      	ldr	r1, [r3, #12]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719c:	461a      	mov	r2, r3
 800719e:	6838      	ldr	r0, [r7, #0]
 80071a0:	f00f faf7 	bl	8016792 <memcpy>
	}
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071b4:	f001 fc98 	bl	8008ae8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071c0:	e011      	b.n	80071e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d012      	beq.n	80071f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3324      	adds	r3, #36	@ 0x24
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fd34 	bl	8007c3c <xTaskRemoveFromEventList>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071da:	f000 fe35 	bl	8007e48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	dce9      	bgt.n	80071c2 <prvUnlockQueue+0x16>
 80071ee:	e000      	b.n	80071f2 <prvUnlockQueue+0x46>
					break;
 80071f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	22ff      	movs	r2, #255	@ 0xff
 80071f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80071fa:	f001 fca7 	bl	8008b4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071fe:	f001 fc73 	bl	8008ae8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007208:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800720a:	e011      	b.n	8007230 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d012      	beq.n	800723a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3310      	adds	r3, #16
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fd0f 	bl	8007c3c <xTaskRemoveFromEventList>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007224:	f000 fe10 	bl	8007e48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	3b01      	subs	r3, #1
 800722c:	b2db      	uxtb	r3, r3
 800722e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007234:	2b00      	cmp	r3, #0
 8007236:	dce9      	bgt.n	800720c <prvUnlockQueue+0x60>
 8007238:	e000      	b.n	800723c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800723a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	22ff      	movs	r2, #255	@ 0xff
 8007240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007244:	f001 fc82 	bl	8008b4c <vPortExitCritical>
}
 8007248:	bf00      	nop
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007258:	f001 fc46 	bl	8008ae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007260:	2b00      	cmp	r3, #0
 8007262:	d102      	bne.n	800726a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007264:	2301      	movs	r3, #1
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	e001      	b.n	800726e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800726a:	2300      	movs	r3, #0
 800726c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800726e:	f001 fc6d 	bl	8008b4c <vPortExitCritical>

	return xReturn;
 8007272:	68fb      	ldr	r3, [r7, #12]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007284:	f001 fc30 	bl	8008ae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007290:	429a      	cmp	r2, r3
 8007292:	d102      	bne.n	800729a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007294:	2301      	movs	r3, #1
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	e001      	b.n	800729e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800729e:	f001 fc55 	bl	8008b4c <vPortExitCritical>

	return xReturn;
 80072a2:	68fb      	ldr	r3, [r7, #12]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	e014      	b.n	80072e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072bc:	4a0f      	ldr	r2, [pc, #60]	@ (80072fc <vQueueAddToRegistry+0x50>)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10b      	bne.n	80072e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072c8:	490c      	ldr	r1, [pc, #48]	@ (80072fc <vQueueAddToRegistry+0x50>)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80072d2:	4a0a      	ldr	r2, [pc, #40]	@ (80072fc <vQueueAddToRegistry+0x50>)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	4413      	add	r3, r2
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80072de:	e006      	b.n	80072ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3301      	adds	r3, #1
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b07      	cmp	r3, #7
 80072ea:	d9e7      	bls.n	80072bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072ec:	bf00      	nop
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	20004f98 	.word	0x20004f98

08007300 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007310:	f001 fbea 	bl	8008ae8 <vPortEnterCritical>
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800731a:	b25b      	sxtb	r3, r3
 800731c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007320:	d103      	bne.n	800732a <vQueueWaitForMessageRestricted+0x2a>
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007330:	b25b      	sxtb	r3, r3
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007336:	d103      	bne.n	8007340 <vQueueWaitForMessageRestricted+0x40>
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007340:	f001 fc04 	bl	8008b4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007348:	2b00      	cmp	r3, #0
 800734a:	d106      	bne.n	800735a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	3324      	adds	r3, #36	@ 0x24
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fc45 	bl	8007be4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800735a:	6978      	ldr	r0, [r7, #20]
 800735c:	f7ff ff26 	bl	80071ac <prvUnlockQueue>
	}
 8007360:	bf00      	nop
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08e      	sub	sp, #56	@ 0x38
 800736c:	af04      	add	r7, sp, #16
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10b      	bne.n	8007394 <xTaskCreateStatic+0x2c>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	623b      	str	r3, [r7, #32]
}
 800738e:	bf00      	nop
 8007390:	bf00      	nop
 8007392:	e7fd      	b.n	8007390 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10b      	bne.n	80073b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	61fb      	str	r3, [r7, #28]
}
 80073ac:	bf00      	nop
 80073ae:	bf00      	nop
 80073b0:	e7fd      	b.n	80073ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073b2:	235c      	movs	r3, #92	@ 0x5c
 80073b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80073ba:	d00b      	beq.n	80073d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	61bb      	str	r3, [r7, #24]
}
 80073ce:	bf00      	nop
 80073d0:	bf00      	nop
 80073d2:	e7fd      	b.n	80073d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80073d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d01e      	beq.n	800741a <xTaskCreateStatic+0xb2>
 80073dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d01b      	beq.n	800741a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073f4:	2300      	movs	r3, #0
 80073f6:	9303      	str	r3, [sp, #12]
 80073f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fa:	9302      	str	r3, [sp, #8]
 80073fc:	f107 0314 	add.w	r3, r7, #20
 8007400:	9301      	str	r3, [sp, #4]
 8007402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 f850 	bl	80074b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007412:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007414:	f000 f8de 	bl	80075d4 <prvAddNewTaskToReadyList>
 8007418:	e001      	b.n	800741e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800741a:	2300      	movs	r3, #0
 800741c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800741e:	697b      	ldr	r3, [r7, #20]
	}
 8007420:	4618      	mov	r0, r3
 8007422:	3728      	adds	r7, #40	@ 0x28
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08c      	sub	sp, #48	@ 0x30
 800742c:	af04      	add	r7, sp, #16
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	603b      	str	r3, [r7, #0]
 8007434:	4613      	mov	r3, r2
 8007436:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007438:	88fb      	ldrh	r3, [r7, #6]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4618      	mov	r0, r3
 800743e:	f001 fc75 	bl	8008d2c <pvPortMalloc>
 8007442:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00e      	beq.n	8007468 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800744a:	205c      	movs	r0, #92	@ 0x5c
 800744c:	f001 fc6e 	bl	8008d2c <pvPortMalloc>
 8007450:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	631a      	str	r2, [r3, #48]	@ 0x30
 800745e:	e005      	b.n	800746c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007460:	6978      	ldr	r0, [r7, #20]
 8007462:	f001 fd31 	bl	8008ec8 <vPortFree>
 8007466:	e001      	b.n	800746c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007468:	2300      	movs	r3, #0
 800746a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d017      	beq.n	80074a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800747a:	88fa      	ldrh	r2, [r7, #6]
 800747c:	2300      	movs	r3, #0
 800747e:	9303      	str	r3, [sp, #12]
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	9302      	str	r3, [sp, #8]
 8007484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007486:	9301      	str	r3, [sp, #4]
 8007488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 f80e 	bl	80074b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007496:	69f8      	ldr	r0, [r7, #28]
 8007498:	f000 f89c 	bl	80075d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800749c:	2301      	movs	r3, #1
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	e002      	b.n	80074a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074a8:	69bb      	ldr	r3, [r7, #24]
	}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3720      	adds	r7, #32
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b088      	sub	sp, #32
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	607a      	str	r2, [r7, #4]
 80074be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	461a      	mov	r2, r3
 80074ca:	21a5      	movs	r1, #165	@ 0xa5
 80074cc:	f00f f898 	bl	8016600 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074da:	3b01      	subs	r3, #1
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	f023 0307 	bic.w	r3, r3, #7
 80074e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	f003 0307 	and.w	r3, r3, #7
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00b      	beq.n	800750c <prvInitialiseNewTask+0x5a>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	617b      	str	r3, [r7, #20]
}
 8007506:	bf00      	nop
 8007508:	bf00      	nop
 800750a:	e7fd      	b.n	8007508 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d01f      	beq.n	8007552 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007512:	2300      	movs	r3, #0
 8007514:	61fb      	str	r3, [r7, #28]
 8007516:	e012      	b.n	800753e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	4413      	add	r3, r2
 800751e:	7819      	ldrb	r1, [r3, #0]
 8007520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	4413      	add	r3, r2
 8007526:	3334      	adds	r3, #52	@ 0x34
 8007528:	460a      	mov	r2, r1
 800752a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	4413      	add	r3, r2
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d006      	beq.n	8007546 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	3301      	adds	r3, #1
 800753c:	61fb      	str	r3, [r7, #28]
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	2b0f      	cmp	r3, #15
 8007542:	d9e9      	bls.n	8007518 <prvInitialiseNewTask+0x66>
 8007544:	e000      	b.n	8007548 <prvInitialiseNewTask+0x96>
			{
				break;
 8007546:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007550:	e003      	b.n	800755a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800755a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755c:	2b37      	cmp	r3, #55	@ 0x37
 800755e:	d901      	bls.n	8007564 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007560:	2337      	movs	r3, #55	@ 0x37
 8007562:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007568:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800756a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800756e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007572:	2200      	movs	r2, #0
 8007574:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007578:	3304      	adds	r3, #4
 800757a:	4618      	mov	r0, r3
 800757c:	f7ff f966 	bl	800684c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	3318      	adds	r3, #24
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff f961 	bl	800684c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800758e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007592:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800759e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a2:	2200      	movs	r2, #0
 80075a4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	68f9      	ldr	r1, [r7, #12]
 80075b2:	69b8      	ldr	r0, [r7, #24]
 80075b4:	f001 f966 	bl	8008884 <pxPortInitialiseStack>
 80075b8:	4602      	mov	r2, r0
 80075ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ca:	bf00      	nop
 80075cc:	3720      	adds	r7, #32
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
	...

080075d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075dc:	f001 fa84 	bl	8008ae8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075e0:	4b2d      	ldr	r3, [pc, #180]	@ (8007698 <prvAddNewTaskToReadyList+0xc4>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3301      	adds	r3, #1
 80075e6:	4a2c      	ldr	r2, [pc, #176]	@ (8007698 <prvAddNewTaskToReadyList+0xc4>)
 80075e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075ea:	4b2c      	ldr	r3, [pc, #176]	@ (800769c <prvAddNewTaskToReadyList+0xc8>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d109      	bne.n	8007606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075f2:	4a2a      	ldr	r2, [pc, #168]	@ (800769c <prvAddNewTaskToReadyList+0xc8>)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80075f8:	4b27      	ldr	r3, [pc, #156]	@ (8007698 <prvAddNewTaskToReadyList+0xc4>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d110      	bne.n	8007622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007600:	f000 fc46 	bl	8007e90 <prvInitialiseTaskLists>
 8007604:	e00d      	b.n	8007622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007606:	4b26      	ldr	r3, [pc, #152]	@ (80076a0 <prvAddNewTaskToReadyList+0xcc>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d109      	bne.n	8007622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800760e:	4b23      	ldr	r3, [pc, #140]	@ (800769c <prvAddNewTaskToReadyList+0xc8>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007618:	429a      	cmp	r2, r3
 800761a:	d802      	bhi.n	8007622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800761c:	4a1f      	ldr	r2, [pc, #124]	@ (800769c <prvAddNewTaskToReadyList+0xc8>)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007622:	4b20      	ldr	r3, [pc, #128]	@ (80076a4 <prvAddNewTaskToReadyList+0xd0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3301      	adds	r3, #1
 8007628:	4a1e      	ldr	r2, [pc, #120]	@ (80076a4 <prvAddNewTaskToReadyList+0xd0>)
 800762a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800762c:	4b1d      	ldr	r3, [pc, #116]	@ (80076a4 <prvAddNewTaskToReadyList+0xd0>)
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007638:	4b1b      	ldr	r3, [pc, #108]	@ (80076a8 <prvAddNewTaskToReadyList+0xd4>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	429a      	cmp	r2, r3
 800763e:	d903      	bls.n	8007648 <prvAddNewTaskToReadyList+0x74>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007644:	4a18      	ldr	r2, [pc, #96]	@ (80076a8 <prvAddNewTaskToReadyList+0xd4>)
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4a15      	ldr	r2, [pc, #84]	@ (80076ac <prvAddNewTaskToReadyList+0xd8>)
 8007656:	441a      	add	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3304      	adds	r3, #4
 800765c:	4619      	mov	r1, r3
 800765e:	4610      	mov	r0, r2
 8007660:	f7ff f901 	bl	8006866 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007664:	f001 fa72 	bl	8008b4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007668:	4b0d      	ldr	r3, [pc, #52]	@ (80076a0 <prvAddNewTaskToReadyList+0xcc>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00e      	beq.n	800768e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007670:	4b0a      	ldr	r3, [pc, #40]	@ (800769c <prvAddNewTaskToReadyList+0xc8>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767a:	429a      	cmp	r2, r3
 800767c:	d207      	bcs.n	800768e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800767e:	4b0c      	ldr	r3, [pc, #48]	@ (80076b0 <prvAddNewTaskToReadyList+0xdc>)
 8007680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007684:	601a      	str	r2, [r3, #0]
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800768e:	bf00      	nop
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	200054ac 	.word	0x200054ac
 800769c:	20004fd8 	.word	0x20004fd8
 80076a0:	200054b8 	.word	0x200054b8
 80076a4:	200054c8 	.word	0x200054c8
 80076a8:	200054b4 	.word	0x200054b4
 80076ac:	20004fdc 	.word	0x20004fdc
 80076b0:	e000ed04 	.word	0xe000ed04

080076b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076bc:	2300      	movs	r3, #0
 80076be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d018      	beq.n	80076f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076c6:	4b14      	ldr	r3, [pc, #80]	@ (8007718 <vTaskDelay+0x64>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <vTaskDelay+0x32>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	60bb      	str	r3, [r7, #8]
}
 80076e0:	bf00      	nop
 80076e2:	bf00      	nop
 80076e4:	e7fd      	b.n	80076e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80076e6:	f000 f883 	bl	80077f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076ea:	2100      	movs	r1, #0
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fd1b 	bl	8008128 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076f2:	f000 f88b 	bl	800780c <xTaskResumeAll>
 80076f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d107      	bne.n	800770e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80076fe:	4b07      	ldr	r3, [pc, #28]	@ (800771c <vTaskDelay+0x68>)
 8007700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800770e:	bf00      	nop
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	200054d4 	.word	0x200054d4
 800771c:	e000ed04 	.word	0xe000ed04

08007720 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08a      	sub	sp, #40	@ 0x28
 8007724:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007726:	2300      	movs	r3, #0
 8007728:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800772a:	2300      	movs	r3, #0
 800772c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800772e:	463a      	mov	r2, r7
 8007730:	1d39      	adds	r1, r7, #4
 8007732:	f107 0308 	add.w	r3, r7, #8
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff f834 	bl	80067a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	9202      	str	r2, [sp, #8]
 8007744:	9301      	str	r3, [sp, #4]
 8007746:	2300      	movs	r3, #0
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	2300      	movs	r3, #0
 800774c:	460a      	mov	r2, r1
 800774e:	4922      	ldr	r1, [pc, #136]	@ (80077d8 <vTaskStartScheduler+0xb8>)
 8007750:	4822      	ldr	r0, [pc, #136]	@ (80077dc <vTaskStartScheduler+0xbc>)
 8007752:	f7ff fe09 	bl	8007368 <xTaskCreateStatic>
 8007756:	4603      	mov	r3, r0
 8007758:	4a21      	ldr	r2, [pc, #132]	@ (80077e0 <vTaskStartScheduler+0xc0>)
 800775a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800775c:	4b20      	ldr	r3, [pc, #128]	@ (80077e0 <vTaskStartScheduler+0xc0>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007764:	2301      	movs	r3, #1
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	e001      	b.n	800776e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800776a:	2300      	movs	r3, #0
 800776c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d102      	bne.n	800777a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007774:	f000 fd2c 	bl	80081d0 <xTimerCreateTimerTask>
 8007778:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d116      	bne.n	80077ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	613b      	str	r3, [r7, #16]
}
 8007792:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007794:	4b13      	ldr	r3, [pc, #76]	@ (80077e4 <vTaskStartScheduler+0xc4>)
 8007796:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800779a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800779c:	4b12      	ldr	r3, [pc, #72]	@ (80077e8 <vTaskStartScheduler+0xc8>)
 800779e:	2201      	movs	r2, #1
 80077a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077a2:	4b12      	ldr	r3, [pc, #72]	@ (80077ec <vTaskStartScheduler+0xcc>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077a8:	f001 f8fa 	bl	80089a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077ac:	e00f      	b.n	80077ce <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077b4:	d10b      	bne.n	80077ce <vTaskStartScheduler+0xae>
	__asm volatile
 80077b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	60fb      	str	r3, [r7, #12]
}
 80077c8:	bf00      	nop
 80077ca:	bf00      	nop
 80077cc:	e7fd      	b.n	80077ca <vTaskStartScheduler+0xaa>
}
 80077ce:	bf00      	nop
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	080175dc 	.word	0x080175dc
 80077dc:	08007e61 	.word	0x08007e61
 80077e0:	200054d0 	.word	0x200054d0
 80077e4:	200054cc 	.word	0x200054cc
 80077e8:	200054b8 	.word	0x200054b8
 80077ec:	200054b0 	.word	0x200054b0

080077f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80077f4:	4b04      	ldr	r3, [pc, #16]	@ (8007808 <vTaskSuspendAll+0x18>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3301      	adds	r3, #1
 80077fa:	4a03      	ldr	r2, [pc, #12]	@ (8007808 <vTaskSuspendAll+0x18>)
 80077fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80077fe:	bf00      	nop
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	200054d4 	.word	0x200054d4

0800780c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007816:	2300      	movs	r3, #0
 8007818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800781a:	4b42      	ldr	r3, [pc, #264]	@ (8007924 <xTaskResumeAll+0x118>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10b      	bne.n	800783a <xTaskResumeAll+0x2e>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	603b      	str	r3, [r7, #0]
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop
 8007838:	e7fd      	b.n	8007836 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800783a:	f001 f955 	bl	8008ae8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800783e:	4b39      	ldr	r3, [pc, #228]	@ (8007924 <xTaskResumeAll+0x118>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3b01      	subs	r3, #1
 8007844:	4a37      	ldr	r2, [pc, #220]	@ (8007924 <xTaskResumeAll+0x118>)
 8007846:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007848:	4b36      	ldr	r3, [pc, #216]	@ (8007924 <xTaskResumeAll+0x118>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d162      	bne.n	8007916 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007850:	4b35      	ldr	r3, [pc, #212]	@ (8007928 <xTaskResumeAll+0x11c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d05e      	beq.n	8007916 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007858:	e02f      	b.n	80078ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800785a:	4b34      	ldr	r3, [pc, #208]	@ (800792c <xTaskResumeAll+0x120>)
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3318      	adds	r3, #24
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff f85a 	bl	8006920 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3304      	adds	r3, #4
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff f855 	bl	8006920 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800787a:	4b2d      	ldr	r3, [pc, #180]	@ (8007930 <xTaskResumeAll+0x124>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	429a      	cmp	r2, r3
 8007880:	d903      	bls.n	800788a <xTaskResumeAll+0x7e>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007886:	4a2a      	ldr	r2, [pc, #168]	@ (8007930 <xTaskResumeAll+0x124>)
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800788e:	4613      	mov	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4a27      	ldr	r2, [pc, #156]	@ (8007934 <xTaskResumeAll+0x128>)
 8007898:	441a      	add	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3304      	adds	r3, #4
 800789e:	4619      	mov	r1, r3
 80078a0:	4610      	mov	r0, r2
 80078a2:	f7fe ffe0 	bl	8006866 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078aa:	4b23      	ldr	r3, [pc, #140]	@ (8007938 <xTaskResumeAll+0x12c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d302      	bcc.n	80078ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80078b4:	4b21      	ldr	r3, [pc, #132]	@ (800793c <xTaskResumeAll+0x130>)
 80078b6:	2201      	movs	r2, #1
 80078b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078ba:	4b1c      	ldr	r3, [pc, #112]	@ (800792c <xTaskResumeAll+0x120>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1cb      	bne.n	800785a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078c8:	f000 fb80 	bl	8007fcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80078cc:	4b1c      	ldr	r3, [pc, #112]	@ (8007940 <xTaskResumeAll+0x134>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d010      	beq.n	80078fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078d8:	f000 f846 	bl	8007968 <xTaskIncrementTick>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80078e2:	4b16      	ldr	r3, [pc, #88]	@ (800793c <xTaskResumeAll+0x130>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1f1      	bne.n	80078d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80078f4:	4b12      	ldr	r3, [pc, #72]	@ (8007940 <xTaskResumeAll+0x134>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078fa:	4b10      	ldr	r3, [pc, #64]	@ (800793c <xTaskResumeAll+0x130>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d009      	beq.n	8007916 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007902:	2301      	movs	r3, #1
 8007904:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007906:	4b0f      	ldr	r3, [pc, #60]	@ (8007944 <xTaskResumeAll+0x138>)
 8007908:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007916:	f001 f919 	bl	8008b4c <vPortExitCritical>

	return xAlreadyYielded;
 800791a:	68bb      	ldr	r3, [r7, #8]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	200054d4 	.word	0x200054d4
 8007928:	200054ac 	.word	0x200054ac
 800792c:	2000546c 	.word	0x2000546c
 8007930:	200054b4 	.word	0x200054b4
 8007934:	20004fdc 	.word	0x20004fdc
 8007938:	20004fd8 	.word	0x20004fd8
 800793c:	200054c0 	.word	0x200054c0
 8007940:	200054bc 	.word	0x200054bc
 8007944:	e000ed04 	.word	0xe000ed04

08007948 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800794e:	4b05      	ldr	r3, [pc, #20]	@ (8007964 <xTaskGetTickCount+0x1c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007954:	687b      	ldr	r3, [r7, #4]
}
 8007956:	4618      	mov	r0, r3
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	200054b0 	.word	0x200054b0

08007968 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800796e:	2300      	movs	r3, #0
 8007970:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007972:	4b4f      	ldr	r3, [pc, #316]	@ (8007ab0 <xTaskIncrementTick+0x148>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	f040 8090 	bne.w	8007a9c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800797c:	4b4d      	ldr	r3, [pc, #308]	@ (8007ab4 <xTaskIncrementTick+0x14c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3301      	adds	r3, #1
 8007982:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007984:	4a4b      	ldr	r2, [pc, #300]	@ (8007ab4 <xTaskIncrementTick+0x14c>)
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d121      	bne.n	80079d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007990:	4b49      	ldr	r3, [pc, #292]	@ (8007ab8 <xTaskIncrementTick+0x150>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00b      	beq.n	80079b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	603b      	str	r3, [r7, #0]
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	e7fd      	b.n	80079ae <xTaskIncrementTick+0x46>
 80079b2:	4b41      	ldr	r3, [pc, #260]	@ (8007ab8 <xTaskIncrementTick+0x150>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	4b40      	ldr	r3, [pc, #256]	@ (8007abc <xTaskIncrementTick+0x154>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a3e      	ldr	r2, [pc, #248]	@ (8007ab8 <xTaskIncrementTick+0x150>)
 80079be:	6013      	str	r3, [r2, #0]
 80079c0:	4a3e      	ldr	r2, [pc, #248]	@ (8007abc <xTaskIncrementTick+0x154>)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ac0 <xTaskIncrementTick+0x158>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3301      	adds	r3, #1
 80079cc:	4a3c      	ldr	r2, [pc, #240]	@ (8007ac0 <xTaskIncrementTick+0x158>)
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	f000 fafc 	bl	8007fcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079d4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ac4 <xTaskIncrementTick+0x15c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d349      	bcc.n	8007a72 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079de:	4b36      	ldr	r3, [pc, #216]	@ (8007ab8 <xTaskIncrementTick+0x150>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d104      	bne.n	80079f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079e8:	4b36      	ldr	r3, [pc, #216]	@ (8007ac4 <xTaskIncrementTick+0x15c>)
 80079ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80079ee:	601a      	str	r2, [r3, #0]
					break;
 80079f0:	e03f      	b.n	8007a72 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079f2:	4b31      	ldr	r3, [pc, #196]	@ (8007ab8 <xTaskIncrementTick+0x150>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d203      	bcs.n	8007a12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a0a:	4a2e      	ldr	r2, [pc, #184]	@ (8007ac4 <xTaskIncrementTick+0x15c>)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a10:	e02f      	b.n	8007a72 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	3304      	adds	r3, #4
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe ff82 	bl	8006920 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d004      	beq.n	8007a2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	3318      	adds	r3, #24
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe ff79 	bl	8006920 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a32:	4b25      	ldr	r3, [pc, #148]	@ (8007ac8 <xTaskIncrementTick+0x160>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d903      	bls.n	8007a42 <xTaskIncrementTick+0xda>
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3e:	4a22      	ldr	r2, [pc, #136]	@ (8007ac8 <xTaskIncrementTick+0x160>)
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8007acc <xTaskIncrementTick+0x164>)
 8007a50:	441a      	add	r2, r3
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	3304      	adds	r3, #4
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f7fe ff04 	bl	8006866 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a62:	4b1b      	ldr	r3, [pc, #108]	@ (8007ad0 <xTaskIncrementTick+0x168>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d3b8      	bcc.n	80079de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a70:	e7b5      	b.n	80079de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a72:	4b17      	ldr	r3, [pc, #92]	@ (8007ad0 <xTaskIncrementTick+0x168>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a78:	4914      	ldr	r1, [pc, #80]	@ (8007acc <xTaskIncrementTick+0x164>)
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	440b      	add	r3, r1
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d901      	bls.n	8007a8e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a8e:	4b11      	ldr	r3, [pc, #68]	@ (8007ad4 <xTaskIncrementTick+0x16c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007a96:	2301      	movs	r3, #1
 8007a98:	617b      	str	r3, [r7, #20]
 8007a9a:	e004      	b.n	8007aa6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad8 <xTaskIncrementTick+0x170>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8007ad8 <xTaskIncrementTick+0x170>)
 8007aa4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007aa6:	697b      	ldr	r3, [r7, #20]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	200054d4 	.word	0x200054d4
 8007ab4:	200054b0 	.word	0x200054b0
 8007ab8:	20005464 	.word	0x20005464
 8007abc:	20005468 	.word	0x20005468
 8007ac0:	200054c4 	.word	0x200054c4
 8007ac4:	200054cc 	.word	0x200054cc
 8007ac8:	200054b4 	.word	0x200054b4
 8007acc:	20004fdc 	.word	0x20004fdc
 8007ad0:	20004fd8 	.word	0x20004fd8
 8007ad4:	200054c0 	.word	0x200054c0
 8007ad8:	200054bc 	.word	0x200054bc

08007adc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ae2:	4b28      	ldr	r3, [pc, #160]	@ (8007b84 <vTaskSwitchContext+0xa8>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d003      	beq.n	8007af2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007aea:	4b27      	ldr	r3, [pc, #156]	@ (8007b88 <vTaskSwitchContext+0xac>)
 8007aec:	2201      	movs	r2, #1
 8007aee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007af0:	e042      	b.n	8007b78 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007af2:	4b25      	ldr	r3, [pc, #148]	@ (8007b88 <vTaskSwitchContext+0xac>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af8:	4b24      	ldr	r3, [pc, #144]	@ (8007b8c <vTaskSwitchContext+0xb0>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	60fb      	str	r3, [r7, #12]
 8007afe:	e011      	b.n	8007b24 <vTaskSwitchContext+0x48>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10b      	bne.n	8007b1e <vTaskSwitchContext+0x42>
	__asm volatile
 8007b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	607b      	str	r3, [r7, #4]
}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop
 8007b1c:	e7fd      	b.n	8007b1a <vTaskSwitchContext+0x3e>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	491a      	ldr	r1, [pc, #104]	@ (8007b90 <vTaskSwitchContext+0xb4>)
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	440b      	add	r3, r1
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d0e3      	beq.n	8007b00 <vTaskSwitchContext+0x24>
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4a13      	ldr	r2, [pc, #76]	@ (8007b90 <vTaskSwitchContext+0xb4>)
 8007b44:	4413      	add	r3, r2
 8007b46:	60bb      	str	r3, [r7, #8]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	3308      	adds	r3, #8
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d104      	bne.n	8007b68 <vTaskSwitchContext+0x8c>
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	605a      	str	r2, [r3, #4]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	4a09      	ldr	r2, [pc, #36]	@ (8007b94 <vTaskSwitchContext+0xb8>)
 8007b70:	6013      	str	r3, [r2, #0]
 8007b72:	4a06      	ldr	r2, [pc, #24]	@ (8007b8c <vTaskSwitchContext+0xb0>)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6013      	str	r3, [r2, #0]
}
 8007b78:	bf00      	nop
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	200054d4 	.word	0x200054d4
 8007b88:	200054c0 	.word	0x200054c0
 8007b8c:	200054b4 	.word	0x200054b4
 8007b90:	20004fdc 	.word	0x20004fdc
 8007b94:	20004fd8 	.word	0x20004fd8

08007b98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10b      	bne.n	8007bc0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	60fb      	str	r3, [r7, #12]
}
 8007bba:	bf00      	nop
 8007bbc:	bf00      	nop
 8007bbe:	e7fd      	b.n	8007bbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bc0:	4b07      	ldr	r3, [pc, #28]	@ (8007be0 <vTaskPlaceOnEventList+0x48>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3318      	adds	r3, #24
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7fe fe70 	bl	80068ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bce:	2101      	movs	r1, #1
 8007bd0:	6838      	ldr	r0, [r7, #0]
 8007bd2:	f000 faa9 	bl	8008128 <prvAddCurrentTaskToDelayedList>
}
 8007bd6:	bf00      	nop
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	20004fd8 	.word	0x20004fd8

08007be4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10b      	bne.n	8007c0e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	617b      	str	r3, [r7, #20]
}
 8007c08:	bf00      	nop
 8007c0a:	bf00      	nop
 8007c0c:	e7fd      	b.n	8007c0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c38 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3318      	adds	r3, #24
 8007c14:	4619      	mov	r1, r3
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7fe fe25 	bl	8006866 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007c22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	68b8      	ldr	r0, [r7, #8]
 8007c2c:	f000 fa7c 	bl	8008128 <prvAddCurrentTaskToDelayedList>
	}
 8007c30:	bf00      	nop
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	20004fd8 	.word	0x20004fd8

08007c3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10b      	bne.n	8007c6a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	60fb      	str	r3, [r7, #12]
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	e7fd      	b.n	8007c66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	3318      	adds	r3, #24
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe fe56 	bl	8006920 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c74:	4b1d      	ldr	r3, [pc, #116]	@ (8007cec <xTaskRemoveFromEventList+0xb0>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d11d      	bne.n	8007cb8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fe fe4d 	bl	8006920 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c8a:	4b19      	ldr	r3, [pc, #100]	@ (8007cf0 <xTaskRemoveFromEventList+0xb4>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d903      	bls.n	8007c9a <xTaskRemoveFromEventList+0x5e>
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c96:	4a16      	ldr	r2, [pc, #88]	@ (8007cf0 <xTaskRemoveFromEventList+0xb4>)
 8007c98:	6013      	str	r3, [r2, #0]
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4a13      	ldr	r2, [pc, #76]	@ (8007cf4 <xTaskRemoveFromEventList+0xb8>)
 8007ca8:	441a      	add	r2, r3
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	3304      	adds	r3, #4
 8007cae:	4619      	mov	r1, r3
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	f7fe fdd8 	bl	8006866 <vListInsertEnd>
 8007cb6:	e005      	b.n	8007cc4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	3318      	adds	r3, #24
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	480e      	ldr	r0, [pc, #56]	@ (8007cf8 <xTaskRemoveFromEventList+0xbc>)
 8007cc0:	f7fe fdd1 	bl	8006866 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8007cfc <xTaskRemoveFromEventList+0xc0>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d905      	bls.n	8007cde <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8007d00 <xTaskRemoveFromEventList+0xc4>)
 8007cd8:	2201      	movs	r2, #1
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	e001      	b.n	8007ce2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ce2:	697b      	ldr	r3, [r7, #20]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	200054d4 	.word	0x200054d4
 8007cf0:	200054b4 	.word	0x200054b4
 8007cf4:	20004fdc 	.word	0x20004fdc
 8007cf8:	2000546c 	.word	0x2000546c
 8007cfc:	20004fd8 	.word	0x20004fd8
 8007d00:	200054c0 	.word	0x200054c0

08007d04 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10b      	bne.n	8007d2a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	60fb      	str	r3, [r7, #12]
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	e7fd      	b.n	8007d26 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007d2a:	f000 fedd 	bl	8008ae8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d2e:	4b07      	ldr	r3, [pc, #28]	@ (8007d4c <vTaskSetTimeOutState+0x48>)
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007d36:	4b06      	ldr	r3, [pc, #24]	@ (8007d50 <vTaskSetTimeOutState+0x4c>)
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007d3e:	f000 ff05 	bl	8008b4c <vPortExitCritical>
}
 8007d42:	bf00      	nop
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	200054c4 	.word	0x200054c4
 8007d50:	200054b0 	.word	0x200054b0

08007d54 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d5c:	4b06      	ldr	r3, [pc, #24]	@ (8007d78 <vTaskInternalSetTimeOutState+0x24>)
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d64:	4b05      	ldr	r3, [pc, #20]	@ (8007d7c <vTaskInternalSetTimeOutState+0x28>)
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	605a      	str	r2, [r3, #4]
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	200054c4 	.word	0x200054c4
 8007d7c:	200054b0 	.word	0x200054b0

08007d80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b088      	sub	sp, #32
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10b      	bne.n	8007da8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	613b      	str	r3, [r7, #16]
}
 8007da2:	bf00      	nop
 8007da4:	bf00      	nop
 8007da6:	e7fd      	b.n	8007da4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10b      	bne.n	8007dc6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	60fb      	str	r3, [r7, #12]
}
 8007dc0:	bf00      	nop
 8007dc2:	bf00      	nop
 8007dc4:	e7fd      	b.n	8007dc2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007dc6:	f000 fe8f 	bl	8008ae8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dca:	4b1d      	ldr	r3, [pc, #116]	@ (8007e40 <xTaskCheckForTimeOut+0xc0>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007de2:	d102      	bne.n	8007dea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007de4:	2300      	movs	r3, #0
 8007de6:	61fb      	str	r3, [r7, #28]
 8007de8:	e023      	b.n	8007e32 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4b15      	ldr	r3, [pc, #84]	@ (8007e44 <xTaskCheckForTimeOut+0xc4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d007      	beq.n	8007e06 <xTaskCheckForTimeOut+0x86>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d302      	bcc.n	8007e06 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e00:	2301      	movs	r3, #1
 8007e02:	61fb      	str	r3, [r7, #28]
 8007e04:	e015      	b.n	8007e32 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d20b      	bcs.n	8007e28 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	1ad2      	subs	r2, r2, r3
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7ff ff99 	bl	8007d54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e22:	2300      	movs	r3, #0
 8007e24:	61fb      	str	r3, [r7, #28]
 8007e26:	e004      	b.n	8007e32 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e32:	f000 fe8b 	bl	8008b4c <vPortExitCritical>

	return xReturn;
 8007e36:	69fb      	ldr	r3, [r7, #28]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3720      	adds	r7, #32
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	200054b0 	.word	0x200054b0
 8007e44:	200054c4 	.word	0x200054c4

08007e48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e4c:	4b03      	ldr	r3, [pc, #12]	@ (8007e5c <vTaskMissedYield+0x14>)
 8007e4e:	2201      	movs	r2, #1
 8007e50:	601a      	str	r2, [r3, #0]
}
 8007e52:	bf00      	nop
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	200054c0 	.word	0x200054c0

08007e60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e68:	f000 f852 	bl	8007f10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e6c:	4b06      	ldr	r3, [pc, #24]	@ (8007e88 <prvIdleTask+0x28>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d9f9      	bls.n	8007e68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e74:	4b05      	ldr	r3, [pc, #20]	@ (8007e8c <prvIdleTask+0x2c>)
 8007e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e84:	e7f0      	b.n	8007e68 <prvIdleTask+0x8>
 8007e86:	bf00      	nop
 8007e88:	20004fdc 	.word	0x20004fdc
 8007e8c:	e000ed04 	.word	0xe000ed04

08007e90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e96:	2300      	movs	r3, #0
 8007e98:	607b      	str	r3, [r7, #4]
 8007e9a:	e00c      	b.n	8007eb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4a12      	ldr	r2, [pc, #72]	@ (8007ef0 <prvInitialiseTaskLists+0x60>)
 8007ea8:	4413      	add	r3, r2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fcae 	bl	800680c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	607b      	str	r3, [r7, #4]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b37      	cmp	r3, #55	@ 0x37
 8007eba:	d9ef      	bls.n	8007e9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ebc:	480d      	ldr	r0, [pc, #52]	@ (8007ef4 <prvInitialiseTaskLists+0x64>)
 8007ebe:	f7fe fca5 	bl	800680c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ec2:	480d      	ldr	r0, [pc, #52]	@ (8007ef8 <prvInitialiseTaskLists+0x68>)
 8007ec4:	f7fe fca2 	bl	800680c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ec8:	480c      	ldr	r0, [pc, #48]	@ (8007efc <prvInitialiseTaskLists+0x6c>)
 8007eca:	f7fe fc9f 	bl	800680c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ece:	480c      	ldr	r0, [pc, #48]	@ (8007f00 <prvInitialiseTaskLists+0x70>)
 8007ed0:	f7fe fc9c 	bl	800680c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ed4:	480b      	ldr	r0, [pc, #44]	@ (8007f04 <prvInitialiseTaskLists+0x74>)
 8007ed6:	f7fe fc99 	bl	800680c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007eda:	4b0b      	ldr	r3, [pc, #44]	@ (8007f08 <prvInitialiseTaskLists+0x78>)
 8007edc:	4a05      	ldr	r2, [pc, #20]	@ (8007ef4 <prvInitialiseTaskLists+0x64>)
 8007ede:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8007f0c <prvInitialiseTaskLists+0x7c>)
 8007ee2:	4a05      	ldr	r2, [pc, #20]	@ (8007ef8 <prvInitialiseTaskLists+0x68>)
 8007ee4:	601a      	str	r2, [r3, #0]
}
 8007ee6:	bf00      	nop
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20004fdc 	.word	0x20004fdc
 8007ef4:	2000543c 	.word	0x2000543c
 8007ef8:	20005450 	.word	0x20005450
 8007efc:	2000546c 	.word	0x2000546c
 8007f00:	20005480 	.word	0x20005480
 8007f04:	20005498 	.word	0x20005498
 8007f08:	20005464 	.word	0x20005464
 8007f0c:	20005468 	.word	0x20005468

08007f10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f16:	e019      	b.n	8007f4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f18:	f000 fde6 	bl	8008ae8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f1c:	4b10      	ldr	r3, [pc, #64]	@ (8007f60 <prvCheckTasksWaitingTermination+0x50>)
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3304      	adds	r3, #4
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fe fcf9 	bl	8006920 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f64 <prvCheckTasksWaitingTermination+0x54>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	4a0b      	ldr	r2, [pc, #44]	@ (8007f64 <prvCheckTasksWaitingTermination+0x54>)
 8007f36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f38:	4b0b      	ldr	r3, [pc, #44]	@ (8007f68 <prvCheckTasksWaitingTermination+0x58>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8007f68 <prvCheckTasksWaitingTermination+0x58>)
 8007f40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f42:	f000 fe03 	bl	8008b4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f810 	bl	8007f6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f4c:	4b06      	ldr	r3, [pc, #24]	@ (8007f68 <prvCheckTasksWaitingTermination+0x58>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e1      	bne.n	8007f18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20005480 	.word	0x20005480
 8007f64:	200054ac 	.word	0x200054ac
 8007f68:	20005494 	.word	0x20005494

08007f6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d108      	bne.n	8007f90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 ffa0 	bl	8008ec8 <vPortFree>
				vPortFree( pxTCB );
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 ff9d 	bl	8008ec8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f8e:	e019      	b.n	8007fc4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d103      	bne.n	8007fa2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 ff94 	bl	8008ec8 <vPortFree>
	}
 8007fa0:	e010      	b.n	8007fc4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d00b      	beq.n	8007fc4 <prvDeleteTCB+0x58>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	60fb      	str	r3, [r7, #12]
}
 8007fbe:	bf00      	nop
 8007fc0:	bf00      	nop
 8007fc2:	e7fd      	b.n	8007fc0 <prvDeleteTCB+0x54>
	}
 8007fc4:	bf00      	nop
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8008004 <prvResetNextTaskUnblockTime+0x38>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d104      	bne.n	8007fe6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8008008 <prvResetNextTaskUnblockTime+0x3c>)
 8007fde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007fe2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fe4:	e008      	b.n	8007ff8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fe6:	4b07      	ldr	r3, [pc, #28]	@ (8008004 <prvResetNextTaskUnblockTime+0x38>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	4a04      	ldr	r2, [pc, #16]	@ (8008008 <prvResetNextTaskUnblockTime+0x3c>)
 8007ff6:	6013      	str	r3, [r2, #0]
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	20005464 	.word	0x20005464
 8008008:	200054cc 	.word	0x200054cc

0800800c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008012:	4b0b      	ldr	r3, [pc, #44]	@ (8008040 <xTaskGetSchedulerState+0x34>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d102      	bne.n	8008020 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800801a:	2301      	movs	r3, #1
 800801c:	607b      	str	r3, [r7, #4]
 800801e:	e008      	b.n	8008032 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008020:	4b08      	ldr	r3, [pc, #32]	@ (8008044 <xTaskGetSchedulerState+0x38>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d102      	bne.n	800802e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008028:	2302      	movs	r3, #2
 800802a:	607b      	str	r3, [r7, #4]
 800802c:	e001      	b.n	8008032 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800802e:	2300      	movs	r3, #0
 8008030:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008032:	687b      	ldr	r3, [r7, #4]
	}
 8008034:	4618      	mov	r0, r3
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	200054b8 	.word	0x200054b8
 8008044:	200054d4 	.word	0x200054d4

08008048 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008054:	2300      	movs	r3, #0
 8008056:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d058      	beq.n	8008110 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800805e:	4b2f      	ldr	r3, [pc, #188]	@ (800811c <xTaskPriorityDisinherit+0xd4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	429a      	cmp	r2, r3
 8008066:	d00b      	beq.n	8008080 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	60fb      	str	r3, [r7, #12]
}
 800807a:	bf00      	nop
 800807c:	bf00      	nop
 800807e:	e7fd      	b.n	800807c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10b      	bne.n	80080a0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	60bb      	str	r3, [r7, #8]
}
 800809a:	bf00      	nop
 800809c:	bf00      	nop
 800809e:	e7fd      	b.n	800809c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080a4:	1e5a      	subs	r2, r3, #1
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d02c      	beq.n	8008110 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d128      	bne.n	8008110 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	3304      	adds	r3, #4
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe fc2c 	bl	8006920 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008120 <xTaskPriorityDisinherit+0xd8>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d903      	bls.n	80080f0 <xTaskPriorityDisinherit+0xa8>
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ec:	4a0c      	ldr	r2, [pc, #48]	@ (8008120 <xTaskPriorityDisinherit+0xd8>)
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f4:	4613      	mov	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4a09      	ldr	r2, [pc, #36]	@ (8008124 <xTaskPriorityDisinherit+0xdc>)
 80080fe:	441a      	add	r2, r3
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	3304      	adds	r3, #4
 8008104:	4619      	mov	r1, r3
 8008106:	4610      	mov	r0, r2
 8008108:	f7fe fbad 	bl	8006866 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800810c:	2301      	movs	r3, #1
 800810e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008110:	697b      	ldr	r3, [r7, #20]
	}
 8008112:	4618      	mov	r0, r3
 8008114:	3718      	adds	r7, #24
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	20004fd8 	.word	0x20004fd8
 8008120:	200054b4 	.word	0x200054b4
 8008124:	20004fdc 	.word	0x20004fdc

08008128 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008132:	4b21      	ldr	r3, [pc, #132]	@ (80081b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008138:	4b20      	ldr	r3, [pc, #128]	@ (80081bc <prvAddCurrentTaskToDelayedList+0x94>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3304      	adds	r3, #4
 800813e:	4618      	mov	r0, r3
 8008140:	f7fe fbee 	bl	8006920 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800814a:	d10a      	bne.n	8008162 <prvAddCurrentTaskToDelayedList+0x3a>
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d007      	beq.n	8008162 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008152:	4b1a      	ldr	r3, [pc, #104]	@ (80081bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3304      	adds	r3, #4
 8008158:	4619      	mov	r1, r3
 800815a:	4819      	ldr	r0, [pc, #100]	@ (80081c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800815c:	f7fe fb83 	bl	8006866 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008160:	e026      	b.n	80081b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4413      	add	r3, r2
 8008168:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800816a:	4b14      	ldr	r3, [pc, #80]	@ (80081bc <prvAddCurrentTaskToDelayedList+0x94>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	429a      	cmp	r2, r3
 8008178:	d209      	bcs.n	800818e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800817a:	4b12      	ldr	r3, [pc, #72]	@ (80081c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	4b0f      	ldr	r3, [pc, #60]	@ (80081bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3304      	adds	r3, #4
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	f7fe fb91 	bl	80068ae <vListInsert>
}
 800818c:	e010      	b.n	80081b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800818e:	4b0e      	ldr	r3, [pc, #56]	@ (80081c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	4b0a      	ldr	r3, [pc, #40]	@ (80081bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3304      	adds	r3, #4
 8008198:	4619      	mov	r1, r3
 800819a:	4610      	mov	r0, r2
 800819c:	f7fe fb87 	bl	80068ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081a0:	4b0a      	ldr	r3, [pc, #40]	@ (80081cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d202      	bcs.n	80081b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80081aa:	4a08      	ldr	r2, [pc, #32]	@ (80081cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	6013      	str	r3, [r2, #0]
}
 80081b0:	bf00      	nop
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	200054b0 	.word	0x200054b0
 80081bc:	20004fd8 	.word	0x20004fd8
 80081c0:	20005498 	.word	0x20005498
 80081c4:	20005468 	.word	0x20005468
 80081c8:	20005464 	.word	0x20005464
 80081cc:	200054cc 	.word	0x200054cc

080081d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08a      	sub	sp, #40	@ 0x28
 80081d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80081da:	f000 fb13 	bl	8008804 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80081de:	4b1d      	ldr	r3, [pc, #116]	@ (8008254 <xTimerCreateTimerTask+0x84>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d021      	beq.n	800822a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081ee:	1d3a      	adds	r2, r7, #4
 80081f0:	f107 0108 	add.w	r1, r7, #8
 80081f4:	f107 030c 	add.w	r3, r7, #12
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fe faed 	bl	80067d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081fe:	6879      	ldr	r1, [r7, #4]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	9202      	str	r2, [sp, #8]
 8008206:	9301      	str	r3, [sp, #4]
 8008208:	2302      	movs	r3, #2
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	2300      	movs	r3, #0
 800820e:	460a      	mov	r2, r1
 8008210:	4911      	ldr	r1, [pc, #68]	@ (8008258 <xTimerCreateTimerTask+0x88>)
 8008212:	4812      	ldr	r0, [pc, #72]	@ (800825c <xTimerCreateTimerTask+0x8c>)
 8008214:	f7ff f8a8 	bl	8007368 <xTaskCreateStatic>
 8008218:	4603      	mov	r3, r0
 800821a:	4a11      	ldr	r2, [pc, #68]	@ (8008260 <xTimerCreateTimerTask+0x90>)
 800821c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800821e:	4b10      	ldr	r3, [pc, #64]	@ (8008260 <xTimerCreateTimerTask+0x90>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008226:	2301      	movs	r3, #1
 8008228:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10b      	bne.n	8008248 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	613b      	str	r3, [r7, #16]
}
 8008242:	bf00      	nop
 8008244:	bf00      	nop
 8008246:	e7fd      	b.n	8008244 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008248:	697b      	ldr	r3, [r7, #20]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20005508 	.word	0x20005508
 8008258:	080175e4 	.word	0x080175e4
 800825c:	0800839d 	.word	0x0800839d
 8008260:	2000550c 	.word	0x2000550c

08008264 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08a      	sub	sp, #40	@ 0x28
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008272:	2300      	movs	r3, #0
 8008274:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10b      	bne.n	8008294 <xTimerGenericCommand+0x30>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	623b      	str	r3, [r7, #32]
}
 800828e:	bf00      	nop
 8008290:	bf00      	nop
 8008292:	e7fd      	b.n	8008290 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008294:	4b19      	ldr	r3, [pc, #100]	@ (80082fc <xTimerGenericCommand+0x98>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d02a      	beq.n	80082f2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2b05      	cmp	r3, #5
 80082ac:	dc18      	bgt.n	80082e0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80082ae:	f7ff fead 	bl	800800c <xTaskGetSchedulerState>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d109      	bne.n	80082cc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80082b8:	4b10      	ldr	r3, [pc, #64]	@ (80082fc <xTimerGenericCommand+0x98>)
 80082ba:	6818      	ldr	r0, [r3, #0]
 80082bc:	f107 0110 	add.w	r1, r7, #16
 80082c0:	2300      	movs	r3, #0
 80082c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082c4:	f7fe fc60 	bl	8006b88 <xQueueGenericSend>
 80082c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80082ca:	e012      	b.n	80082f2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80082cc:	4b0b      	ldr	r3, [pc, #44]	@ (80082fc <xTimerGenericCommand+0x98>)
 80082ce:	6818      	ldr	r0, [r3, #0]
 80082d0:	f107 0110 	add.w	r1, r7, #16
 80082d4:	2300      	movs	r3, #0
 80082d6:	2200      	movs	r2, #0
 80082d8:	f7fe fc56 	bl	8006b88 <xQueueGenericSend>
 80082dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80082de:	e008      	b.n	80082f2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082e0:	4b06      	ldr	r3, [pc, #24]	@ (80082fc <xTimerGenericCommand+0x98>)
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	f107 0110 	add.w	r1, r7, #16
 80082e8:	2300      	movs	r3, #0
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	f7fe fd4e 	bl	8006d8c <xQueueGenericSendFromISR>
 80082f0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80082f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3728      	adds	r7, #40	@ 0x28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20005508 	.word	0x20005508

08008300 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b088      	sub	sp, #32
 8008304:	af02      	add	r7, sp, #8
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800830a:	4b23      	ldr	r3, [pc, #140]	@ (8008398 <prvProcessExpiredTimer+0x98>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	3304      	adds	r3, #4
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe fb01 	bl	8006920 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008324:	f003 0304 	and.w	r3, r3, #4
 8008328:	2b00      	cmp	r3, #0
 800832a:	d023      	beq.n	8008374 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	699a      	ldr	r2, [r3, #24]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	18d1      	adds	r1, r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	6978      	ldr	r0, [r7, #20]
 800833a:	f000 f8d5 	bl	80084e8 <prvInsertTimerInActiveList>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d020      	beq.n	8008386 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008344:	2300      	movs	r3, #0
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	2300      	movs	r3, #0
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	2100      	movs	r1, #0
 800834e:	6978      	ldr	r0, [r7, #20]
 8008350:	f7ff ff88 	bl	8008264 <xTimerGenericCommand>
 8008354:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d114      	bne.n	8008386 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	60fb      	str	r3, [r7, #12]
}
 800836e:	bf00      	nop
 8008370:	bf00      	nop
 8008372:	e7fd      	b.n	8008370 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800837a:	f023 0301 	bic.w	r3, r3, #1
 800837e:	b2da      	uxtb	r2, r3
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	6978      	ldr	r0, [r7, #20]
 800838c:	4798      	blx	r3
}
 800838e:	bf00      	nop
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20005500 	.word	0x20005500

0800839c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083a4:	f107 0308 	add.w	r3, r7, #8
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 f859 	bl	8008460 <prvGetNextExpireTime>
 80083ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4619      	mov	r1, r3
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 f805 	bl	80083c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80083ba:	f000 f8d7 	bl	800856c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083be:	bf00      	nop
 80083c0:	e7f0      	b.n	80083a4 <prvTimerTask+0x8>
	...

080083c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80083ce:	f7ff fa0f 	bl	80077f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083d2:	f107 0308 	add.w	r3, r7, #8
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 f866 	bl	80084a8 <prvSampleTimeNow>
 80083dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d130      	bne.n	8008446 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10a      	bne.n	8008400 <prvProcessTimerOrBlockTask+0x3c>
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d806      	bhi.n	8008400 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80083f2:	f7ff fa0b 	bl	800780c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80083f6:	68f9      	ldr	r1, [r7, #12]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff ff81 	bl	8008300 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80083fe:	e024      	b.n	800844a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d008      	beq.n	8008418 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008406:	4b13      	ldr	r3, [pc, #76]	@ (8008454 <prvProcessTimerOrBlockTask+0x90>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <prvProcessTimerOrBlockTask+0x50>
 8008410:	2301      	movs	r3, #1
 8008412:	e000      	b.n	8008416 <prvProcessTimerOrBlockTask+0x52>
 8008414:	2300      	movs	r3, #0
 8008416:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008418:	4b0f      	ldr	r3, [pc, #60]	@ (8008458 <prvProcessTimerOrBlockTask+0x94>)
 800841a:	6818      	ldr	r0, [r3, #0]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	4619      	mov	r1, r3
 8008426:	f7fe ff6b 	bl	8007300 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800842a:	f7ff f9ef 	bl	800780c <xTaskResumeAll>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10a      	bne.n	800844a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008434:	4b09      	ldr	r3, [pc, #36]	@ (800845c <prvProcessTimerOrBlockTask+0x98>)
 8008436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	f3bf 8f6f 	isb	sy
}
 8008444:	e001      	b.n	800844a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008446:	f7ff f9e1 	bl	800780c <xTaskResumeAll>
}
 800844a:	bf00      	nop
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20005504 	.word	0x20005504
 8008458:	20005508 	.word	0x20005508
 800845c:	e000ed04 	.word	0xe000ed04

08008460 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008468:	4b0e      	ldr	r3, [pc, #56]	@ (80084a4 <prvGetNextExpireTime+0x44>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <prvGetNextExpireTime+0x16>
 8008472:	2201      	movs	r2, #1
 8008474:	e000      	b.n	8008478 <prvGetNextExpireTime+0x18>
 8008476:	2200      	movs	r2, #0
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d105      	bne.n	8008490 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008484:	4b07      	ldr	r3, [pc, #28]	@ (80084a4 <prvGetNextExpireTime+0x44>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	60fb      	str	r3, [r7, #12]
 800848e:	e001      	b.n	8008494 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008490:	2300      	movs	r3, #0
 8008492:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008494:	68fb      	ldr	r3, [r7, #12]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	20005500 	.word	0x20005500

080084a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80084b0:	f7ff fa4a 	bl	8007948 <xTaskGetTickCount>
 80084b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80084b6:	4b0b      	ldr	r3, [pc, #44]	@ (80084e4 <prvSampleTimeNow+0x3c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d205      	bcs.n	80084cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80084c0:	f000 f93a 	bl	8008738 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	e002      	b.n	80084d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80084d2:	4a04      	ldr	r2, [pc, #16]	@ (80084e4 <prvSampleTimeNow+0x3c>)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80084d8:	68fb      	ldr	r3, [r7, #12]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20005510 	.word	0x20005510

080084e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
 80084f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	429a      	cmp	r2, r3
 800850c:	d812      	bhi.n	8008534 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	1ad2      	subs	r2, r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	429a      	cmp	r2, r3
 800851a:	d302      	bcc.n	8008522 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800851c:	2301      	movs	r3, #1
 800851e:	617b      	str	r3, [r7, #20]
 8008520:	e01b      	b.n	800855a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008522:	4b10      	ldr	r3, [pc, #64]	@ (8008564 <prvInsertTimerInActiveList+0x7c>)
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3304      	adds	r3, #4
 800852a:	4619      	mov	r1, r3
 800852c:	4610      	mov	r0, r2
 800852e:	f7fe f9be 	bl	80068ae <vListInsert>
 8008532:	e012      	b.n	800855a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d206      	bcs.n	800854a <prvInsertTimerInActiveList+0x62>
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d302      	bcc.n	800854a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008544:	2301      	movs	r3, #1
 8008546:	617b      	str	r3, [r7, #20]
 8008548:	e007      	b.n	800855a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800854a:	4b07      	ldr	r3, [pc, #28]	@ (8008568 <prvInsertTimerInActiveList+0x80>)
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3304      	adds	r3, #4
 8008552:	4619      	mov	r1, r3
 8008554:	4610      	mov	r0, r2
 8008556:	f7fe f9aa 	bl	80068ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800855a:	697b      	ldr	r3, [r7, #20]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20005504 	.word	0x20005504
 8008568:	20005500 	.word	0x20005500

0800856c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08e      	sub	sp, #56	@ 0x38
 8008570:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008572:	e0ce      	b.n	8008712 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	da19      	bge.n	80085ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800857a:	1d3b      	adds	r3, r7, #4
 800857c:	3304      	adds	r3, #4
 800857e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10b      	bne.n	800859e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	61fb      	str	r3, [r7, #28]
}
 8008598:	bf00      	nop
 800859a:	bf00      	nop
 800859c:	e7fd      	b.n	800859a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800859e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085a4:	6850      	ldr	r0, [r2, #4]
 80085a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085a8:	6892      	ldr	r2, [r2, #8]
 80085aa:	4611      	mov	r1, r2
 80085ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f2c0 80ae 	blt.w	8008712 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80085ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d004      	beq.n	80085cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c4:	3304      	adds	r3, #4
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe f9aa 	bl	8006920 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085cc:	463b      	mov	r3, r7
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff ff6a 	bl	80084a8 <prvSampleTimeNow>
 80085d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b09      	cmp	r3, #9
 80085da:	f200 8097 	bhi.w	800870c <prvProcessReceivedCommands+0x1a0>
 80085de:	a201      	add	r2, pc, #4	@ (adr r2, 80085e4 <prvProcessReceivedCommands+0x78>)
 80085e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e4:	0800860d 	.word	0x0800860d
 80085e8:	0800860d 	.word	0x0800860d
 80085ec:	0800860d 	.word	0x0800860d
 80085f0:	08008683 	.word	0x08008683
 80085f4:	08008697 	.word	0x08008697
 80085f8:	080086e3 	.word	0x080086e3
 80085fc:	0800860d 	.word	0x0800860d
 8008600:	0800860d 	.word	0x0800860d
 8008604:	08008683 	.word	0x08008683
 8008608:	08008697 	.word	0x08008697
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800860c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008612:	f043 0301 	orr.w	r3, r3, #1
 8008616:	b2da      	uxtb	r2, r3
 8008618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	18d1      	adds	r1, r2, r3
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800862a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800862c:	f7ff ff5c 	bl	80084e8 <prvInsertTimerInActiveList>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d06c      	beq.n	8008710 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800863c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800863e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008640:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008644:	f003 0304 	and.w	r3, r3, #4
 8008648:	2b00      	cmp	r3, #0
 800864a:	d061      	beq.n	8008710 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	441a      	add	r2, r3
 8008654:	2300      	movs	r3, #0
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	2300      	movs	r3, #0
 800865a:	2100      	movs	r1, #0
 800865c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800865e:	f7ff fe01 	bl	8008264 <xTimerGenericCommand>
 8008662:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d152      	bne.n	8008710 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	61bb      	str	r3, [r7, #24]
}
 800867c:	bf00      	nop
 800867e:	bf00      	nop
 8008680:	e7fd      	b.n	800867e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008688:	f023 0301 	bic.w	r3, r3, #1
 800868c:	b2da      	uxtb	r2, r3
 800868e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008690:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008694:	e03d      	b.n	8008712 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008698:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800869c:	f043 0301 	orr.w	r3, r3, #1
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80086ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10b      	bne.n	80086ce <prvProcessReceivedCommands+0x162>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	617b      	str	r3, [r7, #20]
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	e7fd      	b.n	80086ca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80086ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d0:	699a      	ldr	r2, [r3, #24]
 80086d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d4:	18d1      	adds	r1, r2, r3
 80086d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086dc:	f7ff ff04 	bl	80084e8 <prvInsertTimerInActiveList>
					break;
 80086e0:	e017      	b.n	8008712 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80086e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086e8:	f003 0302 	and.w	r3, r3, #2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d103      	bne.n	80086f8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80086f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086f2:	f000 fbe9 	bl	8008ec8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80086f6:	e00c      	b.n	8008712 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086fe:	f023 0301 	bic.w	r3, r3, #1
 8008702:	b2da      	uxtb	r2, r3
 8008704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008706:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800870a:	e002      	b.n	8008712 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800870c:	bf00      	nop
 800870e:	e000      	b.n	8008712 <prvProcessReceivedCommands+0x1a6>
					break;
 8008710:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008712:	4b08      	ldr	r3, [pc, #32]	@ (8008734 <prvProcessReceivedCommands+0x1c8>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	1d39      	adds	r1, r7, #4
 8008718:	2200      	movs	r2, #0
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe fbd4 	bl	8006ec8 <xQueueReceive>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	f47f af26 	bne.w	8008574 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008728:	bf00      	nop
 800872a:	bf00      	nop
 800872c:	3730      	adds	r7, #48	@ 0x30
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	20005508 	.word	0x20005508

08008738 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b088      	sub	sp, #32
 800873c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800873e:	e049      	b.n	80087d4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008740:	4b2e      	ldr	r3, [pc, #184]	@ (80087fc <prvSwitchTimerLists+0xc4>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800874a:	4b2c      	ldr	r3, [pc, #176]	@ (80087fc <prvSwitchTimerLists+0xc4>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	3304      	adds	r3, #4
 8008758:	4618      	mov	r0, r3
 800875a:	f7fe f8e1 	bl	8006920 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	d02f      	beq.n	80087d4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	4413      	add	r3, r2
 800877c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	429a      	cmp	r2, r3
 8008784:	d90e      	bls.n	80087a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008792:	4b1a      	ldr	r3, [pc, #104]	@ (80087fc <prvSwitchTimerLists+0xc4>)
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3304      	adds	r3, #4
 800879a:	4619      	mov	r1, r3
 800879c:	4610      	mov	r0, r2
 800879e:	f7fe f886 	bl	80068ae <vListInsert>
 80087a2:	e017      	b.n	80087d4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087a4:	2300      	movs	r3, #0
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	2300      	movs	r3, #0
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	2100      	movs	r1, #0
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f7ff fd58 	bl	8008264 <xTimerGenericCommand>
 80087b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10b      	bne.n	80087d4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	603b      	str	r3, [r7, #0]
}
 80087ce:	bf00      	nop
 80087d0:	bf00      	nop
 80087d2:	e7fd      	b.n	80087d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087d4:	4b09      	ldr	r3, [pc, #36]	@ (80087fc <prvSwitchTimerLists+0xc4>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1b0      	bne.n	8008740 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80087de:	4b07      	ldr	r3, [pc, #28]	@ (80087fc <prvSwitchTimerLists+0xc4>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80087e4:	4b06      	ldr	r3, [pc, #24]	@ (8008800 <prvSwitchTimerLists+0xc8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a04      	ldr	r2, [pc, #16]	@ (80087fc <prvSwitchTimerLists+0xc4>)
 80087ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80087ec:	4a04      	ldr	r2, [pc, #16]	@ (8008800 <prvSwitchTimerLists+0xc8>)
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	6013      	str	r3, [r2, #0]
}
 80087f2:	bf00      	nop
 80087f4:	3718      	adds	r7, #24
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20005500 	.word	0x20005500
 8008800:	20005504 	.word	0x20005504

08008804 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800880a:	f000 f96d 	bl	8008ae8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800880e:	4b15      	ldr	r3, [pc, #84]	@ (8008864 <prvCheckForValidListAndQueue+0x60>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d120      	bne.n	8008858 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008816:	4814      	ldr	r0, [pc, #80]	@ (8008868 <prvCheckForValidListAndQueue+0x64>)
 8008818:	f7fd fff8 	bl	800680c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800881c:	4813      	ldr	r0, [pc, #76]	@ (800886c <prvCheckForValidListAndQueue+0x68>)
 800881e:	f7fd fff5 	bl	800680c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008822:	4b13      	ldr	r3, [pc, #76]	@ (8008870 <prvCheckForValidListAndQueue+0x6c>)
 8008824:	4a10      	ldr	r2, [pc, #64]	@ (8008868 <prvCheckForValidListAndQueue+0x64>)
 8008826:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008828:	4b12      	ldr	r3, [pc, #72]	@ (8008874 <prvCheckForValidListAndQueue+0x70>)
 800882a:	4a10      	ldr	r2, [pc, #64]	@ (800886c <prvCheckForValidListAndQueue+0x68>)
 800882c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800882e:	2300      	movs	r3, #0
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	4b11      	ldr	r3, [pc, #68]	@ (8008878 <prvCheckForValidListAndQueue+0x74>)
 8008834:	4a11      	ldr	r2, [pc, #68]	@ (800887c <prvCheckForValidListAndQueue+0x78>)
 8008836:	2110      	movs	r1, #16
 8008838:	200a      	movs	r0, #10
 800883a:	f7fe f905 	bl	8006a48 <xQueueGenericCreateStatic>
 800883e:	4603      	mov	r3, r0
 8008840:	4a08      	ldr	r2, [pc, #32]	@ (8008864 <prvCheckForValidListAndQueue+0x60>)
 8008842:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008844:	4b07      	ldr	r3, [pc, #28]	@ (8008864 <prvCheckForValidListAndQueue+0x60>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d005      	beq.n	8008858 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800884c:	4b05      	ldr	r3, [pc, #20]	@ (8008864 <prvCheckForValidListAndQueue+0x60>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	490b      	ldr	r1, [pc, #44]	@ (8008880 <prvCheckForValidListAndQueue+0x7c>)
 8008852:	4618      	mov	r0, r3
 8008854:	f7fe fd2a 	bl	80072ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008858:	f000 f978 	bl	8008b4c <vPortExitCritical>
}
 800885c:	bf00      	nop
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20005508 	.word	0x20005508
 8008868:	200054d8 	.word	0x200054d8
 800886c:	200054ec 	.word	0x200054ec
 8008870:	20005500 	.word	0x20005500
 8008874:	20005504 	.word	0x20005504
 8008878:	200055b4 	.word	0x200055b4
 800887c:	20005514 	.word	0x20005514
 8008880:	080175ec 	.word	0x080175ec

08008884 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3b04      	subs	r3, #4
 8008894:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800889c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3b04      	subs	r3, #4
 80088a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f023 0201 	bic.w	r2, r3, #1
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3b04      	subs	r3, #4
 80088b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088b4:	4a0c      	ldr	r2, [pc, #48]	@ (80088e8 <pxPortInitialiseStack+0x64>)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3b14      	subs	r3, #20
 80088be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3b04      	subs	r3, #4
 80088ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f06f 0202 	mvn.w	r2, #2
 80088d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	3b20      	subs	r3, #32
 80088d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088da:	68fb      	ldr	r3, [r7, #12]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	080088ed 	.word	0x080088ed

080088ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088f6:	4b13      	ldr	r3, [pc, #76]	@ (8008944 <prvTaskExitError+0x58>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088fe:	d00b      	beq.n	8008918 <prvTaskExitError+0x2c>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	60fb      	str	r3, [r7, #12]
}
 8008912:	bf00      	nop
 8008914:	bf00      	nop
 8008916:	e7fd      	b.n	8008914 <prvTaskExitError+0x28>
	__asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	60bb      	str	r3, [r7, #8]
}
 800892a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800892c:	bf00      	nop
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0fc      	beq.n	800892e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008934:	bf00      	nop
 8008936:	bf00      	nop
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	20000010 	.word	0x20000010
	...

08008950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008950:	4b07      	ldr	r3, [pc, #28]	@ (8008970 <pxCurrentTCBConst2>)
 8008952:	6819      	ldr	r1, [r3, #0]
 8008954:	6808      	ldr	r0, [r1, #0]
 8008956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895a:	f380 8809 	msr	PSP, r0
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f04f 0000 	mov.w	r0, #0
 8008966:	f380 8811 	msr	BASEPRI, r0
 800896a:	4770      	bx	lr
 800896c:	f3af 8000 	nop.w

08008970 <pxCurrentTCBConst2>:
 8008970:	20004fd8 	.word	0x20004fd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop

08008978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008978:	4808      	ldr	r0, [pc, #32]	@ (800899c <prvPortStartFirstTask+0x24>)
 800897a:	6800      	ldr	r0, [r0, #0]
 800897c:	6800      	ldr	r0, [r0, #0]
 800897e:	f380 8808 	msr	MSP, r0
 8008982:	f04f 0000 	mov.w	r0, #0
 8008986:	f380 8814 	msr	CONTROL, r0
 800898a:	b662      	cpsie	i
 800898c:	b661      	cpsie	f
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	df00      	svc	0
 8008998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800899a:	bf00      	nop
 800899c:	e000ed08 	.word	0xe000ed08

080089a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80089a6:	4b47      	ldr	r3, [pc, #284]	@ (8008ac4 <xPortStartScheduler+0x124>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a47      	ldr	r2, [pc, #284]	@ (8008ac8 <xPortStartScheduler+0x128>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d10b      	bne.n	80089c8 <xPortStartScheduler+0x28>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	613b      	str	r3, [r7, #16]
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	e7fd      	b.n	80089c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089c8:	4b3e      	ldr	r3, [pc, #248]	@ (8008ac4 <xPortStartScheduler+0x124>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a3f      	ldr	r2, [pc, #252]	@ (8008acc <xPortStartScheduler+0x12c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d10b      	bne.n	80089ea <xPortStartScheduler+0x4a>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	60fb      	str	r3, [r7, #12]
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
 80089e8:	e7fd      	b.n	80089e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089ea:	4b39      	ldr	r3, [pc, #228]	@ (8008ad0 <xPortStartScheduler+0x130>)
 80089ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	22ff      	movs	r2, #255	@ 0xff
 80089fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a04:	78fb      	ldrb	r3, [r7, #3]
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	4b31      	ldr	r3, [pc, #196]	@ (8008ad4 <xPortStartScheduler+0x134>)
 8008a10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a12:	4b31      	ldr	r3, [pc, #196]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a14:	2207      	movs	r2, #7
 8008a16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a18:	e009      	b.n	8008a2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	4a2d      	ldr	r2, [pc, #180]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a24:	78fb      	ldrb	r3, [r7, #3]
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	005b      	lsls	r3, r3, #1
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a2e:	78fb      	ldrb	r3, [r7, #3]
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a36:	2b80      	cmp	r3, #128	@ 0x80
 8008a38:	d0ef      	beq.n	8008a1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a3a:	4b27      	ldr	r3, [pc, #156]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f1c3 0307 	rsb	r3, r3, #7
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d00b      	beq.n	8008a5e <xPortStartScheduler+0xbe>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	60bb      	str	r3, [r7, #8]
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	e7fd      	b.n	8008a5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	021b      	lsls	r3, r3, #8
 8008a64:	4a1c      	ldr	r2, [pc, #112]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a68:	4b1b      	ldr	r3, [pc, #108]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a70:	4a19      	ldr	r2, [pc, #100]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a7c:	4b17      	ldr	r3, [pc, #92]	@ (8008adc <xPortStartScheduler+0x13c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a16      	ldr	r2, [pc, #88]	@ (8008adc <xPortStartScheduler+0x13c>)
 8008a82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a88:	4b14      	ldr	r3, [pc, #80]	@ (8008adc <xPortStartScheduler+0x13c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a13      	ldr	r2, [pc, #76]	@ (8008adc <xPortStartScheduler+0x13c>)
 8008a8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008a92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a94:	f000 f8da 	bl	8008c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a98:	4b11      	ldr	r3, [pc, #68]	@ (8008ae0 <xPortStartScheduler+0x140>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a9e:	f000 f8f9 	bl	8008c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008aa2:	4b10      	ldr	r3, [pc, #64]	@ (8008ae4 <xPortStartScheduler+0x144>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8008ae4 <xPortStartScheduler+0x144>)
 8008aa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008aac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008aae:	f7ff ff63 	bl	8008978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ab2:	f7ff f813 	bl	8007adc <vTaskSwitchContext>
	prvTaskExitError();
 8008ab6:	f7ff ff19 	bl	80088ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3718      	adds	r7, #24
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	e000ed00 	.word	0xe000ed00
 8008ac8:	410fc271 	.word	0x410fc271
 8008acc:	410fc270 	.word	0x410fc270
 8008ad0:	e000e400 	.word	0xe000e400
 8008ad4:	20005604 	.word	0x20005604
 8008ad8:	20005608 	.word	0x20005608
 8008adc:	e000ed20 	.word	0xe000ed20
 8008ae0:	20000010 	.word	0x20000010
 8008ae4:	e000ef34 	.word	0xe000ef34

08008ae8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	607b      	str	r3, [r7, #4]
}
 8008b00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b02:	4b10      	ldr	r3, [pc, #64]	@ (8008b44 <vPortEnterCritical+0x5c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3301      	adds	r3, #1
 8008b08:	4a0e      	ldr	r2, [pc, #56]	@ (8008b44 <vPortEnterCritical+0x5c>)
 8008b0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008b44 <vPortEnterCritical+0x5c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d110      	bne.n	8008b36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b14:	4b0c      	ldr	r3, [pc, #48]	@ (8008b48 <vPortEnterCritical+0x60>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00b      	beq.n	8008b36 <vPortEnterCritical+0x4e>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	603b      	str	r3, [r7, #0]
}
 8008b30:	bf00      	nop
 8008b32:	bf00      	nop
 8008b34:	e7fd      	b.n	8008b32 <vPortEnterCritical+0x4a>
	}
}
 8008b36:	bf00      	nop
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	20000010 	.word	0x20000010
 8008b48:	e000ed04 	.word	0xe000ed04

08008b4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b52:	4b12      	ldr	r3, [pc, #72]	@ (8008b9c <vPortExitCritical+0x50>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10b      	bne.n	8008b72 <vPortExitCritical+0x26>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	607b      	str	r3, [r7, #4]
}
 8008b6c:	bf00      	nop
 8008b6e:	bf00      	nop
 8008b70:	e7fd      	b.n	8008b6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b72:	4b0a      	ldr	r3, [pc, #40]	@ (8008b9c <vPortExitCritical+0x50>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3b01      	subs	r3, #1
 8008b78:	4a08      	ldr	r2, [pc, #32]	@ (8008b9c <vPortExitCritical+0x50>)
 8008b7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b7c:	4b07      	ldr	r3, [pc, #28]	@ (8008b9c <vPortExitCritical+0x50>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d105      	bne.n	8008b90 <vPortExitCritical+0x44>
 8008b84:	2300      	movs	r3, #0
 8008b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	f383 8811 	msr	BASEPRI, r3
}
 8008b8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	20000010 	.word	0x20000010

08008ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ba0:	f3ef 8009 	mrs	r0, PSP
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	4b15      	ldr	r3, [pc, #84]	@ (8008c00 <pxCurrentTCBConst>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	f01e 0f10 	tst.w	lr, #16
 8008bb0:	bf08      	it	eq
 8008bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bba:	6010      	str	r0, [r2, #0]
 8008bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008bc4:	f380 8811 	msr	BASEPRI, r0
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f7fe ff84 	bl	8007adc <vTaskSwitchContext>
 8008bd4:	f04f 0000 	mov.w	r0, #0
 8008bd8:	f380 8811 	msr	BASEPRI, r0
 8008bdc:	bc09      	pop	{r0, r3}
 8008bde:	6819      	ldr	r1, [r3, #0]
 8008be0:	6808      	ldr	r0, [r1, #0]
 8008be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be6:	f01e 0f10 	tst.w	lr, #16
 8008bea:	bf08      	it	eq
 8008bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008bf0:	f380 8809 	msr	PSP, r0
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	f3af 8000 	nop.w

08008c00 <pxCurrentTCBConst>:
 8008c00:	20004fd8 	.word	0x20004fd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c04:	bf00      	nop
 8008c06:	bf00      	nop

08008c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	607b      	str	r3, [r7, #4]
}
 8008c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c22:	f7fe fea1 	bl	8007968 <xTaskIncrementTick>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c2c:	4b06      	ldr	r3, [pc, #24]	@ (8008c48 <xPortSysTickHandler+0x40>)
 8008c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	2300      	movs	r3, #0
 8008c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	f383 8811 	msr	BASEPRI, r3
}
 8008c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	e000ed04 	.word	0xe000ed04

08008c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c50:	4b0b      	ldr	r3, [pc, #44]	@ (8008c80 <vPortSetupTimerInterrupt+0x34>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c56:	4b0b      	ldr	r3, [pc, #44]	@ (8008c84 <vPortSetupTimerInterrupt+0x38>)
 8008c58:	2200      	movs	r2, #0
 8008c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c88 <vPortSetupTimerInterrupt+0x3c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a0a      	ldr	r2, [pc, #40]	@ (8008c8c <vPortSetupTimerInterrupt+0x40>)
 8008c62:	fba2 2303 	umull	r2, r3, r2, r3
 8008c66:	099b      	lsrs	r3, r3, #6
 8008c68:	4a09      	ldr	r2, [pc, #36]	@ (8008c90 <vPortSetupTimerInterrupt+0x44>)
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c6e:	4b04      	ldr	r3, [pc, #16]	@ (8008c80 <vPortSetupTimerInterrupt+0x34>)
 8008c70:	2207      	movs	r2, #7
 8008c72:	601a      	str	r2, [r3, #0]
}
 8008c74:	bf00      	nop
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	e000e010 	.word	0xe000e010
 8008c84:	e000e018 	.word	0xe000e018
 8008c88:	20000004 	.word	0x20000004
 8008c8c:	10624dd3 	.word	0x10624dd3
 8008c90:	e000e014 	.word	0xe000e014

08008c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008ca4 <vPortEnableVFP+0x10>
 8008c98:	6801      	ldr	r1, [r0, #0]
 8008c9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c9e:	6001      	str	r1, [r0, #0]
 8008ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ca2:	bf00      	nop
 8008ca4:	e000ed88 	.word	0xe000ed88

08008ca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cae:	f3ef 8305 	mrs	r3, IPSR
 8008cb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2b0f      	cmp	r3, #15
 8008cb8:	d915      	bls.n	8008ce6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cba:	4a18      	ldr	r2, [pc, #96]	@ (8008d1c <vPortValidateInterruptPriority+0x74>)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cc4:	4b16      	ldr	r3, [pc, #88]	@ (8008d20 <vPortValidateInterruptPriority+0x78>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	7afa      	ldrb	r2, [r7, #11]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d20b      	bcs.n	8008ce6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	607b      	str	r3, [r7, #4]
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	e7fd      	b.n	8008ce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8008d24 <vPortValidateInterruptPriority+0x7c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008cee:	4b0e      	ldr	r3, [pc, #56]	@ (8008d28 <vPortValidateInterruptPriority+0x80>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d90b      	bls.n	8008d0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	603b      	str	r3, [r7, #0]
}
 8008d08:	bf00      	nop
 8008d0a:	bf00      	nop
 8008d0c:	e7fd      	b.n	8008d0a <vPortValidateInterruptPriority+0x62>
	}
 8008d0e:	bf00      	nop
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	e000e3f0 	.word	0xe000e3f0
 8008d20:	20005604 	.word	0x20005604
 8008d24:	e000ed0c 	.word	0xe000ed0c
 8008d28:	20005608 	.word	0x20005608

08008d2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b08a      	sub	sp, #40	@ 0x28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d34:	2300      	movs	r3, #0
 8008d36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d38:	f7fe fd5a 	bl	80077f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8008eb0 <pvPortMalloc+0x184>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d44:	f000 f924 	bl	8008f90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d48:	4b5a      	ldr	r3, [pc, #360]	@ (8008eb4 <pvPortMalloc+0x188>)
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4013      	ands	r3, r2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f040 8095 	bne.w	8008e80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d01e      	beq.n	8008d9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008d5c:	2208      	movs	r2, #8
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4413      	add	r3, r2
 8008d62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f003 0307 	and.w	r3, r3, #7
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d015      	beq.n	8008d9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f023 0307 	bic.w	r3, r3, #7
 8008d74:	3308      	adds	r3, #8
 8008d76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f003 0307 	and.w	r3, r3, #7
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00b      	beq.n	8008d9a <pvPortMalloc+0x6e>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	617b      	str	r3, [r7, #20]
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop
 8008d98:	e7fd      	b.n	8008d96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d06f      	beq.n	8008e80 <pvPortMalloc+0x154>
 8008da0:	4b45      	ldr	r3, [pc, #276]	@ (8008eb8 <pvPortMalloc+0x18c>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d86a      	bhi.n	8008e80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008daa:	4b44      	ldr	r3, [pc, #272]	@ (8008ebc <pvPortMalloc+0x190>)
 8008dac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008dae:	4b43      	ldr	r3, [pc, #268]	@ (8008ebc <pvPortMalloc+0x190>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008db4:	e004      	b.n	8008dc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d903      	bls.n	8008dd2 <pvPortMalloc+0xa6>
 8008dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1f1      	bne.n	8008db6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008dd2:	4b37      	ldr	r3, [pc, #220]	@ (8008eb0 <pvPortMalloc+0x184>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d051      	beq.n	8008e80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2208      	movs	r2, #8
 8008de2:	4413      	add	r3, r2
 8008de4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df0:	685a      	ldr	r2, [r3, #4]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	1ad2      	subs	r2, r2, r3
 8008df6:	2308      	movs	r3, #8
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d920      	bls.n	8008e40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4413      	add	r3, r2
 8008e04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	f003 0307 	and.w	r3, r3, #7
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <pvPortMalloc+0xfc>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	613b      	str	r3, [r7, #16]
}
 8008e22:	bf00      	nop
 8008e24:	bf00      	nop
 8008e26:	e7fd      	b.n	8008e24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	1ad2      	subs	r2, r2, r3
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e3a:	69b8      	ldr	r0, [r7, #24]
 8008e3c:	f000 f90a 	bl	8009054 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e40:	4b1d      	ldr	r3, [pc, #116]	@ (8008eb8 <pvPortMalloc+0x18c>)
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8008eb8 <pvPortMalloc+0x18c>)
 8008e4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8008eb8 <pvPortMalloc+0x18c>)
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	4b1b      	ldr	r3, [pc, #108]	@ (8008ec0 <pvPortMalloc+0x194>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d203      	bcs.n	8008e62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e5a:	4b17      	ldr	r3, [pc, #92]	@ (8008eb8 <pvPortMalloc+0x18c>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a18      	ldr	r2, [pc, #96]	@ (8008ec0 <pvPortMalloc+0x194>)
 8008e60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	4b13      	ldr	r3, [pc, #76]	@ (8008eb4 <pvPortMalloc+0x188>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e72:	2200      	movs	r2, #0
 8008e74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e76:	4b13      	ldr	r3, [pc, #76]	@ (8008ec4 <pvPortMalloc+0x198>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	4a11      	ldr	r2, [pc, #68]	@ (8008ec4 <pvPortMalloc+0x198>)
 8008e7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e80:	f7fe fcc4 	bl	800780c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00b      	beq.n	8008ea6 <pvPortMalloc+0x17a>
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	60fb      	str	r3, [r7, #12]
}
 8008ea0:	bf00      	nop
 8008ea2:	bf00      	nop
 8008ea4:	e7fd      	b.n	8008ea2 <pvPortMalloc+0x176>
	return pvReturn;
 8008ea6:	69fb      	ldr	r3, [r7, #28]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3728      	adds	r7, #40	@ 0x28
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	20009214 	.word	0x20009214
 8008eb4:	20009228 	.word	0x20009228
 8008eb8:	20009218 	.word	0x20009218
 8008ebc:	2000920c 	.word	0x2000920c
 8008ec0:	2000921c 	.word	0x2000921c
 8008ec4:	20009220 	.word	0x20009220

08008ec8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d04f      	beq.n	8008f7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008eda:	2308      	movs	r3, #8
 8008edc:	425b      	negs	r3, r3
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	4b25      	ldr	r3, [pc, #148]	@ (8008f84 <vPortFree+0xbc>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10b      	bne.n	8008f0e <vPortFree+0x46>
	__asm volatile
 8008ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	60fb      	str	r3, [r7, #12]
}
 8008f08:	bf00      	nop
 8008f0a:	bf00      	nop
 8008f0c:	e7fd      	b.n	8008f0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00b      	beq.n	8008f2e <vPortFree+0x66>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	60bb      	str	r3, [r7, #8]
}
 8008f28:	bf00      	nop
 8008f2a:	bf00      	nop
 8008f2c:	e7fd      	b.n	8008f2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	4b14      	ldr	r3, [pc, #80]	@ (8008f84 <vPortFree+0xbc>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4013      	ands	r3, r2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d01e      	beq.n	8008f7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d11a      	bne.n	8008f7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	4b0e      	ldr	r3, [pc, #56]	@ (8008f84 <vPortFree+0xbc>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	43db      	mvns	r3, r3
 8008f4e:	401a      	ands	r2, r3
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f54:	f7fe fc4c 	bl	80077f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f88 <vPortFree+0xc0>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4413      	add	r3, r2
 8008f62:	4a09      	ldr	r2, [pc, #36]	@ (8008f88 <vPortFree+0xc0>)
 8008f64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f66:	6938      	ldr	r0, [r7, #16]
 8008f68:	f000 f874 	bl	8009054 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f6c:	4b07      	ldr	r3, [pc, #28]	@ (8008f8c <vPortFree+0xc4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3301      	adds	r3, #1
 8008f72:	4a06      	ldr	r2, [pc, #24]	@ (8008f8c <vPortFree+0xc4>)
 8008f74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f76:	f7fe fc49 	bl	800780c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f7a:	bf00      	nop
 8008f7c:	3718      	adds	r7, #24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20009228 	.word	0x20009228
 8008f88:	20009218 	.word	0x20009218
 8008f8c:	20009224 	.word	0x20009224

08008f90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008f9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f9c:	4b27      	ldr	r3, [pc, #156]	@ (800903c <prvHeapInit+0xac>)
 8008f9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f003 0307 	and.w	r3, r3, #7
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00c      	beq.n	8008fc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3307      	adds	r3, #7
 8008fae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f023 0307 	bic.w	r3, r3, #7
 8008fb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800903c <prvHeapInit+0xac>)
 8008fc0:	4413      	add	r3, r2
 8008fc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8009040 <prvHeapInit+0xb0>)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fce:	4b1c      	ldr	r3, [pc, #112]	@ (8009040 <prvHeapInit+0xb0>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	4413      	add	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fdc:	2208      	movs	r2, #8
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	1a9b      	subs	r3, r3, r2
 8008fe2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0307 	bic.w	r3, r3, #7
 8008fea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4a15      	ldr	r2, [pc, #84]	@ (8009044 <prvHeapInit+0xb4>)
 8008ff0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ff2:	4b14      	ldr	r3, [pc, #80]	@ (8009044 <prvHeapInit+0xb4>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ffa:	4b12      	ldr	r3, [pc, #72]	@ (8009044 <prvHeapInit+0xb4>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2200      	movs	r2, #0
 8009000:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	1ad2      	subs	r2, r2, r3
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009010:	4b0c      	ldr	r3, [pc, #48]	@ (8009044 <prvHeapInit+0xb4>)
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	4a0a      	ldr	r2, [pc, #40]	@ (8009048 <prvHeapInit+0xb8>)
 800901e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	4a09      	ldr	r2, [pc, #36]	@ (800904c <prvHeapInit+0xbc>)
 8009026:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009028:	4b09      	ldr	r3, [pc, #36]	@ (8009050 <prvHeapInit+0xc0>)
 800902a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800902e:	601a      	str	r2, [r3, #0]
}
 8009030:	bf00      	nop
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	2000560c 	.word	0x2000560c
 8009040:	2000920c 	.word	0x2000920c
 8009044:	20009214 	.word	0x20009214
 8009048:	2000921c 	.word	0x2000921c
 800904c:	20009218 	.word	0x20009218
 8009050:	20009228 	.word	0x20009228

08009054 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800905c:	4b28      	ldr	r3, [pc, #160]	@ (8009100 <prvInsertBlockIntoFreeList+0xac>)
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	e002      	b.n	8009068 <prvInsertBlockIntoFreeList+0x14>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	60fb      	str	r3, [r7, #12]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	429a      	cmp	r2, r3
 8009070:	d8f7      	bhi.n	8009062 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	4413      	add	r3, r2
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	429a      	cmp	r2, r3
 8009082:	d108      	bne.n	8009096 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	685a      	ldr	r2, [r3, #4]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	441a      	add	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	441a      	add	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d118      	bne.n	80090dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	4b15      	ldr	r3, [pc, #84]	@ (8009104 <prvInsertBlockIntoFreeList+0xb0>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d00d      	beq.n	80090d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	441a      	add	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	e008      	b.n	80090e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009104 <prvInsertBlockIntoFreeList+0xb0>)
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	601a      	str	r2, [r3, #0]
 80090da:	e003      	b.n	80090e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d002      	beq.n	80090f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090f2:	bf00      	nop
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	2000920c 	.word	0x2000920c
 8009104:	20009214 	.word	0x20009214

08009108 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8009108:	4b04      	ldr	r3, [pc, #16]	@ (800911c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	b10a      	cbz	r2, 8009112 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800910e:	4803      	ldr	r0, [pc, #12]	@ (800911c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8009110:	4770      	bx	lr
 8009112:	4a03      	ldr	r2, [pc, #12]	@ (8009120 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 8009114:	4801      	ldr	r0, [pc, #4]	@ (800911c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8009116:	6812      	ldr	r2, [r2, #0]
 8009118:	601a      	str	r2, [r3, #0]
 800911a:	4770      	bx	lr
 800911c:	2000001c 	.word	0x2000001c
 8009120:	200001d0 	.word	0x200001d0

08009124 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8009124:	4a02      	ldr	r2, [pc, #8]	@ (8009130 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 8009126:	4b03      	ldr	r3, [pc, #12]	@ (8009134 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 8009128:	6812      	ldr	r2, [r2, #0]
 800912a:	601a      	str	r2, [r3, #0]
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	200001d0 	.word	0x200001d0
 8009134:	2000001c 	.word	0x2000001c

08009138 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 8009138:	f003 b9a4 	b.w	800c484 <geometry_msgs__msg__Twist__init>

0800913c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800913c:	f003 b9c6 	b.w	800c4cc <geometry_msgs__msg__Twist__fini>

08009140 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8009140:	b510      	push	{r4, lr}
 8009142:	f000 f819 	bl	8009178 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8009146:	4c07      	ldr	r4, [pc, #28]	@ (8009164 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 8009148:	60e0      	str	r0, [r4, #12]
 800914a:	f000 f815 	bl	8009178 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800914e:	4b06      	ldr	r3, [pc, #24]	@ (8009168 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8009150:	64a0      	str	r0, [r4, #72]	@ 0x48
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	b10a      	cbz	r2, 800915a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 8009156:	4804      	ldr	r0, [pc, #16]	@ (8009168 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8009158:	bd10      	pop	{r4, pc}
 800915a:	4a04      	ldr	r2, [pc, #16]	@ (800916c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800915c:	4802      	ldr	r0, [pc, #8]	@ (8009168 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800915e:	6812      	ldr	r2, [r2, #0]
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	bd10      	pop	{r4, pc}
 8009164:	20000028 	.word	0x20000028
 8009168:	200000a0 	.word	0x200000a0
 800916c:	200001d4 	.word	0x200001d4

08009170 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8009170:	f003 b9b8 	b.w	800c4e4 <geometry_msgs__msg__Vector3__init>

08009174 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 8009174:	f003 b9ba 	b.w	800c4ec <geometry_msgs__msg__Vector3__fini>

08009178 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8009178:	4b04      	ldr	r3, [pc, #16]	@ (800918c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	b10a      	cbz	r2, 8009182 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800917e:	4803      	ldr	r0, [pc, #12]	@ (800918c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8009180:	4770      	bx	lr
 8009182:	4a03      	ldr	r2, [pc, #12]	@ (8009190 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 8009184:	4801      	ldr	r0, [pc, #4]	@ (800918c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8009186:	6812      	ldr	r2, [r2, #0]
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	4770      	bx	lr
 800918c:	20000160 	.word	0x20000160
 8009190:	200001d4 	.word	0x200001d4

08009194 <get_serialized_size_geometry_msgs__msg__Twist>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	4604      	mov	r4, r0
 8009198:	b148      	cbz	r0, 80091ae <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800919a:	460d      	mov	r5, r1
 800919c:	f000 f860 	bl	8009260 <get_serialized_size_geometry_msgs__msg__Vector3>
 80091a0:	4606      	mov	r6, r0
 80091a2:	1829      	adds	r1, r5, r0
 80091a4:	f104 0018 	add.w	r0, r4, #24
 80091a8:	f000 f85a 	bl	8009260 <get_serialized_size_geometry_msgs__msg__Vector3>
 80091ac:	4430      	add	r0, r6
 80091ae:	bd70      	pop	{r4, r5, r6, pc}

080091b0 <_Twist__cdr_deserialize>:
 80091b0:	b570      	push	{r4, r5, r6, lr}
 80091b2:	460c      	mov	r4, r1
 80091b4:	b189      	cbz	r1, 80091da <_Twist__cdr_deserialize+0x2a>
 80091b6:	4605      	mov	r5, r0
 80091b8:	f000 f8de 	bl	8009378 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80091bc:	6843      	ldr	r3, [r0, #4]
 80091be:	4621      	mov	r1, r4
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	4628      	mov	r0, r5
 80091c4:	4798      	blx	r3
 80091c6:	f000 f8d7 	bl	8009378 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80091ca:	6843      	ldr	r3, [r0, #4]
 80091cc:	f104 0118 	add.w	r1, r4, #24
 80091d0:	4628      	mov	r0, r5
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091d8:	4718      	bx	r3
 80091da:	4608      	mov	r0, r1
 80091dc:	bd70      	pop	{r4, r5, r6, pc}
 80091de:	bf00      	nop

080091e0 <_Twist__cdr_serialize>:
 80091e0:	b510      	push	{r4, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	9101      	str	r1, [sp, #4]
 80091e6:	b190      	cbz	r0, 800920e <_Twist__cdr_serialize+0x2e>
 80091e8:	4604      	mov	r4, r0
 80091ea:	f000 f8c5 	bl	8009378 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80091ee:	6843      	ldr	r3, [r0, #4]
 80091f0:	9901      	ldr	r1, [sp, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	4620      	mov	r0, r4
 80091f6:	4798      	blx	r3
 80091f8:	f000 f8be 	bl	8009378 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80091fc:	6843      	ldr	r3, [r0, #4]
 80091fe:	9901      	ldr	r1, [sp, #4]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f104 0018 	add.w	r0, r4, #24
 8009206:	b002      	add	sp, #8
 8009208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800920c:	4718      	bx	r3
 800920e:	b002      	add	sp, #8
 8009210:	bd10      	pop	{r4, pc}
 8009212:	bf00      	nop

08009214 <_Twist__get_serialized_size>:
 8009214:	b538      	push	{r3, r4, r5, lr}
 8009216:	4604      	mov	r4, r0
 8009218:	b148      	cbz	r0, 800922e <_Twist__get_serialized_size+0x1a>
 800921a:	2100      	movs	r1, #0
 800921c:	f000 f820 	bl	8009260 <get_serialized_size_geometry_msgs__msg__Vector3>
 8009220:	4605      	mov	r5, r0
 8009222:	4601      	mov	r1, r0
 8009224:	f104 0018 	add.w	r0, r4, #24
 8009228:	f000 f81a 	bl	8009260 <get_serialized_size_geometry_msgs__msg__Vector3>
 800922c:	4428      	add	r0, r5
 800922e:	bd38      	pop	{r3, r4, r5, pc}

08009230 <_Twist__max_serialized_size>:
 8009230:	b510      	push	{r4, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	2301      	movs	r3, #1
 8009236:	2100      	movs	r1, #0
 8009238:	f10d 0007 	add.w	r0, sp, #7
 800923c:	f88d 3007 	strb.w	r3, [sp, #7]
 8009240:	f000 f87e 	bl	8009340 <max_serialized_size_geometry_msgs__msg__Vector3>
 8009244:	4604      	mov	r4, r0
 8009246:	4601      	mov	r1, r0
 8009248:	f10d 0007 	add.w	r0, sp, #7
 800924c:	f000 f878 	bl	8009340 <max_serialized_size_geometry_msgs__msg__Vector3>
 8009250:	4420      	add	r0, r4
 8009252:	b002      	add	sp, #8
 8009254:	bd10      	pop	{r4, pc}
 8009256:	bf00      	nop

08009258 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8009258:	4800      	ldr	r0, [pc, #0]	@ (800925c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800925a:	4770      	bx	lr
 800925c:	2000016c 	.word	0x2000016c

08009260 <get_serialized_size_geometry_msgs__msg__Vector3>:
 8009260:	b1b8      	cbz	r0, 8009292 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8009262:	b538      	push	{r3, r4, r5, lr}
 8009264:	460d      	mov	r5, r1
 8009266:	4628      	mov	r0, r5
 8009268:	2108      	movs	r1, #8
 800926a:	f001 f9fd 	bl	800a668 <ucdr_alignment>
 800926e:	f105 0308 	add.w	r3, r5, #8
 8009272:	181c      	adds	r4, r3, r0
 8009274:	2108      	movs	r1, #8
 8009276:	4620      	mov	r0, r4
 8009278:	f001 f9f6 	bl	800a668 <ucdr_alignment>
 800927c:	3008      	adds	r0, #8
 800927e:	4404      	add	r4, r0
 8009280:	2108      	movs	r1, #8
 8009282:	4620      	mov	r0, r4
 8009284:	f001 f9f0 	bl	800a668 <ucdr_alignment>
 8009288:	f1c5 0508 	rsb	r5, r5, #8
 800928c:	4428      	add	r0, r5
 800928e:	4420      	add	r0, r4
 8009290:	bd38      	pop	{r3, r4, r5, pc}
 8009292:	4770      	bx	lr

08009294 <_Vector3__cdr_deserialize>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	460c      	mov	r4, r1
 8009298:	b171      	cbz	r1, 80092b8 <_Vector3__cdr_deserialize+0x24>
 800929a:	4605      	mov	r5, r0
 800929c:	f001 f8c6 	bl	800a42c <ucdr_deserialize_double>
 80092a0:	f104 0108 	add.w	r1, r4, #8
 80092a4:	4628      	mov	r0, r5
 80092a6:	f001 f8c1 	bl	800a42c <ucdr_deserialize_double>
 80092aa:	f104 0110 	add.w	r1, r4, #16
 80092ae:	4628      	mov	r0, r5
 80092b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092b4:	f001 b8ba 	b.w	800a42c <ucdr_deserialize_double>
 80092b8:	4608      	mov	r0, r1
 80092ba:	bd38      	pop	{r3, r4, r5, pc}

080092bc <_Vector3__cdr_serialize>:
 80092bc:	b198      	cbz	r0, 80092e6 <_Vector3__cdr_serialize+0x2a>
 80092be:	b538      	push	{r3, r4, r5, lr}
 80092c0:	ed90 0b00 	vldr	d0, [r0]
 80092c4:	460d      	mov	r5, r1
 80092c6:	4604      	mov	r4, r0
 80092c8:	4608      	mov	r0, r1
 80092ca:	f000 ffdf 	bl	800a28c <ucdr_serialize_double>
 80092ce:	ed94 0b02 	vldr	d0, [r4, #8]
 80092d2:	4628      	mov	r0, r5
 80092d4:	f000 ffda 	bl	800a28c <ucdr_serialize_double>
 80092d8:	ed94 0b04 	vldr	d0, [r4, #16]
 80092dc:	4628      	mov	r0, r5
 80092de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092e2:	f000 bfd3 	b.w	800a28c <ucdr_serialize_double>
 80092e6:	4770      	bx	lr

080092e8 <_Vector3__get_serialized_size>:
 80092e8:	b198      	cbz	r0, 8009312 <_Vector3__get_serialized_size+0x2a>
 80092ea:	b510      	push	{r4, lr}
 80092ec:	2108      	movs	r1, #8
 80092ee:	2000      	movs	r0, #0
 80092f0:	f001 f9ba 	bl	800a668 <ucdr_alignment>
 80092f4:	f100 0408 	add.w	r4, r0, #8
 80092f8:	2108      	movs	r1, #8
 80092fa:	4620      	mov	r0, r4
 80092fc:	f001 f9b4 	bl	800a668 <ucdr_alignment>
 8009300:	3008      	adds	r0, #8
 8009302:	4404      	add	r4, r0
 8009304:	2108      	movs	r1, #8
 8009306:	4620      	mov	r0, r4
 8009308:	f001 f9ae 	bl	800a668 <ucdr_alignment>
 800930c:	3008      	adds	r0, #8
 800930e:	4420      	add	r0, r4
 8009310:	bd10      	pop	{r4, pc}
 8009312:	4770      	bx	lr

08009314 <_Vector3__max_serialized_size>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	2108      	movs	r1, #8
 8009318:	2000      	movs	r0, #0
 800931a:	f001 f9a5 	bl	800a668 <ucdr_alignment>
 800931e:	f100 0508 	add.w	r5, r0, #8
 8009322:	2108      	movs	r1, #8
 8009324:	4628      	mov	r0, r5
 8009326:	f001 f99f 	bl	800a668 <ucdr_alignment>
 800932a:	f100 0408 	add.w	r4, r0, #8
 800932e:	442c      	add	r4, r5
 8009330:	2108      	movs	r1, #8
 8009332:	4620      	mov	r0, r4
 8009334:	f001 f998 	bl	800a668 <ucdr_alignment>
 8009338:	3008      	adds	r0, #8
 800933a:	4420      	add	r0, r4
 800933c:	bd38      	pop	{r3, r4, r5, pc}
 800933e:	bf00      	nop

08009340 <max_serialized_size_geometry_msgs__msg__Vector3>:
 8009340:	b570      	push	{r4, r5, r6, lr}
 8009342:	2301      	movs	r3, #1
 8009344:	460c      	mov	r4, r1
 8009346:	7003      	strb	r3, [r0, #0]
 8009348:	2108      	movs	r1, #8
 800934a:	4620      	mov	r0, r4
 800934c:	f001 f98c 	bl	800a668 <ucdr_alignment>
 8009350:	f104 0508 	add.w	r5, r4, #8
 8009354:	1946      	adds	r6, r0, r5
 8009356:	2108      	movs	r1, #8
 8009358:	4630      	mov	r0, r6
 800935a:	f001 f985 	bl	800a668 <ucdr_alignment>
 800935e:	f100 0508 	add.w	r5, r0, #8
 8009362:	4435      	add	r5, r6
 8009364:	2108      	movs	r1, #8
 8009366:	4628      	mov	r0, r5
 8009368:	f001 f97e 	bl	800a668 <ucdr_alignment>
 800936c:	f1c4 0408 	rsb	r4, r4, #8
 8009370:	4420      	add	r0, r4
 8009372:	4428      	add	r0, r5
 8009374:	bd70      	pop	{r4, r5, r6, pc}
 8009376:	bf00      	nop

08009378 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8009378:	4800      	ldr	r0, [pc, #0]	@ (800937c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800937a:	4770      	bx	lr
 800937c:	20000194 	.word	0x20000194

08009380 <ucdr_serialize_bool>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	460d      	mov	r5, r1
 8009384:	2101      	movs	r1, #1
 8009386:	4604      	mov	r4, r0
 8009388:	f001 f922 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 800938c:	b148      	cbz	r0, 80093a2 <ucdr_serialize_bool+0x22>
 800938e:	68a3      	ldr	r3, [r4, #8]
 8009390:	701d      	strb	r5, [r3, #0]
 8009392:	68a2      	ldr	r2, [r4, #8]
 8009394:	6923      	ldr	r3, [r4, #16]
 8009396:	2101      	movs	r1, #1
 8009398:	440a      	add	r2, r1
 800939a:	440b      	add	r3, r1
 800939c:	60a2      	str	r2, [r4, #8]
 800939e:	6123      	str	r3, [r4, #16]
 80093a0:	7561      	strb	r1, [r4, #21]
 80093a2:	7da0      	ldrb	r0, [r4, #22]
 80093a4:	f080 0001 	eor.w	r0, r0, #1
 80093a8:	bd38      	pop	{r3, r4, r5, pc}
 80093aa:	bf00      	nop

080093ac <ucdr_deserialize_bool>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	460d      	mov	r5, r1
 80093b0:	2101      	movs	r1, #1
 80093b2:	4604      	mov	r4, r0
 80093b4:	f001 f90c 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 80093b8:	b160      	cbz	r0, 80093d4 <ucdr_deserialize_bool+0x28>
 80093ba:	68a2      	ldr	r2, [r4, #8]
 80093bc:	6923      	ldr	r3, [r4, #16]
 80093be:	f812 1b01 	ldrb.w	r1, [r2], #1
 80093c2:	3900      	subs	r1, #0
 80093c4:	bf18      	it	ne
 80093c6:	2101      	movne	r1, #1
 80093c8:	7029      	strb	r1, [r5, #0]
 80093ca:	3301      	adds	r3, #1
 80093cc:	2101      	movs	r1, #1
 80093ce:	60a2      	str	r2, [r4, #8]
 80093d0:	6123      	str	r3, [r4, #16]
 80093d2:	7561      	strb	r1, [r4, #21]
 80093d4:	7da0      	ldrb	r0, [r4, #22]
 80093d6:	f080 0001 	eor.w	r0, r0, #1
 80093da:	bd38      	pop	{r3, r4, r5, pc}

080093dc <ucdr_serialize_uint8_t>:
 80093dc:	b538      	push	{r3, r4, r5, lr}
 80093de:	460d      	mov	r5, r1
 80093e0:	2101      	movs	r1, #1
 80093e2:	4604      	mov	r4, r0
 80093e4:	f001 f8f4 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 80093e8:	b148      	cbz	r0, 80093fe <ucdr_serialize_uint8_t+0x22>
 80093ea:	68a3      	ldr	r3, [r4, #8]
 80093ec:	701d      	strb	r5, [r3, #0]
 80093ee:	68a2      	ldr	r2, [r4, #8]
 80093f0:	6923      	ldr	r3, [r4, #16]
 80093f2:	2101      	movs	r1, #1
 80093f4:	440a      	add	r2, r1
 80093f6:	440b      	add	r3, r1
 80093f8:	60a2      	str	r2, [r4, #8]
 80093fa:	6123      	str	r3, [r4, #16]
 80093fc:	7561      	strb	r1, [r4, #21]
 80093fe:	7da0      	ldrb	r0, [r4, #22]
 8009400:	f080 0001 	eor.w	r0, r0, #1
 8009404:	bd38      	pop	{r3, r4, r5, pc}
 8009406:	bf00      	nop

08009408 <ucdr_deserialize_uint8_t>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	460d      	mov	r5, r1
 800940c:	2101      	movs	r1, #1
 800940e:	4604      	mov	r4, r0
 8009410:	f001 f8de 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 8009414:	b150      	cbz	r0, 800942c <ucdr_deserialize_uint8_t+0x24>
 8009416:	68a3      	ldr	r3, [r4, #8]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	702b      	strb	r3, [r5, #0]
 800941c:	68a2      	ldr	r2, [r4, #8]
 800941e:	6923      	ldr	r3, [r4, #16]
 8009420:	2101      	movs	r1, #1
 8009422:	440a      	add	r2, r1
 8009424:	440b      	add	r3, r1
 8009426:	60a2      	str	r2, [r4, #8]
 8009428:	6123      	str	r3, [r4, #16]
 800942a:	7561      	strb	r1, [r4, #21]
 800942c:	7da0      	ldrb	r0, [r4, #22]
 800942e:	f080 0001 	eor.w	r0, r0, #1
 8009432:	bd38      	pop	{r3, r4, r5, pc}

08009434 <ucdr_serialize_uint16_t>:
 8009434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009438:	b082      	sub	sp, #8
 800943a:	460b      	mov	r3, r1
 800943c:	2102      	movs	r1, #2
 800943e:	4604      	mov	r4, r0
 8009440:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009444:	f001 f918 	bl	800a678 <ucdr_buffer_alignment>
 8009448:	4601      	mov	r1, r0
 800944a:	4620      	mov	r0, r4
 800944c:	7d67      	ldrb	r7, [r4, #21]
 800944e:	f001 f957 	bl	800a700 <ucdr_advance_buffer>
 8009452:	2102      	movs	r1, #2
 8009454:	4620      	mov	r0, r4
 8009456:	f001 f8af 	bl	800a5b8 <ucdr_check_buffer_available_for>
 800945a:	bb78      	cbnz	r0, 80094bc <ucdr_serialize_uint16_t+0x88>
 800945c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009460:	42ab      	cmp	r3, r5
 8009462:	d926      	bls.n	80094b2 <ucdr_serialize_uint16_t+0x7e>
 8009464:	1b5e      	subs	r6, r3, r5
 8009466:	60a3      	str	r3, [r4, #8]
 8009468:	6923      	ldr	r3, [r4, #16]
 800946a:	f1c6 0802 	rsb	r8, r6, #2
 800946e:	4433      	add	r3, r6
 8009470:	6123      	str	r3, [r4, #16]
 8009472:	4641      	mov	r1, r8
 8009474:	4620      	mov	r0, r4
 8009476:	f001 f8ab 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 800947a:	2800      	cmp	r0, #0
 800947c:	d03b      	beq.n	80094f6 <ucdr_serialize_uint16_t+0xc2>
 800947e:	7d23      	ldrb	r3, [r4, #20]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d04a      	beq.n	800951a <ucdr_serialize_uint16_t+0xe6>
 8009484:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009488:	702b      	strb	r3, [r5, #0]
 800948a:	2e00      	cmp	r6, #0
 800948c:	d040      	beq.n	8009510 <ucdr_serialize_uint16_t+0xdc>
 800948e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009492:	706b      	strb	r3, [r5, #1]
 8009494:	6923      	ldr	r3, [r4, #16]
 8009496:	68a2      	ldr	r2, [r4, #8]
 8009498:	7da0      	ldrb	r0, [r4, #22]
 800949a:	3302      	adds	r3, #2
 800949c:	1b9e      	subs	r6, r3, r6
 800949e:	4442      	add	r2, r8
 80094a0:	2302      	movs	r3, #2
 80094a2:	f080 0001 	eor.w	r0, r0, #1
 80094a6:	60a2      	str	r2, [r4, #8]
 80094a8:	6126      	str	r6, [r4, #16]
 80094aa:	7563      	strb	r3, [r4, #21]
 80094ac:	b002      	add	sp, #8
 80094ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b2:	2102      	movs	r1, #2
 80094b4:	4620      	mov	r0, r4
 80094b6:	f001 f88b 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 80094ba:	b190      	cbz	r0, 80094e2 <ucdr_serialize_uint16_t+0xae>
 80094bc:	7d23      	ldrb	r3, [r4, #20]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	68a3      	ldr	r3, [r4, #8]
 80094c2:	d014      	beq.n	80094ee <ucdr_serialize_uint16_t+0xba>
 80094c4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80094c8:	701a      	strb	r2, [r3, #0]
 80094ca:	68a3      	ldr	r3, [r4, #8]
 80094cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80094d0:	705a      	strb	r2, [r3, #1]
 80094d2:	68a2      	ldr	r2, [r4, #8]
 80094d4:	6923      	ldr	r3, [r4, #16]
 80094d6:	3202      	adds	r2, #2
 80094d8:	3302      	adds	r3, #2
 80094da:	2102      	movs	r1, #2
 80094dc:	60a2      	str	r2, [r4, #8]
 80094de:	6123      	str	r3, [r4, #16]
 80094e0:	7561      	strb	r1, [r4, #21]
 80094e2:	7da0      	ldrb	r0, [r4, #22]
 80094e4:	f080 0001 	eor.w	r0, r0, #1
 80094e8:	b002      	add	sp, #8
 80094ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094ee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80094f2:	801a      	strh	r2, [r3, #0]
 80094f4:	e7ed      	b.n	80094d2 <ucdr_serialize_uint16_t+0x9e>
 80094f6:	68a2      	ldr	r2, [r4, #8]
 80094f8:	6923      	ldr	r3, [r4, #16]
 80094fa:	7da0      	ldrb	r0, [r4, #22]
 80094fc:	7567      	strb	r7, [r4, #21]
 80094fe:	1b92      	subs	r2, r2, r6
 8009500:	1b9b      	subs	r3, r3, r6
 8009502:	f080 0001 	eor.w	r0, r0, #1
 8009506:	60a2      	str	r2, [r4, #8]
 8009508:	6123      	str	r3, [r4, #16]
 800950a:	b002      	add	sp, #8
 800950c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009510:	68a3      	ldr	r3, [r4, #8]
 8009512:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009516:	701a      	strb	r2, [r3, #0]
 8009518:	e7bc      	b.n	8009494 <ucdr_serialize_uint16_t+0x60>
 800951a:	4628      	mov	r0, r5
 800951c:	f10d 0506 	add.w	r5, sp, #6
 8009520:	4629      	mov	r1, r5
 8009522:	4632      	mov	r2, r6
 8009524:	f00d f935 	bl	8016792 <memcpy>
 8009528:	68a0      	ldr	r0, [r4, #8]
 800952a:	4642      	mov	r2, r8
 800952c:	19a9      	adds	r1, r5, r6
 800952e:	f00d f930 	bl	8016792 <memcpy>
 8009532:	e7af      	b.n	8009494 <ucdr_serialize_uint16_t+0x60>

08009534 <ucdr_serialize_endian_uint16_t>:
 8009534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009538:	b083      	sub	sp, #12
 800953a:	460d      	mov	r5, r1
 800953c:	2102      	movs	r1, #2
 800953e:	4604      	mov	r4, r0
 8009540:	f8ad 2006 	strh.w	r2, [sp, #6]
 8009544:	f001 f898 	bl	800a678 <ucdr_buffer_alignment>
 8009548:	4601      	mov	r1, r0
 800954a:	4620      	mov	r0, r4
 800954c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009550:	f001 f8d6 	bl	800a700 <ucdr_advance_buffer>
 8009554:	2102      	movs	r1, #2
 8009556:	4620      	mov	r0, r4
 8009558:	f001 f82e 	bl	800a5b8 <ucdr_check_buffer_available_for>
 800955c:	bb70      	cbnz	r0, 80095bc <ucdr_serialize_endian_uint16_t+0x88>
 800955e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009562:	42be      	cmp	r6, r7
 8009564:	d925      	bls.n	80095b2 <ucdr_serialize_endian_uint16_t+0x7e>
 8009566:	6923      	ldr	r3, [r4, #16]
 8009568:	60a6      	str	r6, [r4, #8]
 800956a:	1bf6      	subs	r6, r6, r7
 800956c:	4433      	add	r3, r6
 800956e:	f1c6 0902 	rsb	r9, r6, #2
 8009572:	6123      	str	r3, [r4, #16]
 8009574:	4649      	mov	r1, r9
 8009576:	4620      	mov	r0, r4
 8009578:	f001 f82a 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 800957c:	2800      	cmp	r0, #0
 800957e:	d039      	beq.n	80095f4 <ucdr_serialize_endian_uint16_t+0xc0>
 8009580:	2d01      	cmp	r5, #1
 8009582:	d04a      	beq.n	800961a <ucdr_serialize_endian_uint16_t+0xe6>
 8009584:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009588:	703b      	strb	r3, [r7, #0]
 800958a:	2e00      	cmp	r6, #0
 800958c:	d040      	beq.n	8009610 <ucdr_serialize_endian_uint16_t+0xdc>
 800958e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009592:	707b      	strb	r3, [r7, #1]
 8009594:	6923      	ldr	r3, [r4, #16]
 8009596:	68a2      	ldr	r2, [r4, #8]
 8009598:	7da0      	ldrb	r0, [r4, #22]
 800959a:	3302      	adds	r3, #2
 800959c:	444a      	add	r2, r9
 800959e:	1b9b      	subs	r3, r3, r6
 80095a0:	2102      	movs	r1, #2
 80095a2:	f080 0001 	eor.w	r0, r0, #1
 80095a6:	60a2      	str	r2, [r4, #8]
 80095a8:	6123      	str	r3, [r4, #16]
 80095aa:	7561      	strb	r1, [r4, #21]
 80095ac:	b003      	add	sp, #12
 80095ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095b2:	2102      	movs	r1, #2
 80095b4:	4620      	mov	r0, r4
 80095b6:	f001 f80b 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 80095ba:	b188      	cbz	r0, 80095e0 <ucdr_serialize_endian_uint16_t+0xac>
 80095bc:	2d01      	cmp	r5, #1
 80095be:	68a3      	ldr	r3, [r4, #8]
 80095c0:	d014      	beq.n	80095ec <ucdr_serialize_endian_uint16_t+0xb8>
 80095c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80095c6:	701a      	strb	r2, [r3, #0]
 80095c8:	68a3      	ldr	r3, [r4, #8]
 80095ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80095ce:	705a      	strb	r2, [r3, #1]
 80095d0:	68a2      	ldr	r2, [r4, #8]
 80095d2:	6923      	ldr	r3, [r4, #16]
 80095d4:	3202      	adds	r2, #2
 80095d6:	3302      	adds	r3, #2
 80095d8:	2102      	movs	r1, #2
 80095da:	60a2      	str	r2, [r4, #8]
 80095dc:	6123      	str	r3, [r4, #16]
 80095de:	7561      	strb	r1, [r4, #21]
 80095e0:	7da0      	ldrb	r0, [r4, #22]
 80095e2:	f080 0001 	eor.w	r0, r0, #1
 80095e6:	b003      	add	sp, #12
 80095e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80095f0:	801a      	strh	r2, [r3, #0]
 80095f2:	e7ed      	b.n	80095d0 <ucdr_serialize_endian_uint16_t+0x9c>
 80095f4:	68a2      	ldr	r2, [r4, #8]
 80095f6:	6923      	ldr	r3, [r4, #16]
 80095f8:	7da0      	ldrb	r0, [r4, #22]
 80095fa:	f884 8015 	strb.w	r8, [r4, #21]
 80095fe:	1b92      	subs	r2, r2, r6
 8009600:	1b9b      	subs	r3, r3, r6
 8009602:	f080 0001 	eor.w	r0, r0, #1
 8009606:	60a2      	str	r2, [r4, #8]
 8009608:	6123      	str	r3, [r4, #16]
 800960a:	b003      	add	sp, #12
 800960c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009610:	68a3      	ldr	r3, [r4, #8]
 8009612:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009616:	701a      	strb	r2, [r3, #0]
 8009618:	e7bc      	b.n	8009594 <ucdr_serialize_endian_uint16_t+0x60>
 800961a:	f10d 0506 	add.w	r5, sp, #6
 800961e:	4629      	mov	r1, r5
 8009620:	4632      	mov	r2, r6
 8009622:	4638      	mov	r0, r7
 8009624:	f00d f8b5 	bl	8016792 <memcpy>
 8009628:	68a0      	ldr	r0, [r4, #8]
 800962a:	464a      	mov	r2, r9
 800962c:	19a9      	adds	r1, r5, r6
 800962e:	f00d f8b0 	bl	8016792 <memcpy>
 8009632:	e7af      	b.n	8009594 <ucdr_serialize_endian_uint16_t+0x60>

08009634 <ucdr_deserialize_uint16_t>:
 8009634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009638:	460d      	mov	r5, r1
 800963a:	2102      	movs	r1, #2
 800963c:	4604      	mov	r4, r0
 800963e:	f001 f81b 	bl	800a678 <ucdr_buffer_alignment>
 8009642:	4601      	mov	r1, r0
 8009644:	4620      	mov	r0, r4
 8009646:	f894 8015 	ldrb.w	r8, [r4, #21]
 800964a:	f001 f859 	bl	800a700 <ucdr_advance_buffer>
 800964e:	2102      	movs	r1, #2
 8009650:	4620      	mov	r0, r4
 8009652:	f000 ffb1 	bl	800a5b8 <ucdr_check_buffer_available_for>
 8009656:	bb60      	cbnz	r0, 80096b2 <ucdr_deserialize_uint16_t+0x7e>
 8009658:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800965c:	42be      	cmp	r6, r7
 800965e:	d923      	bls.n	80096a8 <ucdr_deserialize_uint16_t+0x74>
 8009660:	6923      	ldr	r3, [r4, #16]
 8009662:	60a6      	str	r6, [r4, #8]
 8009664:	1bf6      	subs	r6, r6, r7
 8009666:	4433      	add	r3, r6
 8009668:	f1c6 0902 	rsb	r9, r6, #2
 800966c:	6123      	str	r3, [r4, #16]
 800966e:	4649      	mov	r1, r9
 8009670:	4620      	mov	r0, r4
 8009672:	f000 ffad 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 8009676:	2800      	cmp	r0, #0
 8009678:	d034      	beq.n	80096e4 <ucdr_deserialize_uint16_t+0xb0>
 800967a:	7d23      	ldrb	r3, [r4, #20]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d042      	beq.n	8009706 <ucdr_deserialize_uint16_t+0xd2>
 8009680:	787b      	ldrb	r3, [r7, #1]
 8009682:	702b      	strb	r3, [r5, #0]
 8009684:	2e00      	cmp	r6, #0
 8009686:	d03a      	beq.n	80096fe <ucdr_deserialize_uint16_t+0xca>
 8009688:	783b      	ldrb	r3, [r7, #0]
 800968a:	706b      	strb	r3, [r5, #1]
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	68a2      	ldr	r2, [r4, #8]
 8009690:	7da0      	ldrb	r0, [r4, #22]
 8009692:	2102      	movs	r1, #2
 8009694:	3302      	adds	r3, #2
 8009696:	444a      	add	r2, r9
 8009698:	1b9b      	subs	r3, r3, r6
 800969a:	7561      	strb	r1, [r4, #21]
 800969c:	60a2      	str	r2, [r4, #8]
 800969e:	6123      	str	r3, [r4, #16]
 80096a0:	f080 0001 	eor.w	r0, r0, #1
 80096a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096a8:	2102      	movs	r1, #2
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 ff90 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 80096b0:	b180      	cbz	r0, 80096d4 <ucdr_deserialize_uint16_t+0xa0>
 80096b2:	7d23      	ldrb	r3, [r4, #20]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	68a3      	ldr	r3, [r4, #8]
 80096b8:	d011      	beq.n	80096de <ucdr_deserialize_uint16_t+0xaa>
 80096ba:	785b      	ldrb	r3, [r3, #1]
 80096bc:	702b      	strb	r3, [r5, #0]
 80096be:	68a3      	ldr	r3, [r4, #8]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	706b      	strb	r3, [r5, #1]
 80096c4:	68a2      	ldr	r2, [r4, #8]
 80096c6:	6923      	ldr	r3, [r4, #16]
 80096c8:	3202      	adds	r2, #2
 80096ca:	3302      	adds	r3, #2
 80096cc:	2102      	movs	r1, #2
 80096ce:	60a2      	str	r2, [r4, #8]
 80096d0:	6123      	str	r3, [r4, #16]
 80096d2:	7561      	strb	r1, [r4, #21]
 80096d4:	7da0      	ldrb	r0, [r4, #22]
 80096d6:	f080 0001 	eor.w	r0, r0, #1
 80096da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	802b      	strh	r3, [r5, #0]
 80096e2:	e7ef      	b.n	80096c4 <ucdr_deserialize_uint16_t+0x90>
 80096e4:	68a2      	ldr	r2, [r4, #8]
 80096e6:	6923      	ldr	r3, [r4, #16]
 80096e8:	7da0      	ldrb	r0, [r4, #22]
 80096ea:	f884 8015 	strb.w	r8, [r4, #21]
 80096ee:	1b92      	subs	r2, r2, r6
 80096f0:	1b9b      	subs	r3, r3, r6
 80096f2:	60a2      	str	r2, [r4, #8]
 80096f4:	6123      	str	r3, [r4, #16]
 80096f6:	f080 0001 	eor.w	r0, r0, #1
 80096fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096fe:	68a3      	ldr	r3, [r4, #8]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	706b      	strb	r3, [r5, #1]
 8009704:	e7c2      	b.n	800968c <ucdr_deserialize_uint16_t+0x58>
 8009706:	4639      	mov	r1, r7
 8009708:	4632      	mov	r2, r6
 800970a:	4628      	mov	r0, r5
 800970c:	f00d f841 	bl	8016792 <memcpy>
 8009710:	68a1      	ldr	r1, [r4, #8]
 8009712:	464a      	mov	r2, r9
 8009714:	19a8      	adds	r0, r5, r6
 8009716:	f00d f83c 	bl	8016792 <memcpy>
 800971a:	e7b7      	b.n	800968c <ucdr_deserialize_uint16_t+0x58>

0800971c <ucdr_deserialize_endian_uint16_t>:
 800971c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009720:	460e      	mov	r6, r1
 8009722:	2102      	movs	r1, #2
 8009724:	4604      	mov	r4, r0
 8009726:	4615      	mov	r5, r2
 8009728:	f000 ffa6 	bl	800a678 <ucdr_buffer_alignment>
 800972c:	4601      	mov	r1, r0
 800972e:	4620      	mov	r0, r4
 8009730:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009734:	f000 ffe4 	bl	800a700 <ucdr_advance_buffer>
 8009738:	2102      	movs	r1, #2
 800973a:	4620      	mov	r0, r4
 800973c:	f000 ff3c 	bl	800a5b8 <ucdr_check_buffer_available_for>
 8009740:	bb70      	cbnz	r0, 80097a0 <ucdr_deserialize_endian_uint16_t+0x84>
 8009742:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8009746:	4547      	cmp	r7, r8
 8009748:	d925      	bls.n	8009796 <ucdr_deserialize_endian_uint16_t+0x7a>
 800974a:	6923      	ldr	r3, [r4, #16]
 800974c:	60a7      	str	r7, [r4, #8]
 800974e:	eba7 0708 	sub.w	r7, r7, r8
 8009752:	443b      	add	r3, r7
 8009754:	f1c7 0a02 	rsb	sl, r7, #2
 8009758:	6123      	str	r3, [r4, #16]
 800975a:	4651      	mov	r1, sl
 800975c:	4620      	mov	r0, r4
 800975e:	f000 ff37 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 8009762:	2800      	cmp	r0, #0
 8009764:	d034      	beq.n	80097d0 <ucdr_deserialize_endian_uint16_t+0xb4>
 8009766:	2e01      	cmp	r6, #1
 8009768:	d043      	beq.n	80097f2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800976a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800976e:	702b      	strb	r3, [r5, #0]
 8009770:	2f00      	cmp	r7, #0
 8009772:	d03a      	beq.n	80097ea <ucdr_deserialize_endian_uint16_t+0xce>
 8009774:	f898 3000 	ldrb.w	r3, [r8]
 8009778:	706b      	strb	r3, [r5, #1]
 800977a:	6923      	ldr	r3, [r4, #16]
 800977c:	68a2      	ldr	r2, [r4, #8]
 800977e:	7da0      	ldrb	r0, [r4, #22]
 8009780:	2102      	movs	r1, #2
 8009782:	3302      	adds	r3, #2
 8009784:	4452      	add	r2, sl
 8009786:	1bdb      	subs	r3, r3, r7
 8009788:	7561      	strb	r1, [r4, #21]
 800978a:	60a2      	str	r2, [r4, #8]
 800978c:	6123      	str	r3, [r4, #16]
 800978e:	f080 0001 	eor.w	r0, r0, #1
 8009792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009796:	2102      	movs	r1, #2
 8009798:	4620      	mov	r0, r4
 800979a:	f000 ff19 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 800979e:	b178      	cbz	r0, 80097c0 <ucdr_deserialize_endian_uint16_t+0xa4>
 80097a0:	2e01      	cmp	r6, #1
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	d011      	beq.n	80097ca <ucdr_deserialize_endian_uint16_t+0xae>
 80097a6:	785b      	ldrb	r3, [r3, #1]
 80097a8:	702b      	strb	r3, [r5, #0]
 80097aa:	68a3      	ldr	r3, [r4, #8]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	706b      	strb	r3, [r5, #1]
 80097b0:	68a2      	ldr	r2, [r4, #8]
 80097b2:	6923      	ldr	r3, [r4, #16]
 80097b4:	3202      	adds	r2, #2
 80097b6:	3302      	adds	r3, #2
 80097b8:	2102      	movs	r1, #2
 80097ba:	60a2      	str	r2, [r4, #8]
 80097bc:	6123      	str	r3, [r4, #16]
 80097be:	7561      	strb	r1, [r4, #21]
 80097c0:	7da0      	ldrb	r0, [r4, #22]
 80097c2:	f080 0001 	eor.w	r0, r0, #1
 80097c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ca:	881b      	ldrh	r3, [r3, #0]
 80097cc:	802b      	strh	r3, [r5, #0]
 80097ce:	e7ef      	b.n	80097b0 <ucdr_deserialize_endian_uint16_t+0x94>
 80097d0:	68a2      	ldr	r2, [r4, #8]
 80097d2:	6923      	ldr	r3, [r4, #16]
 80097d4:	7da0      	ldrb	r0, [r4, #22]
 80097d6:	f884 9015 	strb.w	r9, [r4, #21]
 80097da:	1bd2      	subs	r2, r2, r7
 80097dc:	1bdb      	subs	r3, r3, r7
 80097de:	60a2      	str	r2, [r4, #8]
 80097e0:	6123      	str	r3, [r4, #16]
 80097e2:	f080 0001 	eor.w	r0, r0, #1
 80097e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ea:	68a3      	ldr	r3, [r4, #8]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	706b      	strb	r3, [r5, #1]
 80097f0:	e7c3      	b.n	800977a <ucdr_deserialize_endian_uint16_t+0x5e>
 80097f2:	4641      	mov	r1, r8
 80097f4:	463a      	mov	r2, r7
 80097f6:	4628      	mov	r0, r5
 80097f8:	f00c ffcb 	bl	8016792 <memcpy>
 80097fc:	68a1      	ldr	r1, [r4, #8]
 80097fe:	4652      	mov	r2, sl
 8009800:	19e8      	adds	r0, r5, r7
 8009802:	f00c ffc6 	bl	8016792 <memcpy>
 8009806:	e7b8      	b.n	800977a <ucdr_deserialize_endian_uint16_t+0x5e>

08009808 <ucdr_serialize_uint32_t>:
 8009808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800980c:	b082      	sub	sp, #8
 800980e:	4604      	mov	r4, r0
 8009810:	9101      	str	r1, [sp, #4]
 8009812:	2104      	movs	r1, #4
 8009814:	f000 ff30 	bl	800a678 <ucdr_buffer_alignment>
 8009818:	4601      	mov	r1, r0
 800981a:	4620      	mov	r0, r4
 800981c:	7d67      	ldrb	r7, [r4, #21]
 800981e:	f000 ff6f 	bl	800a700 <ucdr_advance_buffer>
 8009822:	2104      	movs	r1, #4
 8009824:	4620      	mov	r0, r4
 8009826:	f000 fec7 	bl	800a5b8 <ucdr_check_buffer_available_for>
 800982a:	2800      	cmp	r0, #0
 800982c:	d139      	bne.n	80098a2 <ucdr_serialize_uint32_t+0x9a>
 800982e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009832:	42ab      	cmp	r3, r5
 8009834:	d930      	bls.n	8009898 <ucdr_serialize_uint32_t+0x90>
 8009836:	1b5e      	subs	r6, r3, r5
 8009838:	60a3      	str	r3, [r4, #8]
 800983a:	6923      	ldr	r3, [r4, #16]
 800983c:	f1c6 0804 	rsb	r8, r6, #4
 8009840:	4433      	add	r3, r6
 8009842:	6123      	str	r3, [r4, #16]
 8009844:	4641      	mov	r1, r8
 8009846:	4620      	mov	r0, r4
 8009848:	f000 fec2 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 800984c:	2800      	cmp	r0, #0
 800984e:	d04c      	beq.n	80098ea <ucdr_serialize_uint32_t+0xe2>
 8009850:	7d23      	ldrb	r3, [r4, #20]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d063      	beq.n	800991e <ucdr_serialize_uint32_t+0x116>
 8009856:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800985a:	702b      	strb	r3, [r5, #0]
 800985c:	2e00      	cmp	r6, #0
 800985e:	d051      	beq.n	8009904 <ucdr_serialize_uint32_t+0xfc>
 8009860:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009864:	706b      	strb	r3, [r5, #1]
 8009866:	2e01      	cmp	r6, #1
 8009868:	d050      	beq.n	800990c <ucdr_serialize_uint32_t+0x104>
 800986a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800986e:	70ab      	strb	r3, [r5, #2]
 8009870:	2e02      	cmp	r6, #2
 8009872:	d04f      	beq.n	8009914 <ucdr_serialize_uint32_t+0x10c>
 8009874:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009878:	70eb      	strb	r3, [r5, #3]
 800987a:	6923      	ldr	r3, [r4, #16]
 800987c:	68a2      	ldr	r2, [r4, #8]
 800987e:	7da0      	ldrb	r0, [r4, #22]
 8009880:	3304      	adds	r3, #4
 8009882:	1b9e      	subs	r6, r3, r6
 8009884:	4442      	add	r2, r8
 8009886:	2304      	movs	r3, #4
 8009888:	f080 0001 	eor.w	r0, r0, #1
 800988c:	60a2      	str	r2, [r4, #8]
 800988e:	6126      	str	r6, [r4, #16]
 8009890:	7563      	strb	r3, [r4, #21]
 8009892:	b002      	add	sp, #8
 8009894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009898:	2104      	movs	r1, #4
 800989a:	4620      	mov	r0, r4
 800989c:	f000 fe98 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 80098a0:	b1d0      	cbz	r0, 80098d8 <ucdr_serialize_uint32_t+0xd0>
 80098a2:	7d23      	ldrb	r3, [r4, #20]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	68a3      	ldr	r3, [r4, #8]
 80098a8:	d01c      	beq.n	80098e4 <ucdr_serialize_uint32_t+0xdc>
 80098aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80098ae:	701a      	strb	r2, [r3, #0]
 80098b0:	68a3      	ldr	r3, [r4, #8]
 80098b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80098b6:	705a      	strb	r2, [r3, #1]
 80098b8:	68a3      	ldr	r3, [r4, #8]
 80098ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80098be:	709a      	strb	r2, [r3, #2]
 80098c0:	68a3      	ldr	r3, [r4, #8]
 80098c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80098c6:	70da      	strb	r2, [r3, #3]
 80098c8:	68a2      	ldr	r2, [r4, #8]
 80098ca:	6923      	ldr	r3, [r4, #16]
 80098cc:	3204      	adds	r2, #4
 80098ce:	3304      	adds	r3, #4
 80098d0:	2104      	movs	r1, #4
 80098d2:	60a2      	str	r2, [r4, #8]
 80098d4:	6123      	str	r3, [r4, #16]
 80098d6:	7561      	strb	r1, [r4, #21]
 80098d8:	7da0      	ldrb	r0, [r4, #22]
 80098da:	f080 0001 	eor.w	r0, r0, #1
 80098de:	b002      	add	sp, #8
 80098e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098e4:	9a01      	ldr	r2, [sp, #4]
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	e7ee      	b.n	80098c8 <ucdr_serialize_uint32_t+0xc0>
 80098ea:	68a2      	ldr	r2, [r4, #8]
 80098ec:	6923      	ldr	r3, [r4, #16]
 80098ee:	7da0      	ldrb	r0, [r4, #22]
 80098f0:	7567      	strb	r7, [r4, #21]
 80098f2:	1b92      	subs	r2, r2, r6
 80098f4:	1b9b      	subs	r3, r3, r6
 80098f6:	f080 0001 	eor.w	r0, r0, #1
 80098fa:	60a2      	str	r2, [r4, #8]
 80098fc:	6123      	str	r3, [r4, #16]
 80098fe:	b002      	add	sp, #8
 8009900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009904:	68a3      	ldr	r3, [r4, #8]
 8009906:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800990a:	701a      	strb	r2, [r3, #0]
 800990c:	68a3      	ldr	r3, [r4, #8]
 800990e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009912:	701a      	strb	r2, [r3, #0]
 8009914:	68a3      	ldr	r3, [r4, #8]
 8009916:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800991a:	701a      	strb	r2, [r3, #0]
 800991c:	e7ad      	b.n	800987a <ucdr_serialize_uint32_t+0x72>
 800991e:	4628      	mov	r0, r5
 8009920:	ad01      	add	r5, sp, #4
 8009922:	4629      	mov	r1, r5
 8009924:	4632      	mov	r2, r6
 8009926:	f00c ff34 	bl	8016792 <memcpy>
 800992a:	68a0      	ldr	r0, [r4, #8]
 800992c:	4642      	mov	r2, r8
 800992e:	19a9      	adds	r1, r5, r6
 8009930:	f00c ff2f 	bl	8016792 <memcpy>
 8009934:	e7a1      	b.n	800987a <ucdr_serialize_uint32_t+0x72>
 8009936:	bf00      	nop

08009938 <ucdr_serialize_endian_uint32_t>:
 8009938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800993c:	b083      	sub	sp, #12
 800993e:	460d      	mov	r5, r1
 8009940:	2104      	movs	r1, #4
 8009942:	4604      	mov	r4, r0
 8009944:	9201      	str	r2, [sp, #4]
 8009946:	f000 fe97 	bl	800a678 <ucdr_buffer_alignment>
 800994a:	4601      	mov	r1, r0
 800994c:	4620      	mov	r0, r4
 800994e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009952:	f000 fed5 	bl	800a700 <ucdr_advance_buffer>
 8009956:	2104      	movs	r1, #4
 8009958:	4620      	mov	r0, r4
 800995a:	f000 fe2d 	bl	800a5b8 <ucdr_check_buffer_available_for>
 800995e:	2800      	cmp	r0, #0
 8009960:	d138      	bne.n	80099d4 <ucdr_serialize_endian_uint32_t+0x9c>
 8009962:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009966:	42b7      	cmp	r7, r6
 8009968:	d92f      	bls.n	80099ca <ucdr_serialize_endian_uint32_t+0x92>
 800996a:	6923      	ldr	r3, [r4, #16]
 800996c:	60a7      	str	r7, [r4, #8]
 800996e:	1bbf      	subs	r7, r7, r6
 8009970:	443b      	add	r3, r7
 8009972:	f1c7 0904 	rsb	r9, r7, #4
 8009976:	6123      	str	r3, [r4, #16]
 8009978:	4649      	mov	r1, r9
 800997a:	4620      	mov	r0, r4
 800997c:	f000 fe28 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 8009980:	2800      	cmp	r0, #0
 8009982:	d04a      	beq.n	8009a1a <ucdr_serialize_endian_uint32_t+0xe2>
 8009984:	2d01      	cmp	r5, #1
 8009986:	d063      	beq.n	8009a50 <ucdr_serialize_endian_uint32_t+0x118>
 8009988:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800998c:	7033      	strb	r3, [r6, #0]
 800998e:	2f00      	cmp	r7, #0
 8009990:	d051      	beq.n	8009a36 <ucdr_serialize_endian_uint32_t+0xfe>
 8009992:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009996:	7073      	strb	r3, [r6, #1]
 8009998:	2f01      	cmp	r7, #1
 800999a:	d050      	beq.n	8009a3e <ucdr_serialize_endian_uint32_t+0x106>
 800999c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80099a0:	70b3      	strb	r3, [r6, #2]
 80099a2:	2f02      	cmp	r7, #2
 80099a4:	d04f      	beq.n	8009a46 <ucdr_serialize_endian_uint32_t+0x10e>
 80099a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80099aa:	70f3      	strb	r3, [r6, #3]
 80099ac:	6923      	ldr	r3, [r4, #16]
 80099ae:	68a2      	ldr	r2, [r4, #8]
 80099b0:	7da0      	ldrb	r0, [r4, #22]
 80099b2:	3304      	adds	r3, #4
 80099b4:	444a      	add	r2, r9
 80099b6:	1bdb      	subs	r3, r3, r7
 80099b8:	2104      	movs	r1, #4
 80099ba:	f080 0001 	eor.w	r0, r0, #1
 80099be:	60a2      	str	r2, [r4, #8]
 80099c0:	6123      	str	r3, [r4, #16]
 80099c2:	7561      	strb	r1, [r4, #21]
 80099c4:	b003      	add	sp, #12
 80099c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099ca:	2104      	movs	r1, #4
 80099cc:	4620      	mov	r0, r4
 80099ce:	f000 fdff 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 80099d2:	b1c8      	cbz	r0, 8009a08 <ucdr_serialize_endian_uint32_t+0xd0>
 80099d4:	2d01      	cmp	r5, #1
 80099d6:	68a3      	ldr	r3, [r4, #8]
 80099d8:	d01c      	beq.n	8009a14 <ucdr_serialize_endian_uint32_t+0xdc>
 80099da:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80099de:	701a      	strb	r2, [r3, #0]
 80099e0:	68a3      	ldr	r3, [r4, #8]
 80099e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80099e6:	705a      	strb	r2, [r3, #1]
 80099e8:	68a3      	ldr	r3, [r4, #8]
 80099ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80099ee:	709a      	strb	r2, [r3, #2]
 80099f0:	68a3      	ldr	r3, [r4, #8]
 80099f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80099f6:	70da      	strb	r2, [r3, #3]
 80099f8:	68a2      	ldr	r2, [r4, #8]
 80099fa:	6923      	ldr	r3, [r4, #16]
 80099fc:	3204      	adds	r2, #4
 80099fe:	3304      	adds	r3, #4
 8009a00:	2104      	movs	r1, #4
 8009a02:	60a2      	str	r2, [r4, #8]
 8009a04:	6123      	str	r3, [r4, #16]
 8009a06:	7561      	strb	r1, [r4, #21]
 8009a08:	7da0      	ldrb	r0, [r4, #22]
 8009a0a:	f080 0001 	eor.w	r0, r0, #1
 8009a0e:	b003      	add	sp, #12
 8009a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a14:	9a01      	ldr	r2, [sp, #4]
 8009a16:	601a      	str	r2, [r3, #0]
 8009a18:	e7ee      	b.n	80099f8 <ucdr_serialize_endian_uint32_t+0xc0>
 8009a1a:	68a2      	ldr	r2, [r4, #8]
 8009a1c:	6923      	ldr	r3, [r4, #16]
 8009a1e:	7da0      	ldrb	r0, [r4, #22]
 8009a20:	f884 8015 	strb.w	r8, [r4, #21]
 8009a24:	1bd2      	subs	r2, r2, r7
 8009a26:	1bdb      	subs	r3, r3, r7
 8009a28:	f080 0001 	eor.w	r0, r0, #1
 8009a2c:	60a2      	str	r2, [r4, #8]
 8009a2e:	6123      	str	r3, [r4, #16]
 8009a30:	b003      	add	sp, #12
 8009a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a36:	68a3      	ldr	r3, [r4, #8]
 8009a38:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009a3c:	701a      	strb	r2, [r3, #0]
 8009a3e:	68a3      	ldr	r3, [r4, #8]
 8009a40:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009a44:	701a      	strb	r2, [r3, #0]
 8009a46:	68a3      	ldr	r3, [r4, #8]
 8009a48:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009a4c:	701a      	strb	r2, [r3, #0]
 8009a4e:	e7ad      	b.n	80099ac <ucdr_serialize_endian_uint32_t+0x74>
 8009a50:	ad01      	add	r5, sp, #4
 8009a52:	4629      	mov	r1, r5
 8009a54:	463a      	mov	r2, r7
 8009a56:	4630      	mov	r0, r6
 8009a58:	f00c fe9b 	bl	8016792 <memcpy>
 8009a5c:	68a0      	ldr	r0, [r4, #8]
 8009a5e:	464a      	mov	r2, r9
 8009a60:	19e9      	adds	r1, r5, r7
 8009a62:	f00c fe96 	bl	8016792 <memcpy>
 8009a66:	e7a1      	b.n	80099ac <ucdr_serialize_endian_uint32_t+0x74>

08009a68 <ucdr_deserialize_uint32_t>:
 8009a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a6c:	460d      	mov	r5, r1
 8009a6e:	2104      	movs	r1, #4
 8009a70:	4604      	mov	r4, r0
 8009a72:	f000 fe01 	bl	800a678 <ucdr_buffer_alignment>
 8009a76:	4601      	mov	r1, r0
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009a7e:	f000 fe3f 	bl	800a700 <ucdr_advance_buffer>
 8009a82:	2104      	movs	r1, #4
 8009a84:	4620      	mov	r0, r4
 8009a86:	f000 fd97 	bl	800a5b8 <ucdr_check_buffer_available_for>
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	d138      	bne.n	8009b00 <ucdr_deserialize_uint32_t+0x98>
 8009a8e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009a92:	42b7      	cmp	r7, r6
 8009a94:	d92f      	bls.n	8009af6 <ucdr_deserialize_uint32_t+0x8e>
 8009a96:	6923      	ldr	r3, [r4, #16]
 8009a98:	60a7      	str	r7, [r4, #8]
 8009a9a:	1bbf      	subs	r7, r7, r6
 8009a9c:	443b      	add	r3, r7
 8009a9e:	f1c7 0904 	rsb	r9, r7, #4
 8009aa2:	6123      	str	r3, [r4, #16]
 8009aa4:	4649      	mov	r1, r9
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f000 fd92 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d046      	beq.n	8009b3e <ucdr_deserialize_uint32_t+0xd6>
 8009ab0:	7d23      	ldrb	r3, [r4, #20]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d05c      	beq.n	8009b70 <ucdr_deserialize_uint32_t+0x108>
 8009ab6:	78f3      	ldrb	r3, [r6, #3]
 8009ab8:	702b      	strb	r3, [r5, #0]
 8009aba:	2f00      	cmp	r7, #0
 8009abc:	d04c      	beq.n	8009b58 <ucdr_deserialize_uint32_t+0xf0>
 8009abe:	78b3      	ldrb	r3, [r6, #2]
 8009ac0:	706b      	strb	r3, [r5, #1]
 8009ac2:	2f01      	cmp	r7, #1
 8009ac4:	f105 0302 	add.w	r3, r5, #2
 8009ac8:	d04a      	beq.n	8009b60 <ucdr_deserialize_uint32_t+0xf8>
 8009aca:	7873      	ldrb	r3, [r6, #1]
 8009acc:	70ab      	strb	r3, [r5, #2]
 8009ace:	2f02      	cmp	r7, #2
 8009ad0:	f105 0303 	add.w	r3, r5, #3
 8009ad4:	d048      	beq.n	8009b68 <ucdr_deserialize_uint32_t+0x100>
 8009ad6:	7833      	ldrb	r3, [r6, #0]
 8009ad8:	70eb      	strb	r3, [r5, #3]
 8009ada:	6923      	ldr	r3, [r4, #16]
 8009adc:	68a2      	ldr	r2, [r4, #8]
 8009ade:	7da0      	ldrb	r0, [r4, #22]
 8009ae0:	2104      	movs	r1, #4
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	444a      	add	r2, r9
 8009ae6:	1bdb      	subs	r3, r3, r7
 8009ae8:	7561      	strb	r1, [r4, #21]
 8009aea:	60a2      	str	r2, [r4, #8]
 8009aec:	6123      	str	r3, [r4, #16]
 8009aee:	f080 0001 	eor.w	r0, r0, #1
 8009af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009af6:	2104      	movs	r1, #4
 8009af8:	4620      	mov	r0, r4
 8009afa:	f000 fd69 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 8009afe:	b1b0      	cbz	r0, 8009b2e <ucdr_deserialize_uint32_t+0xc6>
 8009b00:	7d23      	ldrb	r3, [r4, #20]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	68a3      	ldr	r3, [r4, #8]
 8009b06:	d017      	beq.n	8009b38 <ucdr_deserialize_uint32_t+0xd0>
 8009b08:	78db      	ldrb	r3, [r3, #3]
 8009b0a:	702b      	strb	r3, [r5, #0]
 8009b0c:	68a3      	ldr	r3, [r4, #8]
 8009b0e:	789b      	ldrb	r3, [r3, #2]
 8009b10:	706b      	strb	r3, [r5, #1]
 8009b12:	68a3      	ldr	r3, [r4, #8]
 8009b14:	785b      	ldrb	r3, [r3, #1]
 8009b16:	70ab      	strb	r3, [r5, #2]
 8009b18:	68a3      	ldr	r3, [r4, #8]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	70eb      	strb	r3, [r5, #3]
 8009b1e:	68a2      	ldr	r2, [r4, #8]
 8009b20:	6923      	ldr	r3, [r4, #16]
 8009b22:	3204      	adds	r2, #4
 8009b24:	3304      	adds	r3, #4
 8009b26:	2104      	movs	r1, #4
 8009b28:	60a2      	str	r2, [r4, #8]
 8009b2a:	6123      	str	r3, [r4, #16]
 8009b2c:	7561      	strb	r1, [r4, #21]
 8009b2e:	7da0      	ldrb	r0, [r4, #22]
 8009b30:	f080 0001 	eor.w	r0, r0, #1
 8009b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	e7ef      	b.n	8009b1e <ucdr_deserialize_uint32_t+0xb6>
 8009b3e:	68a2      	ldr	r2, [r4, #8]
 8009b40:	6923      	ldr	r3, [r4, #16]
 8009b42:	7da0      	ldrb	r0, [r4, #22]
 8009b44:	f884 8015 	strb.w	r8, [r4, #21]
 8009b48:	1bd2      	subs	r2, r2, r7
 8009b4a:	1bdb      	subs	r3, r3, r7
 8009b4c:	60a2      	str	r2, [r4, #8]
 8009b4e:	6123      	str	r3, [r4, #16]
 8009b50:	f080 0001 	eor.w	r0, r0, #1
 8009b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b58:	68a3      	ldr	r3, [r4, #8]
 8009b5a:	789b      	ldrb	r3, [r3, #2]
 8009b5c:	706b      	strb	r3, [r5, #1]
 8009b5e:	1cab      	adds	r3, r5, #2
 8009b60:	68a2      	ldr	r2, [r4, #8]
 8009b62:	7852      	ldrb	r2, [r2, #1]
 8009b64:	f803 2b01 	strb.w	r2, [r3], #1
 8009b68:	68a2      	ldr	r2, [r4, #8]
 8009b6a:	7812      	ldrb	r2, [r2, #0]
 8009b6c:	701a      	strb	r2, [r3, #0]
 8009b6e:	e7b4      	b.n	8009ada <ucdr_deserialize_uint32_t+0x72>
 8009b70:	4631      	mov	r1, r6
 8009b72:	463a      	mov	r2, r7
 8009b74:	4628      	mov	r0, r5
 8009b76:	f00c fe0c 	bl	8016792 <memcpy>
 8009b7a:	68a1      	ldr	r1, [r4, #8]
 8009b7c:	464a      	mov	r2, r9
 8009b7e:	19e8      	adds	r0, r5, r7
 8009b80:	f00c fe07 	bl	8016792 <memcpy>
 8009b84:	e7a9      	b.n	8009ada <ucdr_deserialize_uint32_t+0x72>
 8009b86:	bf00      	nop

08009b88 <ucdr_deserialize_endian_uint32_t>:
 8009b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b8c:	460e      	mov	r6, r1
 8009b8e:	2104      	movs	r1, #4
 8009b90:	4604      	mov	r4, r0
 8009b92:	4615      	mov	r5, r2
 8009b94:	f000 fd70 	bl	800a678 <ucdr_buffer_alignment>
 8009b98:	4601      	mov	r1, r0
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009ba0:	f000 fdae 	bl	800a700 <ucdr_advance_buffer>
 8009ba4:	2104      	movs	r1, #4
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f000 fd06 	bl	800a5b8 <ucdr_check_buffer_available_for>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d13c      	bne.n	8009c2a <ucdr_deserialize_endian_uint32_t+0xa2>
 8009bb0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8009bb4:	42bb      	cmp	r3, r7
 8009bb6:	d933      	bls.n	8009c20 <ucdr_deserialize_endian_uint32_t+0x98>
 8009bb8:	eba3 0807 	sub.w	r8, r3, r7
 8009bbc:	60a3      	str	r3, [r4, #8]
 8009bbe:	6923      	ldr	r3, [r4, #16]
 8009bc0:	f1c8 0a04 	rsb	sl, r8, #4
 8009bc4:	4443      	add	r3, r8
 8009bc6:	6123      	str	r3, [r4, #16]
 8009bc8:	4651      	mov	r1, sl
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f000 fd00 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d048      	beq.n	8009c66 <ucdr_deserialize_endian_uint32_t+0xde>
 8009bd4:	2e01      	cmp	r6, #1
 8009bd6:	d061      	beq.n	8009c9c <ucdr_deserialize_endian_uint32_t+0x114>
 8009bd8:	78fb      	ldrb	r3, [r7, #3]
 8009bda:	702b      	strb	r3, [r5, #0]
 8009bdc:	f1b8 0f00 	cmp.w	r8, #0
 8009be0:	d050      	beq.n	8009c84 <ucdr_deserialize_endian_uint32_t+0xfc>
 8009be2:	78bb      	ldrb	r3, [r7, #2]
 8009be4:	706b      	strb	r3, [r5, #1]
 8009be6:	f1b8 0f01 	cmp.w	r8, #1
 8009bea:	f105 0302 	add.w	r3, r5, #2
 8009bee:	d04d      	beq.n	8009c8c <ucdr_deserialize_endian_uint32_t+0x104>
 8009bf0:	787b      	ldrb	r3, [r7, #1]
 8009bf2:	70ab      	strb	r3, [r5, #2]
 8009bf4:	f1b8 0f02 	cmp.w	r8, #2
 8009bf8:	f105 0303 	add.w	r3, r5, #3
 8009bfc:	d04a      	beq.n	8009c94 <ucdr_deserialize_endian_uint32_t+0x10c>
 8009bfe:	783b      	ldrb	r3, [r7, #0]
 8009c00:	70eb      	strb	r3, [r5, #3]
 8009c02:	6923      	ldr	r3, [r4, #16]
 8009c04:	68a2      	ldr	r2, [r4, #8]
 8009c06:	7da0      	ldrb	r0, [r4, #22]
 8009c08:	2104      	movs	r1, #4
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	4452      	add	r2, sl
 8009c0e:	eba3 0308 	sub.w	r3, r3, r8
 8009c12:	7561      	strb	r1, [r4, #21]
 8009c14:	60a2      	str	r2, [r4, #8]
 8009c16:	6123      	str	r3, [r4, #16]
 8009c18:	f080 0001 	eor.w	r0, r0, #1
 8009c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c20:	2104      	movs	r1, #4
 8009c22:	4620      	mov	r0, r4
 8009c24:	f000 fcd4 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 8009c28:	b1a8      	cbz	r0, 8009c56 <ucdr_deserialize_endian_uint32_t+0xce>
 8009c2a:	2e01      	cmp	r6, #1
 8009c2c:	68a3      	ldr	r3, [r4, #8]
 8009c2e:	d017      	beq.n	8009c60 <ucdr_deserialize_endian_uint32_t+0xd8>
 8009c30:	78db      	ldrb	r3, [r3, #3]
 8009c32:	702b      	strb	r3, [r5, #0]
 8009c34:	68a3      	ldr	r3, [r4, #8]
 8009c36:	789b      	ldrb	r3, [r3, #2]
 8009c38:	706b      	strb	r3, [r5, #1]
 8009c3a:	68a3      	ldr	r3, [r4, #8]
 8009c3c:	785b      	ldrb	r3, [r3, #1]
 8009c3e:	70ab      	strb	r3, [r5, #2]
 8009c40:	68a3      	ldr	r3, [r4, #8]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	70eb      	strb	r3, [r5, #3]
 8009c46:	68a2      	ldr	r2, [r4, #8]
 8009c48:	6923      	ldr	r3, [r4, #16]
 8009c4a:	3204      	adds	r2, #4
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	2104      	movs	r1, #4
 8009c50:	60a2      	str	r2, [r4, #8]
 8009c52:	6123      	str	r3, [r4, #16]
 8009c54:	7561      	strb	r1, [r4, #21]
 8009c56:	7da0      	ldrb	r0, [r4, #22]
 8009c58:	f080 0001 	eor.w	r0, r0, #1
 8009c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	602b      	str	r3, [r5, #0]
 8009c64:	e7ef      	b.n	8009c46 <ucdr_deserialize_endian_uint32_t+0xbe>
 8009c66:	68a2      	ldr	r2, [r4, #8]
 8009c68:	6923      	ldr	r3, [r4, #16]
 8009c6a:	7da0      	ldrb	r0, [r4, #22]
 8009c6c:	f884 9015 	strb.w	r9, [r4, #21]
 8009c70:	eba2 0208 	sub.w	r2, r2, r8
 8009c74:	eba3 0308 	sub.w	r3, r3, r8
 8009c78:	60a2      	str	r2, [r4, #8]
 8009c7a:	6123      	str	r3, [r4, #16]
 8009c7c:	f080 0001 	eor.w	r0, r0, #1
 8009c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c84:	68a3      	ldr	r3, [r4, #8]
 8009c86:	789b      	ldrb	r3, [r3, #2]
 8009c88:	706b      	strb	r3, [r5, #1]
 8009c8a:	1cab      	adds	r3, r5, #2
 8009c8c:	68a2      	ldr	r2, [r4, #8]
 8009c8e:	7852      	ldrb	r2, [r2, #1]
 8009c90:	f803 2b01 	strb.w	r2, [r3], #1
 8009c94:	68a2      	ldr	r2, [r4, #8]
 8009c96:	7812      	ldrb	r2, [r2, #0]
 8009c98:	701a      	strb	r2, [r3, #0]
 8009c9a:	e7b2      	b.n	8009c02 <ucdr_deserialize_endian_uint32_t+0x7a>
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	4642      	mov	r2, r8
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	f00c fd76 	bl	8016792 <memcpy>
 8009ca6:	68a1      	ldr	r1, [r4, #8]
 8009ca8:	4652      	mov	r2, sl
 8009caa:	eb05 0008 	add.w	r0, r5, r8
 8009cae:	f00c fd70 	bl	8016792 <memcpy>
 8009cb2:	e7a6      	b.n	8009c02 <ucdr_deserialize_endian_uint32_t+0x7a>

08009cb4 <ucdr_serialize_uint64_t>:
 8009cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb8:	2108      	movs	r1, #8
 8009cba:	b082      	sub	sp, #8
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	e9cd 2300 	strd	r2, r3, [sp]
 8009cc2:	f000 fcd9 	bl	800a678 <ucdr_buffer_alignment>
 8009cc6:	4601      	mov	r1, r0
 8009cc8:	4620      	mov	r0, r4
 8009cca:	7d67      	ldrb	r7, [r4, #21]
 8009ccc:	f000 fd18 	bl	800a700 <ucdr_advance_buffer>
 8009cd0:	2108      	movs	r1, #8
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f000 fc70 	bl	800a5b8 <ucdr_check_buffer_available_for>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d14e      	bne.n	8009d7a <ucdr_serialize_uint64_t+0xc6>
 8009cdc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009ce0:	42ab      	cmp	r3, r5
 8009ce2:	d945      	bls.n	8009d70 <ucdr_serialize_uint64_t+0xbc>
 8009ce4:	1b5e      	subs	r6, r3, r5
 8009ce6:	60a3      	str	r3, [r4, #8]
 8009ce8:	6923      	ldr	r3, [r4, #16]
 8009cea:	f1c6 0808 	rsb	r8, r6, #8
 8009cee:	4433      	add	r3, r6
 8009cf0:	6123      	str	r3, [r4, #16]
 8009cf2:	4641      	mov	r1, r8
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f000 fc6b 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d074      	beq.n	8009de8 <ucdr_serialize_uint64_t+0x134>
 8009cfe:	7d23      	ldrb	r3, [r4, #20]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	f000 809b 	beq.w	8009e3c <ucdr_serialize_uint64_t+0x188>
 8009d06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009d0a:	702b      	strb	r3, [r5, #0]
 8009d0c:	2e00      	cmp	r6, #0
 8009d0e:	d078      	beq.n	8009e02 <ucdr_serialize_uint64_t+0x14e>
 8009d10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009d14:	706b      	strb	r3, [r5, #1]
 8009d16:	2e01      	cmp	r6, #1
 8009d18:	d077      	beq.n	8009e0a <ucdr_serialize_uint64_t+0x156>
 8009d1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009d1e:	70ab      	strb	r3, [r5, #2]
 8009d20:	2e02      	cmp	r6, #2
 8009d22:	d076      	beq.n	8009e12 <ucdr_serialize_uint64_t+0x15e>
 8009d24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009d28:	70eb      	strb	r3, [r5, #3]
 8009d2a:	2e03      	cmp	r6, #3
 8009d2c:	d075      	beq.n	8009e1a <ucdr_serialize_uint64_t+0x166>
 8009d2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009d32:	712b      	strb	r3, [r5, #4]
 8009d34:	2e04      	cmp	r6, #4
 8009d36:	d074      	beq.n	8009e22 <ucdr_serialize_uint64_t+0x16e>
 8009d38:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009d3c:	716b      	strb	r3, [r5, #5]
 8009d3e:	2e05      	cmp	r6, #5
 8009d40:	d073      	beq.n	8009e2a <ucdr_serialize_uint64_t+0x176>
 8009d42:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8009d46:	71ab      	strb	r3, [r5, #6]
 8009d48:	2e06      	cmp	r6, #6
 8009d4a:	d072      	beq.n	8009e32 <ucdr_serialize_uint64_t+0x17e>
 8009d4c:	f89d 3000 	ldrb.w	r3, [sp]
 8009d50:	71eb      	strb	r3, [r5, #7]
 8009d52:	6923      	ldr	r3, [r4, #16]
 8009d54:	68a2      	ldr	r2, [r4, #8]
 8009d56:	7da0      	ldrb	r0, [r4, #22]
 8009d58:	3308      	adds	r3, #8
 8009d5a:	1b9e      	subs	r6, r3, r6
 8009d5c:	4442      	add	r2, r8
 8009d5e:	2308      	movs	r3, #8
 8009d60:	f080 0001 	eor.w	r0, r0, #1
 8009d64:	60a2      	str	r2, [r4, #8]
 8009d66:	6126      	str	r6, [r4, #16]
 8009d68:	7563      	strb	r3, [r4, #21]
 8009d6a:	b002      	add	sp, #8
 8009d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d70:	2108      	movs	r1, #8
 8009d72:	4620      	mov	r0, r4
 8009d74:	f000 fc2c 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 8009d78:	b350      	cbz	r0, 8009dd0 <ucdr_serialize_uint64_t+0x11c>
 8009d7a:	7d23      	ldrb	r3, [r4, #20]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d02d      	beq.n	8009ddc <ucdr_serialize_uint64_t+0x128>
 8009d80:	68a3      	ldr	r3, [r4, #8]
 8009d82:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009d86:	701a      	strb	r2, [r3, #0]
 8009d88:	68a3      	ldr	r3, [r4, #8]
 8009d8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009d8e:	705a      	strb	r2, [r3, #1]
 8009d90:	68a3      	ldr	r3, [r4, #8]
 8009d92:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009d96:	709a      	strb	r2, [r3, #2]
 8009d98:	68a3      	ldr	r3, [r4, #8]
 8009d9a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009d9e:	70da      	strb	r2, [r3, #3]
 8009da0:	68a3      	ldr	r3, [r4, #8]
 8009da2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009da6:	711a      	strb	r2, [r3, #4]
 8009da8:	68a3      	ldr	r3, [r4, #8]
 8009daa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009dae:	715a      	strb	r2, [r3, #5]
 8009db0:	68a3      	ldr	r3, [r4, #8]
 8009db2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009db6:	719a      	strb	r2, [r3, #6]
 8009db8:	68a3      	ldr	r3, [r4, #8]
 8009dba:	f89d 2000 	ldrb.w	r2, [sp]
 8009dbe:	71da      	strb	r2, [r3, #7]
 8009dc0:	68a2      	ldr	r2, [r4, #8]
 8009dc2:	6923      	ldr	r3, [r4, #16]
 8009dc4:	3208      	adds	r2, #8
 8009dc6:	3308      	adds	r3, #8
 8009dc8:	2108      	movs	r1, #8
 8009dca:	60a2      	str	r2, [r4, #8]
 8009dcc:	6123      	str	r3, [r4, #16]
 8009dce:	7561      	strb	r1, [r4, #21]
 8009dd0:	7da0      	ldrb	r0, [r4, #22]
 8009dd2:	f080 0001 	eor.w	r0, r0, #1
 8009dd6:	b002      	add	sp, #8
 8009dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ddc:	466b      	mov	r3, sp
 8009dde:	cb03      	ldmia	r3!, {r0, r1}
 8009de0:	68a3      	ldr	r3, [r4, #8]
 8009de2:	6018      	str	r0, [r3, #0]
 8009de4:	6059      	str	r1, [r3, #4]
 8009de6:	e7eb      	b.n	8009dc0 <ucdr_serialize_uint64_t+0x10c>
 8009de8:	68a2      	ldr	r2, [r4, #8]
 8009dea:	6923      	ldr	r3, [r4, #16]
 8009dec:	7da0      	ldrb	r0, [r4, #22]
 8009dee:	7567      	strb	r7, [r4, #21]
 8009df0:	1b92      	subs	r2, r2, r6
 8009df2:	1b9b      	subs	r3, r3, r6
 8009df4:	f080 0001 	eor.w	r0, r0, #1
 8009df8:	60a2      	str	r2, [r4, #8]
 8009dfa:	6123      	str	r3, [r4, #16]
 8009dfc:	b002      	add	sp, #8
 8009dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e02:	68a3      	ldr	r3, [r4, #8]
 8009e04:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009e08:	701a      	strb	r2, [r3, #0]
 8009e0a:	68a3      	ldr	r3, [r4, #8]
 8009e0c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009e10:	701a      	strb	r2, [r3, #0]
 8009e12:	68a3      	ldr	r3, [r4, #8]
 8009e14:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009e18:	701a      	strb	r2, [r3, #0]
 8009e1a:	68a3      	ldr	r3, [r4, #8]
 8009e1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009e20:	701a      	strb	r2, [r3, #0]
 8009e22:	68a3      	ldr	r3, [r4, #8]
 8009e24:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009e28:	701a      	strb	r2, [r3, #0]
 8009e2a:	68a3      	ldr	r3, [r4, #8]
 8009e2c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009e30:	701a      	strb	r2, [r3, #0]
 8009e32:	68a3      	ldr	r3, [r4, #8]
 8009e34:	f89d 2000 	ldrb.w	r2, [sp]
 8009e38:	701a      	strb	r2, [r3, #0]
 8009e3a:	e78a      	b.n	8009d52 <ucdr_serialize_uint64_t+0x9e>
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	466d      	mov	r5, sp
 8009e40:	4629      	mov	r1, r5
 8009e42:	4632      	mov	r2, r6
 8009e44:	f00c fca5 	bl	8016792 <memcpy>
 8009e48:	68a0      	ldr	r0, [r4, #8]
 8009e4a:	4642      	mov	r2, r8
 8009e4c:	19a9      	adds	r1, r5, r6
 8009e4e:	f00c fca0 	bl	8016792 <memcpy>
 8009e52:	e77e      	b.n	8009d52 <ucdr_serialize_uint64_t+0x9e>

08009e54 <ucdr_serialize_int16_t>:
 8009e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e58:	b082      	sub	sp, #8
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	2102      	movs	r1, #2
 8009e5e:	4604      	mov	r4, r0
 8009e60:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009e64:	f000 fc08 	bl	800a678 <ucdr_buffer_alignment>
 8009e68:	4601      	mov	r1, r0
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	7d67      	ldrb	r7, [r4, #21]
 8009e6e:	f000 fc47 	bl	800a700 <ucdr_advance_buffer>
 8009e72:	2102      	movs	r1, #2
 8009e74:	4620      	mov	r0, r4
 8009e76:	f000 fb9f 	bl	800a5b8 <ucdr_check_buffer_available_for>
 8009e7a:	bb78      	cbnz	r0, 8009edc <ucdr_serialize_int16_t+0x88>
 8009e7c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009e80:	42ab      	cmp	r3, r5
 8009e82:	d926      	bls.n	8009ed2 <ucdr_serialize_int16_t+0x7e>
 8009e84:	1b5e      	subs	r6, r3, r5
 8009e86:	60a3      	str	r3, [r4, #8]
 8009e88:	6923      	ldr	r3, [r4, #16]
 8009e8a:	f1c6 0802 	rsb	r8, r6, #2
 8009e8e:	4433      	add	r3, r6
 8009e90:	6123      	str	r3, [r4, #16]
 8009e92:	4641      	mov	r1, r8
 8009e94:	4620      	mov	r0, r4
 8009e96:	f000 fb9b 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d03b      	beq.n	8009f16 <ucdr_serialize_int16_t+0xc2>
 8009e9e:	7d23      	ldrb	r3, [r4, #20]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d04a      	beq.n	8009f3a <ucdr_serialize_int16_t+0xe6>
 8009ea4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009ea8:	702b      	strb	r3, [r5, #0]
 8009eaa:	2e00      	cmp	r6, #0
 8009eac:	d040      	beq.n	8009f30 <ucdr_serialize_int16_t+0xdc>
 8009eae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009eb2:	706b      	strb	r3, [r5, #1]
 8009eb4:	6923      	ldr	r3, [r4, #16]
 8009eb6:	68a2      	ldr	r2, [r4, #8]
 8009eb8:	7da0      	ldrb	r0, [r4, #22]
 8009eba:	3302      	adds	r3, #2
 8009ebc:	1b9e      	subs	r6, r3, r6
 8009ebe:	4442      	add	r2, r8
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	f080 0001 	eor.w	r0, r0, #1
 8009ec6:	60a2      	str	r2, [r4, #8]
 8009ec8:	6126      	str	r6, [r4, #16]
 8009eca:	7563      	strb	r3, [r4, #21]
 8009ecc:	b002      	add	sp, #8
 8009ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed2:	2102      	movs	r1, #2
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f000 fb7b 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 8009eda:	b190      	cbz	r0, 8009f02 <ucdr_serialize_int16_t+0xae>
 8009edc:	7d23      	ldrb	r3, [r4, #20]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	68a3      	ldr	r3, [r4, #8]
 8009ee2:	d014      	beq.n	8009f0e <ucdr_serialize_int16_t+0xba>
 8009ee4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009ee8:	701a      	strb	r2, [r3, #0]
 8009eea:	68a3      	ldr	r3, [r4, #8]
 8009eec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009ef0:	705a      	strb	r2, [r3, #1]
 8009ef2:	68a2      	ldr	r2, [r4, #8]
 8009ef4:	6923      	ldr	r3, [r4, #16]
 8009ef6:	3202      	adds	r2, #2
 8009ef8:	3302      	adds	r3, #2
 8009efa:	2102      	movs	r1, #2
 8009efc:	60a2      	str	r2, [r4, #8]
 8009efe:	6123      	str	r3, [r4, #16]
 8009f00:	7561      	strb	r1, [r4, #21]
 8009f02:	7da0      	ldrb	r0, [r4, #22]
 8009f04:	f080 0001 	eor.w	r0, r0, #1
 8009f08:	b002      	add	sp, #8
 8009f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f0e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009f12:	801a      	strh	r2, [r3, #0]
 8009f14:	e7ed      	b.n	8009ef2 <ucdr_serialize_int16_t+0x9e>
 8009f16:	68a2      	ldr	r2, [r4, #8]
 8009f18:	6923      	ldr	r3, [r4, #16]
 8009f1a:	7da0      	ldrb	r0, [r4, #22]
 8009f1c:	7567      	strb	r7, [r4, #21]
 8009f1e:	1b92      	subs	r2, r2, r6
 8009f20:	1b9b      	subs	r3, r3, r6
 8009f22:	f080 0001 	eor.w	r0, r0, #1
 8009f26:	60a2      	str	r2, [r4, #8]
 8009f28:	6123      	str	r3, [r4, #16]
 8009f2a:	b002      	add	sp, #8
 8009f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f30:	68a3      	ldr	r3, [r4, #8]
 8009f32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009f36:	701a      	strb	r2, [r3, #0]
 8009f38:	e7bc      	b.n	8009eb4 <ucdr_serialize_int16_t+0x60>
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	f10d 0506 	add.w	r5, sp, #6
 8009f40:	4629      	mov	r1, r5
 8009f42:	4632      	mov	r2, r6
 8009f44:	f00c fc25 	bl	8016792 <memcpy>
 8009f48:	68a0      	ldr	r0, [r4, #8]
 8009f4a:	4642      	mov	r2, r8
 8009f4c:	19a9      	adds	r1, r5, r6
 8009f4e:	f00c fc20 	bl	8016792 <memcpy>
 8009f52:	e7af      	b.n	8009eb4 <ucdr_serialize_int16_t+0x60>

08009f54 <ucdr_deserialize_int16_t>:
 8009f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f58:	460d      	mov	r5, r1
 8009f5a:	2102      	movs	r1, #2
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	f000 fb8b 	bl	800a678 <ucdr_buffer_alignment>
 8009f62:	4601      	mov	r1, r0
 8009f64:	4620      	mov	r0, r4
 8009f66:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009f6a:	f000 fbc9 	bl	800a700 <ucdr_advance_buffer>
 8009f6e:	2102      	movs	r1, #2
 8009f70:	4620      	mov	r0, r4
 8009f72:	f000 fb21 	bl	800a5b8 <ucdr_check_buffer_available_for>
 8009f76:	bb60      	cbnz	r0, 8009fd2 <ucdr_deserialize_int16_t+0x7e>
 8009f78:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009f7c:	42be      	cmp	r6, r7
 8009f7e:	d923      	bls.n	8009fc8 <ucdr_deserialize_int16_t+0x74>
 8009f80:	6923      	ldr	r3, [r4, #16]
 8009f82:	60a6      	str	r6, [r4, #8]
 8009f84:	1bf6      	subs	r6, r6, r7
 8009f86:	4433      	add	r3, r6
 8009f88:	f1c6 0902 	rsb	r9, r6, #2
 8009f8c:	6123      	str	r3, [r4, #16]
 8009f8e:	4649      	mov	r1, r9
 8009f90:	4620      	mov	r0, r4
 8009f92:	f000 fb1d 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d034      	beq.n	800a004 <ucdr_deserialize_int16_t+0xb0>
 8009f9a:	7d23      	ldrb	r3, [r4, #20]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d042      	beq.n	800a026 <ucdr_deserialize_int16_t+0xd2>
 8009fa0:	787b      	ldrb	r3, [r7, #1]
 8009fa2:	702b      	strb	r3, [r5, #0]
 8009fa4:	2e00      	cmp	r6, #0
 8009fa6:	d03a      	beq.n	800a01e <ucdr_deserialize_int16_t+0xca>
 8009fa8:	783b      	ldrb	r3, [r7, #0]
 8009faa:	706b      	strb	r3, [r5, #1]
 8009fac:	6923      	ldr	r3, [r4, #16]
 8009fae:	68a2      	ldr	r2, [r4, #8]
 8009fb0:	7da0      	ldrb	r0, [r4, #22]
 8009fb2:	2102      	movs	r1, #2
 8009fb4:	3302      	adds	r3, #2
 8009fb6:	444a      	add	r2, r9
 8009fb8:	1b9b      	subs	r3, r3, r6
 8009fba:	7561      	strb	r1, [r4, #21]
 8009fbc:	60a2      	str	r2, [r4, #8]
 8009fbe:	6123      	str	r3, [r4, #16]
 8009fc0:	f080 0001 	eor.w	r0, r0, #1
 8009fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fc8:	2102      	movs	r1, #2
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f000 fb00 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 8009fd0:	b180      	cbz	r0, 8009ff4 <ucdr_deserialize_int16_t+0xa0>
 8009fd2:	7d23      	ldrb	r3, [r4, #20]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	68a3      	ldr	r3, [r4, #8]
 8009fd8:	d011      	beq.n	8009ffe <ucdr_deserialize_int16_t+0xaa>
 8009fda:	785b      	ldrb	r3, [r3, #1]
 8009fdc:	702b      	strb	r3, [r5, #0]
 8009fde:	68a3      	ldr	r3, [r4, #8]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	706b      	strb	r3, [r5, #1]
 8009fe4:	68a2      	ldr	r2, [r4, #8]
 8009fe6:	6923      	ldr	r3, [r4, #16]
 8009fe8:	3202      	adds	r2, #2
 8009fea:	3302      	adds	r3, #2
 8009fec:	2102      	movs	r1, #2
 8009fee:	60a2      	str	r2, [r4, #8]
 8009ff0:	6123      	str	r3, [r4, #16]
 8009ff2:	7561      	strb	r1, [r4, #21]
 8009ff4:	7da0      	ldrb	r0, [r4, #22]
 8009ff6:	f080 0001 	eor.w	r0, r0, #1
 8009ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ffe:	881b      	ldrh	r3, [r3, #0]
 800a000:	802b      	strh	r3, [r5, #0]
 800a002:	e7ef      	b.n	8009fe4 <ucdr_deserialize_int16_t+0x90>
 800a004:	68a2      	ldr	r2, [r4, #8]
 800a006:	6923      	ldr	r3, [r4, #16]
 800a008:	7da0      	ldrb	r0, [r4, #22]
 800a00a:	f884 8015 	strb.w	r8, [r4, #21]
 800a00e:	1b92      	subs	r2, r2, r6
 800a010:	1b9b      	subs	r3, r3, r6
 800a012:	60a2      	str	r2, [r4, #8]
 800a014:	6123      	str	r3, [r4, #16]
 800a016:	f080 0001 	eor.w	r0, r0, #1
 800a01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a01e:	68a3      	ldr	r3, [r4, #8]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	706b      	strb	r3, [r5, #1]
 800a024:	e7c2      	b.n	8009fac <ucdr_deserialize_int16_t+0x58>
 800a026:	4639      	mov	r1, r7
 800a028:	4632      	mov	r2, r6
 800a02a:	4628      	mov	r0, r5
 800a02c:	f00c fbb1 	bl	8016792 <memcpy>
 800a030:	68a1      	ldr	r1, [r4, #8]
 800a032:	464a      	mov	r2, r9
 800a034:	19a8      	adds	r0, r5, r6
 800a036:	f00c fbac 	bl	8016792 <memcpy>
 800a03a:	e7b7      	b.n	8009fac <ucdr_deserialize_int16_t+0x58>

0800a03c <ucdr_serialize_int32_t>:
 800a03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a040:	b082      	sub	sp, #8
 800a042:	4604      	mov	r4, r0
 800a044:	9101      	str	r1, [sp, #4]
 800a046:	2104      	movs	r1, #4
 800a048:	f000 fb16 	bl	800a678 <ucdr_buffer_alignment>
 800a04c:	4601      	mov	r1, r0
 800a04e:	4620      	mov	r0, r4
 800a050:	7d67      	ldrb	r7, [r4, #21]
 800a052:	f000 fb55 	bl	800a700 <ucdr_advance_buffer>
 800a056:	2104      	movs	r1, #4
 800a058:	4620      	mov	r0, r4
 800a05a:	f000 faad 	bl	800a5b8 <ucdr_check_buffer_available_for>
 800a05e:	2800      	cmp	r0, #0
 800a060:	d139      	bne.n	800a0d6 <ucdr_serialize_int32_t+0x9a>
 800a062:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a066:	42ab      	cmp	r3, r5
 800a068:	d930      	bls.n	800a0cc <ucdr_serialize_int32_t+0x90>
 800a06a:	1b5e      	subs	r6, r3, r5
 800a06c:	60a3      	str	r3, [r4, #8]
 800a06e:	6923      	ldr	r3, [r4, #16]
 800a070:	f1c6 0804 	rsb	r8, r6, #4
 800a074:	4433      	add	r3, r6
 800a076:	6123      	str	r3, [r4, #16]
 800a078:	4641      	mov	r1, r8
 800a07a:	4620      	mov	r0, r4
 800a07c:	f000 faa8 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 800a080:	2800      	cmp	r0, #0
 800a082:	d04c      	beq.n	800a11e <ucdr_serialize_int32_t+0xe2>
 800a084:	7d23      	ldrb	r3, [r4, #20]
 800a086:	2b01      	cmp	r3, #1
 800a088:	d063      	beq.n	800a152 <ucdr_serialize_int32_t+0x116>
 800a08a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a08e:	702b      	strb	r3, [r5, #0]
 800a090:	2e00      	cmp	r6, #0
 800a092:	d051      	beq.n	800a138 <ucdr_serialize_int32_t+0xfc>
 800a094:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a098:	706b      	strb	r3, [r5, #1]
 800a09a:	2e01      	cmp	r6, #1
 800a09c:	d050      	beq.n	800a140 <ucdr_serialize_int32_t+0x104>
 800a09e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a0a2:	70ab      	strb	r3, [r5, #2]
 800a0a4:	2e02      	cmp	r6, #2
 800a0a6:	d04f      	beq.n	800a148 <ucdr_serialize_int32_t+0x10c>
 800a0a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a0ac:	70eb      	strb	r3, [r5, #3]
 800a0ae:	6923      	ldr	r3, [r4, #16]
 800a0b0:	68a2      	ldr	r2, [r4, #8]
 800a0b2:	7da0      	ldrb	r0, [r4, #22]
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	1b9e      	subs	r6, r3, r6
 800a0b8:	4442      	add	r2, r8
 800a0ba:	2304      	movs	r3, #4
 800a0bc:	f080 0001 	eor.w	r0, r0, #1
 800a0c0:	60a2      	str	r2, [r4, #8]
 800a0c2:	6126      	str	r6, [r4, #16]
 800a0c4:	7563      	strb	r3, [r4, #21]
 800a0c6:	b002      	add	sp, #8
 800a0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0cc:	2104      	movs	r1, #4
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 fa7e 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 800a0d4:	b1d0      	cbz	r0, 800a10c <ucdr_serialize_int32_t+0xd0>
 800a0d6:	7d23      	ldrb	r3, [r4, #20]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	68a3      	ldr	r3, [r4, #8]
 800a0dc:	d01c      	beq.n	800a118 <ucdr_serialize_int32_t+0xdc>
 800a0de:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a0e2:	701a      	strb	r2, [r3, #0]
 800a0e4:	68a3      	ldr	r3, [r4, #8]
 800a0e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a0ea:	705a      	strb	r2, [r3, #1]
 800a0ec:	68a3      	ldr	r3, [r4, #8]
 800a0ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a0f2:	709a      	strb	r2, [r3, #2]
 800a0f4:	68a3      	ldr	r3, [r4, #8]
 800a0f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a0fa:	70da      	strb	r2, [r3, #3]
 800a0fc:	68a2      	ldr	r2, [r4, #8]
 800a0fe:	6923      	ldr	r3, [r4, #16]
 800a100:	3204      	adds	r2, #4
 800a102:	3304      	adds	r3, #4
 800a104:	2104      	movs	r1, #4
 800a106:	60a2      	str	r2, [r4, #8]
 800a108:	6123      	str	r3, [r4, #16]
 800a10a:	7561      	strb	r1, [r4, #21]
 800a10c:	7da0      	ldrb	r0, [r4, #22]
 800a10e:	f080 0001 	eor.w	r0, r0, #1
 800a112:	b002      	add	sp, #8
 800a114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a118:	9a01      	ldr	r2, [sp, #4]
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	e7ee      	b.n	800a0fc <ucdr_serialize_int32_t+0xc0>
 800a11e:	68a2      	ldr	r2, [r4, #8]
 800a120:	6923      	ldr	r3, [r4, #16]
 800a122:	7da0      	ldrb	r0, [r4, #22]
 800a124:	7567      	strb	r7, [r4, #21]
 800a126:	1b92      	subs	r2, r2, r6
 800a128:	1b9b      	subs	r3, r3, r6
 800a12a:	f080 0001 	eor.w	r0, r0, #1
 800a12e:	60a2      	str	r2, [r4, #8]
 800a130:	6123      	str	r3, [r4, #16]
 800a132:	b002      	add	sp, #8
 800a134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a138:	68a3      	ldr	r3, [r4, #8]
 800a13a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a13e:	701a      	strb	r2, [r3, #0]
 800a140:	68a3      	ldr	r3, [r4, #8]
 800a142:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a146:	701a      	strb	r2, [r3, #0]
 800a148:	68a3      	ldr	r3, [r4, #8]
 800a14a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a14e:	701a      	strb	r2, [r3, #0]
 800a150:	e7ad      	b.n	800a0ae <ucdr_serialize_int32_t+0x72>
 800a152:	4628      	mov	r0, r5
 800a154:	ad01      	add	r5, sp, #4
 800a156:	4629      	mov	r1, r5
 800a158:	4632      	mov	r2, r6
 800a15a:	f00c fb1a 	bl	8016792 <memcpy>
 800a15e:	68a0      	ldr	r0, [r4, #8]
 800a160:	4642      	mov	r2, r8
 800a162:	19a9      	adds	r1, r5, r6
 800a164:	f00c fb15 	bl	8016792 <memcpy>
 800a168:	e7a1      	b.n	800a0ae <ucdr_serialize_int32_t+0x72>
 800a16a:	bf00      	nop

0800a16c <ucdr_deserialize_int32_t>:
 800a16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a170:	460d      	mov	r5, r1
 800a172:	2104      	movs	r1, #4
 800a174:	4604      	mov	r4, r0
 800a176:	f000 fa7f 	bl	800a678 <ucdr_buffer_alignment>
 800a17a:	4601      	mov	r1, r0
 800a17c:	4620      	mov	r0, r4
 800a17e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a182:	f000 fabd 	bl	800a700 <ucdr_advance_buffer>
 800a186:	2104      	movs	r1, #4
 800a188:	4620      	mov	r0, r4
 800a18a:	f000 fa15 	bl	800a5b8 <ucdr_check_buffer_available_for>
 800a18e:	2800      	cmp	r0, #0
 800a190:	d138      	bne.n	800a204 <ucdr_deserialize_int32_t+0x98>
 800a192:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a196:	42b7      	cmp	r7, r6
 800a198:	d92f      	bls.n	800a1fa <ucdr_deserialize_int32_t+0x8e>
 800a19a:	6923      	ldr	r3, [r4, #16]
 800a19c:	60a7      	str	r7, [r4, #8]
 800a19e:	1bbf      	subs	r7, r7, r6
 800a1a0:	443b      	add	r3, r7
 800a1a2:	f1c7 0904 	rsb	r9, r7, #4
 800a1a6:	6123      	str	r3, [r4, #16]
 800a1a8:	4649      	mov	r1, r9
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f000 fa10 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d046      	beq.n	800a242 <ucdr_deserialize_int32_t+0xd6>
 800a1b4:	7d23      	ldrb	r3, [r4, #20]
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d05c      	beq.n	800a274 <ucdr_deserialize_int32_t+0x108>
 800a1ba:	78f3      	ldrb	r3, [r6, #3]
 800a1bc:	702b      	strb	r3, [r5, #0]
 800a1be:	2f00      	cmp	r7, #0
 800a1c0:	d04c      	beq.n	800a25c <ucdr_deserialize_int32_t+0xf0>
 800a1c2:	78b3      	ldrb	r3, [r6, #2]
 800a1c4:	706b      	strb	r3, [r5, #1]
 800a1c6:	2f01      	cmp	r7, #1
 800a1c8:	f105 0302 	add.w	r3, r5, #2
 800a1cc:	d04a      	beq.n	800a264 <ucdr_deserialize_int32_t+0xf8>
 800a1ce:	7873      	ldrb	r3, [r6, #1]
 800a1d0:	70ab      	strb	r3, [r5, #2]
 800a1d2:	2f02      	cmp	r7, #2
 800a1d4:	f105 0303 	add.w	r3, r5, #3
 800a1d8:	d048      	beq.n	800a26c <ucdr_deserialize_int32_t+0x100>
 800a1da:	7833      	ldrb	r3, [r6, #0]
 800a1dc:	70eb      	strb	r3, [r5, #3]
 800a1de:	6923      	ldr	r3, [r4, #16]
 800a1e0:	68a2      	ldr	r2, [r4, #8]
 800a1e2:	7da0      	ldrb	r0, [r4, #22]
 800a1e4:	2104      	movs	r1, #4
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	444a      	add	r2, r9
 800a1ea:	1bdb      	subs	r3, r3, r7
 800a1ec:	7561      	strb	r1, [r4, #21]
 800a1ee:	60a2      	str	r2, [r4, #8]
 800a1f0:	6123      	str	r3, [r4, #16]
 800a1f2:	f080 0001 	eor.w	r0, r0, #1
 800a1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1fa:	2104      	movs	r1, #4
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f000 f9e7 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 800a202:	b1b0      	cbz	r0, 800a232 <ucdr_deserialize_int32_t+0xc6>
 800a204:	7d23      	ldrb	r3, [r4, #20]
 800a206:	2b01      	cmp	r3, #1
 800a208:	68a3      	ldr	r3, [r4, #8]
 800a20a:	d017      	beq.n	800a23c <ucdr_deserialize_int32_t+0xd0>
 800a20c:	78db      	ldrb	r3, [r3, #3]
 800a20e:	702b      	strb	r3, [r5, #0]
 800a210:	68a3      	ldr	r3, [r4, #8]
 800a212:	789b      	ldrb	r3, [r3, #2]
 800a214:	706b      	strb	r3, [r5, #1]
 800a216:	68a3      	ldr	r3, [r4, #8]
 800a218:	785b      	ldrb	r3, [r3, #1]
 800a21a:	70ab      	strb	r3, [r5, #2]
 800a21c:	68a3      	ldr	r3, [r4, #8]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	70eb      	strb	r3, [r5, #3]
 800a222:	68a2      	ldr	r2, [r4, #8]
 800a224:	6923      	ldr	r3, [r4, #16]
 800a226:	3204      	adds	r2, #4
 800a228:	3304      	adds	r3, #4
 800a22a:	2104      	movs	r1, #4
 800a22c:	60a2      	str	r2, [r4, #8]
 800a22e:	6123      	str	r3, [r4, #16]
 800a230:	7561      	strb	r1, [r4, #21]
 800a232:	7da0      	ldrb	r0, [r4, #22]
 800a234:	f080 0001 	eor.w	r0, r0, #1
 800a238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	602b      	str	r3, [r5, #0]
 800a240:	e7ef      	b.n	800a222 <ucdr_deserialize_int32_t+0xb6>
 800a242:	68a2      	ldr	r2, [r4, #8]
 800a244:	6923      	ldr	r3, [r4, #16]
 800a246:	7da0      	ldrb	r0, [r4, #22]
 800a248:	f884 8015 	strb.w	r8, [r4, #21]
 800a24c:	1bd2      	subs	r2, r2, r7
 800a24e:	1bdb      	subs	r3, r3, r7
 800a250:	60a2      	str	r2, [r4, #8]
 800a252:	6123      	str	r3, [r4, #16]
 800a254:	f080 0001 	eor.w	r0, r0, #1
 800a258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a25c:	68a3      	ldr	r3, [r4, #8]
 800a25e:	789b      	ldrb	r3, [r3, #2]
 800a260:	706b      	strb	r3, [r5, #1]
 800a262:	1cab      	adds	r3, r5, #2
 800a264:	68a2      	ldr	r2, [r4, #8]
 800a266:	7852      	ldrb	r2, [r2, #1]
 800a268:	f803 2b01 	strb.w	r2, [r3], #1
 800a26c:	68a2      	ldr	r2, [r4, #8]
 800a26e:	7812      	ldrb	r2, [r2, #0]
 800a270:	701a      	strb	r2, [r3, #0]
 800a272:	e7b4      	b.n	800a1de <ucdr_deserialize_int32_t+0x72>
 800a274:	4631      	mov	r1, r6
 800a276:	463a      	mov	r2, r7
 800a278:	4628      	mov	r0, r5
 800a27a:	f00c fa8a 	bl	8016792 <memcpy>
 800a27e:	68a1      	ldr	r1, [r4, #8]
 800a280:	464a      	mov	r2, r9
 800a282:	19e8      	adds	r0, r5, r7
 800a284:	f00c fa85 	bl	8016792 <memcpy>
 800a288:	e7a9      	b.n	800a1de <ucdr_deserialize_int32_t+0x72>
 800a28a:	bf00      	nop

0800a28c <ucdr_serialize_double>:
 800a28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a290:	2108      	movs	r1, #8
 800a292:	b082      	sub	sp, #8
 800a294:	4604      	mov	r4, r0
 800a296:	ed8d 0b00 	vstr	d0, [sp]
 800a29a:	f000 f9ed 	bl	800a678 <ucdr_buffer_alignment>
 800a29e:	4601      	mov	r1, r0
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	7d67      	ldrb	r7, [r4, #21]
 800a2a4:	f000 fa2c 	bl	800a700 <ucdr_advance_buffer>
 800a2a8:	2108      	movs	r1, #8
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f000 f984 	bl	800a5b8 <ucdr_check_buffer_available_for>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d14e      	bne.n	800a352 <ucdr_serialize_double+0xc6>
 800a2b4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a2b8:	42ab      	cmp	r3, r5
 800a2ba:	d945      	bls.n	800a348 <ucdr_serialize_double+0xbc>
 800a2bc:	1b5e      	subs	r6, r3, r5
 800a2be:	60a3      	str	r3, [r4, #8]
 800a2c0:	6923      	ldr	r3, [r4, #16]
 800a2c2:	f1c6 0808 	rsb	r8, r6, #8
 800a2c6:	4433      	add	r3, r6
 800a2c8:	6123      	str	r3, [r4, #16]
 800a2ca:	4641      	mov	r1, r8
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f000 f97f 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	d074      	beq.n	800a3c0 <ucdr_serialize_double+0x134>
 800a2d6:	7d23      	ldrb	r3, [r4, #20]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	f000 809b 	beq.w	800a414 <ucdr_serialize_double+0x188>
 800a2de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a2e2:	702b      	strb	r3, [r5, #0]
 800a2e4:	2e00      	cmp	r6, #0
 800a2e6:	d078      	beq.n	800a3da <ucdr_serialize_double+0x14e>
 800a2e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a2ec:	706b      	strb	r3, [r5, #1]
 800a2ee:	2e01      	cmp	r6, #1
 800a2f0:	d077      	beq.n	800a3e2 <ucdr_serialize_double+0x156>
 800a2f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a2f6:	70ab      	strb	r3, [r5, #2]
 800a2f8:	2e02      	cmp	r6, #2
 800a2fa:	d076      	beq.n	800a3ea <ucdr_serialize_double+0x15e>
 800a2fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a300:	70eb      	strb	r3, [r5, #3]
 800a302:	2e03      	cmp	r6, #3
 800a304:	d075      	beq.n	800a3f2 <ucdr_serialize_double+0x166>
 800a306:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a30a:	712b      	strb	r3, [r5, #4]
 800a30c:	2e04      	cmp	r6, #4
 800a30e:	d074      	beq.n	800a3fa <ucdr_serialize_double+0x16e>
 800a310:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800a314:	716b      	strb	r3, [r5, #5]
 800a316:	2e05      	cmp	r6, #5
 800a318:	d073      	beq.n	800a402 <ucdr_serialize_double+0x176>
 800a31a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800a31e:	71ab      	strb	r3, [r5, #6]
 800a320:	2e06      	cmp	r6, #6
 800a322:	d072      	beq.n	800a40a <ucdr_serialize_double+0x17e>
 800a324:	f89d 3000 	ldrb.w	r3, [sp]
 800a328:	71eb      	strb	r3, [r5, #7]
 800a32a:	6923      	ldr	r3, [r4, #16]
 800a32c:	68a2      	ldr	r2, [r4, #8]
 800a32e:	7da0      	ldrb	r0, [r4, #22]
 800a330:	3308      	adds	r3, #8
 800a332:	1b9e      	subs	r6, r3, r6
 800a334:	4442      	add	r2, r8
 800a336:	2308      	movs	r3, #8
 800a338:	f080 0001 	eor.w	r0, r0, #1
 800a33c:	60a2      	str	r2, [r4, #8]
 800a33e:	6126      	str	r6, [r4, #16]
 800a340:	7563      	strb	r3, [r4, #21]
 800a342:	b002      	add	sp, #8
 800a344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a348:	2108      	movs	r1, #8
 800a34a:	4620      	mov	r0, r4
 800a34c:	f000 f940 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 800a350:	b350      	cbz	r0, 800a3a8 <ucdr_serialize_double+0x11c>
 800a352:	7d23      	ldrb	r3, [r4, #20]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d02d      	beq.n	800a3b4 <ucdr_serialize_double+0x128>
 800a358:	68a3      	ldr	r3, [r4, #8]
 800a35a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a35e:	701a      	strb	r2, [r3, #0]
 800a360:	68a3      	ldr	r3, [r4, #8]
 800a362:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a366:	705a      	strb	r2, [r3, #1]
 800a368:	68a3      	ldr	r3, [r4, #8]
 800a36a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a36e:	709a      	strb	r2, [r3, #2]
 800a370:	68a3      	ldr	r3, [r4, #8]
 800a372:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a376:	70da      	strb	r2, [r3, #3]
 800a378:	68a3      	ldr	r3, [r4, #8]
 800a37a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a37e:	711a      	strb	r2, [r3, #4]
 800a380:	68a3      	ldr	r3, [r4, #8]
 800a382:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a386:	715a      	strb	r2, [r3, #5]
 800a388:	68a3      	ldr	r3, [r4, #8]
 800a38a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a38e:	719a      	strb	r2, [r3, #6]
 800a390:	68a3      	ldr	r3, [r4, #8]
 800a392:	f89d 2000 	ldrb.w	r2, [sp]
 800a396:	71da      	strb	r2, [r3, #7]
 800a398:	68a2      	ldr	r2, [r4, #8]
 800a39a:	6923      	ldr	r3, [r4, #16]
 800a39c:	3208      	adds	r2, #8
 800a39e:	3308      	adds	r3, #8
 800a3a0:	2108      	movs	r1, #8
 800a3a2:	60a2      	str	r2, [r4, #8]
 800a3a4:	6123      	str	r3, [r4, #16]
 800a3a6:	7561      	strb	r1, [r4, #21]
 800a3a8:	7da0      	ldrb	r0, [r4, #22]
 800a3aa:	f080 0001 	eor.w	r0, r0, #1
 800a3ae:	b002      	add	sp, #8
 800a3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3b4:	466b      	mov	r3, sp
 800a3b6:	cb03      	ldmia	r3!, {r0, r1}
 800a3b8:	68a3      	ldr	r3, [r4, #8]
 800a3ba:	6018      	str	r0, [r3, #0]
 800a3bc:	6059      	str	r1, [r3, #4]
 800a3be:	e7eb      	b.n	800a398 <ucdr_serialize_double+0x10c>
 800a3c0:	68a2      	ldr	r2, [r4, #8]
 800a3c2:	6923      	ldr	r3, [r4, #16]
 800a3c4:	7da0      	ldrb	r0, [r4, #22]
 800a3c6:	7567      	strb	r7, [r4, #21]
 800a3c8:	1b92      	subs	r2, r2, r6
 800a3ca:	1b9b      	subs	r3, r3, r6
 800a3cc:	f080 0001 	eor.w	r0, r0, #1
 800a3d0:	60a2      	str	r2, [r4, #8]
 800a3d2:	6123      	str	r3, [r4, #16]
 800a3d4:	b002      	add	sp, #8
 800a3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3da:	68a3      	ldr	r3, [r4, #8]
 800a3dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a3e0:	701a      	strb	r2, [r3, #0]
 800a3e2:	68a3      	ldr	r3, [r4, #8]
 800a3e4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a3e8:	701a      	strb	r2, [r3, #0]
 800a3ea:	68a3      	ldr	r3, [r4, #8]
 800a3ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a3f0:	701a      	strb	r2, [r3, #0]
 800a3f2:	68a3      	ldr	r3, [r4, #8]
 800a3f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a3f8:	701a      	strb	r2, [r3, #0]
 800a3fa:	68a3      	ldr	r3, [r4, #8]
 800a3fc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a400:	701a      	strb	r2, [r3, #0]
 800a402:	68a3      	ldr	r3, [r4, #8]
 800a404:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a408:	701a      	strb	r2, [r3, #0]
 800a40a:	68a3      	ldr	r3, [r4, #8]
 800a40c:	f89d 2000 	ldrb.w	r2, [sp]
 800a410:	701a      	strb	r2, [r3, #0]
 800a412:	e78a      	b.n	800a32a <ucdr_serialize_double+0x9e>
 800a414:	4628      	mov	r0, r5
 800a416:	466d      	mov	r5, sp
 800a418:	4629      	mov	r1, r5
 800a41a:	4632      	mov	r2, r6
 800a41c:	f00c f9b9 	bl	8016792 <memcpy>
 800a420:	68a0      	ldr	r0, [r4, #8]
 800a422:	4642      	mov	r2, r8
 800a424:	19a9      	adds	r1, r5, r6
 800a426:	f00c f9b4 	bl	8016792 <memcpy>
 800a42a:	e77e      	b.n	800a32a <ucdr_serialize_double+0x9e>

0800a42c <ucdr_deserialize_double>:
 800a42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a430:	460d      	mov	r5, r1
 800a432:	2108      	movs	r1, #8
 800a434:	4604      	mov	r4, r0
 800a436:	f000 f91f 	bl	800a678 <ucdr_buffer_alignment>
 800a43a:	4601      	mov	r1, r0
 800a43c:	4620      	mov	r0, r4
 800a43e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a442:	f000 f95d 	bl	800a700 <ucdr_advance_buffer>
 800a446:	2108      	movs	r1, #8
 800a448:	4620      	mov	r0, r4
 800a44a:	f000 f8b5 	bl	800a5b8 <ucdr_check_buffer_available_for>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d151      	bne.n	800a4f6 <ucdr_deserialize_double+0xca>
 800a452:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a456:	42be      	cmp	r6, r7
 800a458:	d948      	bls.n	800a4ec <ucdr_deserialize_double+0xc0>
 800a45a:	6923      	ldr	r3, [r4, #16]
 800a45c:	60a6      	str	r6, [r4, #8]
 800a45e:	1bf6      	subs	r6, r6, r7
 800a460:	4433      	add	r3, r6
 800a462:	f1c6 0808 	rsb	r8, r6, #8
 800a466:	6123      	str	r3, [r4, #16]
 800a468:	4641      	mov	r1, r8
 800a46a:	4620      	mov	r0, r4
 800a46c:	f000 f8b0 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 800a470:	2800      	cmp	r0, #0
 800a472:	d06d      	beq.n	800a550 <ucdr_deserialize_double+0x124>
 800a474:	7d23      	ldrb	r3, [r4, #20]
 800a476:	2b01      	cmp	r3, #1
 800a478:	f000 8093 	beq.w	800a5a2 <ucdr_deserialize_double+0x176>
 800a47c:	79fb      	ldrb	r3, [r7, #7]
 800a47e:	702b      	strb	r3, [r5, #0]
 800a480:	2e00      	cmp	r6, #0
 800a482:	d072      	beq.n	800a56a <ucdr_deserialize_double+0x13e>
 800a484:	79bb      	ldrb	r3, [r7, #6]
 800a486:	706b      	strb	r3, [r5, #1]
 800a488:	2e01      	cmp	r6, #1
 800a48a:	f105 0302 	add.w	r3, r5, #2
 800a48e:	d070      	beq.n	800a572 <ucdr_deserialize_double+0x146>
 800a490:	797b      	ldrb	r3, [r7, #5]
 800a492:	70ab      	strb	r3, [r5, #2]
 800a494:	2e02      	cmp	r6, #2
 800a496:	f105 0303 	add.w	r3, r5, #3
 800a49a:	d06e      	beq.n	800a57a <ucdr_deserialize_double+0x14e>
 800a49c:	793b      	ldrb	r3, [r7, #4]
 800a49e:	70eb      	strb	r3, [r5, #3]
 800a4a0:	2e03      	cmp	r6, #3
 800a4a2:	f105 0304 	add.w	r3, r5, #4
 800a4a6:	d06c      	beq.n	800a582 <ucdr_deserialize_double+0x156>
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	712b      	strb	r3, [r5, #4]
 800a4ac:	2e04      	cmp	r6, #4
 800a4ae:	f105 0305 	add.w	r3, r5, #5
 800a4b2:	d06a      	beq.n	800a58a <ucdr_deserialize_double+0x15e>
 800a4b4:	78bb      	ldrb	r3, [r7, #2]
 800a4b6:	716b      	strb	r3, [r5, #5]
 800a4b8:	2e05      	cmp	r6, #5
 800a4ba:	f105 0306 	add.w	r3, r5, #6
 800a4be:	d068      	beq.n	800a592 <ucdr_deserialize_double+0x166>
 800a4c0:	787b      	ldrb	r3, [r7, #1]
 800a4c2:	71ab      	strb	r3, [r5, #6]
 800a4c4:	2e06      	cmp	r6, #6
 800a4c6:	f105 0307 	add.w	r3, r5, #7
 800a4ca:	d066      	beq.n	800a59a <ucdr_deserialize_double+0x16e>
 800a4cc:	783b      	ldrb	r3, [r7, #0]
 800a4ce:	71eb      	strb	r3, [r5, #7]
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	68a2      	ldr	r2, [r4, #8]
 800a4d4:	7da0      	ldrb	r0, [r4, #22]
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	1b9e      	subs	r6, r3, r6
 800a4da:	2308      	movs	r3, #8
 800a4dc:	4442      	add	r2, r8
 800a4de:	7563      	strb	r3, [r4, #21]
 800a4e0:	60a2      	str	r2, [r4, #8]
 800a4e2:	6126      	str	r6, [r4, #16]
 800a4e4:	f080 0001 	eor.w	r0, r0, #1
 800a4e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ec:	2108      	movs	r1, #8
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f000 f86e 	bl	800a5d0 <ucdr_check_final_buffer_behavior>
 800a4f4:	b310      	cbz	r0, 800a53c <ucdr_deserialize_double+0x110>
 800a4f6:	7d23      	ldrb	r3, [r4, #20]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	68a3      	ldr	r3, [r4, #8]
 800a4fc:	d023      	beq.n	800a546 <ucdr_deserialize_double+0x11a>
 800a4fe:	79db      	ldrb	r3, [r3, #7]
 800a500:	702b      	strb	r3, [r5, #0]
 800a502:	68a3      	ldr	r3, [r4, #8]
 800a504:	799b      	ldrb	r3, [r3, #6]
 800a506:	706b      	strb	r3, [r5, #1]
 800a508:	68a3      	ldr	r3, [r4, #8]
 800a50a:	795b      	ldrb	r3, [r3, #5]
 800a50c:	70ab      	strb	r3, [r5, #2]
 800a50e:	68a3      	ldr	r3, [r4, #8]
 800a510:	791b      	ldrb	r3, [r3, #4]
 800a512:	70eb      	strb	r3, [r5, #3]
 800a514:	68a3      	ldr	r3, [r4, #8]
 800a516:	78db      	ldrb	r3, [r3, #3]
 800a518:	712b      	strb	r3, [r5, #4]
 800a51a:	68a3      	ldr	r3, [r4, #8]
 800a51c:	789b      	ldrb	r3, [r3, #2]
 800a51e:	716b      	strb	r3, [r5, #5]
 800a520:	68a3      	ldr	r3, [r4, #8]
 800a522:	785b      	ldrb	r3, [r3, #1]
 800a524:	71ab      	strb	r3, [r5, #6]
 800a526:	68a3      	ldr	r3, [r4, #8]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	71eb      	strb	r3, [r5, #7]
 800a52c:	68a2      	ldr	r2, [r4, #8]
 800a52e:	6923      	ldr	r3, [r4, #16]
 800a530:	3208      	adds	r2, #8
 800a532:	3308      	adds	r3, #8
 800a534:	2108      	movs	r1, #8
 800a536:	60a2      	str	r2, [r4, #8]
 800a538:	6123      	str	r3, [r4, #16]
 800a53a:	7561      	strb	r1, [r4, #21]
 800a53c:	7da0      	ldrb	r0, [r4, #22]
 800a53e:	f080 0001 	eor.w	r0, r0, #1
 800a542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	606b      	str	r3, [r5, #4]
 800a54c:	602a      	str	r2, [r5, #0]
 800a54e:	e7ed      	b.n	800a52c <ucdr_deserialize_double+0x100>
 800a550:	68a2      	ldr	r2, [r4, #8]
 800a552:	6923      	ldr	r3, [r4, #16]
 800a554:	7da0      	ldrb	r0, [r4, #22]
 800a556:	f884 9015 	strb.w	r9, [r4, #21]
 800a55a:	1b92      	subs	r2, r2, r6
 800a55c:	1b9b      	subs	r3, r3, r6
 800a55e:	60a2      	str	r2, [r4, #8]
 800a560:	6123      	str	r3, [r4, #16]
 800a562:	f080 0001 	eor.w	r0, r0, #1
 800a566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a56a:	68a3      	ldr	r3, [r4, #8]
 800a56c:	799b      	ldrb	r3, [r3, #6]
 800a56e:	706b      	strb	r3, [r5, #1]
 800a570:	1cab      	adds	r3, r5, #2
 800a572:	68a2      	ldr	r2, [r4, #8]
 800a574:	7952      	ldrb	r2, [r2, #5]
 800a576:	f803 2b01 	strb.w	r2, [r3], #1
 800a57a:	68a2      	ldr	r2, [r4, #8]
 800a57c:	7912      	ldrb	r2, [r2, #4]
 800a57e:	f803 2b01 	strb.w	r2, [r3], #1
 800a582:	68a2      	ldr	r2, [r4, #8]
 800a584:	78d2      	ldrb	r2, [r2, #3]
 800a586:	f803 2b01 	strb.w	r2, [r3], #1
 800a58a:	68a2      	ldr	r2, [r4, #8]
 800a58c:	7892      	ldrb	r2, [r2, #2]
 800a58e:	f803 2b01 	strb.w	r2, [r3], #1
 800a592:	68a2      	ldr	r2, [r4, #8]
 800a594:	7852      	ldrb	r2, [r2, #1]
 800a596:	f803 2b01 	strb.w	r2, [r3], #1
 800a59a:	68a2      	ldr	r2, [r4, #8]
 800a59c:	7812      	ldrb	r2, [r2, #0]
 800a59e:	701a      	strb	r2, [r3, #0]
 800a5a0:	e796      	b.n	800a4d0 <ucdr_deserialize_double+0xa4>
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	4632      	mov	r2, r6
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	f00c f8f3 	bl	8016792 <memcpy>
 800a5ac:	68a1      	ldr	r1, [r4, #8]
 800a5ae:	4642      	mov	r2, r8
 800a5b0:	19a8      	adds	r0, r5, r6
 800a5b2:	f00c f8ee 	bl	8016792 <memcpy>
 800a5b6:	e78b      	b.n	800a4d0 <ucdr_deserialize_double+0xa4>

0800a5b8 <ucdr_check_buffer_available_for>:
 800a5b8:	7d83      	ldrb	r3, [r0, #22]
 800a5ba:	b93b      	cbnz	r3, 800a5cc <ucdr_check_buffer_available_for+0x14>
 800a5bc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800a5c0:	4419      	add	r1, r3
 800a5c2:	4288      	cmp	r0, r1
 800a5c4:	bf34      	ite	cc
 800a5c6:	2000      	movcc	r0, #0
 800a5c8:	2001      	movcs	r0, #1
 800a5ca:	4770      	bx	lr
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	4770      	bx	lr

0800a5d0 <ucdr_check_final_buffer_behavior>:
 800a5d0:	7d83      	ldrb	r3, [r0, #22]
 800a5d2:	b943      	cbnz	r3, 800a5e6 <ucdr_check_final_buffer_behavior+0x16>
 800a5d4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800a5d8:	4291      	cmp	r1, r2
 800a5da:	b510      	push	{r4, lr}
 800a5dc:	4604      	mov	r4, r0
 800a5de:	d205      	bcs.n	800a5ec <ucdr_check_final_buffer_behavior+0x1c>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	bd10      	pop	{r4, pc}
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	4770      	bx	lr
 800a5ec:	6982      	ldr	r2, [r0, #24]
 800a5ee:	b13a      	cbz	r2, 800a600 <ucdr_check_final_buffer_behavior+0x30>
 800a5f0:	69c1      	ldr	r1, [r0, #28]
 800a5f2:	4790      	blx	r2
 800a5f4:	f080 0301 	eor.w	r3, r0, #1
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	75a0      	strb	r0, [r4, #22]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	bd10      	pop	{r4, pc}
 800a600:	2001      	movs	r0, #1
 800a602:	75a0      	strb	r0, [r4, #22]
 800a604:	e7fa      	b.n	800a5fc <ucdr_check_final_buffer_behavior+0x2c>
 800a606:	bf00      	nop

0800a608 <ucdr_set_on_full_buffer_callback>:
 800a608:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop

0800a610 <ucdr_init_buffer_origin_offset_endian>:
 800a610:	b410      	push	{r4}
 800a612:	9c01      	ldr	r4, [sp, #4]
 800a614:	6001      	str	r1, [r0, #0]
 800a616:	440a      	add	r2, r1
 800a618:	6042      	str	r2, [r0, #4]
 800a61a:	190a      	adds	r2, r1, r4
 800a61c:	441c      	add	r4, r3
 800a61e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800a622:	6082      	str	r2, [r0, #8]
 800a624:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a628:	7503      	strb	r3, [r0, #20]
 800a62a:	2200      	movs	r2, #0
 800a62c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800a630:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a634:	7542      	strb	r2, [r0, #21]
 800a636:	7582      	strb	r2, [r0, #22]
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop

0800a63c <ucdr_init_buffer_origin_offset>:
 800a63c:	b510      	push	{r4, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	9c04      	ldr	r4, [sp, #16]
 800a642:	9400      	str	r4, [sp, #0]
 800a644:	2401      	movs	r4, #1
 800a646:	9401      	str	r4, [sp, #4]
 800a648:	f7ff ffe2 	bl	800a610 <ucdr_init_buffer_origin_offset_endian>
 800a64c:	b002      	add	sp, #8
 800a64e:	bd10      	pop	{r4, pc}

0800a650 <ucdr_init_buffer_origin>:
 800a650:	b510      	push	{r4, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	2400      	movs	r4, #0
 800a656:	9400      	str	r4, [sp, #0]
 800a658:	f7ff fff0 	bl	800a63c <ucdr_init_buffer_origin_offset>
 800a65c:	b002      	add	sp, #8
 800a65e:	bd10      	pop	{r4, pc}

0800a660 <ucdr_init_buffer>:
 800a660:	2300      	movs	r3, #0
 800a662:	f7ff bff5 	b.w	800a650 <ucdr_init_buffer_origin>
 800a666:	bf00      	nop

0800a668 <ucdr_alignment>:
 800a668:	fbb0 f3f1 	udiv	r3, r0, r1
 800a66c:	fb03 0011 	mls	r0, r3, r1, r0
 800a670:	1a08      	subs	r0, r1, r0
 800a672:	3901      	subs	r1, #1
 800a674:	4008      	ands	r0, r1
 800a676:	4770      	bx	lr

0800a678 <ucdr_buffer_alignment>:
 800a678:	7d43      	ldrb	r3, [r0, #21]
 800a67a:	428b      	cmp	r3, r1
 800a67c:	d208      	bcs.n	800a690 <ucdr_buffer_alignment+0x18>
 800a67e:	6900      	ldr	r0, [r0, #16]
 800a680:	fbb0 f3f1 	udiv	r3, r0, r1
 800a684:	fb01 0013 	mls	r0, r1, r3, r0
 800a688:	1a08      	subs	r0, r1, r0
 800a68a:	3901      	subs	r1, #1
 800a68c:	4008      	ands	r0, r1
 800a68e:	4770      	bx	lr
 800a690:	2000      	movs	r0, #0
 800a692:	4770      	bx	lr

0800a694 <ucdr_align_to>:
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4604      	mov	r4, r0
 800a698:	460d      	mov	r5, r1
 800a69a:	f7ff ffed 	bl	800a678 <ucdr_buffer_alignment>
 800a69e:	68a3      	ldr	r3, [r4, #8]
 800a6a0:	6921      	ldr	r1, [r4, #16]
 800a6a2:	7565      	strb	r5, [r4, #21]
 800a6a4:	181a      	adds	r2, r3, r0
 800a6a6:	6863      	ldr	r3, [r4, #4]
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	4408      	add	r0, r1
 800a6ac:	bf28      	it	cs
 800a6ae:	4613      	movcs	r3, r2
 800a6b0:	6120      	str	r0, [r4, #16]
 800a6b2:	60a3      	str	r3, [r4, #8]
 800a6b4:	bd38      	pop	{r3, r4, r5, pc}
 800a6b6:	bf00      	nop

0800a6b8 <ucdr_buffer_length>:
 800a6b8:	6882      	ldr	r2, [r0, #8]
 800a6ba:	6800      	ldr	r0, [r0, #0]
 800a6bc:	1a10      	subs	r0, r2, r0
 800a6be:	4770      	bx	lr

0800a6c0 <ucdr_buffer_remaining>:
 800a6c0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800a6c4:	1a10      	subs	r0, r2, r0
 800a6c6:	4770      	bx	lr

0800a6c8 <ucdr_check_final_buffer_behavior_array>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	7d83      	ldrb	r3, [r0, #22]
 800a6cc:	b963      	cbnz	r3, 800a6e8 <ucdr_check_final_buffer_behavior_array+0x20>
 800a6ce:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	460d      	mov	r5, r1
 800a6d8:	d308      	bcc.n	800a6ec <ucdr_check_final_buffer_behavior_array+0x24>
 800a6da:	b139      	cbz	r1, 800a6ec <ucdr_check_final_buffer_behavior_array+0x24>
 800a6dc:	6983      	ldr	r3, [r0, #24]
 800a6de:	b163      	cbz	r3, 800a6fa <ucdr_check_final_buffer_behavior_array+0x32>
 800a6e0:	69c1      	ldr	r1, [r0, #28]
 800a6e2:	4798      	blx	r3
 800a6e4:	75a0      	strb	r0, [r4, #22]
 800a6e6:	b108      	cbz	r0, 800a6ec <ucdr_check_final_buffer_behavior_array+0x24>
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	bd38      	pop	{r3, r4, r5, pc}
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f7ff ffe7 	bl	800a6c0 <ucdr_buffer_remaining>
 800a6f2:	42a8      	cmp	r0, r5
 800a6f4:	bf28      	it	cs
 800a6f6:	4628      	movcs	r0, r5
 800a6f8:	bd38      	pop	{r3, r4, r5, pc}
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	7583      	strb	r3, [r0, #22]
 800a6fe:	e7f3      	b.n	800a6e8 <ucdr_check_final_buffer_behavior_array+0x20>

0800a700 <ucdr_advance_buffer>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4604      	mov	r4, r0
 800a704:	460d      	mov	r5, r1
 800a706:	f7ff ff57 	bl	800a5b8 <ucdr_check_buffer_available_for>
 800a70a:	b178      	cbz	r0, 800a72c <ucdr_advance_buffer+0x2c>
 800a70c:	6923      	ldr	r3, [r4, #16]
 800a70e:	68a2      	ldr	r2, [r4, #8]
 800a710:	442b      	add	r3, r5
 800a712:	6123      	str	r3, [r4, #16]
 800a714:	2301      	movs	r3, #1
 800a716:	442a      	add	r2, r5
 800a718:	7563      	strb	r3, [r4, #21]
 800a71a:	60a2      	str	r2, [r4, #8]
 800a71c:	bd38      	pop	{r3, r4, r5, pc}
 800a71e:	68a2      	ldr	r2, [r4, #8]
 800a720:	6923      	ldr	r3, [r4, #16]
 800a722:	4402      	add	r2, r0
 800a724:	4403      	add	r3, r0
 800a726:	1a2d      	subs	r5, r5, r0
 800a728:	60a2      	str	r2, [r4, #8]
 800a72a:	6123      	str	r3, [r4, #16]
 800a72c:	4629      	mov	r1, r5
 800a72e:	2201      	movs	r2, #1
 800a730:	4620      	mov	r0, r4
 800a732:	f7ff ffc9 	bl	800a6c8 <ucdr_check_final_buffer_behavior_array>
 800a736:	2800      	cmp	r0, #0
 800a738:	d1f1      	bne.n	800a71e <ucdr_advance_buffer+0x1e>
 800a73a:	2301      	movs	r3, #1
 800a73c:	7563      	strb	r3, [r4, #21]
 800a73e:	bd38      	pop	{r3, r4, r5, pc}

0800a740 <rcl_get_zero_initialized_publisher>:
 800a740:	4b01      	ldr	r3, [pc, #4]	@ (800a748 <rcl_get_zero_initialized_publisher+0x8>)
 800a742:	6818      	ldr	r0, [r3, #0]
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	08017814 	.word	0x08017814

0800a74c <rcl_publisher_init>:
 800a74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a750:	b088      	sub	sp, #32
 800a752:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a754:	2d00      	cmp	r5, #0
 800a756:	d069      	beq.n	800a82c <rcl_publisher_init+0xe0>
 800a758:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a75c:	4604      	mov	r4, r0
 800a75e:	4648      	mov	r0, r9
 800a760:	460e      	mov	r6, r1
 800a762:	4690      	mov	r8, r2
 800a764:	461f      	mov	r7, r3
 800a766:	f001 f847 	bl	800b7f8 <rcutils_allocator_is_valid>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d05e      	beq.n	800a82c <rcl_publisher_init+0xe0>
 800a76e:	2c00      	cmp	r4, #0
 800a770:	d05c      	beq.n	800a82c <rcl_publisher_init+0xe0>
 800a772:	f8d4 a000 	ldr.w	sl, [r4]
 800a776:	f1ba 0f00 	cmp.w	sl, #0
 800a77a:	d004      	beq.n	800a786 <rcl_publisher_init+0x3a>
 800a77c:	2764      	movs	r7, #100	@ 0x64
 800a77e:	4638      	mov	r0, r7
 800a780:	b008      	add	sp, #32
 800a782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a786:	4630      	mov	r0, r6
 800a788:	f005 f9bc 	bl	800fb04 <rcl_node_is_valid>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d052      	beq.n	800a836 <rcl_publisher_init+0xea>
 800a790:	f1b8 0f00 	cmp.w	r8, #0
 800a794:	d04a      	beq.n	800a82c <rcl_publisher_init+0xe0>
 800a796:	2f00      	cmp	r7, #0
 800a798:	d048      	beq.n	800a82c <rcl_publisher_init+0xe0>
 800a79a:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a79e:	aa07      	add	r2, sp, #28
 800a7a0:	9205      	str	r2, [sp, #20]
 800a7a2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a7a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a7aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a7ae:	f8cd a01c 	str.w	sl, [sp, #28]
 800a7b2:	4639      	mov	r1, r7
 800a7b4:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f005 f9f7 	bl	800fbac <rcl_node_resolve_name>
 800a7be:	4607      	mov	r7, r0
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d14f      	bne.n	800a864 <rcl_publisher_init+0x118>
 800a7c4:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a7c6:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a7c8:	20c8      	movs	r0, #200	@ 0xc8
 800a7ca:	4798      	blx	r3
 800a7cc:	6020      	str	r0, [r4, #0]
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	d04e      	beq.n	800a870 <rcl_publisher_init+0x124>
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f005 f9b8 	bl	800fb48 <rcl_node_get_rmw_handle>
 800a7d8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	9a07      	ldr	r2, [sp, #28]
 800a7e0:	6827      	ldr	r7, [r4, #0]
 800a7e2:	462b      	mov	r3, r5
 800a7e4:	4641      	mov	r1, r8
 800a7e6:	f001 f915 	bl	800ba14 <rmw_create_publisher>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a7f0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a7f4:	b370      	cbz	r0, 800a854 <rcl_publisher_init+0x108>
 800a7f6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a7fa:	f001 f9e9 	bl	800bbd0 <rmw_publisher_get_actual_qos>
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	4607      	mov	r7, r0
 800a802:	b9d0      	cbnz	r0, 800a83a <rcl_publisher_init+0xee>
 800a804:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a808:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a80c:	4629      	mov	r1, r5
 800a80e:	2270      	movs	r2, #112	@ 0x70
 800a810:	4618      	mov	r0, r3
 800a812:	f00b ffbe 	bl	8016792 <memcpy>
 800a816:	6832      	ldr	r2, [r6, #0]
 800a818:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a81c:	9807      	ldr	r0, [sp, #28]
 800a81e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a820:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a822:	4798      	blx	r3
 800a824:	4638      	mov	r0, r7
 800a826:	b008      	add	sp, #32
 800a828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a82c:	270b      	movs	r7, #11
 800a82e:	4638      	mov	r0, r7
 800a830:	b008      	add	sp, #32
 800a832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a836:	27c8      	movs	r7, #200	@ 0xc8
 800a838:	e7a1      	b.n	800a77e <rcl_publisher_init+0x32>
 800a83a:	b18b      	cbz	r3, 800a860 <rcl_publisher_init+0x114>
 800a83c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a840:	b142      	cbz	r2, 800a854 <rcl_publisher_init+0x108>
 800a842:	4630      	mov	r0, r6
 800a844:	f005 f980 	bl	800fb48 <rcl_node_get_rmw_handle>
 800a848:	6823      	ldr	r3, [r4, #0]
 800a84a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a84e:	f001 f9cf 	bl	800bbf0 <rmw_destroy_publisher>
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a856:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a858:	4618      	mov	r0, r3
 800a85a:	4790      	blx	r2
 800a85c:	2300      	movs	r3, #0
 800a85e:	6023      	str	r3, [r4, #0]
 800a860:	2701      	movs	r7, #1
 800a862:	e7db      	b.n	800a81c <rcl_publisher_init+0xd0>
 800a864:	2867      	cmp	r0, #103	@ 0x67
 800a866:	d0d9      	beq.n	800a81c <rcl_publisher_init+0xd0>
 800a868:	2869      	cmp	r0, #105	@ 0x69
 800a86a:	d003      	beq.n	800a874 <rcl_publisher_init+0x128>
 800a86c:	280a      	cmp	r0, #10
 800a86e:	d1f7      	bne.n	800a860 <rcl_publisher_init+0x114>
 800a870:	270a      	movs	r7, #10
 800a872:	e7d3      	b.n	800a81c <rcl_publisher_init+0xd0>
 800a874:	2767      	movs	r7, #103	@ 0x67
 800a876:	e7d1      	b.n	800a81c <rcl_publisher_init+0xd0>

0800a878 <rcl_publisher_get_default_options>:
 800a878:	b570      	push	{r4, r5, r6, lr}
 800a87a:	4d14      	ldr	r5, [pc, #80]	@ (800a8cc <rcl_publisher_get_default_options+0x54>)
 800a87c:	4914      	ldr	r1, [pc, #80]	@ (800a8d0 <rcl_publisher_get_default_options+0x58>)
 800a87e:	b088      	sub	sp, #32
 800a880:	4604      	mov	r4, r0
 800a882:	2250      	movs	r2, #80	@ 0x50
 800a884:	4628      	mov	r0, r5
 800a886:	f00b ff84 	bl	8016792 <memcpy>
 800a88a:	a802      	add	r0, sp, #8
 800a88c:	f000 ffa6 	bl	800b7dc <rcutils_get_default_allocator>
 800a890:	f10d 0c08 	add.w	ip, sp, #8
 800a894:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a898:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a89c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a8a0:	466e      	mov	r6, sp
 800a8a2:	f8dc 3000 	ldr.w	r3, [ip]
 800a8a6:	f8ce 3000 	str.w	r3, [lr]
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f001 f834 	bl	800b918 <rmw_get_default_publisher_options>
 800a8b0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a8b4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a8b8:	e883 0003 	stmia.w	r3, {r0, r1}
 800a8bc:	2270      	movs	r2, #112	@ 0x70
 800a8be:	4629      	mov	r1, r5
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f00b ff66 	bl	8016792 <memcpy>
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	b008      	add	sp, #32
 800a8ca:	bd70      	pop	{r4, r5, r6, pc}
 800a8cc:	20009230 	.word	0x20009230
 800a8d0:	08017818 	.word	0x08017818

0800a8d4 <rcl_publish>:
 800a8d4:	b1f8      	cbz	r0, 800a916 <rcl_publish+0x42>
 800a8d6:	6803      	ldr	r3, [r0, #0]
 800a8d8:	b570      	push	{r4, r5, r6, lr}
 800a8da:	4604      	mov	r4, r0
 800a8dc:	b1b3      	cbz	r3, 800a90c <rcl_publish+0x38>
 800a8de:	4616      	mov	r6, r2
 800a8e0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a8e4:	b192      	cbz	r2, 800a90c <rcl_publish+0x38>
 800a8e6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a8ea:	460d      	mov	r5, r1
 800a8ec:	f004 fd30 	bl	800f350 <rcl_context_is_valid>
 800a8f0:	b160      	cbz	r0, 800a90c <rcl_publish+0x38>
 800a8f2:	6823      	ldr	r3, [r4, #0]
 800a8f4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a8f8:	b140      	cbz	r0, 800a90c <rcl_publish+0x38>
 800a8fa:	b155      	cbz	r5, 800a912 <rcl_publish+0x3e>
 800a8fc:	4632      	mov	r2, r6
 800a8fe:	4629      	mov	r1, r5
 800a900:	f001 f828 	bl	800b954 <rmw_publish>
 800a904:	3800      	subs	r0, #0
 800a906:	bf18      	it	ne
 800a908:	2001      	movne	r0, #1
 800a90a:	bd70      	pop	{r4, r5, r6, pc}
 800a90c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a910:	bd70      	pop	{r4, r5, r6, pc}
 800a912:	200b      	movs	r0, #11
 800a914:	bd70      	pop	{r4, r5, r6, pc}
 800a916:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a91a:	4770      	bx	lr

0800a91c <rcl_publisher_is_valid>:
 800a91c:	b1a0      	cbz	r0, 800a948 <rcl_publisher_is_valid+0x2c>
 800a91e:	6803      	ldr	r3, [r0, #0]
 800a920:	b510      	push	{r4, lr}
 800a922:	4604      	mov	r4, r0
 800a924:	b173      	cbz	r3, 800a944 <rcl_publisher_is_valid+0x28>
 800a926:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a92a:	b15a      	cbz	r2, 800a944 <rcl_publisher_is_valid+0x28>
 800a92c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a930:	f004 fd0e 	bl	800f350 <rcl_context_is_valid>
 800a934:	b130      	cbz	r0, 800a944 <rcl_publisher_is_valid+0x28>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a93c:	3800      	subs	r0, #0
 800a93e:	bf18      	it	ne
 800a940:	2001      	movne	r0, #1
 800a942:	bd10      	pop	{r4, pc}
 800a944:	2000      	movs	r0, #0
 800a946:	bd10      	pop	{r4, pc}
 800a948:	2000      	movs	r0, #0
 800a94a:	4770      	bx	lr

0800a94c <rcl_publisher_is_valid_except_context>:
 800a94c:	b130      	cbz	r0, 800a95c <rcl_publisher_is_valid_except_context+0x10>
 800a94e:	6800      	ldr	r0, [r0, #0]
 800a950:	b120      	cbz	r0, 800a95c <rcl_publisher_is_valid_except_context+0x10>
 800a952:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a956:	3800      	subs	r0, #0
 800a958:	bf18      	it	ne
 800a95a:	2001      	movne	r0, #1
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop

0800a960 <_rclc_check_for_new_data>:
 800a960:	2800      	cmp	r0, #0
 800a962:	d046      	beq.n	800a9f2 <_rclc_check_for_new_data+0x92>
 800a964:	b510      	push	{r4, lr}
 800a966:	7802      	ldrb	r2, [r0, #0]
 800a968:	b084      	sub	sp, #16
 800a96a:	4603      	mov	r3, r0
 800a96c:	2a0a      	cmp	r2, #10
 800a96e:	d842      	bhi.n	800a9f6 <_rclc_check_for_new_data+0x96>
 800a970:	e8df f002 	tbb	[pc, r2]
 800a974:	14181212 	.word	0x14181212
 800a978:	06060614 	.word	0x06060614
 800a97c:	2e1a      	.short	0x2e1a
 800a97e:	16          	.byte	0x16
 800a97f:	00          	.byte	0x00
 800a980:	6a0a      	ldr	r2, [r1, #32]
 800a982:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a984:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a988:	2000      	movs	r0, #0
 800a98a:	1a12      	subs	r2, r2, r0
 800a98c:	bf18      	it	ne
 800a98e:	2201      	movne	r2, #1
 800a990:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a994:	b004      	add	sp, #16
 800a996:	bd10      	pop	{r4, pc}
 800a998:	680a      	ldr	r2, [r1, #0]
 800a99a:	e7f2      	b.n	800a982 <_rclc_check_for_new_data+0x22>
 800a99c:	698a      	ldr	r2, [r1, #24]
 800a99e:	e7f0      	b.n	800a982 <_rclc_check_for_new_data+0x22>
 800a9a0:	688a      	ldr	r2, [r1, #8]
 800a9a2:	e7ee      	b.n	800a982 <_rclc_check_for_new_data+0x22>
 800a9a4:	690a      	ldr	r2, [r1, #16]
 800a9a6:	e7ec      	b.n	800a982 <_rclc_check_for_new_data+0x22>
 800a9a8:	685c      	ldr	r4, [r3, #4]
 800a9aa:	4608      	mov	r0, r1
 800a9ac:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800a9b0:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800a9b4:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800a9b8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800a9c2:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800a9c6:	f104 0110 	add.w	r1, r4, #16
 800a9ca:	f006 fdbd 	bl	8011548 <rcl_action_client_wait_set_get_entities_ready>
 800a9ce:	e7e1      	b.n	800a994 <_rclc_check_for_new_data+0x34>
 800a9d0:	685c      	ldr	r4, [r3, #4]
 800a9d2:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800a9d6:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800a9da:	e9cd 3200 	strd	r3, r2, [sp]
 800a9de:	4608      	mov	r0, r1
 800a9e0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800a9e4:	f104 0220 	add.w	r2, r4, #32
 800a9e8:	f104 0110 	add.w	r1, r4, #16
 800a9ec:	f006 ffc4 	bl	8011978 <rcl_action_server_wait_set_get_entities_ready>
 800a9f0:	e7d0      	b.n	800a994 <_rclc_check_for_new_data+0x34>
 800a9f2:	200b      	movs	r0, #11
 800a9f4:	4770      	bx	lr
 800a9f6:	2001      	movs	r0, #1
 800a9f8:	e7cc      	b.n	800a994 <_rclc_check_for_new_data+0x34>
 800a9fa:	bf00      	nop

0800a9fc <_rclc_take_new_data>:
 800a9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9fe:	b09b      	sub	sp, #108	@ 0x6c
 800aa00:	2800      	cmp	r0, #0
 800aa02:	f000 8088 	beq.w	800ab16 <_rclc_take_new_data+0x11a>
 800aa06:	7803      	ldrb	r3, [r0, #0]
 800aa08:	4604      	mov	r4, r0
 800aa0a:	2b0a      	cmp	r3, #10
 800aa0c:	f200 8167 	bhi.w	800acde <_rclc_take_new_data+0x2e2>
 800aa10:	e8df f003 	tbb	[pc, r3]
 800aa14:	44152d2d 	.word	0x44152d2d
 800aa18:	19191944 	.word	0x19191944
 800aa1c:	065a      	.short	0x065a
 800aa1e:	15          	.byte	0x15
 800aa1f:	00          	.byte	0x00
 800aa20:	6840      	ldr	r0, [r0, #4]
 800aa22:	f890 3020 	ldrb.w	r3, [r0, #32]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	f040 80b2 	bne.w	800ab90 <_rclc_take_new_data+0x194>
 800aa2c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f040 80e4 	bne.w	800abfe <_rclc_take_new_data+0x202>
 800aa36:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d16f      	bne.n	800ab1e <_rclc_take_new_data+0x122>
 800aa3e:	2500      	movs	r5, #0
 800aa40:	4628      	mov	r0, r5
 800aa42:	b01b      	add	sp, #108	@ 0x6c
 800aa44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa46:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800aa48:	6a0b      	ldr	r3, [r1, #32]
 800aa4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d0f5      	beq.n	800aa3e <_rclc_take_new_data+0x42>
 800aa52:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800aa56:	f104 0110 	add.w	r1, r4, #16
 800aa5a:	f005 fa51 	bl	800ff00 <rcl_take_request>
 800aa5e:	4605      	mov	r5, r0
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d0ec      	beq.n	800aa3e <_rclc_take_new_data+0x42>
 800aa64:	f240 2359 	movw	r3, #601	@ 0x259
 800aa68:	4298      	cmp	r0, r3
 800aa6a:	d013      	beq.n	800aa94 <_rclc_take_new_data+0x98>
 800aa6c:	e029      	b.n	800aac2 <_rclc_take_new_data+0xc6>
 800aa6e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800aa70:	680b      	ldr	r3, [r1, #0]
 800aa72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d0e1      	beq.n	800aa3e <_rclc_take_new_data+0x42>
 800aa7a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800aa7e:	2300      	movs	r3, #0
 800aa80:	aa0a      	add	r2, sp, #40	@ 0x28
 800aa82:	f005 fb7b 	bl	801017c <rcl_take>
 800aa86:	4605      	mov	r5, r0
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d0d9      	beq.n	800aa40 <_rclc_take_new_data+0x44>
 800aa8c:	f240 1391 	movw	r3, #401	@ 0x191
 800aa90:	4298      	cmp	r0, r3
 800aa92:	d116      	bne.n	800aac2 <_rclc_take_new_data+0xc6>
 800aa94:	2300      	movs	r3, #0
 800aa96:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800aa9a:	e7d1      	b.n	800aa40 <_rclc_take_new_data+0x44>
 800aa9c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800aa9e:	698b      	ldr	r3, [r1, #24]
 800aaa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d0ca      	beq.n	800aa3e <_rclc_take_new_data+0x42>
 800aaa8:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800aaac:	f104 0110 	add.w	r1, r4, #16
 800aab0:	f004 fbde 	bl	800f270 <rcl_take_response>
 800aab4:	4605      	mov	r5, r0
 800aab6:	2800      	cmp	r0, #0
 800aab8:	d0c1      	beq.n	800aa3e <_rclc_take_new_data+0x42>
 800aaba:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800aabe:	4298      	cmp	r0, r3
 800aac0:	d0be      	beq.n	800aa40 <_rclc_take_new_data+0x44>
 800aac2:	f000 febd 	bl	800b840 <rcutils_reset_error>
 800aac6:	e7bb      	b.n	800aa40 <_rclc_take_new_data+0x44>
 800aac8:	6840      	ldr	r0, [r0, #4]
 800aaca:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d17d      	bne.n	800abce <_rclc_take_new_data+0x1d2>
 800aad2:	69c3      	ldr	r3, [r0, #28]
 800aad4:	b11b      	cbz	r3, 800aade <_rclc_take_new_data+0xe2>
 800aad6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d144      	bne.n	800ab68 <_rclc_take_new_data+0x16c>
 800aade:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f040 80ac 	bne.w	800ac40 <_rclc_take_new_data+0x244>
 800aae8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d0a6      	beq.n	800aa3e <_rclc_take_new_data+0x42>
 800aaf0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800aaf2:	a90a      	add	r1, sp, #40	@ 0x28
 800aaf4:	3010      	adds	r0, #16
 800aaf6:	f006 fbff 	bl	80112f8 <rcl_action_take_result_response>
 800aafa:	4605      	mov	r5, r0
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d1e0      	bne.n	800aac2 <_rclc_take_new_data+0xc6>
 800ab00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ab04:	6860      	ldr	r0, [r4, #4]
 800ab06:	f007 f85b 	bl	8011bc0 <rclc_action_find_handle_by_result_request_sequence_number>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d098      	beq.n	800aa40 <_rclc_take_new_data+0x44>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800ab14:	e794      	b.n	800aa40 <_rclc_take_new_data+0x44>
 800ab16:	250b      	movs	r5, #11
 800ab18:	4628      	mov	r0, r5
 800ab1a:	b01b      	add	sp, #108	@ 0x6c
 800ab1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab1e:	ae04      	add	r6, sp, #16
 800ab20:	aa0a      	add	r2, sp, #40	@ 0x28
 800ab22:	3010      	adds	r0, #16
 800ab24:	4631      	mov	r1, r6
 800ab26:	f006 fe5b 	bl	80117e0 <rcl_action_take_cancel_request>
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	d1c8      	bne.n	800aac2 <_rclc_take_new_data+0xc6>
 800ab30:	6860      	ldr	r0, [r4, #4]
 800ab32:	a90a      	add	r1, sp, #40	@ 0x28
 800ab34:	f007 f802 	bl	8011b3c <rclc_action_find_goal_handle_by_uuid>
 800ab38:	4607      	mov	r7, r0
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	f000 80bb 	beq.w	800acb6 <_rclc_take_new_data+0x2ba>
 800ab40:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800ab44:	2101      	movs	r1, #1
 800ab46:	f006 ff83 	bl	8011a50 <rcl_action_transition_goal_state>
 800ab4a:	2803      	cmp	r0, #3
 800ab4c:	4684      	mov	ip, r0
 800ab4e:	f040 80a7 	bne.w	800aca0 <_rclc_take_new_data+0x2a4>
 800ab52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ab54:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800ab58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab5a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ab5e:	e884 0003 	stmia.w	r4, {r0, r1}
 800ab62:	f887 c008 	strb.w	ip, [r7, #8]
 800ab66:	e76b      	b.n	800aa40 <_rclc_take_new_data+0x44>
 800ab68:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ab6a:	3010      	adds	r0, #16
 800ab6c:	f006 fc44 	bl	80113f8 <rcl_action_take_feedback>
 800ab70:	4605      	mov	r5, r0
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d1a5      	bne.n	800aac2 <_rclc_take_new_data+0xc6>
 800ab76:	6860      	ldr	r0, [r4, #4]
 800ab78:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ab7a:	f006 ffdf 	bl	8011b3c <rclc_action_find_goal_handle_by_uuid>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2800      	cmp	r0, #0
 800ab82:	f000 80a3 	beq.w	800accc <_rclc_take_new_data+0x2d0>
 800ab86:	2201      	movs	r2, #1
 800ab88:	6860      	ldr	r0, [r4, #4]
 800ab8a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800ab8e:	e7a6      	b.n	800aade <_rclc_take_new_data+0xe2>
 800ab90:	f006 ffae 	bl	8011af0 <rclc_action_take_goal_handle>
 800ab94:	4606      	mov	r6, r0
 800ab96:	6860      	ldr	r0, [r4, #4]
 800ab98:	2e00      	cmp	r6, #0
 800ab9a:	f43f af47 	beq.w	800aa2c <_rclc_take_new_data+0x30>
 800ab9e:	6070      	str	r0, [r6, #4]
 800aba0:	69f2      	ldr	r2, [r6, #28]
 800aba2:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800aba6:	3010      	adds	r0, #16
 800aba8:	f006 fd62 	bl	8011670 <rcl_action_take_goal_request>
 800abac:	4605      	mov	r5, r0
 800abae:	2800      	cmp	r0, #0
 800abb0:	f040 808e 	bne.w	800acd0 <_rclc_take_new_data+0x2d4>
 800abb4:	69f7      	ldr	r7, [r6, #28]
 800abb6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800abb8:	7235      	strb	r5, [r6, #8]
 800abba:	f8c6 0009 	str.w	r0, [r6, #9]
 800abbe:	f8c6 100d 	str.w	r1, [r6, #13]
 800abc2:	6860      	ldr	r0, [r4, #4]
 800abc4:	f8c6 2011 	str.w	r2, [r6, #17]
 800abc8:	f8c6 3015 	str.w	r3, [r6, #21]
 800abcc:	e72e      	b.n	800aa2c <_rclc_take_new_data+0x30>
 800abce:	aa04      	add	r2, sp, #16
 800abd0:	a90a      	add	r1, sp, #40	@ 0x28
 800abd2:	3010      	adds	r0, #16
 800abd4:	f006 fb18 	bl	8011208 <rcl_action_take_goal_response>
 800abd8:	4605      	mov	r5, r0
 800abda:	2800      	cmp	r0, #0
 800abdc:	f47f af71 	bne.w	800aac2 <_rclc_take_new_data+0xc6>
 800abe0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800abe4:	6860      	ldr	r0, [r4, #4]
 800abe6:	f006 ffd9 	bl	8011b9c <rclc_action_find_handle_by_goal_request_sequence_number>
 800abea:	b130      	cbz	r0, 800abfa <_rclc_take_new_data+0x1fe>
 800abec:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800abf0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800abf4:	2201      	movs	r2, #1
 800abf6:	f880 2020 	strb.w	r2, [r0, #32]
 800abfa:	6860      	ldr	r0, [r4, #4]
 800abfc:	e769      	b.n	800aad2 <_rclc_take_new_data+0xd6>
 800abfe:	aa04      	add	r2, sp, #16
 800ac00:	3010      	adds	r0, #16
 800ac02:	a90a      	add	r1, sp, #40	@ 0x28
 800ac04:	f006 fdac 	bl	8011760 <rcl_action_take_result_request>
 800ac08:	4605      	mov	r5, r0
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	f47f af59 	bne.w	800aac2 <_rclc_take_new_data+0xc6>
 800ac10:	6860      	ldr	r0, [r4, #4]
 800ac12:	a904      	add	r1, sp, #16
 800ac14:	f006 ff92 	bl	8011b3c <rclc_action_find_goal_handle_by_uuid>
 800ac18:	4607      	mov	r7, r0
 800ac1a:	b160      	cbz	r0, 800ac36 <_rclc_take_new_data+0x23a>
 800ac1c:	ad0a      	add	r5, sp, #40	@ 0x28
 800ac1e:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800ac22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac24:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ac26:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ac2a:	f04f 0c02 	mov.w	ip, #2
 800ac2e:	e886 0003 	stmia.w	r6, {r0, r1}
 800ac32:	f887 c008 	strb.w	ip, [r7, #8]
 800ac36:	6860      	ldr	r0, [r4, #4]
 800ac38:	2300      	movs	r3, #0
 800ac3a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800ac3e:	e6fa      	b.n	800aa36 <_rclc_take_new_data+0x3a>
 800ac40:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800ac44:	a90a      	add	r1, sp, #40	@ 0x28
 800ac46:	3010      	adds	r0, #16
 800ac48:	f006 fb96 	bl	8011378 <rcl_action_take_cancel_response>
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	f47f af37 	bne.w	800aac2 <_rclc_take_new_data+0xc6>
 800ac54:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac58:	6860      	ldr	r0, [r4, #4]
 800ac5a:	f006 ffc3 	bl	8011be4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ac5e:	4606      	mov	r6, r0
 800ac60:	6860      	ldr	r0, [r4, #4]
 800ac62:	2e00      	cmp	r6, #0
 800ac64:	f43f af40 	beq.w	800aae8 <_rclc_take_new_data+0xec>
 800ac68:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ac6a:	2701      	movs	r7, #1
 800ac6c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f43f af3a 	beq.w	800aae8 <_rclc_take_new_data+0xec>
 800ac74:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ac76:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ac7a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ac7e:	f006 ff5d 	bl	8011b3c <rclc_action_find_goal_handle_by_uuid>
 800ac82:	b138      	cbz	r0, 800ac94 <_rclc_take_new_data+0x298>
 800ac84:	6860      	ldr	r0, [r4, #4]
 800ac86:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ac88:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800ac8c:	3501      	adds	r5, #1
 800ac8e:	42ab      	cmp	r3, r5
 800ac90:	d8f0      	bhi.n	800ac74 <_rclc_take_new_data+0x278>
 800ac92:	e729      	b.n	800aae8 <_rclc_take_new_data+0xec>
 800ac94:	6860      	ldr	r0, [r4, #4]
 800ac96:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ac98:	3501      	adds	r5, #1
 800ac9a:	42ab      	cmp	r3, r5
 800ac9c:	d8ea      	bhi.n	800ac74 <_rclc_take_new_data+0x278>
 800ac9e:	e723      	b.n	800aae8 <_rclc_take_new_data+0xec>
 800aca0:	ab06      	add	r3, sp, #24
 800aca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aca4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800aca8:	2103      	movs	r1, #3
 800acaa:	e896 000c 	ldmia.w	r6, {r2, r3}
 800acae:	6860      	ldr	r0, [r4, #4]
 800acb0:	f007 f80e 	bl	8011cd0 <rclc_action_server_goal_cancel_reject>
 800acb4:	e6c4      	b.n	800aa40 <_rclc_take_new_data+0x44>
 800acb6:	ab06      	add	r3, sp, #24
 800acb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800acba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800acbe:	2102      	movs	r1, #2
 800acc0:	e896 000c 	ldmia.w	r6, {r2, r3}
 800acc4:	6860      	ldr	r0, [r4, #4]
 800acc6:	f007 f803 	bl	8011cd0 <rclc_action_server_goal_cancel_reject>
 800acca:	e6b9      	b.n	800aa40 <_rclc_take_new_data+0x44>
 800accc:	6860      	ldr	r0, [r4, #4]
 800acce:	e706      	b.n	800aade <_rclc_take_new_data+0xe2>
 800acd0:	6860      	ldr	r0, [r4, #4]
 800acd2:	4631      	mov	r1, r6
 800acd4:	f006 ff1c 	bl	8011b10 <rclc_action_remove_used_goal_handle>
 800acd8:	f000 fdb2 	bl	800b840 <rcutils_reset_error>
 800acdc:	e6b0      	b.n	800aa40 <_rclc_take_new_data+0x44>
 800acde:	2501      	movs	r5, #1
 800ace0:	e6ae      	b.n	800aa40 <_rclc_take_new_data+0x44>
 800ace2:	bf00      	nop

0800ace4 <_rclc_execute.part.0>:
 800ace4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ace6:	7803      	ldrb	r3, [r0, #0]
 800ace8:	b087      	sub	sp, #28
 800acea:	4604      	mov	r4, r0
 800acec:	2b0a      	cmp	r3, #10
 800acee:	f200 8136 	bhi.w	800af5e <_rclc_execute.part.0+0x27a>
 800acf2:	e8df f003 	tbb	[pc, r3]
 800acf6:	435e      	.short	0x435e
 800acf8:	06a1664f 	.word	0x06a1664f
 800acfc:	6c1e0606 	.word	0x6c1e0606
 800ad00:	59          	.byte	0x59
 800ad01:	00          	.byte	0x00
 800ad02:	2b06      	cmp	r3, #6
 800ad04:	f000 8122 	beq.w	800af4c <_rclc_execute.part.0+0x268>
 800ad08:	2b07      	cmp	r3, #7
 800ad0a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ad0c:	f040 8118 	bne.w	800af40 <_rclc_execute.part.0+0x25c>
 800ad10:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800ad14:	6880      	ldr	r0, [r0, #8]
 800ad16:	4798      	blx	r3
 800ad18:	f104 0110 	add.w	r1, r4, #16
 800ad1c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ad1e:	6860      	ldr	r0, [r4, #4]
 800ad20:	f005 f92e 	bl	800ff80 <rcl_send_response>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d033      	beq.n	800ad90 <_rclc_execute.part.0+0xac>
 800ad28:	9005      	str	r0, [sp, #20]
 800ad2a:	f000 fd89 	bl	800b840 <rcutils_reset_error>
 800ad2e:	9805      	ldr	r0, [sp, #20]
 800ad30:	e02e      	b.n	800ad90 <_rclc_execute.part.0+0xac>
 800ad32:	6840      	ldr	r0, [r0, #4]
 800ad34:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f000 8086 	beq.w	800ae4a <_rclc_execute.part.0+0x166>
 800ad3e:	2600      	movs	r6, #0
 800ad40:	2701      	movs	r7, #1
 800ad42:	e004      	b.n	800ad4e <_rclc_execute.part.0+0x6a>
 800ad44:	f006 feae 	bl	8011aa4 <rclc_action_send_result_request>
 800ad48:	b998      	cbnz	r0, 800ad72 <_rclc_execute.part.0+0x8e>
 800ad4a:	722f      	strb	r7, [r5, #8]
 800ad4c:	6860      	ldr	r0, [r4, #4]
 800ad4e:	f006 ff5b 	bl	8011c08 <rclc_action_find_first_handle_with_goal_response>
 800ad52:	4605      	mov	r5, r0
 800ad54:	2800      	cmp	r0, #0
 800ad56:	d077      	beq.n	800ae48 <_rclc_execute.part.0+0x164>
 800ad58:	6863      	ldr	r3, [r4, #4]
 800ad5a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ad62:	f885 6020 	strb.w	r6, [r5, #32]
 800ad66:	4798      	blx	r3
 800ad68:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1e8      	bne.n	800ad44 <_rclc_execute.part.0+0x60>
 800ad72:	6860      	ldr	r0, [r4, #4]
 800ad74:	4629      	mov	r1, r5
 800ad76:	f006 fecb 	bl	8011b10 <rclc_action_remove_used_goal_handle>
 800ad7a:	e7e7      	b.n	800ad4c <_rclc_execute.part.0+0x68>
 800ad7c:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ad80:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800ad84:	2d00      	cmp	r5, #0
 800ad86:	f000 80c9 	beq.w	800af1c <_rclc_execute.part.0+0x238>
 800ad8a:	6880      	ldr	r0, [r0, #8]
 800ad8c:	4798      	blx	r3
 800ad8e:	2000      	movs	r0, #0
 800ad90:	b007      	add	sp, #28
 800ad92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad94:	6840      	ldr	r0, [r0, #4]
 800ad96:	f005 faf5 	bl	8010384 <rcl_timer_call>
 800ad9a:	f240 3321 	movw	r3, #801	@ 0x321
 800ad9e:	4298      	cmp	r0, r3
 800ada0:	d004      	beq.n	800adac <_rclc_execute.part.0+0xc8>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d0f4      	beq.n	800ad90 <_rclc_execute.part.0+0xac>
 800ada6:	e7bf      	b.n	800ad28 <_rclc_execute.part.0+0x44>
 800ada8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800adaa:	4798      	blx	r3
 800adac:	2000      	movs	r0, #0
 800adae:	b007      	add	sp, #28
 800adb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adb2:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800adb6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800adb8:	b925      	cbnz	r5, 800adc4 <_rclc_execute.part.0+0xe0>
 800adba:	4628      	mov	r0, r5
 800adbc:	4798      	blx	r3
 800adbe:	4628      	mov	r0, r5
 800adc0:	e7e6      	b.n	800ad90 <_rclc_execute.part.0+0xac>
 800adc2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800adc4:	68a0      	ldr	r0, [r4, #8]
 800adc6:	4798      	blx	r3
 800adc8:	2000      	movs	r0, #0
 800adca:	b007      	add	sp, #28
 800adcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adce:	6840      	ldr	r0, [r0, #4]
 800add0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800add4:	bb3b      	cbnz	r3, 800ae26 <_rclc_execute.part.0+0x142>
 800add6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d07b      	beq.n	800aed6 <_rclc_execute.part.0+0x1f2>
 800adde:	f640 0634 	movw	r6, #2100	@ 0x834
 800ade2:	2701      	movs	r7, #1
 800ade4:	e007      	b.n	800adf6 <_rclc_execute.part.0+0x112>
 800ade6:	4628      	mov	r0, r5
 800ade8:	f006 ff26 	bl	8011c38 <rclc_action_server_response_goal_request>
 800adec:	6860      	ldr	r0, [r4, #4]
 800adee:	4629      	mov	r1, r5
 800adf0:	f006 fe8e 	bl	8011b10 <rclc_action_remove_used_goal_handle>
 800adf4:	6860      	ldr	r0, [r4, #4]
 800adf6:	2100      	movs	r1, #0
 800adf8:	f006 feb8 	bl	8011b6c <rclc_action_find_first_handle_by_status>
 800adfc:	4605      	mov	r5, r0
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d066      	beq.n	800aed0 <_rclc_execute.part.0+0x1ec>
 800ae02:	6863      	ldr	r3, [r4, #4]
 800ae04:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ae06:	699b      	ldr	r3, [r3, #24]
 800ae08:	4798      	blx	r3
 800ae0a:	42b0      	cmp	r0, r6
 800ae0c:	f04f 0100 	mov.w	r1, #0
 800ae10:	d1e9      	bne.n	800ade6 <_rclc_execute.part.0+0x102>
 800ae12:	2101      	movs	r1, #1
 800ae14:	4628      	mov	r0, r5
 800ae16:	f006 ff0f 	bl	8011c38 <rclc_action_server_response_goal_request>
 800ae1a:	722f      	strb	r7, [r5, #8]
 800ae1c:	e7ea      	b.n	800adf4 <_rclc_execute.part.0+0x110>
 800ae1e:	6848      	ldr	r0, [r1, #4]
 800ae20:	f006 fe76 	bl	8011b10 <rclc_action_remove_used_goal_handle>
 800ae24:	6860      	ldr	r0, [r4, #4]
 800ae26:	f006 fead 	bl	8011b84 <rclc_action_find_first_terminated_handle>
 800ae2a:	4601      	mov	r1, r0
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d1f6      	bne.n	800ae1e <_rclc_execute.part.0+0x13a>
 800ae30:	6860      	ldr	r0, [r4, #4]
 800ae32:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800ae36:	e7ce      	b.n	800add6 <_rclc_execute.part.0+0xf2>
 800ae38:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ae3a:	6880      	ldr	r0, [r0, #8]
 800ae3c:	f104 0110 	add.w	r1, r4, #16
 800ae40:	4798      	blx	r3
 800ae42:	2000      	movs	r0, #0
 800ae44:	b007      	add	sp, #28
 800ae46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae48:	6860      	ldr	r0, [r4, #4]
 800ae4a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ae4e:	b18b      	cbz	r3, 800ae74 <_rclc_execute.part.0+0x190>
 800ae50:	68c5      	ldr	r5, [r0, #12]
 800ae52:	b32d      	cbz	r5, 800aea0 <_rclc_execute.part.0+0x1bc>
 800ae54:	2600      	movs	r6, #0
 800ae56:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800ae5a:	b143      	cbz	r3, 800ae6e <_rclc_execute.part.0+0x18a>
 800ae5c:	69c3      	ldr	r3, [r0, #28]
 800ae5e:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800ae62:	b123      	cbz	r3, 800ae6e <_rclc_execute.part.0+0x18a>
 800ae64:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ae66:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ae68:	4628      	mov	r0, r5
 800ae6a:	4798      	blx	r3
 800ae6c:	6860      	ldr	r0, [r4, #4]
 800ae6e:	682d      	ldr	r5, [r5, #0]
 800ae70:	2d00      	cmp	r5, #0
 800ae72:	d1f0      	bne.n	800ae56 <_rclc_execute.part.0+0x172>
 800ae74:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ae78:	b193      	cbz	r3, 800aea0 <_rclc_execute.part.0+0x1bc>
 800ae7a:	68c5      	ldr	r5, [r0, #12]
 800ae7c:	b185      	cbz	r5, 800aea0 <_rclc_execute.part.0+0x1bc>
 800ae7e:	2600      	movs	r6, #0
 800ae80:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800ae84:	b14b      	cbz	r3, 800ae9a <_rclc_execute.part.0+0x1b6>
 800ae86:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ae88:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800ae8c:	b12b      	cbz	r3, 800ae9a <_rclc_execute.part.0+0x1b6>
 800ae8e:	4628      	mov	r0, r5
 800ae90:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800ae94:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ae96:	4798      	blx	r3
 800ae98:	6860      	ldr	r0, [r4, #4]
 800ae9a:	682d      	ldr	r5, [r5, #0]
 800ae9c:	2d00      	cmp	r5, #0
 800ae9e:	d1ef      	bne.n	800ae80 <_rclc_execute.part.0+0x19c>
 800aea0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d081      	beq.n	800adac <_rclc_execute.part.0+0xc8>
 800aea8:	2700      	movs	r7, #0
 800aeaa:	e00b      	b.n	800aec4 <_rclc_execute.part.0+0x1e0>
 800aeac:	6863      	ldr	r3, [r4, #4]
 800aeae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800aeb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800aeb2:	6a1e      	ldr	r6, [r3, #32]
 800aeb4:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800aeb8:	47b0      	blx	r6
 800aeba:	6860      	ldr	r0, [r4, #4]
 800aebc:	4629      	mov	r1, r5
 800aebe:	f006 fe27 	bl	8011b10 <rclc_action_remove_used_goal_handle>
 800aec2:	6860      	ldr	r0, [r4, #4]
 800aec4:	f006 feac 	bl	8011c20 <rclc_action_find_first_handle_with_result_response>
 800aec8:	4605      	mov	r5, r0
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d1ee      	bne.n	800aeac <_rclc_execute.part.0+0x1c8>
 800aece:	e76d      	b.n	800adac <_rclc_execute.part.0+0xc8>
 800aed0:	6860      	ldr	r0, [r4, #4]
 800aed2:	f880 5020 	strb.w	r5, [r0, #32]
 800aed6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f43f af66 	beq.w	800adac <_rclc_execute.part.0+0xc8>
 800aee0:	68c5      	ldr	r5, [r0, #12]
 800aee2:	b1b5      	cbz	r5, 800af12 <_rclc_execute.part.0+0x22e>
 800aee4:	2602      	movs	r6, #2
 800aee6:	e001      	b.n	800aeec <_rclc_execute.part.0+0x208>
 800aee8:	682d      	ldr	r5, [r5, #0]
 800aeea:	b195      	cbz	r5, 800af12 <_rclc_execute.part.0+0x22e>
 800aeec:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800aef0:	2b03      	cmp	r3, #3
 800aef2:	d1f9      	bne.n	800aee8 <_rclc_execute.part.0+0x204>
 800aef4:	69c3      	ldr	r3, [r0, #28]
 800aef6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800aef8:	4628      	mov	r0, r5
 800aefa:	4798      	blx	r3
 800aefc:	4603      	mov	r3, r0
 800aefe:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800af02:	4628      	mov	r0, r5
 800af04:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800af08:	b163      	cbz	r3, 800af24 <_rclc_execute.part.0+0x240>
 800af0a:	f006 feb5 	bl	8011c78 <rclc_action_server_goal_cancel_accept>
 800af0e:	6860      	ldr	r0, [r4, #4]
 800af10:	e7ea      	b.n	800aee8 <_rclc_execute.part.0+0x204>
 800af12:	2300      	movs	r3, #0
 800af14:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800af18:	4618      	mov	r0, r3
 800af1a:	e739      	b.n	800ad90 <_rclc_execute.part.0+0xac>
 800af1c:	4628      	mov	r0, r5
 800af1e:	4798      	blx	r3
 800af20:	4628      	mov	r0, r5
 800af22:	e735      	b.n	800ad90 <_rclc_execute.part.0+0xac>
 800af24:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800af26:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800af2a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800af2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af32:	6860      	ldr	r0, [r4, #4]
 800af34:	2101      	movs	r1, #1
 800af36:	f006 fecb 	bl	8011cd0 <rclc_action_server_goal_cancel_reject>
 800af3a:	722e      	strb	r6, [r5, #8]
 800af3c:	6860      	ldr	r0, [r4, #4]
 800af3e:	e7d3      	b.n	800aee8 <_rclc_execute.part.0+0x204>
 800af40:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800af42:	6880      	ldr	r0, [r0, #8]
 800af44:	4798      	blx	r3
 800af46:	f104 0110 	add.w	r1, r4, #16
 800af4a:	e6e7      	b.n	800ad1c <_rclc_execute.part.0+0x38>
 800af4c:	f100 0110 	add.w	r1, r0, #16
 800af50:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800af52:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800af54:	6880      	ldr	r0, [r0, #8]
 800af56:	9105      	str	r1, [sp, #20]
 800af58:	4798      	blx	r3
 800af5a:	9905      	ldr	r1, [sp, #20]
 800af5c:	e6de      	b.n	800ad1c <_rclc_execute.part.0+0x38>
 800af5e:	2001      	movs	r0, #1
 800af60:	e716      	b.n	800ad90 <_rclc_execute.part.0+0xac>
 800af62:	bf00      	nop

0800af64 <rclc_executor_trigger_any>:
 800af64:	2800      	cmp	r0, #0
 800af66:	d03f      	beq.n	800afe8 <rclc_executor_trigger_any+0x84>
 800af68:	2900      	cmp	r1, #0
 800af6a:	d03e      	beq.n	800afea <rclc_executor_trigger_any+0x86>
 800af6c:	4603      	mov	r3, r0
 800af6e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800af72:	2200      	movs	r2, #0
 800af74:	2800      	cmp	r0, #0
 800af76:	d037      	beq.n	800afe8 <rclc_executor_trigger_any+0x84>
 800af78:	b430      	push	{r4, r5}
 800af7a:	f893 c000 	ldrb.w	ip, [r3]
 800af7e:	f1bc 0f08 	cmp.w	ip, #8
 800af82:	d11e      	bne.n	800afc2 <rclc_executor_trigger_any+0x5e>
 800af84:	685c      	ldr	r4, [r3, #4]
 800af86:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800af88:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800af8c:	d105      	bne.n	800af9a <rclc_executor_trigger_any+0x36>
 800af8e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800af92:	b910      	cbnz	r0, 800af9a <rclc_executor_trigger_any+0x36>
 800af94:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800af98:	b128      	cbz	r0, 800afa6 <rclc_executor_trigger_any+0x42>
 800af9a:	bc30      	pop	{r4, r5}
 800af9c:	4770      	bx	lr
 800af9e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d1f9      	bne.n	800af9a <rclc_executor_trigger_any+0x36>
 800afa6:	3201      	adds	r2, #1
 800afa8:	4291      	cmp	r1, r2
 800afaa:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800afae:	d018      	beq.n	800afe2 <rclc_executor_trigger_any+0x7e>
 800afb0:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d0f0      	beq.n	800af9a <rclc_executor_trigger_any+0x36>
 800afb8:	f893 c000 	ldrb.w	ip, [r3]
 800afbc:	f1bc 0f08 	cmp.w	ip, #8
 800afc0:	d0e0      	beq.n	800af84 <rclc_executor_trigger_any+0x20>
 800afc2:	f1bc 0f09 	cmp.w	ip, #9
 800afc6:	d1ea      	bne.n	800af9e <rclc_executor_trigger_any+0x3a>
 800afc8:	685c      	ldr	r4, [r3, #4]
 800afca:	6a25      	ldr	r5, [r4, #32]
 800afcc:	2d00      	cmp	r5, #0
 800afce:	d1e4      	bne.n	800af9a <rclc_executor_trigger_any+0x36>
 800afd0:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d1e0      	bne.n	800af9a <rclc_executor_trigger_any+0x36>
 800afd8:	3201      	adds	r2, #1
 800afda:	4291      	cmp	r1, r2
 800afdc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800afe0:	d1e6      	bne.n	800afb0 <rclc_executor_trigger_any+0x4c>
 800afe2:	2000      	movs	r0, #0
 800afe4:	bc30      	pop	{r4, r5}
 800afe6:	4770      	bx	lr
 800afe8:	4770      	bx	lr
 800afea:	4608      	mov	r0, r1
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop

0800aff0 <rclc_executor_get_zero_initialized_executor>:
 800aff0:	b510      	push	{r4, lr}
 800aff2:	4903      	ldr	r1, [pc, #12]	@ (800b000 <rclc_executor_get_zero_initialized_executor+0x10>)
 800aff4:	4604      	mov	r4, r0
 800aff6:	2288      	movs	r2, #136	@ 0x88
 800aff8:	f00b fbcb 	bl	8016792 <memcpy>
 800affc:	4620      	mov	r0, r4
 800affe:	bd10      	pop	{r4, pc}
 800b000:	08017868 	.word	0x08017868
 800b004:	00000000 	.word	0x00000000

0800b008 <rclc_executor_init>:
 800b008:	2800      	cmp	r0, #0
 800b00a:	d05f      	beq.n	800b0cc <rclc_executor_init+0xc4>
 800b00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b010:	460c      	mov	r4, r1
 800b012:	b0b0      	sub	sp, #192	@ 0xc0
 800b014:	2900      	cmp	r1, #0
 800b016:	d051      	beq.n	800b0bc <rclc_executor_init+0xb4>
 800b018:	4605      	mov	r5, r0
 800b01a:	4618      	mov	r0, r3
 800b01c:	4616      	mov	r6, r2
 800b01e:	461f      	mov	r7, r3
 800b020:	f000 fbea 	bl	800b7f8 <rcutils_allocator_is_valid>
 800b024:	2800      	cmp	r0, #0
 800b026:	d049      	beq.n	800b0bc <rclc_executor_init+0xb4>
 800b028:	2e00      	cmp	r6, #0
 800b02a:	d047      	beq.n	800b0bc <rclc_executor_init+0xb4>
 800b02c:	492c      	ldr	r1, [pc, #176]	@ (800b0e0 <rclc_executor_init+0xd8>)
 800b02e:	2288      	movs	r2, #136	@ 0x88
 800b030:	a80e      	add	r0, sp, #56	@ 0x38
 800b032:	f00b fbae 	bl	8016792 <memcpy>
 800b036:	a90e      	add	r1, sp, #56	@ 0x38
 800b038:	2288      	movs	r2, #136	@ 0x88
 800b03a:	4628      	mov	r0, r5
 800b03c:	f00b fba9 	bl	8016792 <memcpy>
 800b040:	602c      	str	r4, [r5, #0]
 800b042:	4668      	mov	r0, sp
 800b044:	60ae      	str	r6, [r5, #8]
 800b046:	466c      	mov	r4, sp
 800b048:	f005 fb0e 	bl	8010668 <rcl_get_zero_initialized_wait_set>
 800b04c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b04e:	f105 0c14 	add.w	ip, r5, #20
 800b052:	f8d7 8000 	ldr.w	r8, [r7]
 800b056:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b05a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b05c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b062:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b066:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800b0d8 <rclc_executor_init+0xd0>
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	f8cc 3000 	str.w	r3, [ip]
 800b070:	6939      	ldr	r1, [r7, #16]
 800b072:	612f      	str	r7, [r5, #16]
 800b074:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800b078:	01b0      	lsls	r0, r6, #6
 800b07a:	47c0      	blx	r8
 800b07c:	6068      	str	r0, [r5, #4]
 800b07e:	b338      	cbz	r0, 800b0d0 <rclc_executor_init+0xc8>
 800b080:	2400      	movs	r4, #0
 800b082:	e000      	b.n	800b086 <rclc_executor_init+0x7e>
 800b084:	6868      	ldr	r0, [r5, #4]
 800b086:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800b08a:	4631      	mov	r1, r6
 800b08c:	3401      	adds	r4, #1
 800b08e:	f000 fa6b 	bl	800b568 <rclc_executor_handle_init>
 800b092:	42a6      	cmp	r6, r4
 800b094:	d1f6      	bne.n	800b084 <rclc_executor_init+0x7c>
 800b096:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800b09a:	f000 fa5b 	bl	800b554 <rclc_executor_handle_counters_zero_init>
 800b09e:	4a11      	ldr	r2, [pc, #68]	@ (800b0e4 <rclc_executor_init+0xdc>)
 800b0a0:	686b      	ldr	r3, [r5, #4]
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800b0a8:	b163      	cbz	r3, 800b0c4 <rclc_executor_init+0xbc>
 800b0aa:	692b      	ldr	r3, [r5, #16]
 800b0ac:	b153      	cbz	r3, 800b0c4 <rclc_executor_init+0xbc>
 800b0ae:	68ab      	ldr	r3, [r5, #8]
 800b0b0:	b143      	cbz	r3, 800b0c4 <rclc_executor_init+0xbc>
 800b0b2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800b0b6:	b030      	add	sp, #192	@ 0xc0
 800b0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0bc:	200b      	movs	r0, #11
 800b0be:	b030      	add	sp, #192	@ 0xc0
 800b0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	b030      	add	sp, #192	@ 0xc0
 800b0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0cc:	200b      	movs	r0, #11
 800b0ce:	4770      	bx	lr
 800b0d0:	200a      	movs	r0, #10
 800b0d2:	e7f4      	b.n	800b0be <rclc_executor_init+0xb6>
 800b0d4:	f3af 8000 	nop.w
 800b0d8:	3b9aca00 	.word	0x3b9aca00
 800b0dc:	00000000 	.word	0x00000000
 800b0e0:	08017868 	.word	0x08017868
 800b0e4:	0800af65 	.word	0x0800af65

0800b0e8 <rclc_executor_add_subscription>:
 800b0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ea:	f89d e018 	ldrb.w	lr, [sp, #24]
 800b0ee:	b338      	cbz	r0, 800b140 <rclc_executor_add_subscription+0x58>
 800b0f0:	b331      	cbz	r1, 800b140 <rclc_executor_add_subscription+0x58>
 800b0f2:	b32a      	cbz	r2, 800b140 <rclc_executor_add_subscription+0x58>
 800b0f4:	b323      	cbz	r3, 800b140 <rclc_executor_add_subscription+0x58>
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800b0fc:	42a8      	cmp	r0, r5
 800b0fe:	d301      	bcc.n	800b104 <rclc_executor_add_subscription+0x1c>
 800b100:	2001      	movs	r0, #1
 800b102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b104:	6866      	ldr	r6, [r4, #4]
 800b106:	0187      	lsls	r7, r0, #6
 800b108:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800b10c:	2500      	movs	r5, #0
 800b10e:	55f5      	strb	r5, [r6, r7]
 800b110:	3001      	adds	r0, #1
 800b112:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800b116:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800b11a:	2301      	movs	r3, #1
 800b11c:	f104 0514 	add.w	r5, r4, #20
 800b120:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800b124:	f88c e001 	strb.w	lr, [ip, #1]
 800b128:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800b12c:	60e0      	str	r0, [r4, #12]
 800b12e:	4628      	mov	r0, r5
 800b130:	f005 faae 	bl	8010690 <rcl_wait_set_is_valid>
 800b134:	b930      	cbnz	r0, 800b144 <rclc_executor_add_subscription+0x5c>
 800b136:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b138:	3301      	adds	r3, #1
 800b13a:	2000      	movs	r0, #0
 800b13c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800b13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b140:	200b      	movs	r0, #11
 800b142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b144:	4628      	mov	r0, r5
 800b146:	f005 faa9 	bl	801069c <rcl_wait_set_fini>
 800b14a:	2800      	cmp	r0, #0
 800b14c:	d0f3      	beq.n	800b136 <rclc_executor_add_subscription+0x4e>
 800b14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b150 <rclc_executor_prepare>:
 800b150:	2800      	cmp	r0, #0
 800b152:	d044      	beq.n	800b1de <rclc_executor_prepare+0x8e>
 800b154:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b156:	f100 0514 	add.w	r5, r0, #20
 800b15a:	b09b      	sub	sp, #108	@ 0x6c
 800b15c:	4604      	mov	r4, r0
 800b15e:	4628      	mov	r0, r5
 800b160:	f005 fa96 	bl	8010690 <rcl_wait_set_is_valid>
 800b164:	b110      	cbz	r0, 800b16c <rclc_executor_prepare+0x1c>
 800b166:	2000      	movs	r0, #0
 800b168:	b01b      	add	sp, #108	@ 0x6c
 800b16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b16c:	4628      	mov	r0, r5
 800b16e:	f005 fa95 	bl	801069c <rcl_wait_set_fini>
 800b172:	2800      	cmp	r0, #0
 800b174:	d130      	bne.n	800b1d8 <rclc_executor_prepare+0x88>
 800b176:	a80c      	add	r0, sp, #48	@ 0x30
 800b178:	f005 fa76 	bl	8010668 <rcl_get_zero_initialized_wait_set>
 800b17c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b180:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b184:	46ae      	mov	lr, r5
 800b186:	6927      	ldr	r7, [r4, #16]
 800b188:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b18c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b190:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b194:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b198:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b19c:	f8dc 3000 	ldr.w	r3, [ip]
 800b1a0:	f8ce 3000 	str.w	r3, [lr]
 800b1a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b1a6:	ae04      	add	r6, sp, #16
 800b1a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	6822      	ldr	r2, [r4, #0]
 800b1ae:	6033      	str	r3, [r6, #0]
 800b1b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1b2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b1b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b1b8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800b1bc:	e9cd 2100 	strd	r2, r1, [sp]
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800b1c4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b1c6:	f005 fd67 	bl	8010c98 <rcl_wait_set_init>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d0cc      	beq.n	800b168 <rclc_executor_prepare+0x18>
 800b1ce:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b1d0:	f000 fb36 	bl	800b840 <rcutils_reset_error>
 800b1d4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b1d6:	e7c7      	b.n	800b168 <rclc_executor_prepare+0x18>
 800b1d8:	f000 fb32 	bl	800b840 <rcutils_reset_error>
 800b1dc:	e7cb      	b.n	800b176 <rclc_executor_prepare+0x26>
 800b1de:	200b      	movs	r0, #11
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop

0800b1e4 <rclc_executor_spin_some.part.0>:
 800b1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e8:	f100 0614 	add.w	r6, r0, #20
 800b1ec:	b083      	sub	sp, #12
 800b1ee:	4691      	mov	r9, r2
 800b1f0:	4698      	mov	r8, r3
 800b1f2:	4605      	mov	r5, r0
 800b1f4:	f7ff ffac 	bl	800b150 <rclc_executor_prepare>
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	f005 fb1b 	bl	8010834 <rcl_wait_set_clear>
 800b1fe:	4607      	mov	r7, r0
 800b200:	2800      	cmp	r0, #0
 800b202:	f040 80ed 	bne.w	800b3e0 <rclc_executor_spin_some.part.0+0x1fc>
 800b206:	68ab      	ldr	r3, [r5, #8]
 800b208:	4604      	mov	r4, r0
 800b20a:	b303      	cbz	r3, 800b24e <rclc_executor_spin_some.part.0+0x6a>
 800b20c:	6869      	ldr	r1, [r5, #4]
 800b20e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800b212:	01a2      	lsls	r2, r4, #6
 800b214:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800b218:	b1cb      	cbz	r3, 800b24e <rclc_executor_spin_some.part.0+0x6a>
 800b21a:	5c8b      	ldrb	r3, [r1, r2]
 800b21c:	2b0a      	cmp	r3, #10
 800b21e:	f200 80d8 	bhi.w	800b3d2 <rclc_executor_spin_some.part.0+0x1ee>
 800b222:	e8df f003 	tbb	[pc, r3]
 800b226:	9c9c      	.short	0x9c9c
 800b228:	068c8ca7 	.word	0x068c8ca7
 800b22c:	bdc90606 	.word	0xbdc90606
 800b230:	b2          	.byte	0xb2
 800b231:	00          	.byte	0x00
 800b232:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b236:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b23a:	4630      	mov	r0, r6
 800b23c:	f005 fe42 	bl	8010ec4 <rcl_wait_set_add_service>
 800b240:	2800      	cmp	r0, #0
 800b242:	f040 8086 	bne.w	800b352 <rclc_executor_spin_some.part.0+0x16e>
 800b246:	68ab      	ldr	r3, [r5, #8]
 800b248:	3401      	adds	r4, #1
 800b24a:	429c      	cmp	r4, r3
 800b24c:	d3de      	bcc.n	800b20c <rclc_executor_spin_some.part.0+0x28>
 800b24e:	4643      	mov	r3, r8
 800b250:	464a      	mov	r2, r9
 800b252:	4630      	mov	r0, r6
 800b254:	f005 fe64 	bl	8010f20 <rcl_wait>
 800b258:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f000 80c7 	beq.w	800b3f0 <rclc_executor_spin_some.part.0+0x20c>
 800b262:	2b01      	cmp	r3, #1
 800b264:	f040 80b5 	bne.w	800b3d2 <rclc_executor_spin_some.part.0+0x1ee>
 800b268:	68ab      	ldr	r3, [r5, #8]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f000 8159 	beq.w	800b522 <rclc_executor_spin_some.part.0+0x33e>
 800b270:	2400      	movs	r4, #0
 800b272:	46a0      	mov	r8, r4
 800b274:	f240 1991 	movw	r9, #401	@ 0x191
 800b278:	e00a      	b.n	800b290 <rclc_executor_spin_some.part.0+0xac>
 800b27a:	f7ff fb71 	bl	800a960 <_rclc_check_for_new_data>
 800b27e:	4604      	mov	r4, r0
 800b280:	b110      	cbz	r0, 800b288 <rclc_executor_spin_some.part.0+0xa4>
 800b282:	4548      	cmp	r0, r9
 800b284:	f040 80b2 	bne.w	800b3ec <rclc_executor_spin_some.part.0+0x208>
 800b288:	68ab      	ldr	r3, [r5, #8]
 800b28a:	4598      	cmp	r8, r3
 800b28c:	f080 8126 	bcs.w	800b4dc <rclc_executor_spin_some.part.0+0x2f8>
 800b290:	686a      	ldr	r2, [r5, #4]
 800b292:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b296:	4631      	mov	r1, r6
 800b298:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b29c:	f108 0801 	add.w	r8, r8, #1
 800b2a0:	f1bc 0f00 	cmp.w	ip, #0
 800b2a4:	d1e9      	bne.n	800b27a <rclc_executor_spin_some.part.0+0x96>
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b2ae:	4798      	blx	r3
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	f000 809b 	beq.w	800b3ec <rclc_executor_spin_some.part.0+0x208>
 800b2b6:	68ab      	ldr	r3, [r5, #8]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f000 8097 	beq.w	800b3ec <rclc_executor_spin_some.part.0+0x208>
 800b2be:	f04f 0800 	mov.w	r8, #0
 800b2c2:	f240 1991 	movw	r9, #401	@ 0x191
 800b2c6:	e009      	b.n	800b2dc <rclc_executor_spin_some.part.0+0xf8>
 800b2c8:	f7ff fb98 	bl	800a9fc <_rclc_take_new_data>
 800b2cc:	4604      	mov	r4, r0
 800b2ce:	b110      	cbz	r0, 800b2d6 <rclc_executor_spin_some.part.0+0xf2>
 800b2d0:	4548      	cmp	r0, r9
 800b2d2:	f040 808b 	bne.w	800b3ec <rclc_executor_spin_some.part.0+0x208>
 800b2d6:	68ab      	ldr	r3, [r5, #8]
 800b2d8:	4598      	cmp	r8, r3
 800b2da:	d209      	bcs.n	800b2f0 <rclc_executor_spin_some.part.0+0x10c>
 800b2dc:	6868      	ldr	r0, [r5, #4]
 800b2de:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800b2e8:	f108 0801 	add.w	r8, r8, #1
 800b2ec:	2a00      	cmp	r2, #0
 800b2ee:	d1eb      	bne.n	800b2c8 <rclc_executor_spin_some.part.0+0xe4>
 800b2f0:	2600      	movs	r6, #0
 800b2f2:	b97b      	cbnz	r3, 800b314 <rclc_executor_spin_some.part.0+0x130>
 800b2f4:	e07a      	b.n	800b3ec <rclc_executor_spin_some.part.0+0x208>
 800b2f6:	f812 200c 	ldrb.w	r2, [r2, ip]
 800b2fa:	2a08      	cmp	r2, #8
 800b2fc:	f000 80fd 	beq.w	800b4fa <rclc_executor_spin_some.part.0+0x316>
 800b300:	2a09      	cmp	r2, #9
 800b302:	f000 80ef 	beq.w	800b4e4 <rclc_executor_spin_some.part.0+0x300>
 800b306:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800b30a:	b98a      	cbnz	r2, 800b330 <rclc_executor_spin_some.part.0+0x14c>
 800b30c:	3601      	adds	r6, #1
 800b30e:	429e      	cmp	r6, r3
 800b310:	d262      	bcs.n	800b3d8 <rclc_executor_spin_some.part.0+0x1f4>
 800b312:	2400      	movs	r4, #0
 800b314:	686a      	ldr	r2, [r5, #4]
 800b316:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800b31a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800b31e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800b322:	2900      	cmp	r1, #0
 800b324:	d062      	beq.n	800b3ec <rclc_executor_spin_some.part.0+0x208>
 800b326:	7841      	ldrb	r1, [r0, #1]
 800b328:	2900      	cmp	r1, #0
 800b32a:	d0e4      	beq.n	800b2f6 <rclc_executor_spin_some.part.0+0x112>
 800b32c:	2901      	cmp	r1, #1
 800b32e:	d1ed      	bne.n	800b30c <rclc_executor_spin_some.part.0+0x128>
 800b330:	f7ff fcd8 	bl	800ace4 <_rclc_execute.part.0>
 800b334:	2800      	cmp	r0, #0
 800b336:	f040 80b6 	bne.w	800b4a6 <rclc_executor_spin_some.part.0+0x2c2>
 800b33a:	68ab      	ldr	r3, [r5, #8]
 800b33c:	e7e6      	b.n	800b30c <rclc_executor_spin_some.part.0+0x128>
 800b33e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b342:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b346:	4630      	mov	r0, r6
 800b348:	f005 fd90 	bl	8010e6c <rcl_wait_set_add_client>
 800b34c:	2800      	cmp	r0, #0
 800b34e:	f43f af7a 	beq.w	800b246 <rclc_executor_spin_some.part.0+0x62>
 800b352:	9001      	str	r0, [sp, #4]
 800b354:	f000 fa74 	bl	800b840 <rcutils_reset_error>
 800b358:	9801      	ldr	r0, [sp, #4]
 800b35a:	4607      	mov	r7, r0
 800b35c:	e03c      	b.n	800b3d8 <rclc_executor_spin_some.part.0+0x1f4>
 800b35e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b362:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b366:	4630      	mov	r0, r6
 800b368:	f005 fa38 	bl	80107dc <rcl_wait_set_add_subscription>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	f43f af6a 	beq.w	800b246 <rclc_executor_spin_some.part.0+0x62>
 800b372:	e7ee      	b.n	800b352 <rclc_executor_spin_some.part.0+0x16e>
 800b374:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b378:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b37c:	4630      	mov	r0, r6
 800b37e:	f005 fd45 	bl	8010e0c <rcl_wait_set_add_timer>
 800b382:	2800      	cmp	r0, #0
 800b384:	f43f af5f 	beq.w	800b246 <rclc_executor_spin_some.part.0+0x62>
 800b388:	e7e3      	b.n	800b352 <rclc_executor_spin_some.part.0+0x16e>
 800b38a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b38e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b392:	4630      	mov	r0, r6
 800b394:	f005 fd0e 	bl	8010db4 <rcl_wait_set_add_guard_condition>
 800b398:	2800      	cmp	r0, #0
 800b39a:	f43f af54 	beq.w	800b246 <rclc_executor_spin_some.part.0+0x62>
 800b39e:	e7d8      	b.n	800b352 <rclc_executor_spin_some.part.0+0x16e>
 800b3a0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b3a4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b3a8:	3110      	adds	r1, #16
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	f006 fa90 	bl	80118d0 <rcl_action_wait_set_add_action_server>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	f43f af48 	beq.w	800b246 <rclc_executor_spin_some.part.0+0x62>
 800b3b6:	e7cc      	b.n	800b352 <rclc_executor_spin_some.part.0+0x16e>
 800b3b8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b3bc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b3c0:	3110      	adds	r1, #16
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	f006 f85b 	bl	8011480 <rcl_action_wait_set_add_action_client>
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	f43f af3b 	beq.w	800b246 <rclc_executor_spin_some.part.0+0x62>
 800b3d0:	e7bf      	b.n	800b352 <rclc_executor_spin_some.part.0+0x16e>
 800b3d2:	f000 fa35 	bl	800b840 <rcutils_reset_error>
 800b3d6:	2701      	movs	r7, #1
 800b3d8:	4638      	mov	r0, r7
 800b3da:	b003      	add	sp, #12
 800b3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e0:	f000 fa2e 	bl	800b840 <rcutils_reset_error>
 800b3e4:	4638      	mov	r0, r7
 800b3e6:	b003      	add	sp, #12
 800b3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ec:	4627      	mov	r7, r4
 800b3ee:	e7f3      	b.n	800b3d8 <rclc_executor_spin_some.part.0+0x1f4>
 800b3f0:	68ab      	ldr	r3, [r5, #8]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	f000 8092 	beq.w	800b51c <rclc_executor_spin_some.part.0+0x338>
 800b3f8:	2400      	movs	r4, #0
 800b3fa:	46a0      	mov	r8, r4
 800b3fc:	f240 1991 	movw	r9, #401	@ 0x191
 800b400:	e008      	b.n	800b414 <rclc_executor_spin_some.part.0+0x230>
 800b402:	f7ff faad 	bl	800a960 <_rclc_check_for_new_data>
 800b406:	4604      	mov	r4, r0
 800b408:	b108      	cbz	r0, 800b40e <rclc_executor_spin_some.part.0+0x22a>
 800b40a:	4548      	cmp	r0, r9
 800b40c:	d1ee      	bne.n	800b3ec <rclc_executor_spin_some.part.0+0x208>
 800b40e:	68ab      	ldr	r3, [r5, #8]
 800b410:	4598      	cmp	r8, r3
 800b412:	d265      	bcs.n	800b4e0 <rclc_executor_spin_some.part.0+0x2fc>
 800b414:	686a      	ldr	r2, [r5, #4]
 800b416:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b41a:	4631      	mov	r1, r6
 800b41c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b420:	f108 0801 	add.w	r8, r8, #1
 800b424:	f1bc 0f00 	cmp.w	ip, #0
 800b428:	d1eb      	bne.n	800b402 <rclc_executor_spin_some.part.0+0x21e>
 800b42a:	4619      	mov	r1, r3
 800b42c:	4610      	mov	r0, r2
 800b42e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b432:	4798      	blx	r3
 800b434:	2800      	cmp	r0, #0
 800b436:	d0d9      	beq.n	800b3ec <rclc_executor_spin_some.part.0+0x208>
 800b438:	68ab      	ldr	r3, [r5, #8]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d0d6      	beq.n	800b3ec <rclc_executor_spin_some.part.0+0x208>
 800b43e:	f04f 0800 	mov.w	r8, #0
 800b442:	f240 1991 	movw	r9, #401	@ 0x191
 800b446:	f240 2a59 	movw	sl, #601	@ 0x259
 800b44a:	e00e      	b.n	800b46a <rclc_executor_spin_some.part.0+0x286>
 800b44c:	f813 300b 	ldrb.w	r3, [r3, fp]
 800b450:	2b08      	cmp	r3, #8
 800b452:	d033      	beq.n	800b4bc <rclc_executor_spin_some.part.0+0x2d8>
 800b454:	2b09      	cmp	r3, #9
 800b456:	d028      	beq.n	800b4aa <rclc_executor_spin_some.part.0+0x2c6>
 800b458:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800b45c:	b9fb      	cbnz	r3, 800b49e <rclc_executor_spin_some.part.0+0x2ba>
 800b45e:	68ab      	ldr	r3, [r5, #8]
 800b460:	f108 0801 	add.w	r8, r8, #1
 800b464:	4598      	cmp	r8, r3
 800b466:	d2b7      	bcs.n	800b3d8 <rclc_executor_spin_some.part.0+0x1f4>
 800b468:	2400      	movs	r4, #0
 800b46a:	6868      	ldr	r0, [r5, #4]
 800b46c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b470:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800b474:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d0b7      	beq.n	800b3ec <rclc_executor_spin_some.part.0+0x208>
 800b47c:	4631      	mov	r1, r6
 800b47e:	f7ff fabd 	bl	800a9fc <_rclc_take_new_data>
 800b482:	b118      	cbz	r0, 800b48c <rclc_executor_spin_some.part.0+0x2a8>
 800b484:	4548      	cmp	r0, r9
 800b486:	d001      	beq.n	800b48c <rclc_executor_spin_some.part.0+0x2a8>
 800b488:	4550      	cmp	r0, sl
 800b48a:	d10c      	bne.n	800b4a6 <rclc_executor_spin_some.part.0+0x2c2>
 800b48c:	686b      	ldr	r3, [r5, #4]
 800b48e:	eb13 000b 	adds.w	r0, r3, fp
 800b492:	d021      	beq.n	800b4d8 <rclc_executor_spin_some.part.0+0x2f4>
 800b494:	7842      	ldrb	r2, [r0, #1]
 800b496:	2a00      	cmp	r2, #0
 800b498:	d0d8      	beq.n	800b44c <rclc_executor_spin_some.part.0+0x268>
 800b49a:	2a01      	cmp	r2, #1
 800b49c:	d1df      	bne.n	800b45e <rclc_executor_spin_some.part.0+0x27a>
 800b49e:	f7ff fc21 	bl	800ace4 <_rclc_execute.part.0>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d0db      	beq.n	800b45e <rclc_executor_spin_some.part.0+0x27a>
 800b4a6:	4607      	mov	r7, r0
 800b4a8:	e796      	b.n	800b3d8 <rclc_executor_spin_some.part.0+0x1f4>
 800b4aa:	6843      	ldr	r3, [r0, #4]
 800b4ac:	6a1a      	ldr	r2, [r3, #32]
 800b4ae:	2a00      	cmp	r2, #0
 800b4b0:	d1f5      	bne.n	800b49e <rclc_executor_spin_some.part.0+0x2ba>
 800b4b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d0d1      	beq.n	800b45e <rclc_executor_spin_some.part.0+0x27a>
 800b4ba:	e7f0      	b.n	800b49e <rclc_executor_spin_some.part.0+0x2ba>
 800b4bc:	6843      	ldr	r3, [r0, #4]
 800b4be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b4c0:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800b4c4:	d1eb      	bne.n	800b49e <rclc_executor_spin_some.part.0+0x2ba>
 800b4c6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b4ca:	2a00      	cmp	r2, #0
 800b4cc:	d1e7      	bne.n	800b49e <rclc_executor_spin_some.part.0+0x2ba>
 800b4ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d0c3      	beq.n	800b45e <rclc_executor_spin_some.part.0+0x27a>
 800b4d6:	e7e2      	b.n	800b49e <rclc_executor_spin_some.part.0+0x2ba>
 800b4d8:	270b      	movs	r7, #11
 800b4da:	e77d      	b.n	800b3d8 <rclc_executor_spin_some.part.0+0x1f4>
 800b4dc:	686a      	ldr	r2, [r5, #4]
 800b4de:	e6e2      	b.n	800b2a6 <rclc_executor_spin_some.part.0+0xc2>
 800b4e0:	686a      	ldr	r2, [r5, #4]
 800b4e2:	e7a2      	b.n	800b42a <rclc_executor_spin_some.part.0+0x246>
 800b4e4:	6842      	ldr	r2, [r0, #4]
 800b4e6:	6a11      	ldr	r1, [r2, #32]
 800b4e8:	2900      	cmp	r1, #0
 800b4ea:	f47f af21 	bne.w	800b330 <rclc_executor_spin_some.part.0+0x14c>
 800b4ee:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800b4f2:	2a00      	cmp	r2, #0
 800b4f4:	f43f af0a 	beq.w	800b30c <rclc_executor_spin_some.part.0+0x128>
 800b4f8:	e71a      	b.n	800b330 <rclc_executor_spin_some.part.0+0x14c>
 800b4fa:	6842      	ldr	r2, [r0, #4]
 800b4fc:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800b4fe:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800b502:	f47f af15 	bne.w	800b330 <rclc_executor_spin_some.part.0+0x14c>
 800b506:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800b50a:	2900      	cmp	r1, #0
 800b50c:	f47f af10 	bne.w	800b330 <rclc_executor_spin_some.part.0+0x14c>
 800b510:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800b514:	2a00      	cmp	r2, #0
 800b516:	f43f aef9 	beq.w	800b30c <rclc_executor_spin_some.part.0+0x128>
 800b51a:	e709      	b.n	800b330 <rclc_executor_spin_some.part.0+0x14c>
 800b51c:	686a      	ldr	r2, [r5, #4]
 800b51e:	461c      	mov	r4, r3
 800b520:	e783      	b.n	800b42a <rclc_executor_spin_some.part.0+0x246>
 800b522:	686a      	ldr	r2, [r5, #4]
 800b524:	461c      	mov	r4, r3
 800b526:	e6be      	b.n	800b2a6 <rclc_executor_spin_some.part.0+0xc2>

0800b528 <rclc_executor_spin_some>:
 800b528:	b190      	cbz	r0, 800b550 <rclc_executor_spin_some+0x28>
 800b52a:	b570      	push	{r4, r5, r6, lr}
 800b52c:	4604      	mov	r4, r0
 800b52e:	6800      	ldr	r0, [r0, #0]
 800b530:	4616      	mov	r6, r2
 800b532:	461d      	mov	r5, r3
 800b534:	f003 ff0c 	bl	800f350 <rcl_context_is_valid>
 800b538:	b130      	cbz	r0, 800b548 <rclc_executor_spin_some+0x20>
 800b53a:	4632      	mov	r2, r6
 800b53c:	462b      	mov	r3, r5
 800b53e:	4620      	mov	r0, r4
 800b540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b544:	f7ff be4e 	b.w	800b1e4 <rclc_executor_spin_some.part.0>
 800b548:	f000 f97a 	bl	800b840 <rcutils_reset_error>
 800b54c:	2001      	movs	r0, #1
 800b54e:	bd70      	pop	{r4, r5, r6, pc}
 800b550:	200b      	movs	r0, #11
 800b552:	4770      	bx	lr

0800b554 <rclc_executor_handle_counters_zero_init>:
 800b554:	b130      	cbz	r0, 800b564 <rclc_executor_handle_counters_zero_init+0x10>
 800b556:	b508      	push	{r3, lr}
 800b558:	2220      	movs	r2, #32
 800b55a:	2100      	movs	r1, #0
 800b55c:	f00b f850 	bl	8016600 <memset>
 800b560:	2000      	movs	r0, #0
 800b562:	bd08      	pop	{r3, pc}
 800b564:	200b      	movs	r0, #11
 800b566:	4770      	bx	lr

0800b568 <rclc_executor_handle_init>:
 800b568:	b168      	cbz	r0, 800b586 <rclc_executor_handle_init+0x1e>
 800b56a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800b590 <rclc_executor_handle_init+0x28>
 800b56e:	2300      	movs	r3, #0
 800b570:	220b      	movs	r2, #11
 800b572:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800b576:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b57a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800b57e:	8002      	strh	r2, [r0, #0]
 800b580:	8703      	strh	r3, [r0, #56]	@ 0x38
 800b582:	4618      	mov	r0, r3
 800b584:	4770      	bx	lr
 800b586:	200b      	movs	r0, #11
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	f3af 8000 	nop.w
	...

0800b598 <rclc_support_init>:
 800b598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b59c:	b086      	sub	sp, #24
 800b59e:	b3b8      	cbz	r0, 800b610 <rclc_support_init+0x78>
 800b5a0:	461c      	mov	r4, r3
 800b5a2:	b3ab      	cbz	r3, 800b610 <rclc_support_init+0x78>
 800b5a4:	460f      	mov	r7, r1
 800b5a6:	4690      	mov	r8, r2
 800b5a8:	4606      	mov	r6, r0
 800b5aa:	f004 f83b 	bl	800f624 <rcl_get_zero_initialized_init_options>
 800b5ae:	f104 030c 	add.w	r3, r4, #12
 800b5b2:	9005      	str	r0, [sp, #20]
 800b5b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b5b8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b5bc:	a805      	add	r0, sp, #20
 800b5be:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b5c2:	f004 f831 	bl	800f628 <rcl_init_options_init>
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	b9e0      	cbnz	r0, 800b604 <rclc_support_init+0x6c>
 800b5ca:	ad02      	add	r5, sp, #8
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	f003 feb5 	bl	800f33c <rcl_get_zero_initialized_context>
 800b5d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b5d6:	4633      	mov	r3, r6
 800b5d8:	e886 0003 	stmia.w	r6, {r0, r1}
 800b5dc:	aa05      	add	r2, sp, #20
 800b5de:	4641      	mov	r1, r8
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f003 ff1b 	bl	800f41c <rcl_init>
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	b9b8      	cbnz	r0, 800b61a <rclc_support_init+0x82>
 800b5ea:	60b4      	str	r4, [r6, #8]
 800b5ec:	4622      	mov	r2, r4
 800b5ee:	f106 010c 	add.w	r1, r6, #12
 800b5f2:	2003      	movs	r0, #3
 800b5f4:	f004 fe42 	bl	801027c <rcl_clock_init>
 800b5f8:	4605      	mov	r5, r0
 800b5fa:	b970      	cbnz	r0, 800b61a <rclc_support_init+0x82>
 800b5fc:	a805      	add	r0, sp, #20
 800b5fe:	f004 f879 	bl	800f6f4 <rcl_init_options_fini>
 800b602:	b108      	cbz	r0, 800b608 <rclc_support_init+0x70>
 800b604:	f000 f91c 	bl	800b840 <rcutils_reset_error>
 800b608:	4628      	mov	r0, r5
 800b60a:	b006      	add	sp, #24
 800b60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b610:	250b      	movs	r5, #11
 800b612:	4628      	mov	r0, r5
 800b614:	b006      	add	sp, #24
 800b616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b61a:	f000 f911 	bl	800b840 <rcutils_reset_error>
 800b61e:	a805      	add	r0, sp, #20
 800b620:	f004 f868 	bl	800f6f4 <rcl_init_options_fini>
 800b624:	2800      	cmp	r0, #0
 800b626:	d0ef      	beq.n	800b608 <rclc_support_init+0x70>
 800b628:	e7ec      	b.n	800b604 <rclc_support_init+0x6c>
 800b62a:	bf00      	nop

0800b62c <rclc_node_init_default>:
 800b62c:	b3b8      	cbz	r0, 800b69e <rclc_node_init_default+0x72>
 800b62e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b632:	460d      	mov	r5, r1
 800b634:	b0a1      	sub	sp, #132	@ 0x84
 800b636:	b329      	cbz	r1, 800b684 <rclc_node_init_default+0x58>
 800b638:	4616      	mov	r6, r2
 800b63a:	b31a      	cbz	r2, 800b684 <rclc_node_init_default+0x58>
 800b63c:	461f      	mov	r7, r3
 800b63e:	b30b      	cbz	r3, 800b684 <rclc_node_init_default+0x58>
 800b640:	f10d 0810 	add.w	r8, sp, #16
 800b644:	4604      	mov	r4, r0
 800b646:	4640      	mov	r0, r8
 800b648:	f004 f90c 	bl	800f864 <rcl_get_zero_initialized_node>
 800b64c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b650:	f10d 0918 	add.w	r9, sp, #24
 800b654:	e884 0003 	stmia.w	r4, {r0, r1}
 800b658:	4648      	mov	r0, r9
 800b65a:	f004 fa7b 	bl	800fb54 <rcl_node_get_default_options>
 800b65e:	4640      	mov	r0, r8
 800b660:	f004 f900 	bl	800f864 <rcl_get_zero_initialized_node>
 800b664:	f8cd 9000 	str.w	r9, [sp]
 800b668:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b66c:	463b      	mov	r3, r7
 800b66e:	e884 0003 	stmia.w	r4, {r0, r1}
 800b672:	4632      	mov	r2, r6
 800b674:	4629      	mov	r1, r5
 800b676:	4620      	mov	r0, r4
 800b678:	f004 f8fe 	bl	800f878 <rcl_node_init>
 800b67c:	b930      	cbnz	r0, 800b68c <rclc_node_init_default+0x60>
 800b67e:	b021      	add	sp, #132	@ 0x84
 800b680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b684:	200b      	movs	r0, #11
 800b686:	b021      	add	sp, #132	@ 0x84
 800b688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b68c:	9003      	str	r0, [sp, #12]
 800b68e:	f000 f8d7 	bl	800b840 <rcutils_reset_error>
 800b692:	f000 f8d5 	bl	800b840 <rcutils_reset_error>
 800b696:	9803      	ldr	r0, [sp, #12]
 800b698:	b021      	add	sp, #132	@ 0x84
 800b69a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b69e:	200b      	movs	r0, #11
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop

0800b6a4 <rclc_publisher_init_default>:
 800b6a4:	b368      	cbz	r0, 800b702 <rclc_publisher_init_default+0x5e>
 800b6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6aa:	460d      	mov	r5, r1
 800b6ac:	b0a0      	sub	sp, #128	@ 0x80
 800b6ae:	b321      	cbz	r1, 800b6fa <rclc_publisher_init_default+0x56>
 800b6b0:	4616      	mov	r6, r2
 800b6b2:	b312      	cbz	r2, 800b6fa <rclc_publisher_init_default+0x56>
 800b6b4:	461f      	mov	r7, r3
 800b6b6:	b303      	cbz	r3, 800b6fa <rclc_publisher_init_default+0x56>
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	f7ff f841 	bl	800a740 <rcl_get_zero_initialized_publisher>
 800b6be:	f10d 0810 	add.w	r8, sp, #16
 800b6c2:	6020      	str	r0, [r4, #0]
 800b6c4:	4640      	mov	r0, r8
 800b6c6:	f7ff f8d7 	bl	800a878 <rcl_publisher_get_default_options>
 800b6ca:	490f      	ldr	r1, [pc, #60]	@ (800b708 <rclc_publisher_init_default+0x64>)
 800b6cc:	2250      	movs	r2, #80	@ 0x50
 800b6ce:	4640      	mov	r0, r8
 800b6d0:	f00b f85f 	bl	8016792 <memcpy>
 800b6d4:	f8cd 8000 	str.w	r8, [sp]
 800b6d8:	463b      	mov	r3, r7
 800b6da:	4632      	mov	r2, r6
 800b6dc:	4629      	mov	r1, r5
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f7ff f834 	bl	800a74c <rcl_publisher_init>
 800b6e4:	b910      	cbnz	r0, 800b6ec <rclc_publisher_init_default+0x48>
 800b6e6:	b020      	add	sp, #128	@ 0x80
 800b6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ec:	9003      	str	r0, [sp, #12]
 800b6ee:	f000 f8a7 	bl	800b840 <rcutils_reset_error>
 800b6f2:	9803      	ldr	r0, [sp, #12]
 800b6f4:	b020      	add	sp, #128	@ 0x80
 800b6f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6fa:	200b      	movs	r0, #11
 800b6fc:	b020      	add	sp, #128	@ 0x80
 800b6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b702:	200b      	movs	r0, #11
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	080178f0 	.word	0x080178f0

0800b70c <rclc_subscription_init_default>:
 800b70c:	b368      	cbz	r0, 800b76a <rclc_subscription_init_default+0x5e>
 800b70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b712:	460d      	mov	r5, r1
 800b714:	b0a0      	sub	sp, #128	@ 0x80
 800b716:	b321      	cbz	r1, 800b762 <rclc_subscription_init_default+0x56>
 800b718:	4616      	mov	r6, r2
 800b71a:	b312      	cbz	r2, 800b762 <rclc_subscription_init_default+0x56>
 800b71c:	461f      	mov	r7, r3
 800b71e:	b303      	cbz	r3, 800b762 <rclc_subscription_init_default+0x56>
 800b720:	4604      	mov	r4, r0
 800b722:	f004 fc4f 	bl	800ffc4 <rcl_get_zero_initialized_subscription>
 800b726:	f10d 0810 	add.w	r8, sp, #16
 800b72a:	6020      	str	r0, [r4, #0]
 800b72c:	4640      	mov	r0, r8
 800b72e:	f004 fcf7 	bl	8010120 <rcl_subscription_get_default_options>
 800b732:	490f      	ldr	r1, [pc, #60]	@ (800b770 <rclc_subscription_init_default+0x64>)
 800b734:	2250      	movs	r2, #80	@ 0x50
 800b736:	4640      	mov	r0, r8
 800b738:	f00b f82b 	bl	8016792 <memcpy>
 800b73c:	f8cd 8000 	str.w	r8, [sp]
 800b740:	463b      	mov	r3, r7
 800b742:	4632      	mov	r2, r6
 800b744:	4629      	mov	r1, r5
 800b746:	4620      	mov	r0, r4
 800b748:	f004 fc42 	bl	800ffd0 <rcl_subscription_init>
 800b74c:	b910      	cbnz	r0, 800b754 <rclc_subscription_init_default+0x48>
 800b74e:	b020      	add	sp, #128	@ 0x80
 800b750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b754:	9003      	str	r0, [sp, #12]
 800b756:	f000 f873 	bl	800b840 <rcutils_reset_error>
 800b75a:	9803      	ldr	r0, [sp, #12]
 800b75c:	b020      	add	sp, #128	@ 0x80
 800b75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b762:	200b      	movs	r0, #11
 800b764:	b020      	add	sp, #128	@ 0x80
 800b766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b76a:	200b      	movs	r0, #11
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	08017940 	.word	0x08017940

0800b774 <__default_zero_allocate>:
 800b774:	f00a bb5a 	b.w	8015e2c <calloc>

0800b778 <__default_reallocate>:
 800b778:	f00a bce6 	b.w	8016148 <realloc>

0800b77c <__default_deallocate>:
 800b77c:	f00a bbc2 	b.w	8015f04 <free>

0800b780 <__default_allocate>:
 800b780:	f00a bbb8 	b.w	8015ef4 <malloc>

0800b784 <rcutils_get_zero_initialized_allocator>:
 800b784:	b510      	push	{r4, lr}
 800b786:	4c05      	ldr	r4, [pc, #20]	@ (800b79c <rcutils_get_zero_initialized_allocator+0x18>)
 800b788:	4686      	mov	lr, r0
 800b78a:	4684      	mov	ip, r0
 800b78c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b78e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b792:	6823      	ldr	r3, [r4, #0]
 800b794:	f8cc 3000 	str.w	r3, [ip]
 800b798:	4670      	mov	r0, lr
 800b79a:	bd10      	pop	{r4, pc}
 800b79c:	08017990 	.word	0x08017990

0800b7a0 <rcutils_set_default_allocator>:
 800b7a0:	b1a8      	cbz	r0, 800b7ce <rcutils_set_default_allocator+0x2e>
 800b7a2:	6802      	ldr	r2, [r0, #0]
 800b7a4:	b1a2      	cbz	r2, 800b7d0 <rcutils_set_default_allocator+0x30>
 800b7a6:	6841      	ldr	r1, [r0, #4]
 800b7a8:	b1a1      	cbz	r1, 800b7d4 <rcutils_set_default_allocator+0x34>
 800b7aa:	b410      	push	{r4}
 800b7ac:	68c4      	ldr	r4, [r0, #12]
 800b7ae:	b164      	cbz	r4, 800b7ca <rcutils_set_default_allocator+0x2a>
 800b7b0:	6880      	ldr	r0, [r0, #8]
 800b7b2:	b138      	cbz	r0, 800b7c4 <rcutils_set_default_allocator+0x24>
 800b7b4:	4b08      	ldr	r3, [pc, #32]	@ (800b7d8 <rcutils_set_default_allocator+0x38>)
 800b7b6:	601a      	str	r2, [r3, #0]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b7be:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b7c2:	2001      	movs	r0, #1
 800b7c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7c8:	4770      	bx	lr
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	e7fa      	b.n	800b7c4 <rcutils_set_default_allocator+0x24>
 800b7ce:	4770      	bx	lr
 800b7d0:	4610      	mov	r0, r2
 800b7d2:	4770      	bx	lr
 800b7d4:	4608      	mov	r0, r1
 800b7d6:	4770      	bx	lr
 800b7d8:	200001bc 	.word	0x200001bc

0800b7dc <rcutils_get_default_allocator>:
 800b7dc:	b510      	push	{r4, lr}
 800b7de:	4c05      	ldr	r4, [pc, #20]	@ (800b7f4 <rcutils_get_default_allocator+0x18>)
 800b7e0:	4686      	mov	lr, r0
 800b7e2:	4684      	mov	ip, r0
 800b7e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	f8cc 3000 	str.w	r3, [ip]
 800b7f0:	4670      	mov	r0, lr
 800b7f2:	bd10      	pop	{r4, pc}
 800b7f4:	200001bc 	.word	0x200001bc

0800b7f8 <rcutils_allocator_is_valid>:
 800b7f8:	b158      	cbz	r0, 800b812 <rcutils_allocator_is_valid+0x1a>
 800b7fa:	6803      	ldr	r3, [r0, #0]
 800b7fc:	b143      	cbz	r3, 800b810 <rcutils_allocator_is_valid+0x18>
 800b7fe:	6843      	ldr	r3, [r0, #4]
 800b800:	b133      	cbz	r3, 800b810 <rcutils_allocator_is_valid+0x18>
 800b802:	68c3      	ldr	r3, [r0, #12]
 800b804:	b123      	cbz	r3, 800b810 <rcutils_allocator_is_valid+0x18>
 800b806:	6880      	ldr	r0, [r0, #8]
 800b808:	3800      	subs	r0, #0
 800b80a:	bf18      	it	ne
 800b80c:	2001      	movne	r0, #1
 800b80e:	4770      	bx	lr
 800b810:	4618      	mov	r0, r3
 800b812:	4770      	bx	lr

0800b814 <rcutils_get_error_string>:
 800b814:	4b06      	ldr	r3, [pc, #24]	@ (800b830 <rcutils_get_error_string+0x1c>)
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	b13b      	cbz	r3, 800b82a <rcutils_get_error_string+0x16>
 800b81a:	4b06      	ldr	r3, [pc, #24]	@ (800b834 <rcutils_get_error_string+0x20>)
 800b81c:	781a      	ldrb	r2, [r3, #0]
 800b81e:	b90a      	cbnz	r2, 800b824 <rcutils_get_error_string+0x10>
 800b820:	2201      	movs	r2, #1
 800b822:	701a      	strb	r2, [r3, #0]
 800b824:	4b04      	ldr	r3, [pc, #16]	@ (800b838 <rcutils_get_error_string+0x24>)
 800b826:	7818      	ldrb	r0, [r3, #0]
 800b828:	4770      	bx	lr
 800b82a:	4b04      	ldr	r3, [pc, #16]	@ (800b83c <rcutils_get_error_string+0x28>)
 800b82c:	7818      	ldrb	r0, [r3, #0]
 800b82e:	4770      	bx	lr
 800b830:	200092a0 	.word	0x200092a0
 800b834:	200092b9 	.word	0x200092b9
 800b838:	200092b8 	.word	0x200092b8
 800b83c:	080179a4 	.word	0x080179a4

0800b840 <rcutils_reset_error>:
 800b840:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b860 <rcutils_reset_error+0x20>
 800b844:	4a08      	ldr	r2, [pc, #32]	@ (800b868 <rcutils_reset_error+0x28>)
 800b846:	4809      	ldr	r0, [pc, #36]	@ (800b86c <rcutils_reset_error+0x2c>)
 800b848:	4909      	ldr	r1, [pc, #36]	@ (800b870 <rcutils_reset_error+0x30>)
 800b84a:	2300      	movs	r3, #0
 800b84c:	8013      	strh	r3, [r2, #0]
 800b84e:	ed82 7b02 	vstr	d7, [r2, #8]
 800b852:	4a08      	ldr	r2, [pc, #32]	@ (800b874 <rcutils_reset_error+0x34>)
 800b854:	7003      	strb	r3, [r0, #0]
 800b856:	700b      	strb	r3, [r1, #0]
 800b858:	7013      	strb	r3, [r2, #0]
 800b85a:	4770      	bx	lr
 800b85c:	f3af 8000 	nop.w
	...
 800b868:	200092a8 	.word	0x200092a8
 800b86c:	200092b9 	.word	0x200092b9
 800b870:	200092b8 	.word	0x200092b8
 800b874:	200092a0 	.word	0x200092a0

0800b878 <rcutils_system_time_now>:
 800b878:	b308      	cbz	r0, 800b8be <rcutils_system_time_now+0x46>
 800b87a:	b570      	push	{r4, r5, r6, lr}
 800b87c:	b084      	sub	sp, #16
 800b87e:	4604      	mov	r4, r0
 800b880:	4669      	mov	r1, sp
 800b882:	2001      	movs	r0, #1
 800b884:	f7f6 fc74 	bl	8002170 <clock_gettime>
 800b888:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b88c:	2d00      	cmp	r5, #0
 800b88e:	db13      	blt.n	800b8b8 <rcutils_system_time_now+0x40>
 800b890:	9902      	ldr	r1, [sp, #8]
 800b892:	2900      	cmp	r1, #0
 800b894:	db0d      	blt.n	800b8b2 <rcutils_system_time_now+0x3a>
 800b896:	4e0b      	ldr	r6, [pc, #44]	@ (800b8c4 <rcutils_system_time_now+0x4c>)
 800b898:	fba3 3206 	umull	r3, r2, r3, r6
 800b89c:	185b      	adds	r3, r3, r1
 800b89e:	fb06 2205 	mla	r2, r6, r5, r2
 800b8a2:	f04f 0000 	mov.w	r0, #0
 800b8a6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b8aa:	e9c4 3200 	strd	r3, r2, [r4]
 800b8ae:	b004      	add	sp, #16
 800b8b0:	bd70      	pop	{r4, r5, r6, pc}
 800b8b2:	ea53 0205 	orrs.w	r2, r3, r5
 800b8b6:	d1ee      	bne.n	800b896 <rcutils_system_time_now+0x1e>
 800b8b8:	2002      	movs	r0, #2
 800b8ba:	b004      	add	sp, #16
 800b8bc:	bd70      	pop	{r4, r5, r6, pc}
 800b8be:	200b      	movs	r0, #11
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	3b9aca00 	.word	0x3b9aca00

0800b8c8 <rcutils_steady_time_now>:
 800b8c8:	b308      	cbz	r0, 800b90e <rcutils_steady_time_now+0x46>
 800b8ca:	b570      	push	{r4, r5, r6, lr}
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	4669      	mov	r1, sp
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	f7f6 fc4c 	bl	8002170 <clock_gettime>
 800b8d8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b8dc:	2d00      	cmp	r5, #0
 800b8de:	db13      	blt.n	800b908 <rcutils_steady_time_now+0x40>
 800b8e0:	9902      	ldr	r1, [sp, #8]
 800b8e2:	2900      	cmp	r1, #0
 800b8e4:	db0d      	blt.n	800b902 <rcutils_steady_time_now+0x3a>
 800b8e6:	4e0b      	ldr	r6, [pc, #44]	@ (800b914 <rcutils_steady_time_now+0x4c>)
 800b8e8:	fba3 3206 	umull	r3, r2, r3, r6
 800b8ec:	185b      	adds	r3, r3, r1
 800b8ee:	fb06 2205 	mla	r2, r6, r5, r2
 800b8f2:	f04f 0000 	mov.w	r0, #0
 800b8f6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b8fa:	e9c4 3200 	strd	r3, r2, [r4]
 800b8fe:	b004      	add	sp, #16
 800b900:	bd70      	pop	{r4, r5, r6, pc}
 800b902:	ea53 0205 	orrs.w	r2, r3, r5
 800b906:	d1ee      	bne.n	800b8e6 <rcutils_steady_time_now+0x1e>
 800b908:	2002      	movs	r0, #2
 800b90a:	b004      	add	sp, #16
 800b90c:	bd70      	pop	{r4, r5, r6, pc}
 800b90e:	200b      	movs	r0, #11
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop
 800b914:	3b9aca00 	.word	0x3b9aca00

0800b918 <rmw_get_default_publisher_options>:
 800b918:	2200      	movs	r2, #0
 800b91a:	6002      	str	r2, [r0, #0]
 800b91c:	7102      	strb	r2, [r0, #4]
 800b91e:	4770      	bx	lr

0800b920 <rmw_uros_set_custom_transport>:
 800b920:	b470      	push	{r4, r5, r6}
 800b922:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b926:	b162      	cbz	r2, 800b942 <rmw_uros_set_custom_transport+0x22>
 800b928:	b15b      	cbz	r3, 800b942 <rmw_uros_set_custom_transport+0x22>
 800b92a:	b155      	cbz	r5, 800b942 <rmw_uros_set_custom_transport+0x22>
 800b92c:	b14e      	cbz	r6, 800b942 <rmw_uros_set_custom_transport+0x22>
 800b92e:	4c06      	ldr	r4, [pc, #24]	@ (800b948 <rmw_uros_set_custom_transport+0x28>)
 800b930:	7020      	strb	r0, [r4, #0]
 800b932:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b936:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b93a:	6166      	str	r6, [r4, #20]
 800b93c:	2000      	movs	r0, #0
 800b93e:	bc70      	pop	{r4, r5, r6}
 800b940:	4770      	bx	lr
 800b942:	200b      	movs	r0, #11
 800b944:	bc70      	pop	{r4, r5, r6}
 800b946:	4770      	bx	lr
 800b948:	200092bc 	.word	0x200092bc

0800b94c <flush_session>:
 800b94c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800b94e:	f001 bcdf 	b.w	800d310 <uxr_run_session_until_confirm_delivery>
 800b952:	bf00      	nop

0800b954 <rmw_publish>:
 800b954:	2800      	cmp	r0, #0
 800b956:	d053      	beq.n	800ba00 <rmw_publish+0xac>
 800b958:	b570      	push	{r4, r5, r6, lr}
 800b95a:	460d      	mov	r5, r1
 800b95c:	b08e      	sub	sp, #56	@ 0x38
 800b95e:	2900      	cmp	r1, #0
 800b960:	d04b      	beq.n	800b9fa <rmw_publish+0xa6>
 800b962:	4604      	mov	r4, r0
 800b964:	6800      	ldr	r0, [r0, #0]
 800b966:	f000 fced 	bl	800c344 <is_uxrce_rmw_identifier_valid>
 800b96a:	2800      	cmp	r0, #0
 800b96c:	d045      	beq.n	800b9fa <rmw_publish+0xa6>
 800b96e:	6866      	ldr	r6, [r4, #4]
 800b970:	2e00      	cmp	r6, #0
 800b972:	d042      	beq.n	800b9fa <rmw_publish+0xa6>
 800b974:	69b4      	ldr	r4, [r6, #24]
 800b976:	4628      	mov	r0, r5
 800b978:	6923      	ldr	r3, [r4, #16]
 800b97a:	4798      	blx	r3
 800b97c:	69f3      	ldr	r3, [r6, #28]
 800b97e:	9005      	str	r0, [sp, #20]
 800b980:	b113      	cbz	r3, 800b988 <rmw_publish+0x34>
 800b982:	a805      	add	r0, sp, #20
 800b984:	4798      	blx	r3
 800b986:	9805      	ldr	r0, [sp, #20]
 800b988:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b98c:	691b      	ldr	r3, [r3, #16]
 800b98e:	9000      	str	r0, [sp, #0]
 800b990:	6972      	ldr	r2, [r6, #20]
 800b992:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b994:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b998:	ab06      	add	r3, sp, #24
 800b99a:	f002 faa5 	bl	800dee8 <uxr_prepare_output_stream>
 800b99e:	b1d8      	cbz	r0, 800b9d8 <rmw_publish+0x84>
 800b9a0:	68a3      	ldr	r3, [r4, #8]
 800b9a2:	a906      	add	r1, sp, #24
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	4798      	blx	r3
 800b9a8:	6a33      	ldr	r3, [r6, #32]
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	b10b      	cbz	r3, 800b9b2 <rmw_publish+0x5e>
 800b9ae:	a806      	add	r0, sp, #24
 800b9b0:	4798      	blx	r3
 800b9b2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b9bc:	d022      	beq.n	800ba04 <rmw_publish+0xb0>
 800b9be:	6918      	ldr	r0, [r3, #16]
 800b9c0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800b9c2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b9c6:	f001 fca3 	bl	800d310 <uxr_run_session_until_confirm_delivery>
 800b9ca:	4020      	ands	r0, r4
 800b9cc:	b2c4      	uxtb	r4, r0
 800b9ce:	f084 0001 	eor.w	r0, r4, #1
 800b9d2:	b2c0      	uxtb	r0, r0
 800b9d4:	b00e      	add	sp, #56	@ 0x38
 800b9d6:	bd70      	pop	{r4, r5, r6, pc}
 800b9d8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b9dc:	6918      	ldr	r0, [r3, #16]
 800b9de:	9b05      	ldr	r3, [sp, #20]
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	4b0b      	ldr	r3, [pc, #44]	@ (800ba10 <rmw_publish+0xbc>)
 800b9e4:	9301      	str	r3, [sp, #4]
 800b9e6:	9602      	str	r6, [sp, #8]
 800b9e8:	6972      	ldr	r2, [r6, #20]
 800b9ea:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b9ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b9f0:	ab06      	add	r3, sp, #24
 800b9f2:	f002 faa9 	bl	800df48 <uxr_prepare_output_stream_fragmented>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d1d2      	bne.n	800b9a0 <rmw_publish+0x4c>
 800b9fa:	2001      	movs	r0, #1
 800b9fc:	b00e      	add	sp, #56	@ 0x38
 800b9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ba00:	2001      	movs	r0, #1
 800ba02:	4770      	bx	lr
 800ba04:	6918      	ldr	r0, [r3, #16]
 800ba06:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ba0a:	f001 f8c1 	bl	800cb90 <uxr_flash_output_streams>
 800ba0e:	e7de      	b.n	800b9ce <rmw_publish+0x7a>
 800ba10:	0800b94d 	.word	0x0800b94d

0800ba14 <rmw_create_publisher>:
 800ba14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba18:	b087      	sub	sp, #28
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	f000 80cc 	beq.w	800bbb8 <rmw_create_publisher+0x1a4>
 800ba20:	460e      	mov	r6, r1
 800ba22:	2900      	cmp	r1, #0
 800ba24:	f000 80c8 	beq.w	800bbb8 <rmw_create_publisher+0x1a4>
 800ba28:	4604      	mov	r4, r0
 800ba2a:	6800      	ldr	r0, [r0, #0]
 800ba2c:	4615      	mov	r5, r2
 800ba2e:	4698      	mov	r8, r3
 800ba30:	f000 fc88 	bl	800c344 <is_uxrce_rmw_identifier_valid>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	f000 80bf 	beq.w	800bbb8 <rmw_create_publisher+0x1a4>
 800ba3a:	2d00      	cmp	r5, #0
 800ba3c:	f000 80bc 	beq.w	800bbb8 <rmw_create_publisher+0x1a4>
 800ba40:	782b      	ldrb	r3, [r5, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f000 80b8 	beq.w	800bbb8 <rmw_create_publisher+0x1a4>
 800ba48:	f1b8 0f00 	cmp.w	r8, #0
 800ba4c:	f000 80b4 	beq.w	800bbb8 <rmw_create_publisher+0x1a4>
 800ba50:	485c      	ldr	r0, [pc, #368]	@ (800bbc4 <rmw_create_publisher+0x1b0>)
 800ba52:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ba56:	f006 febb 	bl	80127d0 <get_memory>
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	f000 80ac 	beq.w	800bbb8 <rmw_create_publisher+0x1a4>
 800ba60:	6884      	ldr	r4, [r0, #8]
 800ba62:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800ba66:	f006 ff1b 	bl	80128a0 <rmw_get_implementation_identifier>
 800ba6a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800ba6e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800ba72:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800ba76:	4628      	mov	r0, r5
 800ba78:	f7f4 fbbc 	bl	80001f4 <strlen>
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	283c      	cmp	r0, #60	@ 0x3c
 800ba80:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800ba84:	f200 8091 	bhi.w	800bbaa <rmw_create_publisher+0x196>
 800ba88:	4a4f      	ldr	r2, [pc, #316]	@ (800bbc8 <rmw_create_publisher+0x1b4>)
 800ba8a:	462b      	mov	r3, r5
 800ba8c:	213c      	movs	r1, #60	@ 0x3c
 800ba8e:	4650      	mov	r0, sl
 800ba90:	f00a fcdc 	bl	801644c <sniprintf>
 800ba94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ba98:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800ba9a:	4641      	mov	r1, r8
 800ba9c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800baa0:	2250      	movs	r2, #80	@ 0x50
 800baa2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800baa6:	f00a fe74 	bl	8016792 <memcpy>
 800baaa:	f898 3008 	ldrb.w	r3, [r8, #8]
 800baae:	4947      	ldr	r1, [pc, #284]	@ (800bbcc <rmw_create_publisher+0x1b8>)
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bab6:	bf0c      	ite	eq
 800bab8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800babc:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800bac0:	67a3      	str	r3, [r4, #120]	@ 0x78
 800bac2:	2300      	movs	r3, #0
 800bac4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800bac8:	4630      	mov	r0, r6
 800baca:	f000 fc49 	bl	800c360 <get_message_typesupport_handle>
 800bace:	2800      	cmp	r0, #0
 800bad0:	d06b      	beq.n	800bbaa <rmw_create_publisher+0x196>
 800bad2:	6842      	ldr	r2, [r0, #4]
 800bad4:	61a2      	str	r2, [r4, #24]
 800bad6:	2a00      	cmp	r2, #0
 800bad8:	d067      	beq.n	800bbaa <rmw_create_publisher+0x196>
 800bada:	4629      	mov	r1, r5
 800badc:	4643      	mov	r3, r8
 800bade:	4648      	mov	r0, r9
 800bae0:	f007 f944 	bl	8012d6c <create_topic>
 800bae4:	6260      	str	r0, [r4, #36]	@ 0x24
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d063      	beq.n	800bbb2 <rmw_create_publisher+0x19e>
 800baea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800baee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800baf2:	2103      	movs	r1, #3
 800baf4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800baf8:	1c42      	adds	r2, r0, #1
 800bafa:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800bafe:	f000 fef9 	bl	800c8f4 <uxr_object_id>
 800bb02:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800bb06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb0a:	6120      	str	r0, [r4, #16]
 800bb0c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800bb10:	6910      	ldr	r0, [r2, #16]
 800bb12:	2506      	movs	r5, #6
 800bb14:	9500      	str	r5, [sp, #0]
 800bb16:	6819      	ldr	r1, [r3, #0]
 800bb18:	6922      	ldr	r2, [r4, #16]
 800bb1a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bb1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bb22:	f000 fd99 	bl	800c658 <uxr_buffer_create_publisher_bin>
 800bb26:	4602      	mov	r2, r0
 800bb28:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bb2c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bb30:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bb34:	f000 fb86 	bl	800c244 <run_xrce_session>
 800bb38:	b3b8      	cbz	r0, 800bbaa <rmw_create_publisher+0x196>
 800bb3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb42:	2105      	movs	r1, #5
 800bb44:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800bb48:	1c42      	adds	r2, r0, #1
 800bb4a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800bb4e:	f000 fed1 	bl	800c8f4 <uxr_object_id>
 800bb52:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bb56:	6160      	str	r0, [r4, #20]
 800bb58:	691e      	ldr	r6, [r3, #16]
 800bb5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb5e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800bb62:	f10d 0a10 	add.w	sl, sp, #16
 800bb66:	4641      	mov	r1, r8
 800bb68:	4650      	mov	r0, sl
 800bb6a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800bb6e:	f000 fb85 	bl	800c27c <convert_qos_profile>
 800bb72:	9503      	str	r5, [sp, #12]
 800bb74:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800bb78:	9001      	str	r0, [sp, #4]
 800bb7a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800bb7e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800bb88:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800bb8c:	f8d8 1000 	ldr.w	r1, [r8]
 800bb90:	4630      	mov	r0, r6
 800bb92:	f000 fdc1 	bl	800c718 <uxr_buffer_create_datawriter_bin>
 800bb96:	4602      	mov	r2, r0
 800bb98:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bb9c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bba0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bba4:	f000 fb4e 	bl	800c244 <run_xrce_session>
 800bba8:	b938      	cbnz	r0, 800bbba <rmw_create_publisher+0x1a6>
 800bbaa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bbac:	b108      	cbz	r0, 800bbb2 <rmw_create_publisher+0x19e>
 800bbae:	f000 fa47 	bl	800c040 <rmw_uxrce_fini_topic_memory>
 800bbb2:	4638      	mov	r0, r7
 800bbb4:	f000 f9ec 	bl	800bf90 <rmw_uxrce_fini_publisher_memory>
 800bbb8:	2700      	movs	r7, #0
 800bbba:	4638      	mov	r0, r7
 800bbbc:	b007      	add	sp, #28
 800bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc2:	bf00      	nop
 800bbc4:	2000dbb4 	.word	0x2000dbb4
 800bbc8:	080179b8 	.word	0x080179b8
 800bbcc:	08017748 	.word	0x08017748

0800bbd0 <rmw_publisher_get_actual_qos>:
 800bbd0:	b150      	cbz	r0, 800bbe8 <rmw_publisher_get_actual_qos+0x18>
 800bbd2:	b508      	push	{r3, lr}
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	b149      	cbz	r1, 800bbec <rmw_publisher_get_actual_qos+0x1c>
 800bbd8:	6841      	ldr	r1, [r0, #4]
 800bbda:	2250      	movs	r2, #80	@ 0x50
 800bbdc:	3128      	adds	r1, #40	@ 0x28
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f00a fdd7 	bl	8016792 <memcpy>
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	bd08      	pop	{r3, pc}
 800bbe8:	200b      	movs	r0, #11
 800bbea:	4770      	bx	lr
 800bbec:	200b      	movs	r0, #11
 800bbee:	bd08      	pop	{r3, pc}

0800bbf0 <rmw_destroy_publisher>:
 800bbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf2:	b128      	cbz	r0, 800bc00 <rmw_destroy_publisher+0x10>
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	6800      	ldr	r0, [r0, #0]
 800bbf8:	460d      	mov	r5, r1
 800bbfa:	f000 fba3 	bl	800c344 <is_uxrce_rmw_identifier_valid>
 800bbfe:	b910      	cbnz	r0, 800bc06 <rmw_destroy_publisher+0x16>
 800bc00:	2401      	movs	r4, #1
 800bc02:	4620      	mov	r0, r4
 800bc04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc06:	6863      	ldr	r3, [r4, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d0f9      	beq.n	800bc00 <rmw_destroy_publisher+0x10>
 800bc0c:	2d00      	cmp	r5, #0
 800bc0e:	d0f7      	beq.n	800bc00 <rmw_destroy_publisher+0x10>
 800bc10:	6828      	ldr	r0, [r5, #0]
 800bc12:	f000 fb97 	bl	800c344 <is_uxrce_rmw_identifier_valid>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d0f2      	beq.n	800bc00 <rmw_destroy_publisher+0x10>
 800bc1a:	686c      	ldr	r4, [r5, #4]
 800bc1c:	2c00      	cmp	r4, #0
 800bc1e:	d0ef      	beq.n	800bc00 <rmw_destroy_publisher+0x10>
 800bc20:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bc22:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800bc26:	f007 f8f1 	bl	8012e0c <destroy_topic>
 800bc2a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bc2e:	6962      	ldr	r2, [r4, #20]
 800bc30:	6918      	ldr	r0, [r3, #16]
 800bc32:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bc36:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bc3a:	6819      	ldr	r1, [r3, #0]
 800bc3c:	f000 fc58 	bl	800c4f0 <uxr_buffer_delete_entity>
 800bc40:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bc44:	6922      	ldr	r2, [r4, #16]
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	6809      	ldr	r1, [r1, #0]
 800bc50:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800bc54:	f000 fc4c 	bl	800c4f0 <uxr_buffer_delete_entity>
 800bc58:	693e      	ldr	r6, [r7, #16]
 800bc5a:	4622      	mov	r2, r4
 800bc5c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800bc60:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800bc64:	4604      	mov	r4, r0
 800bc66:	4630      	mov	r0, r6
 800bc68:	f000 faec 	bl	800c244 <run_xrce_session>
 800bc6c:	693e      	ldr	r6, [r7, #16]
 800bc6e:	4622      	mov	r2, r4
 800bc70:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800bc74:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800bc78:	4604      	mov	r4, r0
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	f000 fae2 	bl	800c244 <run_xrce_session>
 800bc80:	b12c      	cbz	r4, 800bc8e <rmw_destroy_publisher+0x9e>
 800bc82:	b120      	cbz	r0, 800bc8e <rmw_destroy_publisher+0x9e>
 800bc84:	2400      	movs	r4, #0
 800bc86:	4628      	mov	r0, r5
 800bc88:	f000 f982 	bl	800bf90 <rmw_uxrce_fini_publisher_memory>
 800bc8c:	e7b9      	b.n	800bc02 <rmw_destroy_publisher+0x12>
 800bc8e:	2402      	movs	r4, #2
 800bc90:	e7f9      	b.n	800bc86 <rmw_destroy_publisher+0x96>
 800bc92:	bf00      	nop

0800bc94 <rmw_uxrce_init_service_memory>:
 800bc94:	b1e2      	cbz	r2, 800bcd0 <rmw_uxrce_init_service_memory+0x3c>
 800bc96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc9a:	7b05      	ldrb	r5, [r0, #12]
 800bc9c:	4606      	mov	r6, r0
 800bc9e:	b9ad      	cbnz	r5, 800bccc <rmw_uxrce_init_service_memory+0x38>
 800bca0:	23c8      	movs	r3, #200	@ 0xc8
 800bca2:	e9c0 5500 	strd	r5, r5, [r0]
 800bca6:	6083      	str	r3, [r0, #8]
 800bca8:	f240 1301 	movw	r3, #257	@ 0x101
 800bcac:	4617      	mov	r7, r2
 800bcae:	8183      	strh	r3, [r0, #12]
 800bcb0:	460c      	mov	r4, r1
 800bcb2:	46a8      	mov	r8, r5
 800bcb4:	4621      	mov	r1, r4
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	3501      	adds	r5, #1
 800bcba:	f006 fd99 	bl	80127f0 <put_memory>
 800bcbe:	42af      	cmp	r7, r5
 800bcc0:	60a4      	str	r4, [r4, #8]
 800bcc2:	f884 800c 	strb.w	r8, [r4, #12]
 800bcc6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800bcca:	d1f3      	bne.n	800bcb4 <rmw_uxrce_init_service_memory+0x20>
 800bccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop

0800bcd4 <rmw_uxrce_init_client_memory>:
 800bcd4:	b1e2      	cbz	r2, 800bd10 <rmw_uxrce_init_client_memory+0x3c>
 800bcd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcda:	7b05      	ldrb	r5, [r0, #12]
 800bcdc:	4606      	mov	r6, r0
 800bcde:	b9ad      	cbnz	r5, 800bd0c <rmw_uxrce_init_client_memory+0x38>
 800bce0:	23c8      	movs	r3, #200	@ 0xc8
 800bce2:	e9c0 5500 	strd	r5, r5, [r0]
 800bce6:	6083      	str	r3, [r0, #8]
 800bce8:	f240 1301 	movw	r3, #257	@ 0x101
 800bcec:	4617      	mov	r7, r2
 800bcee:	8183      	strh	r3, [r0, #12]
 800bcf0:	460c      	mov	r4, r1
 800bcf2:	46a8      	mov	r8, r5
 800bcf4:	4621      	mov	r1, r4
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	3501      	adds	r5, #1
 800bcfa:	f006 fd79 	bl	80127f0 <put_memory>
 800bcfe:	42af      	cmp	r7, r5
 800bd00:	60a4      	str	r4, [r4, #8]
 800bd02:	f884 800c 	strb.w	r8, [r4, #12]
 800bd06:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800bd0a:	d1f3      	bne.n	800bcf4 <rmw_uxrce_init_client_memory+0x20>
 800bd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop

0800bd14 <rmw_uxrce_init_publisher_memory>:
 800bd14:	b1e2      	cbz	r2, 800bd50 <rmw_uxrce_init_publisher_memory+0x3c>
 800bd16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd1a:	7b05      	ldrb	r5, [r0, #12]
 800bd1c:	4606      	mov	r6, r0
 800bd1e:	b9ad      	cbnz	r5, 800bd4c <rmw_uxrce_init_publisher_memory+0x38>
 800bd20:	23d8      	movs	r3, #216	@ 0xd8
 800bd22:	e9c0 5500 	strd	r5, r5, [r0]
 800bd26:	6083      	str	r3, [r0, #8]
 800bd28:	f240 1301 	movw	r3, #257	@ 0x101
 800bd2c:	4617      	mov	r7, r2
 800bd2e:	8183      	strh	r3, [r0, #12]
 800bd30:	460c      	mov	r4, r1
 800bd32:	46a8      	mov	r8, r5
 800bd34:	4621      	mov	r1, r4
 800bd36:	4630      	mov	r0, r6
 800bd38:	3501      	adds	r5, #1
 800bd3a:	f006 fd59 	bl	80127f0 <put_memory>
 800bd3e:	42af      	cmp	r7, r5
 800bd40:	60a4      	str	r4, [r4, #8]
 800bd42:	f884 800c 	strb.w	r8, [r4, #12]
 800bd46:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800bd4a:	d1f3      	bne.n	800bd34 <rmw_uxrce_init_publisher_memory+0x20>
 800bd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop

0800bd54 <rmw_uxrce_init_subscription_memory>:
 800bd54:	b1e2      	cbz	r2, 800bd90 <rmw_uxrce_init_subscription_memory+0x3c>
 800bd56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd5a:	7b05      	ldrb	r5, [r0, #12]
 800bd5c:	4606      	mov	r6, r0
 800bd5e:	b9ad      	cbnz	r5, 800bd8c <rmw_uxrce_init_subscription_memory+0x38>
 800bd60:	23d8      	movs	r3, #216	@ 0xd8
 800bd62:	e9c0 5500 	strd	r5, r5, [r0]
 800bd66:	6083      	str	r3, [r0, #8]
 800bd68:	f240 1301 	movw	r3, #257	@ 0x101
 800bd6c:	4617      	mov	r7, r2
 800bd6e:	8183      	strh	r3, [r0, #12]
 800bd70:	460c      	mov	r4, r1
 800bd72:	46a8      	mov	r8, r5
 800bd74:	4621      	mov	r1, r4
 800bd76:	4630      	mov	r0, r6
 800bd78:	3501      	adds	r5, #1
 800bd7a:	f006 fd39 	bl	80127f0 <put_memory>
 800bd7e:	42af      	cmp	r7, r5
 800bd80:	60a4      	str	r4, [r4, #8]
 800bd82:	f884 800c 	strb.w	r8, [r4, #12]
 800bd86:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800bd8a:	d1f3      	bne.n	800bd74 <rmw_uxrce_init_subscription_memory+0x20>
 800bd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop

0800bd94 <rmw_uxrce_init_node_memory>:
 800bd94:	b1e2      	cbz	r2, 800bdd0 <rmw_uxrce_init_node_memory+0x3c>
 800bd96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd9a:	7b05      	ldrb	r5, [r0, #12]
 800bd9c:	4606      	mov	r6, r0
 800bd9e:	b9ad      	cbnz	r5, 800bdcc <rmw_uxrce_init_node_memory+0x38>
 800bda0:	23a4      	movs	r3, #164	@ 0xa4
 800bda2:	e9c0 5500 	strd	r5, r5, [r0]
 800bda6:	6083      	str	r3, [r0, #8]
 800bda8:	f240 1301 	movw	r3, #257	@ 0x101
 800bdac:	4617      	mov	r7, r2
 800bdae:	8183      	strh	r3, [r0, #12]
 800bdb0:	460c      	mov	r4, r1
 800bdb2:	46a8      	mov	r8, r5
 800bdb4:	4621      	mov	r1, r4
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	3501      	adds	r5, #1
 800bdba:	f006 fd19 	bl	80127f0 <put_memory>
 800bdbe:	42af      	cmp	r7, r5
 800bdc0:	60a4      	str	r4, [r4, #8]
 800bdc2:	f884 800c 	strb.w	r8, [r4, #12]
 800bdc6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800bdca:	d1f3      	bne.n	800bdb4 <rmw_uxrce_init_node_memory+0x20>
 800bdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop

0800bdd4 <rmw_uxrce_init_session_memory>:
 800bdd4:	b1ea      	cbz	r2, 800be12 <rmw_uxrce_init_session_memory+0x3e>
 800bdd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdda:	7b05      	ldrb	r5, [r0, #12]
 800bddc:	4606      	mov	r6, r0
 800bdde:	b9b5      	cbnz	r5, 800be0e <rmw_uxrce_init_session_memory+0x3a>
 800bde0:	e9c0 5500 	strd	r5, r5, [r0]
 800bde4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800bde8:	f240 1301 	movw	r3, #257	@ 0x101
 800bdec:	4617      	mov	r7, r2
 800bdee:	f8c0 8008 	str.w	r8, [r0, #8]
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	8183      	strh	r3, [r0, #12]
 800bdf6:	46a9      	mov	r9, r5
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	3501      	adds	r5, #1
 800bdfe:	f006 fcf7 	bl	80127f0 <put_memory>
 800be02:	42af      	cmp	r7, r5
 800be04:	60a4      	str	r4, [r4, #8]
 800be06:	f884 900c 	strb.w	r9, [r4, #12]
 800be0a:	4444      	add	r4, r8
 800be0c:	d1f4      	bne.n	800bdf8 <rmw_uxrce_init_session_memory+0x24>
 800be0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be12:	4770      	bx	lr

0800be14 <rmw_uxrce_init_topic_memory>:
 800be14:	b1e2      	cbz	r2, 800be50 <rmw_uxrce_init_topic_memory+0x3c>
 800be16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be1a:	7b05      	ldrb	r5, [r0, #12]
 800be1c:	4606      	mov	r6, r0
 800be1e:	b9ad      	cbnz	r5, 800be4c <rmw_uxrce_init_topic_memory+0x38>
 800be20:	231c      	movs	r3, #28
 800be22:	e9c0 5500 	strd	r5, r5, [r0]
 800be26:	6083      	str	r3, [r0, #8]
 800be28:	f240 1301 	movw	r3, #257	@ 0x101
 800be2c:	4617      	mov	r7, r2
 800be2e:	8183      	strh	r3, [r0, #12]
 800be30:	460c      	mov	r4, r1
 800be32:	46a8      	mov	r8, r5
 800be34:	4621      	mov	r1, r4
 800be36:	4630      	mov	r0, r6
 800be38:	3501      	adds	r5, #1
 800be3a:	f006 fcd9 	bl	80127f0 <put_memory>
 800be3e:	42af      	cmp	r7, r5
 800be40:	60a4      	str	r4, [r4, #8]
 800be42:	f884 800c 	strb.w	r8, [r4, #12]
 800be46:	f104 041c 	add.w	r4, r4, #28
 800be4a:	d1f3      	bne.n	800be34 <rmw_uxrce_init_topic_memory+0x20>
 800be4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be50:	4770      	bx	lr
 800be52:	bf00      	nop

0800be54 <rmw_uxrce_init_static_input_buffer_memory>:
 800be54:	b1ea      	cbz	r2, 800be92 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800be56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be5a:	7b05      	ldrb	r5, [r0, #12]
 800be5c:	4606      	mov	r6, r0
 800be5e:	b9b5      	cbnz	r5, 800be8e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800be60:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800be64:	e9c0 5500 	strd	r5, r5, [r0]
 800be68:	6083      	str	r3, [r0, #8]
 800be6a:	f240 1301 	movw	r3, #257	@ 0x101
 800be6e:	4617      	mov	r7, r2
 800be70:	8183      	strh	r3, [r0, #12]
 800be72:	460c      	mov	r4, r1
 800be74:	46a8      	mov	r8, r5
 800be76:	4621      	mov	r1, r4
 800be78:	4630      	mov	r0, r6
 800be7a:	3501      	adds	r5, #1
 800be7c:	f006 fcb8 	bl	80127f0 <put_memory>
 800be80:	42af      	cmp	r7, r5
 800be82:	60a4      	str	r4, [r4, #8]
 800be84:	f884 800c 	strb.w	r8, [r4, #12]
 800be88:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800be8c:	d1f3      	bne.n	800be76 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800be8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be92:	4770      	bx	lr

0800be94 <rmw_uxrce_init_init_options_impl_memory>:
 800be94:	b1e2      	cbz	r2, 800bed0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800be96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be9a:	7b05      	ldrb	r5, [r0, #12]
 800be9c:	4606      	mov	r6, r0
 800be9e:	b9ad      	cbnz	r5, 800becc <rmw_uxrce_init_init_options_impl_memory+0x38>
 800bea0:	232c      	movs	r3, #44	@ 0x2c
 800bea2:	e9c0 5500 	strd	r5, r5, [r0]
 800bea6:	6083      	str	r3, [r0, #8]
 800bea8:	f240 1301 	movw	r3, #257	@ 0x101
 800beac:	4617      	mov	r7, r2
 800beae:	8183      	strh	r3, [r0, #12]
 800beb0:	460c      	mov	r4, r1
 800beb2:	46a8      	mov	r8, r5
 800beb4:	4621      	mov	r1, r4
 800beb6:	4630      	mov	r0, r6
 800beb8:	3501      	adds	r5, #1
 800beba:	f006 fc99 	bl	80127f0 <put_memory>
 800bebe:	42af      	cmp	r7, r5
 800bec0:	60a4      	str	r4, [r4, #8]
 800bec2:	f884 800c 	strb.w	r8, [r4, #12]
 800bec6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800beca:	d1f3      	bne.n	800beb4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800becc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop

0800bed4 <rmw_uxrce_init_wait_set_memory>:
 800bed4:	b1e2      	cbz	r2, 800bf10 <rmw_uxrce_init_wait_set_memory+0x3c>
 800bed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beda:	7b05      	ldrb	r5, [r0, #12]
 800bedc:	4606      	mov	r6, r0
 800bede:	b9ad      	cbnz	r5, 800bf0c <rmw_uxrce_init_wait_set_memory+0x38>
 800bee0:	231c      	movs	r3, #28
 800bee2:	e9c0 5500 	strd	r5, r5, [r0]
 800bee6:	6083      	str	r3, [r0, #8]
 800bee8:	f240 1301 	movw	r3, #257	@ 0x101
 800beec:	4617      	mov	r7, r2
 800beee:	8183      	strh	r3, [r0, #12]
 800bef0:	460c      	mov	r4, r1
 800bef2:	46a8      	mov	r8, r5
 800bef4:	4621      	mov	r1, r4
 800bef6:	4630      	mov	r0, r6
 800bef8:	3501      	adds	r5, #1
 800befa:	f006 fc79 	bl	80127f0 <put_memory>
 800befe:	42af      	cmp	r7, r5
 800bf00:	60a4      	str	r4, [r4, #8]
 800bf02:	f884 800c 	strb.w	r8, [r4, #12]
 800bf06:	f104 041c 	add.w	r4, r4, #28
 800bf0a:	d1f3      	bne.n	800bef4 <rmw_uxrce_init_wait_set_memory+0x20>
 800bf0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop

0800bf14 <rmw_uxrce_init_guard_condition_memory>:
 800bf14:	b1e2      	cbz	r2, 800bf50 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800bf16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf1a:	7b05      	ldrb	r5, [r0, #12]
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	b9ad      	cbnz	r5, 800bf4c <rmw_uxrce_init_guard_condition_memory+0x38>
 800bf20:	2320      	movs	r3, #32
 800bf22:	e9c0 5500 	strd	r5, r5, [r0]
 800bf26:	6083      	str	r3, [r0, #8]
 800bf28:	f240 1301 	movw	r3, #257	@ 0x101
 800bf2c:	4617      	mov	r7, r2
 800bf2e:	8183      	strh	r3, [r0, #12]
 800bf30:	460c      	mov	r4, r1
 800bf32:	46a8      	mov	r8, r5
 800bf34:	4621      	mov	r1, r4
 800bf36:	4630      	mov	r0, r6
 800bf38:	3501      	adds	r5, #1
 800bf3a:	f006 fc59 	bl	80127f0 <put_memory>
 800bf3e:	42af      	cmp	r7, r5
 800bf40:	60a4      	str	r4, [r4, #8]
 800bf42:	f884 800c 	strb.w	r8, [r4, #12]
 800bf46:	f104 0420 	add.w	r4, r4, #32
 800bf4a:	d1f3      	bne.n	800bf34 <rmw_uxrce_init_guard_condition_memory+0x20>
 800bf4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop

0800bf54 <rmw_uxrce_fini_session_memory>:
 800bf54:	4601      	mov	r1, r0
 800bf56:	4801      	ldr	r0, [pc, #4]	@ (800bf5c <rmw_uxrce_fini_session_memory+0x8>)
 800bf58:	f006 bc4a 	b.w	80127f0 <put_memory>
 800bf5c:	2000dbd4 	.word	0x2000dbd4

0800bf60 <rmw_uxrce_fini_node_memory>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	4604      	mov	r4, r0
 800bf64:	6800      	ldr	r0, [r0, #0]
 800bf66:	b128      	cbz	r0, 800bf74 <rmw_uxrce_fini_node_memory+0x14>
 800bf68:	4b07      	ldr	r3, [pc, #28]	@ (800bf88 <rmw_uxrce_fini_node_memory+0x28>)
 800bf6a:	6819      	ldr	r1, [r3, #0]
 800bf6c:	f7f4 f938 	bl	80001e0 <strcmp>
 800bf70:	b940      	cbnz	r0, 800bf84 <rmw_uxrce_fini_node_memory+0x24>
 800bf72:	6020      	str	r0, [r4, #0]
 800bf74:	6861      	ldr	r1, [r4, #4]
 800bf76:	b129      	cbz	r1, 800bf84 <rmw_uxrce_fini_node_memory+0x24>
 800bf78:	2500      	movs	r5, #0
 800bf7a:	4804      	ldr	r0, [pc, #16]	@ (800bf8c <rmw_uxrce_fini_node_memory+0x2c>)
 800bf7c:	610d      	str	r5, [r1, #16]
 800bf7e:	f006 fc37 	bl	80127f0 <put_memory>
 800bf82:	6065      	str	r5, [r4, #4]
 800bf84:	bd38      	pop	{r3, r4, r5, pc}
 800bf86:	bf00      	nop
 800bf88:	080180cc 	.word	0x080180cc
 800bf8c:	2000dba4 	.word	0x2000dba4

0800bf90 <rmw_uxrce_fini_publisher_memory>:
 800bf90:	b510      	push	{r4, lr}
 800bf92:	4604      	mov	r4, r0
 800bf94:	6800      	ldr	r0, [r0, #0]
 800bf96:	b128      	cbz	r0, 800bfa4 <rmw_uxrce_fini_publisher_memory+0x14>
 800bf98:	4b06      	ldr	r3, [pc, #24]	@ (800bfb4 <rmw_uxrce_fini_publisher_memory+0x24>)
 800bf9a:	6819      	ldr	r1, [r3, #0]
 800bf9c:	f7f4 f920 	bl	80001e0 <strcmp>
 800bfa0:	b938      	cbnz	r0, 800bfb2 <rmw_uxrce_fini_publisher_memory+0x22>
 800bfa2:	6020      	str	r0, [r4, #0]
 800bfa4:	6861      	ldr	r1, [r4, #4]
 800bfa6:	b121      	cbz	r1, 800bfb2 <rmw_uxrce_fini_publisher_memory+0x22>
 800bfa8:	4803      	ldr	r0, [pc, #12]	@ (800bfb8 <rmw_uxrce_fini_publisher_memory+0x28>)
 800bfaa:	f006 fc21 	bl	80127f0 <put_memory>
 800bfae:	2300      	movs	r3, #0
 800bfb0:	6063      	str	r3, [r4, #4]
 800bfb2:	bd10      	pop	{r4, pc}
 800bfb4:	080180cc 	.word	0x080180cc
 800bfb8:	2000dbb4 	.word	0x2000dbb4

0800bfbc <rmw_uxrce_fini_subscription_memory>:
 800bfbc:	b510      	push	{r4, lr}
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	6800      	ldr	r0, [r0, #0]
 800bfc2:	b128      	cbz	r0, 800bfd0 <rmw_uxrce_fini_subscription_memory+0x14>
 800bfc4:	4b06      	ldr	r3, [pc, #24]	@ (800bfe0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800bfc6:	6819      	ldr	r1, [r3, #0]
 800bfc8:	f7f4 f90a 	bl	80001e0 <strcmp>
 800bfcc:	b938      	cbnz	r0, 800bfde <rmw_uxrce_fini_subscription_memory+0x22>
 800bfce:	6020      	str	r0, [r4, #0]
 800bfd0:	6861      	ldr	r1, [r4, #4]
 800bfd2:	b121      	cbz	r1, 800bfde <rmw_uxrce_fini_subscription_memory+0x22>
 800bfd4:	4803      	ldr	r0, [pc, #12]	@ (800bfe4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800bfd6:	f006 fc0b 	bl	80127f0 <put_memory>
 800bfda:	2300      	movs	r3, #0
 800bfdc:	6063      	str	r3, [r4, #4]
 800bfde:	bd10      	pop	{r4, pc}
 800bfe0:	080180cc 	.word	0x080180cc
 800bfe4:	2000dbf4 	.word	0x2000dbf4

0800bfe8 <rmw_uxrce_fini_service_memory>:
 800bfe8:	b510      	push	{r4, lr}
 800bfea:	4604      	mov	r4, r0
 800bfec:	6800      	ldr	r0, [r0, #0]
 800bfee:	b128      	cbz	r0, 800bffc <rmw_uxrce_fini_service_memory+0x14>
 800bff0:	4b06      	ldr	r3, [pc, #24]	@ (800c00c <rmw_uxrce_fini_service_memory+0x24>)
 800bff2:	6819      	ldr	r1, [r3, #0]
 800bff4:	f7f4 f8f4 	bl	80001e0 <strcmp>
 800bff8:	b938      	cbnz	r0, 800c00a <rmw_uxrce_fini_service_memory+0x22>
 800bffa:	6020      	str	r0, [r4, #0]
 800bffc:	6861      	ldr	r1, [r4, #4]
 800bffe:	b121      	cbz	r1, 800c00a <rmw_uxrce_fini_service_memory+0x22>
 800c000:	4803      	ldr	r0, [pc, #12]	@ (800c010 <rmw_uxrce_fini_service_memory+0x28>)
 800c002:	f006 fbf5 	bl	80127f0 <put_memory>
 800c006:	2300      	movs	r3, #0
 800c008:	6063      	str	r3, [r4, #4]
 800c00a:	bd10      	pop	{r4, pc}
 800c00c:	080180cc 	.word	0x080180cc
 800c010:	2000dbc4 	.word	0x2000dbc4

0800c014 <rmw_uxrce_fini_client_memory>:
 800c014:	b510      	push	{r4, lr}
 800c016:	4604      	mov	r4, r0
 800c018:	6800      	ldr	r0, [r0, #0]
 800c01a:	b128      	cbz	r0, 800c028 <rmw_uxrce_fini_client_memory+0x14>
 800c01c:	4b06      	ldr	r3, [pc, #24]	@ (800c038 <rmw_uxrce_fini_client_memory+0x24>)
 800c01e:	6819      	ldr	r1, [r3, #0]
 800c020:	f7f4 f8de 	bl	80001e0 <strcmp>
 800c024:	b938      	cbnz	r0, 800c036 <rmw_uxrce_fini_client_memory+0x22>
 800c026:	6020      	str	r0, [r4, #0]
 800c028:	6861      	ldr	r1, [r4, #4]
 800c02a:	b121      	cbz	r1, 800c036 <rmw_uxrce_fini_client_memory+0x22>
 800c02c:	4803      	ldr	r0, [pc, #12]	@ (800c03c <rmw_uxrce_fini_client_memory+0x28>)
 800c02e:	f006 fbdf 	bl	80127f0 <put_memory>
 800c032:	2300      	movs	r3, #0
 800c034:	6063      	str	r3, [r4, #4]
 800c036:	bd10      	pop	{r4, pc}
 800c038:	080180cc 	.word	0x080180cc
 800c03c:	200092d8 	.word	0x200092d8

0800c040 <rmw_uxrce_fini_topic_memory>:
 800c040:	b510      	push	{r4, lr}
 800c042:	4604      	mov	r4, r0
 800c044:	4621      	mov	r1, r4
 800c046:	4803      	ldr	r0, [pc, #12]	@ (800c054 <rmw_uxrce_fini_topic_memory+0x14>)
 800c048:	f006 fbd2 	bl	80127f0 <put_memory>
 800c04c:	2300      	movs	r3, #0
 800c04e:	61a3      	str	r3, [r4, #24]
 800c050:	bd10      	pop	{r4, pc}
 800c052:	bf00      	nop
 800c054:	2000dc04 	.word	0x2000dc04

0800c058 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800c058:	b082      	sub	sp, #8
 800c05a:	b530      	push	{r4, r5, lr}
 800c05c:	4925      	ldr	r1, [pc, #148]	@ (800c0f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c05e:	680d      	ldr	r5, [r1, #0]
 800c060:	ac03      	add	r4, sp, #12
 800c062:	e884 000c 	stmia.w	r4, {r2, r3}
 800c066:	461c      	mov	r4, r3
 800c068:	2d00      	cmp	r5, #0
 800c06a:	d041      	beq.n	800c0f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800c06c:	462b      	mov	r3, r5
 800c06e:	2100      	movs	r1, #0
 800c070:	689a      	ldr	r2, [r3, #8]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800c078:	4290      	cmp	r0, r2
 800c07a:	bf08      	it	eq
 800c07c:	3101      	addeq	r1, #1
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1f6      	bne.n	800c070 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800c082:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c086:	2b02      	cmp	r3, #2
 800c088:	d029      	beq.n	800c0de <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c08a:	d907      	bls.n	800c09c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c08c:	2b03      	cmp	r3, #3
 800c08e:	d005      	beq.n	800c09c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c090:	2100      	movs	r1, #0
 800c092:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c096:	4608      	mov	r0, r1
 800c098:	b002      	add	sp, #8
 800c09a:	4770      	bx	lr
 800c09c:	b314      	cbz	r4, 800c0e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c09e:	428c      	cmp	r4, r1
 800c0a0:	d820      	bhi.n	800c0e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c0a2:	2d00      	cmp	r5, #0
 800c0a4:	d0f4      	beq.n	800c090 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800c0ac:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800c0b0:	e002      	b.n	800c0b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800c0b2:	686d      	ldr	r5, [r5, #4]
 800c0b4:	2d00      	cmp	r5, #0
 800c0b6:	d0ec      	beq.n	800c092 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800c0b8:	68ab      	ldr	r3, [r5, #8]
 800c0ba:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800c0be:	4290      	cmp	r0, r2
 800c0c0:	d1f7      	bne.n	800c0b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c0c2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800c0c6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800c0ca:	4562      	cmp	r2, ip
 800c0cc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c0d0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800c0d4:	daed      	bge.n	800c0b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c0d6:	4694      	mov	ip, r2
 800c0d8:	461c      	mov	r4, r3
 800c0da:	4629      	mov	r1, r5
 800c0dc:	e7e9      	b.n	800c0b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c0de:	b10c      	cbz	r4, 800c0e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c0e0:	428c      	cmp	r4, r1
 800c0e2:	d9d5      	bls.n	800c090 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c0e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0e8:	4802      	ldr	r0, [pc, #8]	@ (800c0f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c0ea:	b002      	add	sp, #8
 800c0ec:	f006 bb70 	b.w	80127d0 <get_memory>
 800c0f0:	4629      	mov	r1, r5
 800c0f2:	e7c6      	b.n	800c082 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800c0f4:	2000dbe4 	.word	0x2000dbe4

0800c0f8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800c0f8:	4b11      	ldr	r3, [pc, #68]	@ (800c140 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	b530      	push	{r4, r5, lr}
 800c0fe:	b1e3      	cbz	r3, 800c13a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800c100:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800c104:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800c108:	2400      	movs	r4, #0
 800c10a:	e001      	b.n	800c110 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	b193      	cbz	r3, 800c136 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800c110:	689a      	ldr	r2, [r3, #8]
 800c112:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800c116:	4288      	cmp	r0, r1
 800c118:	d1f8      	bne.n	800c10c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c11a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800c11e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800c122:	4571      	cmp	r1, lr
 800c124:	eb72 050c 	sbcs.w	r5, r2, ip
 800c128:	daf0      	bge.n	800c10c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c12a:	461c      	mov	r4, r3
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	468e      	mov	lr, r1
 800c130:	4694      	mov	ip, r2
 800c132:	2b00      	cmp	r3, #0
 800c134:	d1ec      	bne.n	800c110 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c136:	4620      	mov	r0, r4
 800c138:	bd30      	pop	{r4, r5, pc}
 800c13a:	461c      	mov	r4, r3
 800c13c:	4620      	mov	r0, r4
 800c13e:	bd30      	pop	{r4, r5, pc}
 800c140:	2000dbe4 	.word	0x2000dbe4
 800c144:	00000000 	.word	0x00000000

0800c148 <rmw_uxrce_clean_expired_static_input_buffer>:
 800c148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14c:	4b3c      	ldr	r3, [pc, #240]	@ (800c240 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c14e:	ed2d 8b06 	vpush	{d8-d10}
 800c152:	681f      	ldr	r7, [r3, #0]
 800c154:	b08d      	sub	sp, #52	@ 0x34
 800c156:	f007 fc79 	bl	8013a4c <rmw_uros_epoch_nanos>
 800c15a:	2f00      	cmp	r7, #0
 800c15c:	d05d      	beq.n	800c21a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c15e:	46b8      	mov	r8, r7
 800c160:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800c228 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800c164:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c168:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c16c:	2b04      	cmp	r3, #4
 800c16e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800c230 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800c172:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800c238 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800c176:	4681      	mov	r9, r0
 800c178:	468a      	mov	sl, r1
 800c17a:	ac04      	add	r4, sp, #16
 800c17c:	d03f      	beq.n	800c1fe <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c17e:	2b05      	cmp	r3, #5
 800c180:	d044      	beq.n	800c20c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800c182:	2b03      	cmp	r3, #3
 800c184:	d03b      	beq.n	800c1fe <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c186:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c18a:	ed8d ab06 	vstr	d10, [sp, #24]
 800c18e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800c192:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800c196:	ab08      	add	r3, sp, #32
 800c198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c19a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c19e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c1a2:	f006 f949 	bl	8012438 <rmw_time_equal>
 800c1a6:	b118      	cbz	r0, 800c1b0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800c1a8:	ed8d 9b04 	vstr	d9, [sp, #16]
 800c1ac:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c1b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c1b4:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800c1b8:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800c1bc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c1c0:	f006 f98e 	bl	80124e0 <rmw_time_total_nsec>
 800c1c4:	1830      	adds	r0, r6, r0
 800c1c6:	eb47 0101 	adc.w	r1, r7, r1
 800c1ca:	4548      	cmp	r0, r9
 800c1cc:	eb71 030a 	sbcs.w	r3, r1, sl
 800c1d0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800c1d4:	db05      	blt.n	800c1e2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800c1d6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800c1da:	4591      	cmp	r9, r2
 800c1dc:	eb7a 0303 	sbcs.w	r3, sl, r3
 800c1e0:	da03      	bge.n	800c1ea <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800c1e2:	4817      	ldr	r0, [pc, #92]	@ (800c240 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c1e4:	4641      	mov	r1, r8
 800c1e6:	f006 fb03 	bl	80127f0 <put_memory>
 800c1ea:	f1bb 0f00 	cmp.w	fp, #0
 800c1ee:	d014      	beq.n	800c21a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c1f0:	46d8      	mov	r8, fp
 800c1f2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c1f6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c1fa:	2b04      	cmp	r3, #4
 800c1fc:	d1bf      	bne.n	800c17e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800c1fe:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c202:	3340      	adds	r3, #64	@ 0x40
 800c204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c206:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c20a:	e7c0      	b.n	800c18e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c20c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c210:	3348      	adds	r3, #72	@ 0x48
 800c212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c218:	e7b9      	b.n	800c18e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c21a:	b00d      	add	sp, #52	@ 0x34
 800c21c:	ecbd 8b06 	vpop	{d8-d10}
 800c220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c224:	f3af 8000 	nop.w
	...
 800c230:	00000001 	.word	0x00000001
 800c234:	00000000 	.word	0x00000000
 800c238:	0000001e 	.word	0x0000001e
 800c23c:	00000000 	.word	0x00000000
 800c240:	2000dbe4 	.word	0x2000dbe4

0800c244 <run_xrce_session>:
 800c244:	b510      	push	{r4, lr}
 800c246:	788c      	ldrb	r4, [r1, #2]
 800c248:	b086      	sub	sp, #24
 800c24a:	2c01      	cmp	r4, #1
 800c24c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800c250:	d00c      	beq.n	800c26c <run_xrce_session+0x28>
 800c252:	4619      	mov	r1, r3
 800c254:	2301      	movs	r3, #1
 800c256:	9300      	str	r3, [sp, #0]
 800c258:	f10d 020e 	add.w	r2, sp, #14
 800c25c:	f10d 0317 	add.w	r3, sp, #23
 800c260:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c264:	f001 f87a 	bl	800d35c <uxr_run_session_until_all_status>
 800c268:	b006      	add	sp, #24
 800c26a:	bd10      	pop	{r4, pc}
 800c26c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c270:	f000 fc8e 	bl	800cb90 <uxr_flash_output_streams>
 800c274:	4620      	mov	r0, r4
 800c276:	b006      	add	sp, #24
 800c278:	bd10      	pop	{r4, pc}
 800c27a:	bf00      	nop

0800c27c <convert_qos_profile>:
 800c27c:	7a4a      	ldrb	r2, [r1, #9]
 800c27e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800c282:	2a02      	cmp	r2, #2
 800c284:	bf18      	it	ne
 800c286:	2200      	movne	r2, #0
 800c288:	7002      	strb	r2, [r0, #0]
 800c28a:	780a      	ldrb	r2, [r1, #0]
 800c28c:	8889      	ldrh	r1, [r1, #4]
 800c28e:	8081      	strh	r1, [r0, #4]
 800c290:	f1ac 0c02 	sub.w	ip, ip, #2
 800c294:	f1a2 0202 	sub.w	r2, r2, #2
 800c298:	fabc fc8c 	clz	ip, ip
 800c29c:	fab2 f282 	clz	r2, r2
 800c2a0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800c2a4:	0952      	lsrs	r2, r2, #5
 800c2a6:	f880 c001 	strb.w	ip, [r0, #1]
 800c2aa:	7082      	strb	r2, [r0, #2]
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop

0800c2b0 <generate_type_name>:
 800c2b0:	b530      	push	{r4, r5, lr}
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	700b      	strb	r3, [r1, #0]
 800c2b6:	6803      	ldr	r3, [r0, #0]
 800c2b8:	b087      	sub	sp, #28
 800c2ba:	4614      	mov	r4, r2
 800c2bc:	b1d3      	cbz	r3, 800c2f4 <generate_type_name+0x44>
 800c2be:	4a0f      	ldr	r2, [pc, #60]	@ (800c2fc <generate_type_name+0x4c>)
 800c2c0:	4615      	mov	r5, r2
 800c2c2:	9203      	str	r2, [sp, #12]
 800c2c4:	9500      	str	r5, [sp, #0]
 800c2c6:	6842      	ldr	r2, [r0, #4]
 800c2c8:	480d      	ldr	r0, [pc, #52]	@ (800c300 <generate_type_name+0x50>)
 800c2ca:	9001      	str	r0, [sp, #4]
 800c2cc:	4608      	mov	r0, r1
 800c2ce:	490d      	ldr	r1, [pc, #52]	@ (800c304 <generate_type_name+0x54>)
 800c2d0:	9204      	str	r2, [sp, #16]
 800c2d2:	9105      	str	r1, [sp, #20]
 800c2d4:	9102      	str	r1, [sp, #8]
 800c2d6:	4a0c      	ldr	r2, [pc, #48]	@ (800c308 <generate_type_name+0x58>)
 800c2d8:	4621      	mov	r1, r4
 800c2da:	f00a f8b7 	bl	801644c <sniprintf>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	db05      	blt.n	800c2ee <generate_type_name+0x3e>
 800c2e2:	4284      	cmp	r4, r0
 800c2e4:	bfd4      	ite	le
 800c2e6:	2000      	movle	r0, #0
 800c2e8:	2001      	movgt	r0, #1
 800c2ea:	b007      	add	sp, #28
 800c2ec:	bd30      	pop	{r4, r5, pc}
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	b007      	add	sp, #28
 800c2f2:	bd30      	pop	{r4, r5, pc}
 800c2f4:	4b05      	ldr	r3, [pc, #20]	@ (800c30c <generate_type_name+0x5c>)
 800c2f6:	4a01      	ldr	r2, [pc, #4]	@ (800c2fc <generate_type_name+0x4c>)
 800c2f8:	461d      	mov	r5, r3
 800c2fa:	e7e2      	b.n	800c2c2 <generate_type_name+0x12>
 800c2fc:	080179a8 	.word	0x080179a8
 800c300:	080179c0 	.word	0x080179c0
 800c304:	080179bc 	.word	0x080179bc
 800c308:	080179ac 	.word	0x080179ac
 800c30c:	08017ea4 	.word	0x08017ea4

0800c310 <generate_topic_name>:
 800c310:	b510      	push	{r4, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	4614      	mov	r4, r2
 800c316:	9000      	str	r0, [sp, #0]
 800c318:	4b08      	ldr	r3, [pc, #32]	@ (800c33c <generate_topic_name+0x2c>)
 800c31a:	4a09      	ldr	r2, [pc, #36]	@ (800c340 <generate_topic_name+0x30>)
 800c31c:	4608      	mov	r0, r1
 800c31e:	4621      	mov	r1, r4
 800c320:	f00a f894 	bl	801644c <sniprintf>
 800c324:	2800      	cmp	r0, #0
 800c326:	db05      	blt.n	800c334 <generate_topic_name+0x24>
 800c328:	4284      	cmp	r4, r0
 800c32a:	bfd4      	ite	le
 800c32c:	2000      	movle	r0, #0
 800c32e:	2001      	movgt	r0, #1
 800c330:	b002      	add	sp, #8
 800c332:	bd10      	pop	{r4, pc}
 800c334:	2000      	movs	r0, #0
 800c336:	b002      	add	sp, #8
 800c338:	bd10      	pop	{r4, pc}
 800c33a:	bf00      	nop
 800c33c:	080179cc 	.word	0x080179cc
 800c340:	080179c4 	.word	0x080179c4

0800c344 <is_uxrce_rmw_identifier_valid>:
 800c344:	b510      	push	{r4, lr}
 800c346:	4604      	mov	r4, r0
 800c348:	b140      	cbz	r0, 800c35c <is_uxrce_rmw_identifier_valid+0x18>
 800c34a:	f006 faa9 	bl	80128a0 <rmw_get_implementation_identifier>
 800c34e:	4601      	mov	r1, r0
 800c350:	4620      	mov	r0, r4
 800c352:	f7f3 ff45 	bl	80001e0 <strcmp>
 800c356:	fab0 f080 	clz	r0, r0
 800c35a:	0940      	lsrs	r0, r0, #5
 800c35c:	bd10      	pop	{r4, pc}
 800c35e:	bf00      	nop

0800c360 <get_message_typesupport_handle>:
 800c360:	6883      	ldr	r3, [r0, #8]
 800c362:	4718      	bx	r3

0800c364 <get_message_typesupport_handle_function>:
 800c364:	b510      	push	{r4, lr}
 800c366:	4604      	mov	r4, r0
 800c368:	6800      	ldr	r0, [r0, #0]
 800c36a:	f7f3 ff39 	bl	80001e0 <strcmp>
 800c36e:	2800      	cmp	r0, #0
 800c370:	bf0c      	ite	eq
 800c372:	4620      	moveq	r0, r4
 800c374:	2000      	movne	r0, #0
 800c376:	bd10      	pop	{r4, pc}

0800c378 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800c378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c37c:	6805      	ldr	r5, [r0, #0]
 800c37e:	4604      	mov	r4, r0
 800c380:	4628      	mov	r0, r5
 800c382:	460e      	mov	r6, r1
 800c384:	f7f3 ff2c 	bl	80001e0 <strcmp>
 800c388:	b1c8      	cbz	r0, 800c3be <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800c38a:	4b11      	ldr	r3, [pc, #68]	@ (800c3d0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	429d      	cmp	r5, r3
 800c390:	d112      	bne.n	800c3b8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c392:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c396:	f8d8 4000 	ldr.w	r4, [r8]
 800c39a:	b16c      	cbz	r4, 800c3b8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c39c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c3a0:	2700      	movs	r7, #0
 800c3a2:	3d04      	subs	r5, #4
 800c3a4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c3a8:	4631      	mov	r1, r6
 800c3aa:	f7f3 ff19 	bl	80001e0 <strcmp>
 800c3ae:	00bb      	lsls	r3, r7, #2
 800c3b0:	b140      	cbz	r0, 800c3c4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800c3b2:	3701      	adds	r7, #1
 800c3b4:	42bc      	cmp	r4, r7
 800c3b6:	d1f5      	bne.n	800c3a4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3be:	4620      	mov	r0, r4
 800c3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c3c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3cc:	58d3      	ldr	r3, [r2, r3]
 800c3ce:	4718      	bx	r3
 800c3d0:	200001d0 	.word	0x200001d0

0800c3d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800c3d4:	4b04      	ldr	r3, [pc, #16]	@ (800c3e8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	b10a      	cbz	r2, 800c3de <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0xa>
 800c3da:	4803      	ldr	r0, [pc, #12]	@ (800c3e8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800c3dc:	4770      	bx	lr
 800c3de:	4a03      	ldr	r2, [pc, #12]	@ (800c3ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x18>)
 800c3e0:	4801      	ldr	r0, [pc, #4]	@ (800c3e8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800c3e2:	6812      	ldr	r2, [r2, #0]
 800c3e4:	601a      	str	r2, [r3, #0]
 800c3e6:	4770      	bx	lr
 800c3e8:	200001e0 	.word	0x200001e0
 800c3ec:	200001d0 	.word	0x200001d0

0800c3f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800c3f0:	4a02      	ldr	r2, [pc, #8]	@ (800c3fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0xc>)
 800c3f2:	4b03      	ldr	r3, [pc, #12]	@ (800c400 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x10>)
 800c3f4:	6812      	ldr	r2, [r2, #0]
 800c3f6:	601a      	str	r2, [r3, #0]
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	200001d0 	.word	0x200001d0
 800c400:	200001e0 	.word	0x200001e0

0800c404 <std_msgs__msg__Int16__rosidl_typesupport_introspection_c__Int16_init_function>:
 800c404:	f007 bb30 	b.w	8013a68 <std_msgs__msg__Int16__init>

0800c408 <std_msgs__msg__Int16__rosidl_typesupport_introspection_c__Int16_fini_function>:
 800c408:	f007 bb32 	b.w	8013a70 <std_msgs__msg__Int16__fini>

0800c40c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800c40c:	4b04      	ldr	r3, [pc, #16]	@ (800c420 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	b10a      	cbz	r2, 800c416 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0xa>
 800c412:	4803      	ldr	r0, [pc, #12]	@ (800c420 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800c414:	4770      	bx	lr
 800c416:	4a03      	ldr	r2, [pc, #12]	@ (800c424 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x18>)
 800c418:	4801      	ldr	r0, [pc, #4]	@ (800c420 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800c41a:	6812      	ldr	r2, [r2, #0]
 800c41c:	601a      	str	r2, [r3, #0]
 800c41e:	4770      	bx	lr
 800c420:	20000228 	.word	0x20000228
 800c424:	200001d4 	.word	0x200001d4

0800c428 <_Int16__max_serialized_size>:
 800c428:	b508      	push	{r3, lr}
 800c42a:	2102      	movs	r1, #2
 800c42c:	2000      	movs	r0, #0
 800c42e:	f7fe f91b 	bl	800a668 <ucdr_alignment>
 800c432:	3002      	adds	r0, #2
 800c434:	bd08      	pop	{r3, pc}
 800c436:	bf00      	nop

0800c438 <_Int16__cdr_deserialize>:
 800c438:	b109      	cbz	r1, 800c43e <_Int16__cdr_deserialize+0x6>
 800c43a:	f7fd bd8b 	b.w	8009f54 <ucdr_deserialize_int16_t>
 800c43e:	4608      	mov	r0, r1
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop

0800c444 <get_serialized_size_std_msgs__msg__Int16>:
 800c444:	b138      	cbz	r0, 800c456 <get_serialized_size_std_msgs__msg__Int16+0x12>
 800c446:	b508      	push	{r3, lr}
 800c448:	460b      	mov	r3, r1
 800c44a:	4618      	mov	r0, r3
 800c44c:	2102      	movs	r1, #2
 800c44e:	f7fe f90b 	bl	800a668 <ucdr_alignment>
 800c452:	3002      	adds	r0, #2
 800c454:	bd08      	pop	{r3, pc}
 800c456:	4770      	bx	lr

0800c458 <_Int16__cdr_serialize>:
 800c458:	460a      	mov	r2, r1
 800c45a:	b120      	cbz	r0, 800c466 <_Int16__cdr_serialize+0xe>
 800c45c:	f9b0 1000 	ldrsh.w	r1, [r0]
 800c460:	4610      	mov	r0, r2
 800c462:	f7fd bcf7 	b.w	8009e54 <ucdr_serialize_int16_t>
 800c466:	4770      	bx	lr

0800c468 <_Int16__get_serialized_size>:
 800c468:	b130      	cbz	r0, 800c478 <_Int16__get_serialized_size+0x10>
 800c46a:	b508      	push	{r3, lr}
 800c46c:	2102      	movs	r1, #2
 800c46e:	2000      	movs	r0, #0
 800c470:	f7fe f8fa 	bl	800a668 <ucdr_alignment>
 800c474:	3002      	adds	r0, #2
 800c476:	bd08      	pop	{r3, pc}
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop

0800c47c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800c47c:	4800      	ldr	r0, [pc, #0]	@ (800c480 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int16+0x4>)
 800c47e:	4770      	bx	lr
 800c480:	20000234 	.word	0x20000234

0800c484 <geometry_msgs__msg__Twist__init>:
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	4605      	mov	r5, r0
 800c488:	b1a8      	cbz	r0, 800c4b6 <geometry_msgs__msg__Twist__init+0x32>
 800c48a:	f000 f82b 	bl	800c4e4 <geometry_msgs__msg__Vector3__init>
 800c48e:	4604      	mov	r4, r0
 800c490:	b140      	cbz	r0, 800c4a4 <geometry_msgs__msg__Twist__init+0x20>
 800c492:	f105 0618 	add.w	r6, r5, #24
 800c496:	4630      	mov	r0, r6
 800c498:	f000 f824 	bl	800c4e4 <geometry_msgs__msg__Vector3__init>
 800c49c:	4604      	mov	r4, r0
 800c49e:	b168      	cbz	r0, 800c4bc <geometry_msgs__msg__Twist__init+0x38>
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	bd70      	pop	{r4, r5, r6, pc}
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	f000 f821 	bl	800c4ec <geometry_msgs__msg__Vector3__fini>
 800c4aa:	f105 0018 	add.w	r0, r5, #24
 800c4ae:	f000 f81d 	bl	800c4ec <geometry_msgs__msg__Vector3__fini>
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	bd70      	pop	{r4, r5, r6, pc}
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	bd70      	pop	{r4, r5, r6, pc}
 800c4bc:	4628      	mov	r0, r5
 800c4be:	f000 f815 	bl	800c4ec <geometry_msgs__msg__Vector3__fini>
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	f000 f812 	bl	800c4ec <geometry_msgs__msg__Vector3__fini>
 800c4c8:	e7ea      	b.n	800c4a0 <geometry_msgs__msg__Twist__init+0x1c>
 800c4ca:	bf00      	nop

0800c4cc <geometry_msgs__msg__Twist__fini>:
 800c4cc:	b148      	cbz	r0, 800c4e2 <geometry_msgs__msg__Twist__fini+0x16>
 800c4ce:	b510      	push	{r4, lr}
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	f000 f80b 	bl	800c4ec <geometry_msgs__msg__Vector3__fini>
 800c4d6:	f104 0018 	add.w	r0, r4, #24
 800c4da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4de:	f000 b805 	b.w	800c4ec <geometry_msgs__msg__Vector3__fini>
 800c4e2:	4770      	bx	lr

0800c4e4 <geometry_msgs__msg__Vector3__init>:
 800c4e4:	3800      	subs	r0, #0
 800c4e6:	bf18      	it	ne
 800c4e8:	2001      	movne	r0, #1
 800c4ea:	4770      	bx	lr

0800c4ec <geometry_msgs__msg__Vector3__fini>:
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop

0800c4f0 <uxr_buffer_delete_entity>:
 800c4f0:	b510      	push	{r4, lr}
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	b08e      	sub	sp, #56	@ 0x38
 800c4f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c4fa:	2303      	movs	r3, #3
 800c4fc:	9300      	str	r3, [sp, #0]
 800c4fe:	2204      	movs	r2, #4
 800c500:	ab06      	add	r3, sp, #24
 800c502:	4604      	mov	r4, r0
 800c504:	9103      	str	r1, [sp, #12]
 800c506:	f001 f951 	bl	800d7ac <uxr_prepare_stream_to_write_submessage>
 800c50a:	b918      	cbnz	r0, 800c514 <uxr_buffer_delete_entity+0x24>
 800c50c:	4604      	mov	r4, r0
 800c50e:	4620      	mov	r0, r4
 800c510:	b00e      	add	sp, #56	@ 0x38
 800c512:	bd10      	pop	{r4, pc}
 800c514:	9902      	ldr	r1, [sp, #8]
 800c516:	aa05      	add	r2, sp, #20
 800c518:	4620      	mov	r0, r4
 800c51a:	f001 fa7d 	bl	800da18 <uxr_init_base_object_request>
 800c51e:	a905      	add	r1, sp, #20
 800c520:	4604      	mov	r4, r0
 800c522:	a806      	add	r0, sp, #24
 800c524:	f002 fcce 	bl	800eec4 <uxr_serialize_DELETE_Payload>
 800c528:	4620      	mov	r0, r4
 800c52a:	b00e      	add	sp, #56	@ 0x38
 800c52c:	bd10      	pop	{r4, pc}
 800c52e:	bf00      	nop

0800c530 <uxr_common_create_entity>:
 800c530:	b510      	push	{r4, lr}
 800c532:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c536:	b08c      	sub	sp, #48	@ 0x30
 800c538:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c53c:	f1bc 0f01 	cmp.w	ip, #1
 800c540:	bf0c      	ite	eq
 800c542:	f003 0201 	andeq.w	r2, r3, #1
 800c546:	2200      	movne	r2, #0
 800c548:	330e      	adds	r3, #14
 800c54a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800c54e:	9101      	str	r1, [sp, #4]
 800c550:	441a      	add	r2, r3
 800c552:	2301      	movs	r3, #1
 800c554:	9300      	str	r3, [sp, #0]
 800c556:	9903      	ldr	r1, [sp, #12]
 800c558:	ab04      	add	r3, sp, #16
 800c55a:	b292      	uxth	r2, r2
 800c55c:	4604      	mov	r4, r0
 800c55e:	f001 f925 	bl	800d7ac <uxr_prepare_stream_to_write_submessage>
 800c562:	b918      	cbnz	r0, 800c56c <uxr_common_create_entity+0x3c>
 800c564:	4604      	mov	r4, r0
 800c566:	4620      	mov	r0, r4
 800c568:	b00c      	add	sp, #48	@ 0x30
 800c56a:	bd10      	pop	{r4, pc}
 800c56c:	9902      	ldr	r1, [sp, #8]
 800c56e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c570:	4620      	mov	r0, r4
 800c572:	f001 fa51 	bl	800da18 <uxr_init_base_object_request>
 800c576:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c578:	4604      	mov	r4, r0
 800c57a:	a804      	add	r0, sp, #16
 800c57c:	f002 fbfe 	bl	800ed7c <uxr_serialize_CREATE_Payload>
 800c580:	4620      	mov	r0, r4
 800c582:	b00c      	add	sp, #48	@ 0x30
 800c584:	bd10      	pop	{r4, pc}
 800c586:	bf00      	nop

0800c588 <uxr_buffer_create_participant_bin>:
 800c588:	b570      	push	{r4, r5, r6, lr}
 800c58a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800c58e:	ac11      	add	r4, sp, #68	@ 0x44
 800c590:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800c594:	2303      	movs	r3, #3
 800c596:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c59a:	7223      	strb	r3, [r4, #8]
 800c59c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800c59e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	4605      	mov	r5, r0
 800c5a8:	7122      	strb	r2, [r4, #4]
 800c5aa:	f88d 1014 	strb.w	r1, [sp, #20]
 800c5ae:	b1cb      	cbz	r3, 800c5e4 <uxr_buffer_create_participant_bin+0x5c>
 800c5b0:	f88d 201c 	strb.w	r2, [sp, #28]
 800c5b4:	9308      	str	r3, [sp, #32]
 800c5b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5ba:	a915      	add	r1, sp, #84	@ 0x54
 800c5bc:	a809      	add	r0, sp, #36	@ 0x24
 800c5be:	f7fe f84f 	bl	800a660 <ucdr_init_buffer>
 800c5c2:	a905      	add	r1, sp, #20
 800c5c4:	a809      	add	r0, sp, #36	@ 0x24
 800c5c6:	f001 ffbb 	bl	800e540 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c5ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c5cc:	9600      	str	r6, [sp, #0]
 800c5ce:	9401      	str	r4, [sp, #4]
 800c5d0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c5d4:	60e3      	str	r3, [r4, #12]
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	f7ff ffa9 	bl	800c530 <uxr_common_create_entity>
 800c5de:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	f88d 301c 	strb.w	r3, [sp, #28]
 800c5e8:	e7e5      	b.n	800c5b6 <uxr_buffer_create_participant_bin+0x2e>
 800c5ea:	bf00      	nop

0800c5ec <uxr_buffer_create_topic_bin>:
 800c5ec:	b570      	push	{r4, r5, r6, lr}
 800c5ee:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800c5f2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c5f6:	9105      	str	r1, [sp, #20]
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	a997      	add	r1, sp, #604	@ 0x25c
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	2302      	movs	r3, #2
 800c600:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800c604:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800c608:	f000 f996 	bl	800c938 <uxr_object_id_to_raw>
 800c60c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800c60e:	9306      	str	r3, [sp, #24]
 800c610:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800c612:	930a      	str	r3, [sp, #40]	@ 0x28
 800c614:	2303      	movs	r3, #3
 800c616:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c61a:	2301      	movs	r3, #1
 800c61c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c620:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800c624:	a917      	add	r1, sp, #92	@ 0x5c
 800c626:	2300      	movs	r3, #0
 800c628:	a80b      	add	r0, sp, #44	@ 0x2c
 800c62a:	f88d 301c 	strb.w	r3, [sp, #28]
 800c62e:	f7fe f817 	bl	800a660 <ucdr_init_buffer>
 800c632:	a906      	add	r1, sp, #24
 800c634:	a80b      	add	r0, sp, #44	@ 0x2c
 800c636:	f001 ffa5 	bl	800e584 <uxr_serialize_OBJK_Topic_Binary>
 800c63a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c63c:	9316      	str	r3, [sp, #88]	@ 0x58
 800c63e:	ac13      	add	r4, sp, #76	@ 0x4c
 800c640:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c644:	9600      	str	r6, [sp, #0]
 800c646:	9401      	str	r4, [sp, #4]
 800c648:	b29b      	uxth	r3, r3
 800c64a:	4628      	mov	r0, r5
 800c64c:	f7ff ff70 	bl	800c530 <uxr_common_create_entity>
 800c650:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800c654:	bd70      	pop	{r4, r5, r6, pc}
 800c656:	bf00      	nop

0800c658 <uxr_buffer_create_publisher_bin>:
 800c658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c65a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800c65e:	4605      	mov	r5, r0
 800c660:	9105      	str	r1, [sp, #20]
 800c662:	4618      	mov	r0, r3
 800c664:	2603      	movs	r6, #3
 800c666:	a992      	add	r1, sp, #584	@ 0x248
 800c668:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c66c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800c670:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800c674:	f000 f960 	bl	800c938 <uxr_object_id_to_raw>
 800c678:	2300      	movs	r3, #0
 800c67a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c67e:	a912      	add	r1, sp, #72	@ 0x48
 800c680:	a806      	add	r0, sp, #24
 800c682:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c686:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c68a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800c68e:	f7fd ffe7 	bl	800a660 <ucdr_init_buffer>
 800c692:	a993      	add	r1, sp, #588	@ 0x24c
 800c694:	a806      	add	r0, sp, #24
 800c696:	f002 f829 	bl	800e6ec <uxr_serialize_OBJK_Publisher_Binary>
 800c69a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c69c:	9311      	str	r3, [sp, #68]	@ 0x44
 800c69e:	ac0e      	add	r4, sp, #56	@ 0x38
 800c6a0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c6a4:	9700      	str	r7, [sp, #0]
 800c6a6:	9401      	str	r4, [sp, #4]
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	f7ff ff40 	bl	800c530 <uxr_common_create_entity>
 800c6b0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800c6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6b6:	bf00      	nop

0800c6b8 <uxr_buffer_create_subscriber_bin>:
 800c6b8:	b570      	push	{r4, r5, r6, lr}
 800c6ba:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800c6be:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c6c2:	9105      	str	r1, [sp, #20]
 800c6c4:	4605      	mov	r5, r0
 800c6c6:	a992      	add	r1, sp, #584	@ 0x248
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	2304      	movs	r3, #4
 800c6cc:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800c6d0:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800c6d4:	f000 f930 	bl	800c938 <uxr_object_id_to_raw>
 800c6d8:	2300      	movs	r3, #0
 800c6da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c6de:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c6e2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c6e6:	a912      	add	r1, sp, #72	@ 0x48
 800c6e8:	2303      	movs	r3, #3
 800c6ea:	a806      	add	r0, sp, #24
 800c6ec:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800c6f0:	f7fd ffb6 	bl	800a660 <ucdr_init_buffer>
 800c6f4:	a993      	add	r1, sp, #588	@ 0x24c
 800c6f6:	a806      	add	r0, sp, #24
 800c6f8:	f002 f8a8 	bl	800e84c <uxr_serialize_OBJK_Subscriber_Binary>
 800c6fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6fe:	9311      	str	r3, [sp, #68]	@ 0x44
 800c700:	ac0e      	add	r4, sp, #56	@ 0x38
 800c702:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c706:	9600      	str	r6, [sp, #0]
 800c708:	9401      	str	r4, [sp, #4]
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	4628      	mov	r0, r5
 800c70e:	f7ff ff0f 	bl	800c530 <uxr_common_create_entity>
 800c712:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800c716:	bd70      	pop	{r4, r5, r6, pc}

0800c718 <uxr_buffer_create_datawriter_bin>:
 800c718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c71c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c720:	ac1d      	add	r4, sp, #116	@ 0x74
 800c722:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c726:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800c72a:	9105      	str	r1, [sp, #20]
 800c72c:	4606      	mov	r6, r0
 800c72e:	a9a1      	add	r1, sp, #644	@ 0x284
 800c730:	4618      	mov	r0, r3
 800c732:	2305      	movs	r3, #5
 800c734:	7123      	strb	r3, [r4, #4]
 800c736:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800c73a:	2703      	movs	r7, #3
 800c73c:	f000 f8fc 	bl	800c938 <uxr_object_id_to_raw>
 800c740:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800c742:	7227      	strb	r7, [r4, #8]
 800c744:	a90e      	add	r1, sp, #56	@ 0x38
 800c746:	f000 f8f7 	bl	800c938 <uxr_object_id_to_raw>
 800c74a:	2300      	movs	r3, #0
 800c74c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800c750:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800c754:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800c758:	3d00      	subs	r5, #0
 800c75a:	bf18      	it	ne
 800c75c:	2501      	movne	r5, #1
 800c75e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800c762:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800c766:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c76a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c76e:	2301      	movs	r3, #1
 800c770:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800c774:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800c778:	bb8a      	cbnz	r2, 800c7de <uxr_buffer_create_datawriter_bin+0xc6>
 800c77a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c77e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800c782:	f04f 0c13 	mov.w	ip, #19
 800c786:	250b      	movs	r5, #11
 800c788:	2221      	movs	r2, #33	@ 0x21
 800c78a:	2111      	movs	r1, #17
 800c78c:	2009      	movs	r0, #9
 800c78e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800c792:	b923      	cbnz	r3, 800c79e <uxr_buffer_create_datawriter_bin+0x86>
 800c794:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800c798:	4672      	mov	r2, lr
 800c79a:	4661      	mov	r1, ip
 800c79c:	4628      	mov	r0, r5
 800c79e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d025      	beq.n	800c7f2 <uxr_buffer_create_datawriter_bin+0xda>
 800c7a6:	2b03      	cmp	r3, #3
 800c7a8:	d029      	beq.n	800c7fe <uxr_buffer_create_datawriter_bin+0xe6>
 800c7aa:	b32b      	cbz	r3, 800c7f8 <uxr_buffer_create_datawriter_bin+0xe0>
 800c7ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7b0:	a921      	add	r1, sp, #132	@ 0x84
 800c7b2:	a806      	add	r0, sp, #24
 800c7b4:	f7fd ff54 	bl	800a660 <ucdr_init_buffer>
 800c7b8:	a90e      	add	r1, sp, #56	@ 0x38
 800c7ba:	a806      	add	r0, sp, #24
 800c7bc:	f002 f8f8 	bl	800e9b0 <uxr_serialize_OBJK_DataWriter_Binary>
 800c7c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7c2:	f8cd 8000 	str.w	r8, [sp]
 800c7c6:	9401      	str	r4, [sp, #4]
 800c7c8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c7cc:	60e3      	str	r3, [r4, #12]
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	f7ff fead 	bl	800c530 <uxr_common_create_entity>
 800c7d6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7de:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800c7e2:	f04f 0c12 	mov.w	ip, #18
 800c7e6:	250a      	movs	r5, #10
 800c7e8:	2220      	movs	r2, #32
 800c7ea:	2110      	movs	r1, #16
 800c7ec:	2008      	movs	r0, #8
 800c7ee:	2702      	movs	r7, #2
 800c7f0:	e7cd      	b.n	800c78e <uxr_buffer_create_datawriter_bin+0x76>
 800c7f2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800c7f6:	e7d9      	b.n	800c7ac <uxr_buffer_create_datawriter_bin+0x94>
 800c7f8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800c7fc:	e7d6      	b.n	800c7ac <uxr_buffer_create_datawriter_bin+0x94>
 800c7fe:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800c802:	e7d3      	b.n	800c7ac <uxr_buffer_create_datawriter_bin+0x94>

0800c804 <uxr_buffer_create_datareader_bin>:
 800c804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c808:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800c80c:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c80e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c812:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800c816:	9105      	str	r1, [sp, #20]
 800c818:	4606      	mov	r6, r0
 800c81a:	a9a3      	add	r1, sp, #652	@ 0x28c
 800c81c:	4618      	mov	r0, r3
 800c81e:	2306      	movs	r3, #6
 800c820:	7123      	strb	r3, [r4, #4]
 800c822:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800c826:	2703      	movs	r7, #3
 800c828:	f000 f886 	bl	800c938 <uxr_object_id_to_raw>
 800c82c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800c82e:	7227      	strb	r7, [r4, #8]
 800c830:	a90e      	add	r1, sp, #56	@ 0x38
 800c832:	f000 f881 	bl	800c938 <uxr_object_id_to_raw>
 800c836:	2300      	movs	r3, #0
 800c838:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800c83c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800c840:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800c844:	3d00      	subs	r5, #0
 800c846:	bf18      	it	ne
 800c848:	2501      	movne	r5, #1
 800c84a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800c84e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800c852:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800c856:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c85a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c85e:	2301      	movs	r3, #1
 800c860:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800c864:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800c868:	bb8a      	cbnz	r2, 800c8ce <uxr_buffer_create_datareader_bin+0xca>
 800c86a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c86e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800c872:	f04f 0c13 	mov.w	ip, #19
 800c876:	250b      	movs	r5, #11
 800c878:	2221      	movs	r2, #33	@ 0x21
 800c87a:	2111      	movs	r1, #17
 800c87c:	2009      	movs	r0, #9
 800c87e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800c882:	b923      	cbnz	r3, 800c88e <uxr_buffer_create_datareader_bin+0x8a>
 800c884:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800c888:	4672      	mov	r2, lr
 800c88a:	4661      	mov	r1, ip
 800c88c:	4628      	mov	r0, r5
 800c88e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800c892:	2b01      	cmp	r3, #1
 800c894:	d025      	beq.n	800c8e2 <uxr_buffer_create_datareader_bin+0xde>
 800c896:	2b03      	cmp	r3, #3
 800c898:	d029      	beq.n	800c8ee <uxr_buffer_create_datareader_bin+0xea>
 800c89a:	b32b      	cbz	r3, 800c8e8 <uxr_buffer_create_datareader_bin+0xe4>
 800c89c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c8a0:	a923      	add	r1, sp, #140	@ 0x8c
 800c8a2:	a806      	add	r0, sp, #24
 800c8a4:	f7fd fedc 	bl	800a660 <ucdr_init_buffer>
 800c8a8:	a90e      	add	r1, sp, #56	@ 0x38
 800c8aa:	a806      	add	r0, sp, #24
 800c8ac:	f002 f844 	bl	800e938 <uxr_serialize_OBJK_DataReader_Binary>
 800c8b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8b2:	f8cd 8000 	str.w	r8, [sp]
 800c8b6:	9401      	str	r4, [sp, #4]
 800c8b8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c8bc:	60e3      	str	r3, [r4, #12]
 800c8be:	4630      	mov	r0, r6
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	f7ff fe35 	bl	800c530 <uxr_common_create_entity>
 800c8c6:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800c8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ce:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800c8d2:	f04f 0c12 	mov.w	ip, #18
 800c8d6:	250a      	movs	r5, #10
 800c8d8:	2220      	movs	r2, #32
 800c8da:	2110      	movs	r1, #16
 800c8dc:	2008      	movs	r0, #8
 800c8de:	2702      	movs	r7, #2
 800c8e0:	e7cd      	b.n	800c87e <uxr_buffer_create_datareader_bin+0x7a>
 800c8e2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800c8e6:	e7d9      	b.n	800c89c <uxr_buffer_create_datareader_bin+0x98>
 800c8e8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800c8ec:	e7d6      	b.n	800c89c <uxr_buffer_create_datareader_bin+0x98>
 800c8ee:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800c8f2:	e7d3      	b.n	800c89c <uxr_buffer_create_datareader_bin+0x98>

0800c8f4 <uxr_object_id>:
 800c8f4:	b082      	sub	sp, #8
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	f88d 1006 	strb.w	r1, [sp, #6]
 800c8fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c900:	f360 030f 	bfi	r3, r0, #0, #16
 800c904:	f362 431f 	bfi	r3, r2, #16, #16
 800c908:	4618      	mov	r0, r3
 800c90a:	b002      	add	sp, #8
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop

0800c910 <uxr_object_id_from_raw>:
 800c910:	7843      	ldrb	r3, [r0, #1]
 800c912:	7801      	ldrb	r1, [r0, #0]
 800c914:	b082      	sub	sp, #8
 800c916:	f003 020f 	and.w	r2, r3, #15
 800c91a:	f88d 2006 	strb.w	r2, [sp, #6]
 800c91e:	091b      	lsrs	r3, r3, #4
 800c920:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c924:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800c928:	2000      	movs	r0, #0
 800c92a:	f363 000f 	bfi	r0, r3, #0, #16
 800c92e:	f362 401f 	bfi	r0, r2, #16, #16
 800c932:	b002      	add	sp, #8
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop

0800c938 <uxr_object_id_to_raw>:
 800c938:	4602      	mov	r2, r0
 800c93a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800c93e:	b082      	sub	sp, #8
 800c940:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800c944:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800c948:	f881 c000 	strb.w	ip, [r1]
 800c94c:	7048      	strb	r0, [r1, #1]
 800c94e:	b002      	add	sp, #8
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop

0800c954 <on_get_fragmentation_info>:
 800c954:	b500      	push	{lr}
 800c956:	b08b      	sub	sp, #44	@ 0x2c
 800c958:	4601      	mov	r1, r0
 800c95a:	2204      	movs	r2, #4
 800c95c:	a802      	add	r0, sp, #8
 800c95e:	f7fd fe7f 	bl	800a660 <ucdr_init_buffer>
 800c962:	f10d 0305 	add.w	r3, sp, #5
 800c966:	f10d 0206 	add.w	r2, sp, #6
 800c96a:	a901      	add	r1, sp, #4
 800c96c:	a802      	add	r0, sp, #8
 800c96e:	f001 f9d5 	bl	800dd1c <uxr_read_submessage_header>
 800c972:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c976:	2b0d      	cmp	r3, #13
 800c978:	d003      	beq.n	800c982 <on_get_fragmentation_info+0x2e>
 800c97a:	2000      	movs	r0, #0
 800c97c:	b00b      	add	sp, #44	@ 0x2c
 800c97e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c982:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c986:	f013 0f02 	tst.w	r3, #2
 800c98a:	bf14      	ite	ne
 800c98c:	2002      	movne	r0, #2
 800c98e:	2001      	moveq	r0, #1
 800c990:	b00b      	add	sp, #44	@ 0x2c
 800c992:	f85d fb04 	ldr.w	pc, [sp], #4
 800c996:	bf00      	nop

0800c998 <read_submessage_get_info>:
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	2500      	movs	r5, #0
 800c99c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800c9a6:	460e      	mov	r6, r1
 800c9a8:	a810      	add	r0, sp, #64	@ 0x40
 800c9aa:	4629      	mov	r1, r5
 800c9ac:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800c9b0:	f009 fe26 	bl	8016600 <memset>
 800c9b4:	a903      	add	r1, sp, #12
 800c9b6:	4630      	mov	r0, r6
 800c9b8:	f002 fa70 	bl	800ee9c <uxr_deserialize_GET_INFO_Payload>
 800c9bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c9c0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f001 f81f 	bl	800da08 <uxr_session_header_offset>
 800c9ca:	462b      	mov	r3, r5
 800c9cc:	9000      	str	r0, [sp, #0]
 800c9ce:	220c      	movs	r2, #12
 800c9d0:	a905      	add	r1, sp, #20
 800c9d2:	a808      	add	r0, sp, #32
 800c9d4:	f7fd fe32 	bl	800a63c <ucdr_init_buffer_origin_offset>
 800c9d8:	a910      	add	r1, sp, #64	@ 0x40
 800c9da:	a808      	add	r0, sp, #32
 800c9dc:	f002 fad0 	bl	800ef80 <uxr_serialize_INFO_Payload>
 800c9e0:	9b08      	ldr	r3, [sp, #32]
 800c9e2:	462a      	mov	r2, r5
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f000 ffb8 	bl	800d95c <uxr_stamp_session_header>
 800c9ec:	a808      	add	r0, sp, #32
 800c9ee:	f7fd fe63 	bl	800a6b8 <ucdr_buffer_length>
 800c9f2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	a905      	add	r1, sp, #20
 800c9f8:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c9fc:	47a0      	blx	r4
 800c9fe:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800ca02:	bd70      	pop	{r4, r5, r6, pc}

0800ca04 <write_submessage_acknack.isra.0>:
 800ca04:	b570      	push	{r4, r5, r6, lr}
 800ca06:	b092      	sub	sp, #72	@ 0x48
 800ca08:	4605      	mov	r5, r0
 800ca0a:	460e      	mov	r6, r1
 800ca0c:	4614      	mov	r4, r2
 800ca0e:	f000 fffb 	bl	800da08 <uxr_session_header_offset>
 800ca12:	a905      	add	r1, sp, #20
 800ca14:	9000      	str	r0, [sp, #0]
 800ca16:	2300      	movs	r3, #0
 800ca18:	a80a      	add	r0, sp, #40	@ 0x28
 800ca1a:	2211      	movs	r2, #17
 800ca1c:	f7fd fe0e 	bl	800a63c <ucdr_init_buffer_origin_offset>
 800ca20:	2218      	movs	r2, #24
 800ca22:	fb02 5404 	mla	r4, r2, r4, r5
 800ca26:	2300      	movs	r3, #0
 800ca28:	2205      	movs	r2, #5
 800ca2a:	3450      	adds	r4, #80	@ 0x50
 800ca2c:	210a      	movs	r1, #10
 800ca2e:	a80a      	add	r0, sp, #40	@ 0x28
 800ca30:	f001 f95a 	bl	800dce8 <uxr_buffer_submessage_header>
 800ca34:	a903      	add	r1, sp, #12
 800ca36:	4620      	mov	r0, r4
 800ca38:	f007 fc1c 	bl	8014274 <uxr_compute_acknack>
 800ca3c:	ba40      	rev16	r0, r0
 800ca3e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800ca42:	a903      	add	r1, sp, #12
 800ca44:	a80a      	add	r0, sp, #40	@ 0x28
 800ca46:	f88d 6010 	strb.w	r6, [sp, #16]
 800ca4a:	f002 fb09 	bl	800f060 <uxr_serialize_ACKNACK_Payload>
 800ca4e:	2200      	movs	r2, #0
 800ca50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca52:	4611      	mov	r1, r2
 800ca54:	4628      	mov	r0, r5
 800ca56:	f000 ff81 	bl	800d95c <uxr_stamp_session_header>
 800ca5a:	a80a      	add	r0, sp, #40	@ 0x28
 800ca5c:	f7fd fe2c 	bl	800a6b8 <ucdr_buffer_length>
 800ca60:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ca62:	4602      	mov	r2, r0
 800ca64:	a905      	add	r1, sp, #20
 800ca66:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ca6a:	47a0      	blx	r4
 800ca6c:	b012      	add	sp, #72	@ 0x48
 800ca6e:	bd70      	pop	{r4, r5, r6, pc}

0800ca70 <uxr_init_session>:
 800ca70:	b510      	push	{r4, lr}
 800ca72:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800caa8 <uxr_init_session+0x38>
 800ca76:	2300      	movs	r3, #0
 800ca78:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800ca7c:	4604      	mov	r4, r0
 800ca7e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800ca82:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800ca86:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800ca8a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800ca8e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800ca92:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800ca96:	2181      	movs	r1, #129	@ 0x81
 800ca98:	f000 fecc 	bl	800d834 <uxr_init_session_info>
 800ca9c:	f104 0008 	add.w	r0, r4, #8
 800caa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caa4:	f001 b83c 	b.w	800db20 <uxr_init_stream_storage>
	...

0800cab0 <uxr_set_status_callback>:
 800cab0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop

0800cab8 <uxr_set_topic_callback>:
 800cab8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800cabc:	4770      	bx	lr
 800cabe:	bf00      	nop

0800cac0 <uxr_set_request_callback>:
 800cac0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop

0800cac8 <uxr_set_reply_callback>:
 800cac8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop

0800cad0 <uxr_create_output_best_effort_stream>:
 800cad0:	b510      	push	{r4, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	e9cd 2100 	strd	r2, r1, [sp]
 800cad8:	4604      	mov	r4, r0
 800cada:	f000 ff95 	bl	800da08 <uxr_session_header_offset>
 800cade:	e9dd 2100 	ldrd	r2, r1, [sp]
 800cae2:	4603      	mov	r3, r0
 800cae4:	f104 0008 	add.w	r0, r4, #8
 800cae8:	b004      	add	sp, #16
 800caea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caee:	f001 b861 	b.w	800dbb4 <uxr_add_output_best_effort_buffer>
 800caf2:	bf00      	nop

0800caf4 <uxr_create_output_reliable_stream>:
 800caf4:	b510      	push	{r4, lr}
 800caf6:	b088      	sub	sp, #32
 800caf8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800cafc:	4604      	mov	r4, r0
 800cafe:	9303      	str	r3, [sp, #12]
 800cb00:	f000 ff82 	bl	800da08 <uxr_session_header_offset>
 800cb04:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800cb08:	9000      	str	r0, [sp, #0]
 800cb0a:	9905      	ldr	r1, [sp, #20]
 800cb0c:	f104 0008 	add.w	r0, r4, #8
 800cb10:	f001 f864 	bl	800dbdc <uxr_add_output_reliable_buffer>
 800cb14:	2200      	movs	r2, #0
 800cb16:	b2c3      	uxtb	r3, r0
 800cb18:	f363 0207 	bfi	r2, r3, #0, #8
 800cb1c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cb20:	f363 220f 	bfi	r2, r3, #8, #8
 800cb24:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cb28:	f363 4217 	bfi	r2, r3, #16, #8
 800cb2c:	0e03      	lsrs	r3, r0, #24
 800cb2e:	f363 621f 	bfi	r2, r3, #24, #8
 800cb32:	4610      	mov	r0, r2
 800cb34:	b008      	add	sp, #32
 800cb36:	bd10      	pop	{r4, pc}

0800cb38 <uxr_create_input_best_effort_stream>:
 800cb38:	b082      	sub	sp, #8
 800cb3a:	3008      	adds	r0, #8
 800cb3c:	b002      	add	sp, #8
 800cb3e:	f001 b867 	b.w	800dc10 <uxr_add_input_best_effort_buffer>
 800cb42:	bf00      	nop

0800cb44 <uxr_create_input_reliable_stream>:
 800cb44:	b510      	push	{r4, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	4c0b      	ldr	r4, [pc, #44]	@ (800cb78 <uxr_create_input_reliable_stream+0x34>)
 800cb4a:	9400      	str	r4, [sp, #0]
 800cb4c:	3008      	adds	r0, #8
 800cb4e:	f001 f875 	bl	800dc3c <uxr_add_input_reliable_buffer>
 800cb52:	2200      	movs	r2, #0
 800cb54:	b2c3      	uxtb	r3, r0
 800cb56:	f363 0207 	bfi	r2, r3, #0, #8
 800cb5a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cb5e:	f363 220f 	bfi	r2, r3, #8, #8
 800cb62:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cb66:	f363 4217 	bfi	r2, r3, #16, #8
 800cb6a:	0e03      	lsrs	r3, r0, #24
 800cb6c:	f363 621f 	bfi	r2, r3, #24, #8
 800cb70:	4610      	mov	r0, r2
 800cb72:	b004      	add	sp, #16
 800cb74:	bd10      	pop	{r4, pc}
 800cb76:	bf00      	nop
 800cb78:	0800c955 	.word	0x0800c955

0800cb7c <uxr_epoch_nanos>:
 800cb7c:	b510      	push	{r4, lr}
 800cb7e:	4604      	mov	r4, r0
 800cb80:	f001 f912 	bl	800dda8 <uxr_nanos>
 800cb84:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800cb88:	1ac0      	subs	r0, r0, r3
 800cb8a:	eb61 0102 	sbc.w	r1, r1, r2
 800cb8e:	bd10      	pop	{r4, pc}

0800cb90 <uxr_flash_output_streams>:
 800cb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb94:	7e03      	ldrb	r3, [r0, #24]
 800cb96:	b084      	sub	sp, #16
 800cb98:	4604      	mov	r4, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d035      	beq.n	800cc0a <uxr_flash_output_streams+0x7a>
 800cb9e:	f04f 0900 	mov.w	r9, #0
 800cba2:	4648      	mov	r0, r9
 800cba4:	f10d 0802 	add.w	r8, sp, #2
 800cba8:	af03      	add	r7, sp, #12
 800cbaa:	ae02      	add	r6, sp, #8
 800cbac:	e006      	b.n	800cbbc <uxr_flash_output_streams+0x2c>
 800cbae:	7e23      	ldrb	r3, [r4, #24]
 800cbb0:	f109 0901 	add.w	r9, r9, #1
 800cbb4:	fa5f f089 	uxtb.w	r0, r9
 800cbb8:	4283      	cmp	r3, r0
 800cbba:	d926      	bls.n	800cc0a <uxr_flash_output_streams+0x7a>
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	4611      	mov	r1, r2
 800cbc0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800cbc4:	f000 ff58 	bl	800da78 <uxr_stream_id>
 800cbc8:	3508      	adds	r5, #8
 800cbca:	4684      	mov	ip, r0
 800cbcc:	4643      	mov	r3, r8
 800cbce:	463a      	mov	r2, r7
 800cbd0:	4631      	mov	r1, r6
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	f8cd c004 	str.w	ip, [sp, #4]
 800cbd8:	f007 fbd2 	bl	8014380 <uxr_prepare_best_effort_buffer_to_send>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d0e6      	beq.n	800cbae <uxr_flash_output_streams+0x1e>
 800cbe0:	9b02      	ldr	r3, [sp, #8]
 800cbe2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cbe6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cbea:	4620      	mov	r0, r4
 800cbec:	f000 feb6 	bl	800d95c <uxr_stamp_session_header>
 800cbf0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cbf2:	9a03      	ldr	r2, [sp, #12]
 800cbf4:	685d      	ldr	r5, [r3, #4]
 800cbf6:	6818      	ldr	r0, [r3, #0]
 800cbf8:	9902      	ldr	r1, [sp, #8]
 800cbfa:	47a8      	blx	r5
 800cbfc:	f109 0901 	add.w	r9, r9, #1
 800cc00:	7e23      	ldrb	r3, [r4, #24]
 800cc02:	fa5f f089 	uxtb.w	r0, r9
 800cc06:	4283      	cmp	r3, r0
 800cc08:	d8d8      	bhi.n	800cbbc <uxr_flash_output_streams+0x2c>
 800cc0a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800cc0e:	b38b      	cbz	r3, 800cc74 <uxr_flash_output_streams+0xe4>
 800cc10:	f04f 0900 	mov.w	r9, #0
 800cc14:	f10d 0802 	add.w	r8, sp, #2
 800cc18:	af03      	add	r7, sp, #12
 800cc1a:	ae02      	add	r6, sp, #8
 800cc1c:	4648      	mov	r0, r9
 800cc1e:	2201      	movs	r2, #1
 800cc20:	2102      	movs	r1, #2
 800cc22:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800cc26:	f000 ff27 	bl	800da78 <uxr_stream_id>
 800cc2a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800cc2e:	3520      	adds	r5, #32
 800cc30:	9001      	str	r0, [sp, #4]
 800cc32:	e00d      	b.n	800cc50 <uxr_flash_output_streams+0xc0>
 800cc34:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cc38:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cc3c:	9b02      	ldr	r3, [sp, #8]
 800cc3e:	f000 fe8d 	bl	800d95c <uxr_stamp_session_header>
 800cc42:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cc44:	9a03      	ldr	r2, [sp, #12]
 800cc46:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800cc4a:	9902      	ldr	r1, [sp, #8]
 800cc4c:	6818      	ldr	r0, [r3, #0]
 800cc4e:	47d0      	blx	sl
 800cc50:	4643      	mov	r3, r8
 800cc52:	463a      	mov	r2, r7
 800cc54:	4631      	mov	r1, r6
 800cc56:	4628      	mov	r0, r5
 800cc58:	f007 fdb0 	bl	80147bc <uxr_prepare_next_reliable_buffer_to_send>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	4620      	mov	r0, r4
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1e7      	bne.n	800cc34 <uxr_flash_output_streams+0xa4>
 800cc64:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800cc68:	f109 0901 	add.w	r9, r9, #1
 800cc6c:	fa5f f089 	uxtb.w	r0, r9
 800cc70:	4283      	cmp	r3, r0
 800cc72:	d8d4      	bhi.n	800cc1e <uxr_flash_output_streams+0x8e>
 800cc74:	b004      	add	sp, #16
 800cc76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc7a:	bf00      	nop

0800cc7c <read_submessage_info>:
 800cc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc80:	460d      	mov	r5, r1
 800cc82:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800cc86:	4669      	mov	r1, sp
 800cc88:	4607      	mov	r7, r0
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	f002 f814 	bl	800ecb8 <uxr_deserialize_BaseObjectReply>
 800cc90:	a902      	add	r1, sp, #8
 800cc92:	4604      	mov	r4, r0
 800cc94:	4628      	mov	r0, r5
 800cc96:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800cc9a:	f7fc fb87 	bl	80093ac <ucdr_deserialize_bool>
 800cc9e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cca2:	4004      	ands	r4, r0
 800cca4:	b2e4      	uxtb	r4, r4
 800cca6:	b95b      	cbnz	r3, 800ccc0 <read_submessage_info+0x44>
 800cca8:	a987      	add	r1, sp, #540	@ 0x21c
 800ccaa:	4628      	mov	r0, r5
 800ccac:	f7fc fb7e 	bl	80093ac <ucdr_deserialize_bool>
 800ccb0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800ccb4:	4606      	mov	r6, r0
 800ccb6:	b94b      	cbnz	r3, 800cccc <read_submessage_info+0x50>
 800ccb8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ccbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc0:	a903      	add	r1, sp, #12
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	f001 fea0 	bl	800ea08 <uxr_deserialize_ObjectVariant>
 800ccc8:	4004      	ands	r4, r0
 800ccca:	e7ed      	b.n	800cca8 <read_submessage_info+0x2c>
 800cccc:	a988      	add	r1, sp, #544	@ 0x220
 800ccce:	4628      	mov	r0, r5
 800ccd0:	f7fc fb9a 	bl	8009408 <ucdr_deserialize_uint8_t>
 800ccd4:	4234      	tst	r4, r6
 800ccd6:	d0ef      	beq.n	800ccb8 <read_submessage_info+0x3c>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d0ed      	beq.n	800ccb8 <read_submessage_info+0x3c>
 800ccdc:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800cce0:	2b0d      	cmp	r3, #13
 800cce2:	d1e9      	bne.n	800ccb8 <read_submessage_info+0x3c>
 800cce4:	a98a      	add	r1, sp, #552	@ 0x228
 800cce6:	4628      	mov	r0, r5
 800cce8:	f7fd f934 	bl	8009f54 <ucdr_deserialize_int16_t>
 800ccec:	b140      	cbz	r0, 800cd00 <read_submessage_info+0x84>
 800ccee:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	dd07      	ble.n	800cd06 <read_submessage_info+0x8a>
 800ccf6:	f1b8 0f00 	cmp.w	r8, #0
 800ccfa:	bf14      	ite	ne
 800ccfc:	2001      	movne	r0, #1
 800ccfe:	2002      	moveq	r0, #2
 800cd00:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800cd04:	e7d8      	b.n	800ccb8 <read_submessage_info+0x3c>
 800cd06:	2000      	movs	r0, #0
 800cd08:	e7fa      	b.n	800cd00 <read_submessage_info+0x84>
 800cd0a:	bf00      	nop

0800cd0c <read_submessage_list>:
 800cd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd10:	b097      	sub	sp, #92	@ 0x5c
 800cd12:	4ec1      	ldr	r6, [pc, #772]	@ (800d018 <read_submessage_list+0x30c>)
 800cd14:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd16:	4604      	mov	r4, r0
 800cd18:	460d      	mov	r5, r1
 800cd1a:	f04f 0801 	mov.w	r8, #1
 800cd1e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800cd22:	aa0c      	add	r2, sp, #48	@ 0x30
 800cd24:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800cd28:	4628      	mov	r0, r5
 800cd2a:	f000 fff7 	bl	800dd1c <uxr_read_submessage_header>
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	f000 813e 	beq.w	800cfb0 <read_submessage_list+0x2a4>
 800cd34:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800cd38:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800cd3c:	3b02      	subs	r3, #2
 800cd3e:	2b0d      	cmp	r3, #13
 800cd40:	d8ed      	bhi.n	800cd1e <read_submessage_list+0x12>
 800cd42:	a101      	add	r1, pc, #4	@ (adr r1, 800cd48 <read_submessage_list+0x3c>)
 800cd44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd48:	0800cfa7 	.word	0x0800cfa7
 800cd4c:	0800cd1f 	.word	0x0800cd1f
 800cd50:	0800cf97 	.word	0x0800cf97
 800cd54:	0800cf35 	.word	0x0800cf35
 800cd58:	0800cf2b 	.word	0x0800cf2b
 800cd5c:	0800cd1f 	.word	0x0800cd1f
 800cd60:	0800cd1f 	.word	0x0800cd1f
 800cd64:	0800ce8b 	.word	0x0800ce8b
 800cd68:	0800ce1b 	.word	0x0800ce1b
 800cd6c:	0800cddb 	.word	0x0800cddb
 800cd70:	0800cd1f 	.word	0x0800cd1f
 800cd74:	0800cd1f 	.word	0x0800cd1f
 800cd78:	0800cd1f 	.word	0x0800cd1f
 800cd7c:	0800cd81 	.word	0x0800cd81
 800cd80:	a910      	add	r1, sp, #64	@ 0x40
 800cd82:	4628      	mov	r0, r5
 800cd84:	f002 f9bc 	bl	800f100 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800cd88:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800cd8c:	f1b9 0f00 	cmp.w	r9, #0
 800cd90:	f000 8116 	beq.w	800cfc0 <read_submessage_list+0x2b4>
 800cd94:	f001 f808 	bl	800dda8 <uxr_nanos>
 800cd98:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800cda0:	2100      	movs	r1, #0
 800cda2:	468c      	mov	ip, r1
 800cda4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800cda8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800cdac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800cdae:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800cdb0:	468c      	mov	ip, r1
 800cdb2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800cdb6:	46e2      	mov	sl, ip
 800cdb8:	46bc      	mov	ip, r7
 800cdba:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800cdbe:	fbc0 7106 	smlal	r7, r1, r0, r6
 800cdc2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800cdc6:	e9cd 7100 	strd	r7, r1, [sp]
 800cdca:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800cdce:	9106      	str	r1, [sp, #24]
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	47c8      	blx	r9
 800cdd4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800cdd8:	e7a1      	b.n	800cd1e <read_submessage_list+0x12>
 800cdda:	a910      	add	r1, sp, #64	@ 0x40
 800cddc:	4628      	mov	r0, r5
 800cdde:	f002 f97d 	bl	800f0dc <uxr_deserialize_HEARTBEAT_Payload>
 800cde2:	2100      	movs	r1, #0
 800cde4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800cde8:	f000 fe70 	bl	800dacc <uxr_stream_id_from_raw>
 800cdec:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800cdf0:	900f      	str	r0, [sp, #60]	@ 0x3c
 800cdf2:	4639      	mov	r1, r7
 800cdf4:	f104 0008 	add.w	r0, r4, #8
 800cdf8:	f000 ff56 	bl	800dca8 <uxr_get_input_reliable_stream>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	d08e      	beq.n	800cd1e <read_submessage_list+0x12>
 800ce00:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800ce04:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800ce08:	f007 fa28 	bl	801425c <uxr_process_heartbeat>
 800ce0c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800ce10:	463a      	mov	r2, r7
 800ce12:	4620      	mov	r0, r4
 800ce14:	f7ff fdf6 	bl	800ca04 <write_submessage_acknack.isra.0>
 800ce18:	e781      	b.n	800cd1e <read_submessage_list+0x12>
 800ce1a:	a910      	add	r1, sp, #64	@ 0x40
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	f002 f935 	bl	800f08c <uxr_deserialize_ACKNACK_Payload>
 800ce22:	2100      	movs	r1, #0
 800ce24:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ce28:	f000 fe50 	bl	800dacc <uxr_stream_id_from_raw>
 800ce2c:	900d      	str	r0, [sp, #52]	@ 0x34
 800ce2e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800ce32:	f104 0008 	add.w	r0, r4, #8
 800ce36:	f000 ff23 	bl	800dc80 <uxr_get_output_reliable_stream>
 800ce3a:	4607      	mov	r7, r0
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	f43f af6e 	beq.w	800cd1e <read_submessage_list+0x12>
 800ce42:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800ce46:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800ce4a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800ce4e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ce52:	b289      	uxth	r1, r1
 800ce54:	f007 fd5c 	bl	8014910 <uxr_process_acknack>
 800ce58:	4638      	mov	r0, r7
 800ce5a:	f007 fd19 	bl	8014890 <uxr_begin_output_nack_buffer_it>
 800ce5e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ce62:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800ce66:	e006      	b.n	800ce76 <read_submessage_list+0x16a>
 800ce68:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ce6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ce6c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ce70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ce72:	6818      	ldr	r0, [r3, #0]
 800ce74:	47c8      	blx	r9
 800ce76:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800ce7a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ce7c:	4651      	mov	r1, sl
 800ce7e:	4638      	mov	r0, r7
 800ce80:	f007 fd08 	bl	8014894 <uxr_next_reliable_nack_buffer_to_send>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	d1ef      	bne.n	800ce68 <read_submessage_list+0x15c>
 800ce88:	e749      	b.n	800cd1e <read_submessage_list+0x12>
 800ce8a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800ce8e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800ce92:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ce96:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800ce9a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800ce9e:	4651      	mov	r1, sl
 800cea0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800cea4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800cea8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800ceac:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800ceb6:	f001 fe49 	bl	800eb4c <uxr_deserialize_BaseObjectRequest>
 800ceba:	4650      	mov	r0, sl
 800cebc:	a90f      	add	r1, sp, #60	@ 0x3c
 800cebe:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800cec2:	f000 fdc7 	bl	800da54 <uxr_parse_base_object_request>
 800cec6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800ceca:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cecc:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800ced0:	9110      	str	r1, [sp, #64]	@ 0x40
 800ced2:	3f04      	subs	r7, #4
 800ced4:	f009 090e 	and.w	r9, r9, #14
 800ced8:	b2bf      	uxth	r7, r7
 800ceda:	f1bb 0f00 	cmp.w	fp, #0
 800cede:	d006      	beq.n	800ceee <read_submessage_list+0x1e2>
 800cee0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800cee4:	9300      	str	r3, [sp, #0]
 800cee6:	4652      	mov	r2, sl
 800cee8:	2300      	movs	r3, #0
 800ceea:	4620      	mov	r0, r4
 800ceec:	47d8      	blx	fp
 800ceee:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800cef0:	b16a      	cbz	r2, 800cf0e <read_submessage_list+0x202>
 800cef2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800cef4:	2100      	movs	r1, #0
 800cef6:	3802      	subs	r0, #2
 800cef8:	e002      	b.n	800cf00 <read_submessage_list+0x1f4>
 800cefa:	3101      	adds	r1, #1
 800cefc:	4291      	cmp	r1, r2
 800cefe:	d006      	beq.n	800cf0e <read_submessage_list+0x202>
 800cf00:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800cf04:	4553      	cmp	r3, sl
 800cf06:	d1f8      	bne.n	800cefa <read_submessage_list+0x1ee>
 800cf08:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	545a      	strb	r2, [r3, r1]
 800cf0e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800cf12:	9102      	str	r1, [sp, #8]
 800cf14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cf16:	9101      	str	r1, [sp, #4]
 800cf18:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800cf1a:	9100      	str	r1, [sp, #0]
 800cf1c:	464b      	mov	r3, r9
 800cf1e:	463a      	mov	r2, r7
 800cf20:	4629      	mov	r1, r5
 800cf22:	4620      	mov	r0, r4
 800cf24:	f007 fdb2 	bl	8014a8c <read_submessage_format>
 800cf28:	e6f9      	b.n	800cd1e <read_submessage_list+0x12>
 800cf2a:	4629      	mov	r1, r5
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f7ff fea5 	bl	800cc7c <read_submessage_info>
 800cf32:	e6f4      	b.n	800cd1e <read_submessage_list+0x12>
 800cf34:	2a00      	cmp	r2, #0
 800cf36:	d03e      	beq.n	800cfb6 <read_submessage_list+0x2aa>
 800cf38:	a910      	add	r1, sp, #64	@ 0x40
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	f002 f802 	bl	800ef44 <uxr_deserialize_STATUS_Payload>
 800cf40:	a90e      	add	r1, sp, #56	@ 0x38
 800cf42:	aa0d      	add	r2, sp, #52	@ 0x34
 800cf44:	a810      	add	r0, sp, #64	@ 0x40
 800cf46:	f000 fd85 	bl	800da54 <uxr_parse_base_object_request>
 800cf4a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800cf4e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cf50:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800cf54:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800cf58:	910f      	str	r1, [sp, #60]	@ 0x3c
 800cf5a:	f1ba 0f00 	cmp.w	sl, #0
 800cf5e:	d006      	beq.n	800cf6e <read_submessage_list+0x262>
 800cf60:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800cf64:	9300      	str	r3, [sp, #0]
 800cf66:	463a      	mov	r2, r7
 800cf68:	464b      	mov	r3, r9
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	47d0      	blx	sl
 800cf6e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800cf70:	2a00      	cmp	r2, #0
 800cf72:	f43f aed4 	beq.w	800cd1e <read_submessage_list+0x12>
 800cf76:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800cf78:	2100      	movs	r1, #0
 800cf7a:	3802      	subs	r0, #2
 800cf7c:	e003      	b.n	800cf86 <read_submessage_list+0x27a>
 800cf7e:	3101      	adds	r1, #1
 800cf80:	4291      	cmp	r1, r2
 800cf82:	f43f aecc 	beq.w	800cd1e <read_submessage_list+0x12>
 800cf86:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800cf8a:	42bb      	cmp	r3, r7
 800cf8c:	d1f7      	bne.n	800cf7e <read_submessage_list+0x272>
 800cf8e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800cf90:	f803 9001 	strb.w	r9, [r3, r1]
 800cf94:	e6c3      	b.n	800cd1e <read_submessage_list+0x12>
 800cf96:	2a00      	cmp	r2, #0
 800cf98:	f47f aec1 	bne.w	800cd1e <read_submessage_list+0x12>
 800cf9c:	4629      	mov	r1, r5
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	f000 fc9e 	bl	800d8e0 <uxr_read_create_session_status>
 800cfa4:	e6bb      	b.n	800cd1e <read_submessage_list+0x12>
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	f7ff fcf5 	bl	800c998 <read_submessage_get_info>
 800cfae:	e6b6      	b.n	800cd1e <read_submessage_list+0x12>
 800cfb0:	b017      	add	sp, #92	@ 0x5c
 800cfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb6:	4629      	mov	r1, r5
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f000 fc9d 	bl	800d8f8 <uxr_read_delete_session_status>
 800cfbe:	e6ae      	b.n	800cd1e <read_submessage_list+0x12>
 800cfc0:	f000 fef2 	bl	800dda8 <uxr_nanos>
 800cfc4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cfc6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800cfc8:	464f      	mov	r7, r9
 800cfca:	fbc3 2706 	smlal	r2, r7, r3, r6
 800cfce:	1812      	adds	r2, r2, r0
 800cfd0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cfd2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800cfd4:	eb47 0101 	adc.w	r1, r7, r1
 800cfd8:	464f      	mov	r7, r9
 800cfda:	fbc3 0706 	smlal	r0, r7, r3, r6
 800cfde:	463b      	mov	r3, r7
 800cfe0:	4684      	mov	ip, r0
 800cfe2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800cfe6:	fbc7 0906 	smlal	r0, r9, r7, r6
 800cfea:	eb1c 0c00 	adds.w	ip, ip, r0
 800cfee:	464f      	mov	r7, r9
 800cff0:	eb43 0307 	adc.w	r3, r3, r7
 800cff4:	ebb2 0c0c 	subs.w	ip, r2, ip
 800cff8:	eb61 0303 	sbc.w	r3, r1, r3
 800cffc:	0fda      	lsrs	r2, r3, #31
 800cffe:	eb12 020c 	adds.w	r2, r2, ip
 800d002:	f143 0300 	adc.w	r3, r3, #0
 800d006:	0852      	lsrs	r2, r2, #1
 800d008:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d00c:	105b      	asrs	r3, r3, #1
 800d00e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800d012:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800d016:	e6dd      	b.n	800cdd4 <read_submessage_list+0xc8>
 800d018:	3b9aca00 	.word	0x3b9aca00

0800d01c <listen_message_reliably>:
 800d01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d020:	1e0b      	subs	r3, r1, #0
 800d022:	b09d      	sub	sp, #116	@ 0x74
 800d024:	bfb8      	it	lt
 800d026:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800d02a:	4680      	mov	r8, r0
 800d02c:	9305      	str	r3, [sp, #20]
 800d02e:	f000 fea1 	bl	800dd74 <uxr_millis>
 800d032:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800d036:	4681      	mov	r9, r0
 800d038:	2a00      	cmp	r2, #0
 800d03a:	f000 80a1 	beq.w	800d180 <listen_message_reliably+0x164>
 800d03e:	2600      	movs	r6, #0
 800d040:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d044:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800d048:	9303      	str	r3, [sp, #12]
 800d04a:	4630      	mov	r0, r6
 800d04c:	460f      	mov	r7, r1
 800d04e:	e00f      	b.n	800d070 <listen_message_reliably+0x54>
 800d050:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d054:	9903      	ldr	r1, [sp, #12]
 800d056:	455a      	cmp	r2, fp
 800d058:	f106 0601 	add.w	r6, r6, #1
 800d05c:	eb73 0101 	sbcs.w	r1, r3, r1
 800d060:	b2f0      	uxtb	r0, r6
 800d062:	da01      	bge.n	800d068 <listen_message_reliably+0x4c>
 800d064:	4693      	mov	fp, r2
 800d066:	9303      	str	r3, [sp, #12]
 800d068:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d06c:	4283      	cmp	r3, r0
 800d06e:	d960      	bls.n	800d132 <listen_message_reliably+0x116>
 800d070:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d074:	2102      	movs	r1, #2
 800d076:	2201      	movs	r2, #1
 800d078:	f000 fcfe 	bl	800da78 <uxr_stream_id>
 800d07c:	00e4      	lsls	r4, r4, #3
 800d07e:	f104 0520 	add.w	r5, r4, #32
 800d082:	4445      	add	r5, r8
 800d084:	4601      	mov	r1, r0
 800d086:	463b      	mov	r3, r7
 800d088:	464a      	mov	r2, r9
 800d08a:	4628      	mov	r0, r5
 800d08c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d08e:	f007 fbd5 	bl	801483c <uxr_update_output_stream_heartbeat_timestamp>
 800d092:	eb08 0304 	add.w	r3, r8, r4
 800d096:	2800      	cmp	r0, #0
 800d098:	d0da      	beq.n	800d050 <listen_message_reliably+0x34>
 800d09a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d09e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800d0a2:	9304      	str	r3, [sp, #16]
 800d0a4:	4640      	mov	r0, r8
 800d0a6:	f000 fcaf 	bl	800da08 <uxr_session_header_offset>
 800d0aa:	3501      	adds	r5, #1
 800d0ac:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800d0b0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d0b4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	2211      	movs	r2, #17
 800d0bc:	9000      	str	r0, [sp, #0]
 800d0be:	a90c      	add	r1, sp, #48	@ 0x30
 800d0c0:	4650      	mov	r0, sl
 800d0c2:	f7fd fabb 	bl	800a63c <ucdr_init_buffer_origin_offset>
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	2205      	movs	r2, #5
 800d0ca:	210b      	movs	r1, #11
 800d0cc:	4650      	mov	r0, sl
 800d0ce:	f000 fe0b 	bl	800dce8 <uxr_buffer_submessage_header>
 800d0d2:	8968      	ldrh	r0, [r5, #10]
 800d0d4:	2101      	movs	r1, #1
 800d0d6:	f007 fda3 	bl	8014c20 <uxr_seq_num_add>
 800d0da:	892b      	ldrh	r3, [r5, #8]
 800d0dc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	9b04      	ldr	r3, [sp, #16]
 800d0e4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d0e8:	a90a      	add	r1, sp, #40	@ 0x28
 800d0ea:	4650      	mov	r0, sl
 800d0ec:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800d0f0:	f001 ffe0 	bl	800f0b4 <uxr_serialize_HEARTBEAT_Payload>
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	4611      	mov	r1, r2
 800d0f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d0fa:	4640      	mov	r0, r8
 800d0fc:	f000 fc2e 	bl	800d95c <uxr_stamp_session_header>
 800d100:	4650      	mov	r0, sl
 800d102:	f7fd fad9 	bl	800a6b8 <ucdr_buffer_length>
 800d106:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800d10a:	4602      	mov	r2, r0
 800d10c:	a90c      	add	r1, sp, #48	@ 0x30
 800d10e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d112:	4444      	add	r4, r8
 800d114:	47a8      	blx	r5
 800d116:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800d11a:	9903      	ldr	r1, [sp, #12]
 800d11c:	455a      	cmp	r2, fp
 800d11e:	f106 0601 	add.w	r6, r6, #1
 800d122:	eb73 0101 	sbcs.w	r1, r3, r1
 800d126:	b2f0      	uxtb	r0, r6
 800d128:	db9c      	blt.n	800d064 <listen_message_reliably+0x48>
 800d12a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d12e:	4283      	cmp	r3, r0
 800d130:	d89e      	bhi.n	800d070 <listen_message_reliably+0x54>
 800d132:	9a03      	ldr	r2, [sp, #12]
 800d134:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d138:	429a      	cmp	r2, r3
 800d13a:	bf08      	it	eq
 800d13c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800d140:	d01e      	beq.n	800d180 <listen_message_reliably+0x164>
 800d142:	ebab 0309 	sub.w	r3, fp, r9
 800d146:	9905      	ldr	r1, [sp, #20]
 800d148:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	bf08      	it	eq
 800d150:	2301      	moveq	r3, #1
 800d152:	4299      	cmp	r1, r3
 800d154:	bfa8      	it	ge
 800d156:	4619      	movge	r1, r3
 800d158:	6894      	ldr	r4, [r2, #8]
 800d15a:	6810      	ldr	r0, [r2, #0]
 800d15c:	4689      	mov	r9, r1
 800d15e:	460b      	mov	r3, r1
 800d160:	aa08      	add	r2, sp, #32
 800d162:	a907      	add	r1, sp, #28
 800d164:	47a0      	blx	r4
 800d166:	b968      	cbnz	r0, 800d184 <listen_message_reliably+0x168>
 800d168:	9b05      	ldr	r3, [sp, #20]
 800d16a:	eba3 0309 	sub.w	r3, r3, r9
 800d16e:	2b00      	cmp	r3, #0
 800d170:	9305      	str	r3, [sp, #20]
 800d172:	f73f af5c 	bgt.w	800d02e <listen_message_reliably+0x12>
 800d176:	4604      	mov	r4, r0
 800d178:	4620      	mov	r0, r4
 800d17a:	b01d      	add	sp, #116	@ 0x74
 800d17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d180:	9b05      	ldr	r3, [sp, #20]
 800d182:	e7e0      	b.n	800d146 <listen_message_reliably+0x12a>
 800d184:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d188:	4604      	mov	r4, r0
 800d18a:	a80c      	add	r0, sp, #48	@ 0x30
 800d18c:	f7fd fa68 	bl	800a660 <ucdr_init_buffer>
 800d190:	2500      	movs	r5, #0
 800d192:	f10d 031a 	add.w	r3, sp, #26
 800d196:	aa06      	add	r2, sp, #24
 800d198:	a90c      	add	r1, sp, #48	@ 0x30
 800d19a:	4640      	mov	r0, r8
 800d19c:	f88d 5018 	strb.w	r5, [sp, #24]
 800d1a0:	f000 fbf0 	bl	800d984 <uxr_read_session_header>
 800d1a4:	b918      	cbnz	r0, 800d1ae <listen_message_reliably+0x192>
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	b01d      	add	sp, #116	@ 0x74
 800d1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ae:	4629      	mov	r1, r5
 800d1b0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d1b4:	f000 fc8a 	bl	800dacc <uxr_stream_id_from_raw>
 800d1b8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d1bc:	2d01      	cmp	r5, #1
 800d1be:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d1c2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800d1c6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d1ca:	d04b      	beq.n	800d264 <listen_message_reliably+0x248>
 800d1cc:	2d02      	cmp	r5, #2
 800d1ce:	d00f      	beq.n	800d1f0 <listen_message_reliably+0x1d4>
 800d1d0:	2d00      	cmp	r5, #0
 800d1d2:	d1e8      	bne.n	800d1a6 <listen_message_reliably+0x18a>
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	4628      	mov	r0, r5
 800d1d8:	f000 fc78 	bl	800dacc <uxr_stream_id_from_raw>
 800d1dc:	a90c      	add	r1, sp, #48	@ 0x30
 800d1de:	4602      	mov	r2, r0
 800d1e0:	4640      	mov	r0, r8
 800d1e2:	920a      	str	r2, [sp, #40]	@ 0x28
 800d1e4:	f7ff fd92 	bl	800cd0c <read_submessage_list>
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	b01d      	add	sp, #116	@ 0x74
 800d1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f0:	4631      	mov	r1, r6
 800d1f2:	f108 0008 	add.w	r0, r8, #8
 800d1f6:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800d1fa:	f000 fd55 	bl	800dca8 <uxr_get_input_reliable_stream>
 800d1fe:	4607      	mov	r7, r0
 800d200:	b338      	cbz	r0, 800d252 <listen_message_reliably+0x236>
 800d202:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d204:	9203      	str	r2, [sp, #12]
 800d206:	a80c      	add	r0, sp, #48	@ 0x30
 800d208:	f7fd fa5a 	bl	800a6c0 <ucdr_buffer_remaining>
 800d20c:	4603      	mov	r3, r0
 800d20e:	f10d 0019 	add.w	r0, sp, #25
 800d212:	9000      	str	r0, [sp, #0]
 800d214:	9a03      	ldr	r2, [sp, #12]
 800d216:	4651      	mov	r1, sl
 800d218:	4638      	mov	r0, r7
 800d21a:	f006 ff25 	bl	8014068 <uxr_receive_reliable_message>
 800d21e:	b1c0      	cbz	r0, 800d252 <listen_message_reliably+0x236>
 800d220:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d224:	b393      	cbz	r3, 800d28c <listen_message_reliably+0x270>
 800d226:	ad14      	add	r5, sp, #80	@ 0x50
 800d228:	f04f 0a02 	mov.w	sl, #2
 800d22c:	e00a      	b.n	800d244 <listen_message_reliably+0x228>
 800d22e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800d232:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800d236:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800d23a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d23c:	4629      	mov	r1, r5
 800d23e:	4640      	mov	r0, r8
 800d240:	f7ff fd64 	bl	800cd0c <read_submessage_list>
 800d244:	2204      	movs	r2, #4
 800d246:	4629      	mov	r1, r5
 800d248:	4638      	mov	r0, r7
 800d24a:	f006 ff8d 	bl	8014168 <uxr_next_input_reliable_buffer_available>
 800d24e:	2800      	cmp	r0, #0
 800d250:	d1ed      	bne.n	800d22e <listen_message_reliably+0x212>
 800d252:	4640      	mov	r0, r8
 800d254:	4632      	mov	r2, r6
 800d256:	4649      	mov	r1, r9
 800d258:	f7ff fbd4 	bl	800ca04 <write_submessage_acknack.isra.0>
 800d25c:	4620      	mov	r0, r4
 800d25e:	b01d      	add	sp, #116	@ 0x74
 800d260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d264:	4631      	mov	r1, r6
 800d266:	f108 0008 	add.w	r0, r8, #8
 800d26a:	f000 fd13 	bl	800dc94 <uxr_get_input_best_effort_stream>
 800d26e:	2800      	cmp	r0, #0
 800d270:	d099      	beq.n	800d1a6 <listen_message_reliably+0x18a>
 800d272:	4651      	mov	r1, sl
 800d274:	f006 fe64 	bl	8013f40 <uxr_receive_best_effort_message>
 800d278:	2800      	cmp	r0, #0
 800d27a:	d094      	beq.n	800d1a6 <listen_message_reliably+0x18a>
 800d27c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d280:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d282:	a90c      	add	r1, sp, #48	@ 0x30
 800d284:	4640      	mov	r0, r8
 800d286:	f7ff fd41 	bl	800cd0c <read_submessage_list>
 800d28a:	e78c      	b.n	800d1a6 <listen_message_reliably+0x18a>
 800d28c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d290:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d292:	a90c      	add	r1, sp, #48	@ 0x30
 800d294:	4640      	mov	r0, r8
 800d296:	f7ff fd39 	bl	800cd0c <read_submessage_list>
 800d29a:	e7c4      	b.n	800d226 <listen_message_reliably+0x20a>

0800d29c <uxr_run_session_timeout>:
 800d29c:	b570      	push	{r4, r5, r6, lr}
 800d29e:	4604      	mov	r4, r0
 800d2a0:	460d      	mov	r5, r1
 800d2a2:	f000 fd67 	bl	800dd74 <uxr_millis>
 800d2a6:	4606      	mov	r6, r0
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f7ff fc71 	bl	800cb90 <uxr_flash_output_streams>
 800d2ae:	4629      	mov	r1, r5
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	f7ff feb3 	bl	800d01c <listen_message_reliably>
 800d2b6:	f000 fd5d 	bl	800dd74 <uxr_millis>
 800d2ba:	1b83      	subs	r3, r0, r6
 800d2bc:	1ae9      	subs	r1, r5, r3
 800d2be:	2900      	cmp	r1, #0
 800d2c0:	dcf6      	bgt.n	800d2b0 <uxr_run_session_timeout+0x14>
 800d2c2:	f104 0008 	add.w	r0, r4, #8
 800d2c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d2ca:	f000 bcf7 	b.w	800dcbc <uxr_output_streams_confirmed>
 800d2ce:	bf00      	nop

0800d2d0 <uxr_run_session_until_data>:
 800d2d0:	b570      	push	{r4, r5, r6, lr}
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	460d      	mov	r5, r1
 800d2d6:	f000 fd4d 	bl	800dd74 <uxr_millis>
 800d2da:	4606      	mov	r6, r0
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f7ff fc57 	bl	800cb90 <uxr_flash_output_streams>
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800d2e8:	4629      	mov	r1, r5
 800d2ea:	e005      	b.n	800d2f8 <uxr_run_session_until_data+0x28>
 800d2ec:	f000 fd42 	bl	800dd74 <uxr_millis>
 800d2f0:	1b83      	subs	r3, r0, r6
 800d2f2:	1ae9      	subs	r1, r5, r3
 800d2f4:	2900      	cmp	r1, #0
 800d2f6:	dd07      	ble.n	800d308 <uxr_run_session_until_data+0x38>
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	f7ff fe8f 	bl	800d01c <listen_message_reliably>
 800d2fe:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d302:	2800      	cmp	r0, #0
 800d304:	d0f2      	beq.n	800d2ec <uxr_run_session_until_data+0x1c>
 800d306:	bd70      	pop	{r4, r5, r6, pc}
 800d308:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d30c:	bd70      	pop	{r4, r5, r6, pc}
 800d30e:	bf00      	nop

0800d310 <uxr_run_session_until_confirm_delivery>:
 800d310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d314:	4606      	mov	r6, r0
 800d316:	460d      	mov	r5, r1
 800d318:	f000 fd2c 	bl	800dd74 <uxr_millis>
 800d31c:	4607      	mov	r7, r0
 800d31e:	4630      	mov	r0, r6
 800d320:	f7ff fc36 	bl	800cb90 <uxr_flash_output_streams>
 800d324:	2d00      	cmp	r5, #0
 800d326:	f106 0808 	add.w	r8, r6, #8
 800d32a:	bfa8      	it	ge
 800d32c:	462c      	movge	r4, r5
 800d32e:	da07      	bge.n	800d340 <uxr_run_session_until_confirm_delivery+0x30>
 800d330:	e00e      	b.n	800d350 <uxr_run_session_until_confirm_delivery+0x40>
 800d332:	f7ff fe73 	bl	800d01c <listen_message_reliably>
 800d336:	f000 fd1d 	bl	800dd74 <uxr_millis>
 800d33a:	1bc3      	subs	r3, r0, r7
 800d33c:	1aec      	subs	r4, r5, r3
 800d33e:	d407      	bmi.n	800d350 <uxr_run_session_until_confirm_delivery+0x40>
 800d340:	4640      	mov	r0, r8
 800d342:	f000 fcbb 	bl	800dcbc <uxr_output_streams_confirmed>
 800d346:	4603      	mov	r3, r0
 800d348:	4621      	mov	r1, r4
 800d34a:	4630      	mov	r0, r6
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d0f0      	beq.n	800d332 <uxr_run_session_until_confirm_delivery+0x22>
 800d350:	4640      	mov	r0, r8
 800d352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d356:	f000 bcb1 	b.w	800dcbc <uxr_output_streams_confirmed>
 800d35a:	bf00      	nop

0800d35c <uxr_run_session_until_all_status>:
 800d35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d360:	9c08      	ldr	r4, [sp, #32]
 800d362:	4606      	mov	r6, r0
 800d364:	460f      	mov	r7, r1
 800d366:	4691      	mov	r9, r2
 800d368:	461d      	mov	r5, r3
 800d36a:	f7ff fc11 	bl	800cb90 <uxr_flash_output_streams>
 800d36e:	b124      	cbz	r4, 800d37a <uxr_run_session_until_all_status+0x1e>
 800d370:	4622      	mov	r2, r4
 800d372:	21ff      	movs	r1, #255	@ 0xff
 800d374:	4628      	mov	r0, r5
 800d376:	f009 f943 	bl	8016600 <memset>
 800d37a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800d37e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800d380:	f000 fcf8 	bl	800dd74 <uxr_millis>
 800d384:	3d01      	subs	r5, #1
 800d386:	f1a9 0902 	sub.w	r9, r9, #2
 800d38a:	4680      	mov	r8, r0
 800d38c:	4639      	mov	r1, r7
 800d38e:	4630      	mov	r0, r6
 800d390:	f7ff fe44 	bl	800d01c <listen_message_reliably>
 800d394:	f000 fcee 	bl	800dd74 <uxr_millis>
 800d398:	eba0 0008 	sub.w	r0, r0, r8
 800d39c:	1a39      	subs	r1, r7, r0
 800d39e:	b344      	cbz	r4, 800d3f2 <uxr_run_session_until_all_status+0x96>
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	46ac      	mov	ip, r5
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	e002      	b.n	800d3ae <uxr_run_session_until_all_status+0x52>
 800d3a8:	42a3      	cmp	r3, r4
 800d3aa:	d20d      	bcs.n	800d3c8 <uxr_run_session_until_all_status+0x6c>
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800d3b2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800d3b6:	d1f7      	bne.n	800d3a8 <uxr_run_session_until_all_status+0x4c>
 800d3b8:	42a3      	cmp	r3, r4
 800d3ba:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800d3be:	d213      	bcs.n	800d3e8 <uxr_run_session_until_all_status+0x8c>
 800d3c0:	2a00      	cmp	r2, #0
 800d3c2:	d0f3      	beq.n	800d3ac <uxr_run_session_until_all_status+0x50>
 800d3c4:	2900      	cmp	r1, #0
 800d3c6:	dce2      	bgt.n	800d38e <uxr_run_session_until_all_status+0x32>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800d3cc:	442c      	add	r4, r5
 800d3ce:	e001      	b.n	800d3d4 <uxr_run_session_until_all_status+0x78>
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	d812      	bhi.n	800d3fa <uxr_run_session_until_all_status+0x9e>
 800d3d4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d3d8:	4284      	cmp	r4, r0
 800d3da:	d1f9      	bne.n	800d3d0 <uxr_run_session_until_all_status+0x74>
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	bf8c      	ite	hi
 800d3e0:	2000      	movhi	r0, #0
 800d3e2:	2001      	movls	r0, #1
 800d3e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3e8:	2900      	cmp	r1, #0
 800d3ea:	dded      	ble.n	800d3c8 <uxr_run_session_until_all_status+0x6c>
 800d3ec:	2a00      	cmp	r2, #0
 800d3ee:	d1ce      	bne.n	800d38e <uxr_run_session_until_all_status+0x32>
 800d3f0:	e7ea      	b.n	800d3c8 <uxr_run_session_until_all_status+0x6c>
 800d3f2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800d3f4:	2001      	movs	r0, #1
 800d3f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3fa:	2000      	movs	r0, #0
 800d3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d400 <wait_session_status>:
 800d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d404:	4604      	mov	r4, r0
 800d406:	b09d      	sub	sp, #116	@ 0x74
 800d408:	20ff      	movs	r0, #255	@ 0xff
 800d40a:	7160      	strb	r0, [r4, #5]
 800d40c:	9303      	str	r3, [sp, #12]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f000 80b6 	beq.w	800d580 <wait_session_status+0x180>
 800d414:	468a      	mov	sl, r1
 800d416:	4691      	mov	r9, r2
 800d418:	f04f 0b00 	mov.w	fp, #0
 800d41c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d41e:	464a      	mov	r2, r9
 800d420:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d424:	4651      	mov	r1, sl
 800d426:	47a8      	blx	r5
 800d428:	f000 fca4 	bl	800dd74 <uxr_millis>
 800d42c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d430:	4605      	mov	r5, r0
 800d432:	e009      	b.n	800d448 <wait_session_status+0x48>
 800d434:	f000 fc9e 	bl	800dd74 <uxr_millis>
 800d438:	1b40      	subs	r0, r0, r5
 800d43a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d43e:	2b00      	cmp	r3, #0
 800d440:	dd40      	ble.n	800d4c4 <wait_session_status+0xc4>
 800d442:	7960      	ldrb	r0, [r4, #5]
 800d444:	28ff      	cmp	r0, #255	@ 0xff
 800d446:	d145      	bne.n	800d4d4 <wait_session_status+0xd4>
 800d448:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d44a:	a908      	add	r1, sp, #32
 800d44c:	6896      	ldr	r6, [r2, #8]
 800d44e:	6810      	ldr	r0, [r2, #0]
 800d450:	aa09      	add	r2, sp, #36	@ 0x24
 800d452:	47b0      	blx	r6
 800d454:	2800      	cmp	r0, #0
 800d456:	d0ed      	beq.n	800d434 <wait_session_status+0x34>
 800d458:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d45c:	a80c      	add	r0, sp, #48	@ 0x30
 800d45e:	f7fd f8ff 	bl	800a660 <ucdr_init_buffer>
 800d462:	2600      	movs	r6, #0
 800d464:	f10d 031e 	add.w	r3, sp, #30
 800d468:	aa07      	add	r2, sp, #28
 800d46a:	a90c      	add	r1, sp, #48	@ 0x30
 800d46c:	4620      	mov	r0, r4
 800d46e:	f88d 601c 	strb.w	r6, [sp, #28]
 800d472:	f000 fa87 	bl	800d984 <uxr_read_session_header>
 800d476:	2800      	cmp	r0, #0
 800d478:	d0dc      	beq.n	800d434 <wait_session_status+0x34>
 800d47a:	4631      	mov	r1, r6
 800d47c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d480:	f000 fb24 	bl	800dacc <uxr_stream_id_from_raw>
 800d484:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d488:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d48c:	9302      	str	r3, [sp, #8]
 800d48e:	2f01      	cmp	r7, #1
 800d490:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800d494:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d498:	d05c      	beq.n	800d554 <wait_session_status+0x154>
 800d49a:	2f02      	cmp	r7, #2
 800d49c:	d020      	beq.n	800d4e0 <wait_session_status+0xe0>
 800d49e:	2f00      	cmp	r7, #0
 800d4a0:	d1c8      	bne.n	800d434 <wait_session_status+0x34>
 800d4a2:	4639      	mov	r1, r7
 800d4a4:	4638      	mov	r0, r7
 800d4a6:	f000 fb11 	bl	800dacc <uxr_stream_id_from_raw>
 800d4aa:	a90c      	add	r1, sp, #48	@ 0x30
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	f7ff fc2b 	bl	800cd0c <read_submessage_list>
 800d4b6:	f000 fc5d 	bl	800dd74 <uxr_millis>
 800d4ba:	1b40      	subs	r0, r0, r5
 800d4bc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	dcbe      	bgt.n	800d442 <wait_session_status+0x42>
 800d4c4:	9b03      	ldr	r3, [sp, #12]
 800d4c6:	7960      	ldrb	r0, [r4, #5]
 800d4c8:	f10b 0b01 	add.w	fp, fp, #1
 800d4cc:	455b      	cmp	r3, fp
 800d4ce:	d001      	beq.n	800d4d4 <wait_session_status+0xd4>
 800d4d0:	28ff      	cmp	r0, #255	@ 0xff
 800d4d2:	d0a3      	beq.n	800d41c <wait_session_status+0x1c>
 800d4d4:	38ff      	subs	r0, #255	@ 0xff
 800d4d6:	bf18      	it	ne
 800d4d8:	2001      	movne	r0, #1
 800d4da:	b01d      	add	sp, #116	@ 0x74
 800d4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4e0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800d4e4:	9304      	str	r3, [sp, #16]
 800d4e6:	4631      	mov	r1, r6
 800d4e8:	f104 0008 	add.w	r0, r4, #8
 800d4ec:	f000 fbdc 	bl	800dca8 <uxr_get_input_reliable_stream>
 800d4f0:	4680      	mov	r8, r0
 800d4f2:	b348      	cbz	r0, 800d548 <wait_session_status+0x148>
 800d4f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4f6:	9205      	str	r2, [sp, #20]
 800d4f8:	a80c      	add	r0, sp, #48	@ 0x30
 800d4fa:	f7fd f8e1 	bl	800a6c0 <ucdr_buffer_remaining>
 800d4fe:	4603      	mov	r3, r0
 800d500:	f10d 001d 	add.w	r0, sp, #29
 800d504:	9000      	str	r0, [sp, #0]
 800d506:	9a05      	ldr	r2, [sp, #20]
 800d508:	9902      	ldr	r1, [sp, #8]
 800d50a:	4640      	mov	r0, r8
 800d50c:	f006 fdac 	bl	8014068 <uxr_receive_reliable_message>
 800d510:	b1d0      	cbz	r0, 800d548 <wait_session_status+0x148>
 800d512:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d03a      	beq.n	800d590 <wait_session_status+0x190>
 800d51a:	9f04      	ldr	r7, [sp, #16]
 800d51c:	e00a      	b.n	800d534 <wait_session_status+0x134>
 800d51e:	f04f 0302 	mov.w	r3, #2
 800d522:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800d526:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800d52a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800d52e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d530:	f7ff fbec 	bl	800cd0c <read_submessage_list>
 800d534:	a914      	add	r1, sp, #80	@ 0x50
 800d536:	2204      	movs	r2, #4
 800d538:	4640      	mov	r0, r8
 800d53a:	f006 fe15 	bl	8014168 <uxr_next_input_reliable_buffer_available>
 800d53e:	4603      	mov	r3, r0
 800d540:	a914      	add	r1, sp, #80	@ 0x50
 800d542:	4620      	mov	r0, r4
 800d544:	2b00      	cmp	r3, #0
 800d546:	d1ea      	bne.n	800d51e <wait_session_status+0x11e>
 800d548:	9904      	ldr	r1, [sp, #16]
 800d54a:	4632      	mov	r2, r6
 800d54c:	4620      	mov	r0, r4
 800d54e:	f7ff fa59 	bl	800ca04 <write_submessage_acknack.isra.0>
 800d552:	e76f      	b.n	800d434 <wait_session_status+0x34>
 800d554:	4631      	mov	r1, r6
 800d556:	f104 0008 	add.w	r0, r4, #8
 800d55a:	f000 fb9b 	bl	800dc94 <uxr_get_input_best_effort_stream>
 800d55e:	2800      	cmp	r0, #0
 800d560:	f43f af68 	beq.w	800d434 <wait_session_status+0x34>
 800d564:	9902      	ldr	r1, [sp, #8]
 800d566:	f006 fceb 	bl	8013f40 <uxr_receive_best_effort_message>
 800d56a:	2800      	cmp	r0, #0
 800d56c:	f43f af62 	beq.w	800d434 <wait_session_status+0x34>
 800d570:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800d574:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d576:	a90c      	add	r1, sp, #48	@ 0x30
 800d578:	4620      	mov	r0, r4
 800d57a:	f7ff fbc7 	bl	800cd0c <read_submessage_list>
 800d57e:	e759      	b.n	800d434 <wait_session_status+0x34>
 800d580:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d582:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d586:	47a0      	blx	r4
 800d588:	2001      	movs	r0, #1
 800d58a:	b01d      	add	sp, #116	@ 0x74
 800d58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d590:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800d594:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d596:	a90c      	add	r1, sp, #48	@ 0x30
 800d598:	4620      	mov	r0, r4
 800d59a:	f7ff fbb7 	bl	800cd0c <read_submessage_list>
 800d59e:	e7bc      	b.n	800d51a <wait_session_status+0x11a>

0800d5a0 <uxr_delete_session_retries>:
 800d5a0:	b530      	push	{r4, r5, lr}
 800d5a2:	b08f      	sub	sp, #60	@ 0x3c
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	460d      	mov	r5, r1
 800d5a8:	f000 fa2e 	bl	800da08 <uxr_session_header_offset>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	2210      	movs	r2, #16
 800d5b0:	9000      	str	r0, [sp, #0]
 800d5b2:	a902      	add	r1, sp, #8
 800d5b4:	a806      	add	r0, sp, #24
 800d5b6:	f7fd f841 	bl	800a63c <ucdr_init_buffer_origin_offset>
 800d5ba:	a906      	add	r1, sp, #24
 800d5bc:	4620      	mov	r0, r4
 800d5be:	f000 f973 	bl	800d8a8 <uxr_buffer_delete_session>
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	4611      	mov	r1, r2
 800d5c6:	9b06      	ldr	r3, [sp, #24]
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f000 f9c7 	bl	800d95c <uxr_stamp_session_header>
 800d5ce:	a806      	add	r0, sp, #24
 800d5d0:	f7fd f872 	bl	800a6b8 <ucdr_buffer_length>
 800d5d4:	462b      	mov	r3, r5
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	a902      	add	r1, sp, #8
 800d5da:	4620      	mov	r0, r4
 800d5dc:	f7ff ff10 	bl	800d400 <wait_session_status>
 800d5e0:	b118      	cbz	r0, 800d5ea <uxr_delete_session_retries+0x4a>
 800d5e2:	7960      	ldrb	r0, [r4, #5]
 800d5e4:	fab0 f080 	clz	r0, r0
 800d5e8:	0940      	lsrs	r0, r0, #5
 800d5ea:	b00f      	add	sp, #60	@ 0x3c
 800d5ec:	bd30      	pop	{r4, r5, pc}
 800d5ee:	bf00      	nop

0800d5f0 <uxr_create_session>:
 800d5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f4:	f100 0b08 	add.w	fp, r0, #8
 800d5f8:	b0ab      	sub	sp, #172	@ 0xac
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	4658      	mov	r0, fp
 800d5fe:	f000 fa99 	bl	800db34 <uxr_reset_stream_storage>
 800d602:	4620      	mov	r0, r4
 800d604:	f000 fa00 	bl	800da08 <uxr_session_header_offset>
 800d608:	2300      	movs	r3, #0
 800d60a:	9000      	str	r0, [sp, #0]
 800d60c:	221c      	movs	r2, #28
 800d60e:	a90b      	add	r1, sp, #44	@ 0x2c
 800d610:	a812      	add	r0, sp, #72	@ 0x48
 800d612:	f7fd f813 	bl	800a63c <ucdr_init_buffer_origin_offset>
 800d616:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d618:	8a1a      	ldrh	r2, [r3, #16]
 800d61a:	3a04      	subs	r2, #4
 800d61c:	b292      	uxth	r2, r2
 800d61e:	a912      	add	r1, sp, #72	@ 0x48
 800d620:	4620      	mov	r0, r4
 800d622:	f000 f917 	bl	800d854 <uxr_buffer_create_session>
 800d626:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d628:	4620      	mov	r0, r4
 800d62a:	f000 f983 	bl	800d934 <uxr_stamp_create_session_header>
 800d62e:	a812      	add	r0, sp, #72	@ 0x48
 800d630:	f7fd f842 	bl	800a6b8 <ucdr_buffer_length>
 800d634:	23ff      	movs	r3, #255	@ 0xff
 800d636:	7163      	strb	r3, [r4, #5]
 800d638:	230a      	movs	r3, #10
 800d63a:	46da      	mov	sl, fp
 800d63c:	9303      	str	r3, [sp, #12]
 800d63e:	4683      	mov	fp, r0
 800d640:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d642:	465a      	mov	r2, fp
 800d644:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d648:	a90b      	add	r1, sp, #44	@ 0x2c
 800d64a:	47a8      	blx	r5
 800d64c:	f000 fb92 	bl	800dd74 <uxr_millis>
 800d650:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d654:	4605      	mov	r5, r0
 800d656:	e009      	b.n	800d66c <uxr_create_session+0x7c>
 800d658:	f000 fb8c 	bl	800dd74 <uxr_millis>
 800d65c:	1b40      	subs	r0, r0, r5
 800d65e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d662:	2b00      	cmp	r3, #0
 800d664:	7962      	ldrb	r2, [r4, #5]
 800d666:	dd38      	ble.n	800d6da <uxr_create_session+0xea>
 800d668:	2aff      	cmp	r2, #255	@ 0xff
 800d66a:	d13c      	bne.n	800d6e6 <uxr_create_session+0xf6>
 800d66c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d66e:	a907      	add	r1, sp, #28
 800d670:	6896      	ldr	r6, [r2, #8]
 800d672:	6810      	ldr	r0, [r2, #0]
 800d674:	aa08      	add	r2, sp, #32
 800d676:	47b0      	blx	r6
 800d678:	2800      	cmp	r0, #0
 800d67a:	d0ed      	beq.n	800d658 <uxr_create_session+0x68>
 800d67c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d680:	a81a      	add	r0, sp, #104	@ 0x68
 800d682:	f7fc ffed 	bl	800a660 <ucdr_init_buffer>
 800d686:	2600      	movs	r6, #0
 800d688:	f10d 031a 	add.w	r3, sp, #26
 800d68c:	aa06      	add	r2, sp, #24
 800d68e:	a91a      	add	r1, sp, #104	@ 0x68
 800d690:	4620      	mov	r0, r4
 800d692:	f88d 6018 	strb.w	r6, [sp, #24]
 800d696:	f000 f975 	bl	800d984 <uxr_read_session_header>
 800d69a:	2800      	cmp	r0, #0
 800d69c:	d0dc      	beq.n	800d658 <uxr_create_session+0x68>
 800d69e:	4631      	mov	r1, r6
 800d6a0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d6a4:	f000 fa12 	bl	800dacc <uxr_stream_id_from_raw>
 800d6a8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d6ac:	2e01      	cmp	r6, #1
 800d6ae:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d6b2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800d6b6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d6ba:	d053      	beq.n	800d764 <uxr_create_session+0x174>
 800d6bc:	2e02      	cmp	r6, #2
 800d6be:	d018      	beq.n	800d6f2 <uxr_create_session+0x102>
 800d6c0:	2e00      	cmp	r6, #0
 800d6c2:	d1c9      	bne.n	800d658 <uxr_create_session+0x68>
 800d6c4:	4631      	mov	r1, r6
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	f000 fa00 	bl	800dacc <uxr_stream_id_from_raw>
 800d6cc:	a91a      	add	r1, sp, #104	@ 0x68
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	900a      	str	r0, [sp, #40]	@ 0x28
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	f7ff fb1a 	bl	800cd0c <read_submessage_list>
 800d6d8:	e7be      	b.n	800d658 <uxr_create_session+0x68>
 800d6da:	9b03      	ldr	r3, [sp, #12]
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	9303      	str	r3, [sp, #12]
 800d6e0:	d001      	beq.n	800d6e6 <uxr_create_session+0xf6>
 800d6e2:	2aff      	cmp	r2, #255	@ 0xff
 800d6e4:	d0ac      	beq.n	800d640 <uxr_create_session+0x50>
 800d6e6:	2a00      	cmp	r2, #0
 800d6e8:	d051      	beq.n	800d78e <uxr_create_session+0x19e>
 800d6ea:	2000      	movs	r0, #0
 800d6ec:	b02b      	add	sp, #172	@ 0xac
 800d6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6f2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d6f6:	9304      	str	r3, [sp, #16]
 800d6f8:	4639      	mov	r1, r7
 800d6fa:	4650      	mov	r0, sl
 800d6fc:	f000 fad4 	bl	800dca8 <uxr_get_input_reliable_stream>
 800d700:	4680      	mov	r8, r0
 800d702:	b348      	cbz	r0, 800d758 <uxr_create_session+0x168>
 800d704:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d706:	9205      	str	r2, [sp, #20]
 800d708:	a81a      	add	r0, sp, #104	@ 0x68
 800d70a:	f7fc ffd9 	bl	800a6c0 <ucdr_buffer_remaining>
 800d70e:	4603      	mov	r3, r0
 800d710:	f10d 0019 	add.w	r0, sp, #25
 800d714:	9000      	str	r0, [sp, #0]
 800d716:	9a05      	ldr	r2, [sp, #20]
 800d718:	4649      	mov	r1, r9
 800d71a:	4640      	mov	r0, r8
 800d71c:	f006 fca4 	bl	8014068 <uxr_receive_reliable_message>
 800d720:	b1d0      	cbz	r0, 800d758 <uxr_create_session+0x168>
 800d722:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d038      	beq.n	800d79c <uxr_create_session+0x1ac>
 800d72a:	9e04      	ldr	r6, [sp, #16]
 800d72c:	e00a      	b.n	800d744 <uxr_create_session+0x154>
 800d72e:	f04f 0302 	mov.w	r3, #2
 800d732:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800d736:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800d73a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d73e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d740:	f7ff fae4 	bl	800cd0c <read_submessage_list>
 800d744:	a922      	add	r1, sp, #136	@ 0x88
 800d746:	2204      	movs	r2, #4
 800d748:	4640      	mov	r0, r8
 800d74a:	f006 fd0d 	bl	8014168 <uxr_next_input_reliable_buffer_available>
 800d74e:	4603      	mov	r3, r0
 800d750:	a922      	add	r1, sp, #136	@ 0x88
 800d752:	4620      	mov	r0, r4
 800d754:	2b00      	cmp	r3, #0
 800d756:	d1ea      	bne.n	800d72e <uxr_create_session+0x13e>
 800d758:	9904      	ldr	r1, [sp, #16]
 800d75a:	463a      	mov	r2, r7
 800d75c:	4620      	mov	r0, r4
 800d75e:	f7ff f951 	bl	800ca04 <write_submessage_acknack.isra.0>
 800d762:	e779      	b.n	800d658 <uxr_create_session+0x68>
 800d764:	4639      	mov	r1, r7
 800d766:	4650      	mov	r0, sl
 800d768:	f000 fa94 	bl	800dc94 <uxr_get_input_best_effort_stream>
 800d76c:	2800      	cmp	r0, #0
 800d76e:	f43f af73 	beq.w	800d658 <uxr_create_session+0x68>
 800d772:	4649      	mov	r1, r9
 800d774:	f006 fbe4 	bl	8013f40 <uxr_receive_best_effort_message>
 800d778:	2800      	cmp	r0, #0
 800d77a:	f43f af6d 	beq.w	800d658 <uxr_create_session+0x68>
 800d77e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800d782:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d784:	a91a      	add	r1, sp, #104	@ 0x68
 800d786:	4620      	mov	r0, r4
 800d788:	f7ff fac0 	bl	800cd0c <read_submessage_list>
 800d78c:	e764      	b.n	800d658 <uxr_create_session+0x68>
 800d78e:	4650      	mov	r0, sl
 800d790:	f000 f9d0 	bl	800db34 <uxr_reset_stream_storage>
 800d794:	2001      	movs	r0, #1
 800d796:	b02b      	add	sp, #172	@ 0xac
 800d798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d79c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800d7a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d7a2:	a91a      	add	r1, sp, #104	@ 0x68
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f7ff fab1 	bl	800cd0c <read_submessage_list>
 800d7aa:	e7be      	b.n	800d72a <uxr_create_session+0x13a>

0800d7ac <uxr_prepare_stream_to_write_submessage>:
 800d7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b0:	b082      	sub	sp, #8
 800d7b2:	4682      	mov	sl, r0
 800d7b4:	4610      	mov	r0, r2
 800d7b6:	4615      	mov	r5, r2
 800d7b8:	461e      	mov	r6, r3
 800d7ba:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800d7be:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800d7c2:	9101      	str	r1, [sp, #4]
 800d7c4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d7c8:	f000 face 	bl	800dd68 <uxr_submessage_padding>
 800d7cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d7d0:	f105 0904 	add.w	r9, r5, #4
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	4481      	add	r9, r0
 800d7d8:	d01d      	beq.n	800d816 <uxr_prepare_stream_to_write_submessage+0x6a>
 800d7da:	2b02      	cmp	r3, #2
 800d7dc:	d116      	bne.n	800d80c <uxr_prepare_stream_to_write_submessage+0x60>
 800d7de:	4621      	mov	r1, r4
 800d7e0:	f10a 0008 	add.w	r0, sl, #8
 800d7e4:	f000 fa4c 	bl	800dc80 <uxr_get_output_reliable_stream>
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	b158      	cbz	r0, 800d804 <uxr_prepare_stream_to_write_submessage+0x58>
 800d7ec:	4649      	mov	r1, r9
 800d7ee:	4632      	mov	r2, r6
 800d7f0:	f006 fe76 	bl	80144e0 <uxr_prepare_reliable_buffer_to_write>
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	b12c      	cbz	r4, 800d804 <uxr_prepare_stream_to_write_submessage+0x58>
 800d7f8:	4643      	mov	r3, r8
 800d7fa:	b2aa      	uxth	r2, r5
 800d7fc:	4639      	mov	r1, r7
 800d7fe:	4630      	mov	r0, r6
 800d800:	f000 fa72 	bl	800dce8 <uxr_buffer_submessage_header>
 800d804:	4620      	mov	r0, r4
 800d806:	b002      	add	sp, #8
 800d808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d80c:	2400      	movs	r4, #0
 800d80e:	4620      	mov	r0, r4
 800d810:	b002      	add	sp, #8
 800d812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d816:	4621      	mov	r1, r4
 800d818:	f10a 0008 	add.w	r0, sl, #8
 800d81c:	f000 fa28 	bl	800dc70 <uxr_get_output_best_effort_stream>
 800d820:	4604      	mov	r4, r0
 800d822:	2800      	cmp	r0, #0
 800d824:	d0ee      	beq.n	800d804 <uxr_prepare_stream_to_write_submessage+0x58>
 800d826:	4649      	mov	r1, r9
 800d828:	4632      	mov	r2, r6
 800d82a:	f006 fd89 	bl	8014340 <uxr_prepare_best_effort_buffer_to_write>
 800d82e:	4604      	mov	r4, r0
 800d830:	e7e1      	b.n	800d7f6 <uxr_prepare_stream_to_write_submessage+0x4a>
 800d832:	bf00      	nop

0800d834 <uxr_init_session_info>:
 800d834:	0e13      	lsrs	r3, r2, #24
 800d836:	7043      	strb	r3, [r0, #1]
 800d838:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d83c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d840:	7001      	strb	r1, [r0, #0]
 800d842:	70c3      	strb	r3, [r0, #3]
 800d844:	2109      	movs	r1, #9
 800d846:	23ff      	movs	r3, #255	@ 0xff
 800d848:	f880 c002 	strb.w	ip, [r0, #2]
 800d84c:	7102      	strb	r2, [r0, #4]
 800d84e:	80c1      	strh	r1, [r0, #6]
 800d850:	7143      	strb	r3, [r0, #5]
 800d852:	4770      	bx	lr

0800d854 <uxr_buffer_create_session>:
 800d854:	b530      	push	{r4, r5, lr}
 800d856:	b089      	sub	sp, #36	@ 0x24
 800d858:	2300      	movs	r3, #0
 800d85a:	4d12      	ldr	r5, [pc, #72]	@ (800d8a4 <uxr_buffer_create_session+0x50>)
 800d85c:	9307      	str	r3, [sp, #28]
 800d85e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d862:	2201      	movs	r2, #1
 800d864:	9301      	str	r3, [sp, #4]
 800d866:	80c2      	strh	r2, [r0, #6]
 800d868:	f88d 2004 	strb.w	r2, [sp, #4]
 800d86c:	682a      	ldr	r2, [r5, #0]
 800d86e:	9200      	str	r2, [sp, #0]
 800d870:	88aa      	ldrh	r2, [r5, #4]
 800d872:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d876:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800d87a:	9202      	str	r2, [sp, #8]
 800d87c:	460c      	mov	r4, r1
 800d87e:	7802      	ldrb	r2, [r0, #0]
 800d880:	9303      	str	r3, [sp, #12]
 800d882:	4619      	mov	r1, r3
 800d884:	f88d 200c 	strb.w	r2, [sp, #12]
 800d888:	4620      	mov	r0, r4
 800d88a:	2210      	movs	r2, #16
 800d88c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800d890:	9306      	str	r3, [sp, #24]
 800d892:	f000 fa29 	bl	800dce8 <uxr_buffer_submessage_header>
 800d896:	4669      	mov	r1, sp
 800d898:	4620      	mov	r0, r4
 800d89a:	f001 fa6d 	bl	800ed78 <uxr_serialize_CREATE_CLIENT_Payload>
 800d89e:	b009      	add	sp, #36	@ 0x24
 800d8a0:	bd30      	pop	{r4, r5, pc}
 800d8a2:	bf00      	nop
 800d8a4:	080175f4 	.word	0x080175f4

0800d8a8 <uxr_buffer_delete_session>:
 800d8a8:	b510      	push	{r4, lr}
 800d8aa:	4b0c      	ldr	r3, [pc, #48]	@ (800d8dc <uxr_buffer_delete_session+0x34>)
 800d8ac:	b082      	sub	sp, #8
 800d8ae:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800d8b2:	f8ad c006 	strh.w	ip, [sp, #6]
 800d8b6:	460c      	mov	r4, r1
 800d8b8:	2202      	movs	r2, #2
 800d8ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d8be:	80c2      	strh	r2, [r0, #6]
 800d8c0:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d8c4:	2204      	movs	r2, #4
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	2103      	movs	r1, #3
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	f000 fa0c 	bl	800dce8 <uxr_buffer_submessage_header>
 800d8d0:	a901      	add	r1, sp, #4
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f001 faf6 	bl	800eec4 <uxr_serialize_DELETE_Payload>
 800d8d8:	b002      	add	sp, #8
 800d8da:	bd10      	pop	{r4, pc}
 800d8dc:	080175f4 	.word	0x080175f4

0800d8e0 <uxr_read_create_session_status>:
 800d8e0:	b510      	push	{r4, lr}
 800d8e2:	b088      	sub	sp, #32
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	4608      	mov	r0, r1
 800d8e8:	a901      	add	r1, sp, #4
 800d8ea:	f001 fafb 	bl	800eee4 <uxr_deserialize_STATUS_AGENT_Payload>
 800d8ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d8f2:	7163      	strb	r3, [r4, #5]
 800d8f4:	b008      	add	sp, #32
 800d8f6:	bd10      	pop	{r4, pc}

0800d8f8 <uxr_read_delete_session_status>:
 800d8f8:	b510      	push	{r4, lr}
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	b084      	sub	sp, #16
 800d8fe:	4608      	mov	r0, r1
 800d900:	a902      	add	r1, sp, #8
 800d902:	f001 fb1f 	bl	800ef44 <uxr_deserialize_STATUS_Payload>
 800d906:	88e3      	ldrh	r3, [r4, #6]
 800d908:	2b02      	cmp	r3, #2
 800d90a:	d001      	beq.n	800d910 <uxr_read_delete_session_status+0x18>
 800d90c:	b004      	add	sp, #16
 800d90e:	bd10      	pop	{r4, pc}
 800d910:	f10d 000a 	add.w	r0, sp, #10
 800d914:	f7fe fffc 	bl	800c910 <uxr_object_id_from_raw>
 800d918:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800d91c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800d920:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d924:	b29b      	uxth	r3, r3
 800d926:	2b02      	cmp	r3, #2
 800d928:	bf04      	itt	eq
 800d92a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800d92e:	7163      	strbeq	r3, [r4, #5]
 800d930:	b004      	add	sp, #16
 800d932:	bd10      	pop	{r4, pc}

0800d934 <uxr_stamp_create_session_header>:
 800d934:	b510      	push	{r4, lr}
 800d936:	2208      	movs	r2, #8
 800d938:	b08a      	sub	sp, #40	@ 0x28
 800d93a:	4604      	mov	r4, r0
 800d93c:	eb0d 0002 	add.w	r0, sp, r2
 800d940:	f7fc fe8e 	bl	800a660 <ucdr_init_buffer>
 800d944:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d948:	9400      	str	r4, [sp, #0]
 800d94a:	2300      	movs	r3, #0
 800d94c:	461a      	mov	r2, r3
 800d94e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800d952:	a802      	add	r0, sp, #8
 800d954:	f000 fbc2 	bl	800e0dc <uxr_serialize_message_header>
 800d958:	b00a      	add	sp, #40	@ 0x28
 800d95a:	bd10      	pop	{r4, pc}

0800d95c <uxr_stamp_session_header>:
 800d95c:	b530      	push	{r4, r5, lr}
 800d95e:	b08d      	sub	sp, #52	@ 0x34
 800d960:	4604      	mov	r4, r0
 800d962:	460d      	mov	r5, r1
 800d964:	9203      	str	r2, [sp, #12]
 800d966:	4619      	mov	r1, r3
 800d968:	a804      	add	r0, sp, #16
 800d96a:	2208      	movs	r2, #8
 800d96c:	f7fc fe78 	bl	800a660 <ucdr_init_buffer>
 800d970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d974:	9b03      	ldr	r3, [sp, #12]
 800d976:	9400      	str	r4, [sp, #0]
 800d978:	462a      	mov	r2, r5
 800d97a:	a804      	add	r0, sp, #16
 800d97c:	f000 fbae 	bl	800e0dc <uxr_serialize_message_header>
 800d980:	b00d      	add	sp, #52	@ 0x34
 800d982:	bd30      	pop	{r4, r5, pc}

0800d984 <uxr_read_session_header>:
 800d984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d988:	4607      	mov	r7, r0
 800d98a:	b084      	sub	sp, #16
 800d98c:	4608      	mov	r0, r1
 800d98e:	460c      	mov	r4, r1
 800d990:	4615      	mov	r5, r2
 800d992:	461e      	mov	r6, r3
 800d994:	f7fc fe94 	bl	800a6c0 <ucdr_buffer_remaining>
 800d998:	2808      	cmp	r0, #8
 800d99a:	d803      	bhi.n	800d9a4 <uxr_read_session_header+0x20>
 800d99c:	2000      	movs	r0, #0
 800d99e:	b004      	add	sp, #16
 800d9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9a4:	f10d 080c 	add.w	r8, sp, #12
 800d9a8:	4633      	mov	r3, r6
 800d9aa:	462a      	mov	r2, r5
 800d9ac:	f8cd 8000 	str.w	r8, [sp]
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	f10d 010b 	add.w	r1, sp, #11
 800d9b6:	f000 fbaf 	bl	800e118 <uxr_deserialize_message_header>
 800d9ba:	783a      	ldrb	r2, [r7, #0]
 800d9bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d1eb      	bne.n	800d99c <uxr_read_session_header+0x18>
 800d9c4:	061b      	lsls	r3, r3, #24
 800d9c6:	d41c      	bmi.n	800da02 <uxr_read_session_header+0x7e>
 800d9c8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800d9cc:	787b      	ldrb	r3, [r7, #1]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d003      	beq.n	800d9da <uxr_read_session_header+0x56>
 800d9d2:	2001      	movs	r0, #1
 800d9d4:	f080 0001 	eor.w	r0, r0, #1
 800d9d8:	e7e1      	b.n	800d99e <uxr_read_session_header+0x1a>
 800d9da:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800d9de:	78bb      	ldrb	r3, [r7, #2]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	f107 0102 	add.w	r1, r7, #2
 800d9e6:	d1f4      	bne.n	800d9d2 <uxr_read_session_header+0x4e>
 800d9e8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800d9ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d1ee      	bne.n	800d9d2 <uxr_read_session_header+0x4e>
 800d9f4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800d9f8:	784b      	ldrb	r3, [r1, #1]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d1e9      	bne.n	800d9d2 <uxr_read_session_header+0x4e>
 800d9fe:	2000      	movs	r0, #0
 800da00:	e7e8      	b.n	800d9d4 <uxr_read_session_header+0x50>
 800da02:	2001      	movs	r0, #1
 800da04:	e7cb      	b.n	800d99e <uxr_read_session_header+0x1a>
 800da06:	bf00      	nop

0800da08 <uxr_session_header_offset>:
 800da08:	f990 3000 	ldrsb.w	r3, [r0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	bfac      	ite	ge
 800da10:	2008      	movge	r0, #8
 800da12:	2004      	movlt	r0, #4
 800da14:	4770      	bx	lr
 800da16:	bf00      	nop

0800da18 <uxr_init_base_object_request>:
 800da18:	b510      	push	{r4, lr}
 800da1a:	88c3      	ldrh	r3, [r0, #6]
 800da1c:	b082      	sub	sp, #8
 800da1e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800da22:	9101      	str	r1, [sp, #4]
 800da24:	f1a3 010a 	sub.w	r1, r3, #10
 800da28:	b289      	uxth	r1, r1
 800da2a:	42a1      	cmp	r1, r4
 800da2c:	d80e      	bhi.n	800da4c <uxr_init_base_object_request+0x34>
 800da2e:	3301      	adds	r3, #1
 800da30:	b29c      	uxth	r4, r3
 800da32:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800da36:	b2db      	uxtb	r3, r3
 800da38:	80c4      	strh	r4, [r0, #6]
 800da3a:	9801      	ldr	r0, [sp, #4]
 800da3c:	7011      	strb	r1, [r2, #0]
 800da3e:	7053      	strb	r3, [r2, #1]
 800da40:	1c91      	adds	r1, r2, #2
 800da42:	f7fe ff79 	bl	800c938 <uxr_object_id_to_raw>
 800da46:	4620      	mov	r0, r4
 800da48:	b002      	add	sp, #8
 800da4a:	bd10      	pop	{r4, pc}
 800da4c:	230a      	movs	r3, #10
 800da4e:	2100      	movs	r1, #0
 800da50:	461c      	mov	r4, r3
 800da52:	e7f1      	b.n	800da38 <uxr_init_base_object_request+0x20>

0800da54 <uxr_parse_base_object_request>:
 800da54:	b570      	push	{r4, r5, r6, lr}
 800da56:	4604      	mov	r4, r0
 800da58:	3002      	adds	r0, #2
 800da5a:	460d      	mov	r5, r1
 800da5c:	4616      	mov	r6, r2
 800da5e:	f7fe ff57 	bl	800c910 <uxr_object_id_from_raw>
 800da62:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800da66:	8028      	strh	r0, [r5, #0]
 800da68:	806b      	strh	r3, [r5, #2]
 800da6a:	7822      	ldrb	r2, [r4, #0]
 800da6c:	7863      	ldrb	r3, [r4, #1]
 800da6e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800da72:	8033      	strh	r3, [r6, #0]
 800da74:	bd70      	pop	{r4, r5, r6, pc}
 800da76:	bf00      	nop

0800da78 <uxr_stream_id>:
 800da78:	2901      	cmp	r1, #1
 800da7a:	b082      	sub	sp, #8
 800da7c:	d01d      	beq.n	800daba <uxr_stream_id+0x42>
 800da7e:	2902      	cmp	r1, #2
 800da80:	f04f 0c00 	mov.w	ip, #0
 800da84:	d01e      	beq.n	800dac4 <uxr_stream_id+0x4c>
 800da86:	2300      	movs	r3, #0
 800da88:	f36c 0307 	bfi	r3, ip, #0, #8
 800da8c:	f360 230f 	bfi	r3, r0, #8, #8
 800da90:	f361 4317 	bfi	r3, r1, #16, #8
 800da94:	f362 631f 	bfi	r3, r2, #24, #8
 800da98:	b2da      	uxtb	r2, r3
 800da9a:	2000      	movs	r0, #0
 800da9c:	f362 0007 	bfi	r0, r2, #0, #8
 800daa0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800daa4:	f362 200f 	bfi	r0, r2, #8, #8
 800daa8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800daac:	f362 4017 	bfi	r0, r2, #16, #8
 800dab0:	0e1b      	lsrs	r3, r3, #24
 800dab2:	f363 601f 	bfi	r0, r3, #24, #8
 800dab6:	b002      	add	sp, #8
 800dab8:	4770      	bx	lr
 800daba:	f100 0c01 	add.w	ip, r0, #1
 800dabe:	fa5f fc8c 	uxtb.w	ip, ip
 800dac2:	e7e0      	b.n	800da86 <uxr_stream_id+0xe>
 800dac4:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800dac8:	e7dd      	b.n	800da86 <uxr_stream_id+0xe>
 800daca:	bf00      	nop

0800dacc <uxr_stream_id_from_raw>:
 800dacc:	b082      	sub	sp, #8
 800dace:	b130      	cbz	r0, 800dade <uxr_stream_id_from_raw+0x12>
 800dad0:	0603      	lsls	r3, r0, #24
 800dad2:	d420      	bmi.n	800db16 <uxr_stream_id_from_raw+0x4a>
 800dad4:	1e42      	subs	r2, r0, #1
 800dad6:	b2d2      	uxtb	r2, r2
 800dad8:	f04f 0c01 	mov.w	ip, #1
 800dadc:	e001      	b.n	800dae2 <uxr_stream_id_from_raw+0x16>
 800dade:	4684      	mov	ip, r0
 800dae0:	4602      	mov	r2, r0
 800dae2:	2300      	movs	r3, #0
 800dae4:	f360 0307 	bfi	r3, r0, #0, #8
 800dae8:	f362 230f 	bfi	r3, r2, #8, #8
 800daec:	f36c 4317 	bfi	r3, ip, #16, #8
 800daf0:	f361 631f 	bfi	r3, r1, #24, #8
 800daf4:	b2da      	uxtb	r2, r3
 800daf6:	2000      	movs	r0, #0
 800daf8:	f362 0007 	bfi	r0, r2, #0, #8
 800dafc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800db00:	f362 200f 	bfi	r0, r2, #8, #8
 800db04:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800db08:	f362 4017 	bfi	r0, r2, #16, #8
 800db0c:	0e1b      	lsrs	r3, r3, #24
 800db0e:	f363 601f 	bfi	r0, r3, #24, #8
 800db12:	b002      	add	sp, #8
 800db14:	4770      	bx	lr
 800db16:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800db1a:	f04f 0c02 	mov.w	ip, #2
 800db1e:	e7e0      	b.n	800dae2 <uxr_stream_id_from_raw+0x16>

0800db20 <uxr_init_stream_storage>:
 800db20:	2300      	movs	r3, #0
 800db22:	7403      	strb	r3, [r0, #16]
 800db24:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800db28:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800db2c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop

0800db34 <uxr_reset_stream_storage>:
 800db34:	b570      	push	{r4, r5, r6, lr}
 800db36:	7c03      	ldrb	r3, [r0, #16]
 800db38:	4604      	mov	r4, r0
 800db3a:	b153      	cbz	r3, 800db52 <uxr_reset_stream_storage+0x1e>
 800db3c:	4606      	mov	r6, r0
 800db3e:	2500      	movs	r5, #0
 800db40:	4630      	mov	r0, r6
 800db42:	f006 fbf7 	bl	8014334 <uxr_reset_output_best_effort_stream>
 800db46:	7c23      	ldrb	r3, [r4, #16]
 800db48:	3501      	adds	r5, #1
 800db4a:	42ab      	cmp	r3, r5
 800db4c:	f106 0610 	add.w	r6, r6, #16
 800db50:	d8f6      	bhi.n	800db40 <uxr_reset_stream_storage+0xc>
 800db52:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800db56:	b163      	cbz	r3, 800db72 <uxr_reset_stream_storage+0x3e>
 800db58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db5c:	2500      	movs	r5, #0
 800db5e:	4630      	mov	r0, r6
 800db60:	f006 f9ea 	bl	8013f38 <uxr_reset_input_best_effort_stream>
 800db64:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800db68:	3501      	adds	r5, #1
 800db6a:	42ab      	cmp	r3, r5
 800db6c:	f106 0602 	add.w	r6, r6, #2
 800db70:	d8f5      	bhi.n	800db5e <uxr_reset_stream_storage+0x2a>
 800db72:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800db76:	b163      	cbz	r3, 800db92 <uxr_reset_stream_storage+0x5e>
 800db78:	f104 0618 	add.w	r6, r4, #24
 800db7c:	2500      	movs	r5, #0
 800db7e:	4630      	mov	r0, r6
 800db80:	f006 fc84 	bl	801448c <uxr_reset_output_reliable_stream>
 800db84:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800db88:	3501      	adds	r5, #1
 800db8a:	42ab      	cmp	r3, r5
 800db8c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800db90:	d8f5      	bhi.n	800db7e <uxr_reset_stream_storage+0x4a>
 800db92:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800db96:	b163      	cbz	r3, 800dbb2 <uxr_reset_stream_storage+0x7e>
 800db98:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800db9c:	2500      	movs	r5, #0
 800db9e:	4630      	mov	r0, r6
 800dba0:	f006 fa3e 	bl	8014020 <uxr_reset_input_reliable_stream>
 800dba4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800dba8:	3501      	adds	r5, #1
 800dbaa:	42ab      	cmp	r3, r5
 800dbac:	f106 0618 	add.w	r6, r6, #24
 800dbb0:	d8f5      	bhi.n	800db9e <uxr_reset_stream_storage+0x6a>
 800dbb2:	bd70      	pop	{r4, r5, r6, pc}

0800dbb4 <uxr_add_output_best_effort_buffer>:
 800dbb4:	b510      	push	{r4, lr}
 800dbb6:	7c04      	ldrb	r4, [r0, #16]
 800dbb8:	f104 0c01 	add.w	ip, r4, #1
 800dbbc:	b082      	sub	sp, #8
 800dbbe:	f880 c010 	strb.w	ip, [r0, #16]
 800dbc2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800dbc6:	f006 fbab 	bl	8014320 <uxr_init_output_best_effort_stream>
 800dbca:	2201      	movs	r2, #1
 800dbcc:	4611      	mov	r1, r2
 800dbce:	4620      	mov	r0, r4
 800dbd0:	b002      	add	sp, #8
 800dbd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbd6:	f7ff bf4f 	b.w	800da78 <uxr_stream_id>
 800dbda:	bf00      	nop

0800dbdc <uxr_add_output_reliable_buffer>:
 800dbdc:	b510      	push	{r4, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	4684      	mov	ip, r0
 800dbe2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800dbe6:	9000      	str	r0, [sp, #0]
 800dbe8:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800dbec:	2028      	movs	r0, #40	@ 0x28
 800dbee:	fb00 c004 	mla	r0, r0, r4, ip
 800dbf2:	f104 0e01 	add.w	lr, r4, #1
 800dbf6:	3018      	adds	r0, #24
 800dbf8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800dbfc:	f006 fc0e 	bl	801441c <uxr_init_output_reliable_stream>
 800dc00:	2201      	movs	r2, #1
 800dc02:	2102      	movs	r1, #2
 800dc04:	4620      	mov	r0, r4
 800dc06:	b004      	add	sp, #16
 800dc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc0c:	f7ff bf34 	b.w	800da78 <uxr_stream_id>

0800dc10 <uxr_add_input_best_effort_buffer>:
 800dc10:	b510      	push	{r4, lr}
 800dc12:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800dc16:	4603      	mov	r3, r0
 800dc18:	1c62      	adds	r2, r4, #1
 800dc1a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800dc1e:	b082      	sub	sp, #8
 800dc20:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800dc24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc28:	f006 f982 	bl	8013f30 <uxr_init_input_best_effort_stream>
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	2101      	movs	r1, #1
 800dc30:	4620      	mov	r0, r4
 800dc32:	b002      	add	sp, #8
 800dc34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc38:	f7ff bf1e 	b.w	800da78 <uxr_stream_id>

0800dc3c <uxr_add_input_reliable_buffer>:
 800dc3c:	b510      	push	{r4, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	4684      	mov	ip, r0
 800dc42:	9806      	ldr	r0, [sp, #24]
 800dc44:	9000      	str	r0, [sp, #0]
 800dc46:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800dc4a:	2018      	movs	r0, #24
 800dc4c:	fb00 c004 	mla	r0, r0, r4, ip
 800dc50:	f104 0e01 	add.w	lr, r4, #1
 800dc54:	3048      	adds	r0, #72	@ 0x48
 800dc56:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800dc5a:	f006 f9b5 	bl	8013fc8 <uxr_init_input_reliable_stream>
 800dc5e:	2200      	movs	r2, #0
 800dc60:	2102      	movs	r1, #2
 800dc62:	4620      	mov	r0, r4
 800dc64:	b004      	add	sp, #16
 800dc66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc6a:	f7ff bf05 	b.w	800da78 <uxr_stream_id>
 800dc6e:	bf00      	nop

0800dc70 <uxr_get_output_best_effort_stream>:
 800dc70:	7c03      	ldrb	r3, [r0, #16]
 800dc72:	428b      	cmp	r3, r1
 800dc74:	bf8c      	ite	hi
 800dc76:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800dc7a:	2000      	movls	r0, #0
 800dc7c:	4770      	bx	lr
 800dc7e:	bf00      	nop

0800dc80 <uxr_get_output_reliable_stream>:
 800dc80:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800dc84:	428b      	cmp	r3, r1
 800dc86:	bf83      	ittte	hi
 800dc88:	2328      	movhi	r3, #40	@ 0x28
 800dc8a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800dc8e:	3018      	addhi	r0, #24
 800dc90:	2000      	movls	r0, #0
 800dc92:	4770      	bx	lr

0800dc94 <uxr_get_input_best_effort_stream>:
 800dc94:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800dc98:	428b      	cmp	r3, r1
 800dc9a:	bf86      	itte	hi
 800dc9c:	3121      	addhi	r1, #33	@ 0x21
 800dc9e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800dca2:	2000      	movls	r0, #0
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop

0800dca8 <uxr_get_input_reliable_stream>:
 800dca8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800dcac:	428b      	cmp	r3, r1
 800dcae:	bf83      	ittte	hi
 800dcb0:	2318      	movhi	r3, #24
 800dcb2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800dcb6:	3048      	addhi	r0, #72	@ 0x48
 800dcb8:	2000      	movls	r0, #0
 800dcba:	4770      	bx	lr

0800dcbc <uxr_output_streams_confirmed>:
 800dcbc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800dcc0:	b183      	cbz	r3, 800dce4 <uxr_output_streams_confirmed+0x28>
 800dcc2:	b570      	push	{r4, r5, r6, lr}
 800dcc4:	4606      	mov	r6, r0
 800dcc6:	f100 0518 	add.w	r5, r0, #24
 800dcca:	2400      	movs	r4, #0
 800dccc:	e001      	b.n	800dcd2 <uxr_output_streams_confirmed+0x16>
 800dcce:	3528      	adds	r5, #40	@ 0x28
 800dcd0:	b138      	cbz	r0, 800dce2 <uxr_output_streams_confirmed+0x26>
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	f006 fe4a 	bl	801496c <uxr_is_output_up_to_date>
 800dcd8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800dcdc:	3401      	adds	r4, #1
 800dcde:	42a3      	cmp	r3, r4
 800dce0:	d8f5      	bhi.n	800dcce <uxr_output_streams_confirmed+0x12>
 800dce2:	bd70      	pop	{r4, r5, r6, pc}
 800dce4:	2001      	movs	r0, #1
 800dce6:	4770      	bx	lr

0800dce8 <uxr_buffer_submessage_header>:
 800dce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcea:	4604      	mov	r4, r0
 800dcec:	460e      	mov	r6, r1
 800dcee:	2104      	movs	r1, #4
 800dcf0:	4615      	mov	r5, r2
 800dcf2:	461f      	mov	r7, r3
 800dcf4:	f7fc fcce 	bl	800a694 <ucdr_align_to>
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	ea47 0203 	orr.w	r2, r7, r3
 800dcfe:	4631      	mov	r1, r6
 800dd00:	7523      	strb	r3, [r4, #20]
 800dd02:	4620      	mov	r0, r4
 800dd04:	462b      	mov	r3, r5
 800dd06:	f000 fa27 	bl	800e158 <uxr_serialize_submessage_header>
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f7fc fcd8 	bl	800a6c0 <ucdr_buffer_remaining>
 800dd10:	42a8      	cmp	r0, r5
 800dd12:	bf34      	ite	cc
 800dd14:	2000      	movcc	r0, #0
 800dd16:	2001      	movcs	r0, #1
 800dd18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd1a:	bf00      	nop

0800dd1c <uxr_read_submessage_header>:
 800dd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd20:	4604      	mov	r4, r0
 800dd22:	460d      	mov	r5, r1
 800dd24:	2104      	movs	r1, #4
 800dd26:	4616      	mov	r6, r2
 800dd28:	4698      	mov	r8, r3
 800dd2a:	f7fc fcb3 	bl	800a694 <ucdr_align_to>
 800dd2e:	4620      	mov	r0, r4
 800dd30:	f7fc fcc6 	bl	800a6c0 <ucdr_buffer_remaining>
 800dd34:	2803      	cmp	r0, #3
 800dd36:	bf8c      	ite	hi
 800dd38:	2701      	movhi	r7, #1
 800dd3a:	2700      	movls	r7, #0
 800dd3c:	d802      	bhi.n	800dd44 <uxr_read_submessage_header+0x28>
 800dd3e:	4638      	mov	r0, r7
 800dd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd44:	4633      	mov	r3, r6
 800dd46:	4642      	mov	r2, r8
 800dd48:	4620      	mov	r0, r4
 800dd4a:	4629      	mov	r1, r5
 800dd4c:	f000 fa18 	bl	800e180 <uxr_deserialize_submessage_header>
 800dd50:	f898 3000 	ldrb.w	r3, [r8]
 800dd54:	f003 0201 	and.w	r2, r3, #1
 800dd58:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800dd5c:	f888 3000 	strb.w	r3, [r8]
 800dd60:	7522      	strb	r2, [r4, #20]
 800dd62:	4638      	mov	r0, r7
 800dd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dd68 <uxr_submessage_padding>:
 800dd68:	f010 0003 	ands.w	r0, r0, #3
 800dd6c:	bf18      	it	ne
 800dd6e:	f1c0 0004 	rsbne	r0, r0, #4
 800dd72:	4770      	bx	lr

0800dd74 <uxr_millis>:
 800dd74:	b510      	push	{r4, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	4669      	mov	r1, sp
 800dd7a:	2001      	movs	r0, #1
 800dd7c:	f7f4 f9f8 	bl	8002170 <clock_gettime>
 800dd80:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800dd84:	4906      	ldr	r1, [pc, #24]	@ (800dda0 <uxr_millis+0x2c>)
 800dd86:	fba0 0301 	umull	r0, r3, r0, r1
 800dd8a:	1900      	adds	r0, r0, r4
 800dd8c:	fb01 3102 	mla	r1, r1, r2, r3
 800dd90:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800dd94:	4a03      	ldr	r2, [pc, #12]	@ (800dda4 <uxr_millis+0x30>)
 800dd96:	2300      	movs	r3, #0
 800dd98:	f7f2 ff28 	bl	8000bec <__aeabi_ldivmod>
 800dd9c:	b004      	add	sp, #16
 800dd9e:	bd10      	pop	{r4, pc}
 800dda0:	3b9aca00 	.word	0x3b9aca00
 800dda4:	000f4240 	.word	0x000f4240

0800dda8 <uxr_nanos>:
 800dda8:	b510      	push	{r4, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	4669      	mov	r1, sp
 800ddae:	2001      	movs	r0, #1
 800ddb0:	f7f4 f9de 	bl	8002170 <clock_gettime>
 800ddb4:	4a06      	ldr	r2, [pc, #24]	@ (800ddd0 <uxr_nanos+0x28>)
 800ddb6:	9800      	ldr	r0, [sp, #0]
 800ddb8:	9902      	ldr	r1, [sp, #8]
 800ddba:	9c01      	ldr	r4, [sp, #4]
 800ddbc:	fba0 0302 	umull	r0, r3, r0, r2
 800ddc0:	1840      	adds	r0, r0, r1
 800ddc2:	fb02 3304 	mla	r3, r2, r4, r3
 800ddc6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800ddca:	b004      	add	sp, #16
 800ddcc:	bd10      	pop	{r4, pc}
 800ddce:	bf00      	nop
 800ddd0:	3b9aca00 	.word	0x3b9aca00

0800ddd4 <on_full_output_buffer_fragmented>:
 800ddd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd8:	460c      	mov	r4, r1
 800ddda:	b08a      	sub	sp, #40	@ 0x28
 800dddc:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800dde0:	4606      	mov	r6, r0
 800dde2:	f104 0008 	add.w	r0, r4, #8
 800dde6:	f7ff ff4b 	bl	800dc80 <uxr_get_output_reliable_stream>
 800ddea:	4605      	mov	r5, r0
 800ddec:	f006 fdc8 	bl	8014980 <get_available_free_slots>
 800ddf0:	b968      	cbnz	r0, 800de0e <on_full_output_buffer_fragmented+0x3a>
 800ddf2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	4798      	blx	r3
 800ddfa:	b918      	cbnz	r0, 800de04 <on_full_output_buffer_fragmented+0x30>
 800ddfc:	2001      	movs	r0, #1
 800ddfe:	b00a      	add	sp, #40	@ 0x28
 800de00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de04:	4628      	mov	r0, r5
 800de06:	f006 fdbb 	bl	8014980 <get_available_free_slots>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	d0f6      	beq.n	800ddfc <on_full_output_buffer_fragmented+0x28>
 800de0e:	8929      	ldrh	r1, [r5, #8]
 800de10:	89eb      	ldrh	r3, [r5, #14]
 800de12:	7b28      	ldrb	r0, [r5, #12]
 800de14:	686a      	ldr	r2, [r5, #4]
 800de16:	fbb2 f8f1 	udiv	r8, r2, r1
 800de1a:	fbb3 f2f1 	udiv	r2, r3, r1
 800de1e:	fb01 3112 	mls	r1, r1, r2, r3
 800de22:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800de26:	b289      	uxth	r1, r1
 800de28:	fb08 f101 	mul.w	r1, r8, r1
 800de2c:	30fc      	adds	r0, #252	@ 0xfc
 800de2e:	f1a8 0804 	sub.w	r8, r8, #4
 800de32:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800de36:	4440      	add	r0, r8
 800de38:	b287      	uxth	r7, r0
 800de3a:	1bdb      	subs	r3, r3, r7
 800de3c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800de40:	682b      	ldr	r3, [r5, #0]
 800de42:	3104      	adds	r1, #4
 800de44:	4419      	add	r1, r3
 800de46:	4642      	mov	r2, r8
 800de48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de4c:	9300      	str	r3, [sp, #0]
 800de4e:	a802      	add	r0, sp, #8
 800de50:	2300      	movs	r3, #0
 800de52:	f7fc fbf3 	bl	800a63c <ucdr_init_buffer_origin_offset>
 800de56:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800de5a:	f102 0308 	add.w	r3, r2, #8
 800de5e:	4543      	cmp	r3, r8
 800de60:	d928      	bls.n	800deb4 <on_full_output_buffer_fragmented+0xe0>
 800de62:	463a      	mov	r2, r7
 800de64:	2300      	movs	r3, #0
 800de66:	210d      	movs	r1, #13
 800de68:	a802      	add	r0, sp, #8
 800de6a:	f7ff ff3d 	bl	800dce8 <uxr_buffer_submessage_header>
 800de6e:	8929      	ldrh	r1, [r5, #8]
 800de70:	89eb      	ldrh	r3, [r5, #14]
 800de72:	fbb3 f2f1 	udiv	r2, r3, r1
 800de76:	fb01 3312 	mls	r3, r1, r2, r3
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	686a      	ldr	r2, [r5, #4]
 800de7e:	fbb2 f2f1 	udiv	r2, r2, r1
 800de82:	fb02 f303 	mul.w	r3, r2, r3
 800de86:	682a      	ldr	r2, [r5, #0]
 800de88:	f842 8003 	str.w	r8, [r2, r3]
 800de8c:	89e8      	ldrh	r0, [r5, #14]
 800de8e:	2101      	movs	r1, #1
 800de90:	f006 fec6 	bl	8014c20 <uxr_seq_num_add>
 800de94:	9904      	ldr	r1, [sp, #16]
 800de96:	9a03      	ldr	r2, [sp, #12]
 800de98:	81e8      	strh	r0, [r5, #14]
 800de9a:	1a52      	subs	r2, r2, r1
 800de9c:	4630      	mov	r0, r6
 800de9e:	f7fc fbdf 	bl	800a660 <ucdr_init_buffer>
 800dea2:	4630      	mov	r0, r6
 800dea4:	490f      	ldr	r1, [pc, #60]	@ (800dee4 <on_full_output_buffer_fragmented+0x110>)
 800dea6:	4622      	mov	r2, r4
 800dea8:	f7fc fbae 	bl	800a608 <ucdr_set_on_full_buffer_callback>
 800deac:	2000      	movs	r0, #0
 800deae:	b00a      	add	sp, #40	@ 0x28
 800deb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deb4:	b292      	uxth	r2, r2
 800deb6:	2302      	movs	r3, #2
 800deb8:	210d      	movs	r1, #13
 800deba:	a802      	add	r0, sp, #8
 800debc:	f7ff ff14 	bl	800dce8 <uxr_buffer_submessage_header>
 800dec0:	8928      	ldrh	r0, [r5, #8]
 800dec2:	89eb      	ldrh	r3, [r5, #14]
 800dec4:	fbb3 f1f0 	udiv	r1, r3, r0
 800dec8:	fb00 3311 	mls	r3, r0, r1, r3
 800decc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800ded0:	6869      	ldr	r1, [r5, #4]
 800ded2:	fbb1 f1f0 	udiv	r1, r1, r0
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	fb01 f303 	mul.w	r3, r1, r3
 800dedc:	6829      	ldr	r1, [r5, #0]
 800dede:	3208      	adds	r2, #8
 800dee0:	50ca      	str	r2, [r1, r3]
 800dee2:	e7d3      	b.n	800de8c <on_full_output_buffer_fragmented+0xb8>
 800dee4:	0800ddd5 	.word	0x0800ddd5

0800dee8 <uxr_prepare_output_stream>:
 800dee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800deea:	b087      	sub	sp, #28
 800deec:	2707      	movs	r7, #7
 800deee:	9202      	str	r2, [sp, #8]
 800def0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800def2:	9103      	str	r1, [sp, #12]
 800def4:	2500      	movs	r5, #0
 800def6:	3204      	adds	r2, #4
 800def8:	e9cd 7500 	strd	r7, r5, [sp]
 800defc:	461c      	mov	r4, r3
 800defe:	4606      	mov	r6, r0
 800df00:	f7ff fc54 	bl	800d7ac <uxr_prepare_stream_to_write_submessage>
 800df04:	f080 0201 	eor.w	r2, r0, #1
 800df08:	b2d2      	uxtb	r2, r2
 800df0a:	75a2      	strb	r2, [r4, #22]
 800df0c:	b112      	cbz	r2, 800df14 <uxr_prepare_output_stream+0x2c>
 800df0e:	4628      	mov	r0, r5
 800df10:	b007      	add	sp, #28
 800df12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df14:	aa05      	add	r2, sp, #20
 800df16:	9902      	ldr	r1, [sp, #8]
 800df18:	4630      	mov	r0, r6
 800df1a:	f7ff fd7d 	bl	800da18 <uxr_init_base_object_request>
 800df1e:	a905      	add	r1, sp, #20
 800df20:	4605      	mov	r5, r0
 800df22:	4620      	mov	r0, r4
 800df24:	f001 f88c 	bl	800f040 <uxr_serialize_WRITE_DATA_Payload_Data>
 800df28:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800df2c:	69a6      	ldr	r6, [r4, #24]
 800df2e:	69e7      	ldr	r7, [r4, #28]
 800df30:	1a52      	subs	r2, r2, r1
 800df32:	4620      	mov	r0, r4
 800df34:	f7fc fb94 	bl	800a660 <ucdr_init_buffer>
 800df38:	4620      	mov	r0, r4
 800df3a:	463a      	mov	r2, r7
 800df3c:	4631      	mov	r1, r6
 800df3e:	f7fc fb63 	bl	800a608 <ucdr_set_on_full_buffer_callback>
 800df42:	4628      	mov	r0, r5
 800df44:	b007      	add	sp, #28
 800df46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800df48 <uxr_prepare_output_stream_fragmented>:
 800df48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df4c:	b091      	sub	sp, #68	@ 0x44
 800df4e:	4605      	mov	r5, r0
 800df50:	9105      	str	r1, [sp, #20]
 800df52:	3008      	adds	r0, #8
 800df54:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800df58:	461e      	mov	r6, r3
 800df5a:	9204      	str	r2, [sp, #16]
 800df5c:	f7ff fe90 	bl	800dc80 <uxr_get_output_reliable_stream>
 800df60:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800df64:	2b01      	cmp	r3, #1
 800df66:	f000 8091 	beq.w	800e08c <uxr_prepare_output_stream_fragmented+0x144>
 800df6a:	4604      	mov	r4, r0
 800df6c:	2800      	cmp	r0, #0
 800df6e:	f000 808d 	beq.w	800e08c <uxr_prepare_output_stream_fragmented+0x144>
 800df72:	f006 fd05 	bl	8014980 <get_available_free_slots>
 800df76:	2800      	cmp	r0, #0
 800df78:	f000 8083 	beq.w	800e082 <uxr_prepare_output_stream_fragmented+0x13a>
 800df7c:	8922      	ldrh	r2, [r4, #8]
 800df7e:	89e7      	ldrh	r7, [r4, #14]
 800df80:	fbb7 f9f2 	udiv	r9, r7, r2
 800df84:	fb02 7919 	mls	r9, r2, r9, r7
 800df88:	fa1f f989 	uxth.w	r9, r9
 800df8c:	6863      	ldr	r3, [r4, #4]
 800df8e:	fbb3 f2f2 	udiv	r2, r3, r2
 800df92:	6823      	ldr	r3, [r4, #0]
 800df94:	9203      	str	r2, [sp, #12]
 800df96:	fb02 f909 	mul.w	r9, r2, r9
 800df9a:	f109 0904 	add.w	r9, r9, #4
 800df9e:	4499      	add	r9, r3
 800dfa0:	7b23      	ldrb	r3, [r4, #12]
 800dfa2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800dfa6:	4543      	cmp	r3, r8
 800dfa8:	f1a2 0b04 	sub.w	fp, r2, #4
 800dfac:	d37a      	bcc.n	800e0a4 <uxr_prepare_output_stream_fragmented+0x15c>
 800dfae:	f1ab 0a04 	sub.w	sl, fp, #4
 800dfb2:	ebaa 0a03 	sub.w	sl, sl, r3
 800dfb6:	465a      	mov	r2, fp
 800dfb8:	2300      	movs	r3, #0
 800dfba:	4649      	mov	r1, r9
 800dfbc:	a808      	add	r0, sp, #32
 800dfbe:	f8cd 8000 	str.w	r8, [sp]
 800dfc2:	f7fc fb3b 	bl	800a63c <ucdr_init_buffer_origin_offset>
 800dfc6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800dfc8:	fa1f fa8a 	uxth.w	sl, sl
 800dfcc:	4652      	mov	r2, sl
 800dfce:	f103 0a08 	add.w	sl, r3, #8
 800dfd2:	45da      	cmp	sl, fp
 800dfd4:	bf34      	ite	cc
 800dfd6:	2302      	movcc	r3, #2
 800dfd8:	2300      	movcs	r3, #0
 800dfda:	210d      	movs	r1, #13
 800dfdc:	a808      	add	r0, sp, #32
 800dfde:	f7ff fe83 	bl	800dce8 <uxr_buffer_submessage_header>
 800dfe2:	8921      	ldrh	r1, [r4, #8]
 800dfe4:	fbb7 f2f1 	udiv	r2, r7, r1
 800dfe8:	fb01 7212 	mls	r2, r1, r2, r7
 800dfec:	b292      	uxth	r2, r2
 800dfee:	6863      	ldr	r3, [r4, #4]
 800dff0:	fbb3 f3f1 	udiv	r3, r3, r1
 800dff4:	fb02 f303 	mul.w	r3, r2, r3
 800dff8:	6822      	ldr	r2, [r4, #0]
 800dffa:	4638      	mov	r0, r7
 800dffc:	f842 b003 	str.w	fp, [r2, r3]
 800e000:	2101      	movs	r1, #1
 800e002:	f006 fe0d 	bl	8014c20 <uxr_seq_num_add>
 800e006:	9b03      	ldr	r3, [sp, #12]
 800e008:	f108 0104 	add.w	r1, r8, #4
 800e00c:	f1a3 0208 	sub.w	r2, r3, #8
 800e010:	eba2 0208 	sub.w	r2, r2, r8
 800e014:	4449      	add	r1, r9
 800e016:	4607      	mov	r7, r0
 800e018:	4630      	mov	r0, r6
 800e01a:	f7fc fb21 	bl	800a660 <ucdr_init_buffer>
 800e01e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e020:	81e7      	strh	r7, [r4, #14]
 800e022:	1d1a      	adds	r2, r3, #4
 800e024:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e028:	bf28      	it	cs
 800e02a:	2200      	movcs	r2, #0
 800e02c:	2300      	movs	r3, #0
 800e02e:	b292      	uxth	r2, r2
 800e030:	2107      	movs	r1, #7
 800e032:	4630      	mov	r0, r6
 800e034:	f7ff fe58 	bl	800dce8 <uxr_buffer_submessage_header>
 800e038:	9904      	ldr	r1, [sp, #16]
 800e03a:	aa07      	add	r2, sp, #28
 800e03c:	4628      	mov	r0, r5
 800e03e:	f7ff fceb 	bl	800da18 <uxr_init_base_object_request>
 800e042:	4604      	mov	r4, r0
 800e044:	b318      	cbz	r0, 800e08e <uxr_prepare_output_stream_fragmented+0x146>
 800e046:	a907      	add	r1, sp, #28
 800e048:	4630      	mov	r0, r6
 800e04a:	f000 fff9 	bl	800f040 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e04e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e052:	4630      	mov	r0, r6
 800e054:	1a52      	subs	r2, r2, r1
 800e056:	f7fc fb03 	bl	800a660 <ucdr_init_buffer>
 800e05a:	9b05      	ldr	r3, [sp, #20]
 800e05c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800e060:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e062:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800e066:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e068:	491b      	ldr	r1, [pc, #108]	@ (800e0d8 <uxr_prepare_output_stream_fragmented+0x190>)
 800e06a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800e06e:	4630      	mov	r0, r6
 800e070:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800e074:	462a      	mov	r2, r5
 800e076:	f7fc fac7 	bl	800a608 <ucdr_set_on_full_buffer_callback>
 800e07a:	4620      	mov	r0, r4
 800e07c:	b011      	add	sp, #68	@ 0x44
 800e07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e082:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800e084:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e086:	4628      	mov	r0, r5
 800e088:	4798      	blx	r3
 800e08a:	b920      	cbnz	r0, 800e096 <uxr_prepare_output_stream_fragmented+0x14e>
 800e08c:	2400      	movs	r4, #0
 800e08e:	4620      	mov	r0, r4
 800e090:	b011      	add	sp, #68	@ 0x44
 800e092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e096:	4620      	mov	r0, r4
 800e098:	f006 fc72 	bl	8014980 <get_available_free_slots>
 800e09c:	2800      	cmp	r0, #0
 800e09e:	f47f af6d 	bne.w	800df7c <uxr_prepare_output_stream_fragmented+0x34>
 800e0a2:	e7f3      	b.n	800e08c <uxr_prepare_output_stream_fragmented+0x144>
 800e0a4:	4638      	mov	r0, r7
 800e0a6:	2101      	movs	r1, #1
 800e0a8:	f006 fdba 	bl	8014c20 <uxr_seq_num_add>
 800e0ac:	8921      	ldrh	r1, [r4, #8]
 800e0ae:	fbb0 f2f1 	udiv	r2, r0, r1
 800e0b2:	fb01 0912 	mls	r9, r1, r2, r0
 800e0b6:	fa1f f289 	uxth.w	r2, r9
 800e0ba:	6863      	ldr	r3, [r4, #4]
 800e0bc:	fbb3 f9f1 	udiv	r9, r3, r1
 800e0c0:	6823      	ldr	r3, [r4, #0]
 800e0c2:	fb02 f909 	mul.w	r9, r2, r9
 800e0c6:	f109 0904 	add.w	r9, r9, #4
 800e0ca:	4499      	add	r9, r3
 800e0cc:	4607      	mov	r7, r0
 800e0ce:	7b23      	ldrb	r3, [r4, #12]
 800e0d0:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e0d4:	e76b      	b.n	800dfae <uxr_prepare_output_stream_fragmented+0x66>
 800e0d6:	bf00      	nop
 800e0d8:	0800ddd5 	.word	0x0800ddd5

0800e0dc <uxr_serialize_message_header>:
 800e0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	4616      	mov	r6, r2
 800e0e2:	4604      	mov	r4, r0
 800e0e4:	9301      	str	r3, [sp, #4]
 800e0e6:	460d      	mov	r5, r1
 800e0e8:	9f08      	ldr	r7, [sp, #32]
 800e0ea:	f7fb f977 	bl	80093dc <ucdr_serialize_uint8_t>
 800e0ee:	4631      	mov	r1, r6
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f7fb f973 	bl	80093dc <ucdr_serialize_uint8_t>
 800e0f6:	9a01      	ldr	r2, [sp, #4]
 800e0f8:	2101      	movs	r1, #1
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	f7fb fa1a 	bl	8009534 <ucdr_serialize_endian_uint16_t>
 800e100:	062b      	lsls	r3, r5, #24
 800e102:	d501      	bpl.n	800e108 <uxr_serialize_message_header+0x2c>
 800e104:	b003      	add	sp, #12
 800e106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e108:	2204      	movs	r2, #4
 800e10a:	4639      	mov	r1, r7
 800e10c:	4620      	mov	r0, r4
 800e10e:	b003      	add	sp, #12
 800e110:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e114:	f005 bd12 	b.w	8013b3c <ucdr_serialize_array_uint8_t>

0800e118 <uxr_deserialize_message_header>:
 800e118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e11a:	b083      	sub	sp, #12
 800e11c:	4616      	mov	r6, r2
 800e11e:	4604      	mov	r4, r0
 800e120:	9301      	str	r3, [sp, #4]
 800e122:	460d      	mov	r5, r1
 800e124:	9f08      	ldr	r7, [sp, #32]
 800e126:	f7fb f96f 	bl	8009408 <ucdr_deserialize_uint8_t>
 800e12a:	4631      	mov	r1, r6
 800e12c:	4620      	mov	r0, r4
 800e12e:	f7fb f96b 	bl	8009408 <ucdr_deserialize_uint8_t>
 800e132:	9a01      	ldr	r2, [sp, #4]
 800e134:	2101      	movs	r1, #1
 800e136:	4620      	mov	r0, r4
 800e138:	f7fb faf0 	bl	800971c <ucdr_deserialize_endian_uint16_t>
 800e13c:	f995 3000 	ldrsb.w	r3, [r5]
 800e140:	2b00      	cmp	r3, #0
 800e142:	da01      	bge.n	800e148 <uxr_deserialize_message_header+0x30>
 800e144:	b003      	add	sp, #12
 800e146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e148:	2204      	movs	r2, #4
 800e14a:	4639      	mov	r1, r7
 800e14c:	4620      	mov	r0, r4
 800e14e:	b003      	add	sp, #12
 800e150:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e154:	f005 bd56 	b.w	8013c04 <ucdr_deserialize_array_uint8_t>

0800e158 <uxr_serialize_submessage_header>:
 800e158:	b530      	push	{r4, r5, lr}
 800e15a:	b083      	sub	sp, #12
 800e15c:	4615      	mov	r5, r2
 800e15e:	4604      	mov	r4, r0
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	f7fb f93b 	bl	80093dc <ucdr_serialize_uint8_t>
 800e166:	4629      	mov	r1, r5
 800e168:	4620      	mov	r0, r4
 800e16a:	f7fb f937 	bl	80093dc <ucdr_serialize_uint8_t>
 800e16e:	9a01      	ldr	r2, [sp, #4]
 800e170:	2101      	movs	r1, #1
 800e172:	4620      	mov	r0, r4
 800e174:	b003      	add	sp, #12
 800e176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e17a:	f7fb b9db 	b.w	8009534 <ucdr_serialize_endian_uint16_t>
 800e17e:	bf00      	nop

0800e180 <uxr_deserialize_submessage_header>:
 800e180:	b530      	push	{r4, r5, lr}
 800e182:	b083      	sub	sp, #12
 800e184:	4615      	mov	r5, r2
 800e186:	4604      	mov	r4, r0
 800e188:	9301      	str	r3, [sp, #4]
 800e18a:	f7fb f93d 	bl	8009408 <ucdr_deserialize_uint8_t>
 800e18e:	4629      	mov	r1, r5
 800e190:	4620      	mov	r0, r4
 800e192:	f7fb f939 	bl	8009408 <ucdr_deserialize_uint8_t>
 800e196:	9a01      	ldr	r2, [sp, #4]
 800e198:	2101      	movs	r1, #1
 800e19a:	4620      	mov	r0, r4
 800e19c:	b003      	add	sp, #12
 800e19e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1a2:	f7fb babb 	b.w	800971c <ucdr_deserialize_endian_uint16_t>
 800e1a6:	bf00      	nop

0800e1a8 <uxr_serialize_CLIENT_Representation>:
 800e1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1ac:	2204      	movs	r2, #4
 800e1ae:	460e      	mov	r6, r1
 800e1b0:	4605      	mov	r5, r0
 800e1b2:	f005 fcc3 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800e1b6:	2202      	movs	r2, #2
 800e1b8:	4607      	mov	r7, r0
 800e1ba:	1d31      	adds	r1, r6, #4
 800e1bc:	4628      	mov	r0, r5
 800e1be:	f005 fcbd 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800e1c2:	4038      	ands	r0, r7
 800e1c4:	2202      	movs	r2, #2
 800e1c6:	1db1      	adds	r1, r6, #6
 800e1c8:	b2c7      	uxtb	r7, r0
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	f005 fcb6 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800e1d0:	2204      	movs	r2, #4
 800e1d2:	4007      	ands	r7, r0
 800e1d4:	f106 0108 	add.w	r1, r6, #8
 800e1d8:	4628      	mov	r0, r5
 800e1da:	f005 fcaf 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800e1de:	7b31      	ldrb	r1, [r6, #12]
 800e1e0:	4007      	ands	r7, r0
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	f7fb f8fa 	bl	80093dc <ucdr_serialize_uint8_t>
 800e1e8:	7b71      	ldrb	r1, [r6, #13]
 800e1ea:	4007      	ands	r7, r0
 800e1ec:	4628      	mov	r0, r5
 800e1ee:	f7fb f8c7 	bl	8009380 <ucdr_serialize_bool>
 800e1f2:	7b73      	ldrb	r3, [r6, #13]
 800e1f4:	ea07 0800 	and.w	r8, r7, r0
 800e1f8:	b93b      	cbnz	r3, 800e20a <uxr_serialize_CLIENT_Representation+0x62>
 800e1fa:	8bb1      	ldrh	r1, [r6, #28]
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	f7fb f919 	bl	8009434 <ucdr_serialize_uint16_t>
 800e202:	ea08 0000 	and.w	r0, r8, r0
 800e206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e20a:	6931      	ldr	r1, [r6, #16]
 800e20c:	4628      	mov	r0, r5
 800e20e:	f7fb fafb 	bl	8009808 <ucdr_serialize_uint32_t>
 800e212:	6933      	ldr	r3, [r6, #16]
 800e214:	b1e3      	cbz	r3, 800e250 <uxr_serialize_CLIENT_Representation+0xa8>
 800e216:	b1c0      	cbz	r0, 800e24a <uxr_serialize_CLIENT_Representation+0xa2>
 800e218:	4637      	mov	r7, r6
 800e21a:	f04f 0900 	mov.w	r9, #0
 800e21e:	e001      	b.n	800e224 <uxr_serialize_CLIENT_Representation+0x7c>
 800e220:	3708      	adds	r7, #8
 800e222:	b194      	cbz	r4, 800e24a <uxr_serialize_CLIENT_Representation+0xa2>
 800e224:	6979      	ldr	r1, [r7, #20]
 800e226:	4628      	mov	r0, r5
 800e228:	f005 fda8 	bl	8013d7c <ucdr_serialize_string>
 800e22c:	69b9      	ldr	r1, [r7, #24]
 800e22e:	4604      	mov	r4, r0
 800e230:	4628      	mov	r0, r5
 800e232:	f005 fda3 	bl	8013d7c <ucdr_serialize_string>
 800e236:	6933      	ldr	r3, [r6, #16]
 800e238:	f109 0901 	add.w	r9, r9, #1
 800e23c:	4004      	ands	r4, r0
 800e23e:	4599      	cmp	r9, r3
 800e240:	b2e4      	uxtb	r4, r4
 800e242:	d3ed      	bcc.n	800e220 <uxr_serialize_CLIENT_Representation+0x78>
 800e244:	ea08 0804 	and.w	r8, r8, r4
 800e248:	e7d7      	b.n	800e1fa <uxr_serialize_CLIENT_Representation+0x52>
 800e24a:	f04f 0800 	mov.w	r8, #0
 800e24e:	e7d4      	b.n	800e1fa <uxr_serialize_CLIENT_Representation+0x52>
 800e250:	ea08 0800 	and.w	r8, r8, r0
 800e254:	e7d1      	b.n	800e1fa <uxr_serialize_CLIENT_Representation+0x52>
 800e256:	bf00      	nop

0800e258 <uxr_deserialize_CLIENT_Representation>:
 800e258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e25c:	2204      	movs	r2, #4
 800e25e:	460c      	mov	r4, r1
 800e260:	4605      	mov	r5, r0
 800e262:	f005 fccf 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800e266:	2202      	movs	r2, #2
 800e268:	4607      	mov	r7, r0
 800e26a:	1d21      	adds	r1, r4, #4
 800e26c:	4628      	mov	r0, r5
 800e26e:	f005 fcc9 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800e272:	4038      	ands	r0, r7
 800e274:	2202      	movs	r2, #2
 800e276:	1da1      	adds	r1, r4, #6
 800e278:	b2c6      	uxtb	r6, r0
 800e27a:	4628      	mov	r0, r5
 800e27c:	f005 fcc2 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800e280:	2204      	movs	r2, #4
 800e282:	4006      	ands	r6, r0
 800e284:	f104 0108 	add.w	r1, r4, #8
 800e288:	4628      	mov	r0, r5
 800e28a:	f005 fcbb 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800e28e:	f104 010c 	add.w	r1, r4, #12
 800e292:	4006      	ands	r6, r0
 800e294:	4628      	mov	r0, r5
 800e296:	f7fb f8b7 	bl	8009408 <ucdr_deserialize_uint8_t>
 800e29a:	f104 010d 	add.w	r1, r4, #13
 800e29e:	ea06 0700 	and.w	r7, r6, r0
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	f7fb f882 	bl	80093ac <ucdr_deserialize_bool>
 800e2a8:	7b63      	ldrb	r3, [r4, #13]
 800e2aa:	4007      	ands	r7, r0
 800e2ac:	b93b      	cbnz	r3, 800e2be <uxr_deserialize_CLIENT_Representation+0x66>
 800e2ae:	f104 011c 	add.w	r1, r4, #28
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	f7fb f9be 	bl	8009634 <ucdr_deserialize_uint16_t>
 800e2b8:	4038      	ands	r0, r7
 800e2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2be:	f104 0110 	add.w	r1, r4, #16
 800e2c2:	4628      	mov	r0, r5
 800e2c4:	f7fb fbd0 	bl	8009a68 <ucdr_deserialize_uint32_t>
 800e2c8:	6923      	ldr	r3, [r4, #16]
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	d903      	bls.n	800e2d6 <uxr_deserialize_CLIENT_Representation+0x7e>
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	75ab      	strb	r3, [r5, #22]
 800e2d2:	2700      	movs	r7, #0
 800e2d4:	e7eb      	b.n	800e2ae <uxr_deserialize_CLIENT_Representation+0x56>
 800e2d6:	b30b      	cbz	r3, 800e31c <uxr_deserialize_CLIENT_Representation+0xc4>
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	d0fa      	beq.n	800e2d2 <uxr_deserialize_CLIENT_Representation+0x7a>
 800e2dc:	46a0      	mov	r8, r4
 800e2de:	f04f 0900 	mov.w	r9, #0
 800e2e2:	e001      	b.n	800e2e8 <uxr_deserialize_CLIENT_Representation+0x90>
 800e2e4:	2e00      	cmp	r6, #0
 800e2e6:	d0f4      	beq.n	800e2d2 <uxr_deserialize_CLIENT_Representation+0x7a>
 800e2e8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e2ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	f005 fd53 	bl	8013d9c <ucdr_deserialize_string>
 800e2f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e2fa:	4606      	mov	r6, r0
 800e2fc:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800e300:	4628      	mov	r0, r5
 800e302:	f005 fd4b 	bl	8013d9c <ucdr_deserialize_string>
 800e306:	6923      	ldr	r3, [r4, #16]
 800e308:	f109 0901 	add.w	r9, r9, #1
 800e30c:	4006      	ands	r6, r0
 800e30e:	4599      	cmp	r9, r3
 800e310:	f108 0808 	add.w	r8, r8, #8
 800e314:	b2f6      	uxtb	r6, r6
 800e316:	d3e5      	bcc.n	800e2e4 <uxr_deserialize_CLIENT_Representation+0x8c>
 800e318:	4037      	ands	r7, r6
 800e31a:	e7c8      	b.n	800e2ae <uxr_deserialize_CLIENT_Representation+0x56>
 800e31c:	4007      	ands	r7, r0
 800e31e:	e7c6      	b.n	800e2ae <uxr_deserialize_CLIENT_Representation+0x56>

0800e320 <uxr_serialize_AGENT_Representation>:
 800e320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e324:	2204      	movs	r2, #4
 800e326:	460f      	mov	r7, r1
 800e328:	4605      	mov	r5, r0
 800e32a:	f005 fc07 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800e32e:	2202      	movs	r2, #2
 800e330:	4604      	mov	r4, r0
 800e332:	1d39      	adds	r1, r7, #4
 800e334:	4628      	mov	r0, r5
 800e336:	f005 fc01 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800e33a:	4020      	ands	r0, r4
 800e33c:	2202      	movs	r2, #2
 800e33e:	1db9      	adds	r1, r7, #6
 800e340:	b2c4      	uxtb	r4, r0
 800e342:	4628      	mov	r0, r5
 800e344:	f005 fbfa 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800e348:	7a39      	ldrb	r1, [r7, #8]
 800e34a:	4004      	ands	r4, r0
 800e34c:	4628      	mov	r0, r5
 800e34e:	f7fb f817 	bl	8009380 <ucdr_serialize_bool>
 800e352:	7a3b      	ldrb	r3, [r7, #8]
 800e354:	ea00 0804 	and.w	r8, r0, r4
 800e358:	b913      	cbnz	r3, 800e360 <uxr_serialize_AGENT_Representation+0x40>
 800e35a:	4640      	mov	r0, r8
 800e35c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e360:	68f9      	ldr	r1, [r7, #12]
 800e362:	4628      	mov	r0, r5
 800e364:	f7fb fa50 	bl	8009808 <ucdr_serialize_uint32_t>
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	b303      	cbz	r3, 800e3ae <uxr_serialize_AGENT_Representation+0x8e>
 800e36c:	b1d0      	cbz	r0, 800e3a4 <uxr_serialize_AGENT_Representation+0x84>
 800e36e:	463e      	mov	r6, r7
 800e370:	f04f 0900 	mov.w	r9, #0
 800e374:	e001      	b.n	800e37a <uxr_serialize_AGENT_Representation+0x5a>
 800e376:	3608      	adds	r6, #8
 800e378:	b1a4      	cbz	r4, 800e3a4 <uxr_serialize_AGENT_Representation+0x84>
 800e37a:	6931      	ldr	r1, [r6, #16]
 800e37c:	4628      	mov	r0, r5
 800e37e:	f005 fcfd 	bl	8013d7c <ucdr_serialize_string>
 800e382:	6971      	ldr	r1, [r6, #20]
 800e384:	4604      	mov	r4, r0
 800e386:	4628      	mov	r0, r5
 800e388:	f005 fcf8 	bl	8013d7c <ucdr_serialize_string>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f109 0901 	add.w	r9, r9, #1
 800e392:	4004      	ands	r4, r0
 800e394:	4599      	cmp	r9, r3
 800e396:	b2e4      	uxtb	r4, r4
 800e398:	d3ed      	bcc.n	800e376 <uxr_serialize_AGENT_Representation+0x56>
 800e39a:	ea08 0804 	and.w	r8, r8, r4
 800e39e:	4640      	mov	r0, r8
 800e3a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3a4:	f04f 0800 	mov.w	r8, #0
 800e3a8:	4640      	mov	r0, r8
 800e3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ae:	ea08 0800 	and.w	r8, r8, r0
 800e3b2:	e7d2      	b.n	800e35a <uxr_serialize_AGENT_Representation+0x3a>

0800e3b4 <uxr_serialize_DATAWRITER_Representation>:
 800e3b4:	b570      	push	{r4, r5, r6, lr}
 800e3b6:	460d      	mov	r5, r1
 800e3b8:	7809      	ldrb	r1, [r1, #0]
 800e3ba:	4606      	mov	r6, r0
 800e3bc:	f7fb f80e 	bl	80093dc <ucdr_serialize_uint8_t>
 800e3c0:	4604      	mov	r4, r0
 800e3c2:	b130      	cbz	r0, 800e3d2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e3c4:	782b      	ldrb	r3, [r5, #0]
 800e3c6:	2b02      	cmp	r3, #2
 800e3c8:	d00c      	beq.n	800e3e4 <uxr_serialize_DATAWRITER_Representation+0x30>
 800e3ca:	2b03      	cmp	r3, #3
 800e3cc:	d010      	beq.n	800e3f0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d008      	beq.n	800e3e4 <uxr_serialize_DATAWRITER_Representation+0x30>
 800e3d2:	2202      	movs	r2, #2
 800e3d4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800e3d8:	4630      	mov	r0, r6
 800e3da:	f005 fbaf 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800e3de:	4020      	ands	r0, r4
 800e3e0:	b2c0      	uxtb	r0, r0
 800e3e2:	bd70      	pop	{r4, r5, r6, pc}
 800e3e4:	6869      	ldr	r1, [r5, #4]
 800e3e6:	4630      	mov	r0, r6
 800e3e8:	f005 fcc8 	bl	8013d7c <ucdr_serialize_string>
 800e3ec:	4604      	mov	r4, r0
 800e3ee:	e7f0      	b.n	800e3d2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e3f0:	4629      	mov	r1, r5
 800e3f2:	4630      	mov	r0, r6
 800e3f4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800e3f8:	3104      	adds	r1, #4
 800e3fa:	f005 fc93 	bl	8013d24 <ucdr_serialize_sequence_uint8_t>
 800e3fe:	4604      	mov	r4, r0
 800e400:	e7e7      	b.n	800e3d2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e402:	bf00      	nop

0800e404 <uxr_serialize_ObjectVariant.part.0>:
 800e404:	b570      	push	{r4, r5, r6, lr}
 800e406:	780b      	ldrb	r3, [r1, #0]
 800e408:	3b01      	subs	r3, #1
 800e40a:	460c      	mov	r4, r1
 800e40c:	4605      	mov	r5, r0
 800e40e:	2b0d      	cmp	r3, #13
 800e410:	d854      	bhi.n	800e4bc <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e412:	e8df f003 	tbb	[pc, r3]
 800e416:	0730      	.short	0x0730
 800e418:	07071b1b 	.word	0x07071b1b
 800e41c:	0c530707 	.word	0x0c530707
 800e420:	494e0c0c 	.word	0x494e0c0c
 800e424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e428:	3104      	adds	r1, #4
 800e42a:	f7ff bfc3 	b.w	800e3b4 <uxr_serialize_DATAWRITER_Representation>
 800e42e:	7909      	ldrb	r1, [r1, #4]
 800e430:	f7fa ffd4 	bl	80093dc <ucdr_serialize_uint8_t>
 800e434:	b1e8      	cbz	r0, 800e472 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800e436:	7923      	ldrb	r3, [r4, #4]
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d001      	beq.n	800e440 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800e43c:	2b02      	cmp	r3, #2
 800e43e:	d13d      	bne.n	800e4bc <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e440:	68a1      	ldr	r1, [r4, #8]
 800e442:	4628      	mov	r0, r5
 800e444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e448:	f005 bc98 	b.w	8013d7c <ucdr_serialize_string>
 800e44c:	7909      	ldrb	r1, [r1, #4]
 800e44e:	f7fa ffc5 	bl	80093dc <ucdr_serialize_uint8_t>
 800e452:	4606      	mov	r6, r0
 800e454:	b120      	cbz	r0, 800e460 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e456:	7923      	ldrb	r3, [r4, #4]
 800e458:	2b02      	cmp	r3, #2
 800e45a:	d039      	beq.n	800e4d0 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800e45c:	2b03      	cmp	r3, #3
 800e45e:	d02f      	beq.n	800e4c0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800e460:	2202      	movs	r2, #2
 800e462:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800e466:	4628      	mov	r0, r5
 800e468:	f005 fb68 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800e46c:	4030      	ands	r0, r6
 800e46e:	b2c0      	uxtb	r0, r0
 800e470:	bd70      	pop	{r4, r5, r6, pc}
 800e472:	2000      	movs	r0, #0
 800e474:	bd70      	pop	{r4, r5, r6, pc}
 800e476:	7909      	ldrb	r1, [r1, #4]
 800e478:	f7fa ffb0 	bl	80093dc <ucdr_serialize_uint8_t>
 800e47c:	4606      	mov	r6, r0
 800e47e:	b158      	cbz	r0, 800e498 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e480:	7923      	ldrb	r3, [r4, #4]
 800e482:	2b02      	cmp	r3, #2
 800e484:	d003      	beq.n	800e48e <uxr_serialize_ObjectVariant.part.0+0x8a>
 800e486:	2b03      	cmp	r3, #3
 800e488:	d028      	beq.n	800e4dc <uxr_serialize_ObjectVariant.part.0+0xd8>
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d104      	bne.n	800e498 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e48e:	68a1      	ldr	r1, [r4, #8]
 800e490:	4628      	mov	r0, r5
 800e492:	f005 fc73 	bl	8013d7c <ucdr_serialize_string>
 800e496:	4606      	mov	r6, r0
 800e498:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800e49c:	4628      	mov	r0, r5
 800e49e:	f7fb fcd9 	bl	8009e54 <ucdr_serialize_int16_t>
 800e4a2:	4030      	ands	r0, r6
 800e4a4:	b2c0      	uxtb	r0, r0
 800e4a6:	bd70      	pop	{r4, r5, r6, pc}
 800e4a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4ac:	3104      	adds	r1, #4
 800e4ae:	f7ff be7b 	b.w	800e1a8 <uxr_serialize_CLIENT_Representation>
 800e4b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4b6:	3104      	adds	r1, #4
 800e4b8:	f7ff bf32 	b.w	800e320 <uxr_serialize_AGENT_Representation>
 800e4bc:	2001      	movs	r0, #1
 800e4be:	bd70      	pop	{r4, r5, r6, pc}
 800e4c0:	68a2      	ldr	r2, [r4, #8]
 800e4c2:	f104 010c 	add.w	r1, r4, #12
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	f005 fc2c 	bl	8013d24 <ucdr_serialize_sequence_uint8_t>
 800e4cc:	4606      	mov	r6, r0
 800e4ce:	e7c7      	b.n	800e460 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e4d0:	68a1      	ldr	r1, [r4, #8]
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	f005 fc52 	bl	8013d7c <ucdr_serialize_string>
 800e4d8:	4606      	mov	r6, r0
 800e4da:	e7c1      	b.n	800e460 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e4dc:	68a2      	ldr	r2, [r4, #8]
 800e4de:	f104 010c 	add.w	r1, r4, #12
 800e4e2:	4628      	mov	r0, r5
 800e4e4:	f005 fc1e 	bl	8013d24 <ucdr_serialize_sequence_uint8_t>
 800e4e8:	4606      	mov	r6, r0
 800e4ea:	e7d5      	b.n	800e498 <uxr_serialize_ObjectVariant.part.0+0x94>

0800e4ec <uxr_deserialize_DATAWRITER_Representation>:
 800e4ec:	b570      	push	{r4, r5, r6, lr}
 800e4ee:	4606      	mov	r6, r0
 800e4f0:	460d      	mov	r5, r1
 800e4f2:	f7fa ff89 	bl	8009408 <ucdr_deserialize_uint8_t>
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	b130      	cbz	r0, 800e508 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e4fa:	782b      	ldrb	r3, [r5, #0]
 800e4fc:	2b02      	cmp	r3, #2
 800e4fe:	d00c      	beq.n	800e51a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e500:	2b03      	cmp	r3, #3
 800e502:	d012      	beq.n	800e52a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800e504:	2b01      	cmp	r3, #1
 800e506:	d008      	beq.n	800e51a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e508:	2202      	movs	r2, #2
 800e50a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800e50e:	4630      	mov	r0, r6
 800e510:	f005 fb78 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800e514:	4020      	ands	r0, r4
 800e516:	b2c0      	uxtb	r0, r0
 800e518:	bd70      	pop	{r4, r5, r6, pc}
 800e51a:	6869      	ldr	r1, [r5, #4]
 800e51c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e520:	4630      	mov	r0, r6
 800e522:	f005 fc3b 	bl	8013d9c <ucdr_deserialize_string>
 800e526:	4604      	mov	r4, r0
 800e528:	e7ee      	b.n	800e508 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e52a:	1d2b      	adds	r3, r5, #4
 800e52c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e530:	f105 0108 	add.w	r1, r5, #8
 800e534:	4630      	mov	r0, r6
 800e536:	f005 fc07 	bl	8013d48 <ucdr_deserialize_sequence_uint8_t>
 800e53a:	4604      	mov	r4, r0
 800e53c:	e7e4      	b.n	800e508 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e53e:	bf00      	nop

0800e540 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800e540:	b570      	push	{r4, r5, r6, lr}
 800e542:	460d      	mov	r5, r1
 800e544:	7809      	ldrb	r1, [r1, #0]
 800e546:	4606      	mov	r6, r0
 800e548:	f7fa ff1a 	bl	8009380 <ucdr_serialize_bool>
 800e54c:	782b      	ldrb	r3, [r5, #0]
 800e54e:	4604      	mov	r4, r0
 800e550:	b94b      	cbnz	r3, 800e566 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800e552:	7a29      	ldrb	r1, [r5, #8]
 800e554:	4630      	mov	r0, r6
 800e556:	f7fa ff13 	bl	8009380 <ucdr_serialize_bool>
 800e55a:	7a2b      	ldrb	r3, [r5, #8]
 800e55c:	4004      	ands	r4, r0
 800e55e:	b2e4      	uxtb	r4, r4
 800e560:	b943      	cbnz	r3, 800e574 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800e562:	4620      	mov	r0, r4
 800e564:	bd70      	pop	{r4, r5, r6, pc}
 800e566:	6869      	ldr	r1, [r5, #4]
 800e568:	4630      	mov	r0, r6
 800e56a:	f005 fc07 	bl	8013d7c <ucdr_serialize_string>
 800e56e:	4004      	ands	r4, r0
 800e570:	b2e4      	uxtb	r4, r4
 800e572:	e7ee      	b.n	800e552 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800e574:	68e9      	ldr	r1, [r5, #12]
 800e576:	4630      	mov	r0, r6
 800e578:	f005 fc00 	bl	8013d7c <ucdr_serialize_string>
 800e57c:	4004      	ands	r4, r0
 800e57e:	4620      	mov	r0, r4
 800e580:	bd70      	pop	{r4, r5, r6, pc}
 800e582:	bf00      	nop

0800e584 <uxr_serialize_OBJK_Topic_Binary>:
 800e584:	b570      	push	{r4, r5, r6, lr}
 800e586:	460d      	mov	r5, r1
 800e588:	6809      	ldr	r1, [r1, #0]
 800e58a:	4606      	mov	r6, r0
 800e58c:	f005 fbf6 	bl	8013d7c <ucdr_serialize_string>
 800e590:	7929      	ldrb	r1, [r5, #4]
 800e592:	4604      	mov	r4, r0
 800e594:	4630      	mov	r0, r6
 800e596:	f7fa fef3 	bl	8009380 <ucdr_serialize_bool>
 800e59a:	792b      	ldrb	r3, [r5, #4]
 800e59c:	4004      	ands	r4, r0
 800e59e:	b2e4      	uxtb	r4, r4
 800e5a0:	b943      	cbnz	r3, 800e5b4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800e5a2:	7b29      	ldrb	r1, [r5, #12]
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	f7fa feeb 	bl	8009380 <ucdr_serialize_bool>
 800e5aa:	7b2b      	ldrb	r3, [r5, #12]
 800e5ac:	4004      	ands	r4, r0
 800e5ae:	b93b      	cbnz	r3, 800e5c0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	bd70      	pop	{r4, r5, r6, pc}
 800e5b4:	68a9      	ldr	r1, [r5, #8]
 800e5b6:	4630      	mov	r0, r6
 800e5b8:	f005 fbe0 	bl	8013d7c <ucdr_serialize_string>
 800e5bc:	4004      	ands	r4, r0
 800e5be:	e7f0      	b.n	800e5a2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800e5c0:	6929      	ldr	r1, [r5, #16]
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	f005 fbda 	bl	8013d7c <ucdr_serialize_string>
 800e5c8:	4004      	ands	r4, r0
 800e5ca:	b2e4      	uxtb	r4, r4
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	bd70      	pop	{r4, r5, r6, pc}

0800e5d0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800e5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d4:	460c      	mov	r4, r1
 800e5d6:	7809      	ldrb	r1, [r1, #0]
 800e5d8:	4606      	mov	r6, r0
 800e5da:	f7fa fed1 	bl	8009380 <ucdr_serialize_bool>
 800e5de:	7823      	ldrb	r3, [r4, #0]
 800e5e0:	4605      	mov	r5, r0
 800e5e2:	b96b      	cbnz	r3, 800e600 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800e5e4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	f7fa fec9 	bl	8009380 <ucdr_serialize_bool>
 800e5ee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e5f2:	4005      	ands	r5, r0
 800e5f4:	b2ed      	uxtb	r5, r5
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d169      	bne.n	800e6ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e600:	6861      	ldr	r1, [r4, #4]
 800e602:	4630      	mov	r0, r6
 800e604:	f7fb f900 	bl	8009808 <ucdr_serialize_uint32_t>
 800e608:	6863      	ldr	r3, [r4, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d06b      	beq.n	800e6e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800e60e:	2800      	cmp	r0, #0
 800e610:	d067      	beq.n	800e6e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e612:	68a1      	ldr	r1, [r4, #8]
 800e614:	4630      	mov	r0, r6
 800e616:	f005 fbb1 	bl	8013d7c <ucdr_serialize_string>
 800e61a:	6863      	ldr	r3, [r4, #4]
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d953      	bls.n	800e6c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e620:	2800      	cmp	r0, #0
 800e622:	d05e      	beq.n	800e6e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e624:	68e1      	ldr	r1, [r4, #12]
 800e626:	4630      	mov	r0, r6
 800e628:	f005 fba8 	bl	8013d7c <ucdr_serialize_string>
 800e62c:	6863      	ldr	r3, [r4, #4]
 800e62e:	2b02      	cmp	r3, #2
 800e630:	d94a      	bls.n	800e6c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e632:	2800      	cmp	r0, #0
 800e634:	d055      	beq.n	800e6e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e636:	6921      	ldr	r1, [r4, #16]
 800e638:	4630      	mov	r0, r6
 800e63a:	f005 fb9f 	bl	8013d7c <ucdr_serialize_string>
 800e63e:	6863      	ldr	r3, [r4, #4]
 800e640:	2b03      	cmp	r3, #3
 800e642:	d941      	bls.n	800e6c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e644:	2800      	cmp	r0, #0
 800e646:	d04c      	beq.n	800e6e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e648:	6961      	ldr	r1, [r4, #20]
 800e64a:	4630      	mov	r0, r6
 800e64c:	f005 fb96 	bl	8013d7c <ucdr_serialize_string>
 800e650:	6863      	ldr	r3, [r4, #4]
 800e652:	2b04      	cmp	r3, #4
 800e654:	d938      	bls.n	800e6c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e656:	2800      	cmp	r0, #0
 800e658:	d043      	beq.n	800e6e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e65a:	69a1      	ldr	r1, [r4, #24]
 800e65c:	4630      	mov	r0, r6
 800e65e:	f005 fb8d 	bl	8013d7c <ucdr_serialize_string>
 800e662:	6863      	ldr	r3, [r4, #4]
 800e664:	2b05      	cmp	r3, #5
 800e666:	d92f      	bls.n	800e6c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e668:	2800      	cmp	r0, #0
 800e66a:	d03a      	beq.n	800e6e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e66c:	69e1      	ldr	r1, [r4, #28]
 800e66e:	4630      	mov	r0, r6
 800e670:	f005 fb84 	bl	8013d7c <ucdr_serialize_string>
 800e674:	6863      	ldr	r3, [r4, #4]
 800e676:	2b06      	cmp	r3, #6
 800e678:	d926      	bls.n	800e6c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e67a:	b390      	cbz	r0, 800e6e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e67c:	6a21      	ldr	r1, [r4, #32]
 800e67e:	4630      	mov	r0, r6
 800e680:	f005 fb7c 	bl	8013d7c <ucdr_serialize_string>
 800e684:	6863      	ldr	r3, [r4, #4]
 800e686:	2b07      	cmp	r3, #7
 800e688:	d91e      	bls.n	800e6c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e68a:	b350      	cbz	r0, 800e6e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e68c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e68e:	4630      	mov	r0, r6
 800e690:	f005 fb74 	bl	8013d7c <ucdr_serialize_string>
 800e694:	6863      	ldr	r3, [r4, #4]
 800e696:	2b08      	cmp	r3, #8
 800e698:	d916      	bls.n	800e6c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e69a:	b310      	cbz	r0, 800e6e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e69c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800e69e:	4630      	mov	r0, r6
 800e6a0:	f005 fb6c 	bl	8013d7c <ucdr_serialize_string>
 800e6a4:	6863      	ldr	r3, [r4, #4]
 800e6a6:	2b09      	cmp	r3, #9
 800e6a8:	d90e      	bls.n	800e6c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e6aa:	b1d0      	cbz	r0, 800e6e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e6ac:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800e6b0:	2709      	movs	r7, #9
 800e6b2:	e000      	b.n	800e6b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800e6b4:	b1a8      	cbz	r0, 800e6e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e6b6:	f858 1b04 	ldr.w	r1, [r8], #4
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	f005 fb5e 	bl	8013d7c <ucdr_serialize_string>
 800e6c0:	6862      	ldr	r2, [r4, #4]
 800e6c2:	3701      	adds	r7, #1
 800e6c4:	4297      	cmp	r7, r2
 800e6c6:	d3f5      	bcc.n	800e6b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800e6c8:	4005      	ands	r5, r0
 800e6ca:	b2ed      	uxtb	r5, r5
 800e6cc:	e78a      	b.n	800e5e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e6ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e6d0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e6d4:	4630      	mov	r0, r6
 800e6d6:	f005 fb25 	bl	8013d24 <ucdr_serialize_sequence_uint8_t>
 800e6da:	4005      	ands	r5, r0
 800e6dc:	4628      	mov	r0, r5
 800e6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6e2:	2500      	movs	r5, #0
 800e6e4:	e77e      	b.n	800e5e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e6e6:	4028      	ands	r0, r5
 800e6e8:	b2c5      	uxtb	r5, r0
 800e6ea:	e77b      	b.n	800e5e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800e6ec <uxr_serialize_OBJK_Publisher_Binary>:
 800e6ec:	b570      	push	{r4, r5, r6, lr}
 800e6ee:	460d      	mov	r5, r1
 800e6f0:	7809      	ldrb	r1, [r1, #0]
 800e6f2:	4606      	mov	r6, r0
 800e6f4:	f7fa fe44 	bl	8009380 <ucdr_serialize_bool>
 800e6f8:	782b      	ldrb	r3, [r5, #0]
 800e6fa:	4604      	mov	r4, r0
 800e6fc:	b94b      	cbnz	r3, 800e712 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800e6fe:	7a29      	ldrb	r1, [r5, #8]
 800e700:	4630      	mov	r0, r6
 800e702:	f7fa fe3d 	bl	8009380 <ucdr_serialize_bool>
 800e706:	7a2b      	ldrb	r3, [r5, #8]
 800e708:	4004      	ands	r4, r0
 800e70a:	b2e4      	uxtb	r4, r4
 800e70c:	b943      	cbnz	r3, 800e720 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800e70e:	4620      	mov	r0, r4
 800e710:	bd70      	pop	{r4, r5, r6, pc}
 800e712:	6869      	ldr	r1, [r5, #4]
 800e714:	4630      	mov	r0, r6
 800e716:	f005 fb31 	bl	8013d7c <ucdr_serialize_string>
 800e71a:	4004      	ands	r4, r0
 800e71c:	b2e4      	uxtb	r4, r4
 800e71e:	e7ee      	b.n	800e6fe <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800e720:	f105 010c 	add.w	r1, r5, #12
 800e724:	4630      	mov	r0, r6
 800e726:	f7ff ff53 	bl	800e5d0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800e72a:	4004      	ands	r4, r0
 800e72c:	4620      	mov	r0, r4
 800e72e:	bd70      	pop	{r4, r5, r6, pc}

0800e730 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800e730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e734:	460c      	mov	r4, r1
 800e736:	7809      	ldrb	r1, [r1, #0]
 800e738:	4606      	mov	r6, r0
 800e73a:	f7fa fe21 	bl	8009380 <ucdr_serialize_bool>
 800e73e:	7823      	ldrb	r3, [r4, #0]
 800e740:	4605      	mov	r5, r0
 800e742:	b96b      	cbnz	r3, 800e760 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800e744:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800e748:	4630      	mov	r0, r6
 800e74a:	f7fa fe19 	bl	8009380 <ucdr_serialize_bool>
 800e74e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e752:	4005      	ands	r5, r0
 800e754:	b2ed      	uxtb	r5, r5
 800e756:	2b00      	cmp	r3, #0
 800e758:	d169      	bne.n	800e82e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800e75a:	4628      	mov	r0, r5
 800e75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e760:	6861      	ldr	r1, [r4, #4]
 800e762:	4630      	mov	r0, r6
 800e764:	f7fb f850 	bl	8009808 <ucdr_serialize_uint32_t>
 800e768:	6863      	ldr	r3, [r4, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d06b      	beq.n	800e846 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800e76e:	2800      	cmp	r0, #0
 800e770:	d067      	beq.n	800e842 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e772:	68a1      	ldr	r1, [r4, #8]
 800e774:	4630      	mov	r0, r6
 800e776:	f005 fb01 	bl	8013d7c <ucdr_serialize_string>
 800e77a:	6863      	ldr	r3, [r4, #4]
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	d953      	bls.n	800e828 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e780:	2800      	cmp	r0, #0
 800e782:	d05e      	beq.n	800e842 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e784:	68e1      	ldr	r1, [r4, #12]
 800e786:	4630      	mov	r0, r6
 800e788:	f005 faf8 	bl	8013d7c <ucdr_serialize_string>
 800e78c:	6863      	ldr	r3, [r4, #4]
 800e78e:	2b02      	cmp	r3, #2
 800e790:	d94a      	bls.n	800e828 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e792:	2800      	cmp	r0, #0
 800e794:	d055      	beq.n	800e842 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e796:	6921      	ldr	r1, [r4, #16]
 800e798:	4630      	mov	r0, r6
 800e79a:	f005 faef 	bl	8013d7c <ucdr_serialize_string>
 800e79e:	6863      	ldr	r3, [r4, #4]
 800e7a0:	2b03      	cmp	r3, #3
 800e7a2:	d941      	bls.n	800e828 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	d04c      	beq.n	800e842 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e7a8:	6961      	ldr	r1, [r4, #20]
 800e7aa:	4630      	mov	r0, r6
 800e7ac:	f005 fae6 	bl	8013d7c <ucdr_serialize_string>
 800e7b0:	6863      	ldr	r3, [r4, #4]
 800e7b2:	2b04      	cmp	r3, #4
 800e7b4:	d938      	bls.n	800e828 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	d043      	beq.n	800e842 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e7ba:	69a1      	ldr	r1, [r4, #24]
 800e7bc:	4630      	mov	r0, r6
 800e7be:	f005 fadd 	bl	8013d7c <ucdr_serialize_string>
 800e7c2:	6863      	ldr	r3, [r4, #4]
 800e7c4:	2b05      	cmp	r3, #5
 800e7c6:	d92f      	bls.n	800e828 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d03a      	beq.n	800e842 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e7cc:	69e1      	ldr	r1, [r4, #28]
 800e7ce:	4630      	mov	r0, r6
 800e7d0:	f005 fad4 	bl	8013d7c <ucdr_serialize_string>
 800e7d4:	6863      	ldr	r3, [r4, #4]
 800e7d6:	2b06      	cmp	r3, #6
 800e7d8:	d926      	bls.n	800e828 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e7da:	b390      	cbz	r0, 800e842 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e7dc:	6a21      	ldr	r1, [r4, #32]
 800e7de:	4630      	mov	r0, r6
 800e7e0:	f005 facc 	bl	8013d7c <ucdr_serialize_string>
 800e7e4:	6863      	ldr	r3, [r4, #4]
 800e7e6:	2b07      	cmp	r3, #7
 800e7e8:	d91e      	bls.n	800e828 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e7ea:	b350      	cbz	r0, 800e842 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e7ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	f005 fac4 	bl	8013d7c <ucdr_serialize_string>
 800e7f4:	6863      	ldr	r3, [r4, #4]
 800e7f6:	2b08      	cmp	r3, #8
 800e7f8:	d916      	bls.n	800e828 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e7fa:	b310      	cbz	r0, 800e842 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e7fc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800e7fe:	4630      	mov	r0, r6
 800e800:	f005 fabc 	bl	8013d7c <ucdr_serialize_string>
 800e804:	6863      	ldr	r3, [r4, #4]
 800e806:	2b09      	cmp	r3, #9
 800e808:	d90e      	bls.n	800e828 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e80a:	b1d0      	cbz	r0, 800e842 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e80c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800e810:	2709      	movs	r7, #9
 800e812:	e000      	b.n	800e816 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800e814:	b1a8      	cbz	r0, 800e842 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e816:	f858 1b04 	ldr.w	r1, [r8], #4
 800e81a:	4630      	mov	r0, r6
 800e81c:	f005 faae 	bl	8013d7c <ucdr_serialize_string>
 800e820:	6862      	ldr	r2, [r4, #4]
 800e822:	3701      	adds	r7, #1
 800e824:	4297      	cmp	r7, r2
 800e826:	d3f5      	bcc.n	800e814 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800e828:	4005      	ands	r5, r0
 800e82a:	b2ed      	uxtb	r5, r5
 800e82c:	e78a      	b.n	800e744 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800e82e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e830:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e834:	4630      	mov	r0, r6
 800e836:	f005 fa75 	bl	8013d24 <ucdr_serialize_sequence_uint8_t>
 800e83a:	4005      	ands	r5, r0
 800e83c:	4628      	mov	r0, r5
 800e83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e842:	2500      	movs	r5, #0
 800e844:	e77e      	b.n	800e744 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800e846:	4028      	ands	r0, r5
 800e848:	b2c5      	uxtb	r5, r0
 800e84a:	e77b      	b.n	800e744 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800e84c <uxr_serialize_OBJK_Subscriber_Binary>:
 800e84c:	b570      	push	{r4, r5, r6, lr}
 800e84e:	460d      	mov	r5, r1
 800e850:	7809      	ldrb	r1, [r1, #0]
 800e852:	4606      	mov	r6, r0
 800e854:	f7fa fd94 	bl	8009380 <ucdr_serialize_bool>
 800e858:	782b      	ldrb	r3, [r5, #0]
 800e85a:	4604      	mov	r4, r0
 800e85c:	b94b      	cbnz	r3, 800e872 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800e85e:	7a29      	ldrb	r1, [r5, #8]
 800e860:	4630      	mov	r0, r6
 800e862:	f7fa fd8d 	bl	8009380 <ucdr_serialize_bool>
 800e866:	7a2b      	ldrb	r3, [r5, #8]
 800e868:	4004      	ands	r4, r0
 800e86a:	b2e4      	uxtb	r4, r4
 800e86c:	b943      	cbnz	r3, 800e880 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800e86e:	4620      	mov	r0, r4
 800e870:	bd70      	pop	{r4, r5, r6, pc}
 800e872:	6869      	ldr	r1, [r5, #4]
 800e874:	4630      	mov	r0, r6
 800e876:	f005 fa81 	bl	8013d7c <ucdr_serialize_string>
 800e87a:	4004      	ands	r4, r0
 800e87c:	b2e4      	uxtb	r4, r4
 800e87e:	e7ee      	b.n	800e85e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800e880:	f105 010c 	add.w	r1, r5, #12
 800e884:	4630      	mov	r0, r6
 800e886:	f7ff ff53 	bl	800e730 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800e88a:	4004      	ands	r4, r0
 800e88c:	4620      	mov	r0, r4
 800e88e:	bd70      	pop	{r4, r5, r6, pc}

0800e890 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800e890:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800e894:	4688      	mov	r8, r1
 800e896:	8809      	ldrh	r1, [r1, #0]
 800e898:	4681      	mov	r9, r0
 800e89a:	f7fa fdcb 	bl	8009434 <ucdr_serialize_uint16_t>
 800e89e:	f898 1002 	ldrb.w	r1, [r8, #2]
 800e8a2:	4606      	mov	r6, r0
 800e8a4:	4648      	mov	r0, r9
 800e8a6:	f7fa fd6b 	bl	8009380 <ucdr_serialize_bool>
 800e8aa:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e8ae:	4006      	ands	r6, r0
 800e8b0:	b2f5      	uxtb	r5, r6
 800e8b2:	b9eb      	cbnz	r3, 800e8f0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800e8b4:	f898 1006 	ldrb.w	r1, [r8, #6]
 800e8b8:	4648      	mov	r0, r9
 800e8ba:	f7fa fd61 	bl	8009380 <ucdr_serialize_bool>
 800e8be:	f898 3006 	ldrb.w	r3, [r8, #6]
 800e8c2:	4005      	ands	r5, r0
 800e8c4:	bb7b      	cbnz	r3, 800e926 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800e8c6:	f898 100c 	ldrb.w	r1, [r8, #12]
 800e8ca:	4648      	mov	r0, r9
 800e8cc:	f7fa fd58 	bl	8009380 <ucdr_serialize_bool>
 800e8d0:	f898 300c 	ldrb.w	r3, [r8, #12]
 800e8d4:	4005      	ands	r5, r0
 800e8d6:	b9f3      	cbnz	r3, 800e916 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800e8d8:	f898 1014 	ldrb.w	r1, [r8, #20]
 800e8dc:	4648      	mov	r0, r9
 800e8de:	f7fa fd4f 	bl	8009380 <ucdr_serialize_bool>
 800e8e2:	f898 3014 	ldrb.w	r3, [r8, #20]
 800e8e6:	4005      	ands	r5, r0
 800e8e8:	b94b      	cbnz	r3, 800e8fe <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800e8f0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800e8f4:	4648      	mov	r0, r9
 800e8f6:	f7fa fd9d 	bl	8009434 <ucdr_serialize_uint16_t>
 800e8fa:	4005      	ands	r5, r0
 800e8fc:	e7da      	b.n	800e8b4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800e8fe:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800e902:	f108 011c 	add.w	r1, r8, #28
 800e906:	4648      	mov	r0, r9
 800e908:	f005 fa0c 	bl	8013d24 <ucdr_serialize_sequence_uint8_t>
 800e90c:	4028      	ands	r0, r5
 800e90e:	b2c5      	uxtb	r5, r0
 800e910:	4628      	mov	r0, r5
 800e912:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800e916:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e91a:	4648      	mov	r0, r9
 800e91c:	f7fa ff74 	bl	8009808 <ucdr_serialize_uint32_t>
 800e920:	4028      	ands	r0, r5
 800e922:	b2c5      	uxtb	r5, r0
 800e924:	e7d8      	b.n	800e8d8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800e926:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800e92a:	4648      	mov	r0, r9
 800e92c:	f7fa ff6c 	bl	8009808 <ucdr_serialize_uint32_t>
 800e930:	4028      	ands	r0, r5
 800e932:	b2c5      	uxtb	r5, r0
 800e934:	e7c7      	b.n	800e8c6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800e936:	bf00      	nop

0800e938 <uxr_serialize_OBJK_DataReader_Binary>:
 800e938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e93a:	2202      	movs	r2, #2
 800e93c:	460c      	mov	r4, r1
 800e93e:	4606      	mov	r6, r0
 800e940:	f005 f8fc 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800e944:	78a1      	ldrb	r1, [r4, #2]
 800e946:	4605      	mov	r5, r0
 800e948:	4630      	mov	r0, r6
 800e94a:	f7fa fd19 	bl	8009380 <ucdr_serialize_bool>
 800e94e:	78a3      	ldrb	r3, [r4, #2]
 800e950:	4005      	ands	r5, r0
 800e952:	b2ed      	uxtb	r5, r5
 800e954:	b90b      	cbnz	r3, 800e95a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800e956:	4628      	mov	r0, r5
 800e958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e95a:	f104 0108 	add.w	r1, r4, #8
 800e95e:	4630      	mov	r0, r6
 800e960:	f7ff ff96 	bl	800e890 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800e964:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e968:	4607      	mov	r7, r0
 800e96a:	4630      	mov	r0, r6
 800e96c:	f7fa fd08 	bl	8009380 <ucdr_serialize_bool>
 800e970:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e974:	4038      	ands	r0, r7
 800e976:	b2c7      	uxtb	r7, r0
 800e978:	b95b      	cbnz	r3, 800e992 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800e97a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800e97e:	4630      	mov	r0, r6
 800e980:	f7fa fcfe 	bl	8009380 <ucdr_serialize_bool>
 800e984:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800e988:	4007      	ands	r7, r0
 800e98a:	b94b      	cbnz	r3, 800e9a0 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800e98c:	403d      	ands	r5, r7
 800e98e:	4628      	mov	r0, r5
 800e990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e992:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800e996:	4630      	mov	r0, r6
 800e998:	f7fb f98c 	bl	8009cb4 <ucdr_serialize_uint64_t>
 800e99c:	4007      	ands	r7, r0
 800e99e:	e7ec      	b.n	800e97a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800e9a0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f005 f9ea 	bl	8013d7c <ucdr_serialize_string>
 800e9a8:	4007      	ands	r7, r0
 800e9aa:	b2ff      	uxtb	r7, r7
 800e9ac:	e7ee      	b.n	800e98c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800e9ae:	bf00      	nop

0800e9b0 <uxr_serialize_OBJK_DataWriter_Binary>:
 800e9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9b2:	2202      	movs	r2, #2
 800e9b4:	460d      	mov	r5, r1
 800e9b6:	4606      	mov	r6, r0
 800e9b8:	f005 f8c0 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800e9bc:	78a9      	ldrb	r1, [r5, #2]
 800e9be:	4604      	mov	r4, r0
 800e9c0:	4630      	mov	r0, r6
 800e9c2:	f7fa fcdd 	bl	8009380 <ucdr_serialize_bool>
 800e9c6:	78ab      	ldrb	r3, [r5, #2]
 800e9c8:	4004      	ands	r4, r0
 800e9ca:	b2e4      	uxtb	r4, r4
 800e9cc:	b90b      	cbnz	r3, 800e9d2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9d2:	f105 0108 	add.w	r1, r5, #8
 800e9d6:	4630      	mov	r0, r6
 800e9d8:	f7ff ff5a 	bl	800e890 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800e9dc:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800e9e0:	4607      	mov	r7, r0
 800e9e2:	4630      	mov	r0, r6
 800e9e4:	f7fa fccc 	bl	8009380 <ucdr_serialize_bool>
 800e9e8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800e9ec:	4038      	ands	r0, r7
 800e9ee:	b2c7      	uxtb	r7, r0
 800e9f0:	b913      	cbnz	r3, 800e9f8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800e9f2:	403c      	ands	r4, r7
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9f8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800e9fc:	4630      	mov	r0, r6
 800e9fe:	f7fb f959 	bl	8009cb4 <ucdr_serialize_uint64_t>
 800ea02:	4007      	ands	r7, r0
 800ea04:	e7f5      	b.n	800e9f2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800ea06:	bf00      	nop

0800ea08 <uxr_deserialize_ObjectVariant>:
 800ea08:	b570      	push	{r4, r5, r6, lr}
 800ea0a:	4605      	mov	r5, r0
 800ea0c:	460e      	mov	r6, r1
 800ea0e:	f7fa fcfb 	bl	8009408 <ucdr_deserialize_uint8_t>
 800ea12:	b168      	cbz	r0, 800ea30 <uxr_deserialize_ObjectVariant+0x28>
 800ea14:	7833      	ldrb	r3, [r6, #0]
 800ea16:	3b01      	subs	r3, #1
 800ea18:	4604      	mov	r4, r0
 800ea1a:	2b0d      	cmp	r3, #13
 800ea1c:	d809      	bhi.n	800ea32 <uxr_deserialize_ObjectVariant+0x2a>
 800ea1e:	e8df f003 	tbb	[pc, r3]
 800ea22:	0a41      	.short	0x0a41
 800ea24:	0a0a2323 	.word	0x0a0a2323
 800ea28:	10080a0a 	.word	0x10080a0a
 800ea2c:	565c1010 	.word	0x565c1010
 800ea30:	2400      	movs	r4, #0
 800ea32:	4620      	mov	r0, r4
 800ea34:	bd70      	pop	{r4, r5, r6, pc}
 800ea36:	1d31      	adds	r1, r6, #4
 800ea38:	4628      	mov	r0, r5
 800ea3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea3e:	f7ff bd55 	b.w	800e4ec <uxr_deserialize_DATAWRITER_Representation>
 800ea42:	1d31      	adds	r1, r6, #4
 800ea44:	4628      	mov	r0, r5
 800ea46:	f7fa fcdf 	bl	8009408 <ucdr_deserialize_uint8_t>
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	d0f0      	beq.n	800ea30 <uxr_deserialize_ObjectVariant+0x28>
 800ea4e:	7933      	ldrb	r3, [r6, #4]
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d001      	beq.n	800ea58 <uxr_deserialize_ObjectVariant+0x50>
 800ea54:	2b02      	cmp	r3, #2
 800ea56:	d1ec      	bne.n	800ea32 <uxr_deserialize_ObjectVariant+0x2a>
 800ea58:	68b1      	ldr	r1, [r6, #8]
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea64:	f005 b99a 	b.w	8013d9c <ucdr_deserialize_string>
 800ea68:	1d31      	adds	r1, r6, #4
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	f7fa fccc 	bl	8009408 <ucdr_deserialize_uint8_t>
 800ea70:	4604      	mov	r4, r0
 800ea72:	b170      	cbz	r0, 800ea92 <uxr_deserialize_ObjectVariant+0x8a>
 800ea74:	7933      	ldrb	r3, [r6, #4]
 800ea76:	2b02      	cmp	r3, #2
 800ea78:	d04c      	beq.n	800eb14 <uxr_deserialize_ObjectVariant+0x10c>
 800ea7a:	2b03      	cmp	r3, #3
 800ea7c:	d109      	bne.n	800ea92 <uxr_deserialize_ObjectVariant+0x8a>
 800ea7e:	f106 0308 	add.w	r3, r6, #8
 800ea82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea86:	f106 010c 	add.w	r1, r6, #12
 800ea8a:	4628      	mov	r0, r5
 800ea8c:	f005 f95c 	bl	8013d48 <ucdr_deserialize_sequence_uint8_t>
 800ea90:	4604      	mov	r4, r0
 800ea92:	2202      	movs	r2, #2
 800ea94:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800ea98:	4628      	mov	r0, r5
 800ea9a:	f005 f8b3 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800ea9e:	4020      	ands	r0, r4
 800eaa0:	b2c4      	uxtb	r4, r0
 800eaa2:	e7c6      	b.n	800ea32 <uxr_deserialize_ObjectVariant+0x2a>
 800eaa4:	1d31      	adds	r1, r6, #4
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	f7fa fcae 	bl	8009408 <ucdr_deserialize_uint8_t>
 800eaac:	4604      	mov	r4, r0
 800eaae:	b130      	cbz	r0, 800eabe <uxr_deserialize_ObjectVariant+0xb6>
 800eab0:	7933      	ldrb	r3, [r6, #4]
 800eab2:	2b02      	cmp	r3, #2
 800eab4:	d036      	beq.n	800eb24 <uxr_deserialize_ObjectVariant+0x11c>
 800eab6:	2b03      	cmp	r3, #3
 800eab8:	d03c      	beq.n	800eb34 <uxr_deserialize_ObjectVariant+0x12c>
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d032      	beq.n	800eb24 <uxr_deserialize_ObjectVariant+0x11c>
 800eabe:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800eac2:	4628      	mov	r0, r5
 800eac4:	f7fb fa46 	bl	8009f54 <ucdr_deserialize_int16_t>
 800eac8:	4020      	ands	r0, r4
 800eaca:	b2c4      	uxtb	r4, r0
 800eacc:	e7b1      	b.n	800ea32 <uxr_deserialize_ObjectVariant+0x2a>
 800eace:	1d31      	adds	r1, r6, #4
 800ead0:	4628      	mov	r0, r5
 800ead2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ead6:	f7ff bbbf 	b.w	800e258 <uxr_deserialize_CLIENT_Representation>
 800eada:	2204      	movs	r2, #4
 800eadc:	18b1      	adds	r1, r6, r2
 800eade:	4628      	mov	r0, r5
 800eae0:	f005 f890 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800eae4:	2202      	movs	r2, #2
 800eae6:	f106 0108 	add.w	r1, r6, #8
 800eaea:	4604      	mov	r4, r0
 800eaec:	4628      	mov	r0, r5
 800eaee:	f005 f889 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800eaf2:	2202      	movs	r2, #2
 800eaf4:	4004      	ands	r4, r0
 800eaf6:	f106 010a 	add.w	r1, r6, #10
 800eafa:	4628      	mov	r0, r5
 800eafc:	f005 f882 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800eb00:	b2e4      	uxtb	r4, r4
 800eb02:	4603      	mov	r3, r0
 800eb04:	f106 010c 	add.w	r1, r6, #12
 800eb08:	4628      	mov	r0, r5
 800eb0a:	401c      	ands	r4, r3
 800eb0c:	f7fa fc4e 	bl	80093ac <ucdr_deserialize_bool>
 800eb10:	4004      	ands	r4, r0
 800eb12:	e78e      	b.n	800ea32 <uxr_deserialize_ObjectVariant+0x2a>
 800eb14:	68b1      	ldr	r1, [r6, #8]
 800eb16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	f005 f93e 	bl	8013d9c <ucdr_deserialize_string>
 800eb20:	4604      	mov	r4, r0
 800eb22:	e7b6      	b.n	800ea92 <uxr_deserialize_ObjectVariant+0x8a>
 800eb24:	68b1      	ldr	r1, [r6, #8]
 800eb26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	f005 f936 	bl	8013d9c <ucdr_deserialize_string>
 800eb30:	4604      	mov	r4, r0
 800eb32:	e7c4      	b.n	800eabe <uxr_deserialize_ObjectVariant+0xb6>
 800eb34:	f106 0308 	add.w	r3, r6, #8
 800eb38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb3c:	f106 010c 	add.w	r1, r6, #12
 800eb40:	4628      	mov	r0, r5
 800eb42:	f005 f901 	bl	8013d48 <ucdr_deserialize_sequence_uint8_t>
 800eb46:	4604      	mov	r4, r0
 800eb48:	e7b9      	b.n	800eabe <uxr_deserialize_ObjectVariant+0xb6>
 800eb4a:	bf00      	nop

0800eb4c <uxr_deserialize_BaseObjectRequest>:
 800eb4c:	b570      	push	{r4, r5, r6, lr}
 800eb4e:	2202      	movs	r2, #2
 800eb50:	4605      	mov	r5, r0
 800eb52:	460e      	mov	r6, r1
 800eb54:	f005 f856 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800eb58:	2202      	movs	r2, #2
 800eb5a:	4604      	mov	r4, r0
 800eb5c:	18b1      	adds	r1, r6, r2
 800eb5e:	4628      	mov	r0, r5
 800eb60:	f005 f850 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800eb64:	4020      	ands	r0, r4
 800eb66:	b2c0      	uxtb	r0, r0
 800eb68:	bd70      	pop	{r4, r5, r6, pc}
 800eb6a:	bf00      	nop

0800eb6c <uxr_serialize_ActivityInfoVariant>:
 800eb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb70:	460d      	mov	r5, r1
 800eb72:	7809      	ldrb	r1, [r1, #0]
 800eb74:	4607      	mov	r7, r0
 800eb76:	f7fa fc31 	bl	80093dc <ucdr_serialize_uint8_t>
 800eb7a:	4681      	mov	r9, r0
 800eb7c:	b138      	cbz	r0, 800eb8e <uxr_serialize_ActivityInfoVariant+0x22>
 800eb7e:	782b      	ldrb	r3, [r5, #0]
 800eb80:	2b06      	cmp	r3, #6
 800eb82:	f000 8082 	beq.w	800ec8a <uxr_serialize_ActivityInfoVariant+0x11e>
 800eb86:	2b0d      	cmp	r3, #13
 800eb88:	d016      	beq.n	800ebb8 <uxr_serialize_ActivityInfoVariant+0x4c>
 800eb8a:	2b05      	cmp	r3, #5
 800eb8c:	d002      	beq.n	800eb94 <uxr_serialize_ActivityInfoVariant+0x28>
 800eb8e:	4648      	mov	r0, r9
 800eb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb94:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800eb98:	4638      	mov	r0, r7
 800eb9a:	f7fb f95b 	bl	8009e54 <ucdr_serialize_int16_t>
 800eb9e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800eba2:	4681      	mov	r9, r0
 800eba4:	4638      	mov	r0, r7
 800eba6:	f7fb f885 	bl	8009cb4 <ucdr_serialize_uint64_t>
 800ebaa:	ea09 0000 	and.w	r0, r9, r0
 800ebae:	fa5f f980 	uxtb.w	r9, r0
 800ebb2:	4648      	mov	r0, r9
 800ebb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebb8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ebbc:	4638      	mov	r0, r7
 800ebbe:	f7fb f949 	bl	8009e54 <ucdr_serialize_int16_t>
 800ebc2:	68e9      	ldr	r1, [r5, #12]
 800ebc4:	4681      	mov	r9, r0
 800ebc6:	4638      	mov	r0, r7
 800ebc8:	f7fa fe1e 	bl	8009808 <ucdr_serialize_uint32_t>
 800ebcc:	68eb      	ldr	r3, [r5, #12]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d0eb      	beq.n	800ebaa <uxr_serialize_ActivityInfoVariant+0x3e>
 800ebd2:	b320      	cbz	r0, 800ec1e <uxr_serialize_ActivityInfoVariant+0xb2>
 800ebd4:	f105 080c 	add.w	r8, r5, #12
 800ebd8:	2600      	movs	r6, #0
 800ebda:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800ebde:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800ebe2:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800ebe6:	4638      	mov	r0, r7
 800ebe8:	f7fa fbf8 	bl	80093dc <ucdr_serialize_uint8_t>
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d053      	beq.n	800ec98 <uxr_serialize_ActivityInfoVariant+0x12c>
 800ebf0:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800ebf4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800ebf8:	0074      	lsls	r4, r6, #1
 800ebfa:	00c9      	lsls	r1, r1, #3
 800ebfc:	2b03      	cmp	r3, #3
 800ebfe:	d854      	bhi.n	800ecaa <uxr_serialize_ActivityInfoVariant+0x13e>
 800ec00:	e8df f003 	tbb	[pc, r3]
 800ec04:	02102132 	.word	0x02102132
 800ec08:	4441      	add	r1, r8
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	6889      	ldr	r1, [r1, #8]
 800ec0e:	f005 f8b5 	bl	8013d7c <ucdr_serialize_string>
 800ec12:	68ea      	ldr	r2, [r5, #12]
 800ec14:	3601      	adds	r6, #1
 800ec16:	4296      	cmp	r6, r2
 800ec18:	d242      	bcs.n	800eca0 <uxr_serialize_ActivityInfoVariant+0x134>
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	d1dd      	bne.n	800ebda <uxr_serialize_ActivityInfoVariant+0x6e>
 800ec1e:	f04f 0900 	mov.w	r9, #0
 800ec22:	e7b4      	b.n	800eb8e <uxr_serialize_ActivityInfoVariant+0x22>
 800ec24:	3108      	adds	r1, #8
 800ec26:	4441      	add	r1, r8
 800ec28:	2210      	movs	r2, #16
 800ec2a:	4638      	mov	r0, r7
 800ec2c:	f004 ff86 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800ec30:	4434      	add	r4, r6
 800ec32:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ec36:	4604      	mov	r4, r0
 800ec38:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ec3a:	4638      	mov	r0, r7
 800ec3c:	f7fa fde4 	bl	8009808 <ucdr_serialize_uint32_t>
 800ec40:	4020      	ands	r0, r4
 800ec42:	b2c0      	uxtb	r0, r0
 800ec44:	e7e5      	b.n	800ec12 <uxr_serialize_ActivityInfoVariant+0xa6>
 800ec46:	3108      	adds	r1, #8
 800ec48:	4441      	add	r1, r8
 800ec4a:	2204      	movs	r2, #4
 800ec4c:	4638      	mov	r0, r7
 800ec4e:	f004 ff75 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800ec52:	4434      	add	r4, r6
 800ec54:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ec58:	4604      	mov	r4, r0
 800ec5a:	8b19      	ldrh	r1, [r3, #24]
 800ec5c:	4638      	mov	r0, r7
 800ec5e:	f7fa fbe9 	bl	8009434 <ucdr_serialize_uint16_t>
 800ec62:	4020      	ands	r0, r4
 800ec64:	b2c0      	uxtb	r0, r0
 800ec66:	e7d4      	b.n	800ec12 <uxr_serialize_ActivityInfoVariant+0xa6>
 800ec68:	3108      	adds	r1, #8
 800ec6a:	4441      	add	r1, r8
 800ec6c:	2202      	movs	r2, #2
 800ec6e:	4638      	mov	r0, r7
 800ec70:	f004 ff64 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800ec74:	4434      	add	r4, r6
 800ec76:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ec7a:	4604      	mov	r4, r0
 800ec7c:	7d99      	ldrb	r1, [r3, #22]
 800ec7e:	4638      	mov	r0, r7
 800ec80:	f7fa fbac 	bl	80093dc <ucdr_serialize_uint8_t>
 800ec84:	4020      	ands	r0, r4
 800ec86:	b2c0      	uxtb	r0, r0
 800ec88:	e7c3      	b.n	800ec12 <uxr_serialize_ActivityInfoVariant+0xa6>
 800ec8a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ec8e:	4638      	mov	r0, r7
 800ec90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec94:	f7fb b8de 	b.w	8009e54 <ucdr_serialize_int16_t>
 800ec98:	68ea      	ldr	r2, [r5, #12]
 800ec9a:	3601      	adds	r6, #1
 800ec9c:	42b2      	cmp	r2, r6
 800ec9e:	d8be      	bhi.n	800ec1e <uxr_serialize_ActivityInfoVariant+0xb2>
 800eca0:	ea09 0900 	and.w	r9, r9, r0
 800eca4:	fa5f f989 	uxtb.w	r9, r9
 800eca8:	e771      	b.n	800eb8e <uxr_serialize_ActivityInfoVariant+0x22>
 800ecaa:	68eb      	ldr	r3, [r5, #12]
 800ecac:	3601      	adds	r6, #1
 800ecae:	429e      	cmp	r6, r3
 800ecb0:	f10a 0a18 	add.w	sl, sl, #24
 800ecb4:	d395      	bcc.n	800ebe2 <uxr_serialize_ActivityInfoVariant+0x76>
 800ecb6:	e76a      	b.n	800eb8e <uxr_serialize_ActivityInfoVariant+0x22>

0800ecb8 <uxr_deserialize_BaseObjectReply>:
 800ecb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecbc:	2202      	movs	r2, #2
 800ecbe:	4606      	mov	r6, r0
 800ecc0:	460f      	mov	r7, r1
 800ecc2:	f004 ff9f 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800ecc6:	2202      	movs	r2, #2
 800ecc8:	18b9      	adds	r1, r7, r2
 800ecca:	4605      	mov	r5, r0
 800eccc:	4630      	mov	r0, r6
 800ecce:	f004 ff99 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800ecd2:	1d39      	adds	r1, r7, #4
 800ecd4:	4680      	mov	r8, r0
 800ecd6:	4630      	mov	r0, r6
 800ecd8:	f7fa fb96 	bl	8009408 <ucdr_deserialize_uint8_t>
 800ecdc:	1d79      	adds	r1, r7, #5
 800ecde:	4604      	mov	r4, r0
 800ece0:	4630      	mov	r0, r6
 800ece2:	f7fa fb91 	bl	8009408 <ucdr_deserialize_uint8_t>
 800ece6:	ea05 0508 	and.w	r5, r5, r8
 800ecea:	402c      	ands	r4, r5
 800ecec:	4020      	ands	r0, r4
 800ecee:	b2c0      	uxtb	r0, r0
 800ecf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ecf4 <uxr_serialize_ReadSpecification>:
 800ecf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf8:	460e      	mov	r6, r1
 800ecfa:	7809      	ldrb	r1, [r1, #0]
 800ecfc:	4607      	mov	r7, r0
 800ecfe:	f7fa fb6d 	bl	80093dc <ucdr_serialize_uint8_t>
 800ed02:	7871      	ldrb	r1, [r6, #1]
 800ed04:	4604      	mov	r4, r0
 800ed06:	4638      	mov	r0, r7
 800ed08:	f7fa fb68 	bl	80093dc <ucdr_serialize_uint8_t>
 800ed0c:	78b1      	ldrb	r1, [r6, #2]
 800ed0e:	4004      	ands	r4, r0
 800ed10:	4638      	mov	r0, r7
 800ed12:	f7fa fb35 	bl	8009380 <ucdr_serialize_bool>
 800ed16:	78b3      	ldrb	r3, [r6, #2]
 800ed18:	b2e4      	uxtb	r4, r4
 800ed1a:	4004      	ands	r4, r0
 800ed1c:	b94b      	cbnz	r3, 800ed32 <uxr_serialize_ReadSpecification+0x3e>
 800ed1e:	7a31      	ldrb	r1, [r6, #8]
 800ed20:	4638      	mov	r0, r7
 800ed22:	f7fa fb2d 	bl	8009380 <ucdr_serialize_bool>
 800ed26:	7a33      	ldrb	r3, [r6, #8]
 800ed28:	4004      	ands	r4, r0
 800ed2a:	b943      	cbnz	r3, 800ed3e <uxr_serialize_ReadSpecification+0x4a>
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed32:	6871      	ldr	r1, [r6, #4]
 800ed34:	4638      	mov	r0, r7
 800ed36:	f005 f821 	bl	8013d7c <ucdr_serialize_string>
 800ed3a:	4004      	ands	r4, r0
 800ed3c:	e7ef      	b.n	800ed1e <uxr_serialize_ReadSpecification+0x2a>
 800ed3e:	8971      	ldrh	r1, [r6, #10]
 800ed40:	4638      	mov	r0, r7
 800ed42:	f7fa fb77 	bl	8009434 <ucdr_serialize_uint16_t>
 800ed46:	89b1      	ldrh	r1, [r6, #12]
 800ed48:	4605      	mov	r5, r0
 800ed4a:	4638      	mov	r0, r7
 800ed4c:	f7fa fb72 	bl	8009434 <ucdr_serialize_uint16_t>
 800ed50:	89f1      	ldrh	r1, [r6, #14]
 800ed52:	4005      	ands	r5, r0
 800ed54:	4638      	mov	r0, r7
 800ed56:	f7fa fb6d 	bl	8009434 <ucdr_serialize_uint16_t>
 800ed5a:	8a31      	ldrh	r1, [r6, #16]
 800ed5c:	4680      	mov	r8, r0
 800ed5e:	4638      	mov	r0, r7
 800ed60:	f7fa fb68 	bl	8009434 <ucdr_serialize_uint16_t>
 800ed64:	b2ed      	uxtb	r5, r5
 800ed66:	4025      	ands	r5, r4
 800ed68:	ea08 0505 	and.w	r5, r8, r5
 800ed6c:	ea00 0405 	and.w	r4, r0, r5
 800ed70:	4620      	mov	r0, r4
 800ed72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed76:	bf00      	nop

0800ed78 <uxr_serialize_CREATE_CLIENT_Payload>:
 800ed78:	f7ff ba16 	b.w	800e1a8 <uxr_serialize_CLIENT_Representation>

0800ed7c <uxr_serialize_CREATE_Payload>:
 800ed7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7e:	2202      	movs	r2, #2
 800ed80:	4607      	mov	r7, r0
 800ed82:	460e      	mov	r6, r1
 800ed84:	f004 feda 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800ed88:	2202      	movs	r2, #2
 800ed8a:	18b1      	adds	r1, r6, r2
 800ed8c:	4605      	mov	r5, r0
 800ed8e:	4638      	mov	r0, r7
 800ed90:	f004 fed4 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800ed94:	7931      	ldrb	r1, [r6, #4]
 800ed96:	4604      	mov	r4, r0
 800ed98:	4638      	mov	r0, r7
 800ed9a:	f7fa fb1f 	bl	80093dc <ucdr_serialize_uint8_t>
 800ed9e:	b170      	cbz	r0, 800edbe <uxr_serialize_CREATE_Payload+0x42>
 800eda0:	7933      	ldrb	r3, [r6, #4]
 800eda2:	402c      	ands	r4, r5
 800eda4:	3b01      	subs	r3, #1
 800eda6:	b2e4      	uxtb	r4, r4
 800eda8:	2b0d      	cmp	r3, #13
 800edaa:	d809      	bhi.n	800edc0 <uxr_serialize_CREATE_Payload+0x44>
 800edac:	e8df f003 	tbb	[pc, r3]
 800edb0:	23230a4c 	.word	0x23230a4c
 800edb4:	0a0a0a0a 	.word	0x0a0a0a0a
 800edb8:	12121208 	.word	0x12121208
 800edbc:	3e45      	.short	0x3e45
 800edbe:	2400      	movs	r4, #0
 800edc0:	4620      	mov	r0, r4
 800edc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edc4:	f106 0108 	add.w	r1, r6, #8
 800edc8:	4638      	mov	r0, r7
 800edca:	f7ff faf3 	bl	800e3b4 <uxr_serialize_DATAWRITER_Representation>
 800edce:	4004      	ands	r4, r0
 800edd0:	4620      	mov	r0, r4
 800edd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edd4:	7a31      	ldrb	r1, [r6, #8]
 800edd6:	4638      	mov	r0, r7
 800edd8:	f7fa fb00 	bl	80093dc <ucdr_serialize_uint8_t>
 800eddc:	2800      	cmp	r0, #0
 800edde:	d0ee      	beq.n	800edbe <uxr_serialize_CREATE_Payload+0x42>
 800ede0:	7a33      	ldrb	r3, [r6, #8]
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	d001      	beq.n	800edea <uxr_serialize_CREATE_Payload+0x6e>
 800ede6:	2b02      	cmp	r3, #2
 800ede8:	d1ea      	bne.n	800edc0 <uxr_serialize_CREATE_Payload+0x44>
 800edea:	68f1      	ldr	r1, [r6, #12]
 800edec:	4638      	mov	r0, r7
 800edee:	f004 ffc5 	bl	8013d7c <ucdr_serialize_string>
 800edf2:	4004      	ands	r4, r0
 800edf4:	e7e4      	b.n	800edc0 <uxr_serialize_CREATE_Payload+0x44>
 800edf6:	7a31      	ldrb	r1, [r6, #8]
 800edf8:	4638      	mov	r0, r7
 800edfa:	f7fa faef 	bl	80093dc <ucdr_serialize_uint8_t>
 800edfe:	4605      	mov	r5, r0
 800ee00:	b158      	cbz	r0, 800ee1a <uxr_serialize_CREATE_Payload+0x9e>
 800ee02:	7a33      	ldrb	r3, [r6, #8]
 800ee04:	2b02      	cmp	r3, #2
 800ee06:	d034      	beq.n	800ee72 <uxr_serialize_CREATE_Payload+0xf6>
 800ee08:	2b03      	cmp	r3, #3
 800ee0a:	d106      	bne.n	800ee1a <uxr_serialize_CREATE_Payload+0x9e>
 800ee0c:	68f2      	ldr	r2, [r6, #12]
 800ee0e:	f106 0110 	add.w	r1, r6, #16
 800ee12:	4638      	mov	r0, r7
 800ee14:	f004 ff86 	bl	8013d24 <ucdr_serialize_sequence_uint8_t>
 800ee18:	4605      	mov	r5, r0
 800ee1a:	2202      	movs	r2, #2
 800ee1c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800ee20:	4638      	mov	r0, r7
 800ee22:	f004 fe8b 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800ee26:	4028      	ands	r0, r5
 800ee28:	4004      	ands	r4, r0
 800ee2a:	e7c9      	b.n	800edc0 <uxr_serialize_CREATE_Payload+0x44>
 800ee2c:	f106 0108 	add.w	r1, r6, #8
 800ee30:	4638      	mov	r0, r7
 800ee32:	f7ff f9b9 	bl	800e1a8 <uxr_serialize_CLIENT_Representation>
 800ee36:	4004      	ands	r4, r0
 800ee38:	e7c2      	b.n	800edc0 <uxr_serialize_CREATE_Payload+0x44>
 800ee3a:	f106 0108 	add.w	r1, r6, #8
 800ee3e:	4638      	mov	r0, r7
 800ee40:	f7ff fa6e 	bl	800e320 <uxr_serialize_AGENT_Representation>
 800ee44:	4004      	ands	r4, r0
 800ee46:	e7bb      	b.n	800edc0 <uxr_serialize_CREATE_Payload+0x44>
 800ee48:	7a31      	ldrb	r1, [r6, #8]
 800ee4a:	4638      	mov	r0, r7
 800ee4c:	f7fa fac6 	bl	80093dc <ucdr_serialize_uint8_t>
 800ee50:	4605      	mov	r5, r0
 800ee52:	b130      	cbz	r0, 800ee62 <uxr_serialize_CREATE_Payload+0xe6>
 800ee54:	7a33      	ldrb	r3, [r6, #8]
 800ee56:	2b02      	cmp	r3, #2
 800ee58:	d011      	beq.n	800ee7e <uxr_serialize_CREATE_Payload+0x102>
 800ee5a:	2b03      	cmp	r3, #3
 800ee5c:	d015      	beq.n	800ee8a <uxr_serialize_CREATE_Payload+0x10e>
 800ee5e:	2b01      	cmp	r3, #1
 800ee60:	d00d      	beq.n	800ee7e <uxr_serialize_CREATE_Payload+0x102>
 800ee62:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800ee66:	4638      	mov	r0, r7
 800ee68:	f7fa fff4 	bl	8009e54 <ucdr_serialize_int16_t>
 800ee6c:	4028      	ands	r0, r5
 800ee6e:	4004      	ands	r4, r0
 800ee70:	e7a6      	b.n	800edc0 <uxr_serialize_CREATE_Payload+0x44>
 800ee72:	68f1      	ldr	r1, [r6, #12]
 800ee74:	4638      	mov	r0, r7
 800ee76:	f004 ff81 	bl	8013d7c <ucdr_serialize_string>
 800ee7a:	4605      	mov	r5, r0
 800ee7c:	e7cd      	b.n	800ee1a <uxr_serialize_CREATE_Payload+0x9e>
 800ee7e:	68f1      	ldr	r1, [r6, #12]
 800ee80:	4638      	mov	r0, r7
 800ee82:	f004 ff7b 	bl	8013d7c <ucdr_serialize_string>
 800ee86:	4605      	mov	r5, r0
 800ee88:	e7eb      	b.n	800ee62 <uxr_serialize_CREATE_Payload+0xe6>
 800ee8a:	68f2      	ldr	r2, [r6, #12]
 800ee8c:	f106 0110 	add.w	r1, r6, #16
 800ee90:	4638      	mov	r0, r7
 800ee92:	f004 ff47 	bl	8013d24 <ucdr_serialize_sequence_uint8_t>
 800ee96:	4605      	mov	r5, r0
 800ee98:	e7e3      	b.n	800ee62 <uxr_serialize_CREATE_Payload+0xe6>
 800ee9a:	bf00      	nop

0800ee9c <uxr_deserialize_GET_INFO_Payload>:
 800ee9c:	b570      	push	{r4, r5, r6, lr}
 800ee9e:	2202      	movs	r2, #2
 800eea0:	4605      	mov	r5, r0
 800eea2:	460e      	mov	r6, r1
 800eea4:	f004 feae 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800eea8:	2202      	movs	r2, #2
 800eeaa:	18b1      	adds	r1, r6, r2
 800eeac:	4604      	mov	r4, r0
 800eeae:	4628      	mov	r0, r5
 800eeb0:	f004 fea8 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800eeb4:	1d31      	adds	r1, r6, #4
 800eeb6:	4004      	ands	r4, r0
 800eeb8:	4628      	mov	r0, r5
 800eeba:	f7fa fdd5 	bl	8009a68 <ucdr_deserialize_uint32_t>
 800eebe:	b2e4      	uxtb	r4, r4
 800eec0:	4020      	ands	r0, r4
 800eec2:	bd70      	pop	{r4, r5, r6, pc}

0800eec4 <uxr_serialize_DELETE_Payload>:
 800eec4:	b570      	push	{r4, r5, r6, lr}
 800eec6:	2202      	movs	r2, #2
 800eec8:	4605      	mov	r5, r0
 800eeca:	460e      	mov	r6, r1
 800eecc:	f004 fe36 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800eed0:	2202      	movs	r2, #2
 800eed2:	4604      	mov	r4, r0
 800eed4:	18b1      	adds	r1, r6, r2
 800eed6:	4628      	mov	r0, r5
 800eed8:	f004 fe30 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800eedc:	4020      	ands	r0, r4
 800eede:	b2c0      	uxtb	r0, r0
 800eee0:	bd70      	pop	{r4, r5, r6, pc}
 800eee2:	bf00      	nop

0800eee4 <uxr_deserialize_STATUS_AGENT_Payload>:
 800eee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eee8:	4605      	mov	r5, r0
 800eeea:	460e      	mov	r6, r1
 800eeec:	f7fa fa8c 	bl	8009408 <ucdr_deserialize_uint8_t>
 800eef0:	1c71      	adds	r1, r6, #1
 800eef2:	4604      	mov	r4, r0
 800eef4:	4628      	mov	r0, r5
 800eef6:	f7fa fa87 	bl	8009408 <ucdr_deserialize_uint8_t>
 800eefa:	2204      	movs	r2, #4
 800eefc:	18b1      	adds	r1, r6, r2
 800eefe:	4680      	mov	r8, r0
 800ef00:	4628      	mov	r0, r5
 800ef02:	f004 fe7f 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800ef06:	f106 0108 	add.w	r1, r6, #8
 800ef0a:	4607      	mov	r7, r0
 800ef0c:	2202      	movs	r2, #2
 800ef0e:	4628      	mov	r0, r5
 800ef10:	f004 fe78 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800ef14:	ea04 0308 	and.w	r3, r4, r8
 800ef18:	b2db      	uxtb	r3, r3
 800ef1a:	ea03 0407 	and.w	r4, r3, r7
 800ef1e:	2202      	movs	r2, #2
 800ef20:	4607      	mov	r7, r0
 800ef22:	f106 010a 	add.w	r1, r6, #10
 800ef26:	4628      	mov	r0, r5
 800ef28:	f004 fe6c 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800ef2c:	f106 010c 	add.w	r1, r6, #12
 800ef30:	4603      	mov	r3, r0
 800ef32:	4628      	mov	r0, r5
 800ef34:	461d      	mov	r5, r3
 800ef36:	f7fa fa39 	bl	80093ac <ucdr_deserialize_bool>
 800ef3a:	403c      	ands	r4, r7
 800ef3c:	4025      	ands	r5, r4
 800ef3e:	4028      	ands	r0, r5
 800ef40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ef44 <uxr_deserialize_STATUS_Payload>:
 800ef44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef48:	2202      	movs	r2, #2
 800ef4a:	4606      	mov	r6, r0
 800ef4c:	460f      	mov	r7, r1
 800ef4e:	f004 fe59 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800ef52:	2202      	movs	r2, #2
 800ef54:	18b9      	adds	r1, r7, r2
 800ef56:	4605      	mov	r5, r0
 800ef58:	4630      	mov	r0, r6
 800ef5a:	f004 fe53 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800ef5e:	1d39      	adds	r1, r7, #4
 800ef60:	4680      	mov	r8, r0
 800ef62:	4630      	mov	r0, r6
 800ef64:	f7fa fa50 	bl	8009408 <ucdr_deserialize_uint8_t>
 800ef68:	1d79      	adds	r1, r7, #5
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	f7fa fa4b 	bl	8009408 <ucdr_deserialize_uint8_t>
 800ef72:	ea05 0508 	and.w	r5, r5, r8
 800ef76:	402c      	ands	r4, r5
 800ef78:	4020      	ands	r0, r4
 800ef7a:	b2c0      	uxtb	r0, r0
 800ef7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ef80 <uxr_serialize_INFO_Payload>:
 800ef80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef84:	2202      	movs	r2, #2
 800ef86:	460c      	mov	r4, r1
 800ef88:	4605      	mov	r5, r0
 800ef8a:	f004 fdd7 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800ef8e:	2202      	movs	r2, #2
 800ef90:	18a1      	adds	r1, r4, r2
 800ef92:	4680      	mov	r8, r0
 800ef94:	4628      	mov	r0, r5
 800ef96:	f004 fdd1 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800ef9a:	7921      	ldrb	r1, [r4, #4]
 800ef9c:	4607      	mov	r7, r0
 800ef9e:	4628      	mov	r0, r5
 800efa0:	f7fa fa1c 	bl	80093dc <ucdr_serialize_uint8_t>
 800efa4:	7961      	ldrb	r1, [r4, #5]
 800efa6:	4606      	mov	r6, r0
 800efa8:	4628      	mov	r0, r5
 800efaa:	f7fa fa17 	bl	80093dc <ucdr_serialize_uint8_t>
 800efae:	ea08 0807 	and.w	r8, r8, r7
 800efb2:	ea06 0608 	and.w	r6, r6, r8
 800efb6:	4006      	ands	r6, r0
 800efb8:	7a21      	ldrb	r1, [r4, #8]
 800efba:	4628      	mov	r0, r5
 800efbc:	f7fa f9e0 	bl	8009380 <ucdr_serialize_bool>
 800efc0:	7a23      	ldrb	r3, [r4, #8]
 800efc2:	b2f7      	uxtb	r7, r6
 800efc4:	4606      	mov	r6, r0
 800efc6:	b96b      	cbnz	r3, 800efe4 <uxr_serialize_INFO_Payload+0x64>
 800efc8:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800efcc:	4628      	mov	r0, r5
 800efce:	f7fa f9d7 	bl	8009380 <ucdr_serialize_bool>
 800efd2:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800efd6:	4030      	ands	r0, r6
 800efd8:	b2c6      	uxtb	r6, r0
 800efda:	b983      	cbnz	r3, 800effe <uxr_serialize_INFO_Payload+0x7e>
 800efdc:	ea06 0007 	and.w	r0, r6, r7
 800efe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe4:	7b21      	ldrb	r1, [r4, #12]
 800efe6:	4628      	mov	r0, r5
 800efe8:	f7fa f9f8 	bl	80093dc <ucdr_serialize_uint8_t>
 800efec:	b188      	cbz	r0, 800f012 <uxr_serialize_INFO_Payload+0x92>
 800efee:	f104 010c 	add.w	r1, r4, #12
 800eff2:	4628      	mov	r0, r5
 800eff4:	f7ff fa06 	bl	800e404 <uxr_serialize_ObjectVariant.part.0>
 800eff8:	4030      	ands	r0, r6
 800effa:	b2c6      	uxtb	r6, r0
 800effc:	e7e4      	b.n	800efc8 <uxr_serialize_INFO_Payload+0x48>
 800effe:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800f002:	4628      	mov	r0, r5
 800f004:	f7ff fdb2 	bl	800eb6c <uxr_serialize_ActivityInfoVariant>
 800f008:	4006      	ands	r6, r0
 800f00a:	ea06 0007 	and.w	r0, r6, r7
 800f00e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f012:	4606      	mov	r6, r0
 800f014:	e7d8      	b.n	800efc8 <uxr_serialize_INFO_Payload+0x48>
 800f016:	bf00      	nop

0800f018 <uxr_serialize_READ_DATA_Payload>:
 800f018:	b570      	push	{r4, r5, r6, lr}
 800f01a:	2202      	movs	r2, #2
 800f01c:	4605      	mov	r5, r0
 800f01e:	460e      	mov	r6, r1
 800f020:	f004 fd8c 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800f024:	2202      	movs	r2, #2
 800f026:	18b1      	adds	r1, r6, r2
 800f028:	4604      	mov	r4, r0
 800f02a:	4628      	mov	r0, r5
 800f02c:	f004 fd86 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800f030:	1d31      	adds	r1, r6, #4
 800f032:	4004      	ands	r4, r0
 800f034:	4628      	mov	r0, r5
 800f036:	f7ff fe5d 	bl	800ecf4 <uxr_serialize_ReadSpecification>
 800f03a:	b2e4      	uxtb	r4, r4
 800f03c:	4020      	ands	r0, r4
 800f03e:	bd70      	pop	{r4, r5, r6, pc}

0800f040 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f040:	b570      	push	{r4, r5, r6, lr}
 800f042:	2202      	movs	r2, #2
 800f044:	4605      	mov	r5, r0
 800f046:	460e      	mov	r6, r1
 800f048:	f004 fd78 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800f04c:	2202      	movs	r2, #2
 800f04e:	4604      	mov	r4, r0
 800f050:	18b1      	adds	r1, r6, r2
 800f052:	4628      	mov	r0, r5
 800f054:	f004 fd72 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800f058:	4020      	ands	r0, r4
 800f05a:	b2c0      	uxtb	r0, r0
 800f05c:	bd70      	pop	{r4, r5, r6, pc}
 800f05e:	bf00      	nop

0800f060 <uxr_serialize_ACKNACK_Payload>:
 800f060:	b570      	push	{r4, r5, r6, lr}
 800f062:	460c      	mov	r4, r1
 800f064:	460e      	mov	r6, r1
 800f066:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f06a:	4605      	mov	r5, r0
 800f06c:	f7fa f9e2 	bl	8009434 <ucdr_serialize_uint16_t>
 800f070:	2202      	movs	r2, #2
 800f072:	4621      	mov	r1, r4
 800f074:	4604      	mov	r4, r0
 800f076:	4628      	mov	r0, r5
 800f078:	f004 fd60 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800f07c:	7931      	ldrb	r1, [r6, #4]
 800f07e:	4004      	ands	r4, r0
 800f080:	4628      	mov	r0, r5
 800f082:	f7fa f9ab 	bl	80093dc <ucdr_serialize_uint8_t>
 800f086:	b2e4      	uxtb	r4, r4
 800f088:	4020      	ands	r0, r4
 800f08a:	bd70      	pop	{r4, r5, r6, pc}

0800f08c <uxr_deserialize_ACKNACK_Payload>:
 800f08c:	b570      	push	{r4, r5, r6, lr}
 800f08e:	4605      	mov	r5, r0
 800f090:	460e      	mov	r6, r1
 800f092:	f7fa facf 	bl	8009634 <ucdr_deserialize_uint16_t>
 800f096:	2202      	movs	r2, #2
 800f098:	18b1      	adds	r1, r6, r2
 800f09a:	4604      	mov	r4, r0
 800f09c:	4628      	mov	r0, r5
 800f09e:	f004 fdb1 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800f0a2:	1d31      	adds	r1, r6, #4
 800f0a4:	4004      	ands	r4, r0
 800f0a6:	4628      	mov	r0, r5
 800f0a8:	f7fa f9ae 	bl	8009408 <ucdr_deserialize_uint8_t>
 800f0ac:	b2e4      	uxtb	r4, r4
 800f0ae:	4020      	ands	r0, r4
 800f0b0:	bd70      	pop	{r4, r5, r6, pc}
 800f0b2:	bf00      	nop

0800f0b4 <uxr_serialize_HEARTBEAT_Payload>:
 800f0b4:	b570      	push	{r4, r5, r6, lr}
 800f0b6:	460d      	mov	r5, r1
 800f0b8:	8809      	ldrh	r1, [r1, #0]
 800f0ba:	4606      	mov	r6, r0
 800f0bc:	f7fa f9ba 	bl	8009434 <ucdr_serialize_uint16_t>
 800f0c0:	8869      	ldrh	r1, [r5, #2]
 800f0c2:	4604      	mov	r4, r0
 800f0c4:	4630      	mov	r0, r6
 800f0c6:	f7fa f9b5 	bl	8009434 <ucdr_serialize_uint16_t>
 800f0ca:	7929      	ldrb	r1, [r5, #4]
 800f0cc:	4004      	ands	r4, r0
 800f0ce:	4630      	mov	r0, r6
 800f0d0:	f7fa f984 	bl	80093dc <ucdr_serialize_uint8_t>
 800f0d4:	b2e4      	uxtb	r4, r4
 800f0d6:	4020      	ands	r0, r4
 800f0d8:	bd70      	pop	{r4, r5, r6, pc}
 800f0da:	bf00      	nop

0800f0dc <uxr_deserialize_HEARTBEAT_Payload>:
 800f0dc:	b570      	push	{r4, r5, r6, lr}
 800f0de:	4605      	mov	r5, r0
 800f0e0:	460e      	mov	r6, r1
 800f0e2:	f7fa faa7 	bl	8009634 <ucdr_deserialize_uint16_t>
 800f0e6:	1cb1      	adds	r1, r6, #2
 800f0e8:	4604      	mov	r4, r0
 800f0ea:	4628      	mov	r0, r5
 800f0ec:	f7fa faa2 	bl	8009634 <ucdr_deserialize_uint16_t>
 800f0f0:	1d31      	adds	r1, r6, #4
 800f0f2:	4004      	ands	r4, r0
 800f0f4:	4628      	mov	r0, r5
 800f0f6:	f7fa f987 	bl	8009408 <ucdr_deserialize_uint8_t>
 800f0fa:	b2e4      	uxtb	r4, r4
 800f0fc:	4020      	ands	r0, r4
 800f0fe:	bd70      	pop	{r4, r5, r6, pc}

0800f100 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800f100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f104:	4605      	mov	r5, r0
 800f106:	460e      	mov	r6, r1
 800f108:	f7fb f830 	bl	800a16c <ucdr_deserialize_int32_t>
 800f10c:	1d31      	adds	r1, r6, #4
 800f10e:	4607      	mov	r7, r0
 800f110:	4628      	mov	r0, r5
 800f112:	f7fa fca9 	bl	8009a68 <ucdr_deserialize_uint32_t>
 800f116:	f106 0108 	add.w	r1, r6, #8
 800f11a:	4680      	mov	r8, r0
 800f11c:	4628      	mov	r0, r5
 800f11e:	f7fb f825 	bl	800a16c <ucdr_deserialize_int32_t>
 800f122:	f106 010c 	add.w	r1, r6, #12
 800f126:	4604      	mov	r4, r0
 800f128:	4628      	mov	r0, r5
 800f12a:	f7fa fc9d 	bl	8009a68 <ucdr_deserialize_uint32_t>
 800f12e:	ea07 0708 	and.w	r7, r7, r8
 800f132:	403c      	ands	r4, r7
 800f134:	f106 0110 	add.w	r1, r6, #16
 800f138:	4004      	ands	r4, r0
 800f13a:	4628      	mov	r0, r5
 800f13c:	f7fb f816 	bl	800a16c <ucdr_deserialize_int32_t>
 800f140:	f106 0114 	add.w	r1, r6, #20
 800f144:	4607      	mov	r7, r0
 800f146:	4628      	mov	r0, r5
 800f148:	f7fa fc8e 	bl	8009a68 <ucdr_deserialize_uint32_t>
 800f14c:	b2e4      	uxtb	r4, r4
 800f14e:	403c      	ands	r4, r7
 800f150:	4020      	ands	r0, r4
 800f152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f156:	bf00      	nop

0800f158 <uxr_serialize_SampleIdentity>:
 800f158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f15c:	220c      	movs	r2, #12
 800f15e:	4604      	mov	r4, r0
 800f160:	460d      	mov	r5, r1
 800f162:	f004 fceb 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800f166:	2203      	movs	r2, #3
 800f168:	f105 010c 	add.w	r1, r5, #12
 800f16c:	4607      	mov	r7, r0
 800f16e:	4620      	mov	r0, r4
 800f170:	f004 fce4 	bl	8013b3c <ucdr_serialize_array_uint8_t>
 800f174:	7be9      	ldrb	r1, [r5, #15]
 800f176:	4680      	mov	r8, r0
 800f178:	4620      	mov	r0, r4
 800f17a:	f7fa f92f 	bl	80093dc <ucdr_serialize_uint8_t>
 800f17e:	6929      	ldr	r1, [r5, #16]
 800f180:	4606      	mov	r6, r0
 800f182:	4620      	mov	r0, r4
 800f184:	f7fa ff5a 	bl	800a03c <ucdr_serialize_int32_t>
 800f188:	6969      	ldr	r1, [r5, #20]
 800f18a:	4603      	mov	r3, r0
 800f18c:	4620      	mov	r0, r4
 800f18e:	ea07 0708 	and.w	r7, r7, r8
 800f192:	461c      	mov	r4, r3
 800f194:	f7fa fb38 	bl	8009808 <ucdr_serialize_uint32_t>
 800f198:	403e      	ands	r6, r7
 800f19a:	4034      	ands	r4, r6
 800f19c:	4020      	ands	r0, r4
 800f19e:	b2c0      	uxtb	r0, r0
 800f1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f1a4 <uxr_deserialize_SampleIdentity>:
 800f1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1a8:	220c      	movs	r2, #12
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	460d      	mov	r5, r1
 800f1ae:	f004 fd29 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800f1b2:	2203      	movs	r2, #3
 800f1b4:	f105 010c 	add.w	r1, r5, #12
 800f1b8:	4607      	mov	r7, r0
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	f004 fd22 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 800f1c0:	f105 010f 	add.w	r1, r5, #15
 800f1c4:	4680      	mov	r8, r0
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f7fa f91e 	bl	8009408 <ucdr_deserialize_uint8_t>
 800f1cc:	f105 0110 	add.w	r1, r5, #16
 800f1d0:	4606      	mov	r6, r0
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f7fa ffca 	bl	800a16c <ucdr_deserialize_int32_t>
 800f1d8:	f105 0114 	add.w	r1, r5, #20
 800f1dc:	4603      	mov	r3, r0
 800f1de:	4620      	mov	r0, r4
 800f1e0:	ea07 0708 	and.w	r7, r7, r8
 800f1e4:	461c      	mov	r4, r3
 800f1e6:	f7fa fc3f 	bl	8009a68 <ucdr_deserialize_uint32_t>
 800f1ea:	403e      	ands	r6, r7
 800f1ec:	4034      	ands	r4, r6
 800f1ee:	4020      	ands	r0, r4
 800f1f0:	b2c0      	uxtb	r0, r0
 800f1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1f6:	bf00      	nop

0800f1f8 <rcl_client_get_rmw_handle>:
 800f1f8:	b118      	cbz	r0, 800f202 <rcl_client_get_rmw_handle+0xa>
 800f1fa:	6800      	ldr	r0, [r0, #0]
 800f1fc:	b108      	cbz	r0, 800f202 <rcl_client_get_rmw_handle+0xa>
 800f1fe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f202:	4770      	bx	lr

0800f204 <rcl_send_request>:
 800f204:	b570      	push	{r4, r5, r6, lr}
 800f206:	b082      	sub	sp, #8
 800f208:	b1e8      	cbz	r0, 800f246 <rcl_send_request+0x42>
 800f20a:	4604      	mov	r4, r0
 800f20c:	6800      	ldr	r0, [r0, #0]
 800f20e:	b1d0      	cbz	r0, 800f246 <rcl_send_request+0x42>
 800f210:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800f214:	b1bb      	cbz	r3, 800f246 <rcl_send_request+0x42>
 800f216:	460e      	mov	r6, r1
 800f218:	b1d1      	cbz	r1, 800f250 <rcl_send_request+0x4c>
 800f21a:	4615      	mov	r5, r2
 800f21c:	b1c2      	cbz	r2, 800f250 <rcl_send_request+0x4c>
 800f21e:	2105      	movs	r1, #5
 800f220:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f224:	f002 fd74 	bl	8011d10 <__atomic_load_8>
 800f228:	6823      	ldr	r3, [r4, #0]
 800f22a:	e9c5 0100 	strd	r0, r1, [r5]
 800f22e:	462a      	mov	r2, r5
 800f230:	4631      	mov	r1, r6
 800f232:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f236:	f003 ff1f 	bl	8013078 <rmw_send_request>
 800f23a:	4606      	mov	r6, r0
 800f23c:	b160      	cbz	r0, 800f258 <rcl_send_request+0x54>
 800f23e:	2601      	movs	r6, #1
 800f240:	4630      	mov	r0, r6
 800f242:	b002      	add	sp, #8
 800f244:	bd70      	pop	{r4, r5, r6, pc}
 800f246:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800f24a:	4630      	mov	r0, r6
 800f24c:	b002      	add	sp, #8
 800f24e:	bd70      	pop	{r4, r5, r6, pc}
 800f250:	260b      	movs	r6, #11
 800f252:	4630      	mov	r0, r6
 800f254:	b002      	add	sp, #8
 800f256:	bd70      	pop	{r4, r5, r6, pc}
 800f258:	6820      	ldr	r0, [r4, #0]
 800f25a:	2105      	movs	r1, #5
 800f25c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f260:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f264:	9100      	str	r1, [sp, #0]
 800f266:	f002 fdbf 	bl	8011de8 <__atomic_exchange_8>
 800f26a:	4630      	mov	r0, r6
 800f26c:	b002      	add	sp, #8
 800f26e:	bd70      	pop	{r4, r5, r6, pc}

0800f270 <rcl_take_response>:
 800f270:	b570      	push	{r4, r5, r6, lr}
 800f272:	468e      	mov	lr, r1
 800f274:	460c      	mov	r4, r1
 800f276:	4616      	mov	r6, r2
 800f278:	4605      	mov	r5, r0
 800f27a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f27e:	b08c      	sub	sp, #48	@ 0x30
 800f280:	f10d 0c18 	add.w	ip, sp, #24
 800f284:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f288:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f28c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f290:	b35d      	cbz	r5, 800f2ea <rcl_take_response+0x7a>
 800f292:	682b      	ldr	r3, [r5, #0]
 800f294:	b34b      	cbz	r3, 800f2ea <rcl_take_response+0x7a>
 800f296:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f29a:	b330      	cbz	r0, 800f2ea <rcl_take_response+0x7a>
 800f29c:	b346      	cbz	r6, 800f2f0 <rcl_take_response+0x80>
 800f29e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800f2f8 <rcl_take_response+0x88>
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	f88d 3007 	strb.w	r3, [sp, #7]
 800f2a8:	4632      	mov	r2, r6
 800f2aa:	f10d 0307 	add.w	r3, sp, #7
 800f2ae:	a902      	add	r1, sp, #8
 800f2b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f2b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f2b8:	f003 ffe6 	bl	8013288 <rmw_take_response>
 800f2bc:	4605      	mov	r5, r0
 800f2be:	b9c8      	cbnz	r0, 800f2f4 <rcl_take_response+0x84>
 800f2c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f2c4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f2c8:	2a00      	cmp	r2, #0
 800f2ca:	bf08      	it	eq
 800f2cc:	461d      	moveq	r5, r3
 800f2ce:	f10d 0e18 	add.w	lr, sp, #24
 800f2d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f2d6:	46a4      	mov	ip, r4
 800f2d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f2dc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f2e0:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	b00c      	add	sp, #48	@ 0x30
 800f2e8:	bd70      	pop	{r4, r5, r6, pc}
 800f2ea:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800f2ee:	e7ee      	b.n	800f2ce <rcl_take_response+0x5e>
 800f2f0:	250b      	movs	r5, #11
 800f2f2:	e7ec      	b.n	800f2ce <rcl_take_response+0x5e>
 800f2f4:	2501      	movs	r5, #1
 800f2f6:	e7ea      	b.n	800f2ce <rcl_take_response+0x5e>
	...

0800f300 <rcl_client_is_valid>:
 800f300:	b130      	cbz	r0, 800f310 <rcl_client_is_valid+0x10>
 800f302:	6800      	ldr	r0, [r0, #0]
 800f304:	b120      	cbz	r0, 800f310 <rcl_client_is_valid+0x10>
 800f306:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f30a:	3800      	subs	r0, #0
 800f30c:	bf18      	it	ne
 800f30e:	2001      	movne	r0, #1
 800f310:	4770      	bx	lr
 800f312:	bf00      	nop

0800f314 <rcl_convert_rmw_ret_to_rcl_ret>:
 800f314:	280b      	cmp	r0, #11
 800f316:	dc0d      	bgt.n	800f334 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f318:	2800      	cmp	r0, #0
 800f31a:	db09      	blt.n	800f330 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f31c:	280b      	cmp	r0, #11
 800f31e:	d807      	bhi.n	800f330 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f320:	e8df f000 	tbb	[pc, r0]
 800f324:	07060607 	.word	0x07060607
 800f328:	06060606 	.word	0x06060606
 800f32c:	07070606 	.word	0x07070606
 800f330:	2001      	movs	r0, #1
 800f332:	4770      	bx	lr
 800f334:	28cb      	cmp	r0, #203	@ 0xcb
 800f336:	bf18      	it	ne
 800f338:	2001      	movne	r0, #1
 800f33a:	4770      	bx	lr

0800f33c <rcl_get_zero_initialized_context>:
 800f33c:	4a03      	ldr	r2, [pc, #12]	@ (800f34c <rcl_get_zero_initialized_context+0x10>)
 800f33e:	4603      	mov	r3, r0
 800f340:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f344:	e883 0003 	stmia.w	r3, {r0, r1}
 800f348:	4618      	mov	r0, r3
 800f34a:	4770      	bx	lr
 800f34c:	08017b14 	.word	0x08017b14

0800f350 <rcl_context_is_valid>:
 800f350:	b118      	cbz	r0, 800f35a <rcl_context_is_valid+0xa>
 800f352:	6840      	ldr	r0, [r0, #4]
 800f354:	3800      	subs	r0, #0
 800f356:	bf18      	it	ne
 800f358:	2001      	movne	r0, #1
 800f35a:	4770      	bx	lr

0800f35c <__cleanup_context>:
 800f35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f360:	4606      	mov	r6, r0
 800f362:	6800      	ldr	r0, [r0, #0]
 800f364:	2300      	movs	r3, #0
 800f366:	6073      	str	r3, [r6, #4]
 800f368:	2800      	cmp	r0, #0
 800f36a:	d049      	beq.n	800f400 <__cleanup_context+0xa4>
 800f36c:	6947      	ldr	r7, [r0, #20]
 800f36e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f372:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800f376:	b137      	cbz	r7, 800f386 <__cleanup_context+0x2a>
 800f378:	3014      	adds	r0, #20
 800f37a:	f000 f9bb 	bl	800f6f4 <rcl_init_options_fini>
 800f37e:	4607      	mov	r7, r0
 800f380:	2800      	cmp	r0, #0
 800f382:	d144      	bne.n	800f40e <__cleanup_context+0xb2>
 800f384:	6830      	ldr	r0, [r6, #0]
 800f386:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f388:	b143      	cbz	r3, 800f39c <__cleanup_context+0x40>
 800f38a:	3028      	adds	r0, #40	@ 0x28
 800f38c:	f003 fcbc 	bl	8012d08 <rmw_context_fini>
 800f390:	b118      	cbz	r0, 800f39a <__cleanup_context+0x3e>
 800f392:	2f00      	cmp	r7, #0
 800f394:	d03e      	beq.n	800f414 <__cleanup_context+0xb8>
 800f396:	f7fc fa53 	bl	800b840 <rcutils_reset_error>
 800f39a:	6830      	ldr	r0, [r6, #0]
 800f39c:	6a03      	ldr	r3, [r0, #32]
 800f39e:	b1db      	cbz	r3, 800f3d8 <__cleanup_context+0x7c>
 800f3a0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f3a4:	2a01      	cmp	r2, #1
 800f3a6:	f17c 0100 	sbcs.w	r1, ip, #0
 800f3aa:	db11      	blt.n	800f3d0 <__cleanup_context+0x74>
 800f3ac:	2400      	movs	r4, #0
 800f3ae:	4625      	mov	r5, r4
 800f3b0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f3b4:	4649      	mov	r1, r9
 800f3b6:	b1b8      	cbz	r0, 800f3e8 <__cleanup_context+0x8c>
 800f3b8:	47c0      	blx	r8
 800f3ba:	6833      	ldr	r3, [r6, #0]
 800f3bc:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f3c0:	3401      	adds	r4, #1
 800f3c2:	f145 0500 	adc.w	r5, r5, #0
 800f3c6:	4294      	cmp	r4, r2
 800f3c8:	eb75 010c 	sbcs.w	r1, r5, ip
 800f3cc:	6a1b      	ldr	r3, [r3, #32]
 800f3ce:	dbef      	blt.n	800f3b0 <__cleanup_context+0x54>
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	4649      	mov	r1, r9
 800f3d4:	47c0      	blx	r8
 800f3d6:	6830      	ldr	r0, [r6, #0]
 800f3d8:	4649      	mov	r1, r9
 800f3da:	47c0      	blx	r8
 800f3dc:	2300      	movs	r3, #0
 800f3de:	e9c6 3300 	strd	r3, r3, [r6]
 800f3e2:	4638      	mov	r0, r7
 800f3e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3e8:	3401      	adds	r4, #1
 800f3ea:	f145 0500 	adc.w	r5, r5, #0
 800f3ee:	4294      	cmp	r4, r2
 800f3f0:	eb75 010c 	sbcs.w	r1, r5, ip
 800f3f4:	dbdc      	blt.n	800f3b0 <__cleanup_context+0x54>
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	4649      	mov	r1, r9
 800f3fa:	47c0      	blx	r8
 800f3fc:	6830      	ldr	r0, [r6, #0]
 800f3fe:	e7eb      	b.n	800f3d8 <__cleanup_context+0x7c>
 800f400:	4607      	mov	r7, r0
 800f402:	2300      	movs	r3, #0
 800f404:	e9c6 3300 	strd	r3, r3, [r6]
 800f408:	4638      	mov	r0, r7
 800f40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f40e:	f7fc fa17 	bl	800b840 <rcutils_reset_error>
 800f412:	e7b7      	b.n	800f384 <__cleanup_context+0x28>
 800f414:	f7ff ff7e 	bl	800f314 <rcl_convert_rmw_ret_to_rcl_ret>
 800f418:	4607      	mov	r7, r0
 800f41a:	e7bc      	b.n	800f396 <__cleanup_context+0x3a>

0800f41c <rcl_init>:
 800f41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f420:	1e05      	subs	r5, r0, #0
 800f422:	b09e      	sub	sp, #120	@ 0x78
 800f424:	460e      	mov	r6, r1
 800f426:	4690      	mov	r8, r2
 800f428:	461f      	mov	r7, r3
 800f42a:	f340 809c 	ble.w	800f566 <rcl_init+0x14a>
 800f42e:	2900      	cmp	r1, #0
 800f430:	f000 809c 	beq.w	800f56c <rcl_init+0x150>
 800f434:	f1a1 0e04 	sub.w	lr, r1, #4
 800f438:	f04f 0c00 	mov.w	ip, #0
 800f43c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800f440:	f10c 0c01 	add.w	ip, ip, #1
 800f444:	2c00      	cmp	r4, #0
 800f446:	f000 8091 	beq.w	800f56c <rcl_init+0x150>
 800f44a:	4565      	cmp	r5, ip
 800f44c:	d1f6      	bne.n	800f43c <rcl_init+0x20>
 800f44e:	f1b8 0f00 	cmp.w	r8, #0
 800f452:	f000 808b 	beq.w	800f56c <rcl_init+0x150>
 800f456:	f8d8 4000 	ldr.w	r4, [r8]
 800f45a:	2c00      	cmp	r4, #0
 800f45c:	f000 8086 	beq.w	800f56c <rcl_init+0x150>
 800f460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f462:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800f466:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f46a:	6823      	ldr	r3, [r4, #0]
 800f46c:	f8cc 3000 	str.w	r3, [ip]
 800f470:	a819      	add	r0, sp, #100	@ 0x64
 800f472:	f7fc f9c1 	bl	800b7f8 <rcutils_allocator_is_valid>
 800f476:	2800      	cmp	r0, #0
 800f478:	d078      	beq.n	800f56c <rcl_init+0x150>
 800f47a:	2f00      	cmp	r7, #0
 800f47c:	d076      	beq.n	800f56c <rcl_init+0x150>
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d178      	bne.n	800f576 <rcl_init+0x15a>
 800f484:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800f488:	2178      	movs	r1, #120	@ 0x78
 800f48a:	2001      	movs	r0, #1
 800f48c:	4798      	blx	r3
 800f48e:	4604      	mov	r4, r0
 800f490:	6038      	str	r0, [r7, #0]
 800f492:	2800      	cmp	r0, #0
 800f494:	f000 80b6 	beq.w	800f604 <rcl_init+0x1e8>
 800f498:	a802      	add	r0, sp, #8
 800f49a:	f002 ff89 	bl	80123b0 <rmw_get_zero_initialized_context>
 800f49e:	a902      	add	r1, sp, #8
 800f4a0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800f4a4:	2250      	movs	r2, #80	@ 0x50
 800f4a6:	ac19      	add	r4, sp, #100	@ 0x64
 800f4a8:	f007 f973 	bl	8016792 <memcpy>
 800f4ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f4ae:	f8d7 e000 	ldr.w	lr, [r7]
 800f4b2:	46f4      	mov	ip, lr
 800f4b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4b8:	6823      	ldr	r3, [r4, #0]
 800f4ba:	f8cc 3000 	str.w	r3, [ip]
 800f4be:	f10e 0114 	add.w	r1, lr, #20
 800f4c2:	4640      	mov	r0, r8
 800f4c4:	f000 f940 	bl	800f748 <rcl_init_options_copy>
 800f4c8:	4604      	mov	r4, r0
 800f4ca:	2800      	cmp	r0, #0
 800f4cc:	d144      	bne.n	800f558 <rcl_init+0x13c>
 800f4ce:	f8d7 9000 	ldr.w	r9, [r7]
 800f4d2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f4d6:	f8c9 0020 	str.w	r0, [r9, #32]
 800f4da:	f8c9 5018 	str.w	r5, [r9, #24]
 800f4de:	f8c9 801c 	str.w	r8, [r9, #28]
 800f4e2:	2d00      	cmp	r5, #0
 800f4e4:	d04e      	beq.n	800f584 <rcl_init+0x168>
 800f4e6:	2e00      	cmp	r6, #0
 800f4e8:	d04c      	beq.n	800f584 <rcl_init+0x168>
 800f4ea:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800f4ee:	2104      	movs	r1, #4
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	4798      	blx	r3
 800f4f4:	f8c9 0020 	str.w	r0, [r9, #32]
 800f4f8:	f8d7 9000 	ldr.w	r9, [r7]
 800f4fc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f500:	46ca      	mov	sl, r9
 800f502:	b343      	cbz	r3, 800f556 <rcl_init+0x13a>
 800f504:	2d01      	cmp	r5, #1
 800f506:	f178 0300 	sbcs.w	r3, r8, #0
 800f50a:	db3b      	blt.n	800f584 <rcl_init+0x168>
 800f50c:	2400      	movs	r4, #0
 800f50e:	3e04      	subs	r6, #4
 800f510:	46a1      	mov	r9, r4
 800f512:	e00b      	b.n	800f52c <rcl_init+0x110>
 800f514:	6831      	ldr	r1, [r6, #0]
 800f516:	f007 f93c 	bl	8016792 <memcpy>
 800f51a:	3401      	adds	r4, #1
 800f51c:	f149 0900 	adc.w	r9, r9, #0
 800f520:	45c8      	cmp	r8, r9
 800f522:	bf08      	it	eq
 800f524:	42a5      	cmpeq	r5, r4
 800f526:	d02b      	beq.n	800f580 <rcl_init+0x164>
 800f528:	f8d7 a000 	ldr.w	sl, [r7]
 800f52c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800f530:	f7f0 fe60 	bl	80001f4 <strlen>
 800f534:	1c42      	adds	r2, r0, #1
 800f536:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f538:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800f53a:	f8da a020 	ldr.w	sl, [sl, #32]
 800f53e:	9201      	str	r2, [sp, #4]
 800f540:	4610      	mov	r0, r2
 800f542:	4798      	blx	r3
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800f54a:	6a1b      	ldr	r3, [r3, #32]
 800f54c:	9a01      	ldr	r2, [sp, #4]
 800f54e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f552:	2800      	cmp	r0, #0
 800f554:	d1de      	bne.n	800f514 <rcl_init+0xf8>
 800f556:	240a      	movs	r4, #10
 800f558:	4638      	mov	r0, r7
 800f55a:	f7ff feff 	bl	800f35c <__cleanup_context>
 800f55e:	4620      	mov	r0, r4
 800f560:	b01e      	add	sp, #120	@ 0x78
 800f562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f566:	2900      	cmp	r1, #0
 800f568:	f43f af71 	beq.w	800f44e <rcl_init+0x32>
 800f56c:	240b      	movs	r4, #11
 800f56e:	4620      	mov	r0, r4
 800f570:	b01e      	add	sp, #120	@ 0x78
 800f572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f576:	2464      	movs	r4, #100	@ 0x64
 800f578:	4620      	mov	r0, r4
 800f57a:	b01e      	add	sp, #120	@ 0x78
 800f57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f580:	f8d7 9000 	ldr.w	r9, [r7]
 800f584:	4926      	ldr	r1, [pc, #152]	@ (800f620 <rcl_init+0x204>)
 800f586:	680b      	ldr	r3, [r1, #0]
 800f588:	3301      	adds	r3, #1
 800f58a:	d036      	beq.n	800f5fa <rcl_init+0x1de>
 800f58c:	600b      	str	r3, [r1, #0]
 800f58e:	461a      	mov	r2, r3
 800f590:	2400      	movs	r4, #0
 800f592:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f596:	607b      	str	r3, [r7, #4]
 800f598:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800f59a:	3301      	adds	r3, #1
 800f59c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800f5a0:	d034      	beq.n	800f60c <rcl_init+0x1f0>
 800f5a2:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800f5a6:	b93b      	cbnz	r3, 800f5b8 <rcl_init+0x19c>
 800f5a8:	3030      	adds	r0, #48	@ 0x30
 800f5aa:	f000 f939 	bl	800f820 <rcl_get_localhost_only>
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	d1d1      	bne.n	800f558 <rcl_init+0x13c>
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	6958      	ldr	r0, [r3, #20]
 800f5b8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800f5ba:	aa18      	add	r2, sp, #96	@ 0x60
 800f5bc:	a917      	add	r1, sp, #92	@ 0x5c
 800f5be:	f001 f841 	bl	8010644 <rcl_validate_enclave_name>
 800f5c2:	4604      	mov	r4, r0
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	d1c7      	bne.n	800f558 <rcl_init+0x13c>
 800f5c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f5ca:	b9eb      	cbnz	r3, 800f608 <rcl_init+0x1ec>
 800f5cc:	6839      	ldr	r1, [r7, #0]
 800f5ce:	694b      	ldr	r3, [r1, #20]
 800f5d0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800f5d2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800f5d6:	f000 fc3d 	bl	800fe54 <rcl_get_security_options_from_environment>
 800f5da:	4604      	mov	r4, r0
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	d1bb      	bne.n	800f558 <rcl_init+0x13c>
 800f5e0:	6839      	ldr	r1, [r7, #0]
 800f5e2:	6948      	ldr	r0, [r1, #20]
 800f5e4:	3128      	adds	r1, #40	@ 0x28
 800f5e6:	3018      	adds	r0, #24
 800f5e8:	f003 fa58 	bl	8012a9c <rmw_init>
 800f5ec:	4604      	mov	r4, r0
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	d0bd      	beq.n	800f56e <rcl_init+0x152>
 800f5f2:	f7ff fe8f 	bl	800f314 <rcl_convert_rmw_ret_to_rcl_ret>
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	e7ae      	b.n	800f558 <rcl_init+0x13c>
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	461c      	mov	r4, r3
 800f5fe:	600a      	str	r2, [r1, #0]
 800f600:	4613      	mov	r3, r2
 800f602:	e7c6      	b.n	800f592 <rcl_init+0x176>
 800f604:	240a      	movs	r4, #10
 800f606:	e7b2      	b.n	800f56e <rcl_init+0x152>
 800f608:	2401      	movs	r4, #1
 800f60a:	e7a5      	b.n	800f558 <rcl_init+0x13c>
 800f60c:	3024      	adds	r0, #36	@ 0x24
 800f60e:	f005 ffb9 	bl	8015584 <rcl_get_default_domain_id>
 800f612:	4604      	mov	r4, r0
 800f614:	2800      	cmp	r0, #0
 800f616:	d19f      	bne.n	800f558 <rcl_init+0x13c>
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	6958      	ldr	r0, [r3, #20]
 800f61c:	e7c1      	b.n	800f5a2 <rcl_init+0x186>
 800f61e:	bf00      	nop
 800f620:	2000dc24 	.word	0x2000dc24

0800f624 <rcl_get_zero_initialized_init_options>:
 800f624:	2000      	movs	r0, #0
 800f626:	4770      	bx	lr

0800f628 <rcl_init_options_init>:
 800f628:	b084      	sub	sp, #16
 800f62a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f62c:	b097      	sub	sp, #92	@ 0x5c
 800f62e:	ae1d      	add	r6, sp, #116	@ 0x74
 800f630:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800f634:	2800      	cmp	r0, #0
 800f636:	d058      	beq.n	800f6ea <rcl_init_options_init+0xc2>
 800f638:	6803      	ldr	r3, [r0, #0]
 800f63a:	4605      	mov	r5, r0
 800f63c:	b133      	cbz	r3, 800f64c <rcl_init_options_init+0x24>
 800f63e:	2464      	movs	r4, #100	@ 0x64
 800f640:	4620      	mov	r0, r4
 800f642:	b017      	add	sp, #92	@ 0x5c
 800f644:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f648:	b004      	add	sp, #16
 800f64a:	4770      	bx	lr
 800f64c:	4630      	mov	r0, r6
 800f64e:	f7fc f8d3 	bl	800b7f8 <rcutils_allocator_is_valid>
 800f652:	2800      	cmp	r0, #0
 800f654:	d049      	beq.n	800f6ea <rcl_init_options_init+0xc2>
 800f656:	46b4      	mov	ip, r6
 800f658:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f65c:	ac11      	add	r4, sp, #68	@ 0x44
 800f65e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f660:	f8dc 3000 	ldr.w	r3, [ip]
 800f664:	6023      	str	r3, [r4, #0]
 800f666:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800f668:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f66a:	2050      	movs	r0, #80	@ 0x50
 800f66c:	4798      	blx	r3
 800f66e:	4604      	mov	r4, r0
 800f670:	6028      	str	r0, [r5, #0]
 800f672:	2800      	cmp	r0, #0
 800f674:	d03b      	beq.n	800f6ee <rcl_init_options_init+0xc6>
 800f676:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800f67a:	4686      	mov	lr, r0
 800f67c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f680:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f684:	f8dc 3000 	ldr.w	r3, [ip]
 800f688:	f8ce 3000 	str.w	r3, [lr]
 800f68c:	a802      	add	r0, sp, #8
 800f68e:	f002 fe9f 	bl	80123d0 <rmw_get_zero_initialized_init_options>
 800f692:	f10d 0e08 	add.w	lr, sp, #8
 800f696:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f69a:	f104 0c18 	add.w	ip, r4, #24
 800f69e:	682f      	ldr	r7, [r5, #0]
 800f6a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f6a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f6a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f6ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f6b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f6b4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f6b8:	ac20      	add	r4, sp, #128	@ 0x80
 800f6ba:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f6be:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f6c2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f6c6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800f6ca:	f107 0018 	add.w	r0, r7, #24
 800f6ce:	f003 f8ed 	bl	80128ac <rmw_init_options_init>
 800f6d2:	4604      	mov	r4, r0
 800f6d4:	2800      	cmp	r0, #0
 800f6d6:	d0b3      	beq.n	800f640 <rcl_init_options_init+0x18>
 800f6d8:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800f6da:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f6dc:	6828      	ldr	r0, [r5, #0]
 800f6de:	4798      	blx	r3
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	f7ff fe17 	bl	800f314 <rcl_convert_rmw_ret_to_rcl_ret>
 800f6e6:	4604      	mov	r4, r0
 800f6e8:	e7aa      	b.n	800f640 <rcl_init_options_init+0x18>
 800f6ea:	240b      	movs	r4, #11
 800f6ec:	e7a8      	b.n	800f640 <rcl_init_options_init+0x18>
 800f6ee:	240a      	movs	r4, #10
 800f6f0:	e7a6      	b.n	800f640 <rcl_init_options_init+0x18>
 800f6f2:	bf00      	nop

0800f6f4 <rcl_init_options_fini>:
 800f6f4:	b530      	push	{r4, r5, lr}
 800f6f6:	b087      	sub	sp, #28
 800f6f8:	b1f0      	cbz	r0, 800f738 <rcl_init_options_fini+0x44>
 800f6fa:	6803      	ldr	r3, [r0, #0]
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	b1db      	cbz	r3, 800f738 <rcl_init_options_fini+0x44>
 800f700:	469c      	mov	ip, r3
 800f702:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f706:	f10d 0e04 	add.w	lr, sp, #4
 800f70a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f70e:	f8dc 3000 	ldr.w	r3, [ip]
 800f712:	f8ce 3000 	str.w	r3, [lr]
 800f716:	a801      	add	r0, sp, #4
 800f718:	f7fc f86e 	bl	800b7f8 <rcutils_allocator_is_valid>
 800f71c:	b160      	cbz	r0, 800f738 <rcl_init_options_fini+0x44>
 800f71e:	6820      	ldr	r0, [r4, #0]
 800f720:	3018      	adds	r0, #24
 800f722:	f003 f973 	bl	8012a0c <rmw_init_options_fini>
 800f726:	4605      	mov	r5, r0
 800f728:	b950      	cbnz	r0, 800f740 <rcl_init_options_fini+0x4c>
 800f72a:	6820      	ldr	r0, [r4, #0]
 800f72c:	9b02      	ldr	r3, [sp, #8]
 800f72e:	9905      	ldr	r1, [sp, #20]
 800f730:	4798      	blx	r3
 800f732:	4628      	mov	r0, r5
 800f734:	b007      	add	sp, #28
 800f736:	bd30      	pop	{r4, r5, pc}
 800f738:	250b      	movs	r5, #11
 800f73a:	4628      	mov	r0, r5
 800f73c:	b007      	add	sp, #28
 800f73e:	bd30      	pop	{r4, r5, pc}
 800f740:	f7ff fde8 	bl	800f314 <rcl_convert_rmw_ret_to_rcl_ret>
 800f744:	4605      	mov	r5, r0
 800f746:	e7f8      	b.n	800f73a <rcl_init_options_fini+0x46>

0800f748 <rcl_init_options_copy>:
 800f748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f74c:	b094      	sub	sp, #80	@ 0x50
 800f74e:	2800      	cmp	r0, #0
 800f750:	d058      	beq.n	800f804 <rcl_init_options_copy+0xbc>
 800f752:	4604      	mov	r4, r0
 800f754:	6800      	ldr	r0, [r0, #0]
 800f756:	2800      	cmp	r0, #0
 800f758:	d054      	beq.n	800f804 <rcl_init_options_copy+0xbc>
 800f75a:	460e      	mov	r6, r1
 800f75c:	f7fc f84c 	bl	800b7f8 <rcutils_allocator_is_valid>
 800f760:	2800      	cmp	r0, #0
 800f762:	d04f      	beq.n	800f804 <rcl_init_options_copy+0xbc>
 800f764:	2e00      	cmp	r6, #0
 800f766:	d04d      	beq.n	800f804 <rcl_init_options_copy+0xbc>
 800f768:	6833      	ldr	r3, [r6, #0]
 800f76a:	b123      	cbz	r3, 800f776 <rcl_init_options_copy+0x2e>
 800f76c:	2464      	movs	r4, #100	@ 0x64
 800f76e:	4620      	mov	r0, r4
 800f770:	b014      	add	sp, #80	@ 0x50
 800f772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f776:	6827      	ldr	r7, [r4, #0]
 800f778:	46bc      	mov	ip, r7
 800f77a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f77e:	ad0f      	add	r5, sp, #60	@ 0x3c
 800f780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f782:	f8dc 3000 	ldr.w	r3, [ip]
 800f786:	f8d7 8000 	ldr.w	r8, [r7]
 800f78a:	602b      	str	r3, [r5, #0]
 800f78c:	4619      	mov	r1, r3
 800f78e:	2050      	movs	r0, #80	@ 0x50
 800f790:	47c0      	blx	r8
 800f792:	4605      	mov	r5, r0
 800f794:	6030      	str	r0, [r6, #0]
 800f796:	b3d0      	cbz	r0, 800f80e <rcl_init_options_copy+0xc6>
 800f798:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800f79c:	4686      	mov	lr, r0
 800f79e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f7a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f7a6:	f8dc 3000 	ldr.w	r3, [ip]
 800f7aa:	f8ce 3000 	str.w	r3, [lr]
 800f7ae:	4668      	mov	r0, sp
 800f7b0:	f002 fe0e 	bl	80123d0 <rmw_get_zero_initialized_init_options>
 800f7b4:	46ee      	mov	lr, sp
 800f7b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f7ba:	f105 0c18 	add.w	ip, r5, #24
 800f7be:	6824      	ldr	r4, [r4, #0]
 800f7c0:	6835      	ldr	r5, [r6, #0]
 800f7c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f7ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f7d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7d6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f7da:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f7de:	f104 0018 	add.w	r0, r4, #24
 800f7e2:	f105 0118 	add.w	r1, r5, #24
 800f7e6:	f003 f8c9 	bl	801297c <rmw_init_options_copy>
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	d0be      	beq.n	800f76e <rcl_init_options_copy+0x26>
 800f7f0:	f7fc f810 	bl	800b814 <rcutils_get_error_string>
 800f7f4:	f7fc f824 	bl	800b840 <rcutils_reset_error>
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	f7ff ff7b 	bl	800f6f4 <rcl_init_options_fini>
 800f7fe:	b140      	cbz	r0, 800f812 <rcl_init_options_copy+0xca>
 800f800:	4604      	mov	r4, r0
 800f802:	e7b4      	b.n	800f76e <rcl_init_options_copy+0x26>
 800f804:	240b      	movs	r4, #11
 800f806:	4620      	mov	r0, r4
 800f808:	b014      	add	sp, #80	@ 0x50
 800f80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f80e:	240a      	movs	r4, #10
 800f810:	e7ad      	b.n	800f76e <rcl_init_options_copy+0x26>
 800f812:	4620      	mov	r0, r4
 800f814:	b014      	add	sp, #80	@ 0x50
 800f816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f81a:	f7ff bd7b 	b.w	800f314 <rcl_convert_rmw_ret_to_rcl_ret>
 800f81e:	bf00      	nop

0800f820 <rcl_get_localhost_only>:
 800f820:	b510      	push	{r4, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	2300      	movs	r3, #0
 800f826:	9301      	str	r3, [sp, #4]
 800f828:	b1b8      	cbz	r0, 800f85a <rcl_get_localhost_only+0x3a>
 800f82a:	4604      	mov	r4, r0
 800f82c:	a901      	add	r1, sp, #4
 800f82e:	480c      	ldr	r0, [pc, #48]	@ (800f860 <rcl_get_localhost_only+0x40>)
 800f830:	f002 fb12 	bl	8011e58 <rcutils_get_env>
 800f834:	b110      	cbz	r0, 800f83c <rcl_get_localhost_only+0x1c>
 800f836:	2001      	movs	r0, #1
 800f838:	b002      	add	sp, #8
 800f83a:	bd10      	pop	{r4, pc}
 800f83c:	9b01      	ldr	r3, [sp, #4]
 800f83e:	b113      	cbz	r3, 800f846 <rcl_get_localhost_only+0x26>
 800f840:	781a      	ldrb	r2, [r3, #0]
 800f842:	2a31      	cmp	r2, #49	@ 0x31
 800f844:	d004      	beq.n	800f850 <rcl_get_localhost_only+0x30>
 800f846:	2302      	movs	r3, #2
 800f848:	2000      	movs	r0, #0
 800f84a:	7023      	strb	r3, [r4, #0]
 800f84c:	b002      	add	sp, #8
 800f84e:	bd10      	pop	{r4, pc}
 800f850:	785b      	ldrb	r3, [r3, #1]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d1f7      	bne.n	800f846 <rcl_get_localhost_only+0x26>
 800f856:	2301      	movs	r3, #1
 800f858:	e7f6      	b.n	800f848 <rcl_get_localhost_only+0x28>
 800f85a:	200b      	movs	r0, #11
 800f85c:	b002      	add	sp, #8
 800f85e:	bd10      	pop	{r4, pc}
 800f860:	08017b1c 	.word	0x08017b1c

0800f864 <rcl_get_zero_initialized_node>:
 800f864:	4a03      	ldr	r2, [pc, #12]	@ (800f874 <rcl_get_zero_initialized_node+0x10>)
 800f866:	4603      	mov	r3, r0
 800f868:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f86c:	e883 0003 	stmia.w	r3, {r0, r1}
 800f870:	4618      	mov	r0, r3
 800f872:	4770      	bx	lr
 800f874:	08017b44 	.word	0x08017b44

0800f878 <rcl_node_init>:
 800f878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f87c:	b0a9      	sub	sp, #164	@ 0xa4
 800f87e:	4604      	mov	r4, r0
 800f880:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800f884:	a823      	add	r0, sp, #140	@ 0x8c
 800f886:	460e      	mov	r6, r1
 800f888:	4615      	mov	r5, r2
 800f88a:	461f      	mov	r7, r3
 800f88c:	f006 f8a2 	bl	80159d4 <rcl_guard_condition_get_default_options>
 800f890:	f1b8 0f00 	cmp.w	r8, #0
 800f894:	f000 80e6 	beq.w	800fa64 <rcl_node_init+0x1ec>
 800f898:	4640      	mov	r0, r8
 800f89a:	f7fb ffad 	bl	800b7f8 <rcutils_allocator_is_valid>
 800f89e:	2800      	cmp	r0, #0
 800f8a0:	f000 80e0 	beq.w	800fa64 <rcl_node_init+0x1ec>
 800f8a4:	2e00      	cmp	r6, #0
 800f8a6:	f000 80dd 	beq.w	800fa64 <rcl_node_init+0x1ec>
 800f8aa:	2d00      	cmp	r5, #0
 800f8ac:	f000 80da 	beq.w	800fa64 <rcl_node_init+0x1ec>
 800f8b0:	2c00      	cmp	r4, #0
 800f8b2:	f000 80d7 	beq.w	800fa64 <rcl_node_init+0x1ec>
 800f8b6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f8ba:	f1b9 0f00 	cmp.w	r9, #0
 800f8be:	f040 80fd 	bne.w	800fabc <rcl_node_init+0x244>
 800f8c2:	2f00      	cmp	r7, #0
 800f8c4:	f000 80ce 	beq.w	800fa64 <rcl_node_init+0x1ec>
 800f8c8:	4638      	mov	r0, r7
 800f8ca:	f7ff fd41 	bl	800f350 <rcl_context_is_valid>
 800f8ce:	4682      	mov	sl, r0
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	f000 80cd 	beq.w	800fa70 <rcl_node_init+0x1f8>
 800f8d6:	464a      	mov	r2, r9
 800f8d8:	a922      	add	r1, sp, #136	@ 0x88
 800f8da:	4630      	mov	r0, r6
 800f8dc:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800f8e0:	f002 ff18 	bl	8012714 <rmw_validate_node_name>
 800f8e4:	4681      	mov	r9, r0
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	f040 80be 	bne.w	800fa68 <rcl_node_init+0x1f0>
 800f8ec:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	f040 80f0 	bne.w	800fad4 <rcl_node_init+0x25c>
 800f8f4:	4628      	mov	r0, r5
 800f8f6:	f7f0 fc7d 	bl	80001f4 <strlen>
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	f040 80bb 	bne.w	800fa76 <rcl_node_init+0x1fe>
 800f900:	4d7c      	ldr	r5, [pc, #496]	@ (800faf4 <rcl_node_init+0x27c>)
 800f902:	a922      	add	r1, sp, #136	@ 0x88
 800f904:	2200      	movs	r2, #0
 800f906:	4628      	mov	r0, r5
 800f908:	f002 fee6 	bl	80126d8 <rmw_validate_namespace>
 800f90c:	4681      	mov	r9, r0
 800f90e:	2800      	cmp	r0, #0
 800f910:	f040 80aa 	bne.w	800fa68 <rcl_node_init+0x1f0>
 800f914:	4682      	mov	sl, r0
 800f916:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800f918:	2800      	cmp	r0, #0
 800f91a:	f040 80e0 	bne.w	800fade <rcl_node_init+0x266>
 800f91e:	f8d8 3000 	ldr.w	r3, [r8]
 800f922:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f926:	2078      	movs	r0, #120	@ 0x78
 800f928:	4798      	blx	r3
 800f92a:	4681      	mov	r9, r0
 800f92c:	6060      	str	r0, [r4, #4]
 800f92e:	2800      	cmp	r0, #0
 800f930:	f000 80ca 	beq.w	800fac8 <rcl_node_init+0x250>
 800f934:	2200      	movs	r2, #0
 800f936:	2300      	movs	r3, #0
 800f938:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800f93c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800f940:	a808      	add	r0, sp, #32
 800f942:	f000 f907 	bl	800fb54 <rcl_node_get_default_options>
 800f946:	a908      	add	r1, sp, #32
 800f948:	4648      	mov	r0, r9
 800f94a:	2268      	movs	r2, #104	@ 0x68
 800f94c:	f006 ff21 	bl	8016792 <memcpy>
 800f950:	6861      	ldr	r1, [r4, #4]
 800f952:	6027      	str	r7, [r4, #0]
 800f954:	4640      	mov	r0, r8
 800f956:	f000 f90b 	bl	800fb70 <rcl_node_options_copy>
 800f95a:	2800      	cmp	r0, #0
 800f95c:	d158      	bne.n	800fa10 <rcl_node_init+0x198>
 800f95e:	4628      	mov	r0, r5
 800f960:	f7f0 fc48 	bl	80001f4 <strlen>
 800f964:	4428      	add	r0, r5
 800f966:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800f96a:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800f96e:	2b2f      	cmp	r3, #47	@ 0x2f
 800f970:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f974:	9300      	str	r3, [sp, #0]
 800f976:	bf0c      	ite	eq
 800f978:	4b5f      	ldreq	r3, [pc, #380]	@ (800faf8 <rcl_node_init+0x280>)
 800f97a:	4b60      	ldrne	r3, [pc, #384]	@ (800fafc <rcl_node_init+0x284>)
 800f97c:	9302      	str	r3, [sp, #8]
 800f97e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f982:	9301      	str	r3, [sp, #4]
 800f984:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800f988:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f98c:	f002 fa8c 	bl	8011ea8 <rcutils_format_string_limit>
 800f990:	6823      	ldr	r3, [r4, #0]
 800f992:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800f996:	6818      	ldr	r0, [r3, #0]
 800f998:	4631      	mov	r1, r6
 800f99a:	3028      	adds	r0, #40	@ 0x28
 800f99c:	462a      	mov	r2, r5
 800f99e:	6866      	ldr	r6, [r4, #4]
 800f9a0:	f003 fad0 	bl	8012f44 <rmw_create_node>
 800f9a4:	6863      	ldr	r3, [r4, #4]
 800f9a6:	66b0      	str	r0, [r6, #104]	@ 0x68
 800f9a8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	d032      	beq.n	800fa14 <rcl_node_init+0x19c>
 800f9ae:	f003 fb5d 	bl	801306c <rmw_node_get_graph_guard_condition>
 800f9b2:	4681      	mov	r9, r0
 800f9b4:	b360      	cbz	r0, 800fa10 <rcl_node_init+0x198>
 800f9b6:	f8d8 3000 	ldr.w	r3, [r8]
 800f9ba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f9be:	6866      	ldr	r6, [r4, #4]
 800f9c0:	2008      	movs	r0, #8
 800f9c2:	4798      	blx	r3
 800f9c4:	6863      	ldr	r3, [r4, #4]
 800f9c6:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800f9c8:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800f9cc:	f1bb 0f00 	cmp.w	fp, #0
 800f9d0:	d020      	beq.n	800fa14 <rcl_node_init+0x19c>
 800f9d2:	a806      	add	r0, sp, #24
 800f9d4:	f005 ff6e 	bl	80158b4 <rcl_get_zero_initialized_guard_condition>
 800f9d8:	a806      	add	r0, sp, #24
 800f9da:	c803      	ldmia	r0, {r0, r1}
 800f9dc:	6863      	ldr	r3, [r4, #4]
 800f9de:	46c4      	mov	ip, r8
 800f9e0:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800f9e4:	e88b 0003 	stmia.w	fp, {r0, r1}
 800f9e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f9ec:	ae23      	add	r6, sp, #140	@ 0x8c
 800f9ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f9f0:	f8dc 3000 	ldr.w	r3, [ip]
 800f9f4:	6033      	str	r3, [r6, #0]
 800f9f6:	ab28      	add	r3, sp, #160	@ 0xa0
 800f9f8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800f9fc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fa00:	4649      	mov	r1, r9
 800fa02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa04:	463a      	mov	r2, r7
 800fa06:	4670      	mov	r0, lr
 800fa08:	f005 ff5e 	bl	80158c8 <rcl_guard_condition_init_from_rmw>
 800fa0c:	4681      	mov	r9, r0
 800fa0e:	b328      	cbz	r0, 800fa5c <rcl_node_init+0x1e4>
 800fa10:	6863      	ldr	r3, [r4, #4]
 800fa12:	b1f3      	cbz	r3, 800fa52 <rcl_node_init+0x1da>
 800fa14:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800fa16:	b128      	cbz	r0, 800fa24 <rcl_node_init+0x1ac>
 800fa18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fa1c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fa20:	4798      	blx	r3
 800fa22:	6863      	ldr	r3, [r4, #4]
 800fa24:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800fa26:	b110      	cbz	r0, 800fa2e <rcl_node_init+0x1b6>
 800fa28:	f003 faa4 	bl	8012f74 <rmw_destroy_node>
 800fa2c:	6863      	ldr	r3, [r4, #4]
 800fa2e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fa30:	b148      	cbz	r0, 800fa46 <rcl_node_init+0x1ce>
 800fa32:	f005 ffa9 	bl	8015988 <rcl_guard_condition_fini>
 800fa36:	6863      	ldr	r3, [r4, #4]
 800fa38:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fa3c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fa3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fa42:	4798      	blx	r3
 800fa44:	6863      	ldr	r3, [r4, #4]
 800fa46:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fa50:	4798      	blx	r3
 800fa52:	2300      	movs	r3, #0
 800fa54:	e9c4 3300 	strd	r3, r3, [r4]
 800fa58:	f04f 0901 	mov.w	r9, #1
 800fa5c:	f1ba 0f00 	cmp.w	sl, #0
 800fa60:	d125      	bne.n	800faae <rcl_node_init+0x236>
 800fa62:	e001      	b.n	800fa68 <rcl_node_init+0x1f0>
 800fa64:	f04f 090b 	mov.w	r9, #11
 800fa68:	4648      	mov	r0, r9
 800fa6a:	b029      	add	sp, #164	@ 0xa4
 800fa6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa70:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800fa74:	e7f8      	b.n	800fa68 <rcl_node_init+0x1f0>
 800fa76:	782b      	ldrb	r3, [r5, #0]
 800fa78:	2b2f      	cmp	r3, #47	@ 0x2f
 800fa7a:	f43f af42 	beq.w	800f902 <rcl_node_init+0x8a>
 800fa7e:	9503      	str	r5, [sp, #12]
 800fa80:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fa84:	9300      	str	r3, [sp, #0]
 800fa86:	4b1e      	ldr	r3, [pc, #120]	@ (800fb00 <rcl_node_init+0x288>)
 800fa88:	9302      	str	r3, [sp, #8]
 800fa8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fa8e:	9301      	str	r3, [sp, #4]
 800fa90:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800fa94:	f002 fa08 	bl	8011ea8 <rcutils_format_string_limit>
 800fa98:	4605      	mov	r5, r0
 800fa9a:	b340      	cbz	r0, 800faee <rcl_node_init+0x276>
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	a922      	add	r1, sp, #136	@ 0x88
 800faa0:	9222      	str	r2, [sp, #136]	@ 0x88
 800faa2:	f002 fe19 	bl	80126d8 <rmw_validate_namespace>
 800faa6:	4681      	mov	r9, r0
 800faa8:	2800      	cmp	r0, #0
 800faaa:	f43f af34 	beq.w	800f916 <rcl_node_init+0x9e>
 800faae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fab2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fab6:	4628      	mov	r0, r5
 800fab8:	4798      	blx	r3
 800faba:	e7d5      	b.n	800fa68 <rcl_node_init+0x1f0>
 800fabc:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800fac0:	4648      	mov	r0, r9
 800fac2:	b029      	add	sp, #164	@ 0xa4
 800fac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac8:	f04f 090a 	mov.w	r9, #10
 800facc:	f1ba 0f00 	cmp.w	sl, #0
 800fad0:	d1ed      	bne.n	800faae <rcl_node_init+0x236>
 800fad2:	e7c9      	b.n	800fa68 <rcl_node_init+0x1f0>
 800fad4:	f002 fe70 	bl	80127b8 <rmw_node_name_validation_result_string>
 800fad8:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800fadc:	e7c4      	b.n	800fa68 <rcl_node_init+0x1f0>
 800fade:	f002 fe0d 	bl	80126fc <rmw_namespace_validation_result_string>
 800fae2:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800fae6:	f1ba 0f00 	cmp.w	sl, #0
 800faea:	d1e0      	bne.n	800faae <rcl_node_init+0x236>
 800faec:	e7bc      	b.n	800fa68 <rcl_node_init+0x1f0>
 800faee:	f04f 090a 	mov.w	r9, #10
 800faf2:	e7b9      	b.n	800fa68 <rcl_node_init+0x1f0>
 800faf4:	08017b34 	.word	0x08017b34
 800faf8:	080179c4 	.word	0x080179c4
 800fafc:	08017b3c 	.word	0x08017b3c
 800fb00:	08017b38 	.word	0x08017b38

0800fb04 <rcl_node_is_valid>:
 800fb04:	b130      	cbz	r0, 800fb14 <rcl_node_is_valid+0x10>
 800fb06:	6843      	ldr	r3, [r0, #4]
 800fb08:	b123      	cbz	r3, 800fb14 <rcl_node_is_valid+0x10>
 800fb0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fb0c:	b113      	cbz	r3, 800fb14 <rcl_node_is_valid+0x10>
 800fb0e:	6800      	ldr	r0, [r0, #0]
 800fb10:	f7ff bc1e 	b.w	800f350 <rcl_context_is_valid>
 800fb14:	2000      	movs	r0, #0
 800fb16:	4770      	bx	lr

0800fb18 <rcl_node_get_name>:
 800fb18:	b120      	cbz	r0, 800fb24 <rcl_node_get_name+0xc>
 800fb1a:	6840      	ldr	r0, [r0, #4]
 800fb1c:	b110      	cbz	r0, 800fb24 <rcl_node_get_name+0xc>
 800fb1e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fb20:	b100      	cbz	r0, 800fb24 <rcl_node_get_name+0xc>
 800fb22:	6880      	ldr	r0, [r0, #8]
 800fb24:	4770      	bx	lr
 800fb26:	bf00      	nop

0800fb28 <rcl_node_get_namespace>:
 800fb28:	b120      	cbz	r0, 800fb34 <rcl_node_get_namespace+0xc>
 800fb2a:	6840      	ldr	r0, [r0, #4]
 800fb2c:	b110      	cbz	r0, 800fb34 <rcl_node_get_namespace+0xc>
 800fb2e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fb30:	b100      	cbz	r0, 800fb34 <rcl_node_get_namespace+0xc>
 800fb32:	68c0      	ldr	r0, [r0, #12]
 800fb34:	4770      	bx	lr
 800fb36:	bf00      	nop

0800fb38 <rcl_node_get_options>:
 800fb38:	b128      	cbz	r0, 800fb46 <rcl_node_get_options+0xe>
 800fb3a:	6840      	ldr	r0, [r0, #4]
 800fb3c:	b118      	cbz	r0, 800fb46 <rcl_node_get_options+0xe>
 800fb3e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	bf08      	it	eq
 800fb44:	2000      	moveq	r0, #0
 800fb46:	4770      	bx	lr

0800fb48 <rcl_node_get_rmw_handle>:
 800fb48:	b110      	cbz	r0, 800fb50 <rcl_node_get_rmw_handle+0x8>
 800fb4a:	6840      	ldr	r0, [r0, #4]
 800fb4c:	b100      	cbz	r0, 800fb50 <rcl_node_get_rmw_handle+0x8>
 800fb4e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop

0800fb54 <rcl_node_get_default_options>:
 800fb54:	b510      	push	{r4, lr}
 800fb56:	2268      	movs	r2, #104	@ 0x68
 800fb58:	4604      	mov	r4, r0
 800fb5a:	2100      	movs	r1, #0
 800fb5c:	f006 fd50 	bl	8016600 <memset>
 800fb60:	4620      	mov	r0, r4
 800fb62:	f7fb fe3b 	bl	800b7dc <rcutils_get_default_allocator>
 800fb66:	2301      	movs	r3, #1
 800fb68:	7523      	strb	r3, [r4, #20]
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	bd10      	pop	{r4, pc}
 800fb6e:	bf00      	nop

0800fb70 <rcl_node_options_copy>:
 800fb70:	b1d0      	cbz	r0, 800fba8 <rcl_node_options_copy+0x38>
 800fb72:	b570      	push	{r4, r5, r6, lr}
 800fb74:	460c      	mov	r4, r1
 800fb76:	b1a9      	cbz	r1, 800fba4 <rcl_node_options_copy+0x34>
 800fb78:	4288      	cmp	r0, r1
 800fb7a:	4684      	mov	ip, r0
 800fb7c:	d012      	beq.n	800fba4 <rcl_node_options_copy+0x34>
 800fb7e:	4605      	mov	r5, r0
 800fb80:	8a86      	ldrh	r6, [r0, #20]
 800fb82:	468e      	mov	lr, r1
 800fb84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb86:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fb8a:	682b      	ldr	r3, [r5, #0]
 800fb8c:	f8ce 3000 	str.w	r3, [lr]
 800fb90:	f10c 0118 	add.w	r1, ip, #24
 800fb94:	2250      	movs	r2, #80	@ 0x50
 800fb96:	82a6      	strh	r6, [r4, #20]
 800fb98:	f104 0018 	add.w	r0, r4, #24
 800fb9c:	f006 fdf9 	bl	8016792 <memcpy>
 800fba0:	2000      	movs	r0, #0
 800fba2:	bd70      	pop	{r4, r5, r6, pc}
 800fba4:	200b      	movs	r0, #11
 800fba6:	bd70      	pop	{r4, r5, r6, pc}
 800fba8:	200b      	movs	r0, #11
 800fbaa:	4770      	bx	lr

0800fbac <rcl_node_resolve_name>:
 800fbac:	b082      	sub	sp, #8
 800fbae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb2:	b091      	sub	sp, #68	@ 0x44
 800fbb4:	ac1a      	add	r4, sp, #104	@ 0x68
 800fbb6:	e884 000c 	stmia.w	r4, {r2, r3}
 800fbba:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d03b      	beq.n	800fc3a <rcl_node_resolve_name+0x8e>
 800fbc2:	460c      	mov	r4, r1
 800fbc4:	4605      	mov	r5, r0
 800fbc6:	f7ff ffb7 	bl	800fb38 <rcl_node_get_options>
 800fbca:	2800      	cmp	r0, #0
 800fbcc:	d037      	beq.n	800fc3e <rcl_node_resolve_name+0x92>
 800fbce:	4628      	mov	r0, r5
 800fbd0:	f7ff ffa2 	bl	800fb18 <rcl_node_get_name>
 800fbd4:	4606      	mov	r6, r0
 800fbd6:	4628      	mov	r0, r5
 800fbd8:	f7ff ffa6 	bl	800fb28 <rcl_node_get_namespace>
 800fbdc:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800fbe0:	4681      	mov	r9, r0
 800fbe2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fbe6:	ad0b      	add	r5, sp, #44	@ 0x2c
 800fbe8:	46ac      	mov	ip, r5
 800fbea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbee:	f8de 3000 	ldr.w	r3, [lr]
 800fbf2:	f8cc 3000 	str.w	r3, [ip]
 800fbf6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fbf8:	b1fb      	cbz	r3, 800fc3a <rcl_node_resolve_name+0x8e>
 800fbfa:	468a      	mov	sl, r1
 800fbfc:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800fc00:	f002 faaa 	bl	8012158 <rcutils_get_zero_initialized_string_map>
 800fc04:	ab10      	add	r3, sp, #64	@ 0x40
 800fc06:	9008      	str	r0, [sp, #32]
 800fc08:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800fc0c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fc10:	2100      	movs	r1, #0
 800fc12:	e895 000c 	ldmia.w	r5, {r2, r3}
 800fc16:	a808      	add	r0, sp, #32
 800fc18:	f002 fb16 	bl	8012248 <rcutils_string_map_init>
 800fc1c:	4607      	mov	r7, r0
 800fc1e:	b180      	cbz	r0, 800fc42 <rcl_node_resolve_name+0x96>
 800fc20:	f7fb fdf8 	bl	800b814 <rcutils_get_error_string>
 800fc24:	f7fb fe0c 	bl	800b840 <rcutils_reset_error>
 800fc28:	2f0a      	cmp	r7, #10
 800fc2a:	bf18      	it	ne
 800fc2c:	2701      	movne	r7, #1
 800fc2e:	4638      	mov	r0, r7
 800fc30:	b011      	add	sp, #68	@ 0x44
 800fc32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc36:	b002      	add	sp, #8
 800fc38:	4770      	bx	lr
 800fc3a:	270b      	movs	r7, #11
 800fc3c:	e7f7      	b.n	800fc2e <rcl_node_resolve_name+0x82>
 800fc3e:	2701      	movs	r7, #1
 800fc40:	e7f5      	b.n	800fc2e <rcl_node_resolve_name+0x82>
 800fc42:	9009      	str	r0, [sp, #36]	@ 0x24
 800fc44:	9007      	str	r0, [sp, #28]
 800fc46:	a808      	add	r0, sp, #32
 800fc48:	f005 fe2e 	bl	80158a8 <rcl_get_default_topic_name_substitutions>
 800fc4c:	4607      	mov	r7, r0
 800fc4e:	b1a8      	cbz	r0, 800fc7c <rcl_node_resolve_name+0xd0>
 800fc50:	280a      	cmp	r0, #10
 800fc52:	9c07      	ldr	r4, [sp, #28]
 800fc54:	d000      	beq.n	800fc58 <rcl_node_resolve_name+0xac>
 800fc56:	2701      	movs	r7, #1
 800fc58:	a808      	add	r0, sp, #32
 800fc5a:	f002 fb35 	bl	80122c8 <rcutils_string_map_fini>
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	d13d      	bne.n	800fcde <rcl_node_resolve_name+0x132>
 800fc62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc64:	4659      	mov	r1, fp
 800fc66:	47d0      	blx	sl
 800fc68:	4659      	mov	r1, fp
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	47d0      	blx	sl
 800fc6e:	f1b8 0f00 	cmp.w	r8, #0
 800fc72:	d0dc      	beq.n	800fc2e <rcl_node_resolve_name+0x82>
 800fc74:	2f67      	cmp	r7, #103	@ 0x67
 800fc76:	bf08      	it	eq
 800fc78:	2768      	moveq	r7, #104	@ 0x68
 800fc7a:	e7d8      	b.n	800fc2e <rcl_node_resolve_name+0x82>
 800fc7c:	ab09      	add	r3, sp, #36	@ 0x24
 800fc7e:	9305      	str	r3, [sp, #20]
 800fc80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc82:	46ec      	mov	ip, sp
 800fc84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc88:	682b      	ldr	r3, [r5, #0]
 800fc8a:	f8cc 3000 	str.w	r3, [ip]
 800fc8e:	464a      	mov	r2, r9
 800fc90:	4631      	mov	r1, r6
 800fc92:	4620      	mov	r0, r4
 800fc94:	ab08      	add	r3, sp, #32
 800fc96:	f005 fca9 	bl	80155ec <rcl_expand_topic_name>
 800fc9a:	4607      	mov	r7, r0
 800fc9c:	b9b8      	cbnz	r0, 800fcce <rcl_node_resolve_name+0x122>
 800fc9e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800fca0:	9009      	str	r0, [sp, #36]	@ 0x24
 800fca2:	4602      	mov	r2, r0
 800fca4:	a90a      	add	r1, sp, #40	@ 0x28
 800fca6:	4620      	mov	r0, r4
 800fca8:	f002 fc52 	bl	8012550 <rmw_validate_full_topic_name>
 800fcac:	b988      	cbnz	r0, 800fcd2 <rcl_node_resolve_name+0x126>
 800fcae:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800fcb0:	b9d5      	cbnz	r5, 800fce8 <rcl_node_resolve_name+0x13c>
 800fcb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fcb4:	a808      	add	r0, sp, #32
 800fcb6:	601c      	str	r4, [r3, #0]
 800fcb8:	f002 fb06 	bl	80122c8 <rcutils_string_map_fini>
 800fcbc:	4607      	mov	r7, r0
 800fcbe:	b1a8      	cbz	r0, 800fcec <rcl_node_resolve_name+0x140>
 800fcc0:	f7fb fda8 	bl	800b814 <rcutils_get_error_string>
 800fcc4:	462c      	mov	r4, r5
 800fcc6:	f7fb fdbb 	bl	800b840 <rcutils_reset_error>
 800fcca:	2701      	movs	r7, #1
 800fccc:	e7c9      	b.n	800fc62 <rcl_node_resolve_name+0xb6>
 800fcce:	9c07      	ldr	r4, [sp, #28]
 800fcd0:	e7c2      	b.n	800fc58 <rcl_node_resolve_name+0xac>
 800fcd2:	f7fb fd9f 	bl	800b814 <rcutils_get_error_string>
 800fcd6:	2701      	movs	r7, #1
 800fcd8:	f7fb fdb2 	bl	800b840 <rcutils_reset_error>
 800fcdc:	e7bc      	b.n	800fc58 <rcl_node_resolve_name+0xac>
 800fcde:	f7fb fd99 	bl	800b814 <rcutils_get_error_string>
 800fce2:	f7fb fdad 	bl	800b840 <rcutils_reset_error>
 800fce6:	e7bc      	b.n	800fc62 <rcl_node_resolve_name+0xb6>
 800fce8:	2767      	movs	r7, #103	@ 0x67
 800fcea:	e7b5      	b.n	800fc58 <rcl_node_resolve_name+0xac>
 800fcec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fcee:	4659      	mov	r1, fp
 800fcf0:	47d0      	blx	sl
 800fcf2:	4659      	mov	r1, fp
 800fcf4:	4638      	mov	r0, r7
 800fcf6:	47d0      	blx	sl
 800fcf8:	e799      	b.n	800fc2e <rcl_node_resolve_name+0x82>
 800fcfa:	bf00      	nop

0800fcfc <exact_match_lookup>:
 800fcfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcfe:	f102 0708 	add.w	r7, r2, #8
 800fd02:	460b      	mov	r3, r1
 800fd04:	4614      	mov	r4, r2
 800fd06:	4606      	mov	r6, r0
 800fd08:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800fd0c:	b085      	sub	sp, #20
 800fd0e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fd12:	4618      	mov	r0, r3
 800fd14:	4919      	ldr	r1, [pc, #100]	@ (800fd7c <exact_match_lookup+0x80>)
 800fd16:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fd1a:	f002 f8b7 	bl	8011e8c <rcutils_join_path>
 800fd1e:	7833      	ldrb	r3, [r6, #0]
 800fd20:	2b2f      	cmp	r3, #47	@ 0x2f
 800fd22:	4605      	mov	r5, r0
 800fd24:	d023      	beq.n	800fd6e <exact_match_lookup+0x72>
 800fd26:	f104 030c 	add.w	r3, r4, #12
 800fd2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fd2e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fd32:	1c70      	adds	r0, r6, #1
 800fd34:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fd38:	f002 f8ae 	bl	8011e98 <rcutils_to_native_path>
 800fd3c:	4606      	mov	r6, r0
 800fd3e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800fd42:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fd46:	4631      	mov	r1, r6
 800fd48:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fd4c:	4628      	mov	r0, r5
 800fd4e:	f002 f89d 	bl	8011e8c <rcutils_join_path>
 800fd52:	6862      	ldr	r2, [r4, #4]
 800fd54:	6921      	ldr	r1, [r4, #16]
 800fd56:	4603      	mov	r3, r0
 800fd58:	4630      	mov	r0, r6
 800fd5a:	461e      	mov	r6, r3
 800fd5c:	4790      	blx	r2
 800fd5e:	4628      	mov	r0, r5
 800fd60:	6863      	ldr	r3, [r4, #4]
 800fd62:	6921      	ldr	r1, [r4, #16]
 800fd64:	4798      	blx	r3
 800fd66:	4635      	mov	r5, r6
 800fd68:	4628      	mov	r0, r5
 800fd6a:	b005      	add	sp, #20
 800fd6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd6e:	7873      	ldrb	r3, [r6, #1]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d1d8      	bne.n	800fd26 <exact_match_lookup+0x2a>
 800fd74:	4628      	mov	r0, r5
 800fd76:	b005      	add	sp, #20
 800fd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	08017b88 	.word	0x08017b88

0800fd80 <rcl_get_secure_root>:
 800fd80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd84:	b085      	sub	sp, #20
 800fd86:	b168      	cbz	r0, 800fda4 <rcl_get_secure_root+0x24>
 800fd88:	4607      	mov	r7, r0
 800fd8a:	4608      	mov	r0, r1
 800fd8c:	460c      	mov	r4, r1
 800fd8e:	f7fb fd33 	bl	800b7f8 <rcutils_allocator_is_valid>
 800fd92:	b138      	cbz	r0, 800fda4 <rcl_get_secure_root+0x24>
 800fd94:	2300      	movs	r3, #0
 800fd96:	482d      	ldr	r0, [pc, #180]	@ (800fe4c <rcl_get_secure_root+0xcc>)
 800fd98:	9303      	str	r3, [sp, #12]
 800fd9a:	a903      	add	r1, sp, #12
 800fd9c:	f002 f85c 	bl	8011e58 <rcutils_get_env>
 800fda0:	4605      	mov	r5, r0
 800fda2:	b120      	cbz	r0, 800fdae <rcl_get_secure_root+0x2e>
 800fda4:	2500      	movs	r5, #0
 800fda6:	4628      	mov	r0, r5
 800fda8:	b005      	add	sp, #20
 800fdaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdae:	9b03      	ldr	r3, [sp, #12]
 800fdb0:	781a      	ldrb	r2, [r3, #0]
 800fdb2:	2a00      	cmp	r2, #0
 800fdb4:	d0f6      	beq.n	800fda4 <rcl_get_secure_root+0x24>
 800fdb6:	f104 090c 	add.w	r9, r4, #12
 800fdba:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fdbe:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fdc8:	f002 f988 	bl	80120dc <rcutils_strdup>
 800fdcc:	4680      	mov	r8, r0
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	d0e8      	beq.n	800fda4 <rcl_get_secure_root+0x24>
 800fdd2:	481f      	ldr	r0, [pc, #124]	@ (800fe50 <rcl_get_secure_root+0xd0>)
 800fdd4:	9503      	str	r5, [sp, #12]
 800fdd6:	a903      	add	r1, sp, #12
 800fdd8:	f002 f83e 	bl	8011e58 <rcutils_get_env>
 800fddc:	b160      	cbz	r0, 800fdf8 <rcl_get_secure_root+0x78>
 800fdde:	2600      	movs	r6, #0
 800fde0:	6863      	ldr	r3, [r4, #4]
 800fde2:	6921      	ldr	r1, [r4, #16]
 800fde4:	4630      	mov	r0, r6
 800fde6:	4798      	blx	r3
 800fde8:	4640      	mov	r0, r8
 800fdea:	6863      	ldr	r3, [r4, #4]
 800fdec:	6921      	ldr	r1, [r4, #16]
 800fdee:	4798      	blx	r3
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	b005      	add	sp, #20
 800fdf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdf8:	9b03      	ldr	r3, [sp, #12]
 800fdfa:	781e      	ldrb	r6, [r3, #0]
 800fdfc:	b1f6      	cbz	r6, 800fe3c <rcl_get_secure_root+0xbc>
 800fdfe:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fe02:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fe06:	4618      	mov	r0, r3
 800fe08:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fe0c:	f002 f966 	bl	80120dc <rcutils_strdup>
 800fe10:	4606      	mov	r6, r0
 800fe12:	2800      	cmp	r0, #0
 800fe14:	d0e3      	beq.n	800fdde <rcl_get_secure_root+0x5e>
 800fe16:	4622      	mov	r2, r4
 800fe18:	4641      	mov	r1, r8
 800fe1a:	f7ff ff6f 	bl	800fcfc <exact_match_lookup>
 800fe1e:	4605      	mov	r5, r0
 800fe20:	2d00      	cmp	r5, #0
 800fe22:	d0dd      	beq.n	800fde0 <rcl_get_secure_root+0x60>
 800fe24:	4628      	mov	r0, r5
 800fe26:	f002 f82f 	bl	8011e88 <rcutils_is_directory>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	2800      	cmp	r0, #0
 800fe2e:	d1d7      	bne.n	800fde0 <rcl_get_secure_root+0x60>
 800fe30:	4628      	mov	r0, r5
 800fe32:	6921      	ldr	r1, [r4, #16]
 800fe34:	461d      	mov	r5, r3
 800fe36:	6863      	ldr	r3, [r4, #4]
 800fe38:	4798      	blx	r3
 800fe3a:	e7d1      	b.n	800fde0 <rcl_get_secure_root+0x60>
 800fe3c:	4622      	mov	r2, r4
 800fe3e:	4638      	mov	r0, r7
 800fe40:	4641      	mov	r1, r8
 800fe42:	f7ff ff5b 	bl	800fcfc <exact_match_lookup>
 800fe46:	4605      	mov	r5, r0
 800fe48:	e7ea      	b.n	800fe20 <rcl_get_secure_root+0xa0>
 800fe4a:	bf00      	nop
 800fe4c:	08017b94 	.word	0x08017b94
 800fe50:	08017bac 	.word	0x08017bac

0800fe54 <rcl_get_security_options_from_environment>:
 800fe54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe58:	b082      	sub	sp, #8
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	4606      	mov	r6, r0
 800fe5e:	460f      	mov	r7, r1
 800fe60:	4820      	ldr	r0, [pc, #128]	@ (800fee4 <rcl_get_security_options_from_environment+0x90>)
 800fe62:	9301      	str	r3, [sp, #4]
 800fe64:	a901      	add	r1, sp, #4
 800fe66:	4690      	mov	r8, r2
 800fe68:	f001 fff6 	bl	8011e58 <rcutils_get_env>
 800fe6c:	b120      	cbz	r0, 800fe78 <rcl_get_security_options_from_environment+0x24>
 800fe6e:	2501      	movs	r5, #1
 800fe70:	4628      	mov	r0, r5
 800fe72:	b002      	add	sp, #8
 800fe74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe78:	491b      	ldr	r1, [pc, #108]	@ (800fee8 <rcl_get_security_options_from_environment+0x94>)
 800fe7a:	4604      	mov	r4, r0
 800fe7c:	9801      	ldr	r0, [sp, #4]
 800fe7e:	f7f0 f9af 	bl	80001e0 <strcmp>
 800fe82:	4605      	mov	r5, r0
 800fe84:	b9e8      	cbnz	r0, 800fec2 <rcl_get_security_options_from_environment+0x6e>
 800fe86:	9001      	str	r0, [sp, #4]
 800fe88:	f1b8 0f00 	cmp.w	r8, #0
 800fe8c:	d020      	beq.n	800fed0 <rcl_get_security_options_from_environment+0x7c>
 800fe8e:	4817      	ldr	r0, [pc, #92]	@ (800feec <rcl_get_security_options_from_environment+0x98>)
 800fe90:	a901      	add	r1, sp, #4
 800fe92:	f001 ffe1 	bl	8011e58 <rcutils_get_env>
 800fe96:	2800      	cmp	r0, #0
 800fe98:	d1e9      	bne.n	800fe6e <rcl_get_security_options_from_environment+0x1a>
 800fe9a:	4915      	ldr	r1, [pc, #84]	@ (800fef0 <rcl_get_security_options_from_environment+0x9c>)
 800fe9c:	9801      	ldr	r0, [sp, #4]
 800fe9e:	f7f0 f99f 	bl	80001e0 <strcmp>
 800fea2:	fab0 f080 	clz	r0, r0
 800fea6:	0940      	lsrs	r0, r0, #5
 800fea8:	f888 0000 	strb.w	r0, [r8]
 800feac:	4639      	mov	r1, r7
 800feae:	4630      	mov	r0, r6
 800feb0:	f7ff ff66 	bl	800fd80 <rcl_get_secure_root>
 800feb4:	b170      	cbz	r0, 800fed4 <rcl_get_security_options_from_environment+0x80>
 800feb6:	f8c8 0004 	str.w	r0, [r8, #4]
 800feba:	4628      	mov	r0, r5
 800febc:	b002      	add	sp, #8
 800febe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fec2:	4625      	mov	r5, r4
 800fec4:	4628      	mov	r0, r5
 800fec6:	f888 4000 	strb.w	r4, [r8]
 800feca:	b002      	add	sp, #8
 800fecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fed0:	250b      	movs	r5, #11
 800fed2:	e7cd      	b.n	800fe70 <rcl_get_security_options_from_environment+0x1c>
 800fed4:	f898 5000 	ldrb.w	r5, [r8]
 800fed8:	f1a5 0501 	sub.w	r5, r5, #1
 800fedc:	fab5 f585 	clz	r5, r5
 800fee0:	096d      	lsrs	r5, r5, #5
 800fee2:	e7c5      	b.n	800fe70 <rcl_get_security_options_from_environment+0x1c>
 800fee4:	08017b4c 	.word	0x08017b4c
 800fee8:	08017b60 	.word	0x08017b60
 800feec:	08017b68 	.word	0x08017b68
 800fef0:	08017b80 	.word	0x08017b80

0800fef4 <rcl_service_get_rmw_handle>:
 800fef4:	b118      	cbz	r0, 800fefe <rcl_service_get_rmw_handle+0xa>
 800fef6:	6800      	ldr	r0, [r0, #0]
 800fef8:	b108      	cbz	r0, 800fefe <rcl_service_get_rmw_handle+0xa>
 800fefa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800fefe:	4770      	bx	lr

0800ff00 <rcl_take_request>:
 800ff00:	b570      	push	{r4, r5, r6, lr}
 800ff02:	468e      	mov	lr, r1
 800ff04:	460c      	mov	r4, r1
 800ff06:	4616      	mov	r6, r2
 800ff08:	4605      	mov	r5, r0
 800ff0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ff0e:	b08c      	sub	sp, #48	@ 0x30
 800ff10:	f10d 0c18 	add.w	ip, sp, #24
 800ff14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff18:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ff1c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ff20:	b30d      	cbz	r5, 800ff66 <rcl_take_request+0x66>
 800ff22:	682b      	ldr	r3, [r5, #0]
 800ff24:	b1fb      	cbz	r3, 800ff66 <rcl_take_request+0x66>
 800ff26:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800ff2a:	b1e0      	cbz	r0, 800ff66 <rcl_take_request+0x66>
 800ff2c:	b336      	cbz	r6, 800ff7c <rcl_take_request+0x7c>
 800ff2e:	2300      	movs	r3, #0
 800ff30:	f88d 3007 	strb.w	r3, [sp, #7]
 800ff34:	4632      	mov	r2, r6
 800ff36:	f10d 0307 	add.w	r3, sp, #7
 800ff3a:	a902      	add	r1, sp, #8
 800ff3c:	f003 f8ea 	bl	8013114 <rmw_take_request>
 800ff40:	4605      	mov	r5, r0
 800ff42:	b198      	cbz	r0, 800ff6c <rcl_take_request+0x6c>
 800ff44:	280a      	cmp	r0, #10
 800ff46:	bf18      	it	ne
 800ff48:	2501      	movne	r5, #1
 800ff4a:	f10d 0e18 	add.w	lr, sp, #24
 800ff4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ff52:	46a4      	mov	ip, r4
 800ff54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff58:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ff5c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ff60:	4628      	mov	r0, r5
 800ff62:	b00c      	add	sp, #48	@ 0x30
 800ff64:	bd70      	pop	{r4, r5, r6, pc}
 800ff66:	f44f 7516 	mov.w	r5, #600	@ 0x258
 800ff6a:	e7ee      	b.n	800ff4a <rcl_take_request+0x4a>
 800ff6c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ff70:	f240 2359 	movw	r3, #601	@ 0x259
 800ff74:	2a00      	cmp	r2, #0
 800ff76:	bf08      	it	eq
 800ff78:	461d      	moveq	r5, r3
 800ff7a:	e7e6      	b.n	800ff4a <rcl_take_request+0x4a>
 800ff7c:	250b      	movs	r5, #11
 800ff7e:	e7e4      	b.n	800ff4a <rcl_take_request+0x4a>

0800ff80 <rcl_send_response>:
 800ff80:	b170      	cbz	r0, 800ffa0 <rcl_send_response+0x20>
 800ff82:	6800      	ldr	r0, [r0, #0]
 800ff84:	b160      	cbz	r0, 800ffa0 <rcl_send_response+0x20>
 800ff86:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800ff8a:	b148      	cbz	r0, 800ffa0 <rcl_send_response+0x20>
 800ff8c:	b159      	cbz	r1, 800ffa6 <rcl_send_response+0x26>
 800ff8e:	b510      	push	{r4, lr}
 800ff90:	b15a      	cbz	r2, 800ffaa <rcl_send_response+0x2a>
 800ff92:	f003 f91d 	bl	80131d0 <rmw_send_response>
 800ff96:	b110      	cbz	r0, 800ff9e <rcl_send_response+0x1e>
 800ff98:	2802      	cmp	r0, #2
 800ff9a:	bf18      	it	ne
 800ff9c:	2001      	movne	r0, #1
 800ff9e:	bd10      	pop	{r4, pc}
 800ffa0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800ffa4:	4770      	bx	lr
 800ffa6:	200b      	movs	r0, #11
 800ffa8:	4770      	bx	lr
 800ffaa:	200b      	movs	r0, #11
 800ffac:	bd10      	pop	{r4, pc}
 800ffae:	bf00      	nop

0800ffb0 <rcl_service_is_valid>:
 800ffb0:	b130      	cbz	r0, 800ffc0 <rcl_service_is_valid+0x10>
 800ffb2:	6800      	ldr	r0, [r0, #0]
 800ffb4:	b120      	cbz	r0, 800ffc0 <rcl_service_is_valid+0x10>
 800ffb6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800ffba:	3800      	subs	r0, #0
 800ffbc:	bf18      	it	ne
 800ffbe:	2001      	movne	r0, #1
 800ffc0:	4770      	bx	lr
 800ffc2:	bf00      	nop

0800ffc4 <rcl_get_zero_initialized_subscription>:
 800ffc4:	4b01      	ldr	r3, [pc, #4]	@ (800ffcc <rcl_get_zero_initialized_subscription+0x8>)
 800ffc6:	6818      	ldr	r0, [r3, #0]
 800ffc8:	4770      	bx	lr
 800ffca:	bf00      	nop
 800ffcc:	08017bcc 	.word	0x08017bcc

0800ffd0 <rcl_subscription_init>:
 800ffd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffd4:	b089      	sub	sp, #36	@ 0x24
 800ffd6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800ffd8:	b1d6      	cbz	r6, 8010010 <rcl_subscription_init+0x40>
 800ffda:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800ffde:	4604      	mov	r4, r0
 800ffe0:	4648      	mov	r0, r9
 800ffe2:	460d      	mov	r5, r1
 800ffe4:	4690      	mov	r8, r2
 800ffe6:	461f      	mov	r7, r3
 800ffe8:	f7fb fc06 	bl	800b7f8 <rcutils_allocator_is_valid>
 800ffec:	b180      	cbz	r0, 8010010 <rcl_subscription_init+0x40>
 800ffee:	b17c      	cbz	r4, 8010010 <rcl_subscription_init+0x40>
 800fff0:	4628      	mov	r0, r5
 800fff2:	f7ff fd87 	bl	800fb04 <rcl_node_is_valid>
 800fff6:	2800      	cmp	r0, #0
 800fff8:	d054      	beq.n	80100a4 <rcl_subscription_init+0xd4>
 800fffa:	f1b8 0f00 	cmp.w	r8, #0
 800fffe:	d007      	beq.n	8010010 <rcl_subscription_init+0x40>
 8010000:	b137      	cbz	r7, 8010010 <rcl_subscription_init+0x40>
 8010002:	6823      	ldr	r3, [r4, #0]
 8010004:	b14b      	cbz	r3, 801001a <rcl_subscription_init+0x4a>
 8010006:	2764      	movs	r7, #100	@ 0x64
 8010008:	4638      	mov	r0, r7
 801000a:	b009      	add	sp, #36	@ 0x24
 801000c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010010:	270b      	movs	r7, #11
 8010012:	4638      	mov	r0, r7
 8010014:	b009      	add	sp, #36	@ 0x24
 8010016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801001a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801001e:	aa07      	add	r2, sp, #28
 8010020:	9205      	str	r2, [sp, #20]
 8010022:	9307      	str	r3, [sp, #28]
 8010024:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8010028:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801002c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010030:	4639      	mov	r1, r7
 8010032:	e899 000c 	ldmia.w	r9, {r2, r3}
 8010036:	4628      	mov	r0, r5
 8010038:	f7ff fdb8 	bl	800fbac <rcl_node_resolve_name>
 801003c:	4607      	mov	r7, r0
 801003e:	2800      	cmp	r0, #0
 8010040:	d15f      	bne.n	8010102 <rcl_subscription_init+0x132>
 8010042:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8010046:	21c8      	movs	r1, #200	@ 0xc8
 8010048:	2001      	movs	r0, #1
 801004a:	4798      	blx	r3
 801004c:	6020      	str	r0, [r4, #0]
 801004e:	2800      	cmp	r0, #0
 8010050:	d05d      	beq.n	801010e <rcl_subscription_init+0x13e>
 8010052:	4628      	mov	r0, r5
 8010054:	f7ff fd78 	bl	800fb48 <rcl_node_get_rmw_handle>
 8010058:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 801005c:	9300      	str	r3, [sp, #0]
 801005e:	9a07      	ldr	r2, [sp, #28]
 8010060:	6827      	ldr	r7, [r4, #0]
 8010062:	4641      	mov	r1, r8
 8010064:	4633      	mov	r3, r6
 8010066:	f003 f99d 	bl	80133a4 <rmw_create_subscription>
 801006a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 801006e:	6827      	ldr	r7, [r4, #0]
 8010070:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8010074:	b348      	cbz	r0, 80100ca <rcl_subscription_init+0xfa>
 8010076:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 801007a:	f003 fa75 	bl	8013568 <rmw_subscription_get_actual_qos>
 801007e:	4607      	mov	r7, r0
 8010080:	b9a8      	cbnz	r0, 80100ae <rcl_subscription_init+0xde>
 8010082:	6820      	ldr	r0, [r4, #0]
 8010084:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8010088:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801008c:	2270      	movs	r2, #112	@ 0x70
 801008e:	4631      	mov	r1, r6
 8010090:	f006 fb7f 	bl	8016792 <memcpy>
 8010094:	9807      	ldr	r0, [sp, #28]
 8010096:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8010098:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801009a:	4798      	blx	r3
 801009c:	4638      	mov	r0, r7
 801009e:	b009      	add	sp, #36	@ 0x24
 80100a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100a4:	27c8      	movs	r7, #200	@ 0xc8
 80100a6:	4638      	mov	r0, r7
 80100a8:	b009      	add	sp, #36	@ 0x24
 80100aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100ae:	6827      	ldr	r7, [r4, #0]
 80100b0:	b32f      	cbz	r7, 80100fe <rcl_subscription_init+0x12e>
 80100b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80100b6:	b14b      	cbz	r3, 80100cc <rcl_subscription_init+0xfc>
 80100b8:	4628      	mov	r0, r5
 80100ba:	f7ff fd45 	bl	800fb48 <rcl_node_get_rmw_handle>
 80100be:	6823      	ldr	r3, [r4, #0]
 80100c0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80100c4:	f003 fa60 	bl	8013588 <rmw_destroy_subscription>
 80100c8:	6827      	ldr	r7, [r4, #0]
 80100ca:	b197      	cbz	r7, 80100f2 <rcl_subscription_init+0x122>
 80100cc:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80100d0:	4628      	mov	r0, r5
 80100d2:	f7fb fb91 	bl	800b7f8 <rcutils_allocator_is_valid>
 80100d6:	b158      	cbz	r0, 80100f0 <rcl_subscription_init+0x120>
 80100d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80100da:	b148      	cbz	r0, 80100f0 <rcl_subscription_init+0x120>
 80100dc:	4629      	mov	r1, r5
 80100de:	f002 f98b 	bl	80123f8 <rmw_subscription_content_filter_options_fini>
 80100e2:	4605      	mov	r5, r0
 80100e4:	b9b8      	cbnz	r0, 8010116 <rcl_subscription_init+0x146>
 80100e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100e8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80100ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80100ec:	4798      	blx	r3
 80100ee:	66fd      	str	r5, [r7, #108]	@ 0x6c
 80100f0:	6827      	ldr	r7, [r4, #0]
 80100f2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80100f4:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80100f6:	4638      	mov	r0, r7
 80100f8:	4798      	blx	r3
 80100fa:	2300      	movs	r3, #0
 80100fc:	6023      	str	r3, [r4, #0]
 80100fe:	2701      	movs	r7, #1
 8010100:	e7c8      	b.n	8010094 <rcl_subscription_init+0xc4>
 8010102:	2867      	cmp	r0, #103	@ 0x67
 8010104:	d0c6      	beq.n	8010094 <rcl_subscription_init+0xc4>
 8010106:	2869      	cmp	r0, #105	@ 0x69
 8010108:	d003      	beq.n	8010112 <rcl_subscription_init+0x142>
 801010a:	280a      	cmp	r0, #10
 801010c:	d1f7      	bne.n	80100fe <rcl_subscription_init+0x12e>
 801010e:	270a      	movs	r7, #10
 8010110:	e7c0      	b.n	8010094 <rcl_subscription_init+0xc4>
 8010112:	2767      	movs	r7, #103	@ 0x67
 8010114:	e7be      	b.n	8010094 <rcl_subscription_init+0xc4>
 8010116:	f7ff f8fd 	bl	800f314 <rcl_convert_rmw_ret_to_rcl_ret>
 801011a:	6827      	ldr	r7, [r4, #0]
 801011c:	e7e9      	b.n	80100f2 <rcl_subscription_init+0x122>
 801011e:	bf00      	nop

08010120 <rcl_subscription_get_default_options>:
 8010120:	b570      	push	{r4, r5, r6, lr}
 8010122:	4d14      	ldr	r5, [pc, #80]	@ (8010174 <rcl_subscription_get_default_options+0x54>)
 8010124:	4914      	ldr	r1, [pc, #80]	@ (8010178 <rcl_subscription_get_default_options+0x58>)
 8010126:	b08a      	sub	sp, #40	@ 0x28
 8010128:	4604      	mov	r4, r0
 801012a:	2250      	movs	r2, #80	@ 0x50
 801012c:	4628      	mov	r0, r5
 801012e:	f006 fb30 	bl	8016792 <memcpy>
 8010132:	a804      	add	r0, sp, #16
 8010134:	f7fb fb52 	bl	800b7dc <rcutils_get_default_allocator>
 8010138:	f10d 0c10 	add.w	ip, sp, #16
 801013c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010140:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8010144:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010148:	466e      	mov	r6, sp
 801014a:	f8dc 3000 	ldr.w	r3, [ip]
 801014e:	f8ce 3000 	str.w	r3, [lr]
 8010152:	4630      	mov	r0, r6
 8010154:	f002 f96a 	bl	801242c <rmw_get_default_subscription_options>
 8010158:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801015c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8010160:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010164:	2270      	movs	r2, #112	@ 0x70
 8010166:	4629      	mov	r1, r5
 8010168:	4620      	mov	r0, r4
 801016a:	f006 fb12 	bl	8016792 <memcpy>
 801016e:	4620      	mov	r0, r4
 8010170:	b00a      	add	sp, #40	@ 0x28
 8010172:	bd70      	pop	{r4, r5, r6, pc}
 8010174:	2000dc28 	.word	0x2000dc28
 8010178:	08017bd0 	.word	0x08017bd0

0801017c <rcl_take>:
 801017c:	2800      	cmp	r0, #0
 801017e:	d04a      	beq.n	8010216 <rcl_take+0x9a>
 8010180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010184:	4604      	mov	r4, r0
 8010186:	6800      	ldr	r0, [r0, #0]
 8010188:	b0a4      	sub	sp, #144	@ 0x90
 801018a:	2800      	cmp	r0, #0
 801018c:	d03b      	beq.n	8010206 <rcl_take+0x8a>
 801018e:	461f      	mov	r7, r3
 8010190:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8010194:	2b00      	cmp	r3, #0
 8010196:	d036      	beq.n	8010206 <rcl_take+0x8a>
 8010198:	460e      	mov	r6, r1
 801019a:	2900      	cmp	r1, #0
 801019c:	d039      	beq.n	8010212 <rcl_take+0x96>
 801019e:	4615      	mov	r5, r2
 80101a0:	2a00      	cmp	r2, #0
 80101a2:	d03c      	beq.n	801021e <rcl_take+0xa2>
 80101a4:	a802      	add	r0, sp, #8
 80101a6:	f002 f9cb 	bl	8012540 <rmw_get_zero_initialized_message_info>
 80101aa:	f10d 0c08 	add.w	ip, sp, #8
 80101ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80101b2:	46ae      	mov	lr, r5
 80101b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80101b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80101bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80101c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80101c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80101c8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80101cc:	f04f 0800 	mov.w	r8, #0
 80101d0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80101d4:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 80101d8:	6822      	ldr	r2, [r4, #0]
 80101da:	462b      	mov	r3, r5
 80101dc:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 80101e0:	9700      	str	r7, [sp, #0]
 80101e2:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80101e6:	4631      	mov	r1, r6
 80101e8:	f003 fa2e 	bl	8013648 <rmw_take_with_info>
 80101ec:	4603      	mov	r3, r0
 80101ee:	b9c0      	cbnz	r0, 8010222 <rcl_take+0xa6>
 80101f0:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 80101f4:	f240 1291 	movw	r2, #401	@ 0x191
 80101f8:	2900      	cmp	r1, #0
 80101fa:	bf08      	it	eq
 80101fc:	4613      	moveq	r3, r2
 80101fe:	4618      	mov	r0, r3
 8010200:	b024      	add	sp, #144	@ 0x90
 8010202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010206:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801020a:	4618      	mov	r0, r3
 801020c:	b024      	add	sp, #144	@ 0x90
 801020e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010212:	230b      	movs	r3, #11
 8010214:	e7f3      	b.n	80101fe <rcl_take+0x82>
 8010216:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801021a:	4618      	mov	r0, r3
 801021c:	4770      	bx	lr
 801021e:	ad14      	add	r5, sp, #80	@ 0x50
 8010220:	e7c0      	b.n	80101a4 <rcl_take+0x28>
 8010222:	f7ff f877 	bl	800f314 <rcl_convert_rmw_ret_to_rcl_ret>
 8010226:	4603      	mov	r3, r0
 8010228:	e7e9      	b.n	80101fe <rcl_take+0x82>
 801022a:	bf00      	nop

0801022c <rcl_subscription_get_rmw_handle>:
 801022c:	b118      	cbz	r0, 8010236 <rcl_subscription_get_rmw_handle+0xa>
 801022e:	6800      	ldr	r0, [r0, #0]
 8010230:	b108      	cbz	r0, 8010236 <rcl_subscription_get_rmw_handle+0xa>
 8010232:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8010236:	4770      	bx	lr

08010238 <rcl_subscription_is_valid>:
 8010238:	b130      	cbz	r0, 8010248 <rcl_subscription_is_valid+0x10>
 801023a:	6800      	ldr	r0, [r0, #0]
 801023c:	b120      	cbz	r0, 8010248 <rcl_subscription_is_valid+0x10>
 801023e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8010242:	3800      	subs	r0, #0
 8010244:	bf18      	it	ne
 8010246:	2001      	movne	r0, #1
 8010248:	4770      	bx	lr
 801024a:	bf00      	nop

0801024c <rcl_get_system_time>:
 801024c:	4608      	mov	r0, r1
 801024e:	f7fb bb13 	b.w	800b878 <rcutils_system_time_now>
 8010252:	bf00      	nop

08010254 <rcl_get_steady_time>:
 8010254:	4608      	mov	r0, r1
 8010256:	f7fb bb37 	b.w	800b8c8 <rcutils_steady_time_now>
 801025a:	bf00      	nop

0801025c <rcl_get_ros_time>:
 801025c:	7a03      	ldrb	r3, [r0, #8]
 801025e:	b510      	push	{r4, lr}
 8010260:	460c      	mov	r4, r1
 8010262:	b133      	cbz	r3, 8010272 <rcl_get_ros_time+0x16>
 8010264:	2105      	movs	r1, #5
 8010266:	f001 fd53 	bl	8011d10 <__atomic_load_8>
 801026a:	e9c4 0100 	strd	r0, r1, [r4]
 801026e:	2000      	movs	r0, #0
 8010270:	bd10      	pop	{r4, pc}
 8010272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010276:	4608      	mov	r0, r1
 8010278:	f7fb bafe 	b.w	800b878 <rcutils_system_time_now>

0801027c <rcl_clock_init>:
 801027c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801027e:	4605      	mov	r5, r0
 8010280:	4610      	mov	r0, r2
 8010282:	4614      	mov	r4, r2
 8010284:	460e      	mov	r6, r1
 8010286:	f7fb fab7 	bl	800b7f8 <rcutils_allocator_is_valid>
 801028a:	b128      	cbz	r0, 8010298 <rcl_clock_init+0x1c>
 801028c:	2d03      	cmp	r5, #3
 801028e:	d803      	bhi.n	8010298 <rcl_clock_init+0x1c>
 8010290:	e8df f005 	tbb	[pc, r5]
 8010294:	06532e1d 	.word	0x06532e1d
 8010298:	f04f 0c0b 	mov.w	ip, #11
 801029c:	4660      	mov	r0, ip
 801029e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102a0:	2e00      	cmp	r6, #0
 80102a2:	d0f9      	beq.n	8010298 <rcl_clock_init+0x1c>
 80102a4:	2c00      	cmp	r4, #0
 80102a6:	d0f7      	beq.n	8010298 <rcl_clock_init+0x1c>
 80102a8:	2300      	movs	r3, #0
 80102aa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80102ae:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8010364 <rcl_clock_init+0xe8>
 80102b2:	6133      	str	r3, [r6, #16]
 80102b4:	f106 0514 	add.w	r5, r6, #20
 80102b8:	469c      	mov	ip, r3
 80102ba:	2703      	movs	r7, #3
 80102bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80102be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80102c0:	6823      	ldr	r3, [r4, #0]
 80102c2:	602b      	str	r3, [r5, #0]
 80102c4:	7037      	strb	r7, [r6, #0]
 80102c6:	f8c6 e00c 	str.w	lr, [r6, #12]
 80102ca:	4660      	mov	r0, ip
 80102cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102ce:	2e00      	cmp	r6, #0
 80102d0:	d0e2      	beq.n	8010298 <rcl_clock_init+0x1c>
 80102d2:	2300      	movs	r3, #0
 80102d4:	7033      	strb	r3, [r6, #0]
 80102d6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80102da:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80102de:	469c      	mov	ip, r3
 80102e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80102e2:	f106 0514 	add.w	r5, r6, #20
 80102e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80102e8:	6823      	ldr	r3, [r4, #0]
 80102ea:	602b      	str	r3, [r5, #0]
 80102ec:	4660      	mov	r0, ip
 80102ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102f0:	2e00      	cmp	r6, #0
 80102f2:	d0d1      	beq.n	8010298 <rcl_clock_init+0x1c>
 80102f4:	2c00      	cmp	r4, #0
 80102f6:	d0cf      	beq.n	8010298 <rcl_clock_init+0x1c>
 80102f8:	2700      	movs	r7, #0
 80102fa:	7037      	strb	r7, [r6, #0]
 80102fc:	46a4      	mov	ip, r4
 80102fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010302:	f106 0514 	add.w	r5, r6, #20
 8010306:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801030a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801030e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010310:	f8dc 3000 	ldr.w	r3, [ip]
 8010314:	602b      	str	r3, [r5, #0]
 8010316:	6921      	ldr	r1, [r4, #16]
 8010318:	6823      	ldr	r3, [r4, #0]
 801031a:	2010      	movs	r0, #16
 801031c:	4798      	blx	r3
 801031e:	6130      	str	r0, [r6, #16]
 8010320:	b1d0      	cbz	r0, 8010358 <rcl_clock_init+0xdc>
 8010322:	2200      	movs	r2, #0
 8010324:	2300      	movs	r3, #0
 8010326:	e9c0 2300 	strd	r2, r3, [r0]
 801032a:	2301      	movs	r3, #1
 801032c:	7207      	strb	r7, [r0, #8]
 801032e:	4a0c      	ldr	r2, [pc, #48]	@ (8010360 <rcl_clock_init+0xe4>)
 8010330:	7033      	strb	r3, [r6, #0]
 8010332:	46bc      	mov	ip, r7
 8010334:	60f2      	str	r2, [r6, #12]
 8010336:	4660      	mov	r0, ip
 8010338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801033a:	2e00      	cmp	r6, #0
 801033c:	d0ac      	beq.n	8010298 <rcl_clock_init+0x1c>
 801033e:	2c00      	cmp	r4, #0
 8010340:	d0aa      	beq.n	8010298 <rcl_clock_init+0x1c>
 8010342:	2300      	movs	r3, #0
 8010344:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010348:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8010368 <rcl_clock_init+0xec>
 801034c:	6133      	str	r3, [r6, #16]
 801034e:	f106 0514 	add.w	r5, r6, #20
 8010352:	469c      	mov	ip, r3
 8010354:	2702      	movs	r7, #2
 8010356:	e7b1      	b.n	80102bc <rcl_clock_init+0x40>
 8010358:	f04f 0c0a 	mov.w	ip, #10
 801035c:	e79e      	b.n	801029c <rcl_clock_init+0x20>
 801035e:	bf00      	nop
 8010360:	0801025d 	.word	0x0801025d
 8010364:	08010255 	.word	0x08010255
 8010368:	0801024d 	.word	0x0801024d

0801036c <rcl_clock_get_now>:
 801036c:	b140      	cbz	r0, 8010380 <rcl_clock_get_now+0x14>
 801036e:	b139      	cbz	r1, 8010380 <rcl_clock_get_now+0x14>
 8010370:	7803      	ldrb	r3, [r0, #0]
 8010372:	b11b      	cbz	r3, 801037c <rcl_clock_get_now+0x10>
 8010374:	68c3      	ldr	r3, [r0, #12]
 8010376:	b10b      	cbz	r3, 801037c <rcl_clock_get_now+0x10>
 8010378:	6900      	ldr	r0, [r0, #16]
 801037a:	4718      	bx	r3
 801037c:	2001      	movs	r0, #1
 801037e:	4770      	bx	lr
 8010380:	200b      	movs	r0, #11
 8010382:	4770      	bx	lr

08010384 <rcl_timer_call>:
 8010384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010388:	b087      	sub	sp, #28
 801038a:	2800      	cmp	r0, #0
 801038c:	d06d      	beq.n	801046a <rcl_timer_call+0xe6>
 801038e:	6803      	ldr	r3, [r0, #0]
 8010390:	4604      	mov	r4, r0
 8010392:	2b00      	cmp	r3, #0
 8010394:	d063      	beq.n	801045e <rcl_timer_call+0xda>
 8010396:	f3bf 8f5b 	dmb	ish
 801039a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801039e:	f3bf 8f5b 	dmb	ish
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d150      	bne.n	8010448 <rcl_timer_call+0xc4>
 80103a6:	6803      	ldr	r3, [r0, #0]
 80103a8:	a904      	add	r1, sp, #16
 80103aa:	6818      	ldr	r0, [r3, #0]
 80103ac:	f7ff ffde 	bl	801036c <rcl_clock_get_now>
 80103b0:	4605      	mov	r5, r0
 80103b2:	2800      	cmp	r0, #0
 80103b4:	d14a      	bne.n	801044c <rcl_timer_call+0xc8>
 80103b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	db4a      	blt.n	8010454 <rcl_timer_call+0xd0>
 80103be:	6820      	ldr	r0, [r4, #0]
 80103c0:	f04f 0a05 	mov.w	sl, #5
 80103c4:	f8cd a000 	str.w	sl, [sp]
 80103c8:	3020      	adds	r0, #32
 80103ca:	f001 fd0d 	bl	8011de8 <__atomic_exchange_8>
 80103ce:	6823      	ldr	r3, [r4, #0]
 80103d0:	f3bf 8f5b 	dmb	ish
 80103d4:	4680      	mov	r8, r0
 80103d6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80103da:	f3bf 8f5b 	dmb	ish
 80103de:	6820      	ldr	r0, [r4, #0]
 80103e0:	4689      	mov	r9, r1
 80103e2:	3028      	adds	r0, #40	@ 0x28
 80103e4:	4651      	mov	r1, sl
 80103e6:	f001 fc93 	bl	8011d10 <__atomic_load_8>
 80103ea:	4606      	mov	r6, r0
 80103ec:	6820      	ldr	r0, [r4, #0]
 80103ee:	460f      	mov	r7, r1
 80103f0:	3018      	adds	r0, #24
 80103f2:	4651      	mov	r1, sl
 80103f4:	f001 fc8c 	bl	8011d10 <__atomic_load_8>
 80103f8:	1836      	adds	r6, r6, r0
 80103fa:	4602      	mov	r2, r0
 80103fc:	4682      	mov	sl, r0
 80103fe:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8010402:	eb47 0701 	adc.w	r7, r7, r1
 8010406:	4286      	cmp	r6, r0
 8010408:	460b      	mov	r3, r1
 801040a:	eb77 010c 	sbcs.w	r1, r7, ip
 801040e:	da04      	bge.n	801041a <rcl_timer_call+0x96>
 8010410:	ea53 0102 	orrs.w	r1, r3, r2
 8010414:	d12e      	bne.n	8010474 <rcl_timer_call+0xf0>
 8010416:	4606      	mov	r6, r0
 8010418:	4667      	mov	r7, ip
 801041a:	6820      	ldr	r0, [r4, #0]
 801041c:	2105      	movs	r1, #5
 801041e:	4632      	mov	r2, r6
 8010420:	463b      	mov	r3, r7
 8010422:	3028      	adds	r0, #40	@ 0x28
 8010424:	9100      	str	r1, [sp, #0]
 8010426:	f001 fca9 	bl	8011d7c <__atomic_store_8>
 801042a:	f1bb 0f00 	cmp.w	fp, #0
 801042e:	d00d      	beq.n	801044c <rcl_timer_call+0xc8>
 8010430:	9a04      	ldr	r2, [sp, #16]
 8010432:	9b05      	ldr	r3, [sp, #20]
 8010434:	ebb2 0208 	subs.w	r2, r2, r8
 8010438:	4620      	mov	r0, r4
 801043a:	eb63 0309 	sbc.w	r3, r3, r9
 801043e:	47d8      	blx	fp
 8010440:	4628      	mov	r0, r5
 8010442:	b007      	add	sp, #28
 8010444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010448:	f240 3521 	movw	r5, #801	@ 0x321
 801044c:	4628      	mov	r0, r5
 801044e:	b007      	add	sp, #28
 8010450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010454:	2501      	movs	r5, #1
 8010456:	4628      	mov	r0, r5
 8010458:	b007      	add	sp, #28
 801045a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801045e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8010462:	4628      	mov	r0, r5
 8010464:	b007      	add	sp, #28
 8010466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801046a:	250b      	movs	r5, #11
 801046c:	4628      	mov	r0, r5
 801046e:	b007      	add	sp, #28
 8010470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010474:	1b80      	subs	r0, r0, r6
 8010476:	eb6c 0107 	sbc.w	r1, ip, r7
 801047a:	3801      	subs	r0, #1
 801047c:	f161 0100 	sbc.w	r1, r1, #0
 8010480:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010484:	f7f0 fbb2 	bl	8000bec <__aeabi_ldivmod>
 8010488:	9b02      	ldr	r3, [sp, #8]
 801048a:	3001      	adds	r0, #1
 801048c:	f141 0100 	adc.w	r1, r1, #0
 8010490:	fb00 f303 	mul.w	r3, r0, r3
 8010494:	fb01 330a 	mla	r3, r1, sl, r3
 8010498:	fba0 0a0a 	umull	r0, sl, r0, sl
 801049c:	1986      	adds	r6, r0, r6
 801049e:	4453      	add	r3, sl
 80104a0:	eb43 0707 	adc.w	r7, r3, r7
 80104a4:	e7b9      	b.n	801041a <rcl_timer_call+0x96>
 80104a6:	bf00      	nop

080104a8 <rcl_timer_is_ready>:
 80104a8:	b570      	push	{r4, r5, r6, lr}
 80104aa:	b082      	sub	sp, #8
 80104ac:	b378      	cbz	r0, 801050e <rcl_timer_is_ready+0x66>
 80104ae:	6803      	ldr	r3, [r0, #0]
 80104b0:	4604      	mov	r4, r0
 80104b2:	b383      	cbz	r3, 8010516 <rcl_timer_is_ready+0x6e>
 80104b4:	460d      	mov	r5, r1
 80104b6:	b351      	cbz	r1, 801050e <rcl_timer_is_ready+0x66>
 80104b8:	f3bf 8f5b 	dmb	ish
 80104bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80104c0:	f3bf 8f5b 	dmb	ish
 80104c4:	b953      	cbnz	r3, 80104dc <rcl_timer_is_ready+0x34>
 80104c6:	6803      	ldr	r3, [r0, #0]
 80104c8:	4669      	mov	r1, sp
 80104ca:	6818      	ldr	r0, [r3, #0]
 80104cc:	f7ff ff4e 	bl	801036c <rcl_clock_get_now>
 80104d0:	4606      	mov	r6, r0
 80104d2:	b140      	cbz	r0, 80104e6 <rcl_timer_is_ready+0x3e>
 80104d4:	f240 3321 	movw	r3, #801	@ 0x321
 80104d8:	4298      	cmp	r0, r3
 80104da:	d101      	bne.n	80104e0 <rcl_timer_is_ready+0x38>
 80104dc:	2600      	movs	r6, #0
 80104de:	702e      	strb	r6, [r5, #0]
 80104e0:	4630      	mov	r0, r6
 80104e2:	b002      	add	sp, #8
 80104e4:	bd70      	pop	{r4, r5, r6, pc}
 80104e6:	6820      	ldr	r0, [r4, #0]
 80104e8:	2105      	movs	r1, #5
 80104ea:	3028      	adds	r0, #40	@ 0x28
 80104ec:	f001 fc10 	bl	8011d10 <__atomic_load_8>
 80104f0:	9b00      	ldr	r3, [sp, #0]
 80104f2:	1ac0      	subs	r0, r0, r3
 80104f4:	9b01      	ldr	r3, [sp, #4]
 80104f6:	eb61 0103 	sbc.w	r1, r1, r3
 80104fa:	2801      	cmp	r0, #1
 80104fc:	f171 0300 	sbcs.w	r3, r1, #0
 8010500:	bfb4      	ite	lt
 8010502:	2301      	movlt	r3, #1
 8010504:	2300      	movge	r3, #0
 8010506:	4630      	mov	r0, r6
 8010508:	702b      	strb	r3, [r5, #0]
 801050a:	b002      	add	sp, #8
 801050c:	bd70      	pop	{r4, r5, r6, pc}
 801050e:	260b      	movs	r6, #11
 8010510:	4630      	mov	r0, r6
 8010512:	b002      	add	sp, #8
 8010514:	bd70      	pop	{r4, r5, r6, pc}
 8010516:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801051a:	e7e1      	b.n	80104e0 <rcl_timer_is_ready+0x38>

0801051c <rcl_timer_get_time_until_next_call>:
 801051c:	b570      	push	{r4, r5, r6, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	b330      	cbz	r0, 8010570 <rcl_timer_get_time_until_next_call+0x54>
 8010522:	6803      	ldr	r3, [r0, #0]
 8010524:	4604      	mov	r4, r0
 8010526:	b33b      	cbz	r3, 8010578 <rcl_timer_get_time_until_next_call+0x5c>
 8010528:	460d      	mov	r5, r1
 801052a:	b309      	cbz	r1, 8010570 <rcl_timer_get_time_until_next_call+0x54>
 801052c:	f3bf 8f5b 	dmb	ish
 8010530:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010534:	f3bf 8f5b 	dmb	ish
 8010538:	b9ab      	cbnz	r3, 8010566 <rcl_timer_get_time_until_next_call+0x4a>
 801053a:	6803      	ldr	r3, [r0, #0]
 801053c:	4669      	mov	r1, sp
 801053e:	6818      	ldr	r0, [r3, #0]
 8010540:	f7ff ff14 	bl	801036c <rcl_clock_get_now>
 8010544:	4606      	mov	r6, r0
 8010546:	b958      	cbnz	r0, 8010560 <rcl_timer_get_time_until_next_call+0x44>
 8010548:	6820      	ldr	r0, [r4, #0]
 801054a:	2105      	movs	r1, #5
 801054c:	3028      	adds	r0, #40	@ 0x28
 801054e:	f001 fbdf 	bl	8011d10 <__atomic_load_8>
 8010552:	9b00      	ldr	r3, [sp, #0]
 8010554:	1ac0      	subs	r0, r0, r3
 8010556:	9b01      	ldr	r3, [sp, #4]
 8010558:	6028      	str	r0, [r5, #0]
 801055a:	eb61 0103 	sbc.w	r1, r1, r3
 801055e:	6069      	str	r1, [r5, #4]
 8010560:	4630      	mov	r0, r6
 8010562:	b002      	add	sp, #8
 8010564:	bd70      	pop	{r4, r5, r6, pc}
 8010566:	f240 3621 	movw	r6, #801	@ 0x321
 801056a:	4630      	mov	r0, r6
 801056c:	b002      	add	sp, #8
 801056e:	bd70      	pop	{r4, r5, r6, pc}
 8010570:	260b      	movs	r6, #11
 8010572:	4630      	mov	r0, r6
 8010574:	b002      	add	sp, #8
 8010576:	bd70      	pop	{r4, r5, r6, pc}
 8010578:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801057c:	e7f0      	b.n	8010560 <rcl_timer_get_time_until_next_call+0x44>
 801057e:	bf00      	nop

08010580 <rcl_timer_get_guard_condition>:
 8010580:	b130      	cbz	r0, 8010590 <rcl_timer_get_guard_condition+0x10>
 8010582:	6800      	ldr	r0, [r0, #0]
 8010584:	b120      	cbz	r0, 8010590 <rcl_timer_get_guard_condition+0x10>
 8010586:	68c3      	ldr	r3, [r0, #12]
 8010588:	b10b      	cbz	r3, 801058e <rcl_timer_get_guard_condition+0xe>
 801058a:	3008      	adds	r0, #8
 801058c:	4770      	bx	lr
 801058e:	4618      	mov	r0, r3
 8010590:	4770      	bx	lr
 8010592:	bf00      	nop

08010594 <rcl_validate_enclave_name_with_size>:
 8010594:	b378      	cbz	r0, 80105f6 <rcl_validate_enclave_name_with_size+0x62>
 8010596:	b570      	push	{r4, r5, r6, lr}
 8010598:	4615      	mov	r5, r2
 801059a:	b0c2      	sub	sp, #264	@ 0x108
 801059c:	b302      	cbz	r2, 80105e0 <rcl_validate_enclave_name_with_size+0x4c>
 801059e:	461e      	mov	r6, r3
 80105a0:	466a      	mov	r2, sp
 80105a2:	ab01      	add	r3, sp, #4
 80105a4:	460c      	mov	r4, r1
 80105a6:	f002 f849 	bl	801263c <rmw_validate_namespace_with_size>
 80105aa:	4684      	mov	ip, r0
 80105ac:	b9e8      	cbnz	r0, 80105ea <rcl_validate_enclave_name_with_size+0x56>
 80105ae:	9b00      	ldr	r3, [sp, #0]
 80105b0:	b923      	cbnz	r3, 80105bc <rcl_validate_enclave_name_with_size+0x28>
 80105b2:	2300      	movs	r3, #0
 80105b4:	602b      	str	r3, [r5, #0]
 80105b6:	4660      	mov	r0, ip
 80105b8:	b042      	add	sp, #264	@ 0x108
 80105ba:	bd70      	pop	{r4, r5, r6, pc}
 80105bc:	2b07      	cmp	r3, #7
 80105be:	d007      	beq.n	80105d0 <rcl_validate_enclave_name_with_size+0x3c>
 80105c0:	1e5a      	subs	r2, r3, #1
 80105c2:	2a05      	cmp	r2, #5
 80105c4:	d833      	bhi.n	801062e <rcl_validate_enclave_name_with_size+0x9a>
 80105c6:	e8df f002 	tbb	[pc, r2]
 80105ca:	2c2f      	.short	0x2c2f
 80105cc:	1a232629 	.word	0x1a232629
 80105d0:	2cff      	cmp	r4, #255	@ 0xff
 80105d2:	d9ee      	bls.n	80105b2 <rcl_validate_enclave_name_with_size+0x1e>
 80105d4:	602b      	str	r3, [r5, #0]
 80105d6:	2e00      	cmp	r6, #0
 80105d8:	d0ed      	beq.n	80105b6 <rcl_validate_enclave_name_with_size+0x22>
 80105da:	23fe      	movs	r3, #254	@ 0xfe
 80105dc:	6033      	str	r3, [r6, #0]
 80105de:	e7ea      	b.n	80105b6 <rcl_validate_enclave_name_with_size+0x22>
 80105e0:	f04f 0c0b 	mov.w	ip, #11
 80105e4:	4660      	mov	r0, ip
 80105e6:	b042      	add	sp, #264	@ 0x108
 80105e8:	bd70      	pop	{r4, r5, r6, pc}
 80105ea:	f7fe fe93 	bl	800f314 <rcl_convert_rmw_ret_to_rcl_ret>
 80105ee:	4684      	mov	ip, r0
 80105f0:	4660      	mov	r0, ip
 80105f2:	b042      	add	sp, #264	@ 0x108
 80105f4:	bd70      	pop	{r4, r5, r6, pc}
 80105f6:	f04f 0c0b 	mov.w	ip, #11
 80105fa:	4660      	mov	r0, ip
 80105fc:	4770      	bx	lr
 80105fe:	2306      	movs	r3, #6
 8010600:	602b      	str	r3, [r5, #0]
 8010602:	2e00      	cmp	r6, #0
 8010604:	d0d7      	beq.n	80105b6 <rcl_validate_enclave_name_with_size+0x22>
 8010606:	9b01      	ldr	r3, [sp, #4]
 8010608:	6033      	str	r3, [r6, #0]
 801060a:	4660      	mov	r0, ip
 801060c:	b042      	add	sp, #264	@ 0x108
 801060e:	bd70      	pop	{r4, r5, r6, pc}
 8010610:	2305      	movs	r3, #5
 8010612:	602b      	str	r3, [r5, #0]
 8010614:	e7f5      	b.n	8010602 <rcl_validate_enclave_name_with_size+0x6e>
 8010616:	2304      	movs	r3, #4
 8010618:	602b      	str	r3, [r5, #0]
 801061a:	e7f2      	b.n	8010602 <rcl_validate_enclave_name_with_size+0x6e>
 801061c:	2303      	movs	r3, #3
 801061e:	602b      	str	r3, [r5, #0]
 8010620:	e7ef      	b.n	8010602 <rcl_validate_enclave_name_with_size+0x6e>
 8010622:	2302      	movs	r3, #2
 8010624:	602b      	str	r3, [r5, #0]
 8010626:	e7ec      	b.n	8010602 <rcl_validate_enclave_name_with_size+0x6e>
 8010628:	2301      	movs	r3, #1
 801062a:	602b      	str	r3, [r5, #0]
 801062c:	e7e9      	b.n	8010602 <rcl_validate_enclave_name_with_size+0x6e>
 801062e:	4a04      	ldr	r2, [pc, #16]	@ (8010640 <rcl_validate_enclave_name_with_size+0xac>)
 8010630:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010634:	a802      	add	r0, sp, #8
 8010636:	f001 fd25 	bl	8012084 <rcutils_snprintf>
 801063a:	f04f 0c01 	mov.w	ip, #1
 801063e:	e7ba      	b.n	80105b6 <rcl_validate_enclave_name_with_size+0x22>
 8010640:	08017c20 	.word	0x08017c20

08010644 <rcl_validate_enclave_name>:
 8010644:	b168      	cbz	r0, 8010662 <rcl_validate_enclave_name+0x1e>
 8010646:	b570      	push	{r4, r5, r6, lr}
 8010648:	460d      	mov	r5, r1
 801064a:	4616      	mov	r6, r2
 801064c:	4604      	mov	r4, r0
 801064e:	f7ef fdd1 	bl	80001f4 <strlen>
 8010652:	4633      	mov	r3, r6
 8010654:	4601      	mov	r1, r0
 8010656:	462a      	mov	r2, r5
 8010658:	4620      	mov	r0, r4
 801065a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801065e:	f7ff bf99 	b.w	8010594 <rcl_validate_enclave_name_with_size>
 8010662:	200b      	movs	r0, #11
 8010664:	4770      	bx	lr
 8010666:	bf00      	nop

08010668 <rcl_get_zero_initialized_wait_set>:
 8010668:	b510      	push	{r4, lr}
 801066a:	4c08      	ldr	r4, [pc, #32]	@ (801068c <rcl_get_zero_initialized_wait_set+0x24>)
 801066c:	4686      	mov	lr, r0
 801066e:	4684      	mov	ip, r0
 8010670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010672:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010678:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801067c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801067e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010682:	6823      	ldr	r3, [r4, #0]
 8010684:	f8cc 3000 	str.w	r3, [ip]
 8010688:	4670      	mov	r0, lr
 801068a:	bd10      	pop	{r4, pc}
 801068c:	08017c80 	.word	0x08017c80

08010690 <rcl_wait_set_is_valid>:
 8010690:	b118      	cbz	r0, 801069a <rcl_wait_set_is_valid+0xa>
 8010692:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8010694:	3800      	subs	r0, #0
 8010696:	bf18      	it	ne
 8010698:	2001      	movne	r0, #1
 801069a:	4770      	bx	lr

0801069c <rcl_wait_set_fini>:
 801069c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106a0:	b082      	sub	sp, #8
 80106a2:	2800      	cmp	r0, #0
 80106a4:	f000 8095 	beq.w	80107d2 <rcl_wait_set_fini+0x136>
 80106a8:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80106aa:	4604      	mov	r4, r0
 80106ac:	2e00      	cmp	r6, #0
 80106ae:	f000 808c 	beq.w	80107ca <rcl_wait_set_fini+0x12e>
 80106b2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80106b4:	f003 f9b6 	bl	8013a24 <rmw_destroy_wait_set>
 80106b8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80106ba:	1e06      	subs	r6, r0, #0
 80106bc:	bf18      	it	ne
 80106be:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80106c2:	2d00      	cmp	r5, #0
 80106c4:	f000 8081 	beq.w	80107ca <rcl_wait_set_fini+0x12e>
 80106c8:	6820      	ldr	r0, [r4, #0]
 80106ca:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80106ce:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80106d0:	2700      	movs	r7, #0
 80106d2:	6067      	str	r7, [r4, #4]
 80106d4:	602f      	str	r7, [r5, #0]
 80106d6:	b120      	cbz	r0, 80106e2 <rcl_wait_set_fini+0x46>
 80106d8:	9101      	str	r1, [sp, #4]
 80106da:	47c0      	blx	r8
 80106dc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80106de:	9901      	ldr	r1, [sp, #4]
 80106e0:	6027      	str	r7, [r4, #0]
 80106e2:	68a8      	ldr	r0, [r5, #8]
 80106e4:	b120      	cbz	r0, 80106f0 <rcl_wait_set_fini+0x54>
 80106e6:	47c0      	blx	r8
 80106e8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80106ea:	2300      	movs	r3, #0
 80106ec:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80106f0:	68a0      	ldr	r0, [r4, #8]
 80106f2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80106f4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80106f6:	f04f 0800 	mov.w	r8, #0
 80106fa:	f8c4 800c 	str.w	r8, [r4, #12]
 80106fe:	f8c5 800c 	str.w	r8, [r5, #12]
 8010702:	b128      	cbz	r0, 8010710 <rcl_wait_set_fini+0x74>
 8010704:	47b8      	blx	r7
 8010706:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010708:	f8c4 8008 	str.w	r8, [r4, #8]
 801070c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801070e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010710:	6968      	ldr	r0, [r5, #20]
 8010712:	f04f 0800 	mov.w	r8, #0
 8010716:	f8c5 8010 	str.w	r8, [r5, #16]
 801071a:	b128      	cbz	r0, 8010728 <rcl_wait_set_fini+0x8c>
 801071c:	47b8      	blx	r7
 801071e:	f8c5 8014 	str.w	r8, [r5, #20]
 8010722:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010724:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010726:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010728:	6920      	ldr	r0, [r4, #16]
 801072a:	f04f 0800 	mov.w	r8, #0
 801072e:	f8c4 8014 	str.w	r8, [r4, #20]
 8010732:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8010736:	b128      	cbz	r0, 8010744 <rcl_wait_set_fini+0xa8>
 8010738:	47b8      	blx	r7
 801073a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801073c:	f8c4 8010 	str.w	r8, [r4, #16]
 8010740:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010742:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010744:	69a0      	ldr	r0, [r4, #24]
 8010746:	f04f 0800 	mov.w	r8, #0
 801074a:	f8c4 801c 	str.w	r8, [r4, #28]
 801074e:	f8c5 8018 	str.w	r8, [r5, #24]
 8010752:	b128      	cbz	r0, 8010760 <rcl_wait_set_fini+0xc4>
 8010754:	9101      	str	r1, [sp, #4]
 8010756:	47b8      	blx	r7
 8010758:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801075a:	9901      	ldr	r1, [sp, #4]
 801075c:	f8c4 8018 	str.w	r8, [r4, #24]
 8010760:	6a28      	ldr	r0, [r5, #32]
 8010762:	b120      	cbz	r0, 801076e <rcl_wait_set_fini+0xd2>
 8010764:	47b8      	blx	r7
 8010766:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010768:	2300      	movs	r3, #0
 801076a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801076e:	6a20      	ldr	r0, [r4, #32]
 8010770:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010774:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010776:	2700      	movs	r7, #0
 8010778:	6267      	str	r7, [r4, #36]	@ 0x24
 801077a:	626f      	str	r7, [r5, #36]	@ 0x24
 801077c:	b120      	cbz	r0, 8010788 <rcl_wait_set_fini+0xec>
 801077e:	9101      	str	r1, [sp, #4]
 8010780:	47c0      	blx	r8
 8010782:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010784:	9901      	ldr	r1, [sp, #4]
 8010786:	6227      	str	r7, [r4, #32]
 8010788:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801078a:	b120      	cbz	r0, 8010796 <rcl_wait_set_fini+0xfa>
 801078c:	47c0      	blx	r8
 801078e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010790:	2300      	movs	r3, #0
 8010792:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8010796:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010798:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801079c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801079e:	2700      	movs	r7, #0
 80107a0:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80107a2:	632f      	str	r7, [r5, #48]	@ 0x30
 80107a4:	b120      	cbz	r0, 80107b0 <rcl_wait_set_fini+0x114>
 80107a6:	9101      	str	r1, [sp, #4]
 80107a8:	47c0      	blx	r8
 80107aa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80107ac:	9901      	ldr	r1, [sp, #4]
 80107ae:	62a7      	str	r7, [r4, #40]	@ 0x28
 80107b0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80107b2:	b120      	cbz	r0, 80107be <rcl_wait_set_fini+0x122>
 80107b4:	47c0      	blx	r8
 80107b6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80107b8:	2300      	movs	r3, #0
 80107ba:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80107be:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80107c0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80107c2:	4628      	mov	r0, r5
 80107c4:	4798      	blx	r3
 80107c6:	2300      	movs	r3, #0
 80107c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80107ca:	4630      	mov	r0, r6
 80107cc:	b002      	add	sp, #8
 80107ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107d2:	260b      	movs	r6, #11
 80107d4:	4630      	mov	r0, r6
 80107d6:	b002      	add	sp, #8
 80107d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080107dc <rcl_wait_set_add_subscription>:
 80107dc:	b318      	cbz	r0, 8010826 <rcl_wait_set_add_subscription+0x4a>
 80107de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80107e0:	b570      	push	{r4, r5, r6, lr}
 80107e2:	4604      	mov	r4, r0
 80107e4:	b30b      	cbz	r3, 801082a <rcl_wait_set_add_subscription+0x4e>
 80107e6:	b319      	cbz	r1, 8010830 <rcl_wait_set_add_subscription+0x54>
 80107e8:	681d      	ldr	r5, [r3, #0]
 80107ea:	6840      	ldr	r0, [r0, #4]
 80107ec:	4285      	cmp	r5, r0
 80107ee:	d217      	bcs.n	8010820 <rcl_wait_set_add_subscription+0x44>
 80107f0:	6820      	ldr	r0, [r4, #0]
 80107f2:	1c6e      	adds	r6, r5, #1
 80107f4:	601e      	str	r6, [r3, #0]
 80107f6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80107fa:	b102      	cbz	r2, 80107fe <rcl_wait_set_add_subscription+0x22>
 80107fc:	6015      	str	r5, [r2, #0]
 80107fe:	4608      	mov	r0, r1
 8010800:	f7ff fd14 	bl	801022c <rcl_subscription_get_rmw_handle>
 8010804:	b150      	cbz	r0, 801081c <rcl_wait_set_add_subscription+0x40>
 8010806:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010808:	6842      	ldr	r2, [r0, #4]
 801080a:	689b      	ldr	r3, [r3, #8]
 801080c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010810:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010812:	6853      	ldr	r3, [r2, #4]
 8010814:	3301      	adds	r3, #1
 8010816:	2000      	movs	r0, #0
 8010818:	6053      	str	r3, [r2, #4]
 801081a:	bd70      	pop	{r4, r5, r6, pc}
 801081c:	2001      	movs	r0, #1
 801081e:	bd70      	pop	{r4, r5, r6, pc}
 8010820:	f240 3086 	movw	r0, #902	@ 0x386
 8010824:	bd70      	pop	{r4, r5, r6, pc}
 8010826:	200b      	movs	r0, #11
 8010828:	4770      	bx	lr
 801082a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801082e:	bd70      	pop	{r4, r5, r6, pc}
 8010830:	200b      	movs	r0, #11
 8010832:	bd70      	pop	{r4, r5, r6, pc}

08010834 <rcl_wait_set_clear>:
 8010834:	2800      	cmp	r0, #0
 8010836:	d073      	beq.n	8010920 <rcl_wait_set_clear+0xec>
 8010838:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801083a:	b510      	push	{r4, lr}
 801083c:	4604      	mov	r4, r0
 801083e:	2b00      	cmp	r3, #0
 8010840:	d070      	beq.n	8010924 <rcl_wait_set_clear+0xf0>
 8010842:	6800      	ldr	r0, [r0, #0]
 8010844:	b138      	cbz	r0, 8010856 <rcl_wait_set_clear+0x22>
 8010846:	6862      	ldr	r2, [r4, #4]
 8010848:	2100      	movs	r1, #0
 801084a:	0092      	lsls	r2, r2, #2
 801084c:	f005 fed8 	bl	8016600 <memset>
 8010850:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010852:	2200      	movs	r2, #0
 8010854:	601a      	str	r2, [r3, #0]
 8010856:	68a0      	ldr	r0, [r4, #8]
 8010858:	b138      	cbz	r0, 801086a <rcl_wait_set_clear+0x36>
 801085a:	68e2      	ldr	r2, [r4, #12]
 801085c:	2100      	movs	r1, #0
 801085e:	0092      	lsls	r2, r2, #2
 8010860:	f005 fece 	bl	8016600 <memset>
 8010864:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010866:	2200      	movs	r2, #0
 8010868:	60da      	str	r2, [r3, #12]
 801086a:	69a0      	ldr	r0, [r4, #24]
 801086c:	b138      	cbz	r0, 801087e <rcl_wait_set_clear+0x4a>
 801086e:	69e2      	ldr	r2, [r4, #28]
 8010870:	2100      	movs	r1, #0
 8010872:	0092      	lsls	r2, r2, #2
 8010874:	f005 fec4 	bl	8016600 <memset>
 8010878:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801087a:	2200      	movs	r2, #0
 801087c:	619a      	str	r2, [r3, #24]
 801087e:	6a20      	ldr	r0, [r4, #32]
 8010880:	b138      	cbz	r0, 8010892 <rcl_wait_set_clear+0x5e>
 8010882:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8010884:	2100      	movs	r1, #0
 8010886:	0092      	lsls	r2, r2, #2
 8010888:	f005 feba 	bl	8016600 <memset>
 801088c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801088e:	2200      	movs	r2, #0
 8010890:	625a      	str	r2, [r3, #36]	@ 0x24
 8010892:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010894:	b138      	cbz	r0, 80108a6 <rcl_wait_set_clear+0x72>
 8010896:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010898:	2100      	movs	r1, #0
 801089a:	0092      	lsls	r2, r2, #2
 801089c:	f005 feb0 	bl	8016600 <memset>
 80108a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80108a2:	2200      	movs	r2, #0
 80108a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80108a6:	6920      	ldr	r0, [r4, #16]
 80108a8:	b138      	cbz	r0, 80108ba <rcl_wait_set_clear+0x86>
 80108aa:	6962      	ldr	r2, [r4, #20]
 80108ac:	2100      	movs	r1, #0
 80108ae:	0092      	lsls	r2, r2, #2
 80108b0:	f005 fea6 	bl	8016600 <memset>
 80108b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80108b6:	2200      	movs	r2, #0
 80108b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80108ba:	6898      	ldr	r0, [r3, #8]
 80108bc:	b138      	cbz	r0, 80108ce <rcl_wait_set_clear+0x9a>
 80108be:	685a      	ldr	r2, [r3, #4]
 80108c0:	2100      	movs	r1, #0
 80108c2:	0092      	lsls	r2, r2, #2
 80108c4:	f005 fe9c 	bl	8016600 <memset>
 80108c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80108ca:	2200      	movs	r2, #0
 80108cc:	605a      	str	r2, [r3, #4]
 80108ce:	6958      	ldr	r0, [r3, #20]
 80108d0:	b138      	cbz	r0, 80108e2 <rcl_wait_set_clear+0xae>
 80108d2:	691a      	ldr	r2, [r3, #16]
 80108d4:	2100      	movs	r1, #0
 80108d6:	0092      	lsls	r2, r2, #2
 80108d8:	f005 fe92 	bl	8016600 <memset>
 80108dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80108de:	2200      	movs	r2, #0
 80108e0:	611a      	str	r2, [r3, #16]
 80108e2:	6a18      	ldr	r0, [r3, #32]
 80108e4:	b138      	cbz	r0, 80108f6 <rcl_wait_set_clear+0xc2>
 80108e6:	69da      	ldr	r2, [r3, #28]
 80108e8:	2100      	movs	r1, #0
 80108ea:	0092      	lsls	r2, r2, #2
 80108ec:	f005 fe88 	bl	8016600 <memset>
 80108f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80108f2:	2200      	movs	r2, #0
 80108f4:	61da      	str	r2, [r3, #28]
 80108f6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80108f8:	b138      	cbz	r0, 801090a <rcl_wait_set_clear+0xd6>
 80108fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80108fc:	2100      	movs	r1, #0
 80108fe:	0092      	lsls	r2, r2, #2
 8010900:	f005 fe7e 	bl	8016600 <memset>
 8010904:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010906:	2200      	movs	r2, #0
 8010908:	629a      	str	r2, [r3, #40]	@ 0x28
 801090a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801090c:	b138      	cbz	r0, 801091e <rcl_wait_set_clear+0xea>
 801090e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010910:	2100      	movs	r1, #0
 8010912:	0092      	lsls	r2, r2, #2
 8010914:	f005 fe74 	bl	8016600 <memset>
 8010918:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801091a:	2000      	movs	r0, #0
 801091c:	6358      	str	r0, [r3, #52]	@ 0x34
 801091e:	bd10      	pop	{r4, pc}
 8010920:	200b      	movs	r0, #11
 8010922:	4770      	bx	lr
 8010924:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010928:	bd10      	pop	{r4, pc}
 801092a:	bf00      	nop

0801092c <rcl_wait_set_resize>:
 801092c:	2800      	cmp	r0, #0
 801092e:	f000 8185 	beq.w	8010c3c <rcl_wait_set_resize+0x310>
 8010932:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010936:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8010938:	b083      	sub	sp, #12
 801093a:	4605      	mov	r5, r0
 801093c:	2c00      	cmp	r4, #0
 801093e:	f000 817f 	beq.w	8010c40 <rcl_wait_set_resize+0x314>
 8010942:	f04f 0900 	mov.w	r9, #0
 8010946:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801094a:	461f      	mov	r7, r3
 801094c:	4688      	mov	r8, r1
 801094e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8010952:	4616      	mov	r6, r2
 8010954:	f8c0 9004 	str.w	r9, [r0, #4]
 8010958:	f8c4 9000 	str.w	r9, [r4]
 801095c:	2900      	cmp	r1, #0
 801095e:	f000 80bd 	beq.w	8010adc <rcl_wait_set_resize+0x1b0>
 8010962:	008c      	lsls	r4, r1, #2
 8010964:	6800      	ldr	r0, [r0, #0]
 8010966:	9301      	str	r3, [sp, #4]
 8010968:	4652      	mov	r2, sl
 801096a:	4621      	mov	r1, r4
 801096c:	4798      	blx	r3
 801096e:	9b01      	ldr	r3, [sp, #4]
 8010970:	6028      	str	r0, [r5, #0]
 8010972:	2800      	cmp	r0, #0
 8010974:	f000 80cb 	beq.w	8010b0e <rcl_wait_set_resize+0x1e2>
 8010978:	4622      	mov	r2, r4
 801097a:	4649      	mov	r1, r9
 801097c:	9301      	str	r3, [sp, #4]
 801097e:	f005 fe3f 	bl	8016600 <memset>
 8010982:	f8c5 8004 	str.w	r8, [r5, #4]
 8010986:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801098a:	9b01      	ldr	r3, [sp, #4]
 801098c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8010990:	f8c8 9004 	str.w	r9, [r8, #4]
 8010994:	4652      	mov	r2, sl
 8010996:	4621      	mov	r1, r4
 8010998:	4798      	blx	r3
 801099a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801099c:	f8c8 0008 	str.w	r0, [r8, #8]
 80109a0:	689b      	ldr	r3, [r3, #8]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f000 80ac 	beq.w	8010b00 <rcl_wait_set_resize+0x1d4>
 80109a8:	4622      	mov	r2, r4
 80109aa:	4649      	mov	r1, r9
 80109ac:	4618      	mov	r0, r3
 80109ae:	f005 fe27 	bl	8016600 <memset>
 80109b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80109b4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80109b8:	f04f 0800 	mov.w	r8, #0
 80109bc:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80109c0:	f8c5 800c 	str.w	r8, [r5, #12]
 80109c4:	f8c4 800c 	str.w	r8, [r4, #12]
 80109c8:	2e00      	cmp	r6, #0
 80109ca:	f040 80a4 	bne.w	8010b16 <rcl_wait_set_resize+0x1ea>
 80109ce:	68a8      	ldr	r0, [r5, #8]
 80109d0:	b128      	cbz	r0, 80109de <rcl_wait_set_resize+0xb2>
 80109d2:	4649      	mov	r1, r9
 80109d4:	4790      	blx	r2
 80109d6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80109d8:	60ae      	str	r6, [r5, #8]
 80109da:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80109de:	f04f 0800 	mov.w	r8, #0
 80109e2:	19f6      	adds	r6, r6, r7
 80109e4:	f8c4 8010 	str.w	r8, [r4, #16]
 80109e8:	f040 80ac 	bne.w	8010b44 <rcl_wait_set_resize+0x218>
 80109ec:	6960      	ldr	r0, [r4, #20]
 80109ee:	b130      	cbz	r0, 80109fe <rcl_wait_set_resize+0xd2>
 80109f0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80109f2:	4649      	mov	r1, r9
 80109f4:	4798      	blx	r3
 80109f6:	6166      	str	r6, [r4, #20]
 80109f8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80109fa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80109fe:	2600      	movs	r6, #0
 8010a00:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8010a04:	616e      	str	r6, [r5, #20]
 8010a06:	6426      	str	r6, [r4, #64]	@ 0x40
 8010a08:	2f00      	cmp	r7, #0
 8010a0a:	f040 80ad 	bne.w	8010b68 <rcl_wait_set_resize+0x23c>
 8010a0e:	6928      	ldr	r0, [r5, #16]
 8010a10:	b138      	cbz	r0, 8010a22 <rcl_wait_set_resize+0xf6>
 8010a12:	4649      	mov	r1, r9
 8010a14:	47d0      	blx	sl
 8010a16:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010a18:	612f      	str	r7, [r5, #16]
 8010a1a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8010a1e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010a22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a24:	2600      	movs	r6, #0
 8010a26:	61ee      	str	r6, [r5, #28]
 8010a28:	61a6      	str	r6, [r4, #24]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	f040 80af 	bne.w	8010b8e <rcl_wait_set_resize+0x262>
 8010a30:	69a8      	ldr	r0, [r5, #24]
 8010a32:	b120      	cbz	r0, 8010a3e <rcl_wait_set_resize+0x112>
 8010a34:	4649      	mov	r1, r9
 8010a36:	47d0      	blx	sl
 8010a38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a3a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010a3c:	61ab      	str	r3, [r5, #24]
 8010a3e:	6a20      	ldr	r0, [r4, #32]
 8010a40:	b128      	cbz	r0, 8010a4e <rcl_wait_set_resize+0x122>
 8010a42:	4649      	mov	r1, r9
 8010a44:	47d0      	blx	sl
 8010a46:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010a48:	2300      	movs	r3, #0
 8010a4a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010a4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a50:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8010a52:	2600      	movs	r6, #0
 8010a54:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8010a58:	626e      	str	r6, [r5, #36]	@ 0x24
 8010a5a:	6266      	str	r6, [r4, #36]	@ 0x24
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f000 80b6 	beq.w	8010bce <rcl_wait_set_resize+0x2a2>
 8010a62:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8010a66:	6a28      	ldr	r0, [r5, #32]
 8010a68:	463a      	mov	r2, r7
 8010a6a:	4651      	mov	r1, sl
 8010a6c:	47c8      	blx	r9
 8010a6e:	6228      	str	r0, [r5, #32]
 8010a70:	2800      	cmp	r0, #0
 8010a72:	d04c      	beq.n	8010b0e <rcl_wait_set_resize+0x1e2>
 8010a74:	4652      	mov	r2, sl
 8010a76:	4631      	mov	r1, r6
 8010a78:	f005 fdc2 	bl	8016600 <memset>
 8010a7c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010a7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a80:	626b      	str	r3, [r5, #36]	@ 0x24
 8010a82:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8010a84:	62a6      	str	r6, [r4, #40]	@ 0x28
 8010a86:	463a      	mov	r2, r7
 8010a88:	4651      	mov	r1, sl
 8010a8a:	47c8      	blx	r9
 8010a8c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010a8e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8010a90:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8010a92:	2c00      	cmp	r4, #0
 8010a94:	f000 80f0 	beq.w	8010c78 <rcl_wait_set_resize+0x34c>
 8010a98:	4620      	mov	r0, r4
 8010a9a:	4652      	mov	r2, sl
 8010a9c:	4631      	mov	r1, r6
 8010a9e:	f005 fdaf 	bl	8016600 <memset>
 8010aa2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010aa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010aa6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8010aa8:	2600      	movs	r6, #0
 8010aaa:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8010aae:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8010ab0:	6326      	str	r6, [r4, #48]	@ 0x30
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	f040 809d 	bne.w	8010bf2 <rcl_wait_set_resize+0x2c6>
 8010ab8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8010aba:	b120      	cbz	r0, 8010ac6 <rcl_wait_set_resize+0x19a>
 8010abc:	4639      	mov	r1, r7
 8010abe:	47c0      	blx	r8
 8010ac0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ac2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010ac4:	62ab      	str	r3, [r5, #40]	@ 0x28
 8010ac6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8010ac8:	b310      	cbz	r0, 8010b10 <rcl_wait_set_resize+0x1e4>
 8010aca:	4639      	mov	r1, r7
 8010acc:	47c0      	blx	r8
 8010ace:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010ad0:	2000      	movs	r0, #0
 8010ad2:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8010ad6:	b003      	add	sp, #12
 8010ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010adc:	6800      	ldr	r0, [r0, #0]
 8010ade:	b120      	cbz	r0, 8010aea <rcl_wait_set_resize+0x1be>
 8010ae0:	4651      	mov	r1, sl
 8010ae2:	47d8      	blx	fp
 8010ae4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010ae6:	f8c5 8000 	str.w	r8, [r5]
 8010aea:	68a0      	ldr	r0, [r4, #8]
 8010aec:	2800      	cmp	r0, #0
 8010aee:	f43f af61 	beq.w	80109b4 <rcl_wait_set_resize+0x88>
 8010af2:	4651      	mov	r1, sl
 8010af4:	47d8      	blx	fp
 8010af6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010af8:	2300      	movs	r3, #0
 8010afa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8010afe:	e759      	b.n	80109b4 <rcl_wait_set_resize+0x88>
 8010b00:	6828      	ldr	r0, [r5, #0]
 8010b02:	9301      	str	r3, [sp, #4]
 8010b04:	4651      	mov	r1, sl
 8010b06:	47d8      	blx	fp
 8010b08:	9b01      	ldr	r3, [sp, #4]
 8010b0a:	e9c5 3300 	strd	r3, r3, [r5]
 8010b0e:	200a      	movs	r0, #10
 8010b10:	b003      	add	sp, #12
 8010b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b16:	00b4      	lsls	r4, r6, #2
 8010b18:	68a8      	ldr	r0, [r5, #8]
 8010b1a:	464a      	mov	r2, r9
 8010b1c:	4621      	mov	r1, r4
 8010b1e:	4798      	blx	r3
 8010b20:	60a8      	str	r0, [r5, #8]
 8010b22:	2800      	cmp	r0, #0
 8010b24:	d0f3      	beq.n	8010b0e <rcl_wait_set_resize+0x1e2>
 8010b26:	4622      	mov	r2, r4
 8010b28:	4641      	mov	r1, r8
 8010b2a:	f005 fd69 	bl	8016600 <memset>
 8010b2e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b30:	60ee      	str	r6, [r5, #12]
 8010b32:	f04f 0800 	mov.w	r8, #0
 8010b36:	19f6      	adds	r6, r6, r7
 8010b38:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010b3c:	f8c4 8010 	str.w	r8, [r4, #16]
 8010b40:	f43f af54 	beq.w	80109ec <rcl_wait_set_resize+0xc0>
 8010b44:	00b6      	lsls	r6, r6, #2
 8010b46:	464a      	mov	r2, r9
 8010b48:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8010b4a:	6960      	ldr	r0, [r4, #20]
 8010b4c:	4631      	mov	r1, r6
 8010b4e:	4798      	blx	r3
 8010b50:	4681      	mov	r9, r0
 8010b52:	6160      	str	r0, [r4, #20]
 8010b54:	2800      	cmp	r0, #0
 8010b56:	d076      	beq.n	8010c46 <rcl_wait_set_resize+0x31a>
 8010b58:	4632      	mov	r2, r6
 8010b5a:	4641      	mov	r1, r8
 8010b5c:	f005 fd50 	bl	8016600 <memset>
 8010b60:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b62:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010b66:	e74a      	b.n	80109fe <rcl_wait_set_resize+0xd2>
 8010b68:	00bc      	lsls	r4, r7, #2
 8010b6a:	6928      	ldr	r0, [r5, #16]
 8010b6c:	464a      	mov	r2, r9
 8010b6e:	4621      	mov	r1, r4
 8010b70:	47c0      	blx	r8
 8010b72:	6128      	str	r0, [r5, #16]
 8010b74:	2800      	cmp	r0, #0
 8010b76:	d0ca      	beq.n	8010b0e <rcl_wait_set_resize+0x1e2>
 8010b78:	4622      	mov	r2, r4
 8010b7a:	4631      	mov	r1, r6
 8010b7c:	f005 fd40 	bl	8016600 <memset>
 8010b80:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b82:	616f      	str	r7, [r5, #20]
 8010b84:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8010b88:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010b8c:	e749      	b.n	8010a22 <rcl_wait_set_resize+0xf6>
 8010b8e:	009c      	lsls	r4, r3, #2
 8010b90:	69a8      	ldr	r0, [r5, #24]
 8010b92:	464a      	mov	r2, r9
 8010b94:	4621      	mov	r1, r4
 8010b96:	47c0      	blx	r8
 8010b98:	61a8      	str	r0, [r5, #24]
 8010b9a:	2800      	cmp	r0, #0
 8010b9c:	d0b7      	beq.n	8010b0e <rcl_wait_set_resize+0x1e2>
 8010b9e:	4622      	mov	r2, r4
 8010ba0:	4631      	mov	r1, r6
 8010ba2:	f005 fd2d 	bl	8016600 <memset>
 8010ba6:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8010ba8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010baa:	61eb      	str	r3, [r5, #28]
 8010bac:	6a38      	ldr	r0, [r7, #32]
 8010bae:	61fe      	str	r6, [r7, #28]
 8010bb0:	464a      	mov	r2, r9
 8010bb2:	4621      	mov	r1, r4
 8010bb4:	47c0      	blx	r8
 8010bb6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010bb8:	6238      	str	r0, [r7, #32]
 8010bba:	6a1f      	ldr	r7, [r3, #32]
 8010bbc:	2f00      	cmp	r7, #0
 8010bbe:	d054      	beq.n	8010c6a <rcl_wait_set_resize+0x33e>
 8010bc0:	4622      	mov	r2, r4
 8010bc2:	4631      	mov	r1, r6
 8010bc4:	4638      	mov	r0, r7
 8010bc6:	f005 fd1b 	bl	8016600 <memset>
 8010bca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010bcc:	e73f      	b.n	8010a4e <rcl_wait_set_resize+0x122>
 8010bce:	6a28      	ldr	r0, [r5, #32]
 8010bd0:	b120      	cbz	r0, 8010bdc <rcl_wait_set_resize+0x2b0>
 8010bd2:	4639      	mov	r1, r7
 8010bd4:	47c0      	blx	r8
 8010bd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010bd8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010bda:	622b      	str	r3, [r5, #32]
 8010bdc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8010bde:	2800      	cmp	r0, #0
 8010be0:	f43f af60 	beq.w	8010aa4 <rcl_wait_set_resize+0x178>
 8010be4:	4639      	mov	r1, r7
 8010be6:	47c0      	blx	r8
 8010be8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010bea:	2300      	movs	r3, #0
 8010bec:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8010bf0:	e758      	b.n	8010aa4 <rcl_wait_set_resize+0x178>
 8010bf2:	009c      	lsls	r4, r3, #2
 8010bf4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8010bf6:	463a      	mov	r2, r7
 8010bf8:	4621      	mov	r1, r4
 8010bfa:	47c8      	blx	r9
 8010bfc:	62a8      	str	r0, [r5, #40]	@ 0x28
 8010bfe:	2800      	cmp	r0, #0
 8010c00:	d085      	beq.n	8010b0e <rcl_wait_set_resize+0x1e2>
 8010c02:	4622      	mov	r2, r4
 8010c04:	4631      	mov	r1, r6
 8010c06:	f005 fcfb 	bl	8016600 <memset>
 8010c0a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8010c0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c10:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8010c12:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8010c16:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8010c1a:	463a      	mov	r2, r7
 8010c1c:	4621      	mov	r1, r4
 8010c1e:	47c8      	blx	r9
 8010c20:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010c22:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8010c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c28:	b36b      	cbz	r3, 8010c86 <rcl_wait_set_resize+0x35a>
 8010c2a:	4622      	mov	r2, r4
 8010c2c:	4631      	mov	r1, r6
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f005 fce6 	bl	8016600 <memset>
 8010c34:	4630      	mov	r0, r6
 8010c36:	b003      	add	sp, #12
 8010c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c3c:	200b      	movs	r0, #11
 8010c3e:	4770      	bx	lr
 8010c40:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010c44:	e764      	b.n	8010b10 <rcl_wait_set_resize+0x1e4>
 8010c46:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010c48:	68a8      	ldr	r0, [r5, #8]
 8010c4a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8010c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c4e:	4798      	blx	r3
 8010c50:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010c52:	6928      	ldr	r0, [r5, #16]
 8010c54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010c56:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8010c58:	f8c5 900c 	str.w	r9, [r5, #12]
 8010c5c:	f8c5 9008 	str.w	r9, [r5, #8]
 8010c60:	4790      	blx	r2
 8010c62:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8010c66:	200a      	movs	r0, #10
 8010c68:	e752      	b.n	8010b10 <rcl_wait_set_resize+0x1e4>
 8010c6a:	69a8      	ldr	r0, [r5, #24]
 8010c6c:	4649      	mov	r1, r9
 8010c6e:	47d0      	blx	sl
 8010c70:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8010c74:	200a      	movs	r0, #10
 8010c76:	e74b      	b.n	8010b10 <rcl_wait_set_resize+0x1e4>
 8010c78:	6a28      	ldr	r0, [r5, #32]
 8010c7a:	4639      	mov	r1, r7
 8010c7c:	47c0      	blx	r8
 8010c7e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8010c82:	200a      	movs	r0, #10
 8010c84:	e744      	b.n	8010b10 <rcl_wait_set_resize+0x1e4>
 8010c86:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8010c88:	9301      	str	r3, [sp, #4]
 8010c8a:	4639      	mov	r1, r7
 8010c8c:	47c0      	blx	r8
 8010c8e:	9b01      	ldr	r3, [sp, #4]
 8010c90:	200a      	movs	r0, #10
 8010c92:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8010c96:	e73b      	b.n	8010b10 <rcl_wait_set_resize+0x1e4>

08010c98 <rcl_wait_set_init>:
 8010c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c9c:	b084      	sub	sp, #16
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	a810      	add	r0, sp, #64	@ 0x40
 8010ca2:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8010ca6:	460f      	mov	r7, r1
 8010ca8:	4690      	mov	r8, r2
 8010caa:	4699      	mov	r9, r3
 8010cac:	f7fa fda4 	bl	800b7f8 <rcutils_allocator_is_valid>
 8010cb0:	2800      	cmp	r0, #0
 8010cb2:	d06b      	beq.n	8010d8c <rcl_wait_set_init+0xf4>
 8010cb4:	2c00      	cmp	r4, #0
 8010cb6:	d069      	beq.n	8010d8c <rcl_wait_set_init+0xf4>
 8010cb8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010cba:	b125      	cbz	r5, 8010cc6 <rcl_wait_set_init+0x2e>
 8010cbc:	2564      	movs	r5, #100	@ 0x64
 8010cbe:	4628      	mov	r0, r5
 8010cc0:	b004      	add	sp, #16
 8010cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cc6:	f1ba 0f00 	cmp.w	sl, #0
 8010cca:	d05f      	beq.n	8010d8c <rcl_wait_set_init+0xf4>
 8010ccc:	4650      	mov	r0, sl
 8010cce:	f7fe fb3f 	bl	800f350 <rcl_context_is_valid>
 8010cd2:	2800      	cmp	r0, #0
 8010cd4:	d067      	beq.n	8010da6 <rcl_wait_set_init+0x10e>
 8010cd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010cd8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8010cda:	205c      	movs	r0, #92	@ 0x5c
 8010cdc:	4798      	blx	r3
 8010cde:	6320      	str	r0, [r4, #48]	@ 0x30
 8010ce0:	2800      	cmp	r0, #0
 8010ce2:	d062      	beq.n	8010daa <rcl_wait_set_init+0x112>
 8010ce4:	4629      	mov	r1, r5
 8010ce6:	225c      	movs	r2, #92	@ 0x5c
 8010ce8:	f005 fc8a 	bl	8016600 <memset>
 8010cec:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8010cf0:	eb03 0e02 	add.w	lr, r3, r2
 8010cf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010cf6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8010cf8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8010cfc:	449e      	add	lr, r3
 8010cfe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010d02:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8010d06:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8010d0a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8010d0e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8010d12:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8010d16:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8010d1a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8010d1e:	f8da a000 	ldr.w	sl, [sl]
 8010d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010d24:	44c6      	add	lr, r8
 8010d26:	f8dc 3000 	ldr.w	r3, [ip]
 8010d2a:	602b      	str	r3, [r5, #0]
 8010d2c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8010d30:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8010d34:	f002 fe6c 	bl	8013a10 <rmw_create_wait_set>
 8010d38:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d3a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8010d3c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010d3e:	b350      	cbz	r0, 8010d96 <rcl_wait_set_init+0xfe>
 8010d40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d42:	9302      	str	r3, [sp, #8]
 8010d44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d46:	9301      	str	r3, [sp, #4]
 8010d48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d4a:	9300      	str	r3, [sp, #0]
 8010d4c:	4642      	mov	r2, r8
 8010d4e:	464b      	mov	r3, r9
 8010d50:	4639      	mov	r1, r7
 8010d52:	4620      	mov	r0, r4
 8010d54:	f7ff fdea 	bl	801092c <rcl_wait_set_resize>
 8010d58:	4605      	mov	r5, r0
 8010d5a:	2800      	cmp	r0, #0
 8010d5c:	d0af      	beq.n	8010cbe <rcl_wait_set_init+0x26>
 8010d5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d60:	bb2b      	cbnz	r3, 8010dae <rcl_wait_set_init+0x116>
 8010d62:	2600      	movs	r6, #0
 8010d64:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8010d68:	9600      	str	r6, [sp, #0]
 8010d6a:	4633      	mov	r3, r6
 8010d6c:	4632      	mov	r2, r6
 8010d6e:	4631      	mov	r1, r6
 8010d70:	4620      	mov	r0, r4
 8010d72:	f7ff fddb 	bl	801092c <rcl_wait_set_resize>
 8010d76:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8010d78:	2800      	cmp	r0, #0
 8010d7a:	d0a0      	beq.n	8010cbe <rcl_wait_set_init+0x26>
 8010d7c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8010d7e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8010d80:	4798      	blx	r3
 8010d82:	4628      	mov	r0, r5
 8010d84:	6326      	str	r6, [r4, #48]	@ 0x30
 8010d86:	b004      	add	sp, #16
 8010d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d8c:	250b      	movs	r5, #11
 8010d8e:	4628      	mov	r0, r5
 8010d90:	b004      	add	sp, #16
 8010d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d96:	2501      	movs	r5, #1
 8010d98:	f002 fe44 	bl	8013a24 <rmw_destroy_wait_set>
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	bf18      	it	ne
 8010da0:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8010da4:	e7dd      	b.n	8010d62 <rcl_wait_set_init+0xca>
 8010da6:	2565      	movs	r5, #101	@ 0x65
 8010da8:	e789      	b.n	8010cbe <rcl_wait_set_init+0x26>
 8010daa:	250a      	movs	r5, #10
 8010dac:	e787      	b.n	8010cbe <rcl_wait_set_init+0x26>
 8010dae:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010db0:	e7f2      	b.n	8010d98 <rcl_wait_set_init+0x100>
 8010db2:	bf00      	nop

08010db4 <rcl_wait_set_add_guard_condition>:
 8010db4:	b318      	cbz	r0, 8010dfe <rcl_wait_set_add_guard_condition+0x4a>
 8010db6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010db8:	b570      	push	{r4, r5, r6, lr}
 8010dba:	4604      	mov	r4, r0
 8010dbc:	b30b      	cbz	r3, 8010e02 <rcl_wait_set_add_guard_condition+0x4e>
 8010dbe:	b319      	cbz	r1, 8010e08 <rcl_wait_set_add_guard_condition+0x54>
 8010dc0:	68dd      	ldr	r5, [r3, #12]
 8010dc2:	68c0      	ldr	r0, [r0, #12]
 8010dc4:	4285      	cmp	r5, r0
 8010dc6:	d217      	bcs.n	8010df8 <rcl_wait_set_add_guard_condition+0x44>
 8010dc8:	68a0      	ldr	r0, [r4, #8]
 8010dca:	1c6e      	adds	r6, r5, #1
 8010dcc:	60de      	str	r6, [r3, #12]
 8010dce:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010dd2:	b102      	cbz	r2, 8010dd6 <rcl_wait_set_add_guard_condition+0x22>
 8010dd4:	6015      	str	r5, [r2, #0]
 8010dd6:	4608      	mov	r0, r1
 8010dd8:	f004 fe18 	bl	8015a0c <rcl_guard_condition_get_rmw_handle>
 8010ddc:	b150      	cbz	r0, 8010df4 <rcl_wait_set_add_guard_condition+0x40>
 8010dde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010de0:	6842      	ldr	r2, [r0, #4]
 8010de2:	695b      	ldr	r3, [r3, #20]
 8010de4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010de8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010dea:	6913      	ldr	r3, [r2, #16]
 8010dec:	3301      	adds	r3, #1
 8010dee:	2000      	movs	r0, #0
 8010df0:	6113      	str	r3, [r2, #16]
 8010df2:	bd70      	pop	{r4, r5, r6, pc}
 8010df4:	2001      	movs	r0, #1
 8010df6:	bd70      	pop	{r4, r5, r6, pc}
 8010df8:	f240 3086 	movw	r0, #902	@ 0x386
 8010dfc:	bd70      	pop	{r4, r5, r6, pc}
 8010dfe:	200b      	movs	r0, #11
 8010e00:	4770      	bx	lr
 8010e02:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010e06:	bd70      	pop	{r4, r5, r6, pc}
 8010e08:	200b      	movs	r0, #11
 8010e0a:	bd70      	pop	{r4, r5, r6, pc}

08010e0c <rcl_wait_set_add_timer>:
 8010e0c:	b328      	cbz	r0, 8010e5a <rcl_wait_set_add_timer+0x4e>
 8010e0e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010e10:	b570      	push	{r4, r5, r6, lr}
 8010e12:	4604      	mov	r4, r0
 8010e14:	b31b      	cbz	r3, 8010e5e <rcl_wait_set_add_timer+0x52>
 8010e16:	b329      	cbz	r1, 8010e64 <rcl_wait_set_add_timer+0x58>
 8010e18:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8010e1a:	6965      	ldr	r5, [r4, #20]
 8010e1c:	42a8      	cmp	r0, r5
 8010e1e:	d219      	bcs.n	8010e54 <rcl_wait_set_add_timer+0x48>
 8010e20:	6925      	ldr	r5, [r4, #16]
 8010e22:	1c46      	adds	r6, r0, #1
 8010e24:	641e      	str	r6, [r3, #64]	@ 0x40
 8010e26:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8010e2a:	b102      	cbz	r2, 8010e2e <rcl_wait_set_add_timer+0x22>
 8010e2c:	6010      	str	r0, [r2, #0]
 8010e2e:	4608      	mov	r0, r1
 8010e30:	f7ff fba6 	bl	8010580 <rcl_timer_get_guard_condition>
 8010e34:	b168      	cbz	r0, 8010e52 <rcl_wait_set_add_timer+0x46>
 8010e36:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010e38:	68e3      	ldr	r3, [r4, #12]
 8010e3a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8010e3c:	3b01      	subs	r3, #1
 8010e3e:	441d      	add	r5, r3
 8010e40:	f004 fde4 	bl	8015a0c <rcl_guard_condition_get_rmw_handle>
 8010e44:	b180      	cbz	r0, 8010e68 <rcl_wait_set_add_timer+0x5c>
 8010e46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010e48:	6842      	ldr	r2, [r0, #4]
 8010e4a:	695b      	ldr	r3, [r3, #20]
 8010e4c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e50:	2000      	movs	r0, #0
 8010e52:	bd70      	pop	{r4, r5, r6, pc}
 8010e54:	f240 3086 	movw	r0, #902	@ 0x386
 8010e58:	bd70      	pop	{r4, r5, r6, pc}
 8010e5a:	200b      	movs	r0, #11
 8010e5c:	4770      	bx	lr
 8010e5e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010e62:	bd70      	pop	{r4, r5, r6, pc}
 8010e64:	200b      	movs	r0, #11
 8010e66:	bd70      	pop	{r4, r5, r6, pc}
 8010e68:	2001      	movs	r0, #1
 8010e6a:	bd70      	pop	{r4, r5, r6, pc}

08010e6c <rcl_wait_set_add_client>:
 8010e6c:	b318      	cbz	r0, 8010eb6 <rcl_wait_set_add_client+0x4a>
 8010e6e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010e70:	b570      	push	{r4, r5, r6, lr}
 8010e72:	4604      	mov	r4, r0
 8010e74:	b30b      	cbz	r3, 8010eba <rcl_wait_set_add_client+0x4e>
 8010e76:	b319      	cbz	r1, 8010ec0 <rcl_wait_set_add_client+0x54>
 8010e78:	699d      	ldr	r5, [r3, #24]
 8010e7a:	69c0      	ldr	r0, [r0, #28]
 8010e7c:	4285      	cmp	r5, r0
 8010e7e:	d217      	bcs.n	8010eb0 <rcl_wait_set_add_client+0x44>
 8010e80:	69a0      	ldr	r0, [r4, #24]
 8010e82:	1c6e      	adds	r6, r5, #1
 8010e84:	619e      	str	r6, [r3, #24]
 8010e86:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010e8a:	b102      	cbz	r2, 8010e8e <rcl_wait_set_add_client+0x22>
 8010e8c:	6015      	str	r5, [r2, #0]
 8010e8e:	4608      	mov	r0, r1
 8010e90:	f7fe f9b2 	bl	800f1f8 <rcl_client_get_rmw_handle>
 8010e94:	b150      	cbz	r0, 8010eac <rcl_wait_set_add_client+0x40>
 8010e96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010e98:	6842      	ldr	r2, [r0, #4]
 8010e9a:	6a1b      	ldr	r3, [r3, #32]
 8010e9c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010ea0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010ea2:	69d3      	ldr	r3, [r2, #28]
 8010ea4:	3301      	adds	r3, #1
 8010ea6:	2000      	movs	r0, #0
 8010ea8:	61d3      	str	r3, [r2, #28]
 8010eaa:	bd70      	pop	{r4, r5, r6, pc}
 8010eac:	2001      	movs	r0, #1
 8010eae:	bd70      	pop	{r4, r5, r6, pc}
 8010eb0:	f240 3086 	movw	r0, #902	@ 0x386
 8010eb4:	bd70      	pop	{r4, r5, r6, pc}
 8010eb6:	200b      	movs	r0, #11
 8010eb8:	4770      	bx	lr
 8010eba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010ebe:	bd70      	pop	{r4, r5, r6, pc}
 8010ec0:	200b      	movs	r0, #11
 8010ec2:	bd70      	pop	{r4, r5, r6, pc}

08010ec4 <rcl_wait_set_add_service>:
 8010ec4:	b318      	cbz	r0, 8010f0e <rcl_wait_set_add_service+0x4a>
 8010ec6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010ec8:	b570      	push	{r4, r5, r6, lr}
 8010eca:	4604      	mov	r4, r0
 8010ecc:	b30b      	cbz	r3, 8010f12 <rcl_wait_set_add_service+0x4e>
 8010ece:	b319      	cbz	r1, 8010f18 <rcl_wait_set_add_service+0x54>
 8010ed0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8010ed2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8010ed4:	4285      	cmp	r5, r0
 8010ed6:	d217      	bcs.n	8010f08 <rcl_wait_set_add_service+0x44>
 8010ed8:	6a20      	ldr	r0, [r4, #32]
 8010eda:	1c6e      	adds	r6, r5, #1
 8010edc:	625e      	str	r6, [r3, #36]	@ 0x24
 8010ede:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010ee2:	b102      	cbz	r2, 8010ee6 <rcl_wait_set_add_service+0x22>
 8010ee4:	6015      	str	r5, [r2, #0]
 8010ee6:	4608      	mov	r0, r1
 8010ee8:	f7ff f804 	bl	800fef4 <rcl_service_get_rmw_handle>
 8010eec:	b150      	cbz	r0, 8010f04 <rcl_wait_set_add_service+0x40>
 8010eee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010ef0:	6842      	ldr	r2, [r0, #4]
 8010ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ef4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010ef8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010efa:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8010efc:	3301      	adds	r3, #1
 8010efe:	2000      	movs	r0, #0
 8010f00:	6293      	str	r3, [r2, #40]	@ 0x28
 8010f02:	bd70      	pop	{r4, r5, r6, pc}
 8010f04:	2001      	movs	r0, #1
 8010f06:	bd70      	pop	{r4, r5, r6, pc}
 8010f08:	f240 3086 	movw	r0, #902	@ 0x386
 8010f0c:	bd70      	pop	{r4, r5, r6, pc}
 8010f0e:	200b      	movs	r0, #11
 8010f10:	4770      	bx	lr
 8010f12:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010f16:	bd70      	pop	{r4, r5, r6, pc}
 8010f18:	200b      	movs	r0, #11
 8010f1a:	bd70      	pop	{r4, r5, r6, pc}
 8010f1c:	0000      	movs	r0, r0
	...

08010f20 <rcl_wait>:
 8010f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f24:	ed2d 8b02 	vpush	{d8}
 8010f28:	b08d      	sub	sp, #52	@ 0x34
 8010f2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	f000 8143 	beq.w	80111ba <rcl_wait+0x29a>
 8010f34:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8010f36:	4605      	mov	r5, r0
 8010f38:	2e00      	cmp	r6, #0
 8010f3a:	f000 8112 	beq.w	8011162 <rcl_wait+0x242>
 8010f3e:	6843      	ldr	r3, [r0, #4]
 8010f40:	b983      	cbnz	r3, 8010f64 <rcl_wait+0x44>
 8010f42:	68eb      	ldr	r3, [r5, #12]
 8010f44:	b973      	cbnz	r3, 8010f64 <rcl_wait+0x44>
 8010f46:	696b      	ldr	r3, [r5, #20]
 8010f48:	b963      	cbnz	r3, 8010f64 <rcl_wait+0x44>
 8010f4a:	69eb      	ldr	r3, [r5, #28]
 8010f4c:	b953      	cbnz	r3, 8010f64 <rcl_wait+0x44>
 8010f4e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8010f50:	b943      	cbnz	r3, 8010f64 <rcl_wait+0x44>
 8010f52:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8010f54:	b933      	cbnz	r3, 8010f64 <rcl_wait+0x44>
 8010f56:	f240 3085 	movw	r0, #901	@ 0x385
 8010f5a:	b00d      	add	sp, #52	@ 0x34
 8010f5c:	ecbd 8b02 	vpop	{d8}
 8010f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f64:	9b04      	ldr	r3, [sp, #16]
 8010f66:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	9b05      	ldr	r3, [sp, #20]
 8010f6c:	f173 0300 	sbcs.w	r3, r3, #0
 8010f70:	f2c0 80f0 	blt.w	8011154 <rcl_wait+0x234>
 8010f74:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8010f78:	4643      	mov	r3, r8
 8010f7a:	2a00      	cmp	r2, #0
 8010f7c:	f000 8133 	beq.w	80111e6 <rcl_wait+0x2c6>
 8010f80:	2400      	movs	r4, #0
 8010f82:	4613      	mov	r3, r2
 8010f84:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80111f8 <rcl_wait+0x2d8>
 8010f88:	46a2      	mov	sl, r4
 8010f8a:	46a3      	mov	fp, r4
 8010f8c:	f240 3921 	movw	r9, #801	@ 0x321
 8010f90:	4632      	mov	r2, r6
 8010f92:	e014      	b.n	8010fbe <rcl_wait+0x9e>
 8010f94:	2800      	cmp	r0, #0
 8010f96:	d1e0      	bne.n	8010f5a <rcl_wait+0x3a>
 8010f98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010f9c:	4542      	cmp	r2, r8
 8010f9e:	eb73 0107 	sbcs.w	r1, r3, r7
 8010fa2:	da03      	bge.n	8010fac <rcl_wait+0x8c>
 8010fa4:	4690      	mov	r8, r2
 8010fa6:	461f      	mov	r7, r3
 8010fa8:	f04f 0b01 	mov.w	fp, #1
 8010fac:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8010fae:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8010fb0:	3401      	adds	r4, #1
 8010fb2:	f14a 0a00 	adc.w	sl, sl, #0
 8010fb6:	429c      	cmp	r4, r3
 8010fb8:	f17a 0100 	sbcs.w	r1, sl, #0
 8010fbc:	d228      	bcs.n	8011010 <rcl_wait+0xf0>
 8010fbe:	6928      	ldr	r0, [r5, #16]
 8010fc0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010fc4:	a908      	add	r1, sp, #32
 8010fc6:	00a6      	lsls	r6, r4, #2
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	d0f1      	beq.n	8010fb0 <rcl_wait+0x90>
 8010fcc:	68eb      	ldr	r3, [r5, #12]
 8010fce:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8010fd2:	4423      	add	r3, r4
 8010fd4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8010fd8:	f1be 0f00 	cmp.w	lr, #0
 8010fdc:	d006      	beq.n	8010fec <rcl_wait+0xcc>
 8010fde:	6913      	ldr	r3, [r2, #16]
 8010fe0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8010fe4:	3301      	adds	r3, #1
 8010fe6:	6113      	str	r3, [r2, #16]
 8010fe8:	692b      	ldr	r3, [r5, #16]
 8010fea:	5998      	ldr	r0, [r3, r6]
 8010fec:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010ff0:	f7ff fa94 	bl	801051c <rcl_timer_get_time_until_next_call>
 8010ff4:	4548      	cmp	r0, r9
 8010ff6:	d1cd      	bne.n	8010f94 <rcl_wait+0x74>
 8010ff8:	692b      	ldr	r3, [r5, #16]
 8010ffa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8010ffc:	2100      	movs	r1, #0
 8010ffe:	5199      	str	r1, [r3, r6]
 8011000:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011002:	3401      	adds	r4, #1
 8011004:	f14a 0a00 	adc.w	sl, sl, #0
 8011008:	429c      	cmp	r4, r3
 801100a:	f17a 0100 	sbcs.w	r1, sl, #0
 801100e:	d3d6      	bcc.n	8010fbe <rcl_wait+0x9e>
 8011010:	4616      	mov	r6, r2
 8011012:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011016:	4313      	orrs	r3, r2
 8011018:	46d9      	mov	r9, fp
 801101a:	f040 80a9 	bne.w	8011170 <rcl_wait+0x250>
 801101e:	2300      	movs	r3, #0
 8011020:	2200      	movs	r2, #0
 8011022:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011026:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801102a:	ab08      	add	r3, sp, #32
 801102c:	9302      	str	r3, [sp, #8]
 801102e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8011030:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8011034:	e9cd 3200 	strd	r3, r2, [sp]
 8011038:	f106 0110 	add.w	r1, r6, #16
 801103c:	f106 031c 	add.w	r3, r6, #28
 8011040:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8011044:	1d30      	adds	r0, r6, #4
 8011046:	f002 fb6b 	bl	8013720 <rmw_wait>
 801104a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801104c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801104e:	4680      	mov	r8, r0
 8011050:	b1ca      	cbz	r2, 8011086 <rcl_wait+0x166>
 8011052:	2400      	movs	r4, #0
 8011054:	4627      	mov	r7, r4
 8011056:	692a      	ldr	r2, [r5, #16]
 8011058:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801105c:	f10d 011f 	add.w	r1, sp, #31
 8011060:	00a6      	lsls	r6, r4, #2
 8011062:	b160      	cbz	r0, 801107e <rcl_wait+0x15e>
 8011064:	f88d 701f 	strb.w	r7, [sp, #31]
 8011068:	f7ff fa1e 	bl	80104a8 <rcl_timer_is_ready>
 801106c:	2800      	cmp	r0, #0
 801106e:	f47f af74 	bne.w	8010f5a <rcl_wait+0x3a>
 8011072:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8011076:	b90b      	cbnz	r3, 801107c <rcl_wait+0x15c>
 8011078:	692a      	ldr	r2, [r5, #16]
 801107a:	5193      	str	r3, [r2, r6]
 801107c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801107e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011080:	3401      	adds	r4, #1
 8011082:	42a2      	cmp	r2, r4
 8011084:	d8e7      	bhi.n	8011056 <rcl_wait+0x136>
 8011086:	f038 0002 	bics.w	r0, r8, #2
 801108a:	f040 8090 	bne.w	80111ae <rcl_wait+0x28e>
 801108e:	686e      	ldr	r6, [r5, #4]
 8011090:	4602      	mov	r2, r0
 8011092:	b91e      	cbnz	r6, 801109c <rcl_wait+0x17c>
 8011094:	e00d      	b.n	80110b2 <rcl_wait+0x192>
 8011096:	3201      	adds	r2, #1
 8011098:	42b2      	cmp	r2, r6
 801109a:	d00a      	beq.n	80110b2 <rcl_wait+0x192>
 801109c:	6899      	ldr	r1, [r3, #8]
 801109e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80110a2:	2900      	cmp	r1, #0
 80110a4:	d1f7      	bne.n	8011096 <rcl_wait+0x176>
 80110a6:	682c      	ldr	r4, [r5, #0]
 80110a8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80110ac:	3201      	adds	r2, #1
 80110ae:	42b2      	cmp	r2, r6
 80110b0:	d1f4      	bne.n	801109c <rcl_wait+0x17c>
 80110b2:	68ee      	ldr	r6, [r5, #12]
 80110b4:	2200      	movs	r2, #0
 80110b6:	b91e      	cbnz	r6, 80110c0 <rcl_wait+0x1a0>
 80110b8:	e00d      	b.n	80110d6 <rcl_wait+0x1b6>
 80110ba:	3201      	adds	r2, #1
 80110bc:	42b2      	cmp	r2, r6
 80110be:	d00a      	beq.n	80110d6 <rcl_wait+0x1b6>
 80110c0:	6959      	ldr	r1, [r3, #20]
 80110c2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80110c6:	2900      	cmp	r1, #0
 80110c8:	d1f7      	bne.n	80110ba <rcl_wait+0x19a>
 80110ca:	68ac      	ldr	r4, [r5, #8]
 80110cc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80110d0:	3201      	adds	r2, #1
 80110d2:	42b2      	cmp	r2, r6
 80110d4:	d1f4      	bne.n	80110c0 <rcl_wait+0x1a0>
 80110d6:	69ee      	ldr	r6, [r5, #28]
 80110d8:	2200      	movs	r2, #0
 80110da:	b91e      	cbnz	r6, 80110e4 <rcl_wait+0x1c4>
 80110dc:	e00d      	b.n	80110fa <rcl_wait+0x1da>
 80110de:	3201      	adds	r2, #1
 80110e0:	42b2      	cmp	r2, r6
 80110e2:	d00a      	beq.n	80110fa <rcl_wait+0x1da>
 80110e4:	6a19      	ldr	r1, [r3, #32]
 80110e6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80110ea:	2900      	cmp	r1, #0
 80110ec:	d1f7      	bne.n	80110de <rcl_wait+0x1be>
 80110ee:	69ac      	ldr	r4, [r5, #24]
 80110f0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80110f4:	3201      	adds	r2, #1
 80110f6:	42b2      	cmp	r2, r6
 80110f8:	d1f4      	bne.n	80110e4 <rcl_wait+0x1c4>
 80110fa:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80110fc:	2200      	movs	r2, #0
 80110fe:	b91e      	cbnz	r6, 8011108 <rcl_wait+0x1e8>
 8011100:	e00d      	b.n	801111e <rcl_wait+0x1fe>
 8011102:	3201      	adds	r2, #1
 8011104:	4296      	cmp	r6, r2
 8011106:	d00a      	beq.n	801111e <rcl_wait+0x1fe>
 8011108:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801110a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801110e:	2900      	cmp	r1, #0
 8011110:	d1f7      	bne.n	8011102 <rcl_wait+0x1e2>
 8011112:	6a2c      	ldr	r4, [r5, #32]
 8011114:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011118:	3201      	adds	r2, #1
 801111a:	4296      	cmp	r6, r2
 801111c:	d1f4      	bne.n	8011108 <rcl_wait+0x1e8>
 801111e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8011120:	2200      	movs	r2, #0
 8011122:	b91e      	cbnz	r6, 801112c <rcl_wait+0x20c>
 8011124:	e00d      	b.n	8011142 <rcl_wait+0x222>
 8011126:	3201      	adds	r2, #1
 8011128:	42b2      	cmp	r2, r6
 801112a:	d00a      	beq.n	8011142 <rcl_wait+0x222>
 801112c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801112e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011132:	2900      	cmp	r1, #0
 8011134:	d1f7      	bne.n	8011126 <rcl_wait+0x206>
 8011136:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8011138:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801113c:	3201      	adds	r2, #1
 801113e:	42b2      	cmp	r2, r6
 8011140:	d1f4      	bne.n	801112c <rcl_wait+0x20c>
 8011142:	f1b8 0f02 	cmp.w	r8, #2
 8011146:	f47f af08 	bne.w	8010f5a <rcl_wait+0x3a>
 801114a:	464b      	mov	r3, r9
 801114c:	2b00      	cmp	r3, #0
 801114e:	bf08      	it	eq
 8011150:	2002      	moveq	r0, #2
 8011152:	e702      	b.n	8010f5a <rcl_wait+0x3a>
 8011154:	2a00      	cmp	r2, #0
 8011156:	d03a      	beq.n	80111ce <rcl_wait+0x2ae>
 8011158:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801115c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011160:	e70e      	b.n	8010f80 <rcl_wait+0x60>
 8011162:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011166:	b00d      	add	sp, #52	@ 0x34
 8011168:	ecbd 8b02 	vpop	{d8}
 801116c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011170:	9b04      	ldr	r3, [sp, #16]
 8011172:	2b01      	cmp	r3, #1
 8011174:	9b05      	ldr	r3, [sp, #20]
 8011176:	f173 0300 	sbcs.w	r3, r3, #0
 801117a:	db24      	blt.n	80111c6 <rcl_wait+0x2a6>
 801117c:	2f00      	cmp	r7, #0
 801117e:	bfbc      	itt	lt
 8011180:	f04f 0800 	movlt.w	r8, #0
 8011184:	4647      	movlt	r7, r8
 8011186:	a31e      	add	r3, pc, #120	@ (adr r3, 8011200 <rcl_wait+0x2e0>)
 8011188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118c:	4640      	mov	r0, r8
 801118e:	4639      	mov	r1, r7
 8011190:	f7ef fd2c 	bl	8000bec <__aeabi_ldivmod>
 8011194:	a31a      	add	r3, pc, #104	@ (adr r3, 8011200 <rcl_wait+0x2e0>)
 8011196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801119e:	4640      	mov	r0, r8
 80111a0:	4639      	mov	r1, r7
 80111a2:	f7ef fd23 	bl	8000bec <__aeabi_ldivmod>
 80111a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80111aa:	ab08      	add	r3, sp, #32
 80111ac:	e73e      	b.n	801102c <rcl_wait+0x10c>
 80111ae:	2001      	movs	r0, #1
 80111b0:	b00d      	add	sp, #52	@ 0x34
 80111b2:	ecbd 8b02 	vpop	{d8}
 80111b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ba:	200b      	movs	r0, #11
 80111bc:	b00d      	add	sp, #52	@ 0x34
 80111be:	ecbd 8b02 	vpop	{d8}
 80111c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c6:	465b      	mov	r3, fp
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d1d7      	bne.n	801117c <rcl_wait+0x25c>
 80111cc:	e72e      	b.n	801102c <rcl_wait+0x10c>
 80111ce:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80111d2:	430b      	orrs	r3, r1
 80111d4:	bf08      	it	eq
 80111d6:	4691      	moveq	r9, r2
 80111d8:	f43f af21 	beq.w	801101e <rcl_wait+0xfe>
 80111dc:	9b04      	ldr	r3, [sp, #16]
 80111de:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80111e2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80111e6:	2b01      	cmp	r3, #1
 80111e8:	9b05      	ldr	r3, [sp, #20]
 80111ea:	f173 0300 	sbcs.w	r3, r3, #0
 80111ee:	f04f 0300 	mov.w	r3, #0
 80111f2:	4699      	mov	r9, r3
 80111f4:	dac2      	bge.n	801117c <rcl_wait+0x25c>
 80111f6:	e719      	b.n	801102c <rcl_wait+0x10c>
 80111f8:	ffffffff 	.word	0xffffffff
 80111fc:	7fffffff 	.word	0x7fffffff
 8011200:	3b9aca00 	.word	0x3b9aca00
 8011204:	00000000 	.word	0x00000000

08011208 <rcl_action_take_goal_response>:
 8011208:	2800      	cmp	r0, #0
 801120a:	d039      	beq.n	8011280 <rcl_action_take_goal_response+0x78>
 801120c:	b570      	push	{r4, r5, r6, lr}
 801120e:	4604      	mov	r4, r0
 8011210:	6800      	ldr	r0, [r0, #0]
 8011212:	b380      	cbz	r0, 8011276 <rcl_action_take_goal_response+0x6e>
 8011214:	460d      	mov	r5, r1
 8011216:	4616      	mov	r6, r2
 8011218:	f7fe f872 	bl	800f300 <rcl_client_is_valid>
 801121c:	b330      	cbz	r0, 801126c <rcl_action_take_goal_response+0x64>
 801121e:	6820      	ldr	r0, [r4, #0]
 8011220:	3004      	adds	r0, #4
 8011222:	f7fe f86d 	bl	800f300 <rcl_client_is_valid>
 8011226:	b308      	cbz	r0, 801126c <rcl_action_take_goal_response+0x64>
 8011228:	6820      	ldr	r0, [r4, #0]
 801122a:	3008      	adds	r0, #8
 801122c:	f7fe f868 	bl	800f300 <rcl_client_is_valid>
 8011230:	b1e0      	cbz	r0, 801126c <rcl_action_take_goal_response+0x64>
 8011232:	6820      	ldr	r0, [r4, #0]
 8011234:	300c      	adds	r0, #12
 8011236:	f7fe ffff 	bl	8010238 <rcl_subscription_is_valid>
 801123a:	b1b8      	cbz	r0, 801126c <rcl_action_take_goal_response+0x64>
 801123c:	6820      	ldr	r0, [r4, #0]
 801123e:	3010      	adds	r0, #16
 8011240:	f7fe fffa 	bl	8010238 <rcl_subscription_is_valid>
 8011244:	b190      	cbz	r0, 801126c <rcl_action_take_goal_response+0x64>
 8011246:	b1cd      	cbz	r5, 801127c <rcl_action_take_goal_response+0x74>
 8011248:	b1c6      	cbz	r6, 801127c <rcl_action_take_goal_response+0x74>
 801124a:	6820      	ldr	r0, [r4, #0]
 801124c:	4632      	mov	r2, r6
 801124e:	4629      	mov	r1, r5
 8011250:	f7fe f80e 	bl	800f270 <rcl_take_response>
 8011254:	b148      	cbz	r0, 801126a <rcl_action_take_goal_response+0x62>
 8011256:	280a      	cmp	r0, #10
 8011258:	d007      	beq.n	801126a <rcl_action_take_goal_response+0x62>
 801125a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801125e:	f640 0337 	movw	r3, #2103	@ 0x837
 8011262:	4290      	cmp	r0, r2
 8011264:	bf0c      	ite	eq
 8011266:	4618      	moveq	r0, r3
 8011268:	2001      	movne	r0, #1
 801126a:	bd70      	pop	{r4, r5, r6, pc}
 801126c:	f7fa fae8 	bl	800b840 <rcutils_reset_error>
 8011270:	f640 0036 	movw	r0, #2102	@ 0x836
 8011274:	bd70      	pop	{r4, r5, r6, pc}
 8011276:	f640 0036 	movw	r0, #2102	@ 0x836
 801127a:	bd70      	pop	{r4, r5, r6, pc}
 801127c:	200b      	movs	r0, #11
 801127e:	bd70      	pop	{r4, r5, r6, pc}
 8011280:	f640 0036 	movw	r0, #2102	@ 0x836
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop

08011288 <rcl_action_send_result_request>:
 8011288:	b390      	cbz	r0, 80112f0 <rcl_action_send_result_request+0x68>
 801128a:	b570      	push	{r4, r5, r6, lr}
 801128c:	4604      	mov	r4, r0
 801128e:	6800      	ldr	r0, [r0, #0]
 8011290:	b348      	cbz	r0, 80112e6 <rcl_action_send_result_request+0x5e>
 8011292:	460d      	mov	r5, r1
 8011294:	4616      	mov	r6, r2
 8011296:	f7fe f833 	bl	800f300 <rcl_client_is_valid>
 801129a:	b1f8      	cbz	r0, 80112dc <rcl_action_send_result_request+0x54>
 801129c:	6820      	ldr	r0, [r4, #0]
 801129e:	3004      	adds	r0, #4
 80112a0:	f7fe f82e 	bl	800f300 <rcl_client_is_valid>
 80112a4:	b1d0      	cbz	r0, 80112dc <rcl_action_send_result_request+0x54>
 80112a6:	6820      	ldr	r0, [r4, #0]
 80112a8:	3008      	adds	r0, #8
 80112aa:	f7fe f829 	bl	800f300 <rcl_client_is_valid>
 80112ae:	b1a8      	cbz	r0, 80112dc <rcl_action_send_result_request+0x54>
 80112b0:	6820      	ldr	r0, [r4, #0]
 80112b2:	300c      	adds	r0, #12
 80112b4:	f7fe ffc0 	bl	8010238 <rcl_subscription_is_valid>
 80112b8:	b180      	cbz	r0, 80112dc <rcl_action_send_result_request+0x54>
 80112ba:	6820      	ldr	r0, [r4, #0]
 80112bc:	3010      	adds	r0, #16
 80112be:	f7fe ffbb 	bl	8010238 <rcl_subscription_is_valid>
 80112c2:	b158      	cbz	r0, 80112dc <rcl_action_send_result_request+0x54>
 80112c4:	b195      	cbz	r5, 80112ec <rcl_action_send_result_request+0x64>
 80112c6:	b18e      	cbz	r6, 80112ec <rcl_action_send_result_request+0x64>
 80112c8:	6820      	ldr	r0, [r4, #0]
 80112ca:	4632      	mov	r2, r6
 80112cc:	4629      	mov	r1, r5
 80112ce:	3008      	adds	r0, #8
 80112d0:	f7fd ff98 	bl	800f204 <rcl_send_request>
 80112d4:	3800      	subs	r0, #0
 80112d6:	bf18      	it	ne
 80112d8:	2001      	movne	r0, #1
 80112da:	bd70      	pop	{r4, r5, r6, pc}
 80112dc:	f7fa fab0 	bl	800b840 <rcutils_reset_error>
 80112e0:	f640 0036 	movw	r0, #2102	@ 0x836
 80112e4:	bd70      	pop	{r4, r5, r6, pc}
 80112e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80112ea:	bd70      	pop	{r4, r5, r6, pc}
 80112ec:	200b      	movs	r0, #11
 80112ee:	bd70      	pop	{r4, r5, r6, pc}
 80112f0:	f640 0036 	movw	r0, #2102	@ 0x836
 80112f4:	4770      	bx	lr
 80112f6:	bf00      	nop

080112f8 <rcl_action_take_result_response>:
 80112f8:	2800      	cmp	r0, #0
 80112fa:	d03a      	beq.n	8011372 <rcl_action_take_result_response+0x7a>
 80112fc:	b570      	push	{r4, r5, r6, lr}
 80112fe:	4604      	mov	r4, r0
 8011300:	6800      	ldr	r0, [r0, #0]
 8011302:	b388      	cbz	r0, 8011368 <rcl_action_take_result_response+0x70>
 8011304:	460d      	mov	r5, r1
 8011306:	4616      	mov	r6, r2
 8011308:	f7fd fffa 	bl	800f300 <rcl_client_is_valid>
 801130c:	b338      	cbz	r0, 801135e <rcl_action_take_result_response+0x66>
 801130e:	6820      	ldr	r0, [r4, #0]
 8011310:	3004      	adds	r0, #4
 8011312:	f7fd fff5 	bl	800f300 <rcl_client_is_valid>
 8011316:	b310      	cbz	r0, 801135e <rcl_action_take_result_response+0x66>
 8011318:	6820      	ldr	r0, [r4, #0]
 801131a:	3008      	adds	r0, #8
 801131c:	f7fd fff0 	bl	800f300 <rcl_client_is_valid>
 8011320:	b1e8      	cbz	r0, 801135e <rcl_action_take_result_response+0x66>
 8011322:	6820      	ldr	r0, [r4, #0]
 8011324:	300c      	adds	r0, #12
 8011326:	f7fe ff87 	bl	8010238 <rcl_subscription_is_valid>
 801132a:	b1c0      	cbz	r0, 801135e <rcl_action_take_result_response+0x66>
 801132c:	6820      	ldr	r0, [r4, #0]
 801132e:	3010      	adds	r0, #16
 8011330:	f7fe ff82 	bl	8010238 <rcl_subscription_is_valid>
 8011334:	b198      	cbz	r0, 801135e <rcl_action_take_result_response+0x66>
 8011336:	b1d5      	cbz	r5, 801136e <rcl_action_take_result_response+0x76>
 8011338:	b1ce      	cbz	r6, 801136e <rcl_action_take_result_response+0x76>
 801133a:	6820      	ldr	r0, [r4, #0]
 801133c:	4632      	mov	r2, r6
 801133e:	4629      	mov	r1, r5
 8011340:	3008      	adds	r0, #8
 8011342:	f7fd ff95 	bl	800f270 <rcl_take_response>
 8011346:	b148      	cbz	r0, 801135c <rcl_action_take_result_response+0x64>
 8011348:	280a      	cmp	r0, #10
 801134a:	d007      	beq.n	801135c <rcl_action_take_result_response+0x64>
 801134c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011350:	f640 0337 	movw	r3, #2103	@ 0x837
 8011354:	4290      	cmp	r0, r2
 8011356:	bf0c      	ite	eq
 8011358:	4618      	moveq	r0, r3
 801135a:	2001      	movne	r0, #1
 801135c:	bd70      	pop	{r4, r5, r6, pc}
 801135e:	f7fa fa6f 	bl	800b840 <rcutils_reset_error>
 8011362:	f640 0036 	movw	r0, #2102	@ 0x836
 8011366:	bd70      	pop	{r4, r5, r6, pc}
 8011368:	f640 0036 	movw	r0, #2102	@ 0x836
 801136c:	bd70      	pop	{r4, r5, r6, pc}
 801136e:	200b      	movs	r0, #11
 8011370:	bd70      	pop	{r4, r5, r6, pc}
 8011372:	f640 0036 	movw	r0, #2102	@ 0x836
 8011376:	4770      	bx	lr

08011378 <rcl_action_take_cancel_response>:
 8011378:	2800      	cmp	r0, #0
 801137a:	d03a      	beq.n	80113f2 <rcl_action_take_cancel_response+0x7a>
 801137c:	b570      	push	{r4, r5, r6, lr}
 801137e:	4604      	mov	r4, r0
 8011380:	6800      	ldr	r0, [r0, #0]
 8011382:	b388      	cbz	r0, 80113e8 <rcl_action_take_cancel_response+0x70>
 8011384:	460d      	mov	r5, r1
 8011386:	4616      	mov	r6, r2
 8011388:	f7fd ffba 	bl	800f300 <rcl_client_is_valid>
 801138c:	b338      	cbz	r0, 80113de <rcl_action_take_cancel_response+0x66>
 801138e:	6820      	ldr	r0, [r4, #0]
 8011390:	3004      	adds	r0, #4
 8011392:	f7fd ffb5 	bl	800f300 <rcl_client_is_valid>
 8011396:	b310      	cbz	r0, 80113de <rcl_action_take_cancel_response+0x66>
 8011398:	6820      	ldr	r0, [r4, #0]
 801139a:	3008      	adds	r0, #8
 801139c:	f7fd ffb0 	bl	800f300 <rcl_client_is_valid>
 80113a0:	b1e8      	cbz	r0, 80113de <rcl_action_take_cancel_response+0x66>
 80113a2:	6820      	ldr	r0, [r4, #0]
 80113a4:	300c      	adds	r0, #12
 80113a6:	f7fe ff47 	bl	8010238 <rcl_subscription_is_valid>
 80113aa:	b1c0      	cbz	r0, 80113de <rcl_action_take_cancel_response+0x66>
 80113ac:	6820      	ldr	r0, [r4, #0]
 80113ae:	3010      	adds	r0, #16
 80113b0:	f7fe ff42 	bl	8010238 <rcl_subscription_is_valid>
 80113b4:	b198      	cbz	r0, 80113de <rcl_action_take_cancel_response+0x66>
 80113b6:	b1d5      	cbz	r5, 80113ee <rcl_action_take_cancel_response+0x76>
 80113b8:	b1ce      	cbz	r6, 80113ee <rcl_action_take_cancel_response+0x76>
 80113ba:	6820      	ldr	r0, [r4, #0]
 80113bc:	4632      	mov	r2, r6
 80113be:	4629      	mov	r1, r5
 80113c0:	3004      	adds	r0, #4
 80113c2:	f7fd ff55 	bl	800f270 <rcl_take_response>
 80113c6:	b148      	cbz	r0, 80113dc <rcl_action_take_cancel_response+0x64>
 80113c8:	280a      	cmp	r0, #10
 80113ca:	d007      	beq.n	80113dc <rcl_action_take_cancel_response+0x64>
 80113cc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80113d0:	f640 0337 	movw	r3, #2103	@ 0x837
 80113d4:	4290      	cmp	r0, r2
 80113d6:	bf0c      	ite	eq
 80113d8:	4618      	moveq	r0, r3
 80113da:	2001      	movne	r0, #1
 80113dc:	bd70      	pop	{r4, r5, r6, pc}
 80113de:	f7fa fa2f 	bl	800b840 <rcutils_reset_error>
 80113e2:	f640 0036 	movw	r0, #2102	@ 0x836
 80113e6:	bd70      	pop	{r4, r5, r6, pc}
 80113e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80113ec:	bd70      	pop	{r4, r5, r6, pc}
 80113ee:	200b      	movs	r0, #11
 80113f0:	bd70      	pop	{r4, r5, r6, pc}
 80113f2:	f640 0036 	movw	r0, #2102	@ 0x836
 80113f6:	4770      	bx	lr

080113f8 <rcl_action_take_feedback>:
 80113f8:	2800      	cmp	r0, #0
 80113fa:	d038      	beq.n	801146e <rcl_action_take_feedback+0x76>
 80113fc:	b530      	push	{r4, r5, lr}
 80113fe:	4604      	mov	r4, r0
 8011400:	6800      	ldr	r0, [r0, #0]
 8011402:	b091      	sub	sp, #68	@ 0x44
 8011404:	b378      	cbz	r0, 8011466 <rcl_action_take_feedback+0x6e>
 8011406:	460d      	mov	r5, r1
 8011408:	f7fd ff7a 	bl	800f300 <rcl_client_is_valid>
 801140c:	b328      	cbz	r0, 801145a <rcl_action_take_feedback+0x62>
 801140e:	6820      	ldr	r0, [r4, #0]
 8011410:	3004      	adds	r0, #4
 8011412:	f7fd ff75 	bl	800f300 <rcl_client_is_valid>
 8011416:	b300      	cbz	r0, 801145a <rcl_action_take_feedback+0x62>
 8011418:	6820      	ldr	r0, [r4, #0]
 801141a:	3008      	adds	r0, #8
 801141c:	f7fd ff70 	bl	800f300 <rcl_client_is_valid>
 8011420:	b1d8      	cbz	r0, 801145a <rcl_action_take_feedback+0x62>
 8011422:	6820      	ldr	r0, [r4, #0]
 8011424:	300c      	adds	r0, #12
 8011426:	f7fe ff07 	bl	8010238 <rcl_subscription_is_valid>
 801142a:	b1b0      	cbz	r0, 801145a <rcl_action_take_feedback+0x62>
 801142c:	6820      	ldr	r0, [r4, #0]
 801142e:	3010      	adds	r0, #16
 8011430:	f7fe ff02 	bl	8010238 <rcl_subscription_is_valid>
 8011434:	b188      	cbz	r0, 801145a <rcl_action_take_feedback+0x62>
 8011436:	b1ed      	cbz	r5, 8011474 <rcl_action_take_feedback+0x7c>
 8011438:	6820      	ldr	r0, [r4, #0]
 801143a:	2300      	movs	r3, #0
 801143c:	466a      	mov	r2, sp
 801143e:	4629      	mov	r1, r5
 8011440:	300c      	adds	r0, #12
 8011442:	f7fe fe9b 	bl	801017c <rcl_take>
 8011446:	b160      	cbz	r0, 8011462 <rcl_action_take_feedback+0x6a>
 8011448:	f240 1391 	movw	r3, #401	@ 0x191
 801144c:	4298      	cmp	r0, r3
 801144e:	d014      	beq.n	801147a <rcl_action_take_feedback+0x82>
 8011450:	280a      	cmp	r0, #10
 8011452:	bf18      	it	ne
 8011454:	2001      	movne	r0, #1
 8011456:	b011      	add	sp, #68	@ 0x44
 8011458:	bd30      	pop	{r4, r5, pc}
 801145a:	f7fa f9f1 	bl	800b840 <rcutils_reset_error>
 801145e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011462:	b011      	add	sp, #68	@ 0x44
 8011464:	bd30      	pop	{r4, r5, pc}
 8011466:	f640 0036 	movw	r0, #2102	@ 0x836
 801146a:	b011      	add	sp, #68	@ 0x44
 801146c:	bd30      	pop	{r4, r5, pc}
 801146e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011472:	4770      	bx	lr
 8011474:	200b      	movs	r0, #11
 8011476:	b011      	add	sp, #68	@ 0x44
 8011478:	bd30      	pop	{r4, r5, pc}
 801147a:	f640 0037 	movw	r0, #2103	@ 0x837
 801147e:	e7f0      	b.n	8011462 <rcl_action_take_feedback+0x6a>

08011480 <rcl_action_wait_set_add_action_client>:
 8011480:	2800      	cmp	r0, #0
 8011482:	d048      	beq.n	8011516 <rcl_action_wait_set_add_action_client+0x96>
 8011484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011486:	460c      	mov	r4, r1
 8011488:	2900      	cmp	r1, #0
 801148a:	d03c      	beq.n	8011506 <rcl_action_wait_set_add_action_client+0x86>
 801148c:	4605      	mov	r5, r0
 801148e:	6808      	ldr	r0, [r1, #0]
 8011490:	2800      	cmp	r0, #0
 8011492:	d038      	beq.n	8011506 <rcl_action_wait_set_add_action_client+0x86>
 8011494:	4617      	mov	r7, r2
 8011496:	461e      	mov	r6, r3
 8011498:	f7fd ff32 	bl	800f300 <rcl_client_is_valid>
 801149c:	b3b0      	cbz	r0, 801150c <rcl_action_wait_set_add_action_client+0x8c>
 801149e:	6820      	ldr	r0, [r4, #0]
 80114a0:	3004      	adds	r0, #4
 80114a2:	f7fd ff2d 	bl	800f300 <rcl_client_is_valid>
 80114a6:	b388      	cbz	r0, 801150c <rcl_action_wait_set_add_action_client+0x8c>
 80114a8:	6820      	ldr	r0, [r4, #0]
 80114aa:	3008      	adds	r0, #8
 80114ac:	f7fd ff28 	bl	800f300 <rcl_client_is_valid>
 80114b0:	b360      	cbz	r0, 801150c <rcl_action_wait_set_add_action_client+0x8c>
 80114b2:	6820      	ldr	r0, [r4, #0]
 80114b4:	300c      	adds	r0, #12
 80114b6:	f7fe febf 	bl	8010238 <rcl_subscription_is_valid>
 80114ba:	b338      	cbz	r0, 801150c <rcl_action_wait_set_add_action_client+0x8c>
 80114bc:	6820      	ldr	r0, [r4, #0]
 80114be:	3010      	adds	r0, #16
 80114c0:	f7fe feba 	bl	8010238 <rcl_subscription_is_valid>
 80114c4:	b310      	cbz	r0, 801150c <rcl_action_wait_set_add_action_client+0x8c>
 80114c6:	6821      	ldr	r1, [r4, #0]
 80114c8:	4628      	mov	r0, r5
 80114ca:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80114ce:	f7ff fccd 	bl	8010e6c <rcl_wait_set_add_client>
 80114d2:	b9b8      	cbnz	r0, 8011504 <rcl_action_wait_set_add_action_client+0x84>
 80114d4:	6821      	ldr	r1, [r4, #0]
 80114d6:	4628      	mov	r0, r5
 80114d8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80114dc:	3104      	adds	r1, #4
 80114de:	f7ff fcc5 	bl	8010e6c <rcl_wait_set_add_client>
 80114e2:	b978      	cbnz	r0, 8011504 <rcl_action_wait_set_add_action_client+0x84>
 80114e4:	6821      	ldr	r1, [r4, #0]
 80114e6:	4628      	mov	r0, r5
 80114e8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80114ec:	3108      	adds	r1, #8
 80114ee:	f7ff fcbd 	bl	8010e6c <rcl_wait_set_add_client>
 80114f2:	b938      	cbnz	r0, 8011504 <rcl_action_wait_set_add_action_client+0x84>
 80114f4:	6821      	ldr	r1, [r4, #0]
 80114f6:	4628      	mov	r0, r5
 80114f8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80114fc:	310c      	adds	r1, #12
 80114fe:	f7ff f96d 	bl	80107dc <rcl_wait_set_add_subscription>
 8011502:	b158      	cbz	r0, 801151c <rcl_action_wait_set_add_action_client+0x9c>
 8011504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011506:	f640 0036 	movw	r0, #2102	@ 0x836
 801150a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801150c:	f7fa f998 	bl	800b840 <rcutils_reset_error>
 8011510:	f640 0036 	movw	r0, #2102	@ 0x836
 8011514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011516:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801151a:	4770      	bx	lr
 801151c:	6821      	ldr	r1, [r4, #0]
 801151e:	4628      	mov	r0, r5
 8011520:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8011524:	3110      	adds	r1, #16
 8011526:	f7ff f959 	bl	80107dc <rcl_wait_set_add_subscription>
 801152a:	2800      	cmp	r0, #0
 801152c:	d1ea      	bne.n	8011504 <rcl_action_wait_set_add_action_client+0x84>
 801152e:	b11f      	cbz	r7, 8011538 <rcl_action_wait_set_add_action_client+0xb8>
 8011530:	6823      	ldr	r3, [r4, #0]
 8011532:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8011536:	603b      	str	r3, [r7, #0]
 8011538:	2e00      	cmp	r6, #0
 801153a:	d0e3      	beq.n	8011504 <rcl_action_wait_set_add_action_client+0x84>
 801153c:	6823      	ldr	r3, [r4, #0]
 801153e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8011542:	6033      	str	r3, [r6, #0]
 8011544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011546:	bf00      	nop

08011548 <rcl_action_client_wait_set_get_entities_ready>:
 8011548:	2800      	cmp	r0, #0
 801154a:	f000 808d 	beq.w	8011668 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801154e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011552:	460c      	mov	r4, r1
 8011554:	2900      	cmp	r1, #0
 8011556:	d077      	beq.n	8011648 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011558:	4605      	mov	r5, r0
 801155a:	6808      	ldr	r0, [r1, #0]
 801155c:	2800      	cmp	r0, #0
 801155e:	d073      	beq.n	8011648 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011560:	4616      	mov	r6, r2
 8011562:	461f      	mov	r7, r3
 8011564:	f7fd fecc 	bl	800f300 <rcl_client_is_valid>
 8011568:	2800      	cmp	r0, #0
 801156a:	d071      	beq.n	8011650 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801156c:	6820      	ldr	r0, [r4, #0]
 801156e:	3004      	adds	r0, #4
 8011570:	f7fd fec6 	bl	800f300 <rcl_client_is_valid>
 8011574:	2800      	cmp	r0, #0
 8011576:	d06b      	beq.n	8011650 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011578:	6820      	ldr	r0, [r4, #0]
 801157a:	3008      	adds	r0, #8
 801157c:	f7fd fec0 	bl	800f300 <rcl_client_is_valid>
 8011580:	2800      	cmp	r0, #0
 8011582:	d065      	beq.n	8011650 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011584:	6820      	ldr	r0, [r4, #0]
 8011586:	300c      	adds	r0, #12
 8011588:	f7fe fe56 	bl	8010238 <rcl_subscription_is_valid>
 801158c:	2800      	cmp	r0, #0
 801158e:	d05f      	beq.n	8011650 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011590:	6820      	ldr	r0, [r4, #0]
 8011592:	3010      	adds	r0, #16
 8011594:	f7fe fe50 	bl	8010238 <rcl_subscription_is_valid>
 8011598:	2800      	cmp	r0, #0
 801159a:	d059      	beq.n	8011650 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801159c:	2e00      	cmp	r6, #0
 801159e:	d060      	beq.n	8011662 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80115a0:	2f00      	cmp	r7, #0
 80115a2:	d05e      	beq.n	8011662 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80115a4:	9b06      	ldr	r3, [sp, #24]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d05b      	beq.n	8011662 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80115aa:	9b07      	ldr	r3, [sp, #28]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d058      	beq.n	8011662 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80115b0:	9b08      	ldr	r3, [sp, #32]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d055      	beq.n	8011662 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80115b6:	6823      	ldr	r3, [r4, #0]
 80115b8:	686a      	ldr	r2, [r5, #4]
 80115ba:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80115be:	428a      	cmp	r2, r1
 80115c0:	d94c      	bls.n	801165c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80115c2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80115c6:	4282      	cmp	r2, r0
 80115c8:	d948      	bls.n	801165c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80115ca:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80115ce:	69ea      	ldr	r2, [r5, #28]
 80115d0:	42a2      	cmp	r2, r4
 80115d2:	d943      	bls.n	801165c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80115d4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80115d8:	4562      	cmp	r2, ip
 80115da:	d93f      	bls.n	801165c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80115dc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80115e0:	4572      	cmp	r2, lr
 80115e2:	d93b      	bls.n	801165c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80115e4:	69aa      	ldr	r2, [r5, #24]
 80115e6:	682d      	ldr	r5, [r5, #0]
 80115e8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80115ec:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80115f0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80115f4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80115f8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80115fc:	f103 0c0c 	add.w	ip, r3, #12
 8011600:	eba5 050c 	sub.w	r5, r5, ip
 8011604:	fab5 f585 	clz	r5, r5
 8011608:	096d      	lsrs	r5, r5, #5
 801160a:	7035      	strb	r5, [r6, #0]
 801160c:	f103 0510 	add.w	r5, r3, #16
 8011610:	1b64      	subs	r4, r4, r5
 8011612:	fab4 f484 	clz	r4, r4
 8011616:	0964      	lsrs	r4, r4, #5
 8011618:	703c      	strb	r4, [r7, #0]
 801161a:	eba3 0008 	sub.w	r0, r3, r8
 801161e:	1d1c      	adds	r4, r3, #4
 8011620:	3308      	adds	r3, #8
 8011622:	1ad3      	subs	r3, r2, r3
 8011624:	fab0 f080 	clz	r0, r0
 8011628:	9a06      	ldr	r2, [sp, #24]
 801162a:	0940      	lsrs	r0, r0, #5
 801162c:	1b09      	subs	r1, r1, r4
 801162e:	7010      	strb	r0, [r2, #0]
 8011630:	fab1 f181 	clz	r1, r1
 8011634:	9a07      	ldr	r2, [sp, #28]
 8011636:	0949      	lsrs	r1, r1, #5
 8011638:	7011      	strb	r1, [r2, #0]
 801163a:	fab3 f383 	clz	r3, r3
 801163e:	9a08      	ldr	r2, [sp, #32]
 8011640:	095b      	lsrs	r3, r3, #5
 8011642:	2000      	movs	r0, #0
 8011644:	7013      	strb	r3, [r2, #0]
 8011646:	e001      	b.n	801164c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8011648:	f640 0036 	movw	r0, #2102	@ 0x836
 801164c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011650:	f7fa f8f6 	bl	800b840 <rcutils_reset_error>
 8011654:	f640 0036 	movw	r0, #2102	@ 0x836
 8011658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801165c:	2001      	movs	r0, #1
 801165e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011662:	200b      	movs	r0, #11
 8011664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011668:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801166c:	4770      	bx	lr
 801166e:	bf00      	nop

08011670 <rcl_action_take_goal_request>:
 8011670:	2800      	cmp	r0, #0
 8011672:	d039      	beq.n	80116e8 <rcl_action_take_goal_request+0x78>
 8011674:	b570      	push	{r4, r5, r6, lr}
 8011676:	4604      	mov	r4, r0
 8011678:	6800      	ldr	r0, [r0, #0]
 801167a:	b380      	cbz	r0, 80116de <rcl_action_take_goal_request+0x6e>
 801167c:	460d      	mov	r5, r1
 801167e:	4616      	mov	r6, r2
 8011680:	f7fe fc96 	bl	800ffb0 <rcl_service_is_valid>
 8011684:	b330      	cbz	r0, 80116d4 <rcl_action_take_goal_request+0x64>
 8011686:	6820      	ldr	r0, [r4, #0]
 8011688:	3004      	adds	r0, #4
 801168a:	f7fe fc91 	bl	800ffb0 <rcl_service_is_valid>
 801168e:	b308      	cbz	r0, 80116d4 <rcl_action_take_goal_request+0x64>
 8011690:	6820      	ldr	r0, [r4, #0]
 8011692:	3008      	adds	r0, #8
 8011694:	f7fe fc8c 	bl	800ffb0 <rcl_service_is_valid>
 8011698:	b1e0      	cbz	r0, 80116d4 <rcl_action_take_goal_request+0x64>
 801169a:	6820      	ldr	r0, [r4, #0]
 801169c:	300c      	adds	r0, #12
 801169e:	f7f9 f93d 	bl	800a91c <rcl_publisher_is_valid>
 80116a2:	b1b8      	cbz	r0, 80116d4 <rcl_action_take_goal_request+0x64>
 80116a4:	6820      	ldr	r0, [r4, #0]
 80116a6:	3010      	adds	r0, #16
 80116a8:	f7f9 f938 	bl	800a91c <rcl_publisher_is_valid>
 80116ac:	b190      	cbz	r0, 80116d4 <rcl_action_take_goal_request+0x64>
 80116ae:	b1cd      	cbz	r5, 80116e4 <rcl_action_take_goal_request+0x74>
 80116b0:	b1c6      	cbz	r6, 80116e4 <rcl_action_take_goal_request+0x74>
 80116b2:	6820      	ldr	r0, [r4, #0]
 80116b4:	4632      	mov	r2, r6
 80116b6:	4629      	mov	r1, r5
 80116b8:	f7fe fc22 	bl	800ff00 <rcl_take_request>
 80116bc:	b148      	cbz	r0, 80116d2 <rcl_action_take_goal_request+0x62>
 80116be:	280a      	cmp	r0, #10
 80116c0:	d007      	beq.n	80116d2 <rcl_action_take_goal_request+0x62>
 80116c2:	f240 2259 	movw	r2, #601	@ 0x259
 80116c6:	f640 0399 	movw	r3, #2201	@ 0x899
 80116ca:	4290      	cmp	r0, r2
 80116cc:	bf0c      	ite	eq
 80116ce:	4618      	moveq	r0, r3
 80116d0:	2001      	movne	r0, #1
 80116d2:	bd70      	pop	{r4, r5, r6, pc}
 80116d4:	f7fa f8b4 	bl	800b840 <rcutils_reset_error>
 80116d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80116dc:	bd70      	pop	{r4, r5, r6, pc}
 80116de:	f640 0098 	movw	r0, #2200	@ 0x898
 80116e2:	bd70      	pop	{r4, r5, r6, pc}
 80116e4:	200b      	movs	r0, #11
 80116e6:	bd70      	pop	{r4, r5, r6, pc}
 80116e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80116ec:	4770      	bx	lr
 80116ee:	bf00      	nop

080116f0 <rcl_action_send_goal_response>:
 80116f0:	b390      	cbz	r0, 8011758 <rcl_action_send_goal_response+0x68>
 80116f2:	b570      	push	{r4, r5, r6, lr}
 80116f4:	4604      	mov	r4, r0
 80116f6:	6800      	ldr	r0, [r0, #0]
 80116f8:	b348      	cbz	r0, 801174e <rcl_action_send_goal_response+0x5e>
 80116fa:	460d      	mov	r5, r1
 80116fc:	4616      	mov	r6, r2
 80116fe:	f7fe fc57 	bl	800ffb0 <rcl_service_is_valid>
 8011702:	b1f8      	cbz	r0, 8011744 <rcl_action_send_goal_response+0x54>
 8011704:	6820      	ldr	r0, [r4, #0]
 8011706:	3004      	adds	r0, #4
 8011708:	f7fe fc52 	bl	800ffb0 <rcl_service_is_valid>
 801170c:	b1d0      	cbz	r0, 8011744 <rcl_action_send_goal_response+0x54>
 801170e:	6820      	ldr	r0, [r4, #0]
 8011710:	3008      	adds	r0, #8
 8011712:	f7fe fc4d 	bl	800ffb0 <rcl_service_is_valid>
 8011716:	b1a8      	cbz	r0, 8011744 <rcl_action_send_goal_response+0x54>
 8011718:	6820      	ldr	r0, [r4, #0]
 801171a:	300c      	adds	r0, #12
 801171c:	f7f9 f8fe 	bl	800a91c <rcl_publisher_is_valid>
 8011720:	b180      	cbz	r0, 8011744 <rcl_action_send_goal_response+0x54>
 8011722:	6820      	ldr	r0, [r4, #0]
 8011724:	3010      	adds	r0, #16
 8011726:	f7f9 f8f9 	bl	800a91c <rcl_publisher_is_valid>
 801172a:	b158      	cbz	r0, 8011744 <rcl_action_send_goal_response+0x54>
 801172c:	b195      	cbz	r5, 8011754 <rcl_action_send_goal_response+0x64>
 801172e:	b18e      	cbz	r6, 8011754 <rcl_action_send_goal_response+0x64>
 8011730:	6820      	ldr	r0, [r4, #0]
 8011732:	4632      	mov	r2, r6
 8011734:	4629      	mov	r1, r5
 8011736:	f7fe fc23 	bl	800ff80 <rcl_send_response>
 801173a:	b110      	cbz	r0, 8011742 <rcl_action_send_goal_response+0x52>
 801173c:	2802      	cmp	r0, #2
 801173e:	bf18      	it	ne
 8011740:	2001      	movne	r0, #1
 8011742:	bd70      	pop	{r4, r5, r6, pc}
 8011744:	f7fa f87c 	bl	800b840 <rcutils_reset_error>
 8011748:	f640 0098 	movw	r0, #2200	@ 0x898
 801174c:	bd70      	pop	{r4, r5, r6, pc}
 801174e:	f640 0098 	movw	r0, #2200	@ 0x898
 8011752:	bd70      	pop	{r4, r5, r6, pc}
 8011754:	200b      	movs	r0, #11
 8011756:	bd70      	pop	{r4, r5, r6, pc}
 8011758:	f640 0098 	movw	r0, #2200	@ 0x898
 801175c:	4770      	bx	lr
 801175e:	bf00      	nop

08011760 <rcl_action_take_result_request>:
 8011760:	2800      	cmp	r0, #0
 8011762:	d03a      	beq.n	80117da <rcl_action_take_result_request+0x7a>
 8011764:	b570      	push	{r4, r5, r6, lr}
 8011766:	4604      	mov	r4, r0
 8011768:	6800      	ldr	r0, [r0, #0]
 801176a:	b388      	cbz	r0, 80117d0 <rcl_action_take_result_request+0x70>
 801176c:	460d      	mov	r5, r1
 801176e:	4616      	mov	r6, r2
 8011770:	f7fe fc1e 	bl	800ffb0 <rcl_service_is_valid>
 8011774:	b338      	cbz	r0, 80117c6 <rcl_action_take_result_request+0x66>
 8011776:	6820      	ldr	r0, [r4, #0]
 8011778:	3004      	adds	r0, #4
 801177a:	f7fe fc19 	bl	800ffb0 <rcl_service_is_valid>
 801177e:	b310      	cbz	r0, 80117c6 <rcl_action_take_result_request+0x66>
 8011780:	6820      	ldr	r0, [r4, #0]
 8011782:	3008      	adds	r0, #8
 8011784:	f7fe fc14 	bl	800ffb0 <rcl_service_is_valid>
 8011788:	b1e8      	cbz	r0, 80117c6 <rcl_action_take_result_request+0x66>
 801178a:	6820      	ldr	r0, [r4, #0]
 801178c:	300c      	adds	r0, #12
 801178e:	f7f9 f8c5 	bl	800a91c <rcl_publisher_is_valid>
 8011792:	b1c0      	cbz	r0, 80117c6 <rcl_action_take_result_request+0x66>
 8011794:	6820      	ldr	r0, [r4, #0]
 8011796:	3010      	adds	r0, #16
 8011798:	f7f9 f8c0 	bl	800a91c <rcl_publisher_is_valid>
 801179c:	b198      	cbz	r0, 80117c6 <rcl_action_take_result_request+0x66>
 801179e:	b1d5      	cbz	r5, 80117d6 <rcl_action_take_result_request+0x76>
 80117a0:	b1ce      	cbz	r6, 80117d6 <rcl_action_take_result_request+0x76>
 80117a2:	6820      	ldr	r0, [r4, #0]
 80117a4:	4632      	mov	r2, r6
 80117a6:	4629      	mov	r1, r5
 80117a8:	3008      	adds	r0, #8
 80117aa:	f7fe fba9 	bl	800ff00 <rcl_take_request>
 80117ae:	b148      	cbz	r0, 80117c4 <rcl_action_take_result_request+0x64>
 80117b0:	280a      	cmp	r0, #10
 80117b2:	d007      	beq.n	80117c4 <rcl_action_take_result_request+0x64>
 80117b4:	f240 2259 	movw	r2, #601	@ 0x259
 80117b8:	f640 0399 	movw	r3, #2201	@ 0x899
 80117bc:	4290      	cmp	r0, r2
 80117be:	bf0c      	ite	eq
 80117c0:	4618      	moveq	r0, r3
 80117c2:	2001      	movne	r0, #1
 80117c4:	bd70      	pop	{r4, r5, r6, pc}
 80117c6:	f7fa f83b 	bl	800b840 <rcutils_reset_error>
 80117ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80117ce:	bd70      	pop	{r4, r5, r6, pc}
 80117d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80117d4:	bd70      	pop	{r4, r5, r6, pc}
 80117d6:	200b      	movs	r0, #11
 80117d8:	bd70      	pop	{r4, r5, r6, pc}
 80117da:	f640 0098 	movw	r0, #2200	@ 0x898
 80117de:	4770      	bx	lr

080117e0 <rcl_action_take_cancel_request>:
 80117e0:	2800      	cmp	r0, #0
 80117e2:	d03a      	beq.n	801185a <rcl_action_take_cancel_request+0x7a>
 80117e4:	b570      	push	{r4, r5, r6, lr}
 80117e6:	4604      	mov	r4, r0
 80117e8:	6800      	ldr	r0, [r0, #0]
 80117ea:	b388      	cbz	r0, 8011850 <rcl_action_take_cancel_request+0x70>
 80117ec:	460d      	mov	r5, r1
 80117ee:	4616      	mov	r6, r2
 80117f0:	f7fe fbde 	bl	800ffb0 <rcl_service_is_valid>
 80117f4:	b338      	cbz	r0, 8011846 <rcl_action_take_cancel_request+0x66>
 80117f6:	6820      	ldr	r0, [r4, #0]
 80117f8:	3004      	adds	r0, #4
 80117fa:	f7fe fbd9 	bl	800ffb0 <rcl_service_is_valid>
 80117fe:	b310      	cbz	r0, 8011846 <rcl_action_take_cancel_request+0x66>
 8011800:	6820      	ldr	r0, [r4, #0]
 8011802:	3008      	adds	r0, #8
 8011804:	f7fe fbd4 	bl	800ffb0 <rcl_service_is_valid>
 8011808:	b1e8      	cbz	r0, 8011846 <rcl_action_take_cancel_request+0x66>
 801180a:	6820      	ldr	r0, [r4, #0]
 801180c:	300c      	adds	r0, #12
 801180e:	f7f9 f885 	bl	800a91c <rcl_publisher_is_valid>
 8011812:	b1c0      	cbz	r0, 8011846 <rcl_action_take_cancel_request+0x66>
 8011814:	6820      	ldr	r0, [r4, #0]
 8011816:	3010      	adds	r0, #16
 8011818:	f7f9 f880 	bl	800a91c <rcl_publisher_is_valid>
 801181c:	b198      	cbz	r0, 8011846 <rcl_action_take_cancel_request+0x66>
 801181e:	b1d5      	cbz	r5, 8011856 <rcl_action_take_cancel_request+0x76>
 8011820:	b1ce      	cbz	r6, 8011856 <rcl_action_take_cancel_request+0x76>
 8011822:	6820      	ldr	r0, [r4, #0]
 8011824:	4632      	mov	r2, r6
 8011826:	4629      	mov	r1, r5
 8011828:	3004      	adds	r0, #4
 801182a:	f7fe fb69 	bl	800ff00 <rcl_take_request>
 801182e:	b148      	cbz	r0, 8011844 <rcl_action_take_cancel_request+0x64>
 8011830:	280a      	cmp	r0, #10
 8011832:	d007      	beq.n	8011844 <rcl_action_take_cancel_request+0x64>
 8011834:	f240 2259 	movw	r2, #601	@ 0x259
 8011838:	f640 0399 	movw	r3, #2201	@ 0x899
 801183c:	4290      	cmp	r0, r2
 801183e:	bf0c      	ite	eq
 8011840:	4618      	moveq	r0, r3
 8011842:	2001      	movne	r0, #1
 8011844:	bd70      	pop	{r4, r5, r6, pc}
 8011846:	f7f9 fffb 	bl	800b840 <rcutils_reset_error>
 801184a:	f640 0098 	movw	r0, #2200	@ 0x898
 801184e:	bd70      	pop	{r4, r5, r6, pc}
 8011850:	f640 0098 	movw	r0, #2200	@ 0x898
 8011854:	bd70      	pop	{r4, r5, r6, pc}
 8011856:	200b      	movs	r0, #11
 8011858:	bd70      	pop	{r4, r5, r6, pc}
 801185a:	f640 0098 	movw	r0, #2200	@ 0x898
 801185e:	4770      	bx	lr

08011860 <rcl_action_send_cancel_response>:
 8011860:	b398      	cbz	r0, 80118ca <rcl_action_send_cancel_response+0x6a>
 8011862:	b570      	push	{r4, r5, r6, lr}
 8011864:	4604      	mov	r4, r0
 8011866:	6800      	ldr	r0, [r0, #0]
 8011868:	b350      	cbz	r0, 80118c0 <rcl_action_send_cancel_response+0x60>
 801186a:	460d      	mov	r5, r1
 801186c:	4616      	mov	r6, r2
 801186e:	f7fe fb9f 	bl	800ffb0 <rcl_service_is_valid>
 8011872:	b300      	cbz	r0, 80118b6 <rcl_action_send_cancel_response+0x56>
 8011874:	6820      	ldr	r0, [r4, #0]
 8011876:	3004      	adds	r0, #4
 8011878:	f7fe fb9a 	bl	800ffb0 <rcl_service_is_valid>
 801187c:	b1d8      	cbz	r0, 80118b6 <rcl_action_send_cancel_response+0x56>
 801187e:	6820      	ldr	r0, [r4, #0]
 8011880:	3008      	adds	r0, #8
 8011882:	f7fe fb95 	bl	800ffb0 <rcl_service_is_valid>
 8011886:	b1b0      	cbz	r0, 80118b6 <rcl_action_send_cancel_response+0x56>
 8011888:	6820      	ldr	r0, [r4, #0]
 801188a:	300c      	adds	r0, #12
 801188c:	f7f9 f846 	bl	800a91c <rcl_publisher_is_valid>
 8011890:	b188      	cbz	r0, 80118b6 <rcl_action_send_cancel_response+0x56>
 8011892:	6820      	ldr	r0, [r4, #0]
 8011894:	3010      	adds	r0, #16
 8011896:	f7f9 f841 	bl	800a91c <rcl_publisher_is_valid>
 801189a:	b160      	cbz	r0, 80118b6 <rcl_action_send_cancel_response+0x56>
 801189c:	b19d      	cbz	r5, 80118c6 <rcl_action_send_cancel_response+0x66>
 801189e:	b196      	cbz	r6, 80118c6 <rcl_action_send_cancel_response+0x66>
 80118a0:	6820      	ldr	r0, [r4, #0]
 80118a2:	4632      	mov	r2, r6
 80118a4:	4629      	mov	r1, r5
 80118a6:	3004      	adds	r0, #4
 80118a8:	f7fe fb6a 	bl	800ff80 <rcl_send_response>
 80118ac:	b110      	cbz	r0, 80118b4 <rcl_action_send_cancel_response+0x54>
 80118ae:	2802      	cmp	r0, #2
 80118b0:	bf18      	it	ne
 80118b2:	2001      	movne	r0, #1
 80118b4:	bd70      	pop	{r4, r5, r6, pc}
 80118b6:	f7f9 ffc3 	bl	800b840 <rcutils_reset_error>
 80118ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80118be:	bd70      	pop	{r4, r5, r6, pc}
 80118c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80118c4:	bd70      	pop	{r4, r5, r6, pc}
 80118c6:	200b      	movs	r0, #11
 80118c8:	bd70      	pop	{r4, r5, r6, pc}
 80118ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80118ce:	4770      	bx	lr

080118d0 <rcl_action_wait_set_add_action_server>:
 80118d0:	2800      	cmp	r0, #0
 80118d2:	d04d      	beq.n	8011970 <rcl_action_wait_set_add_action_server+0xa0>
 80118d4:	b570      	push	{r4, r5, r6, lr}
 80118d6:	460c      	mov	r4, r1
 80118d8:	b159      	cbz	r1, 80118f2 <rcl_action_wait_set_add_action_server+0x22>
 80118da:	4605      	mov	r5, r0
 80118dc:	6808      	ldr	r0, [r1, #0]
 80118de:	b140      	cbz	r0, 80118f2 <rcl_action_wait_set_add_action_server+0x22>
 80118e0:	4616      	mov	r6, r2
 80118e2:	f7fe fb65 	bl	800ffb0 <rcl_service_is_valid>
 80118e6:	b120      	cbz	r0, 80118f2 <rcl_action_wait_set_add_action_server+0x22>
 80118e8:	6820      	ldr	r0, [r4, #0]
 80118ea:	3004      	adds	r0, #4
 80118ec:	f7fe fb60 	bl	800ffb0 <rcl_service_is_valid>
 80118f0:	b910      	cbnz	r0, 80118f8 <rcl_action_wait_set_add_action_server+0x28>
 80118f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80118f6:	bd70      	pop	{r4, r5, r6, pc}
 80118f8:	6820      	ldr	r0, [r4, #0]
 80118fa:	3008      	adds	r0, #8
 80118fc:	f7fe fb58 	bl	800ffb0 <rcl_service_is_valid>
 8011900:	2800      	cmp	r0, #0
 8011902:	d0f6      	beq.n	80118f2 <rcl_action_wait_set_add_action_server+0x22>
 8011904:	6820      	ldr	r0, [r4, #0]
 8011906:	300c      	adds	r0, #12
 8011908:	f7f9 f820 	bl	800a94c <rcl_publisher_is_valid_except_context>
 801190c:	2800      	cmp	r0, #0
 801190e:	d0f0      	beq.n	80118f2 <rcl_action_wait_set_add_action_server+0x22>
 8011910:	6820      	ldr	r0, [r4, #0]
 8011912:	3010      	adds	r0, #16
 8011914:	f7f9 f81a 	bl	800a94c <rcl_publisher_is_valid_except_context>
 8011918:	2800      	cmp	r0, #0
 801191a:	d0ea      	beq.n	80118f2 <rcl_action_wait_set_add_action_server+0x22>
 801191c:	6821      	ldr	r1, [r4, #0]
 801191e:	4628      	mov	r0, r5
 8011920:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8011924:	f7ff face 	bl	8010ec4 <rcl_wait_set_add_service>
 8011928:	2800      	cmp	r0, #0
 801192a:	d1e4      	bne.n	80118f6 <rcl_action_wait_set_add_action_server+0x26>
 801192c:	6821      	ldr	r1, [r4, #0]
 801192e:	4628      	mov	r0, r5
 8011930:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8011934:	3104      	adds	r1, #4
 8011936:	f7ff fac5 	bl	8010ec4 <rcl_wait_set_add_service>
 801193a:	2800      	cmp	r0, #0
 801193c:	d1db      	bne.n	80118f6 <rcl_action_wait_set_add_action_server+0x26>
 801193e:	6821      	ldr	r1, [r4, #0]
 8011940:	4628      	mov	r0, r5
 8011942:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8011946:	3108      	adds	r1, #8
 8011948:	f7ff fabc 	bl	8010ec4 <rcl_wait_set_add_service>
 801194c:	2800      	cmp	r0, #0
 801194e:	d1d2      	bne.n	80118f6 <rcl_action_wait_set_add_action_server+0x26>
 8011950:	6821      	ldr	r1, [r4, #0]
 8011952:	4628      	mov	r0, r5
 8011954:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8011958:	3114      	adds	r1, #20
 801195a:	f7ff fa57 	bl	8010e0c <rcl_wait_set_add_timer>
 801195e:	2800      	cmp	r0, #0
 8011960:	d1c9      	bne.n	80118f6 <rcl_action_wait_set_add_action_server+0x26>
 8011962:	2e00      	cmp	r6, #0
 8011964:	d0c7      	beq.n	80118f6 <rcl_action_wait_set_add_action_server+0x26>
 8011966:	6823      	ldr	r3, [r4, #0]
 8011968:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801196c:	6033      	str	r3, [r6, #0]
 801196e:	bd70      	pop	{r4, r5, r6, pc}
 8011970:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011974:	4770      	bx	lr
 8011976:	bf00      	nop

08011978 <rcl_action_server_wait_set_get_entities_ready>:
 8011978:	2800      	cmp	r0, #0
 801197a:	d05a      	beq.n	8011a32 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801197c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801197e:	460c      	mov	r4, r1
 8011980:	b161      	cbz	r1, 801199c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011982:	4605      	mov	r5, r0
 8011984:	6808      	ldr	r0, [r1, #0]
 8011986:	b148      	cbz	r0, 801199c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011988:	4616      	mov	r6, r2
 801198a:	461f      	mov	r7, r3
 801198c:	f7fe fb10 	bl	800ffb0 <rcl_service_is_valid>
 8011990:	b120      	cbz	r0, 801199c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011992:	6820      	ldr	r0, [r4, #0]
 8011994:	3004      	adds	r0, #4
 8011996:	f7fe fb0b 	bl	800ffb0 <rcl_service_is_valid>
 801199a:	b910      	cbnz	r0, 80119a2 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801199c:	f640 0098 	movw	r0, #2200	@ 0x898
 80119a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119a2:	6820      	ldr	r0, [r4, #0]
 80119a4:	3008      	adds	r0, #8
 80119a6:	f7fe fb03 	bl	800ffb0 <rcl_service_is_valid>
 80119aa:	2800      	cmp	r0, #0
 80119ac:	d0f6      	beq.n	801199c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80119ae:	6820      	ldr	r0, [r4, #0]
 80119b0:	300c      	adds	r0, #12
 80119b2:	f7f8 ffcb 	bl	800a94c <rcl_publisher_is_valid_except_context>
 80119b6:	2800      	cmp	r0, #0
 80119b8:	d0f0      	beq.n	801199c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80119ba:	6820      	ldr	r0, [r4, #0]
 80119bc:	3010      	adds	r0, #16
 80119be:	f7f8 ffc5 	bl	800a94c <rcl_publisher_is_valid_except_context>
 80119c2:	2800      	cmp	r0, #0
 80119c4:	d0ea      	beq.n	801199c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80119c6:	b3be      	cbz	r6, 8011a38 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80119c8:	b3b7      	cbz	r7, 8011a38 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80119ca:	9b06      	ldr	r3, [sp, #24]
 80119cc:	b3a3      	cbz	r3, 8011a38 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80119ce:	9b07      	ldr	r3, [sp, #28]
 80119d0:	b393      	cbz	r3, 8011a38 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80119d2:	6821      	ldr	r1, [r4, #0]
 80119d4:	692a      	ldr	r2, [r5, #16]
 80119d6:	6a2c      	ldr	r4, [r5, #32]
 80119d8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80119dc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80119e0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80119e4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80119e8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80119ec:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80119f0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80119f4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80119f8:	1a64      	subs	r4, r4, r1
 80119fa:	fab4 f484 	clz	r4, r4
 80119fe:	0964      	lsrs	r4, r4, #5
 8011a00:	7034      	strb	r4, [r6, #0]
 8011a02:	1d0c      	adds	r4, r1, #4
 8011a04:	1b1b      	subs	r3, r3, r4
 8011a06:	fab3 f383 	clz	r3, r3
 8011a0a:	095b      	lsrs	r3, r3, #5
 8011a0c:	f101 0408 	add.w	r4, r1, #8
 8011a10:	703b      	strb	r3, [r7, #0]
 8011a12:	f101 0314 	add.w	r3, r1, #20
 8011a16:	1b01      	subs	r1, r0, r4
 8011a18:	1ad3      	subs	r3, r2, r3
 8011a1a:	fab1 f181 	clz	r1, r1
 8011a1e:	9a06      	ldr	r2, [sp, #24]
 8011a20:	0949      	lsrs	r1, r1, #5
 8011a22:	7011      	strb	r1, [r2, #0]
 8011a24:	fab3 f383 	clz	r3, r3
 8011a28:	9a07      	ldr	r2, [sp, #28]
 8011a2a:	095b      	lsrs	r3, r3, #5
 8011a2c:	2000      	movs	r0, #0
 8011a2e:	7013      	strb	r3, [r2, #0]
 8011a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a32:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011a36:	4770      	bx	lr
 8011a38:	200b      	movs	r0, #11
 8011a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011a3c <_execute_event_handler>:
 8011a3c:	2002      	movs	r0, #2
 8011a3e:	4770      	bx	lr

08011a40 <_cancel_goal_event_handler>:
 8011a40:	2003      	movs	r0, #3
 8011a42:	4770      	bx	lr

08011a44 <_succeed_event_handler>:
 8011a44:	2004      	movs	r0, #4
 8011a46:	4770      	bx	lr

08011a48 <_abort_event_handler>:
 8011a48:	2006      	movs	r0, #6
 8011a4a:	4770      	bx	lr

08011a4c <_canceled_event_handler>:
 8011a4c:	2005      	movs	r0, #5
 8011a4e:	4770      	bx	lr

08011a50 <rcl_action_transition_goal_state>:
 8011a50:	b2c2      	uxtb	r2, r0
 8011a52:	2a06      	cmp	r2, #6
 8011a54:	d80c      	bhi.n	8011a70 <rcl_action_transition_goal_state+0x20>
 8011a56:	2904      	cmp	r1, #4
 8011a58:	d80a      	bhi.n	8011a70 <rcl_action_transition_goal_state+0x20>
 8011a5a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8011a5e:	b410      	push	{r4}
 8011a60:	1853      	adds	r3, r2, r1
 8011a62:	4c06      	ldr	r4, [pc, #24]	@ (8011a7c <rcl_action_transition_goal_state+0x2c>)
 8011a64:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011a68:	b123      	cbz	r3, 8011a74 <rcl_action_transition_goal_state+0x24>
 8011a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a6e:	4718      	bx	r3
 8011a70:	2000      	movs	r0, #0
 8011a72:	4770      	bx	lr
 8011a74:	2000      	movs	r0, #0
 8011a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a7a:	4770      	bx	lr
 8011a7c:	08017cb4 	.word	0x08017cb4

08011a80 <rcl_action_get_zero_initialized_cancel_response>:
 8011a80:	b510      	push	{r4, lr}
 8011a82:	4c07      	ldr	r4, [pc, #28]	@ (8011aa0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8011a84:	4686      	mov	lr, r0
 8011a86:	4684      	mov	ip, r0
 8011a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a94:	6823      	ldr	r3, [r4, #0]
 8011a96:	f8cc 3000 	str.w	r3, [ip]
 8011a9a:	4670      	mov	r0, lr
 8011a9c:	bd10      	pop	{r4, pc}
 8011a9e:	bf00      	nop
 8011aa0:	08017d40 	.word	0x08017d40

08011aa4 <rclc_action_send_result_request>:
 8011aa4:	b1d0      	cbz	r0, 8011adc <rclc_action_send_result_request+0x38>
 8011aa6:	b500      	push	{lr}
 8011aa8:	4684      	mov	ip, r0
 8011aaa:	b087      	sub	sp, #28
 8011aac:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8011ab0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8011ab4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8011ab8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8011abc:	f10d 0e08 	add.w	lr, sp, #8
 8011ac0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011ac4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011ac8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8011acc:	a902      	add	r1, sp, #8
 8011ace:	3010      	adds	r0, #16
 8011ad0:	f7ff fbda 	bl	8011288 <rcl_action_send_result_request>
 8011ad4:	b920      	cbnz	r0, 8011ae0 <rclc_action_send_result_request+0x3c>
 8011ad6:	b007      	add	sp, #28
 8011ad8:	f85d fb04 	ldr.w	pc, [sp], #4
 8011adc:	200b      	movs	r0, #11
 8011ade:	4770      	bx	lr
 8011ae0:	9001      	str	r0, [sp, #4]
 8011ae2:	f7f9 fead 	bl	800b840 <rcutils_reset_error>
 8011ae6:	9801      	ldr	r0, [sp, #4]
 8011ae8:	b007      	add	sp, #28
 8011aea:	f85d fb04 	ldr.w	pc, [sp], #4
 8011aee:	bf00      	nop

08011af0 <rclc_action_take_goal_handle>:
 8011af0:	b160      	cbz	r0, 8011b0c <rclc_action_take_goal_handle+0x1c>
 8011af2:	6883      	ldr	r3, [r0, #8]
 8011af4:	b143      	cbz	r3, 8011b08 <rclc_action_take_goal_handle+0x18>
 8011af6:	6819      	ldr	r1, [r3, #0]
 8011af8:	6081      	str	r1, [r0, #8]
 8011afa:	2200      	movs	r2, #0
 8011afc:	721a      	strb	r2, [r3, #8]
 8011afe:	68c1      	ldr	r1, [r0, #12]
 8011b00:	6019      	str	r1, [r3, #0]
 8011b02:	621a      	str	r2, [r3, #32]
 8011b04:	849a      	strh	r2, [r3, #36]	@ 0x24
 8011b06:	60c3      	str	r3, [r0, #12]
 8011b08:	4618      	mov	r0, r3
 8011b0a:	4770      	bx	lr
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	e7fb      	b.n	8011b08 <rclc_action_take_goal_handle+0x18>

08011b10 <rclc_action_remove_used_goal_handle>:
 8011b10:	b180      	cbz	r0, 8011b34 <rclc_action_remove_used_goal_handle+0x24>
 8011b12:	b179      	cbz	r1, 8011b34 <rclc_action_remove_used_goal_handle+0x24>
 8011b14:	68c3      	ldr	r3, [r0, #12]
 8011b16:	4299      	cmp	r1, r3
 8011b18:	d00d      	beq.n	8011b36 <rclc_action_remove_used_goal_handle+0x26>
 8011b1a:	b12b      	cbz	r3, 8011b28 <rclc_action_remove_used_goal_handle+0x18>
 8011b1c:	681a      	ldr	r2, [r3, #0]
 8011b1e:	4291      	cmp	r1, r2
 8011b20:	d003      	beq.n	8011b2a <rclc_action_remove_used_goal_handle+0x1a>
 8011b22:	4613      	mov	r3, r2
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d1f9      	bne.n	8011b1c <rclc_action_remove_used_goal_handle+0xc>
 8011b28:	4770      	bx	lr
 8011b2a:	680a      	ldr	r2, [r1, #0]
 8011b2c:	601a      	str	r2, [r3, #0]
 8011b2e:	6883      	ldr	r3, [r0, #8]
 8011b30:	600b      	str	r3, [r1, #0]
 8011b32:	6081      	str	r1, [r0, #8]
 8011b34:	4770      	bx	lr
 8011b36:	680b      	ldr	r3, [r1, #0]
 8011b38:	60c3      	str	r3, [r0, #12]
 8011b3a:	e7f8      	b.n	8011b2e <rclc_action_remove_used_goal_handle+0x1e>

08011b3c <rclc_action_find_goal_handle_by_uuid>:
 8011b3c:	b538      	push	{r3, r4, r5, lr}
 8011b3e:	b180      	cbz	r0, 8011b62 <rclc_action_find_goal_handle_by_uuid+0x26>
 8011b40:	460d      	mov	r5, r1
 8011b42:	b181      	cbz	r1, 8011b66 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8011b44:	68c4      	ldr	r4, [r0, #12]
 8011b46:	b914      	cbnz	r4, 8011b4e <rclc_action_find_goal_handle_by_uuid+0x12>
 8011b48:	e009      	b.n	8011b5e <rclc_action_find_goal_handle_by_uuid+0x22>
 8011b4a:	6824      	ldr	r4, [r4, #0]
 8011b4c:	b13c      	cbz	r4, 8011b5e <rclc_action_find_goal_handle_by_uuid+0x22>
 8011b4e:	f104 0009 	add.w	r0, r4, #9
 8011b52:	2210      	movs	r2, #16
 8011b54:	4629      	mov	r1, r5
 8011b56:	f004 fd29 	bl	80165ac <memcmp>
 8011b5a:	2800      	cmp	r0, #0
 8011b5c:	d1f5      	bne.n	8011b4a <rclc_action_find_goal_handle_by_uuid+0xe>
 8011b5e:	4620      	mov	r0, r4
 8011b60:	bd38      	pop	{r3, r4, r5, pc}
 8011b62:	4604      	mov	r4, r0
 8011b64:	e7fb      	b.n	8011b5e <rclc_action_find_goal_handle_by_uuid+0x22>
 8011b66:	460c      	mov	r4, r1
 8011b68:	e7f9      	b.n	8011b5e <rclc_action_find_goal_handle_by_uuid+0x22>
 8011b6a:	bf00      	nop

08011b6c <rclc_action_find_first_handle_by_status>:
 8011b6c:	b140      	cbz	r0, 8011b80 <rclc_action_find_first_handle_by_status+0x14>
 8011b6e:	68c0      	ldr	r0, [r0, #12]
 8011b70:	b910      	cbnz	r0, 8011b78 <rclc_action_find_first_handle_by_status+0xc>
 8011b72:	e005      	b.n	8011b80 <rclc_action_find_first_handle_by_status+0x14>
 8011b74:	6800      	ldr	r0, [r0, #0]
 8011b76:	b118      	cbz	r0, 8011b80 <rclc_action_find_first_handle_by_status+0x14>
 8011b78:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011b7c:	428b      	cmp	r3, r1
 8011b7e:	d1f9      	bne.n	8011b74 <rclc_action_find_first_handle_by_status+0x8>
 8011b80:	4770      	bx	lr
 8011b82:	bf00      	nop

08011b84 <rclc_action_find_first_terminated_handle>:
 8011b84:	b140      	cbz	r0, 8011b98 <rclc_action_find_first_terminated_handle+0x14>
 8011b86:	68c0      	ldr	r0, [r0, #12]
 8011b88:	b910      	cbnz	r0, 8011b90 <rclc_action_find_first_terminated_handle+0xc>
 8011b8a:	e005      	b.n	8011b98 <rclc_action_find_first_terminated_handle+0x14>
 8011b8c:	6800      	ldr	r0, [r0, #0]
 8011b8e:	b118      	cbz	r0, 8011b98 <rclc_action_find_first_terminated_handle+0x14>
 8011b90:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011b94:	2b03      	cmp	r3, #3
 8011b96:	ddf9      	ble.n	8011b8c <rclc_action_find_first_terminated_handle+0x8>
 8011b98:	4770      	bx	lr
 8011b9a:	bf00      	nop

08011b9c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8011b9c:	b170      	cbz	r0, 8011bbc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011b9e:	68c0      	ldr	r0, [r0, #12]
 8011ba0:	b160      	cbz	r0, 8011bbc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011ba2:	b410      	push	{r4}
 8011ba4:	e001      	b.n	8011baa <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8011ba6:	6800      	ldr	r0, [r0, #0]
 8011ba8:	b128      	cbz	r0, 8011bb6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8011baa:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8011bae:	4299      	cmp	r1, r3
 8011bb0:	bf08      	it	eq
 8011bb2:	4294      	cmpeq	r4, r2
 8011bb4:	d1f7      	bne.n	8011ba6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8011bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bba:	4770      	bx	lr
 8011bbc:	4770      	bx	lr
 8011bbe:	bf00      	nop

08011bc0 <rclc_action_find_handle_by_result_request_sequence_number>:
 8011bc0:	b170      	cbz	r0, 8011be0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011bc2:	68c0      	ldr	r0, [r0, #12]
 8011bc4:	b160      	cbz	r0, 8011be0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011bc6:	b410      	push	{r4}
 8011bc8:	e001      	b.n	8011bce <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8011bca:	6800      	ldr	r0, [r0, #0]
 8011bcc:	b128      	cbz	r0, 8011bda <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8011bce:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8011bd2:	4299      	cmp	r1, r3
 8011bd4:	bf08      	it	eq
 8011bd6:	4294      	cmpeq	r4, r2
 8011bd8:	d1f7      	bne.n	8011bca <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8011bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bde:	4770      	bx	lr
 8011be0:	4770      	bx	lr
 8011be2:	bf00      	nop

08011be4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8011be4:	b170      	cbz	r0, 8011c04 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011be6:	68c0      	ldr	r0, [r0, #12]
 8011be8:	b160      	cbz	r0, 8011c04 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011bea:	b410      	push	{r4}
 8011bec:	e001      	b.n	8011bf2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8011bee:	6800      	ldr	r0, [r0, #0]
 8011bf0:	b128      	cbz	r0, 8011bfe <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8011bf2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8011bf6:	4299      	cmp	r1, r3
 8011bf8:	bf08      	it	eq
 8011bfa:	4294      	cmpeq	r4, r2
 8011bfc:	d1f7      	bne.n	8011bee <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8011bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c02:	4770      	bx	lr
 8011c04:	4770      	bx	lr
 8011c06:	bf00      	nop

08011c08 <rclc_action_find_first_handle_with_goal_response>:
 8011c08:	b140      	cbz	r0, 8011c1c <rclc_action_find_first_handle_with_goal_response+0x14>
 8011c0a:	68c0      	ldr	r0, [r0, #12]
 8011c0c:	b910      	cbnz	r0, 8011c14 <rclc_action_find_first_handle_with_goal_response+0xc>
 8011c0e:	e005      	b.n	8011c1c <rclc_action_find_first_handle_with_goal_response+0x14>
 8011c10:	6800      	ldr	r0, [r0, #0]
 8011c12:	b118      	cbz	r0, 8011c1c <rclc_action_find_first_handle_with_goal_response+0x14>
 8011c14:	f890 3020 	ldrb.w	r3, [r0, #32]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d0f9      	beq.n	8011c10 <rclc_action_find_first_handle_with_goal_response+0x8>
 8011c1c:	4770      	bx	lr
 8011c1e:	bf00      	nop

08011c20 <rclc_action_find_first_handle_with_result_response>:
 8011c20:	b140      	cbz	r0, 8011c34 <rclc_action_find_first_handle_with_result_response+0x14>
 8011c22:	68c0      	ldr	r0, [r0, #12]
 8011c24:	b910      	cbnz	r0, 8011c2c <rclc_action_find_first_handle_with_result_response+0xc>
 8011c26:	e005      	b.n	8011c34 <rclc_action_find_first_handle_with_result_response+0x14>
 8011c28:	6800      	ldr	r0, [r0, #0]
 8011c2a:	b118      	cbz	r0, 8011c34 <rclc_action_find_first_handle_with_result_response+0x14>
 8011c2c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d0f9      	beq.n	8011c28 <rclc_action_find_first_handle_with_result_response+0x8>
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop

08011c38 <rclc_action_server_response_goal_request>:
 8011c38:	b198      	cbz	r0, 8011c62 <rclc_action_server_response_goal_request+0x2a>
 8011c3a:	b510      	push	{r4, lr}
 8011c3c:	6844      	ldr	r4, [r0, #4]
 8011c3e:	b086      	sub	sp, #24
 8011c40:	2200      	movs	r2, #0
 8011c42:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8011c46:	460b      	mov	r3, r1
 8011c48:	9205      	str	r2, [sp, #20]
 8011c4a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8011c4e:	aa03      	add	r2, sp, #12
 8011c50:	f104 0010 	add.w	r0, r4, #16
 8011c54:	f88d 300c 	strb.w	r3, [sp, #12]
 8011c58:	f7ff fd4a 	bl	80116f0 <rcl_action_send_goal_response>
 8011c5c:	b918      	cbnz	r0, 8011c66 <rclc_action_server_response_goal_request+0x2e>
 8011c5e:	b006      	add	sp, #24
 8011c60:	bd10      	pop	{r4, pc}
 8011c62:	200b      	movs	r0, #11
 8011c64:	4770      	bx	lr
 8011c66:	9001      	str	r0, [sp, #4]
 8011c68:	f7f9 fdea 	bl	800b840 <rcutils_reset_error>
 8011c6c:	9801      	ldr	r0, [sp, #4]
 8011c6e:	b006      	add	sp, #24
 8011c70:	bd10      	pop	{r4, pc}
 8011c72:	bf00      	nop
 8011c74:	0000      	movs	r0, r0
	...

08011c78 <rclc_action_server_goal_cancel_accept>:
 8011c78:	b310      	cbz	r0, 8011cc0 <rclc_action_server_goal_cancel_accept+0x48>
 8011c7a:	b510      	push	{r4, lr}
 8011c7c:	b090      	sub	sp, #64	@ 0x40
 8011c7e:	4604      	mov	r4, r0
 8011c80:	a806      	add	r0, sp, #24
 8011c82:	f7ff fefd 	bl	8011a80 <rcl_action_get_zero_initialized_cancel_response>
 8011c86:	2300      	movs	r3, #0
 8011c88:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8011c8c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8011c90:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8011c94:	f88d 3018 	strb.w	r3, [sp, #24]
 8011c98:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8011c9c:	f8cd d01c 	str.w	sp, [sp, #28]
 8011ca0:	46ec      	mov	ip, sp
 8011ca2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ca6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8011cc8 <rclc_action_server_goal_cancel_accept+0x50>
 8011caa:	6860      	ldr	r0, [r4, #4]
 8011cac:	aa06      	add	r2, sp, #24
 8011cae:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8011cb2:	3010      	adds	r0, #16
 8011cb4:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011cb8:	f7ff fdd2 	bl	8011860 <rcl_action_send_cancel_response>
 8011cbc:	b010      	add	sp, #64	@ 0x40
 8011cbe:	bd10      	pop	{r4, pc}
 8011cc0:	200b      	movs	r0, #11
 8011cc2:	4770      	bx	lr
 8011cc4:	f3af 8000 	nop.w
 8011cc8:	00000001 	.word	0x00000001
 8011ccc:	00000001 	.word	0x00000001

08011cd0 <rclc_action_server_goal_cancel_reject>:
 8011cd0:	b082      	sub	sp, #8
 8011cd2:	b530      	push	{r4, r5, lr}
 8011cd4:	b08b      	sub	sp, #44	@ 0x2c
 8011cd6:	ac0e      	add	r4, sp, #56	@ 0x38
 8011cd8:	e884 000c 	stmia.w	r4, {r2, r3}
 8011cdc:	b188      	cbz	r0, 8011d02 <rclc_action_server_goal_cancel_reject+0x32>
 8011cde:	4604      	mov	r4, r0
 8011ce0:	a801      	add	r0, sp, #4
 8011ce2:	460d      	mov	r5, r1
 8011ce4:	f7ff fecc 	bl	8011a80 <rcl_action_get_zero_initialized_cancel_response>
 8011ce8:	aa01      	add	r2, sp, #4
 8011cea:	a90e      	add	r1, sp, #56	@ 0x38
 8011cec:	f104 0010 	add.w	r0, r4, #16
 8011cf0:	f88d 5004 	strb.w	r5, [sp, #4]
 8011cf4:	f7ff fdb4 	bl	8011860 <rcl_action_send_cancel_response>
 8011cf8:	b00b      	add	sp, #44	@ 0x2c
 8011cfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011cfe:	b002      	add	sp, #8
 8011d00:	4770      	bx	lr
 8011d02:	200b      	movs	r0, #11
 8011d04:	b00b      	add	sp, #44	@ 0x2c
 8011d06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d0a:	b002      	add	sp, #8
 8011d0c:	4770      	bx	lr
 8011d0e:	bf00      	nop

08011d10 <__atomic_load_8>:
 8011d10:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011d14:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8011d18:	4a15      	ldr	r2, [pc, #84]	@ (8011d70 <__atomic_load_8+0x60>)
 8011d1a:	4b16      	ldr	r3, [pc, #88]	@ (8011d74 <__atomic_load_8+0x64>)
 8011d1c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011d20:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011d24:	fb02 f101 	mul.w	r1, r2, r1
 8011d28:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011d2c:	fba3 2301 	umull	r2, r3, r3, r1
 8011d30:	091b      	lsrs	r3, r3, #4
 8011d32:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011d36:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8011d3a:	b4d0      	push	{r4, r6, r7}
 8011d3c:	4c0e      	ldr	r4, [pc, #56]	@ (8011d78 <__atomic_load_8+0x68>)
 8011d3e:	1ac9      	subs	r1, r1, r3
 8011d40:	1862      	adds	r2, r4, r1
 8011d42:	f04f 0c01 	mov.w	ip, #1
 8011d46:	e8d2 3f4f 	ldrexb	r3, [r2]
 8011d4a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8011d4e:	2e00      	cmp	r6, #0
 8011d50:	d1f9      	bne.n	8011d46 <__atomic_load_8+0x36>
 8011d52:	f3bf 8f5b 	dmb	ish
 8011d56:	b2db      	uxtb	r3, r3
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d1f4      	bne.n	8011d46 <__atomic_load_8+0x36>
 8011d5c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011d60:	f3bf 8f5b 	dmb	ish
 8011d64:	5463      	strb	r3, [r4, r1]
 8011d66:	4630      	mov	r0, r6
 8011d68:	4639      	mov	r1, r7
 8011d6a:	bcd0      	pop	{r4, r6, r7}
 8011d6c:	4770      	bx	lr
 8011d6e:	bf00      	nop
 8011d70:	27d4eb2d 	.word	0x27d4eb2d
 8011d74:	b21642c9 	.word	0xb21642c9
 8011d78:	2000dc98 	.word	0x2000dc98

08011d7c <__atomic_store_8>:
 8011d7c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011d80:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8011d84:	b570      	push	{r4, r5, r6, lr}
 8011d86:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011d8a:	4c14      	ldr	r4, [pc, #80]	@ (8011ddc <__atomic_store_8+0x60>)
 8011d8c:	4d14      	ldr	r5, [pc, #80]	@ (8011de0 <__atomic_store_8+0x64>)
 8011d8e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011d92:	fb04 f101 	mul.w	r1, r4, r1
 8011d96:	4c13      	ldr	r4, [pc, #76]	@ (8011de4 <__atomic_store_8+0x68>)
 8011d98:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011d9c:	fba4 4e01 	umull	r4, lr, r4, r1
 8011da0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8011da4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8011da8:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8011dac:	eba1 0e0e 	sub.w	lr, r1, lr
 8011db0:	eb05 0c0e 	add.w	ip, r5, lr
 8011db4:	f04f 0401 	mov.w	r4, #1
 8011db8:	e8dc 1f4f 	ldrexb	r1, [ip]
 8011dbc:	e8cc 4f46 	strexb	r6, r4, [ip]
 8011dc0:	2e00      	cmp	r6, #0
 8011dc2:	d1f9      	bne.n	8011db8 <__atomic_store_8+0x3c>
 8011dc4:	f3bf 8f5b 	dmb	ish
 8011dc8:	b2c9      	uxtb	r1, r1
 8011dca:	2900      	cmp	r1, #0
 8011dcc:	d1f4      	bne.n	8011db8 <__atomic_store_8+0x3c>
 8011dce:	e9c0 2300 	strd	r2, r3, [r0]
 8011dd2:	f3bf 8f5b 	dmb	ish
 8011dd6:	f805 100e 	strb.w	r1, [r5, lr]
 8011dda:	bd70      	pop	{r4, r5, r6, pc}
 8011ddc:	27d4eb2d 	.word	0x27d4eb2d
 8011de0:	2000dc98 	.word	0x2000dc98
 8011de4:	b21642c9 	.word	0xb21642c9

08011de8 <__atomic_exchange_8>:
 8011de8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8011dec:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8011df0:	4916      	ldr	r1, [pc, #88]	@ (8011e4c <__atomic_exchange_8+0x64>)
 8011df2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8011df6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8011dfa:	fb01 fc0c 	mul.w	ip, r1, ip
 8011dfe:	4914      	ldr	r1, [pc, #80]	@ (8011e50 <__atomic_exchange_8+0x68>)
 8011e00:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8011e04:	b570      	push	{r4, r5, r6, lr}
 8011e06:	4605      	mov	r5, r0
 8011e08:	fba1 010c 	umull	r0, r1, r1, ip
 8011e0c:	0909      	lsrs	r1, r1, #4
 8011e0e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8011e12:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8011e16:	4e0f      	ldr	r6, [pc, #60]	@ (8011e54 <__atomic_exchange_8+0x6c>)
 8011e18:	ebac 0c01 	sub.w	ip, ip, r1
 8011e1c:	eb06 010c 	add.w	r1, r6, ip
 8011e20:	f04f 0e01 	mov.w	lr, #1
 8011e24:	e8d1 4f4f 	ldrexb	r4, [r1]
 8011e28:	e8c1 ef40 	strexb	r0, lr, [r1]
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	d1f9      	bne.n	8011e24 <__atomic_exchange_8+0x3c>
 8011e30:	f3bf 8f5b 	dmb	ish
 8011e34:	b2e4      	uxtb	r4, r4
 8011e36:	2c00      	cmp	r4, #0
 8011e38:	d1f4      	bne.n	8011e24 <__atomic_exchange_8+0x3c>
 8011e3a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011e3e:	e9c5 2300 	strd	r2, r3, [r5]
 8011e42:	f3bf 8f5b 	dmb	ish
 8011e46:	f806 400c 	strb.w	r4, [r6, ip]
 8011e4a:	bd70      	pop	{r4, r5, r6, pc}
 8011e4c:	27d4eb2d 	.word	0x27d4eb2d
 8011e50:	b21642c9 	.word	0xb21642c9
 8011e54:	2000dc98 	.word	0x2000dc98

08011e58 <rcutils_get_env>:
 8011e58:	b168      	cbz	r0, 8011e76 <rcutils_get_env+0x1e>
 8011e5a:	b510      	push	{r4, lr}
 8011e5c:	460c      	mov	r4, r1
 8011e5e:	b129      	cbz	r1, 8011e6c <rcutils_get_env+0x14>
 8011e60:	f004 f800 	bl	8015e64 <getenv>
 8011e64:	b120      	cbz	r0, 8011e70 <rcutils_get_env+0x18>
 8011e66:	6020      	str	r0, [r4, #0]
 8011e68:	2000      	movs	r0, #0
 8011e6a:	bd10      	pop	{r4, pc}
 8011e6c:	4803      	ldr	r0, [pc, #12]	@ (8011e7c <rcutils_get_env+0x24>)
 8011e6e:	bd10      	pop	{r4, pc}
 8011e70:	4b03      	ldr	r3, [pc, #12]	@ (8011e80 <rcutils_get_env+0x28>)
 8011e72:	6023      	str	r3, [r4, #0]
 8011e74:	bd10      	pop	{r4, pc}
 8011e76:	4803      	ldr	r0, [pc, #12]	@ (8011e84 <rcutils_get_env+0x2c>)
 8011e78:	4770      	bx	lr
 8011e7a:	bf00      	nop
 8011e7c:	08017d80 	.word	0x08017d80
 8011e80:	08017ea4 	.word	0x08017ea4
 8011e84:	08017d64 	.word	0x08017d64

08011e88 <rcutils_is_directory>:
 8011e88:	2000      	movs	r0, #0
 8011e8a:	4770      	bx	lr

08011e8c <rcutils_join_path>:
 8011e8c:	b082      	sub	sp, #8
 8011e8e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8011e92:	2000      	movs	r0, #0
 8011e94:	b002      	add	sp, #8
 8011e96:	4770      	bx	lr

08011e98 <rcutils_to_native_path>:
 8011e98:	b084      	sub	sp, #16
 8011e9a:	a801      	add	r0, sp, #4
 8011e9c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8011ea0:	b004      	add	sp, #16
 8011ea2:	2000      	movs	r0, #0
 8011ea4:	4770      	bx	lr
 8011ea6:	bf00      	nop

08011ea8 <rcutils_format_string_limit>:
 8011ea8:	b40f      	push	{r0, r1, r2, r3}
 8011eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011eac:	b083      	sub	sp, #12
 8011eae:	ac08      	add	r4, sp, #32
 8011eb0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8011eb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011eb6:	b34e      	cbz	r6, 8011f0c <rcutils_format_string_limit+0x64>
 8011eb8:	a808      	add	r0, sp, #32
 8011eba:	f7f9 fc9d 	bl	800b7f8 <rcutils_allocator_is_valid>
 8011ebe:	b328      	cbz	r0, 8011f0c <rcutils_format_string_limit+0x64>
 8011ec0:	2100      	movs	r1, #0
 8011ec2:	ab0f      	add	r3, sp, #60	@ 0x3c
 8011ec4:	4632      	mov	r2, r6
 8011ec6:	4608      	mov	r0, r1
 8011ec8:	e9cd 3300 	strd	r3, r3, [sp]
 8011ecc:	f000 f8f4 	bl	80120b8 <rcutils_vsnprintf>
 8011ed0:	1c43      	adds	r3, r0, #1
 8011ed2:	4605      	mov	r5, r0
 8011ed4:	d01a      	beq.n	8011f0c <rcutils_format_string_limit+0x64>
 8011ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011ed8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011eda:	1c47      	adds	r7, r0, #1
 8011edc:	429f      	cmp	r7, r3
 8011ede:	bf84      	itt	hi
 8011ee0:	461f      	movhi	r7, r3
 8011ee2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8011ee6:	4638      	mov	r0, r7
 8011ee8:	9b08      	ldr	r3, [sp, #32]
 8011eea:	4798      	blx	r3
 8011eec:	4604      	mov	r4, r0
 8011eee:	b168      	cbz	r0, 8011f0c <rcutils_format_string_limit+0x64>
 8011ef0:	9b01      	ldr	r3, [sp, #4]
 8011ef2:	4632      	mov	r2, r6
 8011ef4:	4639      	mov	r1, r7
 8011ef6:	f000 f8df 	bl	80120b8 <rcutils_vsnprintf>
 8011efa:	2800      	cmp	r0, #0
 8011efc:	db02      	blt.n	8011f04 <rcutils_format_string_limit+0x5c>
 8011efe:	2300      	movs	r3, #0
 8011f00:	5563      	strb	r3, [r4, r5]
 8011f02:	e004      	b.n	8011f0e <rcutils_format_string_limit+0x66>
 8011f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f06:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011f08:	4620      	mov	r0, r4
 8011f0a:	4798      	blx	r3
 8011f0c:	2400      	movs	r4, #0
 8011f0e:	4620      	mov	r0, r4
 8011f10:	b003      	add	sp, #12
 8011f12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011f16:	b004      	add	sp, #16
 8011f18:	4770      	bx	lr
 8011f1a:	bf00      	nop

08011f1c <rcutils_repl_str>:
 8011f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f20:	ed2d 8b02 	vpush	{d8}
 8011f24:	b087      	sub	sp, #28
 8011f26:	4680      	mov	r8, r0
 8011f28:	4608      	mov	r0, r1
 8011f2a:	f8cd 8004 	str.w	r8, [sp, #4]
 8011f2e:	ee08 2a10 	vmov	s16, r2
 8011f32:	468a      	mov	sl, r1
 8011f34:	4699      	mov	r9, r3
 8011f36:	f7ee f95d 	bl	80001f4 <strlen>
 8011f3a:	2600      	movs	r6, #0
 8011f3c:	4647      	mov	r7, r8
 8011f3e:	9002      	str	r0, [sp, #8]
 8011f40:	46b3      	mov	fp, r6
 8011f42:	2510      	movs	r5, #16
 8011f44:	46b0      	mov	r8, r6
 8011f46:	e01d      	b.n	8011f84 <rcutils_repl_str+0x68>
 8011f48:	f10b 0b01 	add.w	fp, fp, #1
 8011f4c:	455e      	cmp	r6, fp
 8011f4e:	d211      	bcs.n	8011f74 <rcutils_repl_str+0x58>
 8011f50:	442e      	add	r6, r5
 8011f52:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011f56:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011f5a:	00b1      	lsls	r1, r6, #2
 8011f5c:	4798      	blx	r3
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	f000 8088 	beq.w	8012074 <rcutils_repl_str+0x158>
 8011f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f68:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8011f6c:	4680      	mov	r8, r0
 8011f6e:	bf28      	it	cs
 8011f70:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8011f74:	9a01      	ldr	r2, [sp, #4]
 8011f76:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8011f7a:	1aa2      	subs	r2, r4, r2
 8011f7c:	f843 2c04 	str.w	r2, [r3, #-4]
 8011f80:	9b02      	ldr	r3, [sp, #8]
 8011f82:	18e7      	adds	r7, r4, r3
 8011f84:	4651      	mov	r1, sl
 8011f86:	4638      	mov	r0, r7
 8011f88:	f004 fb61 	bl	801664e <strstr>
 8011f8c:	4604      	mov	r4, r0
 8011f8e:	4640      	mov	r0, r8
 8011f90:	2c00      	cmp	r4, #0
 8011f92:	d1d9      	bne.n	8011f48 <rcutils_repl_str+0x2c>
 8011f94:	46b8      	mov	r8, r7
 8011f96:	4607      	mov	r7, r0
 8011f98:	4640      	mov	r0, r8
 8011f9a:	f7ee f92b 	bl	80001f4 <strlen>
 8011f9e:	9b01      	ldr	r3, [sp, #4]
 8011fa0:	eba8 0303 	sub.w	r3, r8, r3
 8011fa4:	181c      	adds	r4, r3, r0
 8011fa6:	9404      	str	r4, [sp, #16]
 8011fa8:	f1bb 0f00 	cmp.w	fp, #0
 8011fac:	d04a      	beq.n	8012044 <rcutils_repl_str+0x128>
 8011fae:	ee18 0a10 	vmov	r0, s16
 8011fb2:	f7ee f91f 	bl	80001f4 <strlen>
 8011fb6:	9b02      	ldr	r3, [sp, #8]
 8011fb8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011fbc:	1ac3      	subs	r3, r0, r3
 8011fbe:	fb0b 4303 	mla	r3, fp, r3, r4
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	9305      	str	r3, [sp, #20]
 8011fc6:	4606      	mov	r6, r0
 8011fc8:	f8d9 3000 	ldr.w	r3, [r9]
 8011fcc:	1c50      	adds	r0, r2, #1
 8011fce:	4798      	blx	r3
 8011fd0:	9003      	str	r0, [sp, #12]
 8011fd2:	2800      	cmp	r0, #0
 8011fd4:	d04f      	beq.n	8012076 <rcutils_repl_str+0x15a>
 8011fd6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011fda:	683a      	ldr	r2, [r7, #0]
 8011fdc:	4641      	mov	r1, r8
 8011fde:	f004 fbd8 	bl	8016792 <memcpy>
 8011fe2:	683d      	ldr	r5, [r7, #0]
 8011fe4:	9b03      	ldr	r3, [sp, #12]
 8011fe6:	9701      	str	r7, [sp, #4]
 8011fe8:	46ba      	mov	sl, r7
 8011fea:	441d      	add	r5, r3
 8011fec:	9f02      	ldr	r7, [sp, #8]
 8011fee:	f8cd 9008 	str.w	r9, [sp, #8]
 8011ff2:	2401      	movs	r4, #1
 8011ff4:	46d1      	mov	r9, sl
 8011ff6:	ee18 aa10 	vmov	sl, s16
 8011ffa:	e00a      	b.n	8012012 <rcutils_repl_str+0xf6>
 8011ffc:	f8d9 5000 	ldr.w	r5, [r9]
 8012000:	1aaa      	subs	r2, r5, r2
 8012002:	1885      	adds	r5, r0, r2
 8012004:	f004 fbc5 	bl	8016792 <memcpy>
 8012008:	45a3      	cmp	fp, r4
 801200a:	f104 0201 	add.w	r2, r4, #1
 801200e:	d935      	bls.n	801207c <rcutils_repl_str+0x160>
 8012010:	4614      	mov	r4, r2
 8012012:	4632      	mov	r2, r6
 8012014:	4651      	mov	r1, sl
 8012016:	4628      	mov	r0, r5
 8012018:	f004 fbbb 	bl	8016792 <memcpy>
 801201c:	f859 2b04 	ldr.w	r2, [r9], #4
 8012020:	45a3      	cmp	fp, r4
 8012022:	443a      	add	r2, r7
 8012024:	eb05 0006 	add.w	r0, r5, r6
 8012028:	eb08 0102 	add.w	r1, r8, r2
 801202c:	d1e6      	bne.n	8011ffc <rcutils_repl_str+0xe0>
 801202e:	9b04      	ldr	r3, [sp, #16]
 8012030:	1a9a      	subs	r2, r3, r2
 8012032:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8012036:	f004 fbac 	bl	8016792 <memcpy>
 801203a:	9a03      	ldr	r2, [sp, #12]
 801203c:	9905      	ldr	r1, [sp, #20]
 801203e:	2300      	movs	r3, #0
 8012040:	5453      	strb	r3, [r2, r1]
 8012042:	e00b      	b.n	801205c <rcutils_repl_str+0x140>
 8012044:	4620      	mov	r0, r4
 8012046:	f8d9 3000 	ldr.w	r3, [r9]
 801204a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801204e:	3001      	adds	r0, #1
 8012050:	4798      	blx	r3
 8012052:	9003      	str	r0, [sp, #12]
 8012054:	b110      	cbz	r0, 801205c <rcutils_repl_str+0x140>
 8012056:	9901      	ldr	r1, [sp, #4]
 8012058:	f004 fb93 	bl	8016782 <strcpy>
 801205c:	4638      	mov	r0, r7
 801205e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012062:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012066:	4798      	blx	r3
 8012068:	9803      	ldr	r0, [sp, #12]
 801206a:	b007      	add	sp, #28
 801206c:	ecbd 8b02 	vpop	{d8}
 8012070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012074:	4647      	mov	r7, r8
 8012076:	2300      	movs	r3, #0
 8012078:	9303      	str	r3, [sp, #12]
 801207a:	e7ef      	b.n	801205c <rcutils_repl_str+0x140>
 801207c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8012080:	e7db      	b.n	801203a <rcutils_repl_str+0x11e>
 8012082:	bf00      	nop

08012084 <rcutils_snprintf>:
 8012084:	b40c      	push	{r2, r3}
 8012086:	b530      	push	{r4, r5, lr}
 8012088:	b083      	sub	sp, #12
 801208a:	ab06      	add	r3, sp, #24
 801208c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012090:	9301      	str	r3, [sp, #4]
 8012092:	b152      	cbz	r2, 80120aa <rcutils_snprintf+0x26>
 8012094:	b138      	cbz	r0, 80120a6 <rcutils_snprintf+0x22>
 8012096:	b141      	cbz	r1, 80120aa <rcutils_snprintf+0x26>
 8012098:	f004 fa7a 	bl	8016590 <vsniprintf>
 801209c:	b003      	add	sp, #12
 801209e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80120a2:	b002      	add	sp, #8
 80120a4:	4770      	bx	lr
 80120a6:	2900      	cmp	r1, #0
 80120a8:	d0f6      	beq.n	8012098 <rcutils_snprintf+0x14>
 80120aa:	f004 fb3d 	bl	8016728 <__errno>
 80120ae:	2316      	movs	r3, #22
 80120b0:	6003      	str	r3, [r0, #0]
 80120b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80120b6:	e7f1      	b.n	801209c <rcutils_snprintf+0x18>

080120b8 <rcutils_vsnprintf>:
 80120b8:	b570      	push	{r4, r5, r6, lr}
 80120ba:	b13a      	cbz	r2, 80120cc <rcutils_vsnprintf+0x14>
 80120bc:	b120      	cbz	r0, 80120c8 <rcutils_vsnprintf+0x10>
 80120be:	b129      	cbz	r1, 80120cc <rcutils_vsnprintf+0x14>
 80120c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120c4:	f004 ba64 	b.w	8016590 <vsniprintf>
 80120c8:	2900      	cmp	r1, #0
 80120ca:	d0f9      	beq.n	80120c0 <rcutils_vsnprintf+0x8>
 80120cc:	f004 fb2c 	bl	8016728 <__errno>
 80120d0:	2316      	movs	r3, #22
 80120d2:	6003      	str	r3, [r0, #0]
 80120d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80120d8:	bd70      	pop	{r4, r5, r6, pc}
 80120da:	bf00      	nop

080120dc <rcutils_strdup>:
 80120dc:	b084      	sub	sp, #16
 80120de:	b570      	push	{r4, r5, r6, lr}
 80120e0:	b082      	sub	sp, #8
 80120e2:	ac07      	add	r4, sp, #28
 80120e4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80120e8:	4605      	mov	r5, r0
 80120ea:	b1b0      	cbz	r0, 801211a <rcutils_strdup+0x3e>
 80120ec:	f7ee f882 	bl	80001f4 <strlen>
 80120f0:	1c42      	adds	r2, r0, #1
 80120f2:	9b07      	ldr	r3, [sp, #28]
 80120f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80120f6:	9201      	str	r2, [sp, #4]
 80120f8:	4606      	mov	r6, r0
 80120fa:	4610      	mov	r0, r2
 80120fc:	4798      	blx	r3
 80120fe:	4604      	mov	r4, r0
 8012100:	b128      	cbz	r0, 801210e <rcutils_strdup+0x32>
 8012102:	9a01      	ldr	r2, [sp, #4]
 8012104:	4629      	mov	r1, r5
 8012106:	f004 fb44 	bl	8016792 <memcpy>
 801210a:	2300      	movs	r3, #0
 801210c:	55a3      	strb	r3, [r4, r6]
 801210e:	4620      	mov	r0, r4
 8012110:	b002      	add	sp, #8
 8012112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012116:	b004      	add	sp, #16
 8012118:	4770      	bx	lr
 801211a:	4604      	mov	r4, r0
 801211c:	e7f7      	b.n	801210e <rcutils_strdup+0x32>
 801211e:	bf00      	nop

08012120 <rcutils_strndup>:
 8012120:	b082      	sub	sp, #8
 8012122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012124:	ac06      	add	r4, sp, #24
 8012126:	e884 000c 	stmia.w	r4, {r2, r3}
 801212a:	4605      	mov	r5, r0
 801212c:	b188      	cbz	r0, 8012152 <rcutils_strndup+0x32>
 801212e:	1c4f      	adds	r7, r1, #1
 8012130:	460e      	mov	r6, r1
 8012132:	4638      	mov	r0, r7
 8012134:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012136:	4790      	blx	r2
 8012138:	4604      	mov	r4, r0
 801213a:	b128      	cbz	r0, 8012148 <rcutils_strndup+0x28>
 801213c:	463a      	mov	r2, r7
 801213e:	4629      	mov	r1, r5
 8012140:	f004 fb27 	bl	8016792 <memcpy>
 8012144:	2300      	movs	r3, #0
 8012146:	55a3      	strb	r3, [r4, r6]
 8012148:	4620      	mov	r0, r4
 801214a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801214e:	b002      	add	sp, #8
 8012150:	4770      	bx	lr
 8012152:	4604      	mov	r4, r0
 8012154:	e7f8      	b.n	8012148 <rcutils_strndup+0x28>
 8012156:	bf00      	nop

08012158 <rcutils_get_zero_initialized_string_map>:
 8012158:	4b01      	ldr	r3, [pc, #4]	@ (8012160 <rcutils_get_zero_initialized_string_map+0x8>)
 801215a:	2000      	movs	r0, #0
 801215c:	6018      	str	r0, [r3, #0]
 801215e:	4770      	bx	lr
 8012160:	2000dcb0 	.word	0x2000dcb0

08012164 <rcutils_string_map_reserve>:
 8012164:	2800      	cmp	r0, #0
 8012166:	d05f      	beq.n	8012228 <rcutils_string_map_reserve+0xc4>
 8012168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801216c:	460c      	mov	r4, r1
 801216e:	6801      	ldr	r1, [r0, #0]
 8012170:	b082      	sub	sp, #8
 8012172:	4605      	mov	r5, r0
 8012174:	b129      	cbz	r1, 8012182 <rcutils_string_map_reserve+0x1e>
 8012176:	68cb      	ldr	r3, [r1, #12]
 8012178:	42a3      	cmp	r3, r4
 801217a:	d906      	bls.n	801218a <rcutils_string_map_reserve+0x26>
 801217c:	461c      	mov	r4, r3
 801217e:	2900      	cmp	r1, #0
 8012180:	d1f9      	bne.n	8012176 <rcutils_string_map_reserve+0x12>
 8012182:	201f      	movs	r0, #31
 8012184:	b002      	add	sp, #8
 8012186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801218a:	688b      	ldr	r3, [r1, #8]
 801218c:	42a3      	cmp	r3, r4
 801218e:	d047      	beq.n	8012220 <rcutils_string_map_reserve+0xbc>
 8012190:	6a0e      	ldr	r6, [r1, #32]
 8012192:	2c00      	cmp	r4, #0
 8012194:	d034      	beq.n	8012200 <rcutils_string_map_reserve+0x9c>
 8012196:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801219a:	d243      	bcs.n	8012224 <rcutils_string_map_reserve+0xc0>
 801219c:	00a7      	lsls	r7, r4, #2
 801219e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80121a2:	6808      	ldr	r0, [r1, #0]
 80121a4:	4632      	mov	r2, r6
 80121a6:	4639      	mov	r1, r7
 80121a8:	47c0      	blx	r8
 80121aa:	2800      	cmp	r0, #0
 80121ac:	d03a      	beq.n	8012224 <rcutils_string_map_reserve+0xc0>
 80121ae:	682b      	ldr	r3, [r5, #0]
 80121b0:	4632      	mov	r2, r6
 80121b2:	6018      	str	r0, [r3, #0]
 80121b4:	4639      	mov	r1, r7
 80121b6:	6858      	ldr	r0, [r3, #4]
 80121b8:	47c0      	blx	r8
 80121ba:	2800      	cmp	r0, #0
 80121bc:	d032      	beq.n	8012224 <rcutils_string_map_reserve+0xc0>
 80121be:	682d      	ldr	r5, [r5, #0]
 80121c0:	68ab      	ldr	r3, [r5, #8]
 80121c2:	6068      	str	r0, [r5, #4]
 80121c4:	42a3      	cmp	r3, r4
 80121c6:	d226      	bcs.n	8012216 <rcutils_string_map_reserve+0xb2>
 80121c8:	682a      	ldr	r2, [r5, #0]
 80121ca:	eb00 0c07 	add.w	ip, r0, r7
 80121ce:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80121d2:	45e6      	cmp	lr, ip
 80121d4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80121d8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80121dc:	d203      	bcs.n	80121e6 <rcutils_string_map_reserve+0x82>
 80121de:	eb02 0c07 	add.w	ip, r2, r7
 80121e2:	4566      	cmp	r6, ip
 80121e4:	d322      	bcc.n	801222c <rcutils_string_map_reserve+0xc8>
 80121e6:	1ae3      	subs	r3, r4, r3
 80121e8:	009a      	lsls	r2, r3, #2
 80121ea:	4670      	mov	r0, lr
 80121ec:	2100      	movs	r1, #0
 80121ee:	9201      	str	r2, [sp, #4]
 80121f0:	f004 fa06 	bl	8016600 <memset>
 80121f4:	9a01      	ldr	r2, [sp, #4]
 80121f6:	2100      	movs	r1, #0
 80121f8:	4630      	mov	r0, r6
 80121fa:	f004 fa01 	bl	8016600 <memset>
 80121fe:	e00a      	b.n	8012216 <rcutils_string_map_reserve+0xb2>
 8012200:	694f      	ldr	r7, [r1, #20]
 8012202:	6808      	ldr	r0, [r1, #0]
 8012204:	4631      	mov	r1, r6
 8012206:	47b8      	blx	r7
 8012208:	682b      	ldr	r3, [r5, #0]
 801220a:	4631      	mov	r1, r6
 801220c:	6858      	ldr	r0, [r3, #4]
 801220e:	601c      	str	r4, [r3, #0]
 8012210:	47b8      	blx	r7
 8012212:	682d      	ldr	r5, [r5, #0]
 8012214:	606c      	str	r4, [r5, #4]
 8012216:	2000      	movs	r0, #0
 8012218:	60ac      	str	r4, [r5, #8]
 801221a:	b002      	add	sp, #8
 801221c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012220:	2000      	movs	r0, #0
 8012222:	e7af      	b.n	8012184 <rcutils_string_map_reserve+0x20>
 8012224:	200a      	movs	r0, #10
 8012226:	e7ad      	b.n	8012184 <rcutils_string_map_reserve+0x20>
 8012228:	200b      	movs	r0, #11
 801222a:	4770      	bx	lr
 801222c:	1f0b      	subs	r3, r1, #4
 801222e:	4418      	add	r0, r3
 8012230:	4413      	add	r3, r2
 8012232:	3a04      	subs	r2, #4
 8012234:	4417      	add	r7, r2
 8012236:	2200      	movs	r2, #0
 8012238:	f843 2f04 	str.w	r2, [r3, #4]!
 801223c:	42bb      	cmp	r3, r7
 801223e:	f840 2f04 	str.w	r2, [r0, #4]!
 8012242:	d1f9      	bne.n	8012238 <rcutils_string_map_reserve+0xd4>
 8012244:	e7e7      	b.n	8012216 <rcutils_string_map_reserve+0xb2>
 8012246:	bf00      	nop

08012248 <rcutils_string_map_init>:
 8012248:	b082      	sub	sp, #8
 801224a:	b570      	push	{r4, r5, r6, lr}
 801224c:	ac04      	add	r4, sp, #16
 801224e:	e884 000c 	stmia.w	r4, {r2, r3}
 8012252:	b380      	cbz	r0, 80122b6 <rcutils_string_map_init+0x6e>
 8012254:	6806      	ldr	r6, [r0, #0]
 8012256:	4604      	mov	r4, r0
 8012258:	b12e      	cbz	r6, 8012266 <rcutils_string_map_init+0x1e>
 801225a:	251e      	movs	r5, #30
 801225c:	4628      	mov	r0, r5
 801225e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012262:	b002      	add	sp, #8
 8012264:	4770      	bx	lr
 8012266:	a804      	add	r0, sp, #16
 8012268:	460d      	mov	r5, r1
 801226a:	f7f9 fac5 	bl	800b7f8 <rcutils_allocator_is_valid>
 801226e:	b310      	cbz	r0, 80122b6 <rcutils_string_map_init+0x6e>
 8012270:	9b04      	ldr	r3, [sp, #16]
 8012272:	9908      	ldr	r1, [sp, #32]
 8012274:	2024      	movs	r0, #36	@ 0x24
 8012276:	4798      	blx	r3
 8012278:	6020      	str	r0, [r4, #0]
 801227a:	b310      	cbz	r0, 80122c2 <rcutils_string_map_init+0x7a>
 801227c:	f10d 0e10 	add.w	lr, sp, #16
 8012280:	e9c0 6600 	strd	r6, r6, [r0]
 8012284:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8012288:	f100 0c10 	add.w	ip, r0, #16
 801228c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012290:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012294:	f8de 3000 	ldr.w	r3, [lr]
 8012298:	f8cc 3000 	str.w	r3, [ip]
 801229c:	4629      	mov	r1, r5
 801229e:	4620      	mov	r0, r4
 80122a0:	f7ff ff60 	bl	8012164 <rcutils_string_map_reserve>
 80122a4:	4605      	mov	r5, r0
 80122a6:	2800      	cmp	r0, #0
 80122a8:	d0d8      	beq.n	801225c <rcutils_string_map_init+0x14>
 80122aa:	9b05      	ldr	r3, [sp, #20]
 80122ac:	9908      	ldr	r1, [sp, #32]
 80122ae:	6820      	ldr	r0, [r4, #0]
 80122b0:	4798      	blx	r3
 80122b2:	6026      	str	r6, [r4, #0]
 80122b4:	e7d2      	b.n	801225c <rcutils_string_map_init+0x14>
 80122b6:	250b      	movs	r5, #11
 80122b8:	4628      	mov	r0, r5
 80122ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122be:	b002      	add	sp, #8
 80122c0:	4770      	bx	lr
 80122c2:	250a      	movs	r5, #10
 80122c4:	e7ca      	b.n	801225c <rcutils_string_map_init+0x14>
 80122c6:	bf00      	nop

080122c8 <rcutils_string_map_fini>:
 80122c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122cc:	b082      	sub	sp, #8
 80122ce:	2800      	cmp	r0, #0
 80122d0:	d03a      	beq.n	8012348 <rcutils_string_map_fini+0x80>
 80122d2:	6804      	ldr	r4, [r0, #0]
 80122d4:	4606      	mov	r6, r0
 80122d6:	2c00      	cmp	r4, #0
 80122d8:	d032      	beq.n	8012340 <rcutils_string_map_fini+0x78>
 80122da:	68a3      	ldr	r3, [r4, #8]
 80122dc:	b32b      	cbz	r3, 801232a <rcutils_string_map_fini+0x62>
 80122de:	2500      	movs	r5, #0
 80122e0:	6822      	ldr	r2, [r4, #0]
 80122e2:	462f      	mov	r7, r5
 80122e4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80122e8:	b1e0      	cbz	r0, 8012324 <rcutils_string_map_fini+0x5c>
 80122ea:	6a21      	ldr	r1, [r4, #32]
 80122ec:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80122f0:	9101      	str	r1, [sp, #4]
 80122f2:	47c0      	blx	r8
 80122f4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80122f8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80122fc:	9901      	ldr	r1, [sp, #4]
 80122fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012302:	47c0      	blx	r8
 8012304:	68e3      	ldr	r3, [r4, #12]
 8012306:	6862      	ldr	r2, [r4, #4]
 8012308:	3b01      	subs	r3, #1
 801230a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801230e:	60e3      	str	r3, [r4, #12]
 8012310:	6834      	ldr	r4, [r6, #0]
 8012312:	68a3      	ldr	r3, [r4, #8]
 8012314:	3501      	adds	r5, #1
 8012316:	429d      	cmp	r5, r3
 8012318:	d207      	bcs.n	801232a <rcutils_string_map_fini+0x62>
 801231a:	6822      	ldr	r2, [r4, #0]
 801231c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012320:	2800      	cmp	r0, #0
 8012322:	d1e2      	bne.n	80122ea <rcutils_string_map_fini+0x22>
 8012324:	3501      	adds	r5, #1
 8012326:	429d      	cmp	r5, r3
 8012328:	d3dc      	bcc.n	80122e4 <rcutils_string_map_fini+0x1c>
 801232a:	2100      	movs	r1, #0
 801232c:	4630      	mov	r0, r6
 801232e:	f7ff ff19 	bl	8012164 <rcutils_string_map_reserve>
 8012332:	4604      	mov	r4, r0
 8012334:	b920      	cbnz	r0, 8012340 <rcutils_string_map_fini+0x78>
 8012336:	6830      	ldr	r0, [r6, #0]
 8012338:	6943      	ldr	r3, [r0, #20]
 801233a:	6a01      	ldr	r1, [r0, #32]
 801233c:	4798      	blx	r3
 801233e:	6034      	str	r4, [r6, #0]
 8012340:	4620      	mov	r0, r4
 8012342:	b002      	add	sp, #8
 8012344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012348:	240b      	movs	r4, #11
 801234a:	4620      	mov	r0, r4
 801234c:	b002      	add	sp, #8
 801234e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012352:	bf00      	nop

08012354 <rcutils_string_map_getn>:
 8012354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012358:	b300      	cbz	r0, 801239c <rcutils_string_map_getn+0x48>
 801235a:	6807      	ldr	r7, [r0, #0]
 801235c:	b1ff      	cbz	r7, 801239e <rcutils_string_map_getn+0x4a>
 801235e:	4688      	mov	r8, r1
 8012360:	b1e1      	cbz	r1, 801239c <rcutils_string_map_getn+0x48>
 8012362:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012366:	683e      	ldr	r6, [r7, #0]
 8012368:	f1ba 0f00 	cmp.w	sl, #0
 801236c:	d016      	beq.n	801239c <rcutils_string_map_getn+0x48>
 801236e:	4691      	mov	r9, r2
 8012370:	3e04      	subs	r6, #4
 8012372:	2400      	movs	r4, #0
 8012374:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8012378:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801237c:	4628      	mov	r0, r5
 801237e:	3401      	adds	r4, #1
 8012380:	b155      	cbz	r5, 8012398 <rcutils_string_map_getn+0x44>
 8012382:	f7ed ff37 	bl	80001f4 <strlen>
 8012386:	4548      	cmp	r0, r9
 8012388:	4602      	mov	r2, r0
 801238a:	4629      	mov	r1, r5
 801238c:	bf38      	it	cc
 801238e:	464a      	movcc	r2, r9
 8012390:	4640      	mov	r0, r8
 8012392:	f004 f94a 	bl	801662a <strncmp>
 8012396:	b128      	cbz	r0, 80123a4 <rcutils_string_map_getn+0x50>
 8012398:	45a2      	cmp	sl, r4
 801239a:	d1eb      	bne.n	8012374 <rcutils_string_map_getn+0x20>
 801239c:	2700      	movs	r7, #0
 801239e:	4638      	mov	r0, r7
 80123a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f853 700b 	ldr.w	r7, [r3, fp]
 80123aa:	4638      	mov	r0, r7
 80123ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080123b0 <rmw_get_zero_initialized_context>:
 80123b0:	b510      	push	{r4, lr}
 80123b2:	4604      	mov	r4, r0
 80123b4:	3010      	adds	r0, #16
 80123b6:	f000 f80b 	bl	80123d0 <rmw_get_zero_initialized_init_options>
 80123ba:	2300      	movs	r3, #0
 80123bc:	2000      	movs	r0, #0
 80123be:	2100      	movs	r1, #0
 80123c0:	e9c4 0100 	strd	r0, r1, [r4]
 80123c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80123c8:	60a3      	str	r3, [r4, #8]
 80123ca:	4620      	mov	r0, r4
 80123cc:	bd10      	pop	{r4, pc}
 80123ce:	bf00      	nop

080123d0 <rmw_get_zero_initialized_init_options>:
 80123d0:	b510      	push	{r4, lr}
 80123d2:	2238      	movs	r2, #56	@ 0x38
 80123d4:	4604      	mov	r4, r0
 80123d6:	2100      	movs	r1, #0
 80123d8:	f004 f912 	bl	8016600 <memset>
 80123dc:	f104 0010 	add.w	r0, r4, #16
 80123e0:	f000 f806 	bl	80123f0 <rmw_get_default_security_options>
 80123e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80123e8:	60e3      	str	r3, [r4, #12]
 80123ea:	4620      	mov	r0, r4
 80123ec:	bd10      	pop	{r4, pc}
 80123ee:	bf00      	nop

080123f0 <rmw_get_default_security_options>:
 80123f0:	2200      	movs	r2, #0
 80123f2:	7002      	strb	r2, [r0, #0]
 80123f4:	6042      	str	r2, [r0, #4]
 80123f6:	4770      	bx	lr

080123f8 <rmw_subscription_content_filter_options_fini>:
 80123f8:	b1b0      	cbz	r0, 8012428 <rmw_subscription_content_filter_options_fini+0x30>
 80123fa:	b538      	push	{r3, r4, r5, lr}
 80123fc:	4604      	mov	r4, r0
 80123fe:	4608      	mov	r0, r1
 8012400:	460d      	mov	r5, r1
 8012402:	f7f9 f9f9 	bl	800b7f8 <rcutils_allocator_is_valid>
 8012406:	b168      	cbz	r0, 8012424 <rmw_subscription_content_filter_options_fini+0x2c>
 8012408:	6820      	ldr	r0, [r4, #0]
 801240a:	b120      	cbz	r0, 8012416 <rmw_subscription_content_filter_options_fini+0x1e>
 801240c:	686b      	ldr	r3, [r5, #4]
 801240e:	6929      	ldr	r1, [r5, #16]
 8012410:	4798      	blx	r3
 8012412:	2300      	movs	r3, #0
 8012414:	6023      	str	r3, [r4, #0]
 8012416:	1d20      	adds	r0, r4, #4
 8012418:	f003 fbd0 	bl	8015bbc <rcutils_string_array_fini>
 801241c:	3800      	subs	r0, #0
 801241e:	bf18      	it	ne
 8012420:	2001      	movne	r0, #1
 8012422:	bd38      	pop	{r3, r4, r5, pc}
 8012424:	200b      	movs	r0, #11
 8012426:	bd38      	pop	{r3, r4, r5, pc}
 8012428:	200b      	movs	r0, #11
 801242a:	4770      	bx	lr

0801242c <rmw_get_default_subscription_options>:
 801242c:	2200      	movs	r2, #0
 801242e:	e9c0 2200 	strd	r2, r2, [r0]
 8012432:	6082      	str	r2, [r0, #8]
 8012434:	4770      	bx	lr
 8012436:	bf00      	nop

08012438 <rmw_time_equal>:
 8012438:	b4f0      	push	{r4, r5, r6, r7}
 801243a:	b084      	sub	sp, #16
 801243c:	ac04      	add	r4, sp, #16
 801243e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012442:	4603      	mov	r3, r0
 8012444:	4924      	ldr	r1, [pc, #144]	@ (80124d8 <rmw_time_equal+0xa0>)
 8012446:	9e03      	ldr	r6, [sp, #12]
 8012448:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801244c:	2202      	movs	r2, #2
 801244e:	4299      	cmp	r1, r3
 8012450:	41aa      	sbcs	r2, r5
 8012452:	d330      	bcc.n	80124b6 <rmw_time_equal+0x7e>
 8012454:	4c21      	ldr	r4, [pc, #132]	@ (80124dc <rmw_time_equal+0xa4>)
 8012456:	fba3 3204 	umull	r3, r2, r3, r4
 801245a:	fb04 2205 	mla	r2, r4, r5, r2
 801245e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012462:	43dd      	mvns	r5, r3
 8012464:	1a8c      	subs	r4, r1, r2
 8012466:	4285      	cmp	r5, r0
 8012468:	41b4      	sbcs	r4, r6
 801246a:	d332      	bcc.n	80124d2 <rmw_time_equal+0x9a>
 801246c:	eb10 0c03 	adds.w	ip, r0, r3
 8012470:	eb42 0106 	adc.w	r1, r2, r6
 8012474:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8012478:	4817      	ldr	r0, [pc, #92]	@ (80124d8 <rmw_time_equal+0xa0>)
 801247a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801247c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801247e:	2202      	movs	r2, #2
 8012480:	4298      	cmp	r0, r3
 8012482:	41b2      	sbcs	r2, r6
 8012484:	d31c      	bcc.n	80124c0 <rmw_time_equal+0x88>
 8012486:	4c15      	ldr	r4, [pc, #84]	@ (80124dc <rmw_time_equal+0xa4>)
 8012488:	fba3 3204 	umull	r3, r2, r3, r4
 801248c:	fb04 2206 	mla	r2, r4, r6, r2
 8012490:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012494:	43de      	mvns	r6, r3
 8012496:	1a84      	subs	r4, r0, r2
 8012498:	42ae      	cmp	r6, r5
 801249a:	41bc      	sbcs	r4, r7
 801249c:	d315      	bcc.n	80124ca <rmw_time_equal+0x92>
 801249e:	195b      	adds	r3, r3, r5
 80124a0:	eb42 0207 	adc.w	r2, r2, r7
 80124a4:	428a      	cmp	r2, r1
 80124a6:	bf08      	it	eq
 80124a8:	4563      	cmpeq	r3, ip
 80124aa:	bf0c      	ite	eq
 80124ac:	2001      	moveq	r0, #1
 80124ae:	2000      	movne	r0, #0
 80124b0:	b004      	add	sp, #16
 80124b2:	bcf0      	pop	{r4, r5, r6, r7}
 80124b4:	4770      	bx	lr
 80124b6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80124ba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80124be:	e7d9      	b.n	8012474 <rmw_time_equal+0x3c>
 80124c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80124c4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80124c8:	e7ec      	b.n	80124a4 <rmw_time_equal+0x6c>
 80124ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80124ce:	4602      	mov	r2, r0
 80124d0:	e7e8      	b.n	80124a4 <rmw_time_equal+0x6c>
 80124d2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80124d6:	e7cd      	b.n	8012474 <rmw_time_equal+0x3c>
 80124d8:	25c17d04 	.word	0x25c17d04
 80124dc:	3b9aca00 	.word	0x3b9aca00

080124e0 <rmw_time_total_nsec>:
 80124e0:	b470      	push	{r4, r5, r6}
 80124e2:	b085      	sub	sp, #20
 80124e4:	ac04      	add	r4, sp, #16
 80124e6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80124ea:	4603      	mov	r3, r0
 80124ec:	4912      	ldr	r1, [pc, #72]	@ (8012538 <rmw_time_total_nsec+0x58>)
 80124ee:	9e03      	ldr	r6, [sp, #12]
 80124f0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80124f4:	2202      	movs	r2, #2
 80124f6:	4299      	cmp	r1, r3
 80124f8:	41aa      	sbcs	r2, r5
 80124fa:	d311      	bcc.n	8012520 <rmw_time_total_nsec+0x40>
 80124fc:	4c0f      	ldr	r4, [pc, #60]	@ (801253c <rmw_time_total_nsec+0x5c>)
 80124fe:	fba3 3204 	umull	r3, r2, r3, r4
 8012502:	fb04 2205 	mla	r2, r4, r5, r2
 8012506:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801250a:	43dd      	mvns	r5, r3
 801250c:	1a8c      	subs	r4, r1, r2
 801250e:	4285      	cmp	r5, r0
 8012510:	41b4      	sbcs	r4, r6
 8012512:	d30c      	bcc.n	801252e <rmw_time_total_nsec+0x4e>
 8012514:	1818      	adds	r0, r3, r0
 8012516:	eb42 0106 	adc.w	r1, r2, r6
 801251a:	b005      	add	sp, #20
 801251c:	bc70      	pop	{r4, r5, r6}
 801251e:	4770      	bx	lr
 8012520:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012524:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012528:	b005      	add	sp, #20
 801252a:	bc70      	pop	{r4, r5, r6}
 801252c:	4770      	bx	lr
 801252e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012532:	b005      	add	sp, #20
 8012534:	bc70      	pop	{r4, r5, r6}
 8012536:	4770      	bx	lr
 8012538:	25c17d04 	.word	0x25c17d04
 801253c:	3b9aca00 	.word	0x3b9aca00

08012540 <rmw_get_zero_initialized_message_info>:
 8012540:	b510      	push	{r4, lr}
 8012542:	2240      	movs	r2, #64	@ 0x40
 8012544:	4604      	mov	r4, r0
 8012546:	2100      	movs	r1, #0
 8012548:	f004 f85a 	bl	8016600 <memset>
 801254c:	4620      	mov	r0, r4
 801254e:	bd10      	pop	{r4, pc}

08012550 <rmw_validate_full_topic_name>:
 8012550:	2800      	cmp	r0, #0
 8012552:	d057      	beq.n	8012604 <rmw_validate_full_topic_name+0xb4>
 8012554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012558:	460d      	mov	r5, r1
 801255a:	2900      	cmp	r1, #0
 801255c:	d054      	beq.n	8012608 <rmw_validate_full_topic_name+0xb8>
 801255e:	4616      	mov	r6, r2
 8012560:	4604      	mov	r4, r0
 8012562:	f7ed fe47 	bl	80001f4 <strlen>
 8012566:	b148      	cbz	r0, 801257c <rmw_validate_full_topic_name+0x2c>
 8012568:	7823      	ldrb	r3, [r4, #0]
 801256a:	2b2f      	cmp	r3, #47	@ 0x2f
 801256c:	d00d      	beq.n	801258a <rmw_validate_full_topic_name+0x3a>
 801256e:	2302      	movs	r3, #2
 8012570:	602b      	str	r3, [r5, #0]
 8012572:	b13e      	cbz	r6, 8012584 <rmw_validate_full_topic_name+0x34>
 8012574:	2000      	movs	r0, #0
 8012576:	6030      	str	r0, [r6, #0]
 8012578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801257c:	2301      	movs	r3, #1
 801257e:	602b      	str	r3, [r5, #0]
 8012580:	2e00      	cmp	r6, #0
 8012582:	d1f7      	bne.n	8012574 <rmw_validate_full_topic_name+0x24>
 8012584:	2000      	movs	r0, #0
 8012586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801258a:	1e43      	subs	r3, r0, #1
 801258c:	5ce2      	ldrb	r2, [r4, r3]
 801258e:	2a2f      	cmp	r2, #47	@ 0x2f
 8012590:	d03c      	beq.n	801260c <rmw_validate_full_topic_name+0xbc>
 8012592:	1e63      	subs	r3, r4, #1
 8012594:	eb03 0800 	add.w	r8, r3, r0
 8012598:	f1c4 0e01 	rsb	lr, r4, #1
 801259c:	eb0e 0703 	add.w	r7, lr, r3
 80125a0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80125a4:	f021 0220 	bic.w	r2, r1, #32
 80125a8:	3a41      	subs	r2, #65	@ 0x41
 80125aa:	2a19      	cmp	r2, #25
 80125ac:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80125b0:	d90b      	bls.n	80125ca <rmw_validate_full_topic_name+0x7a>
 80125b2:	295f      	cmp	r1, #95	@ 0x5f
 80125b4:	d009      	beq.n	80125ca <rmw_validate_full_topic_name+0x7a>
 80125b6:	f1bc 0f0a 	cmp.w	ip, #10
 80125ba:	d906      	bls.n	80125ca <rmw_validate_full_topic_name+0x7a>
 80125bc:	2304      	movs	r3, #4
 80125be:	602b      	str	r3, [r5, #0]
 80125c0:	2e00      	cmp	r6, #0
 80125c2:	d0df      	beq.n	8012584 <rmw_validate_full_topic_name+0x34>
 80125c4:	6037      	str	r7, [r6, #0]
 80125c6:	2000      	movs	r0, #0
 80125c8:	e7d6      	b.n	8012578 <rmw_validate_full_topic_name+0x28>
 80125ca:	4543      	cmp	r3, r8
 80125cc:	d1e6      	bne.n	801259c <rmw_validate_full_topic_name+0x4c>
 80125ce:	4f1a      	ldr	r7, [pc, #104]	@ (8012638 <rmw_validate_full_topic_name+0xe8>)
 80125d0:	2301      	movs	r3, #1
 80125d2:	e004      	b.n	80125de <rmw_validate_full_topic_name+0x8e>
 80125d4:	4298      	cmp	r0, r3
 80125d6:	f104 0401 	add.w	r4, r4, #1
 80125da:	d91c      	bls.n	8012616 <rmw_validate_full_topic_name+0xc6>
 80125dc:	4613      	mov	r3, r2
 80125de:	4298      	cmp	r0, r3
 80125e0:	f103 0201 	add.w	r2, r3, #1
 80125e4:	d0f6      	beq.n	80125d4 <rmw_validate_full_topic_name+0x84>
 80125e6:	7821      	ldrb	r1, [r4, #0]
 80125e8:	292f      	cmp	r1, #47	@ 0x2f
 80125ea:	d1f3      	bne.n	80125d4 <rmw_validate_full_topic_name+0x84>
 80125ec:	7861      	ldrb	r1, [r4, #1]
 80125ee:	292f      	cmp	r1, #47	@ 0x2f
 80125f0:	d01c      	beq.n	801262c <rmw_validate_full_topic_name+0xdc>
 80125f2:	5dc9      	ldrb	r1, [r1, r7]
 80125f4:	0749      	lsls	r1, r1, #29
 80125f6:	d5ed      	bpl.n	80125d4 <rmw_validate_full_topic_name+0x84>
 80125f8:	2206      	movs	r2, #6
 80125fa:	602a      	str	r2, [r5, #0]
 80125fc:	2e00      	cmp	r6, #0
 80125fe:	d0c1      	beq.n	8012584 <rmw_validate_full_topic_name+0x34>
 8012600:	6033      	str	r3, [r6, #0]
 8012602:	e7bf      	b.n	8012584 <rmw_validate_full_topic_name+0x34>
 8012604:	200b      	movs	r0, #11
 8012606:	4770      	bx	lr
 8012608:	200b      	movs	r0, #11
 801260a:	e7b5      	b.n	8012578 <rmw_validate_full_topic_name+0x28>
 801260c:	2203      	movs	r2, #3
 801260e:	602a      	str	r2, [r5, #0]
 8012610:	2e00      	cmp	r6, #0
 8012612:	d1f5      	bne.n	8012600 <rmw_validate_full_topic_name+0xb0>
 8012614:	e7b6      	b.n	8012584 <rmw_validate_full_topic_name+0x34>
 8012616:	28f7      	cmp	r0, #247	@ 0xf7
 8012618:	d802      	bhi.n	8012620 <rmw_validate_full_topic_name+0xd0>
 801261a:	2000      	movs	r0, #0
 801261c:	6028      	str	r0, [r5, #0]
 801261e:	e7ab      	b.n	8012578 <rmw_validate_full_topic_name+0x28>
 8012620:	2307      	movs	r3, #7
 8012622:	602b      	str	r3, [r5, #0]
 8012624:	2e00      	cmp	r6, #0
 8012626:	d0ad      	beq.n	8012584 <rmw_validate_full_topic_name+0x34>
 8012628:	23f6      	movs	r3, #246	@ 0xf6
 801262a:	e7e9      	b.n	8012600 <rmw_validate_full_topic_name+0xb0>
 801262c:	2205      	movs	r2, #5
 801262e:	602a      	str	r2, [r5, #0]
 8012630:	2e00      	cmp	r6, #0
 8012632:	d1e5      	bne.n	8012600 <rmw_validate_full_topic_name+0xb0>
 8012634:	e7a6      	b.n	8012584 <rmw_validate_full_topic_name+0x34>
 8012636:	bf00      	nop
 8012638:	0801837c 	.word	0x0801837c

0801263c <rmw_validate_namespace_with_size>:
 801263c:	b340      	cbz	r0, 8012690 <rmw_validate_namespace_with_size+0x54>
 801263e:	b570      	push	{r4, r5, r6, lr}
 8012640:	4614      	mov	r4, r2
 8012642:	b0c2      	sub	sp, #264	@ 0x108
 8012644:	b332      	cbz	r2, 8012694 <rmw_validate_namespace_with_size+0x58>
 8012646:	2901      	cmp	r1, #1
 8012648:	460d      	mov	r5, r1
 801264a:	461e      	mov	r6, r3
 801264c:	d102      	bne.n	8012654 <rmw_validate_namespace_with_size+0x18>
 801264e:	7803      	ldrb	r3, [r0, #0]
 8012650:	2b2f      	cmp	r3, #47	@ 0x2f
 8012652:	d012      	beq.n	801267a <rmw_validate_namespace_with_size+0x3e>
 8012654:	aa01      	add	r2, sp, #4
 8012656:	4669      	mov	r1, sp
 8012658:	f7ff ff7a 	bl	8012550 <rmw_validate_full_topic_name>
 801265c:	b978      	cbnz	r0, 801267e <rmw_validate_namespace_with_size+0x42>
 801265e:	9b00      	ldr	r3, [sp, #0]
 8012660:	b14b      	cbz	r3, 8012676 <rmw_validate_namespace_with_size+0x3a>
 8012662:	2b07      	cmp	r3, #7
 8012664:	d007      	beq.n	8012676 <rmw_validate_namespace_with_size+0x3a>
 8012666:	1e5a      	subs	r2, r3, #1
 8012668:	2a05      	cmp	r2, #5
 801266a:	d82b      	bhi.n	80126c4 <rmw_validate_namespace_with_size+0x88>
 801266c:	e8df f002 	tbb	[pc, r2]
 8012670:	1e212427 	.word	0x1e212427
 8012674:	141b      	.short	0x141b
 8012676:	2df5      	cmp	r5, #245	@ 0xf5
 8012678:	d803      	bhi.n	8012682 <rmw_validate_namespace_with_size+0x46>
 801267a:	2000      	movs	r0, #0
 801267c:	6020      	str	r0, [r4, #0]
 801267e:	b042      	add	sp, #264	@ 0x108
 8012680:	bd70      	pop	{r4, r5, r6, pc}
 8012682:	2307      	movs	r3, #7
 8012684:	6023      	str	r3, [r4, #0]
 8012686:	2e00      	cmp	r6, #0
 8012688:	d0f9      	beq.n	801267e <rmw_validate_namespace_with_size+0x42>
 801268a:	23f4      	movs	r3, #244	@ 0xf4
 801268c:	6033      	str	r3, [r6, #0]
 801268e:	e7f6      	b.n	801267e <rmw_validate_namespace_with_size+0x42>
 8012690:	200b      	movs	r0, #11
 8012692:	4770      	bx	lr
 8012694:	200b      	movs	r0, #11
 8012696:	e7f2      	b.n	801267e <rmw_validate_namespace_with_size+0x42>
 8012698:	2306      	movs	r3, #6
 801269a:	6023      	str	r3, [r4, #0]
 801269c:	2e00      	cmp	r6, #0
 801269e:	d0ee      	beq.n	801267e <rmw_validate_namespace_with_size+0x42>
 80126a0:	9b01      	ldr	r3, [sp, #4]
 80126a2:	6033      	str	r3, [r6, #0]
 80126a4:	e7eb      	b.n	801267e <rmw_validate_namespace_with_size+0x42>
 80126a6:	2305      	movs	r3, #5
 80126a8:	6023      	str	r3, [r4, #0]
 80126aa:	e7f7      	b.n	801269c <rmw_validate_namespace_with_size+0x60>
 80126ac:	2304      	movs	r3, #4
 80126ae:	6023      	str	r3, [r4, #0]
 80126b0:	e7f4      	b.n	801269c <rmw_validate_namespace_with_size+0x60>
 80126b2:	2303      	movs	r3, #3
 80126b4:	6023      	str	r3, [r4, #0]
 80126b6:	e7f1      	b.n	801269c <rmw_validate_namespace_with_size+0x60>
 80126b8:	2302      	movs	r3, #2
 80126ba:	6023      	str	r3, [r4, #0]
 80126bc:	e7ee      	b.n	801269c <rmw_validate_namespace_with_size+0x60>
 80126be:	2301      	movs	r3, #1
 80126c0:	6023      	str	r3, [r4, #0]
 80126c2:	e7eb      	b.n	801269c <rmw_validate_namespace_with_size+0x60>
 80126c4:	4a03      	ldr	r2, [pc, #12]	@ (80126d4 <rmw_validate_namespace_with_size+0x98>)
 80126c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80126ca:	a802      	add	r0, sp, #8
 80126cc:	f7ff fcda 	bl	8012084 <rcutils_snprintf>
 80126d0:	2001      	movs	r0, #1
 80126d2:	e7d4      	b.n	801267e <rmw_validate_namespace_with_size+0x42>
 80126d4:	08017d9c 	.word	0x08017d9c

080126d8 <rmw_validate_namespace>:
 80126d8:	b168      	cbz	r0, 80126f6 <rmw_validate_namespace+0x1e>
 80126da:	b570      	push	{r4, r5, r6, lr}
 80126dc:	460d      	mov	r5, r1
 80126de:	4616      	mov	r6, r2
 80126e0:	4604      	mov	r4, r0
 80126e2:	f7ed fd87 	bl	80001f4 <strlen>
 80126e6:	4633      	mov	r3, r6
 80126e8:	4601      	mov	r1, r0
 80126ea:	462a      	mov	r2, r5
 80126ec:	4620      	mov	r0, r4
 80126ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126f2:	f7ff bfa3 	b.w	801263c <rmw_validate_namespace_with_size>
 80126f6:	200b      	movs	r0, #11
 80126f8:	4770      	bx	lr
 80126fa:	bf00      	nop

080126fc <rmw_namespace_validation_result_string>:
 80126fc:	2807      	cmp	r0, #7
 80126fe:	bf9a      	itte	ls
 8012700:	4b02      	ldrls	r3, [pc, #8]	@ (801270c <rmw_namespace_validation_result_string+0x10>)
 8012702:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012706:	4802      	ldrhi	r0, [pc, #8]	@ (8012710 <rmw_namespace_validation_result_string+0x14>)
 8012708:	4770      	bx	lr
 801270a:	bf00      	nop
 801270c:	08017f94 	.word	0x08017f94
 8012710:	08017dec 	.word	0x08017dec

08012714 <rmw_validate_node_name>:
 8012714:	2800      	cmp	r0, #0
 8012716:	d03b      	beq.n	8012790 <rmw_validate_node_name+0x7c>
 8012718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801271c:	460d      	mov	r5, r1
 801271e:	2900      	cmp	r1, #0
 8012720:	d038      	beq.n	8012794 <rmw_validate_node_name+0x80>
 8012722:	4616      	mov	r6, r2
 8012724:	4604      	mov	r4, r0
 8012726:	f7ed fd65 	bl	80001f4 <strlen>
 801272a:	b1e0      	cbz	r0, 8012766 <rmw_validate_node_name+0x52>
 801272c:	1e63      	subs	r3, r4, #1
 801272e:	eb03 0800 	add.w	r8, r3, r0
 8012732:	f1c4 0101 	rsb	r1, r4, #1
 8012736:	18cf      	adds	r7, r1, r3
 8012738:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801273c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8012740:	f02e 0c20 	bic.w	ip, lr, #32
 8012744:	2a09      	cmp	r2, #9
 8012746:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801274a:	d914      	bls.n	8012776 <rmw_validate_node_name+0x62>
 801274c:	f1bc 0f19 	cmp.w	ip, #25
 8012750:	d911      	bls.n	8012776 <rmw_validate_node_name+0x62>
 8012752:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8012756:	d00e      	beq.n	8012776 <rmw_validate_node_name+0x62>
 8012758:	2302      	movs	r3, #2
 801275a:	602b      	str	r3, [r5, #0]
 801275c:	b106      	cbz	r6, 8012760 <rmw_validate_node_name+0x4c>
 801275e:	6037      	str	r7, [r6, #0]
 8012760:	2000      	movs	r0, #0
 8012762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012766:	2301      	movs	r3, #1
 8012768:	602b      	str	r3, [r5, #0]
 801276a:	2e00      	cmp	r6, #0
 801276c:	d0f8      	beq.n	8012760 <rmw_validate_node_name+0x4c>
 801276e:	2000      	movs	r0, #0
 8012770:	6030      	str	r0, [r6, #0]
 8012772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012776:	4543      	cmp	r3, r8
 8012778:	d1dd      	bne.n	8012736 <rmw_validate_node_name+0x22>
 801277a:	7822      	ldrb	r2, [r4, #0]
 801277c:	4b0d      	ldr	r3, [pc, #52]	@ (80127b4 <rmw_validate_node_name+0xa0>)
 801277e:	5cd3      	ldrb	r3, [r2, r3]
 8012780:	f013 0304 	ands.w	r3, r3, #4
 8012784:	d110      	bne.n	80127a8 <rmw_validate_node_name+0x94>
 8012786:	28ff      	cmp	r0, #255	@ 0xff
 8012788:	d806      	bhi.n	8012798 <rmw_validate_node_name+0x84>
 801278a:	602b      	str	r3, [r5, #0]
 801278c:	4618      	mov	r0, r3
 801278e:	e7e8      	b.n	8012762 <rmw_validate_node_name+0x4e>
 8012790:	200b      	movs	r0, #11
 8012792:	4770      	bx	lr
 8012794:	200b      	movs	r0, #11
 8012796:	e7e4      	b.n	8012762 <rmw_validate_node_name+0x4e>
 8012798:	2204      	movs	r2, #4
 801279a:	602a      	str	r2, [r5, #0]
 801279c:	2e00      	cmp	r6, #0
 801279e:	d0df      	beq.n	8012760 <rmw_validate_node_name+0x4c>
 80127a0:	22fe      	movs	r2, #254	@ 0xfe
 80127a2:	6032      	str	r2, [r6, #0]
 80127a4:	4618      	mov	r0, r3
 80127a6:	e7dc      	b.n	8012762 <rmw_validate_node_name+0x4e>
 80127a8:	2303      	movs	r3, #3
 80127aa:	602b      	str	r3, [r5, #0]
 80127ac:	2e00      	cmp	r6, #0
 80127ae:	d1de      	bne.n	801276e <rmw_validate_node_name+0x5a>
 80127b0:	e7d6      	b.n	8012760 <rmw_validate_node_name+0x4c>
 80127b2:	bf00      	nop
 80127b4:	0801837c 	.word	0x0801837c

080127b8 <rmw_node_name_validation_result_string>:
 80127b8:	2804      	cmp	r0, #4
 80127ba:	bf9a      	itte	ls
 80127bc:	4b02      	ldrls	r3, [pc, #8]	@ (80127c8 <rmw_node_name_validation_result_string+0x10>)
 80127be:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80127c2:	4802      	ldrhi	r0, [pc, #8]	@ (80127cc <rmw_node_name_validation_result_string+0x14>)
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop
 80127c8:	080180a0 	.word	0x080180a0
 80127cc:	08017fb4 	.word	0x08017fb4

080127d0 <get_memory>:
 80127d0:	4603      	mov	r3, r0
 80127d2:	6840      	ldr	r0, [r0, #4]
 80127d4:	b158      	cbz	r0, 80127ee <get_memory+0x1e>
 80127d6:	6842      	ldr	r2, [r0, #4]
 80127d8:	605a      	str	r2, [r3, #4]
 80127da:	b10a      	cbz	r2, 80127e0 <get_memory+0x10>
 80127dc:	2100      	movs	r1, #0
 80127de:	6011      	str	r1, [r2, #0]
 80127e0:	681a      	ldr	r2, [r3, #0]
 80127e2:	6042      	str	r2, [r0, #4]
 80127e4:	b102      	cbz	r2, 80127e8 <get_memory+0x18>
 80127e6:	6010      	str	r0, [r2, #0]
 80127e8:	2200      	movs	r2, #0
 80127ea:	6002      	str	r2, [r0, #0]
 80127ec:	6018      	str	r0, [r3, #0]
 80127ee:	4770      	bx	lr

080127f0 <put_memory>:
 80127f0:	680b      	ldr	r3, [r1, #0]
 80127f2:	b10b      	cbz	r3, 80127f8 <put_memory+0x8>
 80127f4:	684a      	ldr	r2, [r1, #4]
 80127f6:	605a      	str	r2, [r3, #4]
 80127f8:	684a      	ldr	r2, [r1, #4]
 80127fa:	b102      	cbz	r2, 80127fe <put_memory+0xe>
 80127fc:	6013      	str	r3, [r2, #0]
 80127fe:	6803      	ldr	r3, [r0, #0]
 8012800:	428b      	cmp	r3, r1
 8012802:	6843      	ldr	r3, [r0, #4]
 8012804:	bf08      	it	eq
 8012806:	6002      	streq	r2, [r0, #0]
 8012808:	604b      	str	r3, [r1, #4]
 801280a:	b103      	cbz	r3, 801280e <put_memory+0x1e>
 801280c:	6019      	str	r1, [r3, #0]
 801280e:	2300      	movs	r3, #0
 8012810:	600b      	str	r3, [r1, #0]
 8012812:	6041      	str	r1, [r0, #4]
 8012814:	4770      	bx	lr
 8012816:	bf00      	nop

08012818 <rmw_destroy_client>:
 8012818:	b570      	push	{r4, r5, r6, lr}
 801281a:	b128      	cbz	r0, 8012828 <rmw_destroy_client+0x10>
 801281c:	4604      	mov	r4, r0
 801281e:	6800      	ldr	r0, [r0, #0]
 8012820:	460d      	mov	r5, r1
 8012822:	f7f9 fd8f 	bl	800c344 <is_uxrce_rmw_identifier_valid>
 8012826:	b910      	cbnz	r0, 801282e <rmw_destroy_client+0x16>
 8012828:	2401      	movs	r4, #1
 801282a:	4620      	mov	r0, r4
 801282c:	bd70      	pop	{r4, r5, r6, pc}
 801282e:	6863      	ldr	r3, [r4, #4]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d0f9      	beq.n	8012828 <rmw_destroy_client+0x10>
 8012834:	2d00      	cmp	r5, #0
 8012836:	d0f7      	beq.n	8012828 <rmw_destroy_client+0x10>
 8012838:	6828      	ldr	r0, [r5, #0]
 801283a:	f7f9 fd83 	bl	800c344 <is_uxrce_rmw_identifier_valid>
 801283e:	2800      	cmp	r0, #0
 8012840:	d0f2      	beq.n	8012828 <rmw_destroy_client+0x10>
 8012842:	686e      	ldr	r6, [r5, #4]
 8012844:	2e00      	cmp	r6, #0
 8012846:	d0ef      	beq.n	8012828 <rmw_destroy_client+0x10>
 8012848:	6864      	ldr	r4, [r4, #4]
 801284a:	6932      	ldr	r2, [r6, #16]
 801284c:	6920      	ldr	r0, [r4, #16]
 801284e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012852:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012856:	6819      	ldr	r1, [r3, #0]
 8012858:	f002 f8ec 	bl	8014a34 <uxr_buffer_cancel_data>
 801285c:	4602      	mov	r2, r0
 801285e:	6920      	ldr	r0, [r4, #16]
 8012860:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012864:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012868:	f7f9 fcec 	bl	800c244 <run_xrce_session>
 801286c:	6920      	ldr	r0, [r4, #16]
 801286e:	6932      	ldr	r2, [r6, #16]
 8012870:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012874:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012878:	6819      	ldr	r1, [r3, #0]
 801287a:	f7f9 fe39 	bl	800c4f0 <uxr_buffer_delete_entity>
 801287e:	4602      	mov	r2, r0
 8012880:	6920      	ldr	r0, [r4, #16]
 8012882:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012886:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801288a:	f7f9 fcdb 	bl	800c244 <run_xrce_session>
 801288e:	2800      	cmp	r0, #0
 8012890:	4628      	mov	r0, r5
 8012892:	bf14      	ite	ne
 8012894:	2400      	movne	r4, #0
 8012896:	2402      	moveq	r4, #2
 8012898:	f7f9 fbbc 	bl	800c014 <rmw_uxrce_fini_client_memory>
 801289c:	e7c5      	b.n	801282a <rmw_destroy_client+0x12>
 801289e:	bf00      	nop

080128a0 <rmw_get_implementation_identifier>:
 80128a0:	4b01      	ldr	r3, [pc, #4]	@ (80128a8 <rmw_get_implementation_identifier+0x8>)
 80128a2:	6818      	ldr	r0, [r3, #0]
 80128a4:	4770      	bx	lr
 80128a6:	bf00      	nop
 80128a8:	080180cc 	.word	0x080180cc

080128ac <rmw_init_options_init>:
 80128ac:	b084      	sub	sp, #16
 80128ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128b0:	b083      	sub	sp, #12
 80128b2:	ad09      	add	r5, sp, #36	@ 0x24
 80128b4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80128b8:	b130      	cbz	r0, 80128c8 <rmw_init_options_init+0x1c>
 80128ba:	4604      	mov	r4, r0
 80128bc:	4628      	mov	r0, r5
 80128be:	f7f8 ff9b 	bl	800b7f8 <rcutils_allocator_is_valid>
 80128c2:	b108      	cbz	r0, 80128c8 <rmw_init_options_init+0x1c>
 80128c4:	68a6      	ldr	r6, [r4, #8]
 80128c6:	b12e      	cbz	r6, 80128d4 <rmw_init_options_init+0x28>
 80128c8:	200b      	movs	r0, #11
 80128ca:	b003      	add	sp, #12
 80128cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80128d0:	b004      	add	sp, #16
 80128d2:	4770      	bx	lr
 80128d4:	2200      	movs	r2, #0
 80128d6:	2300      	movs	r3, #0
 80128d8:	e9c4 2300 	strd	r2, r3, [r4]
 80128dc:	4b22      	ldr	r3, [pc, #136]	@ (8012968 <rmw_init_options_init+0xbc>)
 80128de:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8012978 <rmw_init_options_init+0xcc>
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	60a3      	str	r3, [r4, #8]
 80128e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80128e8:	f104 0c20 	add.w	ip, r4, #32
 80128ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128f0:	466f      	mov	r7, sp
 80128f2:	682b      	ldr	r3, [r5, #0]
 80128f4:	f8cc 3000 	str.w	r3, [ip]
 80128f8:	4638      	mov	r0, r7
 80128fa:	f8c4 e01c 	str.w	lr, [r4, #28]
 80128fe:	60e6      	str	r6, [r4, #12]
 8012900:	f7ff fd76 	bl	80123f0 <rmw_get_default_security_options>
 8012904:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012908:	f104 0310 	add.w	r3, r4, #16
 801290c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012910:	2203      	movs	r2, #3
 8012912:	4816      	ldr	r0, [pc, #88]	@ (801296c <rmw_init_options_init+0xc0>)
 8012914:	4916      	ldr	r1, [pc, #88]	@ (8012970 <rmw_init_options_init+0xc4>)
 8012916:	7626      	strb	r6, [r4, #24]
 8012918:	f7f9 fabc 	bl	800be94 <rmw_uxrce_init_init_options_impl_memory>
 801291c:	4813      	ldr	r0, [pc, #76]	@ (801296c <rmw_init_options_init+0xc0>)
 801291e:	f7ff ff57 	bl	80127d0 <get_memory>
 8012922:	b1f0      	cbz	r0, 8012962 <rmw_init_options_init+0xb6>
 8012924:	4a13      	ldr	r2, [pc, #76]	@ (8012974 <rmw_init_options_init+0xc8>)
 8012926:	6883      	ldr	r3, [r0, #8]
 8012928:	6851      	ldr	r1, [r2, #4]
 801292a:	7810      	ldrb	r0, [r2, #0]
 801292c:	6363      	str	r3, [r4, #52]	@ 0x34
 801292e:	7418      	strb	r0, [r3, #16]
 8012930:	6159      	str	r1, [r3, #20]
 8012932:	68d1      	ldr	r1, [r2, #12]
 8012934:	61d9      	str	r1, [r3, #28]
 8012936:	6911      	ldr	r1, [r2, #16]
 8012938:	6219      	str	r1, [r3, #32]
 801293a:	6951      	ldr	r1, [r2, #20]
 801293c:	6892      	ldr	r2, [r2, #8]
 801293e:	619a      	str	r2, [r3, #24]
 8012940:	6259      	str	r1, [r3, #36]	@ 0x24
 8012942:	f7fb fa31 	bl	800dda8 <uxr_nanos>
 8012946:	f003 fb93 	bl	8016070 <srand>
 801294a:	f003 fbbf 	bl	80160cc <rand>
 801294e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012950:	6298      	str	r0, [r3, #40]	@ 0x28
 8012952:	2800      	cmp	r0, #0
 8012954:	d0f9      	beq.n	801294a <rmw_init_options_init+0x9e>
 8012956:	2000      	movs	r0, #0
 8012958:	b003      	add	sp, #12
 801295a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801295e:	b004      	add	sp, #16
 8012960:	4770      	bx	lr
 8012962:	2001      	movs	r0, #1
 8012964:	e7b1      	b.n	80128ca <rmw_init_options_init+0x1e>
 8012966:	bf00      	nop
 8012968:	080180cc 	.word	0x080180cc
 801296c:	2000db94 	.word	0x2000db94
 8012970:	20009430 	.word	0x20009430
 8012974:	200092bc 	.word	0x200092bc
 8012978:	08017b34 	.word	0x08017b34

0801297c <rmw_init_options_copy>:
 801297c:	b570      	push	{r4, r5, r6, lr}
 801297e:	b158      	cbz	r0, 8012998 <rmw_init_options_copy+0x1c>
 8012980:	460d      	mov	r5, r1
 8012982:	b149      	cbz	r1, 8012998 <rmw_init_options_copy+0x1c>
 8012984:	4604      	mov	r4, r0
 8012986:	6880      	ldr	r0, [r0, #8]
 8012988:	b120      	cbz	r0, 8012994 <rmw_init_options_copy+0x18>
 801298a:	4b1e      	ldr	r3, [pc, #120]	@ (8012a04 <rmw_init_options_copy+0x88>)
 801298c:	6819      	ldr	r1, [r3, #0]
 801298e:	f7ed fc27 	bl	80001e0 <strcmp>
 8012992:	bb90      	cbnz	r0, 80129fa <rmw_init_options_copy+0x7e>
 8012994:	68ab      	ldr	r3, [r5, #8]
 8012996:	b113      	cbz	r3, 801299e <rmw_init_options_copy+0x22>
 8012998:	250b      	movs	r5, #11
 801299a:	4628      	mov	r0, r5
 801299c:	bd70      	pop	{r4, r5, r6, pc}
 801299e:	4623      	mov	r3, r4
 80129a0:	462a      	mov	r2, r5
 80129a2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80129a6:	f8d3 c000 	ldr.w	ip, [r3]
 80129aa:	6858      	ldr	r0, [r3, #4]
 80129ac:	6899      	ldr	r1, [r3, #8]
 80129ae:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80129b2:	f8c2 e00c 	str.w	lr, [r2, #12]
 80129b6:	3310      	adds	r3, #16
 80129b8:	42b3      	cmp	r3, r6
 80129ba:	f8c2 c000 	str.w	ip, [r2]
 80129be:	6050      	str	r0, [r2, #4]
 80129c0:	6091      	str	r1, [r2, #8]
 80129c2:	f102 0210 	add.w	r2, r2, #16
 80129c6:	d1ee      	bne.n	80129a6 <rmw_init_options_copy+0x2a>
 80129c8:	6819      	ldr	r1, [r3, #0]
 80129ca:	685b      	ldr	r3, [r3, #4]
 80129cc:	480e      	ldr	r0, [pc, #56]	@ (8012a08 <rmw_init_options_copy+0x8c>)
 80129ce:	6053      	str	r3, [r2, #4]
 80129d0:	6011      	str	r1, [r2, #0]
 80129d2:	f7ff fefd 	bl	80127d0 <get_memory>
 80129d6:	b198      	cbz	r0, 8012a00 <rmw_init_options_copy+0x84>
 80129d8:	6883      	ldr	r3, [r0, #8]
 80129da:	636b      	str	r3, [r5, #52]	@ 0x34
 80129dc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80129de:	f102 0c10 	add.w	ip, r2, #16
 80129e2:	f103 0410 	add.w	r4, r3, #16
 80129e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80129ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80129ec:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80129f0:	2500      	movs	r5, #0
 80129f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80129f6:	4628      	mov	r0, r5
 80129f8:	bd70      	pop	{r4, r5, r6, pc}
 80129fa:	250c      	movs	r5, #12
 80129fc:	4628      	mov	r0, r5
 80129fe:	bd70      	pop	{r4, r5, r6, pc}
 8012a00:	2501      	movs	r5, #1
 8012a02:	e7ca      	b.n	801299a <rmw_init_options_copy+0x1e>
 8012a04:	080180cc 	.word	0x080180cc
 8012a08:	2000db94 	.word	0x2000db94

08012a0c <rmw_init_options_fini>:
 8012a0c:	2800      	cmp	r0, #0
 8012a0e:	d03d      	beq.n	8012a8c <rmw_init_options_fini+0x80>
 8012a10:	b510      	push	{r4, lr}
 8012a12:	4604      	mov	r4, r0
 8012a14:	b08e      	sub	sp, #56	@ 0x38
 8012a16:	3020      	adds	r0, #32
 8012a18:	f7f8 feee 	bl	800b7f8 <rcutils_allocator_is_valid>
 8012a1c:	b360      	cbz	r0, 8012a78 <rmw_init_options_fini+0x6c>
 8012a1e:	68a0      	ldr	r0, [r4, #8]
 8012a20:	b120      	cbz	r0, 8012a2c <rmw_init_options_fini+0x20>
 8012a22:	4b1c      	ldr	r3, [pc, #112]	@ (8012a94 <rmw_init_options_fini+0x88>)
 8012a24:	6819      	ldr	r1, [r3, #0]
 8012a26:	f7ed fbdb 	bl	80001e0 <strcmp>
 8012a2a:	bb68      	cbnz	r0, 8012a88 <rmw_init_options_fini+0x7c>
 8012a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8012a98 <rmw_init_options_fini+0x8c>)
 8012a2e:	6819      	ldr	r1, [r3, #0]
 8012a30:	b331      	cbz	r1, 8012a80 <rmw_init_options_fini+0x74>
 8012a32:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8012a34:	e001      	b.n	8012a3a <rmw_init_options_fini+0x2e>
 8012a36:	6849      	ldr	r1, [r1, #4]
 8012a38:	b311      	cbz	r1, 8012a80 <rmw_init_options_fini+0x74>
 8012a3a:	688b      	ldr	r3, [r1, #8]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d1fa      	bne.n	8012a36 <rmw_init_options_fini+0x2a>
 8012a40:	4815      	ldr	r0, [pc, #84]	@ (8012a98 <rmw_init_options_fini+0x8c>)
 8012a42:	f7ff fed5 	bl	80127f0 <put_memory>
 8012a46:	4668      	mov	r0, sp
 8012a48:	f7ff fcc2 	bl	80123d0 <rmw_get_zero_initialized_init_options>
 8012a4c:	46ee      	mov	lr, sp
 8012a4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a52:	46a4      	mov	ip, r4
 8012a54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a68:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012a6c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012a70:	2300      	movs	r3, #0
 8012a72:	4618      	mov	r0, r3
 8012a74:	b00e      	add	sp, #56	@ 0x38
 8012a76:	bd10      	pop	{r4, pc}
 8012a78:	230b      	movs	r3, #11
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	b00e      	add	sp, #56	@ 0x38
 8012a7e:	bd10      	pop	{r4, pc}
 8012a80:	2301      	movs	r3, #1
 8012a82:	4618      	mov	r0, r3
 8012a84:	b00e      	add	sp, #56	@ 0x38
 8012a86:	bd10      	pop	{r4, pc}
 8012a88:	230c      	movs	r3, #12
 8012a8a:	e7f2      	b.n	8012a72 <rmw_init_options_fini+0x66>
 8012a8c:	230b      	movs	r3, #11
 8012a8e:	4618      	mov	r0, r3
 8012a90:	4770      	bx	lr
 8012a92:	bf00      	nop
 8012a94:	080180cc 	.word	0x080180cc
 8012a98:	2000db94 	.word	0x2000db94

08012a9c <rmw_init>:
 8012a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012aa0:	b083      	sub	sp, #12
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	f000 80d3 	beq.w	8012c4e <rmw_init+0x1b2>
 8012aa8:	460e      	mov	r6, r1
 8012aaa:	2900      	cmp	r1, #0
 8012aac:	f000 80cf 	beq.w	8012c4e <rmw_init+0x1b2>
 8012ab0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8012ab2:	4605      	mov	r5, r0
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	f000 80ca 	beq.w	8012c4e <rmw_init+0x1b2>
 8012aba:	4b78      	ldr	r3, [pc, #480]	@ (8012c9c <rmw_init+0x200>)
 8012abc:	6880      	ldr	r0, [r0, #8]
 8012abe:	681f      	ldr	r7, [r3, #0]
 8012ac0:	b128      	cbz	r0, 8012ace <rmw_init+0x32>
 8012ac2:	4639      	mov	r1, r7
 8012ac4:	f7ed fb8c 	bl	80001e0 <strcmp>
 8012ac8:	2800      	cmp	r0, #0
 8012aca:	f040 80ca 	bne.w	8012c62 <rmw_init+0x1c6>
 8012ace:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012ad2:	4c73      	ldr	r4, [pc, #460]	@ (8012ca0 <rmw_init+0x204>)
 8012ad4:	4973      	ldr	r1, [pc, #460]	@ (8012ca4 <rmw_init+0x208>)
 8012ad6:	4874      	ldr	r0, [pc, #464]	@ (8012ca8 <rmw_init+0x20c>)
 8012ad8:	60b7      	str	r7, [r6, #8]
 8012ada:	e9c6 2300 	strd	r2, r3, [r6]
 8012ade:	68eb      	ldr	r3, [r5, #12]
 8012ae0:	64b3      	str	r3, [r6, #72]	@ 0x48
 8012ae2:	2201      	movs	r2, #1
 8012ae4:	f7f9 f976 	bl	800bdd4 <rmw_uxrce_init_session_memory>
 8012ae8:	4620      	mov	r0, r4
 8012aea:	4970      	ldr	r1, [pc, #448]	@ (8012cac <rmw_init+0x210>)
 8012aec:	2204      	movs	r2, #4
 8012aee:	f7f9 f9b1 	bl	800be54 <rmw_uxrce_init_static_input_buffer_memory>
 8012af2:	f04f 0800 	mov.w	r8, #0
 8012af6:	486c      	ldr	r0, [pc, #432]	@ (8012ca8 <rmw_init+0x20c>)
 8012af8:	f884 800d 	strb.w	r8, [r4, #13]
 8012afc:	f7ff fe68 	bl	80127d0 <get_memory>
 8012b00:	2800      	cmp	r0, #0
 8012b02:	f000 80a9 	beq.w	8012c58 <rmw_init+0x1bc>
 8012b06:	6884      	ldr	r4, [r0, #8]
 8012b08:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8012b0a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8012b0c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8012b10:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012b14:	9101      	str	r1, [sp, #4]
 8012b16:	6a00      	ldr	r0, [r0, #32]
 8012b18:	9000      	str	r0, [sp, #0]
 8012b1a:	f104 0910 	add.w	r9, r4, #16
 8012b1e:	4661      	mov	r1, ip
 8012b20:	4648      	mov	r0, r9
 8012b22:	f001 f9bf 	bl	8013ea4 <uxr_set_custom_transport_callbacks>
 8012b26:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8012b2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012b2e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8012b32:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8012b36:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8012b3a:	495d      	ldr	r1, [pc, #372]	@ (8012cb0 <rmw_init+0x214>)
 8012b3c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8012b40:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8012b44:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8012b48:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8012b4c:	4859      	ldr	r0, [pc, #356]	@ (8012cb4 <rmw_init+0x218>)
 8012b4e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8012b52:	2201      	movs	r2, #1
 8012b54:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8012b56:	f7f9 f91d 	bl	800bd94 <rmw_uxrce_init_node_memory>
 8012b5a:	4957      	ldr	r1, [pc, #348]	@ (8012cb8 <rmw_init+0x21c>)
 8012b5c:	4857      	ldr	r0, [pc, #348]	@ (8012cbc <rmw_init+0x220>)
 8012b5e:	2205      	movs	r2, #5
 8012b60:	f7f9 f8f8 	bl	800bd54 <rmw_uxrce_init_subscription_memory>
 8012b64:	4956      	ldr	r1, [pc, #344]	@ (8012cc0 <rmw_init+0x224>)
 8012b66:	4857      	ldr	r0, [pc, #348]	@ (8012cc4 <rmw_init+0x228>)
 8012b68:	220a      	movs	r2, #10
 8012b6a:	f7f9 f8d3 	bl	800bd14 <rmw_uxrce_init_publisher_memory>
 8012b6e:	4956      	ldr	r1, [pc, #344]	@ (8012cc8 <rmw_init+0x22c>)
 8012b70:	4856      	ldr	r0, [pc, #344]	@ (8012ccc <rmw_init+0x230>)
 8012b72:	2201      	movs	r2, #1
 8012b74:	f7f9 f88e 	bl	800bc94 <rmw_uxrce_init_service_memory>
 8012b78:	4955      	ldr	r1, [pc, #340]	@ (8012cd0 <rmw_init+0x234>)
 8012b7a:	4856      	ldr	r0, [pc, #344]	@ (8012cd4 <rmw_init+0x238>)
 8012b7c:	2201      	movs	r2, #1
 8012b7e:	f7f9 f8a9 	bl	800bcd4 <rmw_uxrce_init_client_memory>
 8012b82:	4955      	ldr	r1, [pc, #340]	@ (8012cd8 <rmw_init+0x23c>)
 8012b84:	4855      	ldr	r0, [pc, #340]	@ (8012cdc <rmw_init+0x240>)
 8012b86:	220f      	movs	r2, #15
 8012b88:	f7f9 f944 	bl	800be14 <rmw_uxrce_init_topic_memory>
 8012b8c:	4954      	ldr	r1, [pc, #336]	@ (8012ce0 <rmw_init+0x244>)
 8012b8e:	4855      	ldr	r0, [pc, #340]	@ (8012ce4 <rmw_init+0x248>)
 8012b90:	2203      	movs	r2, #3
 8012b92:	f7f9 f97f 	bl	800be94 <rmw_uxrce_init_init_options_impl_memory>
 8012b96:	4954      	ldr	r1, [pc, #336]	@ (8012ce8 <rmw_init+0x24c>)
 8012b98:	4854      	ldr	r0, [pc, #336]	@ (8012cec <rmw_init+0x250>)
 8012b9a:	2204      	movs	r2, #4
 8012b9c:	f7f9 f99a 	bl	800bed4 <rmw_uxrce_init_wait_set_memory>
 8012ba0:	4953      	ldr	r1, [pc, #332]	@ (8012cf0 <rmw_init+0x254>)
 8012ba2:	4854      	ldr	r0, [pc, #336]	@ (8012cf4 <rmw_init+0x258>)
 8012ba4:	2204      	movs	r2, #4
 8012ba6:	f7f9 f9b5 	bl	800bf14 <rmw_uxrce_init_guard_condition_memory>
 8012baa:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8012bac:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8012bae:	4642      	mov	r2, r8
 8012bb0:	f000 fd9e 	bl	80136f0 <rmw_uxrce_transport_init>
 8012bb4:	4607      	mov	r7, r0
 8012bb6:	2800      	cmp	r0, #0
 8012bb8:	d158      	bne.n	8012c6c <rmw_init+0x1d0>
 8012bba:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8012bbc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8012bc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012bc2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8012bc6:	4628      	mov	r0, r5
 8012bc8:	f7f9 ff52 	bl	800ca70 <uxr_init_session>
 8012bcc:	494a      	ldr	r1, [pc, #296]	@ (8012cf8 <rmw_init+0x25c>)
 8012bce:	4622      	mov	r2, r4
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	f7f9 ff71 	bl	800cab8 <uxr_set_topic_callback>
 8012bd6:	4949      	ldr	r1, [pc, #292]	@ (8012cfc <rmw_init+0x260>)
 8012bd8:	463a      	mov	r2, r7
 8012bda:	4628      	mov	r0, r5
 8012bdc:	f7f9 ff68 	bl	800cab0 <uxr_set_status_callback>
 8012be0:	4947      	ldr	r1, [pc, #284]	@ (8012d00 <rmw_init+0x264>)
 8012be2:	463a      	mov	r2, r7
 8012be4:	4628      	mov	r0, r5
 8012be6:	f7f9 ff6b 	bl	800cac0 <uxr_set_request_callback>
 8012bea:	4946      	ldr	r1, [pc, #280]	@ (8012d04 <rmw_init+0x268>)
 8012bec:	463a      	mov	r2, r7
 8012bee:	4628      	mov	r0, r5
 8012bf0:	f7f9 ff6a 	bl	800cac8 <uxr_set_reply_callback>
 8012bf4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012bf8:	2304      	movs	r3, #4
 8012bfa:	0092      	lsls	r2, r2, #2
 8012bfc:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8012c00:	4628      	mov	r0, r5
 8012c02:	f7f9 ff9f 	bl	800cb44 <uxr_create_input_reliable_stream>
 8012c06:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012c0a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8012c0e:	0092      	lsls	r2, r2, #2
 8012c10:	2304      	movs	r3, #4
 8012c12:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8012c16:	4628      	mov	r0, r5
 8012c18:	f7f9 ff6c 	bl	800caf4 <uxr_create_output_reliable_stream>
 8012c1c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8012c20:	4628      	mov	r0, r5
 8012c22:	f7f9 ff89 	bl	800cb38 <uxr_create_input_best_effort_stream>
 8012c26:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8012c2a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8012c2e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012c32:	3114      	adds	r1, #20
 8012c34:	4628      	mov	r0, r5
 8012c36:	f7f9 ff4b 	bl	800cad0 <uxr_create_output_best_effort_stream>
 8012c3a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8012c3e:	4628      	mov	r0, r5
 8012c40:	f7fa fcd6 	bl	800d5f0 <uxr_create_session>
 8012c44:	b1f8      	cbz	r0, 8012c86 <rmw_init+0x1ea>
 8012c46:	4638      	mov	r0, r7
 8012c48:	b003      	add	sp, #12
 8012c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c4e:	270b      	movs	r7, #11
 8012c50:	4638      	mov	r0, r7
 8012c52:	b003      	add	sp, #12
 8012c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c58:	2701      	movs	r7, #1
 8012c5a:	4638      	mov	r0, r7
 8012c5c:	b003      	add	sp, #12
 8012c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c62:	270c      	movs	r7, #12
 8012c64:	4638      	mov	r0, r7
 8012c66:	b003      	add	sp, #12
 8012c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c6c:	4648      	mov	r0, r9
 8012c6e:	f001 f95b 	bl	8013f28 <uxr_close_custom_transport>
 8012c72:	480d      	ldr	r0, [pc, #52]	@ (8012ca8 <rmw_init+0x20c>)
 8012c74:	4621      	mov	r1, r4
 8012c76:	f7ff fdbb 	bl	80127f0 <put_memory>
 8012c7a:	4638      	mov	r0, r7
 8012c7c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8012c80:	b003      	add	sp, #12
 8012c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c86:	4648      	mov	r0, r9
 8012c88:	f001 f94e 	bl	8013f28 <uxr_close_custom_transport>
 8012c8c:	4806      	ldr	r0, [pc, #24]	@ (8012ca8 <rmw_init+0x20c>)
 8012c8e:	4621      	mov	r1, r4
 8012c90:	f7ff fdae 	bl	80127f0 <put_memory>
 8012c94:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8012c96:	2701      	movs	r7, #1
 8012c98:	e7d5      	b.n	8012c46 <rmw_init+0x1aa>
 8012c9a:	bf00      	nop
 8012c9c:	080180cc 	.word	0x080180cc
 8012ca0:	2000dbe4 	.word	0x2000dbe4
 8012ca4:	20009e90 	.word	0x20009e90
 8012ca8:	2000dbd4 	.word	0x2000dbd4
 8012cac:	2000b438 	.word	0x2000b438
 8012cb0:	200094b4 	.word	0x200094b4
 8012cb4:	2000dba4 	.word	0x2000dba4
 8012cb8:	2000d538 	.word	0x2000d538
 8012cbc:	2000dbf4 	.word	0x2000dbf4
 8012cc0:	20009558 	.word	0x20009558
 8012cc4:	2000dbb4 	.word	0x2000dbb4
 8012cc8:	20009dc8 	.word	0x20009dc8
 8012ccc:	2000dbc4 	.word	0x2000dbc4
 8012cd0:	200092e8 	.word	0x200092e8
 8012cd4:	200092d8 	.word	0x200092d8
 8012cd8:	2000d970 	.word	0x2000d970
 8012cdc:	2000dc04 	.word	0x2000dc04
 8012ce0:	20009430 	.word	0x20009430
 8012ce4:	2000db94 	.word	0x2000db94
 8012ce8:	2000db14 	.word	0x2000db14
 8012cec:	2000dc14 	.word	0x2000dc14
 8012cf0:	200093b0 	.word	0x200093b0
 8012cf4:	2000db84 	.word	0x2000db84
 8012cf8:	08015c15 	.word	0x08015c15
 8012cfc:	08015c0d 	.word	0x08015c0d
 8012d00:	08015cad 	.word	0x08015cad
 8012d04:	08015d49 	.word	0x08015d49

08012d08 <rmw_context_fini>:
 8012d08:	4b17      	ldr	r3, [pc, #92]	@ (8012d68 <rmw_context_fini+0x60>)
 8012d0a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8012d0c:	b570      	push	{r4, r5, r6, lr}
 8012d0e:	681c      	ldr	r4, [r3, #0]
 8012d10:	4605      	mov	r5, r0
 8012d12:	b334      	cbz	r4, 8012d62 <rmw_context_fini+0x5a>
 8012d14:	2600      	movs	r6, #0
 8012d16:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8012d1a:	6902      	ldr	r2, [r0, #16]
 8012d1c:	428a      	cmp	r2, r1
 8012d1e:	d018      	beq.n	8012d52 <rmw_context_fini+0x4a>
 8012d20:	2c00      	cmp	r4, #0
 8012d22:	d1f8      	bne.n	8012d16 <rmw_context_fini+0xe>
 8012d24:	b189      	cbz	r1, 8012d4a <rmw_context_fini+0x42>
 8012d26:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8012d2a:	789b      	ldrb	r3, [r3, #2]
 8012d2c:	2b01      	cmp	r3, #1
 8012d2e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8012d32:	bf14      	ite	ne
 8012d34:	210a      	movne	r1, #10
 8012d36:	2100      	moveq	r1, #0
 8012d38:	f7fa fc32 	bl	800d5a0 <uxr_delete_session_retries>
 8012d3c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8012d3e:	f7f9 f909 	bl	800bf54 <rmw_uxrce_fini_session_memory>
 8012d42:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8012d44:	3010      	adds	r0, #16
 8012d46:	f001 f8ef 	bl	8013f28 <uxr_close_custom_transport>
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8012d4e:	4630      	mov	r0, r6
 8012d50:	bd70      	pop	{r4, r5, r6, pc}
 8012d52:	3018      	adds	r0, #24
 8012d54:	f000 f90e 	bl	8012f74 <rmw_destroy_node>
 8012d58:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8012d5a:	4606      	mov	r6, r0
 8012d5c:	2c00      	cmp	r4, #0
 8012d5e:	d1da      	bne.n	8012d16 <rmw_context_fini+0xe>
 8012d60:	e7e0      	b.n	8012d24 <rmw_context_fini+0x1c>
 8012d62:	4626      	mov	r6, r4
 8012d64:	e7de      	b.n	8012d24 <rmw_context_fini+0x1c>
 8012d66:	bf00      	nop
 8012d68:	2000dba4 	.word	0x2000dba4

08012d6c <create_topic>:
 8012d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d70:	4605      	mov	r5, r0
 8012d72:	b084      	sub	sp, #16
 8012d74:	4822      	ldr	r0, [pc, #136]	@ (8012e00 <create_topic+0x94>)
 8012d76:	460f      	mov	r7, r1
 8012d78:	4616      	mov	r6, r2
 8012d7a:	f7ff fd29 	bl	80127d0 <get_memory>
 8012d7e:	4604      	mov	r4, r0
 8012d80:	2800      	cmp	r0, #0
 8012d82:	d039      	beq.n	8012df8 <create_topic+0x8c>
 8012d84:	692b      	ldr	r3, [r5, #16]
 8012d86:	6884      	ldr	r4, [r0, #8]
 8012d88:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8012e08 <create_topic+0x9c>
 8012d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012d90:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8012d94:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8012d98:	1c42      	adds	r2, r0, #1
 8012d9a:	2102      	movs	r1, #2
 8012d9c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8012da0:	f7f9 fda8 	bl	800c8f4 <uxr_object_id>
 8012da4:	223c      	movs	r2, #60	@ 0x3c
 8012da6:	6120      	str	r0, [r4, #16]
 8012da8:	4641      	mov	r1, r8
 8012daa:	4638      	mov	r0, r7
 8012dac:	f7f9 fab0 	bl	800c310 <generate_topic_name>
 8012db0:	b1f0      	cbz	r0, 8012df0 <create_topic+0x84>
 8012db2:	4f14      	ldr	r7, [pc, #80]	@ (8012e04 <create_topic+0x98>)
 8012db4:	4630      	mov	r0, r6
 8012db6:	2264      	movs	r2, #100	@ 0x64
 8012db8:	4639      	mov	r1, r7
 8012dba:	f7f9 fa79 	bl	800c2b0 <generate_type_name>
 8012dbe:	b1b8      	cbz	r0, 8012df0 <create_topic+0x84>
 8012dc0:	6928      	ldr	r0, [r5, #16]
 8012dc2:	2306      	movs	r3, #6
 8012dc4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8012dc8:	f8cd 8000 	str.w	r8, [sp]
 8012dcc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8012dd0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012dd4:	6811      	ldr	r1, [r2, #0]
 8012dd6:	696b      	ldr	r3, [r5, #20]
 8012dd8:	6922      	ldr	r2, [r4, #16]
 8012dda:	f7f9 fc07 	bl	800c5ec <uxr_buffer_create_topic_bin>
 8012dde:	4602      	mov	r2, r0
 8012de0:	6928      	ldr	r0, [r5, #16]
 8012de2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012de6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012dea:	f7f9 fa2b 	bl	800c244 <run_xrce_session>
 8012dee:	b918      	cbnz	r0, 8012df8 <create_topic+0x8c>
 8012df0:	4620      	mov	r0, r4
 8012df2:	f7f9 f925 	bl	800c040 <rmw_uxrce_fini_topic_memory>
 8012df6:	2400      	movs	r4, #0
 8012df8:	4620      	mov	r0, r4
 8012dfa:	b004      	add	sp, #16
 8012dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e00:	2000dc04 	.word	0x2000dc04
 8012e04:	2000dcf0 	.word	0x2000dcf0
 8012e08:	2000dcb4 	.word	0x2000dcb4

08012e0c <destroy_topic>:
 8012e0c:	b538      	push	{r3, r4, r5, lr}
 8012e0e:	6985      	ldr	r5, [r0, #24]
 8012e10:	b1d5      	cbz	r5, 8012e48 <destroy_topic+0x3c>
 8012e12:	4604      	mov	r4, r0
 8012e14:	6928      	ldr	r0, [r5, #16]
 8012e16:	6922      	ldr	r2, [r4, #16]
 8012e18:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012e1c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012e20:	6819      	ldr	r1, [r3, #0]
 8012e22:	f7f9 fb65 	bl	800c4f0 <uxr_buffer_delete_entity>
 8012e26:	4602      	mov	r2, r0
 8012e28:	6928      	ldr	r0, [r5, #16]
 8012e2a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012e2e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012e32:	f7f9 fa07 	bl	800c244 <run_xrce_session>
 8012e36:	2800      	cmp	r0, #0
 8012e38:	4620      	mov	r0, r4
 8012e3a:	bf14      	ite	ne
 8012e3c:	2400      	movne	r4, #0
 8012e3e:	2402      	moveq	r4, #2
 8012e40:	f7f9 f8fe 	bl	800c040 <rmw_uxrce_fini_topic_memory>
 8012e44:	4620      	mov	r0, r4
 8012e46:	bd38      	pop	{r3, r4, r5, pc}
 8012e48:	2401      	movs	r4, #1
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	bd38      	pop	{r3, r4, r5, pc}
 8012e4e:	bf00      	nop

08012e50 <create_node>:
 8012e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e54:	b083      	sub	sp, #12
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d05f      	beq.n	8012f1a <create_node+0xca>
 8012e5a:	4606      	mov	r6, r0
 8012e5c:	4835      	ldr	r0, [pc, #212]	@ (8012f34 <create_node+0xe4>)
 8012e5e:	460f      	mov	r7, r1
 8012e60:	4690      	mov	r8, r2
 8012e62:	461d      	mov	r5, r3
 8012e64:	f7ff fcb4 	bl	80127d0 <get_memory>
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	d056      	beq.n	8012f1a <create_node+0xca>
 8012e6c:	6884      	ldr	r4, [r0, #8]
 8012e6e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8012e70:	6123      	str	r3, [r4, #16]
 8012e72:	f7ff fd15 	bl	80128a0 <rmw_get_implementation_identifier>
 8012e76:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8012e7a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8012e7e:	f8c4 9020 	str.w	r9, [r4, #32]
 8012e82:	4630      	mov	r0, r6
 8012e84:	f7ed f9b6 	bl	80001f4 <strlen>
 8012e88:	1c42      	adds	r2, r0, #1
 8012e8a:	2a3c      	cmp	r2, #60	@ 0x3c
 8012e8c:	f104 0518 	add.w	r5, r4, #24
 8012e90:	d840      	bhi.n	8012f14 <create_node+0xc4>
 8012e92:	4648      	mov	r0, r9
 8012e94:	4631      	mov	r1, r6
 8012e96:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8012e9a:	f003 fc7a 	bl	8016792 <memcpy>
 8012e9e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8012ea2:	4638      	mov	r0, r7
 8012ea4:	f7ed f9a6 	bl	80001f4 <strlen>
 8012ea8:	1c42      	adds	r2, r0, #1
 8012eaa:	2a3c      	cmp	r2, #60	@ 0x3c
 8012eac:	d832      	bhi.n	8012f14 <create_node+0xc4>
 8012eae:	4639      	mov	r1, r7
 8012eb0:	4648      	mov	r0, r9
 8012eb2:	f003 fc6e 	bl	8016792 <memcpy>
 8012eb6:	6923      	ldr	r3, [r4, #16]
 8012eb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012ebc:	2101      	movs	r1, #1
 8012ebe:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8012ec2:	1842      	adds	r2, r0, r1
 8012ec4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8012ec8:	f7f9 fd14 	bl	800c8f4 <uxr_object_id>
 8012ecc:	6160      	str	r0, [r4, #20]
 8012ece:	783b      	ldrb	r3, [r7, #0]
 8012ed0:	2b2f      	cmp	r3, #47	@ 0x2f
 8012ed2:	d127      	bne.n	8012f24 <create_node+0xd4>
 8012ed4:	787b      	ldrb	r3, [r7, #1]
 8012ed6:	bb2b      	cbnz	r3, 8012f24 <create_node+0xd4>
 8012ed8:	4a17      	ldr	r2, [pc, #92]	@ (8012f38 <create_node+0xe8>)
 8012eda:	4818      	ldr	r0, [pc, #96]	@ (8012f3c <create_node+0xec>)
 8012edc:	4633      	mov	r3, r6
 8012ede:	213c      	movs	r1, #60	@ 0x3c
 8012ee0:	f003 fab4 	bl	801644c <sniprintf>
 8012ee4:	6920      	ldr	r0, [r4, #16]
 8012ee6:	4915      	ldr	r1, [pc, #84]	@ (8012f3c <create_node+0xec>)
 8012ee8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8012eec:	9100      	str	r1, [sp, #0]
 8012eee:	2106      	movs	r1, #6
 8012ef0:	9101      	str	r1, [sp, #4]
 8012ef2:	6811      	ldr	r1, [r2, #0]
 8012ef4:	6962      	ldr	r2, [r4, #20]
 8012ef6:	fa1f f388 	uxth.w	r3, r8
 8012efa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012efe:	f7f9 fb43 	bl	800c588 <uxr_buffer_create_participant_bin>
 8012f02:	4602      	mov	r2, r0
 8012f04:	6920      	ldr	r0, [r4, #16]
 8012f06:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012f0a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012f0e:	f7f9 f999 	bl	800c244 <run_xrce_session>
 8012f12:	b918      	cbnz	r0, 8012f1c <create_node+0xcc>
 8012f14:	4628      	mov	r0, r5
 8012f16:	f7f9 f823 	bl	800bf60 <rmw_uxrce_fini_node_memory>
 8012f1a:	2500      	movs	r5, #0
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	b003      	add	sp, #12
 8012f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f24:	4a06      	ldr	r2, [pc, #24]	@ (8012f40 <create_node+0xf0>)
 8012f26:	9600      	str	r6, [sp, #0]
 8012f28:	463b      	mov	r3, r7
 8012f2a:	213c      	movs	r1, #60	@ 0x3c
 8012f2c:	4803      	ldr	r0, [pc, #12]	@ (8012f3c <create_node+0xec>)
 8012f2e:	f003 fa8d 	bl	801644c <sniprintf>
 8012f32:	e7d7      	b.n	8012ee4 <create_node+0x94>
 8012f34:	2000dba4 	.word	0x2000dba4
 8012f38:	080179b8 	.word	0x080179b8
 8012f3c:	2000dd54 	.word	0x2000dd54
 8012f40:	08017b3c 	.word	0x08017b3c

08012f44 <rmw_create_node>:
 8012f44:	b199      	cbz	r1, 8012f6e <rmw_create_node+0x2a>
 8012f46:	780b      	ldrb	r3, [r1, #0]
 8012f48:	468c      	mov	ip, r1
 8012f4a:	b183      	cbz	r3, 8012f6e <rmw_create_node+0x2a>
 8012f4c:	b410      	push	{r4}
 8012f4e:	4614      	mov	r4, r2
 8012f50:	b14a      	cbz	r2, 8012f66 <rmw_create_node+0x22>
 8012f52:	7813      	ldrb	r3, [r2, #0]
 8012f54:	b13b      	cbz	r3, 8012f66 <rmw_create_node+0x22>
 8012f56:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8012f58:	4603      	mov	r3, r0
 8012f5a:	4621      	mov	r1, r4
 8012f5c:	4660      	mov	r0, ip
 8012f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f62:	f7ff bf75 	b.w	8012e50 <create_node>
 8012f66:	2000      	movs	r0, #0
 8012f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f6c:	4770      	bx	lr
 8012f6e:	2000      	movs	r0, #0
 8012f70:	4770      	bx	lr
 8012f72:	bf00      	nop

08012f74 <rmw_destroy_node>:
 8012f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f76:	b328      	cbz	r0, 8012fc4 <rmw_destroy_node+0x50>
 8012f78:	4607      	mov	r7, r0
 8012f7a:	6800      	ldr	r0, [r0, #0]
 8012f7c:	b120      	cbz	r0, 8012f88 <rmw_destroy_node+0x14>
 8012f7e:	4b36      	ldr	r3, [pc, #216]	@ (8013058 <rmw_destroy_node+0xe4>)
 8012f80:	6819      	ldr	r1, [r3, #0]
 8012f82:	f7ed f92d 	bl	80001e0 <strcmp>
 8012f86:	b9e8      	cbnz	r0, 8012fc4 <rmw_destroy_node+0x50>
 8012f88:	687d      	ldr	r5, [r7, #4]
 8012f8a:	b1dd      	cbz	r5, 8012fc4 <rmw_destroy_node+0x50>
 8012f8c:	4b33      	ldr	r3, [pc, #204]	@ (801305c <rmw_destroy_node+0xe8>)
 8012f8e:	681c      	ldr	r4, [r3, #0]
 8012f90:	2c00      	cmp	r4, #0
 8012f92:	d05f      	beq.n	8013054 <rmw_destroy_node+0xe0>
 8012f94:	2600      	movs	r6, #0
 8012f96:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012f9a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8012f9e:	429d      	cmp	r5, r3
 8012fa0:	d013      	beq.n	8012fca <rmw_destroy_node+0x56>
 8012fa2:	2c00      	cmp	r4, #0
 8012fa4:	d1f7      	bne.n	8012f96 <rmw_destroy_node+0x22>
 8012fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8013060 <rmw_destroy_node+0xec>)
 8012fa8:	681c      	ldr	r4, [r3, #0]
 8012faa:	b1c4      	cbz	r4, 8012fde <rmw_destroy_node+0x6a>
 8012fac:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012fb0:	6a0b      	ldr	r3, [r1, #32]
 8012fb2:	429d      	cmp	r5, r3
 8012fb4:	d1f9      	bne.n	8012faa <rmw_destroy_node+0x36>
 8012fb6:	317c      	adds	r1, #124	@ 0x7c
 8012fb8:	4638      	mov	r0, r7
 8012fba:	f000 fae5 	bl	8013588 <rmw_destroy_subscription>
 8012fbe:	2801      	cmp	r0, #1
 8012fc0:	4606      	mov	r6, r0
 8012fc2:	d1f2      	bne.n	8012faa <rmw_destroy_node+0x36>
 8012fc4:	2601      	movs	r6, #1
 8012fc6:	4630      	mov	r0, r6
 8012fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fca:	3184      	adds	r1, #132	@ 0x84
 8012fcc:	4638      	mov	r0, r7
 8012fce:	f7f8 fe0f 	bl	800bbf0 <rmw_destroy_publisher>
 8012fd2:	2801      	cmp	r0, #1
 8012fd4:	4606      	mov	r6, r0
 8012fd6:	d0f5      	beq.n	8012fc4 <rmw_destroy_node+0x50>
 8012fd8:	2c00      	cmp	r4, #0
 8012fda:	d1dc      	bne.n	8012f96 <rmw_destroy_node+0x22>
 8012fdc:	e7e3      	b.n	8012fa6 <rmw_destroy_node+0x32>
 8012fde:	4b21      	ldr	r3, [pc, #132]	@ (8013064 <rmw_destroy_node+0xf0>)
 8012fe0:	681c      	ldr	r4, [r3, #0]
 8012fe2:	b16c      	cbz	r4, 8013000 <rmw_destroy_node+0x8c>
 8012fe4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012fe8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8012fea:	429d      	cmp	r5, r3
 8012fec:	d1f9      	bne.n	8012fe2 <rmw_destroy_node+0x6e>
 8012fee:	317c      	adds	r1, #124	@ 0x7c
 8012ff0:	4638      	mov	r0, r7
 8012ff2:	f000 f993 	bl	801331c <rmw_destroy_service>
 8012ff6:	2801      	cmp	r0, #1
 8012ff8:	4606      	mov	r6, r0
 8012ffa:	d0e3      	beq.n	8012fc4 <rmw_destroy_node+0x50>
 8012ffc:	2c00      	cmp	r4, #0
 8012ffe:	d1f1      	bne.n	8012fe4 <rmw_destroy_node+0x70>
 8013000:	4b19      	ldr	r3, [pc, #100]	@ (8013068 <rmw_destroy_node+0xf4>)
 8013002:	681c      	ldr	r4, [r3, #0]
 8013004:	b16c      	cbz	r4, 8013022 <rmw_destroy_node+0xae>
 8013006:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801300a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801300c:	429d      	cmp	r5, r3
 801300e:	d1f9      	bne.n	8013004 <rmw_destroy_node+0x90>
 8013010:	317c      	adds	r1, #124	@ 0x7c
 8013012:	4638      	mov	r0, r7
 8013014:	f7ff fc00 	bl	8012818 <rmw_destroy_client>
 8013018:	2801      	cmp	r0, #1
 801301a:	4606      	mov	r6, r0
 801301c:	d0d2      	beq.n	8012fc4 <rmw_destroy_node+0x50>
 801301e:	2c00      	cmp	r4, #0
 8013020:	d1f1      	bne.n	8013006 <rmw_destroy_node+0x92>
 8013022:	6928      	ldr	r0, [r5, #16]
 8013024:	696a      	ldr	r2, [r5, #20]
 8013026:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801302a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801302e:	6819      	ldr	r1, [r3, #0]
 8013030:	f7f9 fa5e 	bl	800c4f0 <uxr_buffer_delete_entity>
 8013034:	4602      	mov	r2, r0
 8013036:	6928      	ldr	r0, [r5, #16]
 8013038:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801303c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013040:	f7f9 f900 	bl	800c244 <run_xrce_session>
 8013044:	2800      	cmp	r0, #0
 8013046:	bf08      	it	eq
 8013048:	2602      	moveq	r6, #2
 801304a:	4638      	mov	r0, r7
 801304c:	f7f8 ff88 	bl	800bf60 <rmw_uxrce_fini_node_memory>
 8013050:	4630      	mov	r0, r6
 8013052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013054:	4626      	mov	r6, r4
 8013056:	e7a6      	b.n	8012fa6 <rmw_destroy_node+0x32>
 8013058:	080180cc 	.word	0x080180cc
 801305c:	2000dbb4 	.word	0x2000dbb4
 8013060:	2000dbf4 	.word	0x2000dbf4
 8013064:	2000dbc4 	.word	0x2000dbc4
 8013068:	200092d8 	.word	0x200092d8

0801306c <rmw_node_get_graph_guard_condition>:
 801306c:	6843      	ldr	r3, [r0, #4]
 801306e:	6918      	ldr	r0, [r3, #16]
 8013070:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8013074:	4770      	bx	lr
 8013076:	bf00      	nop

08013078 <rmw_send_request>:
 8013078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801307c:	4604      	mov	r4, r0
 801307e:	6800      	ldr	r0, [r0, #0]
 8013080:	b08b      	sub	sp, #44	@ 0x2c
 8013082:	460e      	mov	r6, r1
 8013084:	4615      	mov	r5, r2
 8013086:	b128      	cbz	r0, 8013094 <rmw_send_request+0x1c>
 8013088:	4b21      	ldr	r3, [pc, #132]	@ (8013110 <rmw_send_request+0x98>)
 801308a:	6819      	ldr	r1, [r3, #0]
 801308c:	f7ed f8a8 	bl	80001e0 <strcmp>
 8013090:	2800      	cmp	r0, #0
 8013092:	d139      	bne.n	8013108 <rmw_send_request+0x90>
 8013094:	6864      	ldr	r4, [r4, #4]
 8013096:	6963      	ldr	r3, [r4, #20]
 8013098:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801309c:	689b      	ldr	r3, [r3, #8]
 801309e:	4798      	blx	r3
 80130a0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80130a4:	4630      	mov	r0, r6
 80130a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80130aa:	4798      	blx	r3
 80130ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80130b0:	9000      	str	r0, [sp, #0]
 80130b2:	6922      	ldr	r2, [r4, #16]
 80130b4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80130b6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80130ba:	ab02      	add	r3, sp, #8
 80130bc:	f7fa ff14 	bl	800dee8 <uxr_prepare_output_stream>
 80130c0:	2700      	movs	r7, #0
 80130c2:	6028      	str	r0, [r5, #0]
 80130c4:	606f      	str	r7, [r5, #4]
 80130c6:	b198      	cbz	r0, 80130f0 <rmw_send_request+0x78>
 80130c8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80130cc:	a902      	add	r1, sp, #8
 80130ce:	4630      	mov	r0, r6
 80130d0:	4798      	blx	r3
 80130d2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80130d6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80130da:	2b01      	cmp	r3, #1
 80130dc:	d00c      	beq.n	80130f8 <rmw_send_request+0x80>
 80130de:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80130e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80130e4:	f7fa f914 	bl	800d310 <uxr_run_session_until_confirm_delivery>
 80130e8:	4638      	mov	r0, r7
 80130ea:	b00b      	add	sp, #44	@ 0x2c
 80130ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130f0:	2001      	movs	r0, #1
 80130f2:	b00b      	add	sp, #44	@ 0x2c
 80130f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80130fc:	f7f9 fd48 	bl	800cb90 <uxr_flash_output_streams>
 8013100:	4638      	mov	r0, r7
 8013102:	b00b      	add	sp, #44	@ 0x2c
 8013104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013108:	200c      	movs	r0, #12
 801310a:	b00b      	add	sp, #44	@ 0x2c
 801310c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013110:	080180cc 	.word	0x080180cc

08013114 <rmw_take_request>:
 8013114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013118:	4605      	mov	r5, r0
 801311a:	6800      	ldr	r0, [r0, #0]
 801311c:	b089      	sub	sp, #36	@ 0x24
 801311e:	460c      	mov	r4, r1
 8013120:	4690      	mov	r8, r2
 8013122:	461e      	mov	r6, r3
 8013124:	b128      	cbz	r0, 8013132 <rmw_take_request+0x1e>
 8013126:	4b28      	ldr	r3, [pc, #160]	@ (80131c8 <rmw_take_request+0xb4>)
 8013128:	6819      	ldr	r1, [r3, #0]
 801312a:	f7ed f859 	bl	80001e0 <strcmp>
 801312e:	2800      	cmp	r0, #0
 8013130:	d146      	bne.n	80131c0 <rmw_take_request+0xac>
 8013132:	b10e      	cbz	r6, 8013138 <rmw_take_request+0x24>
 8013134:	2300      	movs	r3, #0
 8013136:	7033      	strb	r3, [r6, #0]
 8013138:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801313c:	f7f9 f804 	bl	800c148 <rmw_uxrce_clean_expired_static_input_buffer>
 8013140:	4648      	mov	r0, r9
 8013142:	f7f8 ffd9 	bl	800c0f8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013146:	4607      	mov	r7, r0
 8013148:	b3b0      	cbz	r0, 80131b8 <rmw_take_request+0xa4>
 801314a:	6885      	ldr	r5, [r0, #8]
 801314c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8013150:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8013154:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013158:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801315c:	7423      	strb	r3, [r4, #16]
 801315e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8013162:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8013166:	74e2      	strb	r2, [r4, #19]
 8013168:	f8a4 3011 	strh.w	r3, [r4, #17]
 801316c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8013170:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8013174:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8013178:	61e1      	str	r1, [r4, #28]
 801317a:	6162      	str	r2, [r4, #20]
 801317c:	61a3      	str	r3, [r4, #24]
 801317e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013182:	689b      	ldr	r3, [r3, #8]
 8013184:	4798      	blx	r3
 8013186:	6844      	ldr	r4, [r0, #4]
 8013188:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801318c:	f105 0110 	add.w	r1, r5, #16
 8013190:	4668      	mov	r0, sp
 8013192:	f7f7 fa65 	bl	800a660 <ucdr_init_buffer>
 8013196:	68e3      	ldr	r3, [r4, #12]
 8013198:	4641      	mov	r1, r8
 801319a:	4668      	mov	r0, sp
 801319c:	4798      	blx	r3
 801319e:	4639      	mov	r1, r7
 80131a0:	4604      	mov	r4, r0
 80131a2:	480a      	ldr	r0, [pc, #40]	@ (80131cc <rmw_take_request+0xb8>)
 80131a4:	f7ff fb24 	bl	80127f0 <put_memory>
 80131a8:	b106      	cbz	r6, 80131ac <rmw_take_request+0x98>
 80131aa:	7034      	strb	r4, [r6, #0]
 80131ac:	f084 0001 	eor.w	r0, r4, #1
 80131b0:	b2c0      	uxtb	r0, r0
 80131b2:	b009      	add	sp, #36	@ 0x24
 80131b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131b8:	2001      	movs	r0, #1
 80131ba:	b009      	add	sp, #36	@ 0x24
 80131bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131c0:	200c      	movs	r0, #12
 80131c2:	b009      	add	sp, #36	@ 0x24
 80131c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131c8:	080180cc 	.word	0x080180cc
 80131cc:	2000dbe4 	.word	0x2000dbe4

080131d0 <rmw_send_response>:
 80131d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131d2:	4605      	mov	r5, r0
 80131d4:	6800      	ldr	r0, [r0, #0]
 80131d6:	b091      	sub	sp, #68	@ 0x44
 80131d8:	460c      	mov	r4, r1
 80131da:	4616      	mov	r6, r2
 80131dc:	b128      	cbz	r0, 80131ea <rmw_send_response+0x1a>
 80131de:	4b29      	ldr	r3, [pc, #164]	@ (8013284 <rmw_send_response+0xb4>)
 80131e0:	6819      	ldr	r1, [r3, #0]
 80131e2:	f7ec fffd 	bl	80001e0 <strcmp>
 80131e6:	2800      	cmp	r0, #0
 80131e8:	d141      	bne.n	801326e <rmw_send_response+0x9e>
 80131ea:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80131ee:	9306      	str	r3, [sp, #24]
 80131f0:	4623      	mov	r3, r4
 80131f2:	9207      	str	r2, [sp, #28]
 80131f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131f8:	686d      	ldr	r5, [r5, #4]
 80131fa:	789b      	ldrb	r3, [r3, #2]
 80131fc:	68a1      	ldr	r1, [r4, #8]
 80131fe:	f88d 2017 	strb.w	r2, [sp, #23]
 8013202:	f88d 3016 	strb.w	r3, [sp, #22]
 8013206:	68e2      	ldr	r2, [r4, #12]
 8013208:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801320c:	6860      	ldr	r0, [r4, #4]
 801320e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013212:	ab02      	add	r3, sp, #8
 8013214:	c307      	stmia	r3!, {r0, r1, r2}
 8013216:	696b      	ldr	r3, [r5, #20]
 8013218:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801321a:	68db      	ldr	r3, [r3, #12]
 801321c:	4798      	blx	r3
 801321e:	6844      	ldr	r4, [r0, #4]
 8013220:	4630      	mov	r0, r6
 8013222:	6923      	ldr	r3, [r4, #16]
 8013224:	4798      	blx	r3
 8013226:	f100 0318 	add.w	r3, r0, #24
 801322a:	6938      	ldr	r0, [r7, #16]
 801322c:	9300      	str	r3, [sp, #0]
 801322e:	692a      	ldr	r2, [r5, #16]
 8013230:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8013232:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013236:	ab08      	add	r3, sp, #32
 8013238:	f7fa fe56 	bl	800dee8 <uxr_prepare_output_stream>
 801323c:	b910      	cbnz	r0, 8013244 <rmw_send_response+0x74>
 801323e:	2001      	movs	r0, #1
 8013240:	b011      	add	sp, #68	@ 0x44
 8013242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013244:	a902      	add	r1, sp, #8
 8013246:	a808      	add	r0, sp, #32
 8013248:	f7fb ff86 	bl	800f158 <uxr_serialize_SampleIdentity>
 801324c:	68a3      	ldr	r3, [r4, #8]
 801324e:	a908      	add	r1, sp, #32
 8013250:	4630      	mov	r0, r6
 8013252:	4798      	blx	r3
 8013254:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8013258:	6938      	ldr	r0, [r7, #16]
 801325a:	2b01      	cmp	r3, #1
 801325c:	d00a      	beq.n	8013274 <rmw_send_response+0xa4>
 801325e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8013260:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013264:	f7fa f854 	bl	800d310 <uxr_run_session_until_confirm_delivery>
 8013268:	2000      	movs	r0, #0
 801326a:	b011      	add	sp, #68	@ 0x44
 801326c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801326e:	200c      	movs	r0, #12
 8013270:	b011      	add	sp, #68	@ 0x44
 8013272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013274:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013278:	f7f9 fc8a 	bl	800cb90 <uxr_flash_output_streams>
 801327c:	2000      	movs	r0, #0
 801327e:	b011      	add	sp, #68	@ 0x44
 8013280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013282:	bf00      	nop
 8013284:	080180cc 	.word	0x080180cc

08013288 <rmw_take_response>:
 8013288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801328c:	4604      	mov	r4, r0
 801328e:	6800      	ldr	r0, [r0, #0]
 8013290:	b088      	sub	sp, #32
 8013292:	4688      	mov	r8, r1
 8013294:	4617      	mov	r7, r2
 8013296:	461d      	mov	r5, r3
 8013298:	b120      	cbz	r0, 80132a4 <rmw_take_response+0x1c>
 801329a:	4b1e      	ldr	r3, [pc, #120]	@ (8013314 <rmw_take_response+0x8c>)
 801329c:	6819      	ldr	r1, [r3, #0]
 801329e:	f7ec ff9f 	bl	80001e0 <strcmp>
 80132a2:	bb78      	cbnz	r0, 8013304 <rmw_take_response+0x7c>
 80132a4:	b10d      	cbz	r5, 80132aa <rmw_take_response+0x22>
 80132a6:	2300      	movs	r3, #0
 80132a8:	702b      	strb	r3, [r5, #0]
 80132aa:	6864      	ldr	r4, [r4, #4]
 80132ac:	f7f8 ff4c 	bl	800c148 <rmw_uxrce_clean_expired_static_input_buffer>
 80132b0:	4620      	mov	r0, r4
 80132b2:	f7f8 ff21 	bl	800c0f8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80132b6:	4606      	mov	r6, r0
 80132b8:	b340      	cbz	r0, 801330c <rmw_take_response+0x84>
 80132ba:	6963      	ldr	r3, [r4, #20]
 80132bc:	6884      	ldr	r4, [r0, #8]
 80132be:	68db      	ldr	r3, [r3, #12]
 80132c0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80132c4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80132c8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80132cc:	4798      	blx	r3
 80132ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80132d2:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80132d6:	f104 0110 	add.w	r1, r4, #16
 80132da:	4668      	mov	r0, sp
 80132dc:	f7f7 f9c0 	bl	800a660 <ucdr_init_buffer>
 80132e0:	4639      	mov	r1, r7
 80132e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80132e6:	4668      	mov	r0, sp
 80132e8:	4798      	blx	r3
 80132ea:	4631      	mov	r1, r6
 80132ec:	4604      	mov	r4, r0
 80132ee:	480a      	ldr	r0, [pc, #40]	@ (8013318 <rmw_take_response+0x90>)
 80132f0:	f7ff fa7e 	bl	80127f0 <put_memory>
 80132f4:	b105      	cbz	r5, 80132f8 <rmw_take_response+0x70>
 80132f6:	702c      	strb	r4, [r5, #0]
 80132f8:	f084 0001 	eor.w	r0, r4, #1
 80132fc:	b2c0      	uxtb	r0, r0
 80132fe:	b008      	add	sp, #32
 8013300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013304:	200c      	movs	r0, #12
 8013306:	b008      	add	sp, #32
 8013308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801330c:	2001      	movs	r0, #1
 801330e:	b008      	add	sp, #32
 8013310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013314:	080180cc 	.word	0x080180cc
 8013318:	2000dbe4 	.word	0x2000dbe4

0801331c <rmw_destroy_service>:
 801331c:	b570      	push	{r4, r5, r6, lr}
 801331e:	b128      	cbz	r0, 801332c <rmw_destroy_service+0x10>
 8013320:	4604      	mov	r4, r0
 8013322:	6800      	ldr	r0, [r0, #0]
 8013324:	460d      	mov	r5, r1
 8013326:	f7f9 f80d 	bl	800c344 <is_uxrce_rmw_identifier_valid>
 801332a:	b910      	cbnz	r0, 8013332 <rmw_destroy_service+0x16>
 801332c:	2401      	movs	r4, #1
 801332e:	4620      	mov	r0, r4
 8013330:	bd70      	pop	{r4, r5, r6, pc}
 8013332:	6863      	ldr	r3, [r4, #4]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d0f9      	beq.n	801332c <rmw_destroy_service+0x10>
 8013338:	2d00      	cmp	r5, #0
 801333a:	d0f7      	beq.n	801332c <rmw_destroy_service+0x10>
 801333c:	6828      	ldr	r0, [r5, #0]
 801333e:	f7f9 f801 	bl	800c344 <is_uxrce_rmw_identifier_valid>
 8013342:	2800      	cmp	r0, #0
 8013344:	d0f2      	beq.n	801332c <rmw_destroy_service+0x10>
 8013346:	686e      	ldr	r6, [r5, #4]
 8013348:	2e00      	cmp	r6, #0
 801334a:	d0ef      	beq.n	801332c <rmw_destroy_service+0x10>
 801334c:	6864      	ldr	r4, [r4, #4]
 801334e:	6932      	ldr	r2, [r6, #16]
 8013350:	6920      	ldr	r0, [r4, #16]
 8013352:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013356:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801335a:	6819      	ldr	r1, [r3, #0]
 801335c:	f001 fb6a 	bl	8014a34 <uxr_buffer_cancel_data>
 8013360:	4602      	mov	r2, r0
 8013362:	6920      	ldr	r0, [r4, #16]
 8013364:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013368:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801336c:	f7f8 ff6a 	bl	800c244 <run_xrce_session>
 8013370:	6920      	ldr	r0, [r4, #16]
 8013372:	6932      	ldr	r2, [r6, #16]
 8013374:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013378:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801337c:	6819      	ldr	r1, [r3, #0]
 801337e:	f7f9 f8b7 	bl	800c4f0 <uxr_buffer_delete_entity>
 8013382:	4602      	mov	r2, r0
 8013384:	6920      	ldr	r0, [r4, #16]
 8013386:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801338a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801338e:	f7f8 ff59 	bl	800c244 <run_xrce_session>
 8013392:	2800      	cmp	r0, #0
 8013394:	4628      	mov	r0, r5
 8013396:	bf14      	ite	ne
 8013398:	2400      	movne	r4, #0
 801339a:	2402      	moveq	r4, #2
 801339c:	f7f8 fe24 	bl	800bfe8 <rmw_uxrce_fini_service_memory>
 80133a0:	e7c5      	b.n	801332e <rmw_destroy_service+0x12>
 80133a2:	bf00      	nop

080133a4 <rmw_create_subscription>:
 80133a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133a8:	b08d      	sub	sp, #52	@ 0x34
 80133aa:	2800      	cmp	r0, #0
 80133ac:	f000 80d1 	beq.w	8013552 <rmw_create_subscription+0x1ae>
 80133b0:	460e      	mov	r6, r1
 80133b2:	2900      	cmp	r1, #0
 80133b4:	f000 80cd 	beq.w	8013552 <rmw_create_subscription+0x1ae>
 80133b8:	4604      	mov	r4, r0
 80133ba:	6800      	ldr	r0, [r0, #0]
 80133bc:	4615      	mov	r5, r2
 80133be:	4698      	mov	r8, r3
 80133c0:	f7f8 ffc0 	bl	800c344 <is_uxrce_rmw_identifier_valid>
 80133c4:	2800      	cmp	r0, #0
 80133c6:	f000 80c4 	beq.w	8013552 <rmw_create_subscription+0x1ae>
 80133ca:	2d00      	cmp	r5, #0
 80133cc:	f000 80c1 	beq.w	8013552 <rmw_create_subscription+0x1ae>
 80133d0:	782b      	ldrb	r3, [r5, #0]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	f000 80bd 	beq.w	8013552 <rmw_create_subscription+0x1ae>
 80133d8:	f1b8 0f00 	cmp.w	r8, #0
 80133dc:	f000 80b9 	beq.w	8013552 <rmw_create_subscription+0x1ae>
 80133e0:	485e      	ldr	r0, [pc, #376]	@ (801355c <rmw_create_subscription+0x1b8>)
 80133e2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80133e6:	f7ff f9f3 	bl	80127d0 <get_memory>
 80133ea:	4604      	mov	r4, r0
 80133ec:	2800      	cmp	r0, #0
 80133ee:	f000 80b1 	beq.w	8013554 <rmw_create_subscription+0x1b0>
 80133f2:	6887      	ldr	r7, [r0, #8]
 80133f4:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 80133f8:	f7ff fa52 	bl	80128a0 <rmw_get_implementation_identifier>
 80133fc:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8013400:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8013402:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8013406:	4628      	mov	r0, r5
 8013408:	f7ec fef4 	bl	80001f4 <strlen>
 801340c:	3001      	adds	r0, #1
 801340e:	283c      	cmp	r0, #60	@ 0x3c
 8013410:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8013414:	f200 8096 	bhi.w	8013544 <rmw_create_subscription+0x1a0>
 8013418:	4a51      	ldr	r2, [pc, #324]	@ (8013560 <rmw_create_subscription+0x1bc>)
 801341a:	462b      	mov	r3, r5
 801341c:	213c      	movs	r1, #60	@ 0x3c
 801341e:	4650      	mov	r0, sl
 8013420:	f003 f814 	bl	801644c <sniprintf>
 8013424:	4641      	mov	r1, r8
 8013426:	f8c7 9020 	str.w	r9, [r7, #32]
 801342a:	2250      	movs	r2, #80	@ 0x50
 801342c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8013430:	f003 f9af 	bl	8016792 <memcpy>
 8013434:	494b      	ldr	r1, [pc, #300]	@ (8013564 <rmw_create_subscription+0x1c0>)
 8013436:	4630      	mov	r0, r6
 8013438:	f7f8 ff92 	bl	800c360 <get_message_typesupport_handle>
 801343c:	2800      	cmp	r0, #0
 801343e:	f000 8081 	beq.w	8013544 <rmw_create_subscription+0x1a0>
 8013442:	6842      	ldr	r2, [r0, #4]
 8013444:	61ba      	str	r2, [r7, #24]
 8013446:	2a00      	cmp	r2, #0
 8013448:	d07c      	beq.n	8013544 <rmw_create_subscription+0x1a0>
 801344a:	4629      	mov	r1, r5
 801344c:	4643      	mov	r3, r8
 801344e:	4648      	mov	r0, r9
 8013450:	f7ff fc8c 	bl	8012d6c <create_topic>
 8013454:	61f8      	str	r0, [r7, #28]
 8013456:	2800      	cmp	r0, #0
 8013458:	d078      	beq.n	801354c <rmw_create_subscription+0x1a8>
 801345a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801345e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013462:	2104      	movs	r1, #4
 8013464:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8013468:	1c42      	adds	r2, r0, #1
 801346a:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801346e:	f7f9 fa41 	bl	800c8f4 <uxr_object_id>
 8013472:	6138      	str	r0, [r7, #16]
 8013474:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013478:	2506      	movs	r5, #6
 801347a:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801347e:	9500      	str	r5, [sp, #0]
 8013480:	6819      	ldr	r1, [r3, #0]
 8013482:	693a      	ldr	r2, [r7, #16]
 8013484:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013488:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801348c:	f7f9 f914 	bl	800c6b8 <uxr_buffer_create_subscriber_bin>
 8013490:	4602      	mov	r2, r0
 8013492:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013496:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801349a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801349e:	f7f8 fed1 	bl	800c244 <run_xrce_session>
 80134a2:	2800      	cmp	r0, #0
 80134a4:	d04e      	beq.n	8013544 <rmw_create_subscription+0x1a0>
 80134a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80134aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80134ae:	4629      	mov	r1, r5
 80134b0:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 80134b4:	1c42      	adds	r2, r0, #1
 80134b6:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 80134ba:	f7f9 fa1b 	bl	800c8f4 <uxr_object_id>
 80134be:	ae08      	add	r6, sp, #32
 80134c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80134c4:	69fb      	ldr	r3, [r7, #28]
 80134c6:	6178      	str	r0, [r7, #20]
 80134c8:	4641      	mov	r1, r8
 80134ca:	4630      	mov	r0, r6
 80134cc:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 80134d0:	9305      	str	r3, [sp, #20]
 80134d2:	f7f8 fed3 	bl	800c27c <convert_qos_profile>
 80134d6:	9503      	str	r5, [sp, #12]
 80134d8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80134dc:	9b05      	ldr	r3, [sp, #20]
 80134de:	9001      	str	r0, [sp, #4]
 80134e0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80134e4:	691b      	ldr	r3, [r3, #16]
 80134e6:	9300      	str	r3, [sp, #0]
 80134e8:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 80134ec:	f8db 1000 	ldr.w	r1, [fp]
 80134f0:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80134f4:	f7f9 f986 	bl	800c804 <uxr_buffer_create_datareader_bin>
 80134f8:	4602      	mov	r2, r0
 80134fa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80134fe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013502:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013506:	f7f8 fe9d 	bl	800c244 <run_xrce_session>
 801350a:	b1d8      	cbz	r0, 8013544 <rmw_create_subscription+0x1a0>
 801350c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8013510:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013514:	2b02      	cmp	r3, #2
 8013516:	bf0c      	ite	eq
 8013518:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801351c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8013520:	9307      	str	r3, [sp, #28]
 8013522:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013526:	2200      	movs	r2, #0
 8013528:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 801352c:	ab0a      	add	r3, sp, #40	@ 0x28
 801352e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013532:	9300      	str	r3, [sp, #0]
 8013534:	697a      	ldr	r2, [r7, #20]
 8013536:	9b07      	ldr	r3, [sp, #28]
 8013538:	6809      	ldr	r1, [r1, #0]
 801353a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801353e:	f001 fa3f 	bl	80149c0 <uxr_buffer_request_data>
 8013542:	e007      	b.n	8013554 <rmw_create_subscription+0x1b0>
 8013544:	69f8      	ldr	r0, [r7, #28]
 8013546:	b108      	cbz	r0, 801354c <rmw_create_subscription+0x1a8>
 8013548:	f7f8 fd7a 	bl	800c040 <rmw_uxrce_fini_topic_memory>
 801354c:	4620      	mov	r0, r4
 801354e:	f7f8 fd35 	bl	800bfbc <rmw_uxrce_fini_subscription_memory>
 8013552:	2400      	movs	r4, #0
 8013554:	4620      	mov	r0, r4
 8013556:	b00d      	add	sp, #52	@ 0x34
 8013558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801355c:	2000dbf4 	.word	0x2000dbf4
 8013560:	080179b8 	.word	0x080179b8
 8013564:	08017748 	.word	0x08017748

08013568 <rmw_subscription_get_actual_qos>:
 8013568:	b150      	cbz	r0, 8013580 <rmw_subscription_get_actual_qos+0x18>
 801356a:	b508      	push	{r3, lr}
 801356c:	460b      	mov	r3, r1
 801356e:	b149      	cbz	r1, 8013584 <rmw_subscription_get_actual_qos+0x1c>
 8013570:	6841      	ldr	r1, [r0, #4]
 8013572:	2250      	movs	r2, #80	@ 0x50
 8013574:	3128      	adds	r1, #40	@ 0x28
 8013576:	4618      	mov	r0, r3
 8013578:	f003 f90b 	bl	8016792 <memcpy>
 801357c:	2000      	movs	r0, #0
 801357e:	bd08      	pop	{r3, pc}
 8013580:	200b      	movs	r0, #11
 8013582:	4770      	bx	lr
 8013584:	200b      	movs	r0, #11
 8013586:	bd08      	pop	{r3, pc}

08013588 <rmw_destroy_subscription>:
 8013588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801358a:	b128      	cbz	r0, 8013598 <rmw_destroy_subscription+0x10>
 801358c:	4604      	mov	r4, r0
 801358e:	6800      	ldr	r0, [r0, #0]
 8013590:	460d      	mov	r5, r1
 8013592:	f7f8 fed7 	bl	800c344 <is_uxrce_rmw_identifier_valid>
 8013596:	b910      	cbnz	r0, 801359e <rmw_destroy_subscription+0x16>
 8013598:	2401      	movs	r4, #1
 801359a:	4620      	mov	r0, r4
 801359c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801359e:	6863      	ldr	r3, [r4, #4]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d0f9      	beq.n	8013598 <rmw_destroy_subscription+0x10>
 80135a4:	2d00      	cmp	r5, #0
 80135a6:	d0f7      	beq.n	8013598 <rmw_destroy_subscription+0x10>
 80135a8:	6828      	ldr	r0, [r5, #0]
 80135aa:	f7f8 fecb 	bl	800c344 <is_uxrce_rmw_identifier_valid>
 80135ae:	2800      	cmp	r0, #0
 80135b0:	d0f2      	beq.n	8013598 <rmw_destroy_subscription+0x10>
 80135b2:	686c      	ldr	r4, [r5, #4]
 80135b4:	2c00      	cmp	r4, #0
 80135b6:	d0ef      	beq.n	8013598 <rmw_destroy_subscription+0x10>
 80135b8:	6a26      	ldr	r6, [r4, #32]
 80135ba:	6962      	ldr	r2, [r4, #20]
 80135bc:	6930      	ldr	r0, [r6, #16]
 80135be:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80135c2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80135c6:	6819      	ldr	r1, [r3, #0]
 80135c8:	f001 fa34 	bl	8014a34 <uxr_buffer_cancel_data>
 80135cc:	4602      	mov	r2, r0
 80135ce:	6930      	ldr	r0, [r6, #16]
 80135d0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80135d4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80135d8:	f7f8 fe34 	bl	800c244 <run_xrce_session>
 80135dc:	69e0      	ldr	r0, [r4, #28]
 80135de:	f7ff fc15 	bl	8012e0c <destroy_topic>
 80135e2:	6a23      	ldr	r3, [r4, #32]
 80135e4:	6962      	ldr	r2, [r4, #20]
 80135e6:	6918      	ldr	r0, [r3, #16]
 80135e8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80135ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80135f0:	6819      	ldr	r1, [r3, #0]
 80135f2:	f7f8 ff7d 	bl	800c4f0 <uxr_buffer_delete_entity>
 80135f6:	6a23      	ldr	r3, [r4, #32]
 80135f8:	6922      	ldr	r2, [r4, #16]
 80135fa:	691b      	ldr	r3, [r3, #16]
 80135fc:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8013600:	4604      	mov	r4, r0
 8013602:	6809      	ldr	r1, [r1, #0]
 8013604:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013608:	f7f8 ff72 	bl	800c4f0 <uxr_buffer_delete_entity>
 801360c:	6937      	ldr	r7, [r6, #16]
 801360e:	4622      	mov	r2, r4
 8013610:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8013614:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8013618:	4604      	mov	r4, r0
 801361a:	4638      	mov	r0, r7
 801361c:	f7f8 fe12 	bl	800c244 <run_xrce_session>
 8013620:	6936      	ldr	r6, [r6, #16]
 8013622:	4622      	mov	r2, r4
 8013624:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8013628:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 801362c:	4604      	mov	r4, r0
 801362e:	4630      	mov	r0, r6
 8013630:	f7f8 fe08 	bl	800c244 <run_xrce_session>
 8013634:	b12c      	cbz	r4, 8013642 <rmw_destroy_subscription+0xba>
 8013636:	b120      	cbz	r0, 8013642 <rmw_destroy_subscription+0xba>
 8013638:	2400      	movs	r4, #0
 801363a:	4628      	mov	r0, r5
 801363c:	f7f8 fcbe 	bl	800bfbc <rmw_uxrce_fini_subscription_memory>
 8013640:	e7ab      	b.n	801359a <rmw_destroy_subscription+0x12>
 8013642:	2402      	movs	r4, #2
 8013644:	e7f9      	b.n	801363a <rmw_destroy_subscription+0xb2>
 8013646:	bf00      	nop

08013648 <rmw_take_with_info>:
 8013648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801364a:	4604      	mov	r4, r0
 801364c:	6800      	ldr	r0, [r0, #0]
 801364e:	b089      	sub	sp, #36	@ 0x24
 8013650:	460f      	mov	r7, r1
 8013652:	4615      	mov	r5, r2
 8013654:	b128      	cbz	r0, 8013662 <rmw_take_with_info+0x1a>
 8013656:	4b24      	ldr	r3, [pc, #144]	@ (80136e8 <rmw_take_with_info+0xa0>)
 8013658:	6819      	ldr	r1, [r3, #0]
 801365a:	f7ec fdc1 	bl	80001e0 <strcmp>
 801365e:	2800      	cmp	r0, #0
 8013660:	d13e      	bne.n	80136e0 <rmw_take_with_info+0x98>
 8013662:	b305      	cbz	r5, 80136a6 <rmw_take_with_info+0x5e>
 8013664:	6864      	ldr	r4, [r4, #4]
 8013666:	2300      	movs	r3, #0
 8013668:	702b      	strb	r3, [r5, #0]
 801366a:	f7f8 fd6d 	bl	800c148 <rmw_uxrce_clean_expired_static_input_buffer>
 801366e:	4620      	mov	r0, r4
 8013670:	f7f8 fd42 	bl	800c0f8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013674:	4606      	mov	r6, r0
 8013676:	b1f0      	cbz	r0, 80136b6 <rmw_take_with_info+0x6e>
 8013678:	6881      	ldr	r1, [r0, #8]
 801367a:	4668      	mov	r0, sp
 801367c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013680:	3110      	adds	r1, #16
 8013682:	f7f6 ffed 	bl	800a660 <ucdr_init_buffer>
 8013686:	69a3      	ldr	r3, [r4, #24]
 8013688:	4639      	mov	r1, r7
 801368a:	68db      	ldr	r3, [r3, #12]
 801368c:	4668      	mov	r0, sp
 801368e:	4798      	blx	r3
 8013690:	4631      	mov	r1, r6
 8013692:	4604      	mov	r4, r0
 8013694:	4815      	ldr	r0, [pc, #84]	@ (80136ec <rmw_take_with_info+0xa4>)
 8013696:	f7ff f8ab 	bl	80127f0 <put_memory>
 801369a:	702c      	strb	r4, [r5, #0]
 801369c:	f084 0001 	eor.w	r0, r4, #1
 80136a0:	b2c0      	uxtb	r0, r0
 80136a2:	b009      	add	sp, #36	@ 0x24
 80136a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136a6:	6864      	ldr	r4, [r4, #4]
 80136a8:	f7f8 fd4e 	bl	800c148 <rmw_uxrce_clean_expired_static_input_buffer>
 80136ac:	4620      	mov	r0, r4
 80136ae:	f7f8 fd23 	bl	800c0f8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80136b2:	4605      	mov	r5, r0
 80136b4:	b910      	cbnz	r0, 80136bc <rmw_take_with_info+0x74>
 80136b6:	2001      	movs	r0, #1
 80136b8:	b009      	add	sp, #36	@ 0x24
 80136ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136bc:	68a9      	ldr	r1, [r5, #8]
 80136be:	4668      	mov	r0, sp
 80136c0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80136c4:	3110      	adds	r1, #16
 80136c6:	f7f6 ffcb 	bl	800a660 <ucdr_init_buffer>
 80136ca:	69a3      	ldr	r3, [r4, #24]
 80136cc:	4639      	mov	r1, r7
 80136ce:	68db      	ldr	r3, [r3, #12]
 80136d0:	4668      	mov	r0, sp
 80136d2:	4798      	blx	r3
 80136d4:	4629      	mov	r1, r5
 80136d6:	4604      	mov	r4, r0
 80136d8:	4804      	ldr	r0, [pc, #16]	@ (80136ec <rmw_take_with_info+0xa4>)
 80136da:	f7ff f889 	bl	80127f0 <put_memory>
 80136de:	e7dd      	b.n	801369c <rmw_take_with_info+0x54>
 80136e0:	200c      	movs	r0, #12
 80136e2:	b009      	add	sp, #36	@ 0x24
 80136e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136e6:	bf00      	nop
 80136e8:	080180cc 	.word	0x080180cc
 80136ec:	2000dbe4 	.word	0x2000dbe4

080136f0 <rmw_uxrce_transport_init>:
 80136f0:	b508      	push	{r3, lr}
 80136f2:	b108      	cbz	r0, 80136f8 <rmw_uxrce_transport_init+0x8>
 80136f4:	f100 0210 	add.w	r2, r0, #16
 80136f8:	b139      	cbz	r1, 801370a <rmw_uxrce_transport_init+0x1a>
 80136fa:	6949      	ldr	r1, [r1, #20]
 80136fc:	4610      	mov	r0, r2
 80136fe:	f000 fbdf 	bl	8013ec0 <uxr_init_custom_transport>
 8013702:	f080 0001 	eor.w	r0, r0, #1
 8013706:	b2c0      	uxtb	r0, r0
 8013708:	bd08      	pop	{r3, pc}
 801370a:	4b04      	ldr	r3, [pc, #16]	@ (801371c <rmw_uxrce_transport_init+0x2c>)
 801370c:	4610      	mov	r0, r2
 801370e:	6859      	ldr	r1, [r3, #4]
 8013710:	f000 fbd6 	bl	8013ec0 <uxr_init_custom_transport>
 8013714:	f080 0001 	eor.w	r0, r0, #1
 8013718:	b2c0      	uxtb	r0, r0
 801371a:	bd08      	pop	{r3, pc}
 801371c:	200092bc 	.word	0x200092bc

08013720 <rmw_wait>:
 8013720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013724:	b089      	sub	sp, #36	@ 0x24
 8013726:	4605      	mov	r5, r0
 8013728:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801372a:	460e      	mov	r6, r1
 801372c:	4698      	mov	r8, r3
 801372e:	4691      	mov	r9, r2
 8013730:	2a00      	cmp	r2, #0
 8013732:	f000 810a 	beq.w	801394a <rmw_wait+0x22a>
 8013736:	b16c      	cbz	r4, 8013754 <rmw_wait+0x34>
 8013738:	4bae      	ldr	r3, [pc, #696]	@ (80139f4 <rmw_wait+0x2d4>)
 801373a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801373c:	af04      	add	r7, sp, #16
 801373e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8013742:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013746:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801374a:	f7fe fe75 	bl	8012438 <rmw_time_equal>
 801374e:	2800      	cmp	r0, #0
 8013750:	f000 8127 	beq.w	80139a2 <rmw_wait+0x282>
 8013754:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013758:	f7f8 fcf6 	bl	800c148 <rmw_uxrce_clean_expired_static_input_buffer>
 801375c:	4ba6      	ldr	r3, [pc, #664]	@ (80139f8 <rmw_wait+0x2d8>)
 801375e:	681c      	ldr	r4, [r3, #0]
 8013760:	b14c      	cbz	r4, 8013776 <rmw_wait+0x56>
 8013762:	4623      	mov	r3, r4
 8013764:	2100      	movs	r1, #0
 8013766:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801376a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801376e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8013772:	2b00      	cmp	r3, #0
 8013774:	d1f7      	bne.n	8013766 <rmw_wait+0x46>
 8013776:	f1b9 0f00 	cmp.w	r9, #0
 801377a:	d011      	beq.n	80137a0 <rmw_wait+0x80>
 801377c:	f8d9 1000 	ldr.w	r1, [r9]
 8013780:	b171      	cbz	r1, 80137a0 <rmw_wait+0x80>
 8013782:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8013786:	2300      	movs	r3, #0
 8013788:	2001      	movs	r0, #1
 801378a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801378e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013790:	6912      	ldr	r2, [r2, #16]
 8013792:	3301      	adds	r3, #1
 8013794:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013798:	4299      	cmp	r1, r3
 801379a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801379e:	d1f4      	bne.n	801378a <rmw_wait+0x6a>
 80137a0:	f1b8 0f00 	cmp.w	r8, #0
 80137a4:	d011      	beq.n	80137ca <rmw_wait+0xaa>
 80137a6:	f8d8 1000 	ldr.w	r1, [r8]
 80137aa:	b171      	cbz	r1, 80137ca <rmw_wait+0xaa>
 80137ac:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80137b0:	2300      	movs	r3, #0
 80137b2:	2001      	movs	r0, #1
 80137b4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80137b8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80137ba:	6912      	ldr	r2, [r2, #16]
 80137bc:	3301      	adds	r3, #1
 80137be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80137c2:	4299      	cmp	r1, r3
 80137c4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80137c8:	d1f4      	bne.n	80137b4 <rmw_wait+0x94>
 80137ca:	b185      	cbz	r5, 80137ee <rmw_wait+0xce>
 80137cc:	6829      	ldr	r1, [r5, #0]
 80137ce:	b171      	cbz	r1, 80137ee <rmw_wait+0xce>
 80137d0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80137d4:	2300      	movs	r3, #0
 80137d6:	2001      	movs	r0, #1
 80137d8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80137dc:	6a12      	ldr	r2, [r2, #32]
 80137de:	6912      	ldr	r2, [r2, #16]
 80137e0:	3301      	adds	r3, #1
 80137e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80137e6:	4299      	cmp	r1, r3
 80137e8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80137ec:	d1f4      	bne.n	80137d8 <rmw_wait+0xb8>
 80137ee:	b34c      	cbz	r4, 8013844 <rmw_wait+0x124>
 80137f0:	4622      	mov	r2, r4
 80137f2:	2300      	movs	r3, #0
 80137f4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80137f8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80137fc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8013800:	440b      	add	r3, r1
 8013802:	b2db      	uxtb	r3, r3
 8013804:	2a00      	cmp	r2, #0
 8013806:	d1f5      	bne.n	80137f4 <rmw_wait+0xd4>
 8013808:	2b00      	cmp	r3, #0
 801380a:	f000 8084 	beq.w	8013916 <rmw_wait+0x1f6>
 801380e:	1c7a      	adds	r2, r7, #1
 8013810:	d00d      	beq.n	801382e <rmw_wait+0x10e>
 8013812:	ee07 7a90 	vmov	s15, r7
 8013816:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801381a:	ee07 3a90 	vmov	s15, r3
 801381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013826:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801382a:	ee17 7a90 	vmov	r7, s15
 801382e:	68a0      	ldr	r0, [r4, #8]
 8013830:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8013834:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8013838:	2b00      	cmp	r3, #0
 801383a:	f040 8090 	bne.w	801395e <rmw_wait+0x23e>
 801383e:	6864      	ldr	r4, [r4, #4]
 8013840:	2c00      	cmp	r4, #0
 8013842:	d1f4      	bne.n	801382e <rmw_wait+0x10e>
 8013844:	f1b9 0f00 	cmp.w	r9, #0
 8013848:	f000 80bc 	beq.w	80139c4 <rmw_wait+0x2a4>
 801384c:	f8d9 7000 	ldr.w	r7, [r9]
 8013850:	2f00      	cmp	r7, #0
 8013852:	f000 808e 	beq.w	8013972 <rmw_wait+0x252>
 8013856:	2400      	movs	r4, #0
 8013858:	4627      	mov	r7, r4
 801385a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801385e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013862:	f7f8 fc49 	bl	800c0f8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013866:	2800      	cmp	r0, #0
 8013868:	d05f      	beq.n	801392a <rmw_wait+0x20a>
 801386a:	f8d9 3000 	ldr.w	r3, [r9]
 801386e:	3401      	adds	r4, #1
 8013870:	42a3      	cmp	r3, r4
 8013872:	f04f 0701 	mov.w	r7, #1
 8013876:	d8f0      	bhi.n	801385a <rmw_wait+0x13a>
 8013878:	f1b8 0f00 	cmp.w	r8, #0
 801387c:	d012      	beq.n	80138a4 <rmw_wait+0x184>
 801387e:	f8d8 3000 	ldr.w	r3, [r8]
 8013882:	b17b      	cbz	r3, 80138a4 <rmw_wait+0x184>
 8013884:	2400      	movs	r4, #0
 8013886:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801388a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801388e:	f7f8 fc33 	bl	800c0f8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013892:	2800      	cmp	r0, #0
 8013894:	d051      	beq.n	801393a <rmw_wait+0x21a>
 8013896:	f8d8 3000 	ldr.w	r3, [r8]
 801389a:	3401      	adds	r4, #1
 801389c:	42a3      	cmp	r3, r4
 801389e:	f04f 0701 	mov.w	r7, #1
 80138a2:	d8f0      	bhi.n	8013886 <rmw_wait+0x166>
 80138a4:	b1dd      	cbz	r5, 80138de <rmw_wait+0x1be>
 80138a6:	682b      	ldr	r3, [r5, #0]
 80138a8:	b1cb      	cbz	r3, 80138de <rmw_wait+0x1be>
 80138aa:	2400      	movs	r4, #0
 80138ac:	686b      	ldr	r3, [r5, #4]
 80138ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80138b2:	f7f8 fc21 	bl	800c0f8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80138b6:	b158      	cbz	r0, 80138d0 <rmw_wait+0x1b0>
 80138b8:	682b      	ldr	r3, [r5, #0]
 80138ba:	3401      	adds	r4, #1
 80138bc:	42a3      	cmp	r3, r4
 80138be:	d969      	bls.n	8013994 <rmw_wait+0x274>
 80138c0:	686b      	ldr	r3, [r5, #4]
 80138c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80138c6:	2701      	movs	r7, #1
 80138c8:	f7f8 fc16 	bl	800c0f8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80138cc:	2800      	cmp	r0, #0
 80138ce:	d1f3      	bne.n	80138b8 <rmw_wait+0x198>
 80138d0:	e9d5 3200 	ldrd	r3, r2, [r5]
 80138d4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80138d8:	3401      	adds	r4, #1
 80138da:	42a3      	cmp	r3, r4
 80138dc:	d8e6      	bhi.n	80138ac <rmw_wait+0x18c>
 80138de:	b1a6      	cbz	r6, 801390a <rmw_wait+0x1ea>
 80138e0:	6834      	ldr	r4, [r6, #0]
 80138e2:	b194      	cbz	r4, 801390a <rmw_wait+0x1ea>
 80138e4:	2300      	movs	r3, #0
 80138e6:	461d      	mov	r5, r3
 80138e8:	e004      	b.n	80138f4 <rmw_wait+0x1d4>
 80138ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80138ee:	3301      	adds	r3, #1
 80138f0:	42a3      	cmp	r3, r4
 80138f2:	d00a      	beq.n	801390a <rmw_wait+0x1ea>
 80138f4:	6870      	ldr	r0, [r6, #4]
 80138f6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80138fa:	7c0a      	ldrb	r2, [r1, #16]
 80138fc:	2a00      	cmp	r2, #0
 80138fe:	d0f4      	beq.n	80138ea <rmw_wait+0x1ca>
 8013900:	3301      	adds	r3, #1
 8013902:	42a3      	cmp	r3, r4
 8013904:	740d      	strb	r5, [r1, #16]
 8013906:	4617      	mov	r7, r2
 8013908:	d1f4      	bne.n	80138f4 <rmw_wait+0x1d4>
 801390a:	2f00      	cmp	r7, #0
 801390c:	d03e      	beq.n	801398c <rmw_wait+0x26c>
 801390e:	2000      	movs	r0, #0
 8013910:	b009      	add	sp, #36	@ 0x24
 8013912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013916:	68a0      	ldr	r0, [r4, #8]
 8013918:	2100      	movs	r1, #0
 801391a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801391e:	f7f9 fcbd 	bl	800d29c <uxr_run_session_timeout>
 8013922:	6864      	ldr	r4, [r4, #4]
 8013924:	2c00      	cmp	r4, #0
 8013926:	d1f6      	bne.n	8013916 <rmw_wait+0x1f6>
 8013928:	e78c      	b.n	8013844 <rmw_wait+0x124>
 801392a:	e9d9 3200 	ldrd	r3, r2, [r9]
 801392e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013932:	3401      	adds	r4, #1
 8013934:	42a3      	cmp	r3, r4
 8013936:	d890      	bhi.n	801385a <rmw_wait+0x13a>
 8013938:	e79e      	b.n	8013878 <rmw_wait+0x158>
 801393a:	e9d8 3200 	ldrd	r3, r2, [r8]
 801393e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013942:	3401      	adds	r4, #1
 8013944:	429c      	cmp	r4, r3
 8013946:	d39e      	bcc.n	8013886 <rmw_wait+0x166>
 8013948:	e7ac      	b.n	80138a4 <rmw_wait+0x184>
 801394a:	2b00      	cmp	r3, #0
 801394c:	f47f aef3 	bne.w	8013736 <rmw_wait+0x16>
 8013950:	2800      	cmp	r0, #0
 8013952:	f47f aef0 	bne.w	8013736 <rmw_wait+0x16>
 8013956:	2900      	cmp	r1, #0
 8013958:	f47f aeed 	bne.w	8013736 <rmw_wait+0x16>
 801395c:	e7d7      	b.n	801390e <rmw_wait+0x1ee>
 801395e:	4639      	mov	r1, r7
 8013960:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013964:	f7f9 fcb4 	bl	800d2d0 <uxr_run_session_until_data>
 8013968:	6864      	ldr	r4, [r4, #4]
 801396a:	2c00      	cmp	r4, #0
 801396c:	f47f af5f 	bne.w	801382e <rmw_wait+0x10e>
 8013970:	e768      	b.n	8013844 <rmw_wait+0x124>
 8013972:	f1b8 0f00 	cmp.w	r8, #0
 8013976:	d032      	beq.n	80139de <rmw_wait+0x2be>
 8013978:	f8d8 3000 	ldr.w	r3, [r8]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d181      	bne.n	8013884 <rmw_wait+0x164>
 8013980:	461f      	mov	r7, r3
 8013982:	2d00      	cmp	r5, #0
 8013984:	d18f      	bne.n	80138a6 <rmw_wait+0x186>
 8013986:	462f      	mov	r7, r5
 8013988:	2e00      	cmp	r6, #0
 801398a:	d1a9      	bne.n	80138e0 <rmw_wait+0x1c0>
 801398c:	2002      	movs	r0, #2
 801398e:	b009      	add	sp, #36	@ 0x24
 8013990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013994:	2e00      	cmp	r6, #0
 8013996:	d0ba      	beq.n	801390e <rmw_wait+0x1ee>
 8013998:	6834      	ldr	r4, [r6, #0]
 801399a:	2701      	movs	r7, #1
 801399c:	2c00      	cmp	r4, #0
 801399e:	d1a1      	bne.n	80138e4 <rmw_wait+0x1c4>
 80139a0:	e7b5      	b.n	801390e <rmw_wait+0x1ee>
 80139a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80139a6:	f7fe fd9b 	bl	80124e0 <rmw_time_total_nsec>
 80139aa:	2300      	movs	r3, #0
 80139ac:	4a13      	ldr	r2, [pc, #76]	@ (80139fc <rmw_wait+0x2dc>)
 80139ae:	f7ed f96d 	bl	8000c8c <__aeabi_uldivmod>
 80139b2:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80139b6:	f171 0300 	sbcs.w	r3, r1, #0
 80139ba:	4607      	mov	r7, r0
 80139bc:	bfa8      	it	ge
 80139be:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80139c2:	e6c9      	b.n	8013758 <rmw_wait+0x38>
 80139c4:	f1b8 0f00 	cmp.w	r8, #0
 80139c8:	d009      	beq.n	80139de <rmw_wait+0x2be>
 80139ca:	f8d8 3000 	ldr.w	r3, [r8]
 80139ce:	464f      	mov	r7, r9
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	f47f af57 	bne.w	8013884 <rmw_wait+0x164>
 80139d6:	2d00      	cmp	r5, #0
 80139d8:	f47f af65 	bne.w	80138a6 <rmw_wait+0x186>
 80139dc:	e7d3      	b.n	8013986 <rmw_wait+0x266>
 80139de:	b17d      	cbz	r5, 8013a00 <rmw_wait+0x2e0>
 80139e0:	682b      	ldr	r3, [r5, #0]
 80139e2:	4647      	mov	r7, r8
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	f47f af60 	bne.w	80138aa <rmw_wait+0x18a>
 80139ea:	2e00      	cmp	r6, #0
 80139ec:	f47f af78 	bne.w	80138e0 <rmw_wait+0x1c0>
 80139f0:	e7cc      	b.n	801398c <rmw_wait+0x26c>
 80139f2:	bf00      	nop
 80139f4:	08017600 	.word	0x08017600
 80139f8:	2000dbd4 	.word	0x2000dbd4
 80139fc:	000f4240 	.word	0x000f4240
 8013a00:	2e00      	cmp	r6, #0
 8013a02:	d0c3      	beq.n	801398c <rmw_wait+0x26c>
 8013a04:	6834      	ldr	r4, [r6, #0]
 8013a06:	462f      	mov	r7, r5
 8013a08:	2c00      	cmp	r4, #0
 8013a0a:	f47f af6b 	bne.w	80138e4 <rmw_wait+0x1c4>
 8013a0e:	e7bd      	b.n	801398c <rmw_wait+0x26c>

08013a10 <rmw_create_wait_set>:
 8013a10:	b508      	push	{r3, lr}
 8013a12:	4803      	ldr	r0, [pc, #12]	@ (8013a20 <rmw_create_wait_set+0x10>)
 8013a14:	f7fe fedc 	bl	80127d0 <get_memory>
 8013a18:	b108      	cbz	r0, 8013a1e <rmw_create_wait_set+0xe>
 8013a1a:	6880      	ldr	r0, [r0, #8]
 8013a1c:	3010      	adds	r0, #16
 8013a1e:	bd08      	pop	{r3, pc}
 8013a20:	2000dc14 	.word	0x2000dc14

08013a24 <rmw_destroy_wait_set>:
 8013a24:	b508      	push	{r3, lr}
 8013a26:	4b08      	ldr	r3, [pc, #32]	@ (8013a48 <rmw_destroy_wait_set+0x24>)
 8013a28:	6819      	ldr	r1, [r3, #0]
 8013a2a:	b911      	cbnz	r1, 8013a32 <rmw_destroy_wait_set+0xe>
 8013a2c:	e00a      	b.n	8013a44 <rmw_destroy_wait_set+0x20>
 8013a2e:	6849      	ldr	r1, [r1, #4]
 8013a30:	b141      	cbz	r1, 8013a44 <rmw_destroy_wait_set+0x20>
 8013a32:	688b      	ldr	r3, [r1, #8]
 8013a34:	3310      	adds	r3, #16
 8013a36:	4298      	cmp	r0, r3
 8013a38:	d1f9      	bne.n	8013a2e <rmw_destroy_wait_set+0xa>
 8013a3a:	4803      	ldr	r0, [pc, #12]	@ (8013a48 <rmw_destroy_wait_set+0x24>)
 8013a3c:	f7fe fed8 	bl	80127f0 <put_memory>
 8013a40:	2000      	movs	r0, #0
 8013a42:	bd08      	pop	{r3, pc}
 8013a44:	2001      	movs	r0, #1
 8013a46:	bd08      	pop	{r3, pc}
 8013a48:	2000dc14 	.word	0x2000dc14

08013a4c <rmw_uros_epoch_nanos>:
 8013a4c:	4b05      	ldr	r3, [pc, #20]	@ (8013a64 <rmw_uros_epoch_nanos+0x18>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	b123      	cbz	r3, 8013a5c <rmw_uros_epoch_nanos+0x10>
 8013a52:	6898      	ldr	r0, [r3, #8]
 8013a54:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a58:	f7f9 b890 	b.w	800cb7c <uxr_epoch_nanos>
 8013a5c:	2000      	movs	r0, #0
 8013a5e:	2100      	movs	r1, #0
 8013a60:	4770      	bx	lr
 8013a62:	bf00      	nop
 8013a64:	2000dbd4 	.word	0x2000dbd4

08013a68 <std_msgs__msg__Int16__init>:
 8013a68:	3800      	subs	r0, #0
 8013a6a:	bf18      	it	ne
 8013a6c:	2001      	movne	r0, #1
 8013a6e:	4770      	bx	lr

08013a70 <std_msgs__msg__Int16__fini>:
 8013a70:	4770      	bx	lr
 8013a72:	bf00      	nop

08013a74 <ucdr_serialize_endian_array_char>:
 8013a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a78:	4619      	mov	r1, r3
 8013a7a:	461f      	mov	r7, r3
 8013a7c:	4605      	mov	r5, r0
 8013a7e:	4690      	mov	r8, r2
 8013a80:	f7f6 fd9a 	bl	800a5b8 <ucdr_check_buffer_available_for>
 8013a84:	b9e0      	cbnz	r0, 8013ac0 <ucdr_serialize_endian_array_char+0x4c>
 8013a86:	463e      	mov	r6, r7
 8013a88:	e009      	b.n	8013a9e <ucdr_serialize_endian_array_char+0x2a>
 8013a8a:	68a8      	ldr	r0, [r5, #8]
 8013a8c:	f002 fe81 	bl	8016792 <memcpy>
 8013a90:	68ab      	ldr	r3, [r5, #8]
 8013a92:	6928      	ldr	r0, [r5, #16]
 8013a94:	4423      	add	r3, r4
 8013a96:	4420      	add	r0, r4
 8013a98:	1b36      	subs	r6, r6, r4
 8013a9a:	60ab      	str	r3, [r5, #8]
 8013a9c:	6128      	str	r0, [r5, #16]
 8013a9e:	4631      	mov	r1, r6
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	4628      	mov	r0, r5
 8013aa4:	f7f6 fe10 	bl	800a6c8 <ucdr_check_final_buffer_behavior_array>
 8013aa8:	1bb9      	subs	r1, r7, r6
 8013aaa:	4441      	add	r1, r8
 8013aac:	4604      	mov	r4, r0
 8013aae:	4602      	mov	r2, r0
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	d1ea      	bne.n	8013a8a <ucdr_serialize_endian_array_char+0x16>
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	7da8      	ldrb	r0, [r5, #22]
 8013ab8:	756b      	strb	r3, [r5, #21]
 8013aba:	4058      	eors	r0, r3
 8013abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ac0:	463a      	mov	r2, r7
 8013ac2:	68a8      	ldr	r0, [r5, #8]
 8013ac4:	4641      	mov	r1, r8
 8013ac6:	f002 fe64 	bl	8016792 <memcpy>
 8013aca:	68aa      	ldr	r2, [r5, #8]
 8013acc:	692b      	ldr	r3, [r5, #16]
 8013ace:	443a      	add	r2, r7
 8013ad0:	443b      	add	r3, r7
 8013ad2:	60aa      	str	r2, [r5, #8]
 8013ad4:	612b      	str	r3, [r5, #16]
 8013ad6:	e7ed      	b.n	8013ab4 <ucdr_serialize_endian_array_char+0x40>

08013ad8 <ucdr_deserialize_endian_array_char>:
 8013ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013adc:	4619      	mov	r1, r3
 8013ade:	461f      	mov	r7, r3
 8013ae0:	4605      	mov	r5, r0
 8013ae2:	4690      	mov	r8, r2
 8013ae4:	f7f6 fd68 	bl	800a5b8 <ucdr_check_buffer_available_for>
 8013ae8:	b9e0      	cbnz	r0, 8013b24 <ucdr_deserialize_endian_array_char+0x4c>
 8013aea:	463e      	mov	r6, r7
 8013aec:	e009      	b.n	8013b02 <ucdr_deserialize_endian_array_char+0x2a>
 8013aee:	68a9      	ldr	r1, [r5, #8]
 8013af0:	f002 fe4f 	bl	8016792 <memcpy>
 8013af4:	68ab      	ldr	r3, [r5, #8]
 8013af6:	6928      	ldr	r0, [r5, #16]
 8013af8:	4423      	add	r3, r4
 8013afa:	4420      	add	r0, r4
 8013afc:	1b36      	subs	r6, r6, r4
 8013afe:	60ab      	str	r3, [r5, #8]
 8013b00:	6128      	str	r0, [r5, #16]
 8013b02:	2201      	movs	r2, #1
 8013b04:	4631      	mov	r1, r6
 8013b06:	4628      	mov	r0, r5
 8013b08:	f7f6 fdde 	bl	800a6c8 <ucdr_check_final_buffer_behavior_array>
 8013b0c:	4604      	mov	r4, r0
 8013b0e:	1bb8      	subs	r0, r7, r6
 8013b10:	4440      	add	r0, r8
 8013b12:	4622      	mov	r2, r4
 8013b14:	2c00      	cmp	r4, #0
 8013b16:	d1ea      	bne.n	8013aee <ucdr_deserialize_endian_array_char+0x16>
 8013b18:	2301      	movs	r3, #1
 8013b1a:	7da8      	ldrb	r0, [r5, #22]
 8013b1c:	756b      	strb	r3, [r5, #21]
 8013b1e:	4058      	eors	r0, r3
 8013b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b24:	463a      	mov	r2, r7
 8013b26:	68a9      	ldr	r1, [r5, #8]
 8013b28:	4640      	mov	r0, r8
 8013b2a:	f002 fe32 	bl	8016792 <memcpy>
 8013b2e:	68aa      	ldr	r2, [r5, #8]
 8013b30:	692b      	ldr	r3, [r5, #16]
 8013b32:	443a      	add	r2, r7
 8013b34:	443b      	add	r3, r7
 8013b36:	60aa      	str	r2, [r5, #8]
 8013b38:	612b      	str	r3, [r5, #16]
 8013b3a:	e7ed      	b.n	8013b18 <ucdr_deserialize_endian_array_char+0x40>

08013b3c <ucdr_serialize_array_uint8_t>:
 8013b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b40:	4688      	mov	r8, r1
 8013b42:	4611      	mov	r1, r2
 8013b44:	4617      	mov	r7, r2
 8013b46:	4605      	mov	r5, r0
 8013b48:	f7f6 fd36 	bl	800a5b8 <ucdr_check_buffer_available_for>
 8013b4c:	b9e0      	cbnz	r0, 8013b88 <ucdr_serialize_array_uint8_t+0x4c>
 8013b4e:	463e      	mov	r6, r7
 8013b50:	e009      	b.n	8013b66 <ucdr_serialize_array_uint8_t+0x2a>
 8013b52:	68a8      	ldr	r0, [r5, #8]
 8013b54:	f002 fe1d 	bl	8016792 <memcpy>
 8013b58:	68aa      	ldr	r2, [r5, #8]
 8013b5a:	692b      	ldr	r3, [r5, #16]
 8013b5c:	4422      	add	r2, r4
 8013b5e:	4423      	add	r3, r4
 8013b60:	1b36      	subs	r6, r6, r4
 8013b62:	60aa      	str	r2, [r5, #8]
 8013b64:	612b      	str	r3, [r5, #16]
 8013b66:	4631      	mov	r1, r6
 8013b68:	2201      	movs	r2, #1
 8013b6a:	4628      	mov	r0, r5
 8013b6c:	f7f6 fdac 	bl	800a6c8 <ucdr_check_final_buffer_behavior_array>
 8013b70:	1bb9      	subs	r1, r7, r6
 8013b72:	4441      	add	r1, r8
 8013b74:	4604      	mov	r4, r0
 8013b76:	4602      	mov	r2, r0
 8013b78:	2800      	cmp	r0, #0
 8013b7a:	d1ea      	bne.n	8013b52 <ucdr_serialize_array_uint8_t+0x16>
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	7da8      	ldrb	r0, [r5, #22]
 8013b80:	756b      	strb	r3, [r5, #21]
 8013b82:	4058      	eors	r0, r3
 8013b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b88:	463a      	mov	r2, r7
 8013b8a:	68a8      	ldr	r0, [r5, #8]
 8013b8c:	4641      	mov	r1, r8
 8013b8e:	f002 fe00 	bl	8016792 <memcpy>
 8013b92:	68aa      	ldr	r2, [r5, #8]
 8013b94:	692b      	ldr	r3, [r5, #16]
 8013b96:	443a      	add	r2, r7
 8013b98:	443b      	add	r3, r7
 8013b9a:	60aa      	str	r2, [r5, #8]
 8013b9c:	612b      	str	r3, [r5, #16]
 8013b9e:	e7ed      	b.n	8013b7c <ucdr_serialize_array_uint8_t+0x40>

08013ba0 <ucdr_serialize_endian_array_uint8_t>:
 8013ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ba4:	4619      	mov	r1, r3
 8013ba6:	461f      	mov	r7, r3
 8013ba8:	4605      	mov	r5, r0
 8013baa:	4690      	mov	r8, r2
 8013bac:	f7f6 fd04 	bl	800a5b8 <ucdr_check_buffer_available_for>
 8013bb0:	b9e0      	cbnz	r0, 8013bec <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013bb2:	463e      	mov	r6, r7
 8013bb4:	e009      	b.n	8013bca <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013bb6:	68a8      	ldr	r0, [r5, #8]
 8013bb8:	f002 fdeb 	bl	8016792 <memcpy>
 8013bbc:	68ab      	ldr	r3, [r5, #8]
 8013bbe:	6928      	ldr	r0, [r5, #16]
 8013bc0:	4423      	add	r3, r4
 8013bc2:	4420      	add	r0, r4
 8013bc4:	1b36      	subs	r6, r6, r4
 8013bc6:	60ab      	str	r3, [r5, #8]
 8013bc8:	6128      	str	r0, [r5, #16]
 8013bca:	4631      	mov	r1, r6
 8013bcc:	2201      	movs	r2, #1
 8013bce:	4628      	mov	r0, r5
 8013bd0:	f7f6 fd7a 	bl	800a6c8 <ucdr_check_final_buffer_behavior_array>
 8013bd4:	1bb9      	subs	r1, r7, r6
 8013bd6:	4441      	add	r1, r8
 8013bd8:	4604      	mov	r4, r0
 8013bda:	4602      	mov	r2, r0
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	d1ea      	bne.n	8013bb6 <ucdr_serialize_endian_array_uint8_t+0x16>
 8013be0:	2301      	movs	r3, #1
 8013be2:	7da8      	ldrb	r0, [r5, #22]
 8013be4:	756b      	strb	r3, [r5, #21]
 8013be6:	4058      	eors	r0, r3
 8013be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bec:	463a      	mov	r2, r7
 8013bee:	68a8      	ldr	r0, [r5, #8]
 8013bf0:	4641      	mov	r1, r8
 8013bf2:	f002 fdce 	bl	8016792 <memcpy>
 8013bf6:	68aa      	ldr	r2, [r5, #8]
 8013bf8:	692b      	ldr	r3, [r5, #16]
 8013bfa:	443a      	add	r2, r7
 8013bfc:	443b      	add	r3, r7
 8013bfe:	60aa      	str	r2, [r5, #8]
 8013c00:	612b      	str	r3, [r5, #16]
 8013c02:	e7ed      	b.n	8013be0 <ucdr_serialize_endian_array_uint8_t+0x40>

08013c04 <ucdr_deserialize_array_uint8_t>:
 8013c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c08:	4688      	mov	r8, r1
 8013c0a:	4611      	mov	r1, r2
 8013c0c:	4617      	mov	r7, r2
 8013c0e:	4605      	mov	r5, r0
 8013c10:	f7f6 fcd2 	bl	800a5b8 <ucdr_check_buffer_available_for>
 8013c14:	b9e0      	cbnz	r0, 8013c50 <ucdr_deserialize_array_uint8_t+0x4c>
 8013c16:	463e      	mov	r6, r7
 8013c18:	e009      	b.n	8013c2e <ucdr_deserialize_array_uint8_t+0x2a>
 8013c1a:	68a9      	ldr	r1, [r5, #8]
 8013c1c:	f002 fdb9 	bl	8016792 <memcpy>
 8013c20:	68aa      	ldr	r2, [r5, #8]
 8013c22:	692b      	ldr	r3, [r5, #16]
 8013c24:	4422      	add	r2, r4
 8013c26:	4423      	add	r3, r4
 8013c28:	1b36      	subs	r6, r6, r4
 8013c2a:	60aa      	str	r2, [r5, #8]
 8013c2c:	612b      	str	r3, [r5, #16]
 8013c2e:	2201      	movs	r2, #1
 8013c30:	4631      	mov	r1, r6
 8013c32:	4628      	mov	r0, r5
 8013c34:	f7f6 fd48 	bl	800a6c8 <ucdr_check_final_buffer_behavior_array>
 8013c38:	4604      	mov	r4, r0
 8013c3a:	1bb8      	subs	r0, r7, r6
 8013c3c:	4440      	add	r0, r8
 8013c3e:	4622      	mov	r2, r4
 8013c40:	2c00      	cmp	r4, #0
 8013c42:	d1ea      	bne.n	8013c1a <ucdr_deserialize_array_uint8_t+0x16>
 8013c44:	2301      	movs	r3, #1
 8013c46:	7da8      	ldrb	r0, [r5, #22]
 8013c48:	756b      	strb	r3, [r5, #21]
 8013c4a:	4058      	eors	r0, r3
 8013c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c50:	463a      	mov	r2, r7
 8013c52:	68a9      	ldr	r1, [r5, #8]
 8013c54:	4640      	mov	r0, r8
 8013c56:	f002 fd9c 	bl	8016792 <memcpy>
 8013c5a:	68aa      	ldr	r2, [r5, #8]
 8013c5c:	692b      	ldr	r3, [r5, #16]
 8013c5e:	443a      	add	r2, r7
 8013c60:	443b      	add	r3, r7
 8013c62:	60aa      	str	r2, [r5, #8]
 8013c64:	612b      	str	r3, [r5, #16]
 8013c66:	e7ed      	b.n	8013c44 <ucdr_deserialize_array_uint8_t+0x40>

08013c68 <ucdr_deserialize_endian_array_uint8_t>:
 8013c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c6c:	4619      	mov	r1, r3
 8013c6e:	461f      	mov	r7, r3
 8013c70:	4605      	mov	r5, r0
 8013c72:	4690      	mov	r8, r2
 8013c74:	f7f6 fca0 	bl	800a5b8 <ucdr_check_buffer_available_for>
 8013c78:	b9e0      	cbnz	r0, 8013cb4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8013c7a:	463e      	mov	r6, r7
 8013c7c:	e009      	b.n	8013c92 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8013c7e:	68a9      	ldr	r1, [r5, #8]
 8013c80:	f002 fd87 	bl	8016792 <memcpy>
 8013c84:	68ab      	ldr	r3, [r5, #8]
 8013c86:	6928      	ldr	r0, [r5, #16]
 8013c88:	4423      	add	r3, r4
 8013c8a:	4420      	add	r0, r4
 8013c8c:	1b36      	subs	r6, r6, r4
 8013c8e:	60ab      	str	r3, [r5, #8]
 8013c90:	6128      	str	r0, [r5, #16]
 8013c92:	2201      	movs	r2, #1
 8013c94:	4631      	mov	r1, r6
 8013c96:	4628      	mov	r0, r5
 8013c98:	f7f6 fd16 	bl	800a6c8 <ucdr_check_final_buffer_behavior_array>
 8013c9c:	4604      	mov	r4, r0
 8013c9e:	1bb8      	subs	r0, r7, r6
 8013ca0:	4440      	add	r0, r8
 8013ca2:	4622      	mov	r2, r4
 8013ca4:	2c00      	cmp	r4, #0
 8013ca6:	d1ea      	bne.n	8013c7e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013ca8:	2301      	movs	r3, #1
 8013caa:	7da8      	ldrb	r0, [r5, #22]
 8013cac:	756b      	strb	r3, [r5, #21]
 8013cae:	4058      	eors	r0, r3
 8013cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cb4:	463a      	mov	r2, r7
 8013cb6:	68a9      	ldr	r1, [r5, #8]
 8013cb8:	4640      	mov	r0, r8
 8013cba:	f002 fd6a 	bl	8016792 <memcpy>
 8013cbe:	68aa      	ldr	r2, [r5, #8]
 8013cc0:	692b      	ldr	r3, [r5, #16]
 8013cc2:	443a      	add	r2, r7
 8013cc4:	443b      	add	r3, r7
 8013cc6:	60aa      	str	r2, [r5, #8]
 8013cc8:	612b      	str	r3, [r5, #16]
 8013cca:	e7ed      	b.n	8013ca8 <ucdr_deserialize_endian_array_uint8_t+0x40>

08013ccc <ucdr_serialize_sequence_char>:
 8013ccc:	b570      	push	{r4, r5, r6, lr}
 8013cce:	4615      	mov	r5, r2
 8013cd0:	460e      	mov	r6, r1
 8013cd2:	7d01      	ldrb	r1, [r0, #20]
 8013cd4:	4604      	mov	r4, r0
 8013cd6:	f7f5 fe2f 	bl	8009938 <ucdr_serialize_endian_uint32_t>
 8013cda:	b90d      	cbnz	r5, 8013ce0 <ucdr_serialize_sequence_char+0x14>
 8013cdc:	2001      	movs	r0, #1
 8013cde:	bd70      	pop	{r4, r5, r6, pc}
 8013ce0:	7d21      	ldrb	r1, [r4, #20]
 8013ce2:	462b      	mov	r3, r5
 8013ce4:	4632      	mov	r2, r6
 8013ce6:	4620      	mov	r0, r4
 8013ce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013cec:	f7ff bec2 	b.w	8013a74 <ucdr_serialize_endian_array_char>

08013cf0 <ucdr_deserialize_sequence_char>:
 8013cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cf4:	461d      	mov	r5, r3
 8013cf6:	4616      	mov	r6, r2
 8013cf8:	460f      	mov	r7, r1
 8013cfa:	461a      	mov	r2, r3
 8013cfc:	7d01      	ldrb	r1, [r0, #20]
 8013cfe:	4604      	mov	r4, r0
 8013d00:	f7f5 ff42 	bl	8009b88 <ucdr_deserialize_endian_uint32_t>
 8013d04:	682b      	ldr	r3, [r5, #0]
 8013d06:	429e      	cmp	r6, r3
 8013d08:	bf3c      	itt	cc
 8013d0a:	2201      	movcc	r2, #1
 8013d0c:	75a2      	strbcc	r2, [r4, #22]
 8013d0e:	b913      	cbnz	r3, 8013d16 <ucdr_deserialize_sequence_char+0x26>
 8013d10:	2001      	movs	r0, #1
 8013d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d16:	7d21      	ldrb	r1, [r4, #20]
 8013d18:	463a      	mov	r2, r7
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d20:	f7ff beda 	b.w	8013ad8 <ucdr_deserialize_endian_array_char>

08013d24 <ucdr_serialize_sequence_uint8_t>:
 8013d24:	b570      	push	{r4, r5, r6, lr}
 8013d26:	4615      	mov	r5, r2
 8013d28:	460e      	mov	r6, r1
 8013d2a:	7d01      	ldrb	r1, [r0, #20]
 8013d2c:	4604      	mov	r4, r0
 8013d2e:	f7f5 fe03 	bl	8009938 <ucdr_serialize_endian_uint32_t>
 8013d32:	b90d      	cbnz	r5, 8013d38 <ucdr_serialize_sequence_uint8_t+0x14>
 8013d34:	2001      	movs	r0, #1
 8013d36:	bd70      	pop	{r4, r5, r6, pc}
 8013d38:	7d21      	ldrb	r1, [r4, #20]
 8013d3a:	462b      	mov	r3, r5
 8013d3c:	4632      	mov	r2, r6
 8013d3e:	4620      	mov	r0, r4
 8013d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d44:	f7ff bf2c 	b.w	8013ba0 <ucdr_serialize_endian_array_uint8_t>

08013d48 <ucdr_deserialize_sequence_uint8_t>:
 8013d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d4c:	461d      	mov	r5, r3
 8013d4e:	4616      	mov	r6, r2
 8013d50:	460f      	mov	r7, r1
 8013d52:	461a      	mov	r2, r3
 8013d54:	7d01      	ldrb	r1, [r0, #20]
 8013d56:	4604      	mov	r4, r0
 8013d58:	f7f5 ff16 	bl	8009b88 <ucdr_deserialize_endian_uint32_t>
 8013d5c:	682b      	ldr	r3, [r5, #0]
 8013d5e:	429e      	cmp	r6, r3
 8013d60:	bf3c      	itt	cc
 8013d62:	2201      	movcc	r2, #1
 8013d64:	75a2      	strbcc	r2, [r4, #22]
 8013d66:	b913      	cbnz	r3, 8013d6e <ucdr_deserialize_sequence_uint8_t+0x26>
 8013d68:	2001      	movs	r0, #1
 8013d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d6e:	7d21      	ldrb	r1, [r4, #20]
 8013d70:	463a      	mov	r2, r7
 8013d72:	4620      	mov	r0, r4
 8013d74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d78:	f7ff bf76 	b.w	8013c68 <ucdr_deserialize_endian_array_uint8_t>

08013d7c <ucdr_serialize_string>:
 8013d7c:	b510      	push	{r4, lr}
 8013d7e:	b082      	sub	sp, #8
 8013d80:	4604      	mov	r4, r0
 8013d82:	4608      	mov	r0, r1
 8013d84:	9101      	str	r1, [sp, #4]
 8013d86:	f7ec fa35 	bl	80001f4 <strlen>
 8013d8a:	9901      	ldr	r1, [sp, #4]
 8013d8c:	1c42      	adds	r2, r0, #1
 8013d8e:	4620      	mov	r0, r4
 8013d90:	b002      	add	sp, #8
 8013d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d96:	f7ff bf99 	b.w	8013ccc <ucdr_serialize_sequence_char>
 8013d9a:	bf00      	nop

08013d9c <ucdr_deserialize_string>:
 8013d9c:	b500      	push	{lr}
 8013d9e:	b083      	sub	sp, #12
 8013da0:	ab01      	add	r3, sp, #4
 8013da2:	f7ff ffa5 	bl	8013cf0 <ucdr_deserialize_sequence_char>
 8013da6:	b003      	add	sp, #12
 8013da8:	f85d fb04 	ldr.w	pc, [sp], #4

08013dac <get_custom_error>:
 8013dac:	4b01      	ldr	r3, [pc, #4]	@ (8013db4 <get_custom_error+0x8>)
 8013dae:	7818      	ldrb	r0, [r3, #0]
 8013db0:	4770      	bx	lr
 8013db2:	bf00      	nop
 8013db4:	2000dd90 	.word	0x2000dd90

08013db8 <recv_custom_msg>:
 8013db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dbc:	4693      	mov	fp, r2
 8013dbe:	b089      	sub	sp, #36	@ 0x24
 8013dc0:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8013dc4:	9305      	str	r3, [sp, #20]
 8013dc6:	468a      	mov	sl, r1
 8013dc8:	2100      	movs	r1, #0
 8013dca:	4604      	mov	r4, r0
 8013dcc:	f88d 101e 	strb.w	r1, [sp, #30]
 8013dd0:	b322      	cbz	r2, 8013e1c <recv_custom_msg+0x64>
 8013dd2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8013dd6:	f10d 081f 	add.w	r8, sp, #31
 8013dda:	af05      	add	r7, sp, #20
 8013ddc:	f10d 061e 	add.w	r6, sp, #30
 8013de0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8013de4:	e002      	b.n	8013dec <recv_custom_msg+0x34>
 8013de6:	9b05      	ldr	r3, [sp, #20]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	dd0f      	ble.n	8013e0c <recv_custom_msg+0x54>
 8013dec:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8013df0:	4623      	mov	r3, r4
 8013df2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8013df6:	e9cd 5600 	strd	r5, r6, [sp]
 8013dfa:	4622      	mov	r2, r4
 8013dfc:	4648      	mov	r0, r9
 8013dfe:	f001 f92d 	bl	801505c <uxr_read_framed_msg>
 8013e02:	2800      	cmp	r0, #0
 8013e04:	d0ef      	beq.n	8013de6 <recv_custom_msg+0x2e>
 8013e06:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013e0a:	b1b3      	cbz	r3, 8013e3a <recv_custom_msg+0x82>
 8013e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8013e4c <recv_custom_msg+0x94>)
 8013e0e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013e12:	701a      	strb	r2, [r3, #0]
 8013e14:	2000      	movs	r0, #0
 8013e16:	b009      	add	sp, #36	@ 0x24
 8013e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e1c:	f10d 021f 	add.w	r2, sp, #31
 8013e20:	9200      	str	r2, [sp, #0]
 8013e22:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8013e26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013e2a:	4601      	mov	r1, r0
 8013e2c:	47a8      	blx	r5
 8013e2e:	2800      	cmp	r0, #0
 8013e30:	d0ec      	beq.n	8013e0c <recv_custom_msg+0x54>
 8013e32:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d1e8      	bne.n	8013e0c <recv_custom_msg+0x54>
 8013e3a:	f8cb 0000 	str.w	r0, [fp]
 8013e3e:	2001      	movs	r0, #1
 8013e40:	f8ca 4000 	str.w	r4, [sl]
 8013e44:	b009      	add	sp, #36	@ 0x24
 8013e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e4a:	bf00      	nop
 8013e4c:	2000dd90 	.word	0x2000dd90

08013e50 <send_custom_msg>:
 8013e50:	b530      	push	{r4, r5, lr}
 8013e52:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8013e56:	b087      	sub	sp, #28
 8013e58:	4615      	mov	r5, r2
 8013e5a:	b974      	cbnz	r4, 8013e7a <send_custom_msg+0x2a>
 8013e5c:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8013e60:	f10d 0317 	add.w	r3, sp, #23
 8013e64:	47a0      	blx	r4
 8013e66:	b108      	cbz	r0, 8013e6c <send_custom_msg+0x1c>
 8013e68:	42a8      	cmp	r0, r5
 8013e6a:	d015      	beq.n	8013e98 <send_custom_msg+0x48>
 8013e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8013ea0 <send_custom_msg+0x50>)
 8013e6e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8013e72:	701a      	strb	r2, [r3, #0]
 8013e74:	2000      	movs	r0, #0
 8013e76:	b007      	add	sp, #28
 8013e78:	bd30      	pop	{r4, r5, pc}
 8013e7a:	460b      	mov	r3, r1
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	f10d 0117 	add.w	r1, sp, #23
 8013e82:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013e86:	4602      	mov	r2, r0
 8013e88:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8013e8c:	9500      	str	r5, [sp, #0]
 8013e8e:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8013e92:	f000 feeb 	bl	8014c6c <uxr_write_framed_msg>
 8013e96:	e7e6      	b.n	8013e66 <send_custom_msg+0x16>
 8013e98:	2001      	movs	r0, #1
 8013e9a:	b007      	add	sp, #28
 8013e9c:	bd30      	pop	{r4, r5, pc}
 8013e9e:	bf00      	nop
 8013ea0:	2000dd90 	.word	0x2000dd90

08013ea4 <uxr_set_custom_transport_callbacks>:
 8013ea4:	b410      	push	{r4}
 8013ea6:	9c01      	ldr	r4, [sp, #4]
 8013ea8:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8013eac:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8013eb0:	9b02      	ldr	r3, [sp, #8]
 8013eb2:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8013eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013eba:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8013ebe:	4770      	bx	lr

08013ec0 <uxr_init_custom_transport>:
 8013ec0:	b538      	push	{r3, r4, r5, lr}
 8013ec2:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8013ec6:	b303      	cbz	r3, 8013f0a <uxr_init_custom_transport+0x4a>
 8013ec8:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8013ecc:	4604      	mov	r4, r0
 8013ece:	b1e2      	cbz	r2, 8013f0a <uxr_init_custom_transport+0x4a>
 8013ed0:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8013ed4:	b1ca      	cbz	r2, 8013f0a <uxr_init_custom_transport+0x4a>
 8013ed6:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8013eda:	b1b2      	cbz	r2, 8013f0a <uxr_init_custom_transport+0x4a>
 8013edc:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8013ee0:	4798      	blx	r3
 8013ee2:	4605      	mov	r5, r0
 8013ee4:	b188      	cbz	r0, 8013f0a <uxr_init_custom_transport+0x4a>
 8013ee6:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8013eea:	b98b      	cbnz	r3, 8013f10 <uxr_init_custom_transport+0x50>
 8013eec:	490b      	ldr	r1, [pc, #44]	@ (8013f1c <uxr_init_custom_transport+0x5c>)
 8013eee:	4b0c      	ldr	r3, [pc, #48]	@ (8013f20 <uxr_init_custom_transport+0x60>)
 8013ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8013f24 <uxr_init_custom_transport+0x64>)
 8013ef2:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8013ef6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013efa:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8013efe:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8013f02:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8013f06:	4628      	mov	r0, r5
 8013f08:	bd38      	pop	{r3, r4, r5, pc}
 8013f0a:	2500      	movs	r5, #0
 8013f0c:	4628      	mov	r0, r5
 8013f0e:	bd38      	pop	{r3, r4, r5, pc}
 8013f10:	2100      	movs	r1, #0
 8013f12:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8013f16:	f000 fea3 	bl	8014c60 <uxr_init_framing_io>
 8013f1a:	e7e7      	b.n	8013eec <uxr_init_custom_transport+0x2c>
 8013f1c:	08013e51 	.word	0x08013e51
 8013f20:	08013db9 	.word	0x08013db9
 8013f24:	08013dad 	.word	0x08013dad

08013f28 <uxr_close_custom_transport>:
 8013f28:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8013f2c:	4718      	bx	r3
 8013f2e:	bf00      	nop

08013f30 <uxr_init_input_best_effort_stream>:
 8013f30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013f34:	8003      	strh	r3, [r0, #0]
 8013f36:	4770      	bx	lr

08013f38 <uxr_reset_input_best_effort_stream>:
 8013f38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013f3c:	8003      	strh	r3, [r0, #0]
 8013f3e:	4770      	bx	lr

08013f40 <uxr_receive_best_effort_message>:
 8013f40:	b538      	push	{r3, r4, r5, lr}
 8013f42:	4604      	mov	r4, r0
 8013f44:	8800      	ldrh	r0, [r0, #0]
 8013f46:	460d      	mov	r5, r1
 8013f48:	f000 fe72 	bl	8014c30 <uxr_seq_num_cmp>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8013f54:	bfb8      	it	lt
 8013f56:	8025      	strhlt	r5, [r4, #0]
 8013f58:	bd38      	pop	{r3, r4, r5, pc}
 8013f5a:	bf00      	nop

08013f5c <on_full_input_buffer>:
 8013f5c:	b570      	push	{r4, r5, r6, lr}
 8013f5e:	4605      	mov	r5, r0
 8013f60:	460c      	mov	r4, r1
 8013f62:	682b      	ldr	r3, [r5, #0]
 8013f64:	6809      	ldr	r1, [r1, #0]
 8013f66:	8920      	ldrh	r0, [r4, #8]
 8013f68:	6862      	ldr	r2, [r4, #4]
 8013f6a:	fbb2 f2f0 	udiv	r2, r2, r0
 8013f6e:	eba3 0c01 	sub.w	ip, r3, r1
 8013f72:	fbbc fcf2 	udiv	ip, ip, r2
 8013f76:	f10c 0c01 	add.w	ip, ip, #1
 8013f7a:	fa1f f38c 	uxth.w	r3, ip
 8013f7e:	fbb3 f6f0 	udiv	r6, r3, r0
 8013f82:	fb00 3316 	mls	r3, r0, r6, r3
 8013f86:	b29b      	uxth	r3, r3
 8013f88:	fb02 f303 	mul.w	r3, r2, r3
 8013f8c:	1d18      	adds	r0, r3, #4
 8013f8e:	4408      	add	r0, r1
 8013f90:	7d26      	ldrb	r6, [r4, #20]
 8013f92:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013f96:	b116      	cbz	r6, 8013f9e <on_full_input_buffer+0x42>
 8013f98:	2600      	movs	r6, #0
 8013f9a:	f840 6c04 	str.w	r6, [r0, #-4]
 8013f9e:	2a03      	cmp	r2, #3
 8013fa0:	d801      	bhi.n	8013fa6 <on_full_input_buffer+0x4a>
 8013fa2:	2001      	movs	r0, #1
 8013fa4:	bd70      	pop	{r4, r5, r6, pc}
 8013fa6:	3308      	adds	r3, #8
 8013fa8:	4419      	add	r1, r3
 8013faa:	4628      	mov	r0, r5
 8013fac:	692b      	ldr	r3, [r5, #16]
 8013fae:	3a04      	subs	r2, #4
 8013fb0:	f7f6 fb4e 	bl	800a650 <ucdr_init_buffer_origin>
 8013fb4:	4628      	mov	r0, r5
 8013fb6:	4903      	ldr	r1, [pc, #12]	@ (8013fc4 <on_full_input_buffer+0x68>)
 8013fb8:	4622      	mov	r2, r4
 8013fba:	f7f6 fb25 	bl	800a608 <ucdr_set_on_full_buffer_callback>
 8013fbe:	2000      	movs	r0, #0
 8013fc0:	bd70      	pop	{r4, r5, r6, pc}
 8013fc2:	bf00      	nop
 8013fc4:	08013f5d 	.word	0x08013f5d

08013fc8 <uxr_init_input_reliable_stream>:
 8013fc8:	b500      	push	{lr}
 8013fca:	e9c0 1200 	strd	r1, r2, [r0]
 8013fce:	f04f 0e00 	mov.w	lr, #0
 8013fd2:	9a01      	ldr	r2, [sp, #4]
 8013fd4:	8103      	strh	r3, [r0, #8]
 8013fd6:	6102      	str	r2, [r0, #16]
 8013fd8:	f880 e014 	strb.w	lr, [r0, #20]
 8013fdc:	b1d3      	cbz	r3, 8014014 <uxr_init_input_reliable_stream+0x4c>
 8013fde:	f8c1 e000 	str.w	lr, [r1]
 8013fe2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013fe6:	f1bc 0f01 	cmp.w	ip, #1
 8013fea:	d913      	bls.n	8014014 <uxr_init_input_reliable_stream+0x4c>
 8013fec:	2301      	movs	r3, #1
 8013fee:	fbb3 f1fc 	udiv	r1, r3, ip
 8013ff2:	fb0c 3111 	mls	r1, ip, r1, r3
 8013ff6:	b289      	uxth	r1, r1
 8013ff8:	6842      	ldr	r2, [r0, #4]
 8013ffa:	fbb2 f2fc 	udiv	r2, r2, ip
 8013ffe:	fb01 f202 	mul.w	r2, r1, r2
 8014002:	6801      	ldr	r1, [r0, #0]
 8014004:	f841 e002 	str.w	lr, [r1, r2]
 8014008:	3301      	adds	r3, #1
 801400a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801400e:	b29b      	uxth	r3, r3
 8014010:	459c      	cmp	ip, r3
 8014012:	d8ec      	bhi.n	8013fee <uxr_init_input_reliable_stream+0x26>
 8014014:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014018:	60c3      	str	r3, [r0, #12]
 801401a:	f85d fb04 	ldr.w	pc, [sp], #4
 801401e:	bf00      	nop

08014020 <uxr_reset_input_reliable_stream>:
 8014020:	8901      	ldrh	r1, [r0, #8]
 8014022:	b1e9      	cbz	r1, 8014060 <uxr_reset_input_reliable_stream+0x40>
 8014024:	f04f 0c00 	mov.w	ip, #0
 8014028:	b500      	push	{lr}
 801402a:	4663      	mov	r3, ip
 801402c:	46e6      	mov	lr, ip
 801402e:	fbb3 f2f1 	udiv	r2, r3, r1
 8014032:	fb01 3312 	mls	r3, r1, r2, r3
 8014036:	b29b      	uxth	r3, r3
 8014038:	6842      	ldr	r2, [r0, #4]
 801403a:	fbb2 f2f1 	udiv	r2, r2, r1
 801403e:	fb02 f303 	mul.w	r3, r2, r3
 8014042:	6802      	ldr	r2, [r0, #0]
 8014044:	f842 e003 	str.w	lr, [r2, r3]
 8014048:	f10c 0c01 	add.w	ip, ip, #1
 801404c:	8901      	ldrh	r1, [r0, #8]
 801404e:	fa1f f38c 	uxth.w	r3, ip
 8014052:	4299      	cmp	r1, r3
 8014054:	d8eb      	bhi.n	801402e <uxr_reset_input_reliable_stream+0xe>
 8014056:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801405a:	60c3      	str	r3, [r0, #12]
 801405c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014064:	60c3      	str	r3, [r0, #12]
 8014066:	4770      	bx	lr

08014068 <uxr_receive_reliable_message>:
 8014068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801406c:	4604      	mov	r4, r0
 801406e:	460d      	mov	r5, r1
 8014070:	8901      	ldrh	r1, [r0, #8]
 8014072:	8980      	ldrh	r0, [r0, #12]
 8014074:	4690      	mov	r8, r2
 8014076:	461f      	mov	r7, r3
 8014078:	f000 fdd2 	bl	8014c20 <uxr_seq_num_add>
 801407c:	4629      	mov	r1, r5
 801407e:	4606      	mov	r6, r0
 8014080:	89a0      	ldrh	r0, [r4, #12]
 8014082:	f000 fdd5 	bl	8014c30 <uxr_seq_num_cmp>
 8014086:	2800      	cmp	r0, #0
 8014088:	db0a      	blt.n	80140a0 <uxr_receive_reliable_message+0x38>
 801408a:	2600      	movs	r6, #0
 801408c:	89e0      	ldrh	r0, [r4, #14]
 801408e:	4629      	mov	r1, r5
 8014090:	f000 fdce 	bl	8014c30 <uxr_seq_num_cmp>
 8014094:	2800      	cmp	r0, #0
 8014096:	da00      	bge.n	801409a <uxr_receive_reliable_message+0x32>
 8014098:	81e5      	strh	r5, [r4, #14]
 801409a:	4630      	mov	r0, r6
 801409c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140a0:	4630      	mov	r0, r6
 80140a2:	4629      	mov	r1, r5
 80140a4:	f000 fdc4 	bl	8014c30 <uxr_seq_num_cmp>
 80140a8:	2800      	cmp	r0, #0
 80140aa:	dbee      	blt.n	801408a <uxr_receive_reliable_message+0x22>
 80140ac:	6923      	ldr	r3, [r4, #16]
 80140ae:	4640      	mov	r0, r8
 80140b0:	4798      	blx	r3
 80140b2:	2101      	movs	r1, #1
 80140b4:	4681      	mov	r9, r0
 80140b6:	89a0      	ldrh	r0, [r4, #12]
 80140b8:	f000 fdb2 	bl	8014c20 <uxr_seq_num_add>
 80140bc:	f1b9 0f00 	cmp.w	r9, #0
 80140c0:	d101      	bne.n	80140c6 <uxr_receive_reliable_message+0x5e>
 80140c2:	4285      	cmp	r5, r0
 80140c4:	d047      	beq.n	8014156 <uxr_receive_reliable_message+0xee>
 80140c6:	8922      	ldrh	r2, [r4, #8]
 80140c8:	fbb5 f0f2 	udiv	r0, r5, r2
 80140cc:	fb02 5010 	mls	r0, r2, r0, r5
 80140d0:	b280      	uxth	r0, r0
 80140d2:	6863      	ldr	r3, [r4, #4]
 80140d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80140d8:	fb00 f303 	mul.w	r3, r0, r3
 80140dc:	6820      	ldr	r0, [r4, #0]
 80140de:	3304      	adds	r3, #4
 80140e0:	4418      	add	r0, r3
 80140e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d1cf      	bne.n	801408a <uxr_receive_reliable_message+0x22>
 80140ea:	4641      	mov	r1, r8
 80140ec:	463a      	mov	r2, r7
 80140ee:	f002 fb50 	bl	8016792 <memcpy>
 80140f2:	8921      	ldrh	r1, [r4, #8]
 80140f4:	fbb5 f2f1 	udiv	r2, r5, r1
 80140f8:	fb01 5212 	mls	r2, r1, r2, r5
 80140fc:	b292      	uxth	r2, r2
 80140fe:	6863      	ldr	r3, [r4, #4]
 8014100:	fbb3 f3f1 	udiv	r3, r3, r1
 8014104:	fb02 f303 	mul.w	r3, r2, r3
 8014108:	6822      	ldr	r2, [r4, #0]
 801410a:	50d7      	str	r7, [r2, r3]
 801410c:	9a08      	ldr	r2, [sp, #32]
 801410e:	2301      	movs	r3, #1
 8014110:	7013      	strb	r3, [r2, #0]
 8014112:	f1b9 0f00 	cmp.w	r9, #0
 8014116:	d0b8      	beq.n	801408a <uxr_receive_reliable_message+0x22>
 8014118:	89a6      	ldrh	r6, [r4, #12]
 801411a:	4630      	mov	r0, r6
 801411c:	2101      	movs	r1, #1
 801411e:	f000 fd7f 	bl	8014c20 <uxr_seq_num_add>
 8014122:	8922      	ldrh	r2, [r4, #8]
 8014124:	6863      	ldr	r3, [r4, #4]
 8014126:	fbb3 f3f2 	udiv	r3, r3, r2
 801412a:	4606      	mov	r6, r0
 801412c:	fbb0 f0f2 	udiv	r0, r0, r2
 8014130:	fb02 6010 	mls	r0, r2, r0, r6
 8014134:	b280      	uxth	r0, r0
 8014136:	fb00 f303 	mul.w	r3, r0, r3
 801413a:	6820      	ldr	r0, [r4, #0]
 801413c:	3304      	adds	r3, #4
 801413e:	4418      	add	r0, r3
 8014140:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d0a0      	beq.n	801408a <uxr_receive_reliable_message+0x22>
 8014148:	6923      	ldr	r3, [r4, #16]
 801414a:	4798      	blx	r3
 801414c:	2802      	cmp	r0, #2
 801414e:	d008      	beq.n	8014162 <uxr_receive_reliable_message+0xfa>
 8014150:	2801      	cmp	r0, #1
 8014152:	d0e2      	beq.n	801411a <uxr_receive_reliable_message+0xb2>
 8014154:	e799      	b.n	801408a <uxr_receive_reliable_message+0x22>
 8014156:	9b08      	ldr	r3, [sp, #32]
 8014158:	81a5      	strh	r5, [r4, #12]
 801415a:	2601      	movs	r6, #1
 801415c:	f883 9000 	strb.w	r9, [r3]
 8014160:	e794      	b.n	801408c <uxr_receive_reliable_message+0x24>
 8014162:	2601      	movs	r6, #1
 8014164:	e792      	b.n	801408c <uxr_receive_reliable_message+0x24>
 8014166:	bf00      	nop

08014168 <uxr_next_input_reliable_buffer_available>:
 8014168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801416c:	4604      	mov	r4, r0
 801416e:	460f      	mov	r7, r1
 8014170:	8980      	ldrh	r0, [r0, #12]
 8014172:	2101      	movs	r1, #1
 8014174:	4690      	mov	r8, r2
 8014176:	f000 fd53 	bl	8014c20 <uxr_seq_num_add>
 801417a:	8922      	ldrh	r2, [r4, #8]
 801417c:	fbb0 f6f2 	udiv	r6, r0, r2
 8014180:	fb02 0616 	mls	r6, r2, r6, r0
 8014184:	b2b6      	uxth	r6, r6
 8014186:	6863      	ldr	r3, [r4, #4]
 8014188:	fbb3 f3f2 	udiv	r3, r3, r2
 801418c:	fb06 f303 	mul.w	r3, r6, r3
 8014190:	6826      	ldr	r6, [r4, #0]
 8014192:	3304      	adds	r3, #4
 8014194:	441e      	add	r6, r3
 8014196:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801419a:	f1b9 0f00 	cmp.w	r9, #0
 801419e:	d023      	beq.n	80141e8 <uxr_next_input_reliable_buffer_available+0x80>
 80141a0:	6923      	ldr	r3, [r4, #16]
 80141a2:	4605      	mov	r5, r0
 80141a4:	4630      	mov	r0, r6
 80141a6:	4798      	blx	r3
 80141a8:	4682      	mov	sl, r0
 80141aa:	b300      	cbz	r0, 80141ee <uxr_next_input_reliable_buffer_available+0x86>
 80141ac:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80141b0:	2101      	movs	r1, #1
 80141b2:	4650      	mov	r0, sl
 80141b4:	f000 fd34 	bl	8014c20 <uxr_seq_num_add>
 80141b8:	8921      	ldrh	r1, [r4, #8]
 80141ba:	fbb0 f2f1 	udiv	r2, r0, r1
 80141be:	4682      	mov	sl, r0
 80141c0:	fb01 0212 	mls	r2, r1, r2, r0
 80141c4:	e9d4 0300 	ldrd	r0, r3, [r4]
 80141c8:	b292      	uxth	r2, r2
 80141ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80141ce:	fb02 f303 	mul.w	r3, r2, r3
 80141d2:	3304      	adds	r3, #4
 80141d4:	4418      	add	r0, r3
 80141d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80141da:	b12b      	cbz	r3, 80141e8 <uxr_next_input_reliable_buffer_available+0x80>
 80141dc:	6923      	ldr	r3, [r4, #16]
 80141de:	4798      	blx	r3
 80141e0:	2802      	cmp	r0, #2
 80141e2:	d01b      	beq.n	801421c <uxr_next_input_reliable_buffer_available+0xb4>
 80141e4:	2801      	cmp	r0, #1
 80141e6:	d0e3      	beq.n	80141b0 <uxr_next_input_reliable_buffer_available+0x48>
 80141e8:	2000      	movs	r0, #0
 80141ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141ee:	464a      	mov	r2, r9
 80141f0:	4631      	mov	r1, r6
 80141f2:	4638      	mov	r0, r7
 80141f4:	f7f6 fa34 	bl	800a660 <ucdr_init_buffer>
 80141f8:	8921      	ldrh	r1, [r4, #8]
 80141fa:	fbb5 f2f1 	udiv	r2, r5, r1
 80141fe:	fb01 5212 	mls	r2, r1, r2, r5
 8014202:	b292      	uxth	r2, r2
 8014204:	6863      	ldr	r3, [r4, #4]
 8014206:	fbb3 f3f1 	udiv	r3, r3, r1
 801420a:	fb02 f303 	mul.w	r3, r2, r3
 801420e:	6822      	ldr	r2, [r4, #0]
 8014210:	f842 a003 	str.w	sl, [r2, r3]
 8014214:	2001      	movs	r0, #1
 8014216:	81a5      	strh	r5, [r4, #12]
 8014218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801421c:	8920      	ldrh	r0, [r4, #8]
 801421e:	fbb5 f3f0 	udiv	r3, r5, r0
 8014222:	fb00 5513 	mls	r5, r0, r3, r5
 8014226:	b2ad      	uxth	r5, r5
 8014228:	6863      	ldr	r3, [r4, #4]
 801422a:	fbb3 f3f0 	udiv	r3, r3, r0
 801422e:	fb03 f505 	mul.w	r5, r3, r5
 8014232:	6823      	ldr	r3, [r4, #0]
 8014234:	2000      	movs	r0, #0
 8014236:	5158      	str	r0, [r3, r5]
 8014238:	eb06 0108 	add.w	r1, r6, r8
 801423c:	eba9 0208 	sub.w	r2, r9, r8
 8014240:	4638      	mov	r0, r7
 8014242:	f7f6 fa0d 	bl	800a660 <ucdr_init_buffer>
 8014246:	4638      	mov	r0, r7
 8014248:	4903      	ldr	r1, [pc, #12]	@ (8014258 <uxr_next_input_reliable_buffer_available+0xf0>)
 801424a:	4622      	mov	r2, r4
 801424c:	f7f6 f9dc 	bl	800a608 <ucdr_set_on_full_buffer_callback>
 8014250:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8014254:	2001      	movs	r0, #1
 8014256:	e7c8      	b.n	80141ea <uxr_next_input_reliable_buffer_available+0x82>
 8014258:	08013f5d 	.word	0x08013f5d

0801425c <uxr_process_heartbeat>:
 801425c:	b538      	push	{r3, r4, r5, lr}
 801425e:	4611      	mov	r1, r2
 8014260:	4604      	mov	r4, r0
 8014262:	89c0      	ldrh	r0, [r0, #14]
 8014264:	4615      	mov	r5, r2
 8014266:	f000 fce3 	bl	8014c30 <uxr_seq_num_cmp>
 801426a:	2800      	cmp	r0, #0
 801426c:	bfb8      	it	lt
 801426e:	81e5      	strhlt	r5, [r4, #14]
 8014270:	bd38      	pop	{r3, r4, r5, pc}
 8014272:	bf00      	nop

08014274 <uxr_compute_acknack>:
 8014274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014278:	8903      	ldrh	r3, [r0, #8]
 801427a:	8985      	ldrh	r5, [r0, #12]
 801427c:	4604      	mov	r4, r0
 801427e:	460e      	mov	r6, r1
 8014280:	b1d3      	cbz	r3, 80142b8 <uxr_compute_acknack+0x44>
 8014282:	4628      	mov	r0, r5
 8014284:	2701      	movs	r7, #1
 8014286:	e003      	b.n	8014290 <uxr_compute_acknack+0x1c>
 8014288:	4567      	cmp	r7, ip
 801428a:	d215      	bcs.n	80142b8 <uxr_compute_acknack+0x44>
 801428c:	89a0      	ldrh	r0, [r4, #12]
 801428e:	3701      	adds	r7, #1
 8014290:	b2b9      	uxth	r1, r7
 8014292:	f000 fcc5 	bl	8014c20 <uxr_seq_num_add>
 8014296:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801429a:	fbb0 f3fc 	udiv	r3, r0, ip
 801429e:	fb0c 0313 	mls	r3, ip, r3, r0
 80142a2:	b29a      	uxth	r2, r3
 80142a4:	e9d4 1300 	ldrd	r1, r3, [r4]
 80142a8:	fbb3 f3fc 	udiv	r3, r3, ip
 80142ac:	fb02 f303 	mul.w	r3, r2, r3
 80142b0:	58cb      	ldr	r3, [r1, r3]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d1e8      	bne.n	8014288 <uxr_compute_acknack+0x14>
 80142b6:	4605      	mov	r5, r0
 80142b8:	8035      	strh	r5, [r6, #0]
 80142ba:	2101      	movs	r1, #1
 80142bc:	4628      	mov	r0, r5
 80142be:	89e7      	ldrh	r7, [r4, #14]
 80142c0:	f000 fcb2 	bl	8014c28 <uxr_seq_num_sub>
 80142c4:	4601      	mov	r1, r0
 80142c6:	4638      	mov	r0, r7
 80142c8:	f000 fcae 	bl	8014c28 <uxr_seq_num_sub>
 80142cc:	4605      	mov	r5, r0
 80142ce:	b318      	cbz	r0, 8014318 <uxr_compute_acknack+0xa4>
 80142d0:	f04f 0900 	mov.w	r9, #0
 80142d4:	464f      	mov	r7, r9
 80142d6:	f04f 0801 	mov.w	r8, #1
 80142da:	fa1f f189 	uxth.w	r1, r9
 80142de:	8830      	ldrh	r0, [r6, #0]
 80142e0:	f000 fc9e 	bl	8014c20 <uxr_seq_num_add>
 80142e4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80142e8:	fbb0 f3fc 	udiv	r3, r0, ip
 80142ec:	e9d4 1200 	ldrd	r1, r2, [r4]
 80142f0:	fb03 001c 	mls	r0, r3, ip, r0
 80142f4:	b283      	uxth	r3, r0
 80142f6:	fbb2 f2fc 	udiv	r2, r2, ip
 80142fa:	fb02 f303 	mul.w	r3, r2, r3
 80142fe:	fa08 f209 	lsl.w	r2, r8, r9
 8014302:	58cb      	ldr	r3, [r1, r3]
 8014304:	f109 0901 	add.w	r9, r9, #1
 8014308:	b90b      	cbnz	r3, 801430e <uxr_compute_acknack+0x9a>
 801430a:	4317      	orrs	r7, r2
 801430c:	b2bf      	uxth	r7, r7
 801430e:	454d      	cmp	r5, r9
 8014310:	d1e3      	bne.n	80142da <uxr_compute_acknack+0x66>
 8014312:	4638      	mov	r0, r7
 8014314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014318:	4607      	mov	r7, r0
 801431a:	4638      	mov	r0, r7
 801431c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014320 <uxr_init_output_best_effort_stream>:
 8014320:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8014324:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8014328:	6001      	str	r1, [r0, #0]
 801432a:	7303      	strb	r3, [r0, #12]
 801432c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014330:	4770      	bx	lr
 8014332:	bf00      	nop

08014334 <uxr_reset_output_best_effort_stream>:
 8014334:	7b02      	ldrb	r2, [r0, #12]
 8014336:	6042      	str	r2, [r0, #4]
 8014338:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801433c:	81c3      	strh	r3, [r0, #14]
 801433e:	4770      	bx	lr

08014340 <uxr_prepare_best_effort_buffer_to_write>:
 8014340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014342:	4604      	mov	r4, r0
 8014344:	b083      	sub	sp, #12
 8014346:	6840      	ldr	r0, [r0, #4]
 8014348:	460d      	mov	r5, r1
 801434a:	4616      	mov	r6, r2
 801434c:	f7f9 fd0c 	bl	800dd68 <uxr_submessage_padding>
 8014350:	6863      	ldr	r3, [r4, #4]
 8014352:	4418      	add	r0, r3
 8014354:	68a3      	ldr	r3, [r4, #8]
 8014356:	1942      	adds	r2, r0, r5
 8014358:	4293      	cmp	r3, r2
 801435a:	bf2c      	ite	cs
 801435c:	2701      	movcs	r7, #1
 801435e:	2700      	movcc	r7, #0
 8014360:	d202      	bcs.n	8014368 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8014362:	4638      	mov	r0, r7
 8014364:	b003      	add	sp, #12
 8014366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014368:	9000      	str	r0, [sp, #0]
 801436a:	6821      	ldr	r1, [r4, #0]
 801436c:	4630      	mov	r0, r6
 801436e:	2300      	movs	r3, #0
 8014370:	f7f6 f964 	bl	800a63c <ucdr_init_buffer_origin_offset>
 8014374:	6861      	ldr	r1, [r4, #4]
 8014376:	4638      	mov	r0, r7
 8014378:	4429      	add	r1, r5
 801437a:	6061      	str	r1, [r4, #4]
 801437c:	b003      	add	sp, #12
 801437e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014380 <uxr_prepare_best_effort_buffer_to_send>:
 8014380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014384:	4604      	mov	r4, r0
 8014386:	461d      	mov	r5, r3
 8014388:	6840      	ldr	r0, [r0, #4]
 801438a:	7b23      	ldrb	r3, [r4, #12]
 801438c:	4298      	cmp	r0, r3
 801438e:	bf8c      	ite	hi
 8014390:	2601      	movhi	r6, #1
 8014392:	2600      	movls	r6, #0
 8014394:	d802      	bhi.n	801439c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8014396:	4630      	mov	r0, r6
 8014398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801439c:	4688      	mov	r8, r1
 801439e:	89e0      	ldrh	r0, [r4, #14]
 80143a0:	2101      	movs	r1, #1
 80143a2:	4617      	mov	r7, r2
 80143a4:	f000 fc3c 	bl	8014c20 <uxr_seq_num_add>
 80143a8:	6823      	ldr	r3, [r4, #0]
 80143aa:	81e0      	strh	r0, [r4, #14]
 80143ac:	8028      	strh	r0, [r5, #0]
 80143ae:	f8c8 3000 	str.w	r3, [r8]
 80143b2:	6863      	ldr	r3, [r4, #4]
 80143b4:	603b      	str	r3, [r7, #0]
 80143b6:	7b23      	ldrb	r3, [r4, #12]
 80143b8:	6063      	str	r3, [r4, #4]
 80143ba:	4630      	mov	r0, r6
 80143bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080143c0 <on_full_output_buffer>:
 80143c0:	b538      	push	{r3, r4, r5, lr}
 80143c2:	6802      	ldr	r2, [r0, #0]
 80143c4:	460c      	mov	r4, r1
 80143c6:	6809      	ldr	r1, [r1, #0]
 80143c8:	8923      	ldrh	r3, [r4, #8]
 80143ca:	eba2 0c01 	sub.w	ip, r2, r1
 80143ce:	6862      	ldr	r2, [r4, #4]
 80143d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80143d4:	fbbc fcf2 	udiv	ip, ip, r2
 80143d8:	f10c 0c01 	add.w	ip, ip, #1
 80143dc:	fa1f fc8c 	uxth.w	ip, ip
 80143e0:	fbbc fef3 	udiv	lr, ip, r3
 80143e4:	fb03 c31e 	mls	r3, r3, lr, ip
 80143e8:	b29b      	uxth	r3, r3
 80143ea:	fb02 f303 	mul.w	r3, r2, r3
 80143ee:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80143f2:	58ca      	ldr	r2, [r1, r3]
 80143f4:	4463      	add	r3, ip
 80143f6:	eba2 020c 	sub.w	r2, r2, ip
 80143fa:	3308      	adds	r3, #8
 80143fc:	4605      	mov	r5, r0
 80143fe:	4419      	add	r1, r3
 8014400:	3a04      	subs	r2, #4
 8014402:	6903      	ldr	r3, [r0, #16]
 8014404:	f7f6 f924 	bl	800a650 <ucdr_init_buffer_origin>
 8014408:	4628      	mov	r0, r5
 801440a:	4903      	ldr	r1, [pc, #12]	@ (8014418 <on_full_output_buffer+0x58>)
 801440c:	4622      	mov	r2, r4
 801440e:	f7f6 f8fb 	bl	800a608 <ucdr_set_on_full_buffer_callback>
 8014412:	2000      	movs	r0, #0
 8014414:	bd38      	pop	{r3, r4, r5, pc}
 8014416:	bf00      	nop
 8014418:	080143c1 	.word	0x080143c1

0801441c <uxr_init_output_reliable_stream>:
 801441c:	b410      	push	{r4}
 801441e:	f89d c004 	ldrb.w	ip, [sp, #4]
 8014422:	8103      	strh	r3, [r0, #8]
 8014424:	e9c0 1200 	strd	r1, r2, [r0]
 8014428:	f880 c00c 	strb.w	ip, [r0, #12]
 801442c:	b1d3      	cbz	r3, 8014464 <uxr_init_output_reliable_stream+0x48>
 801442e:	f8c1 c000 	str.w	ip, [r1]
 8014432:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014436:	f1bc 0f01 	cmp.w	ip, #1
 801443a:	d913      	bls.n	8014464 <uxr_init_output_reliable_stream+0x48>
 801443c:	2301      	movs	r3, #1
 801443e:	fbb3 f1fc 	udiv	r1, r3, ip
 8014442:	fb0c 3111 	mls	r1, ip, r1, r3
 8014446:	b289      	uxth	r1, r1
 8014448:	6842      	ldr	r2, [r0, #4]
 801444a:	6804      	ldr	r4, [r0, #0]
 801444c:	fbb2 f2fc 	udiv	r2, r2, ip
 8014450:	fb01 f202 	mul.w	r2, r1, r2
 8014454:	7b01      	ldrb	r1, [r0, #12]
 8014456:	50a1      	str	r1, [r4, r2]
 8014458:	3301      	adds	r3, #1
 801445a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801445e:	b29b      	uxth	r3, r3
 8014460:	459c      	cmp	ip, r3
 8014462:	d8ec      	bhi.n	801443e <uxr_init_output_reliable_stream+0x22>
 8014464:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014468:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801446c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014470:	4905      	ldr	r1, [pc, #20]	@ (8014488 <uxr_init_output_reliable_stream+0x6c>)
 8014472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014476:	f8c0 100e 	str.w	r1, [r0, #14]
 801447a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801447e:	2300      	movs	r3, #0
 8014480:	8242      	strh	r2, [r0, #18]
 8014482:	8403      	strh	r3, [r0, #32]
 8014484:	4770      	bx	lr
 8014486:	bf00      	nop
 8014488:	ffff0000 	.word	0xffff0000

0801448c <uxr_reset_output_reliable_stream>:
 801448c:	8901      	ldrh	r1, [r0, #8]
 801448e:	b1b1      	cbz	r1, 80144be <uxr_reset_output_reliable_stream+0x32>
 8014490:	f04f 0c00 	mov.w	ip, #0
 8014494:	4663      	mov	r3, ip
 8014496:	fbb3 f2f1 	udiv	r2, r3, r1
 801449a:	fb01 3312 	mls	r3, r1, r2, r3
 801449e:	b29b      	uxth	r3, r3
 80144a0:	6842      	ldr	r2, [r0, #4]
 80144a2:	fbb2 f2f1 	udiv	r2, r2, r1
 80144a6:	6801      	ldr	r1, [r0, #0]
 80144a8:	fb02 f303 	mul.w	r3, r2, r3
 80144ac:	7b02      	ldrb	r2, [r0, #12]
 80144ae:	50ca      	str	r2, [r1, r3]
 80144b0:	f10c 0c01 	add.w	ip, ip, #1
 80144b4:	8901      	ldrh	r1, [r0, #8]
 80144b6:	fa1f f38c 	uxth.w	r3, ip
 80144ba:	4299      	cmp	r1, r3
 80144bc:	d8eb      	bhi.n	8014496 <uxr_reset_output_reliable_stream+0xa>
 80144be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80144c2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80144c6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80144ca:	4904      	ldr	r1, [pc, #16]	@ (80144dc <uxr_reset_output_reliable_stream+0x50>)
 80144cc:	f8c0 100e 	str.w	r1, [r0, #14]
 80144d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80144d4:	2300      	movs	r3, #0
 80144d6:	8242      	strh	r2, [r0, #18]
 80144d8:	8403      	strh	r3, [r0, #32]
 80144da:	4770      	bx	lr
 80144dc:	ffff0000 	.word	0xffff0000

080144e0 <uxr_prepare_reliable_buffer_to_write>:
 80144e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144e4:	4604      	mov	r4, r0
 80144e6:	b091      	sub	sp, #68	@ 0x44
 80144e8:	8900      	ldrh	r0, [r0, #8]
 80144ea:	89e6      	ldrh	r6, [r4, #14]
 80144ec:	6823      	ldr	r3, [r4, #0]
 80144ee:	9204      	str	r2, [sp, #16]
 80144f0:	fbb6 f2f0 	udiv	r2, r6, r0
 80144f4:	fb00 6212 	mls	r2, r0, r2, r6
 80144f8:	b292      	uxth	r2, r2
 80144fa:	6865      	ldr	r5, [r4, #4]
 80144fc:	fbb5 f5f0 	udiv	r5, r5, r0
 8014500:	fb05 3202 	mla	r2, r5, r2, r3
 8014504:	3204      	adds	r2, #4
 8014506:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801450a:	f894 900c 	ldrb.w	r9, [r4, #12]
 801450e:	9203      	str	r2, [sp, #12]
 8014510:	468b      	mov	fp, r1
 8014512:	1f2f      	subs	r7, r5, #4
 8014514:	2800      	cmp	r0, #0
 8014516:	f000 814c 	beq.w	80147b2 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801451a:	f04f 0c00 	mov.w	ip, #0
 801451e:	46e2      	mov	sl, ip
 8014520:	4661      	mov	r1, ip
 8014522:	fbb1 f2f0 	udiv	r2, r1, r0
 8014526:	fb00 1212 	mls	r2, r0, r2, r1
 801452a:	b292      	uxth	r2, r2
 801452c:	fb05 f202 	mul.w	r2, r5, r2
 8014530:	f10c 0c01 	add.w	ip, ip, #1
 8014534:	589a      	ldr	r2, [r3, r2]
 8014536:	454a      	cmp	r2, r9
 8014538:	bf08      	it	eq
 801453a:	f10a 0a01 	addeq.w	sl, sl, #1
 801453e:	fa1f f18c 	uxth.w	r1, ip
 8014542:	bf08      	it	eq
 8014544:	fa1f fa8a 	uxtheq.w	sl, sl
 8014548:	4281      	cmp	r1, r0
 801454a:	d3ea      	bcc.n	8014522 <uxr_prepare_reliable_buffer_to_write+0x42>
 801454c:	4640      	mov	r0, r8
 801454e:	2104      	movs	r1, #4
 8014550:	f8cd a014 	str.w	sl, [sp, #20]
 8014554:	f7f6 f888 	bl	800a668 <ucdr_alignment>
 8014558:	4480      	add	r8, r0
 801455a:	eb08 020b 	add.w	r2, r8, fp
 801455e:	42ba      	cmp	r2, r7
 8014560:	f240 80cd 	bls.w	80146fe <uxr_prepare_reliable_buffer_to_write+0x21e>
 8014564:	7b22      	ldrb	r2, [r4, #12]
 8014566:	445a      	add	r2, fp
 8014568:	42ba      	cmp	r2, r7
 801456a:	f240 80b5 	bls.w	80146d8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801456e:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8014572:	33fc      	adds	r3, #252	@ 0xfc
 8014574:	b2ba      	uxth	r2, r7
 8014576:	4413      	add	r3, r2
 8014578:	b29b      	uxth	r3, r3
 801457a:	fb0a f903 	mul.w	r9, sl, r3
 801457e:	45d9      	cmp	r9, fp
 8014580:	9305      	str	r3, [sp, #20]
 8014582:	9306      	str	r3, [sp, #24]
 8014584:	f0c0 80b7 	bcc.w	80146f6 <uxr_prepare_reliable_buffer_to_write+0x216>
 8014588:	f108 0304 	add.w	r3, r8, #4
 801458c:	42bb      	cmp	r3, r7
 801458e:	f080 80db 	bcs.w	8014748 <uxr_prepare_reliable_buffer_to_write+0x268>
 8014592:	f1a2 0904 	sub.w	r9, r2, #4
 8014596:	eba9 0908 	sub.w	r9, r9, r8
 801459a:	9b05      	ldr	r3, [sp, #20]
 801459c:	fa1f f989 	uxth.w	r9, r9
 80145a0:	ebab 0b09 	sub.w	fp, fp, r9
 80145a4:	fbbb f2f3 	udiv	r2, fp, r3
 80145a8:	fb03 b312 	mls	r3, r3, r2, fp
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	f000 80c8 	beq.w	8014742 <uxr_prepare_reliable_buffer_to_write+0x262>
 80145b2:	3201      	adds	r2, #1
 80145b4:	b292      	uxth	r2, r2
 80145b6:	9306      	str	r3, [sp, #24]
 80145b8:	4552      	cmp	r2, sl
 80145ba:	f200 809c 	bhi.w	80146f6 <uxr_prepare_reliable_buffer_to_write+0x216>
 80145be:	f10d 0b20 	add.w	fp, sp, #32
 80145c2:	2a00      	cmp	r2, #0
 80145c4:	d042      	beq.n	801464c <uxr_prepare_reliable_buffer_to_write+0x16c>
 80145c6:	f8cd 801c 	str.w	r8, [sp, #28]
 80145ca:	f04f 0a00 	mov.w	sl, #0
 80145ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80145d2:	9505      	str	r5, [sp, #20]
 80145d4:	f10d 0b20 	add.w	fp, sp, #32
 80145d8:	4615      	mov	r5, r2
 80145da:	e000      	b.n	80145de <uxr_prepare_reliable_buffer_to_write+0xfe>
 80145dc:	46c1      	mov	r9, r8
 80145de:	8920      	ldrh	r0, [r4, #8]
 80145e0:	fbb6 f2f0 	udiv	r2, r6, r0
 80145e4:	fb00 6112 	mls	r1, r0, r2, r6
 80145e8:	b28a      	uxth	r2, r1
 80145ea:	6863      	ldr	r3, [r4, #4]
 80145ec:	fbb3 f1f0 	udiv	r1, r3, r0
 80145f0:	6823      	ldr	r3, [r4, #0]
 80145f2:	fb02 f101 	mul.w	r1, r2, r1
 80145f6:	3104      	adds	r1, #4
 80145f8:	4419      	add	r1, r3
 80145fa:	4658      	mov	r0, fp
 80145fc:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8014600:	9200      	str	r2, [sp, #0]
 8014602:	2300      	movs	r3, #0
 8014604:	463a      	mov	r2, r7
 8014606:	f7f6 f819 	bl	800a63c <ucdr_init_buffer_origin_offset>
 801460a:	464a      	mov	r2, r9
 801460c:	2300      	movs	r3, #0
 801460e:	210d      	movs	r1, #13
 8014610:	4658      	mov	r0, fp
 8014612:	f7f9 fb69 	bl	800dce8 <uxr_buffer_submessage_header>
 8014616:	8921      	ldrh	r1, [r4, #8]
 8014618:	fbb6 f2f1 	udiv	r2, r6, r1
 801461c:	fb01 6212 	mls	r2, r1, r2, r6
 8014620:	b292      	uxth	r2, r2
 8014622:	6863      	ldr	r3, [r4, #4]
 8014624:	fbb3 f3f1 	udiv	r3, r3, r1
 8014628:	fb02 f303 	mul.w	r3, r2, r3
 801462c:	6822      	ldr	r2, [r4, #0]
 801462e:	4630      	mov	r0, r6
 8014630:	50d7      	str	r7, [r2, r3]
 8014632:	2101      	movs	r1, #1
 8014634:	f000 faf4 	bl	8014c20 <uxr_seq_num_add>
 8014638:	f10a 0a01 	add.w	sl, sl, #1
 801463c:	fa1f f38a 	uxth.w	r3, sl
 8014640:	429d      	cmp	r5, r3
 8014642:	4606      	mov	r6, r0
 8014644:	d8ca      	bhi.n	80145dc <uxr_prepare_reliable_buffer_to_write+0xfc>
 8014646:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801464a:	9d05      	ldr	r5, [sp, #20]
 801464c:	8920      	ldrh	r0, [r4, #8]
 801464e:	fbb6 f3f0 	udiv	r3, r6, r0
 8014652:	fb00 6313 	mls	r3, r0, r3, r6
 8014656:	b299      	uxth	r1, r3
 8014658:	6863      	ldr	r3, [r4, #4]
 801465a:	fbb3 f3f0 	udiv	r3, r3, r0
 801465e:	fb01 f303 	mul.w	r3, r1, r3
 8014662:	6821      	ldr	r1, [r4, #0]
 8014664:	3304      	adds	r3, #4
 8014666:	4419      	add	r1, r3
 8014668:	463a      	mov	r2, r7
 801466a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801466e:	9000      	str	r0, [sp, #0]
 8014670:	2300      	movs	r3, #0
 8014672:	4658      	mov	r0, fp
 8014674:	f7f5 ffe2 	bl	800a63c <ucdr_init_buffer_origin_offset>
 8014678:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801467c:	4658      	mov	r0, fp
 801467e:	fa1f f289 	uxth.w	r2, r9
 8014682:	2302      	movs	r3, #2
 8014684:	210d      	movs	r1, #13
 8014686:	f7f9 fb2f 	bl	800dce8 <uxr_buffer_submessage_header>
 801468a:	9b03      	ldr	r3, [sp, #12]
 801468c:	8927      	ldrh	r7, [r4, #8]
 801468e:	7b20      	ldrb	r0, [r4, #12]
 8014690:	f108 0104 	add.w	r1, r8, #4
 8014694:	440b      	add	r3, r1
 8014696:	4619      	mov	r1, r3
 8014698:	fbb6 f3f7 	udiv	r3, r6, r7
 801469c:	fb07 6313 	mls	r3, r7, r3, r6
 80146a0:	f1a5 0208 	sub.w	r2, r5, #8
 80146a4:	b29d      	uxth	r5, r3
 80146a6:	3004      	adds	r0, #4
 80146a8:	6863      	ldr	r3, [r4, #4]
 80146aa:	fbb3 f3f7 	udiv	r3, r3, r7
 80146ae:	fb05 f303 	mul.w	r3, r5, r3
 80146b2:	6825      	ldr	r5, [r4, #0]
 80146b4:	4448      	add	r0, r9
 80146b6:	50e8      	str	r0, [r5, r3]
 80146b8:	9d04      	ldr	r5, [sp, #16]
 80146ba:	eba2 0208 	sub.w	r2, r2, r8
 80146be:	4628      	mov	r0, r5
 80146c0:	f7f5 ffce 	bl	800a660 <ucdr_init_buffer>
 80146c4:	4628      	mov	r0, r5
 80146c6:	493c      	ldr	r1, [pc, #240]	@ (80147b8 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80146c8:	4622      	mov	r2, r4
 80146ca:	f7f5 ff9d 	bl	800a608 <ucdr_set_on_full_buffer_callback>
 80146ce:	2001      	movs	r0, #1
 80146d0:	81e6      	strh	r6, [r4, #14]
 80146d2:	b011      	add	sp, #68	@ 0x44
 80146d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146d8:	2101      	movs	r1, #1
 80146da:	89e0      	ldrh	r0, [r4, #14]
 80146dc:	f000 faa0 	bl	8014c20 <uxr_seq_num_add>
 80146e0:	8921      	ldrh	r1, [r4, #8]
 80146e2:	4605      	mov	r5, r0
 80146e4:	8a60      	ldrh	r0, [r4, #18]
 80146e6:	f000 fa9b 	bl	8014c20 <uxr_seq_num_add>
 80146ea:	4601      	mov	r1, r0
 80146ec:	4628      	mov	r0, r5
 80146ee:	f000 fa9f 	bl	8014c30 <uxr_seq_num_cmp>
 80146f2:	2800      	cmp	r0, #0
 80146f4:	dd42      	ble.n	801477c <uxr_prepare_reliable_buffer_to_write+0x29c>
 80146f6:	2000      	movs	r0, #0
 80146f8:	b011      	add	sp, #68	@ 0x44
 80146fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146fe:	8921      	ldrh	r1, [r4, #8]
 8014700:	8a60      	ldrh	r0, [r4, #18]
 8014702:	9205      	str	r2, [sp, #20]
 8014704:	f000 fa8c 	bl	8014c20 <uxr_seq_num_add>
 8014708:	4601      	mov	r1, r0
 801470a:	4630      	mov	r0, r6
 801470c:	f000 fa90 	bl	8014c30 <uxr_seq_num_cmp>
 8014710:	2800      	cmp	r0, #0
 8014712:	9a05      	ldr	r2, [sp, #20]
 8014714:	dcef      	bgt.n	80146f6 <uxr_prepare_reliable_buffer_to_write+0x216>
 8014716:	8927      	ldrh	r7, [r4, #8]
 8014718:	fbb6 f3f7 	udiv	r3, r6, r7
 801471c:	fb07 6313 	mls	r3, r7, r3, r6
 8014720:	b29d      	uxth	r5, r3
 8014722:	6863      	ldr	r3, [r4, #4]
 8014724:	6824      	ldr	r4, [r4, #0]
 8014726:	fbb3 f3f7 	udiv	r3, r3, r7
 801472a:	fb05 f303 	mul.w	r3, r5, r3
 801472e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8014732:	50e2      	str	r2, [r4, r3]
 8014734:	2300      	movs	r3, #0
 8014736:	f8cd 8000 	str.w	r8, [sp]
 801473a:	f7f5 ff7f 	bl	800a63c <ucdr_init_buffer_origin_offset>
 801473e:	2001      	movs	r0, #1
 8014740:	e7da      	b.n	80146f8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8014742:	b293      	uxth	r3, r2
 8014744:	461a      	mov	r2, r3
 8014746:	e737      	b.n	80145b8 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8014748:	4630      	mov	r0, r6
 801474a:	2101      	movs	r1, #1
 801474c:	9207      	str	r2, [sp, #28]
 801474e:	f000 fa67 	bl	8014c20 <uxr_seq_num_add>
 8014752:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014756:	fbb0 f1fc 	udiv	r1, r0, ip
 801475a:	fb0c 0111 	mls	r1, ip, r1, r0
 801475e:	4606      	mov	r6, r0
 8014760:	b288      	uxth	r0, r1
 8014762:	6863      	ldr	r3, [r4, #4]
 8014764:	fbb3 f1fc 	udiv	r1, r3, ip
 8014768:	6823      	ldr	r3, [r4, #0]
 801476a:	9a07      	ldr	r2, [sp, #28]
 801476c:	fb00 f101 	mul.w	r1, r0, r1
 8014770:	3104      	adds	r1, #4
 8014772:	440b      	add	r3, r1
 8014774:	9303      	str	r3, [sp, #12]
 8014776:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801477a:	e70a      	b.n	8014592 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801477c:	8921      	ldrh	r1, [r4, #8]
 801477e:	fbb5 f3f1 	udiv	r3, r5, r1
 8014782:	fb01 5313 	mls	r3, r1, r3, r5
 8014786:	b29a      	uxth	r2, r3
 8014788:	6863      	ldr	r3, [r4, #4]
 801478a:	fbb3 f3f1 	udiv	r3, r3, r1
 801478e:	6821      	ldr	r1, [r4, #0]
 8014790:	9804      	ldr	r0, [sp, #16]
 8014792:	fb02 f303 	mul.w	r3, r2, r3
 8014796:	3304      	adds	r3, #4
 8014798:	7b22      	ldrb	r2, [r4, #12]
 801479a:	4419      	add	r1, r3
 801479c:	445a      	add	r2, fp
 801479e:	f841 2c04 	str.w	r2, [r1, #-4]
 80147a2:	7b23      	ldrb	r3, [r4, #12]
 80147a4:	9300      	str	r3, [sp, #0]
 80147a6:	2300      	movs	r3, #0
 80147a8:	f7f5 ff48 	bl	800a63c <ucdr_init_buffer_origin_offset>
 80147ac:	81e5      	strh	r5, [r4, #14]
 80147ae:	2001      	movs	r0, #1
 80147b0:	e7a2      	b.n	80146f8 <uxr_prepare_reliable_buffer_to_write+0x218>
 80147b2:	4682      	mov	sl, r0
 80147b4:	e6ca      	b.n	801454c <uxr_prepare_reliable_buffer_to_write+0x6c>
 80147b6:	bf00      	nop
 80147b8:	080143c1 	.word	0x080143c1

080147bc <uxr_prepare_next_reliable_buffer_to_send>:
 80147bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147be:	4604      	mov	r4, r0
 80147c0:	460f      	mov	r7, r1
 80147c2:	8a00      	ldrh	r0, [r0, #16]
 80147c4:	2101      	movs	r1, #1
 80147c6:	4616      	mov	r6, r2
 80147c8:	461d      	mov	r5, r3
 80147ca:	f000 fa29 	bl	8014c20 <uxr_seq_num_add>
 80147ce:	8028      	strh	r0, [r5, #0]
 80147d0:	8922      	ldrh	r2, [r4, #8]
 80147d2:	fbb0 f3f2 	udiv	r3, r0, r2
 80147d6:	fb02 0c13 	mls	ip, r2, r3, r0
 80147da:	fa1f fc8c 	uxth.w	ip, ip
 80147de:	6863      	ldr	r3, [r4, #4]
 80147e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80147e4:	fb0c fc03 	mul.w	ip, ip, r3
 80147e8:	6823      	ldr	r3, [r4, #0]
 80147ea:	89e1      	ldrh	r1, [r4, #14]
 80147ec:	f10c 0c04 	add.w	ip, ip, #4
 80147f0:	4463      	add	r3, ip
 80147f2:	603b      	str	r3, [r7, #0]
 80147f4:	6823      	ldr	r3, [r4, #0]
 80147f6:	449c      	add	ip, r3
 80147f8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80147fc:	6033      	str	r3, [r6, #0]
 80147fe:	f000 fa17 	bl	8014c30 <uxr_seq_num_cmp>
 8014802:	2800      	cmp	r0, #0
 8014804:	dd01      	ble.n	801480a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8014806:	2000      	movs	r0, #0
 8014808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801480a:	7b23      	ldrb	r3, [r4, #12]
 801480c:	6832      	ldr	r2, [r6, #0]
 801480e:	429a      	cmp	r2, r3
 8014810:	d9f9      	bls.n	8014806 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014812:	8a61      	ldrh	r1, [r4, #18]
 8014814:	8a20      	ldrh	r0, [r4, #16]
 8014816:	f000 fa07 	bl	8014c28 <uxr_seq_num_sub>
 801481a:	8923      	ldrh	r3, [r4, #8]
 801481c:	4283      	cmp	r3, r0
 801481e:	d0f2      	beq.n	8014806 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014820:	8828      	ldrh	r0, [r5, #0]
 8014822:	89e3      	ldrh	r3, [r4, #14]
 8014824:	8220      	strh	r0, [r4, #16]
 8014826:	4298      	cmp	r0, r3
 8014828:	d001      	beq.n	801482e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801482a:	2001      	movs	r0, #1
 801482c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801482e:	2101      	movs	r1, #1
 8014830:	f000 f9f6 	bl	8014c20 <uxr_seq_num_add>
 8014834:	81e0      	strh	r0, [r4, #14]
 8014836:	2001      	movs	r0, #1
 8014838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801483a:	bf00      	nop

0801483c <uxr_update_output_stream_heartbeat_timestamp>:
 801483c:	b570      	push	{r4, r5, r6, lr}
 801483e:	8a01      	ldrh	r1, [r0, #16]
 8014840:	4604      	mov	r4, r0
 8014842:	8a40      	ldrh	r0, [r0, #18]
 8014844:	4615      	mov	r5, r2
 8014846:	461e      	mov	r6, r3
 8014848:	f000 f9f2 	bl	8014c30 <uxr_seq_num_cmp>
 801484c:	2800      	cmp	r0, #0
 801484e:	db07      	blt.n	8014860 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014850:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014854:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014858:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801485c:	2000      	movs	r0, #0
 801485e:	bd70      	pop	{r4, r5, r6, pc}
 8014860:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014864:	b940      	cbnz	r0, 8014878 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8014866:	2301      	movs	r3, #1
 8014868:	f884 3020 	strb.w	r3, [r4, #32]
 801486c:	3564      	adds	r5, #100	@ 0x64
 801486e:	f146 0600 	adc.w	r6, r6, #0
 8014872:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014876:	bd70      	pop	{r4, r5, r6, pc}
 8014878:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801487c:	4295      	cmp	r5, r2
 801487e:	eb76 0303 	sbcs.w	r3, r6, r3
 8014882:	bfa5      	ittet	ge
 8014884:	3001      	addge	r0, #1
 8014886:	f884 0020 	strbge.w	r0, [r4, #32]
 801488a:	2000      	movlt	r0, #0
 801488c:	2001      	movge	r0, #1
 801488e:	e7ed      	b.n	801486c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08014890 <uxr_begin_output_nack_buffer_it>:
 8014890:	8a40      	ldrh	r0, [r0, #18]
 8014892:	4770      	bx	lr

08014894 <uxr_next_reliable_nack_buffer_to_send>:
 8014894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014898:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801489c:	b082      	sub	sp, #8
 801489e:	f1b8 0f00 	cmp.w	r8, #0
 80148a2:	d011      	beq.n	80148c8 <uxr_next_reliable_nack_buffer_to_send+0x34>
 80148a4:	4604      	mov	r4, r0
 80148a6:	8818      	ldrh	r0, [r3, #0]
 80148a8:	460e      	mov	r6, r1
 80148aa:	4617      	mov	r7, r2
 80148ac:	461d      	mov	r5, r3
 80148ae:	2101      	movs	r1, #1
 80148b0:	f000 f9b6 	bl	8014c20 <uxr_seq_num_add>
 80148b4:	8028      	strh	r0, [r5, #0]
 80148b6:	8a21      	ldrh	r1, [r4, #16]
 80148b8:	f000 f9ba 	bl	8014c30 <uxr_seq_num_cmp>
 80148bc:	2800      	cmp	r0, #0
 80148be:	dd07      	ble.n	80148d0 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80148c0:	f04f 0800 	mov.w	r8, #0
 80148c4:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 80148c8:	4640      	mov	r0, r8
 80148ca:	b002      	add	sp, #8
 80148cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148d0:	8921      	ldrh	r1, [r4, #8]
 80148d2:	8828      	ldrh	r0, [r5, #0]
 80148d4:	6823      	ldr	r3, [r4, #0]
 80148d6:	fbb0 f2f1 	udiv	r2, r0, r1
 80148da:	fb01 0c12 	mls	ip, r1, r2, r0
 80148de:	fa1f f28c 	uxth.w	r2, ip
 80148e2:	9301      	str	r3, [sp, #4]
 80148e4:	6863      	ldr	r3, [r4, #4]
 80148e6:	fbb3 fcf1 	udiv	ip, r3, r1
 80148ea:	9b01      	ldr	r3, [sp, #4]
 80148ec:	fb02 fc0c 	mul.w	ip, r2, ip
 80148f0:	f10c 0c04 	add.w	ip, ip, #4
 80148f4:	4463      	add	r3, ip
 80148f6:	6033      	str	r3, [r6, #0]
 80148f8:	6823      	ldr	r3, [r4, #0]
 80148fa:	4463      	add	r3, ip
 80148fc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014900:	603b      	str	r3, [r7, #0]
 8014902:	7b22      	ldrb	r2, [r4, #12]
 8014904:	429a      	cmp	r2, r3
 8014906:	d0d2      	beq.n	80148ae <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8014908:	4640      	mov	r0, r8
 801490a:	b002      	add	sp, #8
 801490c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014910 <uxr_process_acknack>:
 8014910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014912:	4604      	mov	r4, r0
 8014914:	460e      	mov	r6, r1
 8014916:	4610      	mov	r0, r2
 8014918:	2101      	movs	r1, #1
 801491a:	f000 f985 	bl	8014c28 <uxr_seq_num_sub>
 801491e:	8a61      	ldrh	r1, [r4, #18]
 8014920:	f000 f982 	bl	8014c28 <uxr_seq_num_sub>
 8014924:	b1c0      	cbz	r0, 8014958 <uxr_process_acknack+0x48>
 8014926:	4605      	mov	r5, r0
 8014928:	2700      	movs	r7, #0
 801492a:	2101      	movs	r1, #1
 801492c:	8a60      	ldrh	r0, [r4, #18]
 801492e:	f000 f977 	bl	8014c20 <uxr_seq_num_add>
 8014932:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014936:	fbb0 f1fc 	udiv	r1, r0, ip
 801493a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801493e:	fb0c 0111 	mls	r1, ip, r1, r0
 8014942:	b289      	uxth	r1, r1
 8014944:	3701      	adds	r7, #1
 8014946:	fbb3 f3fc 	udiv	r3, r3, ip
 801494a:	fb01 f303 	mul.w	r3, r1, r3
 801494e:	42bd      	cmp	r5, r7
 8014950:	7b21      	ldrb	r1, [r4, #12]
 8014952:	8260      	strh	r0, [r4, #18]
 8014954:	50d1      	str	r1, [r2, r3]
 8014956:	d1e8      	bne.n	801492a <uxr_process_acknack+0x1a>
 8014958:	3e00      	subs	r6, #0
 801495a:	f04f 0300 	mov.w	r3, #0
 801495e:	bf18      	it	ne
 8014960:	2601      	movne	r6, #1
 8014962:	f884 3020 	strb.w	r3, [r4, #32]
 8014966:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801496a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801496c <uxr_is_output_up_to_date>:
 801496c:	8a01      	ldrh	r1, [r0, #16]
 801496e:	8a40      	ldrh	r0, [r0, #18]
 8014970:	b508      	push	{r3, lr}
 8014972:	f000 f95d 	bl	8014c30 <uxr_seq_num_cmp>
 8014976:	fab0 f080 	clz	r0, r0
 801497a:	0940      	lsrs	r0, r0, #5
 801497c:	bd08      	pop	{r3, pc}
 801497e:	bf00      	nop

08014980 <get_available_free_slots>:
 8014980:	8902      	ldrh	r2, [r0, #8]
 8014982:	b1da      	cbz	r2, 80149bc <get_available_free_slots+0x3c>
 8014984:	b530      	push	{r4, r5, lr}
 8014986:	2100      	movs	r1, #0
 8014988:	6843      	ldr	r3, [r0, #4]
 801498a:	6805      	ldr	r5, [r0, #0]
 801498c:	7b04      	ldrb	r4, [r0, #12]
 801498e:	fbb3 fef2 	udiv	lr, r3, r2
 8014992:	4608      	mov	r0, r1
 8014994:	460b      	mov	r3, r1
 8014996:	fbb3 fcf2 	udiv	ip, r3, r2
 801499a:	fb02 331c 	mls	r3, r2, ip, r3
 801499e:	b29b      	uxth	r3, r3
 80149a0:	fb0e f303 	mul.w	r3, lr, r3
 80149a4:	3101      	adds	r1, #1
 80149a6:	f855 c003 	ldr.w	ip, [r5, r3]
 80149aa:	4564      	cmp	r4, ip
 80149ac:	bf08      	it	eq
 80149ae:	3001      	addeq	r0, #1
 80149b0:	b28b      	uxth	r3, r1
 80149b2:	bf08      	it	eq
 80149b4:	b280      	uxtheq	r0, r0
 80149b6:	4293      	cmp	r3, r2
 80149b8:	d3ed      	bcc.n	8014996 <get_available_free_slots+0x16>
 80149ba:	bd30      	pop	{r4, r5, pc}
 80149bc:	4610      	mov	r0, r2
 80149be:	4770      	bx	lr

080149c0 <uxr_buffer_request_data>:
 80149c0:	b530      	push	{r4, r5, lr}
 80149c2:	b095      	sub	sp, #84	@ 0x54
 80149c4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80149c8:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80149ca:	9303      	str	r3, [sp, #12]
 80149cc:	2200      	movs	r2, #0
 80149ce:	2d00      	cmp	r5, #0
 80149d0:	bf14      	ite	ne
 80149d2:	2101      	movne	r1, #1
 80149d4:	4611      	moveq	r1, r2
 80149d6:	4604      	mov	r4, r0
 80149d8:	f88d 301c 	strb.w	r3, [sp, #28]
 80149dc:	f88d 201d 	strb.w	r2, [sp, #29]
 80149e0:	f88d 201e 	strb.w	r2, [sp, #30]
 80149e4:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80149e8:	d021      	beq.n	8014a2e <uxr_buffer_request_data+0x6e>
 80149ea:	682a      	ldr	r2, [r5, #0]
 80149ec:	686b      	ldr	r3, [r5, #4]
 80149ee:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 80149f2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80149f6:	2210      	movs	r2, #16
 80149f8:	2308      	movs	r3, #8
 80149fa:	2100      	movs	r1, #0
 80149fc:	e9cd 3100 	strd	r3, r1, [sp]
 8014a00:	4620      	mov	r0, r4
 8014a02:	9905      	ldr	r1, [sp, #20]
 8014a04:	ab0c      	add	r3, sp, #48	@ 0x30
 8014a06:	f7f8 fed1 	bl	800d7ac <uxr_prepare_stream_to_write_submessage>
 8014a0a:	b918      	cbnz	r0, 8014a14 <uxr_buffer_request_data+0x54>
 8014a0c:	4604      	mov	r4, r0
 8014a0e:	4620      	mov	r0, r4
 8014a10:	b015      	add	sp, #84	@ 0x54
 8014a12:	bd30      	pop	{r4, r5, pc}
 8014a14:	9904      	ldr	r1, [sp, #16]
 8014a16:	aa06      	add	r2, sp, #24
 8014a18:	4620      	mov	r0, r4
 8014a1a:	f7f8 fffd 	bl	800da18 <uxr_init_base_object_request>
 8014a1e:	a906      	add	r1, sp, #24
 8014a20:	4604      	mov	r4, r0
 8014a22:	a80c      	add	r0, sp, #48	@ 0x30
 8014a24:	f7fa faf8 	bl	800f018 <uxr_serialize_READ_DATA_Payload>
 8014a28:	4620      	mov	r0, r4
 8014a2a:	b015      	add	sp, #84	@ 0x54
 8014a2c:	bd30      	pop	{r4, r5, pc}
 8014a2e:	2208      	movs	r2, #8
 8014a30:	e7e2      	b.n	80149f8 <uxr_buffer_request_data+0x38>
 8014a32:	bf00      	nop

08014a34 <uxr_buffer_cancel_data>:
 8014a34:	b510      	push	{r4, lr}
 8014a36:	b094      	sub	sp, #80	@ 0x50
 8014a38:	2300      	movs	r3, #0
 8014a3a:	9202      	str	r2, [sp, #8]
 8014a3c:	9205      	str	r2, [sp, #20]
 8014a3e:	9301      	str	r3, [sp, #4]
 8014a40:	2201      	movs	r2, #1
 8014a42:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014a46:	f88d 301e 	strb.w	r3, [sp, #30]
 8014a4a:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8014a4e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8014a52:	2308      	movs	r3, #8
 8014a54:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8014a58:	9300      	str	r3, [sp, #0]
 8014a5a:	2210      	movs	r2, #16
 8014a5c:	ab0c      	add	r3, sp, #48	@ 0x30
 8014a5e:	4604      	mov	r4, r0
 8014a60:	9103      	str	r1, [sp, #12]
 8014a62:	f7f8 fea3 	bl	800d7ac <uxr_prepare_stream_to_write_submessage>
 8014a66:	b918      	cbnz	r0, 8014a70 <uxr_buffer_cancel_data+0x3c>
 8014a68:	4604      	mov	r4, r0
 8014a6a:	4620      	mov	r0, r4
 8014a6c:	b014      	add	sp, #80	@ 0x50
 8014a6e:	bd10      	pop	{r4, pc}
 8014a70:	9905      	ldr	r1, [sp, #20]
 8014a72:	aa06      	add	r2, sp, #24
 8014a74:	4620      	mov	r0, r4
 8014a76:	f7f8 ffcf 	bl	800da18 <uxr_init_base_object_request>
 8014a7a:	a906      	add	r1, sp, #24
 8014a7c:	4604      	mov	r4, r0
 8014a7e:	a80c      	add	r0, sp, #48	@ 0x30
 8014a80:	f7fa faca 	bl	800f018 <uxr_serialize_READ_DATA_Payload>
 8014a84:	4620      	mov	r0, r4
 8014a86:	b014      	add	sp, #80	@ 0x50
 8014a88:	bd10      	pop	{r4, pc}
 8014a8a:	bf00      	nop

08014a8c <read_submessage_format>:
 8014a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a90:	b095      	sub	sp, #84	@ 0x54
 8014a92:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8014a96:	b113      	cbz	r3, 8014a9e <read_submessage_format+0x12>
 8014a98:	b015      	add	sp, #84	@ 0x54
 8014a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a9e:	460c      	mov	r4, r1
 8014aa0:	4615      	mov	r5, r2
 8014aa2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8014aa6:	4607      	mov	r7, r0
 8014aa8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8014aaa:	9004      	str	r0, [sp, #16]
 8014aac:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8014aae:	9005      	str	r0, [sp, #20]
 8014ab0:	1a52      	subs	r2, r2, r1
 8014ab2:	a80c      	add	r0, sp, #48	@ 0x30
 8014ab4:	4699      	mov	r9, r3
 8014ab6:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8014aba:	f7f5 fdd1 	bl	800a660 <ucdr_init_buffer>
 8014abe:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014ac2:	a80c      	add	r0, sp, #48	@ 0x30
 8014ac4:	f7f5 fda0 	bl	800a608 <ucdr_set_on_full_buffer_callback>
 8014ac8:	69e2      	ldr	r2, [r4, #28]
 8014aca:	b19a      	cbz	r2, 8014af4 <read_submessage_format+0x68>
 8014acc:	f1b8 0f07 	cmp.w	r8, #7
 8014ad0:	f882 9014 	strb.w	r9, [r2, #20]
 8014ad4:	d040      	beq.n	8014b58 <read_submessage_format+0xcc>
 8014ad6:	f1b8 0f08 	cmp.w	r8, #8
 8014ada:	d02e      	beq.n	8014b3a <read_submessage_format+0xae>
 8014adc:	f1b8 0f06 	cmp.w	r8, #6
 8014ae0:	d011      	beq.n	8014b06 <read_submessage_format+0x7a>
 8014ae2:	2301      	movs	r3, #1
 8014ae4:	7513      	strb	r3, [r2, #20]
 8014ae6:	4629      	mov	r1, r5
 8014ae8:	4620      	mov	r0, r4
 8014aea:	f7f5 fe09 	bl	800a700 <ucdr_advance_buffer>
 8014aee:	b015      	add	sp, #84	@ 0x54
 8014af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014af4:	f1b8 0f07 	cmp.w	r8, #7
 8014af8:	d02e      	beq.n	8014b58 <read_submessage_format+0xcc>
 8014afa:	f1b8 0f08 	cmp.w	r8, #8
 8014afe:	d01c      	beq.n	8014b3a <read_submessage_format+0xae>
 8014b00:	f1b8 0f06 	cmp.w	r8, #6
 8014b04:	d1ef      	bne.n	8014ae6 <read_submessage_format+0x5a>
 8014b06:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8014b0a:	f1b8 0f00 	cmp.w	r8, #0
 8014b0e:	d011      	beq.n	8014b34 <read_submessage_format+0xa8>
 8014b10:	ab0c      	add	r3, sp, #48	@ 0x30
 8014b12:	e9cd 3500 	strd	r3, r5, [sp]
 8014b16:	2306      	movs	r3, #6
 8014b18:	f88d 3016 	strb.w	r3, [sp, #22]
 8014b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014b20:	9302      	str	r3, [sp, #8]
 8014b22:	4632      	mov	r2, r6
 8014b24:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8014b28:	4638      	mov	r0, r7
 8014b2a:	47c0      	blx	r8
 8014b2c:	2301      	movs	r3, #1
 8014b2e:	69e2      	ldr	r2, [r4, #28]
 8014b30:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8014b34:	2a00      	cmp	r2, #0
 8014b36:	d1d4      	bne.n	8014ae2 <read_submessage_format+0x56>
 8014b38:	e7d5      	b.n	8014ae6 <read_submessage_format+0x5a>
 8014b3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d0f8      	beq.n	8014b34 <read_submessage_format+0xa8>
 8014b42:	a906      	add	r1, sp, #24
 8014b44:	a80c      	add	r0, sp, #48	@ 0x30
 8014b46:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8014b4a:	f7fa fb2b 	bl	800f1a4 <uxr_deserialize_SampleIdentity>
 8014b4e:	b9a0      	cbnz	r0, 8014b7a <read_submessage_format+0xee>
 8014b50:	69e2      	ldr	r2, [r4, #28]
 8014b52:	2a00      	cmp	r2, #0
 8014b54:	d1c5      	bne.n	8014ae2 <read_submessage_format+0x56>
 8014b56:	e7c6      	b.n	8014ae6 <read_submessage_format+0x5a>
 8014b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014b5c:	b13b      	cbz	r3, 8014b6e <read_submessage_format+0xe2>
 8014b5e:	a906      	add	r1, sp, #24
 8014b60:	a80c      	add	r0, sp, #48	@ 0x30
 8014b62:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8014b66:	f7f9 fff1 	bl	800eb4c <uxr_deserialize_BaseObjectRequest>
 8014b6a:	bb60      	cbnz	r0, 8014bc6 <read_submessage_format+0x13a>
 8014b6c:	69e2      	ldr	r2, [r4, #28]
 8014b6e:	68a3      	ldr	r3, [r4, #8]
 8014b70:	442b      	add	r3, r5
 8014b72:	60a3      	str	r3, [r4, #8]
 8014b74:	2a00      	cmp	r2, #0
 8014b76:	d1b4      	bne.n	8014ae2 <read_submessage_format+0x56>
 8014b78:	e7b5      	b.n	8014ae6 <read_submessage_format+0x5a>
 8014b7a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8014b7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014b80:	1a52      	subs	r2, r2, r1
 8014b82:	eba8 0803 	sub.w	r8, r8, r3
 8014b86:	a80c      	add	r0, sp, #48	@ 0x30
 8014b88:	f7f5 fd6a 	bl	800a660 <ucdr_init_buffer>
 8014b8c:	44a8      	add	r8, r5
 8014b8e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014b92:	a80c      	add	r0, sp, #48	@ 0x30
 8014b94:	f7f5 fd38 	bl	800a608 <ucdr_set_on_full_buffer_callback>
 8014b98:	fa1f f888 	uxth.w	r8, r8
 8014b9c:	ab0c      	add	r3, sp, #48	@ 0x30
 8014b9e:	9300      	str	r3, [sp, #0]
 8014ba0:	f8cd 8004 	str.w	r8, [sp, #4]
 8014ba4:	2108      	movs	r1, #8
 8014ba6:	f88d 1016 	strb.w	r1, [sp, #22]
 8014baa:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8014bae:	9102      	str	r1, [sp, #8]
 8014bb0:	ab06      	add	r3, sp, #24
 8014bb2:	4632      	mov	r2, r6
 8014bb4:	9905      	ldr	r1, [sp, #20]
 8014bb6:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8014bba:	4638      	mov	r0, r7
 8014bbc:	47b0      	blx	r6
 8014bbe:	2301      	movs	r3, #1
 8014bc0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8014bc4:	e7c4      	b.n	8014b50 <read_submessage_format+0xc4>
 8014bc6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8014bca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014bcc:	1a52      	subs	r2, r2, r1
 8014bce:	a80c      	add	r0, sp, #48	@ 0x30
 8014bd0:	eba8 0803 	sub.w	r8, r8, r3
 8014bd4:	f7f5 fd44 	bl	800a660 <ucdr_init_buffer>
 8014bd8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014bdc:	a80c      	add	r0, sp, #48	@ 0x30
 8014bde:	f7f5 fd13 	bl	800a608 <ucdr_set_on_full_buffer_callback>
 8014be2:	ab0c      	add	r3, sp, #48	@ 0x30
 8014be4:	9300      	str	r3, [sp, #0]
 8014be6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8014bea:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014bee:	44a8      	add	r8, r5
 8014bf0:	fa1f f888 	uxth.w	r8, r8
 8014bf4:	f8cd 8004 	str.w	r8, [sp, #4]
 8014bf8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014bfc:	2107      	movs	r1, #7
 8014bfe:	f88d 1016 	strb.w	r1, [sp, #22]
 8014c02:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8014c06:	9102      	str	r1, [sp, #8]
 8014c08:	4632      	mov	r2, r6
 8014c0a:	b29b      	uxth	r3, r3
 8014c0c:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8014c10:	9905      	ldr	r1, [sp, #20]
 8014c12:	4638      	mov	r0, r7
 8014c14:	47b0      	blx	r6
 8014c16:	2301      	movs	r3, #1
 8014c18:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8014c1c:	e7a6      	b.n	8014b6c <read_submessage_format+0xe0>
 8014c1e:	bf00      	nop

08014c20 <uxr_seq_num_add>:
 8014c20:	4408      	add	r0, r1
 8014c22:	b280      	uxth	r0, r0
 8014c24:	4770      	bx	lr
 8014c26:	bf00      	nop

08014c28 <uxr_seq_num_sub>:
 8014c28:	1a40      	subs	r0, r0, r1
 8014c2a:	b280      	uxth	r0, r0
 8014c2c:	4770      	bx	lr
 8014c2e:	bf00      	nop

08014c30 <uxr_seq_num_cmp>:
 8014c30:	4288      	cmp	r0, r1
 8014c32:	d011      	beq.n	8014c58 <uxr_seq_num_cmp+0x28>
 8014c34:	d309      	bcc.n	8014c4a <uxr_seq_num_cmp+0x1a>
 8014c36:	4288      	cmp	r0, r1
 8014c38:	d910      	bls.n	8014c5c <uxr_seq_num_cmp+0x2c>
 8014c3a:	1a40      	subs	r0, r0, r1
 8014c3c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8014c40:	bfd4      	ite	le
 8014c42:	2001      	movle	r0, #1
 8014c44:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8014c48:	4770      	bx	lr
 8014c4a:	1a0b      	subs	r3, r1, r0
 8014c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014c50:	daf1      	bge.n	8014c36 <uxr_seq_num_cmp+0x6>
 8014c52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c56:	4770      	bx	lr
 8014c58:	2000      	movs	r0, #0
 8014c5a:	4770      	bx	lr
 8014c5c:	2001      	movs	r0, #1
 8014c5e:	4770      	bx	lr

08014c60 <uxr_init_framing_io>:
 8014c60:	2300      	movs	r3, #0
 8014c62:	7041      	strb	r1, [r0, #1]
 8014c64:	7003      	strb	r3, [r0, #0]
 8014c66:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014c68:	4770      	bx	lr
 8014c6a:	bf00      	nop

08014c6c <uxr_write_framed_msg>:
 8014c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c70:	4617      	mov	r7, r2
 8014c72:	7842      	ldrb	r2, [r0, #1]
 8014c74:	b083      	sub	sp, #12
 8014c76:	460e      	mov	r6, r1
 8014c78:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8014c7c:	469a      	mov	sl, r3
 8014c7e:	2901      	cmp	r1, #1
 8014c80:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8014c84:	4604      	mov	r4, r0
 8014c86:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014c8a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8014c8e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8014c92:	f240 8137 	bls.w	8014f04 <uxr_write_framed_msg+0x298>
 8014c96:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014c9a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8014c9e:	2901      	cmp	r1, #1
 8014ca0:	f04f 0202 	mov.w	r2, #2
 8014ca4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014ca8:	f240 808f 	bls.w	8014dca <uxr_write_framed_msg+0x15e>
 8014cac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014cae:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8014cb2:	b2dd      	uxtb	r5, r3
 8014cb4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014cb8:	2203      	movs	r2, #3
 8014cba:	2901      	cmp	r1, #1
 8014cbc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014cc0:	f240 809a 	bls.w	8014df8 <uxr_write_framed_msg+0x18c>
 8014cc4:	18a1      	adds	r1, r4, r2
 8014cc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014cc8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8014ccc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014cd0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8014cd4:	3201      	adds	r2, #1
 8014cd6:	2801      	cmp	r0, #1
 8014cd8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014cdc:	f240 80a0 	bls.w	8014e20 <uxr_write_framed_msg+0x1b4>
 8014ce0:	18a0      	adds	r0, r4, r2
 8014ce2:	3201      	adds	r2, #1
 8014ce4:	b2d2      	uxtb	r2, r2
 8014ce6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014cea:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	f000 80a9 	beq.w	8014e46 <uxr_write_framed_msg+0x1da>
 8014cf4:	f04f 0900 	mov.w	r9, #0
 8014cf8:	46c8      	mov	r8, r9
 8014cfa:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014cfe:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8014d02:	2901      	cmp	r1, #1
 8014d04:	f240 80c3 	bls.w	8014e8e <uxr_write_framed_msg+0x222>
 8014d08:	2a29      	cmp	r2, #41	@ 0x29
 8014d0a:	f200 809f 	bhi.w	8014e4c <uxr_write_framed_msg+0x1e0>
 8014d0e:	18a1      	adds	r1, r4, r2
 8014d10:	3201      	adds	r2, #1
 8014d12:	b2d2      	uxtb	r2, r2
 8014d14:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8014d18:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014d1c:	ea89 0303 	eor.w	r3, r9, r3
 8014d20:	498c      	ldr	r1, [pc, #560]	@ (8014f54 <uxr_write_framed_msg+0x2e8>)
 8014d22:	b2db      	uxtb	r3, r3
 8014d24:	f108 0801 	add.w	r8, r8, #1
 8014d28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014d2c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8014d30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d32:	4543      	cmp	r3, r8
 8014d34:	d8e1      	bhi.n	8014cfa <uxr_write_framed_msg+0x8e>
 8014d36:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014d3a:	fa5f f889 	uxtb.w	r8, r9
 8014d3e:	9301      	str	r3, [sp, #4]
 8014d40:	f04f 0900 	mov.w	r9, #0
 8014d44:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8014d48:	fa5f f18a 	uxtb.w	r1, sl
 8014d4c:	2901      	cmp	r1, #1
 8014d4e:	d921      	bls.n	8014d94 <uxr_write_framed_msg+0x128>
 8014d50:	2a29      	cmp	r2, #41	@ 0x29
 8014d52:	f240 80af 	bls.w	8014eb4 <uxr_write_framed_msg+0x248>
 8014d56:	2500      	movs	r5, #0
 8014d58:	e000      	b.n	8014d5c <uxr_write_framed_msg+0xf0>
 8014d5a:	b160      	cbz	r0, 8014d76 <uxr_write_framed_msg+0x10a>
 8014d5c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014d60:	1b52      	subs	r2, r2, r5
 8014d62:	465b      	mov	r3, fp
 8014d64:	4421      	add	r1, r4
 8014d66:	4638      	mov	r0, r7
 8014d68:	47b0      	blx	r6
 8014d6a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014d6e:	4405      	add	r5, r0
 8014d70:	4295      	cmp	r5, r2
 8014d72:	d3f2      	bcc.n	8014d5a <uxr_write_framed_msg+0xee>
 8014d74:	d003      	beq.n	8014d7e <uxr_write_framed_msg+0x112>
 8014d76:	2000      	movs	r0, #0
 8014d78:	b003      	add	sp, #12
 8014d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d7e:	fa5f f18a 	uxtb.w	r1, sl
 8014d82:	f04f 0300 	mov.w	r3, #0
 8014d86:	2901      	cmp	r1, #1
 8014d88:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014d8c:	f04f 0200 	mov.w	r2, #0
 8014d90:	f200 8090 	bhi.w	8014eb4 <uxr_write_framed_msg+0x248>
 8014d94:	1c51      	adds	r1, r2, #1
 8014d96:	b2c9      	uxtb	r1, r1
 8014d98:	2929      	cmp	r1, #41	@ 0x29
 8014d9a:	d8dc      	bhi.n	8014d56 <uxr_write_framed_msg+0xea>
 8014d9c:	18a5      	adds	r5, r4, r2
 8014d9e:	4421      	add	r1, r4
 8014da0:	3202      	adds	r2, #2
 8014da2:	f088 0820 	eor.w	r8, r8, #32
 8014da6:	4648      	mov	r0, r9
 8014da8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8014dac:	b2d2      	uxtb	r2, r2
 8014dae:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8014db2:	f04f 0901 	mov.w	r9, #1
 8014db6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014dba:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	f040 8085 	bne.w	8014ece <uxr_write_framed_msg+0x262>
 8014dc4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014dc8:	e7bc      	b.n	8014d44 <uxr_write_framed_msg+0xd8>
 8014dca:	4611      	mov	r1, r2
 8014dcc:	f04f 0c03 	mov.w	ip, #3
 8014dd0:	2204      	movs	r2, #4
 8014dd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014dd4:	4421      	add	r1, r4
 8014dd6:	b2dd      	uxtb	r5, r3
 8014dd8:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8014ddc:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8014de0:	44a4      	add	ip, r4
 8014de2:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014de6:	f080 0020 	eor.w	r0, r0, #32
 8014dea:	2901      	cmp	r1, #1
 8014dec:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8014df0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014df4:	f63f af66 	bhi.w	8014cc4 <uxr_write_framed_msg+0x58>
 8014df8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014dfa:	18a0      	adds	r0, r4, r2
 8014dfc:	f085 0520 	eor.w	r5, r5, #32
 8014e00:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014e04:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014e08:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8014e0c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8014e10:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8014e14:	3202      	adds	r2, #2
 8014e16:	2801      	cmp	r0, #1
 8014e18:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014e1c:	f63f af60 	bhi.w	8014ce0 <uxr_write_framed_msg+0x74>
 8014e20:	1c50      	adds	r0, r2, #1
 8014e22:	18a5      	adds	r5, r4, r2
 8014e24:	fa54 f080 	uxtab	r0, r4, r0
 8014e28:	3202      	adds	r2, #2
 8014e2a:	f081 0120 	eor.w	r1, r1, #32
 8014e2e:	b2d2      	uxtb	r2, r2
 8014e30:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014e34:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8014e38:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014e3c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	f47f af57 	bne.w	8014cf4 <uxr_write_framed_msg+0x88>
 8014e46:	9301      	str	r3, [sp, #4]
 8014e48:	4698      	mov	r8, r3
 8014e4a:	e779      	b.n	8014d40 <uxr_write_framed_msg+0xd4>
 8014e4c:	2500      	movs	r5, #0
 8014e4e:	e001      	b.n	8014e54 <uxr_write_framed_msg+0x1e8>
 8014e50:	2800      	cmp	r0, #0
 8014e52:	d090      	beq.n	8014d76 <uxr_write_framed_msg+0x10a>
 8014e54:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014e58:	1b52      	subs	r2, r2, r5
 8014e5a:	465b      	mov	r3, fp
 8014e5c:	4421      	add	r1, r4
 8014e5e:	4638      	mov	r0, r7
 8014e60:	47b0      	blx	r6
 8014e62:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014e66:	4405      	add	r5, r0
 8014e68:	4295      	cmp	r5, r2
 8014e6a:	d3f1      	bcc.n	8014e50 <uxr_write_framed_msg+0x1e4>
 8014e6c:	d183      	bne.n	8014d76 <uxr_write_framed_msg+0x10a>
 8014e6e:	f04f 0300 	mov.w	r3, #0
 8014e72:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014e76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e78:	4543      	cmp	r3, r8
 8014e7a:	d964      	bls.n	8014f46 <uxr_write_framed_msg+0x2da>
 8014e7c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014e80:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8014e84:	2901      	cmp	r1, #1
 8014e86:	f04f 0200 	mov.w	r2, #0
 8014e8a:	f63f af3d 	bhi.w	8014d08 <uxr_write_framed_msg+0x9c>
 8014e8e:	1c51      	adds	r1, r2, #1
 8014e90:	b2c9      	uxtb	r1, r1
 8014e92:	2929      	cmp	r1, #41	@ 0x29
 8014e94:	d8da      	bhi.n	8014e4c <uxr_write_framed_msg+0x1e0>
 8014e96:	18a0      	adds	r0, r4, r2
 8014e98:	4421      	add	r1, r4
 8014e9a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8014e9e:	3202      	adds	r2, #2
 8014ea0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8014ea4:	b2d2      	uxtb	r2, r2
 8014ea6:	f083 0020 	eor.w	r0, r3, #32
 8014eaa:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8014eae:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014eb2:	e733      	b.n	8014d1c <uxr_write_framed_msg+0xb0>
 8014eb4:	18a1      	adds	r1, r4, r2
 8014eb6:	3201      	adds	r2, #1
 8014eb8:	4648      	mov	r0, r9
 8014eba:	b2d2      	uxtb	r2, r2
 8014ebc:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014ec0:	f04f 0901 	mov.w	r9, #1
 8014ec4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	f43f af7b 	beq.w	8014dc4 <uxr_write_framed_msg+0x158>
 8014ece:	2500      	movs	r5, #0
 8014ed0:	e002      	b.n	8014ed8 <uxr_write_framed_msg+0x26c>
 8014ed2:	2800      	cmp	r0, #0
 8014ed4:	f43f af4f 	beq.w	8014d76 <uxr_write_framed_msg+0x10a>
 8014ed8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014edc:	1b52      	subs	r2, r2, r5
 8014ede:	465b      	mov	r3, fp
 8014ee0:	4421      	add	r1, r4
 8014ee2:	4638      	mov	r0, r7
 8014ee4:	47b0      	blx	r6
 8014ee6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014eea:	4405      	add	r5, r0
 8014eec:	4295      	cmp	r5, r2
 8014eee:	d3f0      	bcc.n	8014ed2 <uxr_write_framed_msg+0x266>
 8014ef0:	f47f af41 	bne.w	8014d76 <uxr_write_framed_msg+0x10a>
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014efa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014efc:	b298      	uxth	r0, r3
 8014efe:	b003      	add	sp, #12
 8014f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f04:	217d      	movs	r1, #125	@ 0x7d
 8014f06:	f082 0220 	eor.w	r2, r2, #32
 8014f0a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8014f0e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014f12:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8014f16:	2901      	cmp	r1, #1
 8014f18:	f04f 0203 	mov.w	r2, #3
 8014f1c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014f20:	d804      	bhi.n	8014f2c <uxr_write_framed_msg+0x2c0>
 8014f22:	4611      	mov	r1, r2
 8014f24:	f04f 0c04 	mov.w	ip, #4
 8014f28:	2205      	movs	r2, #5
 8014f2a:	e752      	b.n	8014dd2 <uxr_write_framed_msg+0x166>
 8014f2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f2e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8014f32:	b2dd      	uxtb	r5, r3
 8014f34:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014f38:	2204      	movs	r2, #4
 8014f3a:	2901      	cmp	r1, #1
 8014f3c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014f40:	f63f aec0 	bhi.w	8014cc4 <uxr_write_framed_msg+0x58>
 8014f44:	e758      	b.n	8014df8 <uxr_write_framed_msg+0x18c>
 8014f46:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014f4a:	fa5f f889 	uxtb.w	r8, r9
 8014f4e:	9301      	str	r3, [sp, #4]
 8014f50:	2200      	movs	r2, #0
 8014f52:	e6f5      	b.n	8014d40 <uxr_write_framed_msg+0xd4>
 8014f54:	080180d0 	.word	0x080180d0

08014f58 <uxr_framing_read_transport>:
 8014f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f5c:	4604      	mov	r4, r0
 8014f5e:	b083      	sub	sp, #12
 8014f60:	461f      	mov	r7, r3
 8014f62:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8014f66:	4689      	mov	r9, r1
 8014f68:	4692      	mov	sl, r2
 8014f6a:	f7f8 ff03 	bl	800dd74 <uxr_millis>
 8014f6e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014f72:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8014f76:	42b3      	cmp	r3, r6
 8014f78:	4680      	mov	r8, r0
 8014f7a:	d061      	beq.n	8015040 <uxr_framing_read_transport+0xe8>
 8014f7c:	d81c      	bhi.n	8014fb8 <uxr_framing_read_transport+0x60>
 8014f7e:	1e75      	subs	r5, r6, #1
 8014f80:	1aed      	subs	r5, r5, r3
 8014f82:	b2ed      	uxtb	r5, r5
 8014f84:	2600      	movs	r6, #0
 8014f86:	455d      	cmp	r5, fp
 8014f88:	d81f      	bhi.n	8014fca <uxr_framing_read_transport+0x72>
 8014f8a:	19ab      	adds	r3, r5, r6
 8014f8c:	455b      	cmp	r3, fp
 8014f8e:	bf84      	itt	hi
 8014f90:	ebab 0605 	subhi.w	r6, fp, r5
 8014f94:	b2f6      	uxtbhi	r6, r6
 8014f96:	b9ed      	cbnz	r5, 8014fd4 <uxr_framing_read_transport+0x7c>
 8014f98:	f04f 0b00 	mov.w	fp, #0
 8014f9c:	f7f8 feea 	bl	800dd74 <uxr_millis>
 8014fa0:	683b      	ldr	r3, [r7, #0]
 8014fa2:	eba0 0808 	sub.w	r8, r0, r8
 8014fa6:	eba3 0308 	sub.w	r3, r3, r8
 8014faa:	4658      	mov	r0, fp
 8014fac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014fb0:	603b      	str	r3, [r7, #0]
 8014fb2:	b003      	add	sp, #12
 8014fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb8:	2e00      	cmp	r6, #0
 8014fba:	d049      	beq.n	8015050 <uxr_framing_read_transport+0xf8>
 8014fbc:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8014fc0:	b2ed      	uxtb	r5, r5
 8014fc2:	3e01      	subs	r6, #1
 8014fc4:	455d      	cmp	r5, fp
 8014fc6:	b2f6      	uxtb	r6, r6
 8014fc8:	d9df      	bls.n	8014f8a <uxr_framing_read_transport+0x32>
 8014fca:	fa5f f58b 	uxtb.w	r5, fp
 8014fce:	2600      	movs	r6, #0
 8014fd0:	2d00      	cmp	r5, #0
 8014fd2:	d0e1      	beq.n	8014f98 <uxr_framing_read_transport+0x40>
 8014fd4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014fd8:	3102      	adds	r1, #2
 8014fda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fdc:	9300      	str	r3, [sp, #0]
 8014fde:	683b      	ldr	r3, [r7, #0]
 8014fe0:	4421      	add	r1, r4
 8014fe2:	462a      	mov	r2, r5
 8014fe4:	4650      	mov	r0, sl
 8014fe6:	47c8      	blx	r9
 8014fe8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014fec:	4a1a      	ldr	r2, [pc, #104]	@ (8015058 <uxr_framing_read_transport+0x100>)
 8014fee:	4403      	add	r3, r0
 8014ff0:	0859      	lsrs	r1, r3, #1
 8014ff2:	fba2 2101 	umull	r2, r1, r2, r1
 8014ff6:	0889      	lsrs	r1, r1, #2
 8014ff8:	222a      	movs	r2, #42	@ 0x2a
 8014ffa:	fb02 3111 	mls	r1, r2, r1, r3
 8014ffe:	4683      	mov	fp, r0
 8015000:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8015004:	2800      	cmp	r0, #0
 8015006:	d0c7      	beq.n	8014f98 <uxr_framing_read_transport+0x40>
 8015008:	42a8      	cmp	r0, r5
 801500a:	d1c7      	bne.n	8014f9c <uxr_framing_read_transport+0x44>
 801500c:	2e00      	cmp	r6, #0
 801500e:	d0c5      	beq.n	8014f9c <uxr_framing_read_transport+0x44>
 8015010:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015012:	9300      	str	r3, [sp, #0]
 8015014:	3102      	adds	r1, #2
 8015016:	4632      	mov	r2, r6
 8015018:	4421      	add	r1, r4
 801501a:	2300      	movs	r3, #0
 801501c:	4650      	mov	r0, sl
 801501e:	47c8      	blx	r9
 8015020:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015024:	4a0c      	ldr	r2, [pc, #48]	@ (8015058 <uxr_framing_read_transport+0x100>)
 8015026:	180b      	adds	r3, r1, r0
 8015028:	0859      	lsrs	r1, r3, #1
 801502a:	fba2 1201 	umull	r1, r2, r2, r1
 801502e:	0892      	lsrs	r2, r2, #2
 8015030:	212a      	movs	r1, #42	@ 0x2a
 8015032:	fb01 3312 	mls	r3, r1, r2, r3
 8015036:	eb00 0b05 	add.w	fp, r0, r5
 801503a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801503e:	e7ad      	b.n	8014f9c <uxr_framing_read_transport+0x44>
 8015040:	2600      	movs	r6, #0
 8015042:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8015046:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8015048:	d9bf      	bls.n	8014fca <uxr_framing_read_transport+0x72>
 801504a:	2102      	movs	r1, #2
 801504c:	2529      	movs	r5, #41	@ 0x29
 801504e:	e7c4      	b.n	8014fda <uxr_framing_read_transport+0x82>
 8015050:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8015054:	b2ed      	uxtb	r5, r5
 8015056:	e796      	b.n	8014f86 <uxr_framing_read_transport+0x2e>
 8015058:	30c30c31 	.word	0x30c30c31

0801505c <uxr_read_framed_msg>:
 801505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015060:	461e      	mov	r6, r3
 8015062:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8015066:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801506a:	429d      	cmp	r5, r3
 801506c:	b083      	sub	sp, #12
 801506e:	4604      	mov	r4, r0
 8015070:	4688      	mov	r8, r1
 8015072:	4691      	mov	r9, r2
 8015074:	f000 8188 	beq.w	8015388 <uxr_read_framed_msg+0x32c>
 8015078:	7823      	ldrb	r3, [r4, #0]
 801507a:	4dc1      	ldr	r5, [pc, #772]	@ (8015380 <uxr_read_framed_msg+0x324>)
 801507c:	4fc1      	ldr	r7, [pc, #772]	@ (8015384 <uxr_read_framed_msg+0x328>)
 801507e:	2b07      	cmp	r3, #7
 8015080:	d8fd      	bhi.n	801507e <uxr_read_framed_msg+0x22>
 8015082:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015086:	0115      	.short	0x0115
 8015088:	00d600f6 	.word	0x00d600f6
 801508c:	009000b9 	.word	0x009000b9
 8015090:	0030004d 	.word	0x0030004d
 8015094:	0008      	.short	0x0008
 8015096:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801509a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801509e:	4299      	cmp	r1, r3
 80150a0:	f000 814a 	beq.w	8015338 <uxr_read_framed_msg+0x2dc>
 80150a4:	18e2      	adds	r2, r4, r3
 80150a6:	7892      	ldrb	r2, [r2, #2]
 80150a8:	2a7d      	cmp	r2, #125	@ 0x7d
 80150aa:	f000 8199 	beq.w	80153e0 <uxr_read_framed_msg+0x384>
 80150ae:	3301      	adds	r3, #1
 80150b0:	0858      	lsrs	r0, r3, #1
 80150b2:	fba5 1000 	umull	r1, r0, r5, r0
 80150b6:	0880      	lsrs	r0, r0, #2
 80150b8:	212a      	movs	r1, #42	@ 0x2a
 80150ba:	fb01 3310 	mls	r3, r1, r0, r3
 80150be:	2a7e      	cmp	r2, #126	@ 0x7e
 80150c0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80150c4:	f000 8252 	beq.w	801556c <uxr_read_framed_msg+0x510>
 80150c8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80150ca:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80150cc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80150d0:	b29b      	uxth	r3, r3
 80150d2:	2200      	movs	r2, #0
 80150d4:	4299      	cmp	r1, r3
 80150d6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80150d8:	7022      	strb	r2, [r4, #0]
 80150da:	f000 8179 	beq.w	80153d0 <uxr_read_framed_msg+0x374>
 80150de:	2000      	movs	r0, #0
 80150e0:	b003      	add	sp, #12
 80150e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150e6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80150ea:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80150ee:	4299      	cmp	r1, r3
 80150f0:	f000 8131 	beq.w	8015356 <uxr_read_framed_msg+0x2fa>
 80150f4:	18e2      	adds	r2, r4, r3
 80150f6:	7890      	ldrb	r0, [r2, #2]
 80150f8:	287d      	cmp	r0, #125	@ 0x7d
 80150fa:	f000 8190 	beq.w	801541e <uxr_read_framed_msg+0x3c2>
 80150fe:	3301      	adds	r3, #1
 8015100:	085a      	lsrs	r2, r3, #1
 8015102:	fba5 1202 	umull	r1, r2, r5, r2
 8015106:	0892      	lsrs	r2, r2, #2
 8015108:	212a      	movs	r1, #42	@ 0x2a
 801510a:	fb01 3312 	mls	r3, r1, r2, r3
 801510e:	287e      	cmp	r0, #126	@ 0x7e
 8015110:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015114:	f000 821a 	beq.w	801554c <uxr_read_framed_msg+0x4f0>
 8015118:	2307      	movs	r3, #7
 801511a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801511c:	7023      	strb	r3, [r4, #0]
 801511e:	e7ae      	b.n	801507e <uxr_read_framed_msg+0x22>
 8015120:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015122:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015126:	459e      	cmp	lr, r3
 8015128:	d938      	bls.n	801519c <uxr_read_framed_msg+0x140>
 801512a:	ee07 8a90 	vmov	s15, r8
 801512e:	212a      	movs	r1, #42	@ 0x2a
 8015130:	e020      	b.n	8015174 <uxr_read_framed_msg+0x118>
 8015132:	f89b c002 	ldrb.w	ip, [fp, #2]
 8015136:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801513a:	f000 80d4 	beq.w	80152e6 <uxr_read_framed_msg+0x28a>
 801513e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015142:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015146:	f000 8219 	beq.w	801557c <uxr_read_framed_msg+0x520>
 801514a:	f806 c003 	strb.w	ip, [r6, r3]
 801514e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8015152:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015154:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015158:	ea8a 000c 	eor.w	r0, sl, ip
 801515c:	b2c0      	uxtb	r0, r0
 801515e:	3301      	adds	r3, #1
 8015160:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8015164:	b29b      	uxth	r3, r3
 8015166:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801516a:	4573      	cmp	r3, lr
 801516c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801516e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8015170:	f080 8120 	bcs.w	80153b4 <uxr_read_framed_msg+0x358>
 8015174:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8015178:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801517c:	f100 0c01 	add.w	ip, r0, #1
 8015180:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015184:	fba5 8202 	umull	r8, r2, r5, r2
 8015188:	0892      	lsrs	r2, r2, #2
 801518a:	4582      	cmp	sl, r0
 801518c:	eb04 0b00 	add.w	fp, r4, r0
 8015190:	fb01 c212 	mls	r2, r1, r2, ip
 8015194:	d1cd      	bne.n	8015132 <uxr_read_framed_msg+0xd6>
 8015196:	ee17 8a90 	vmov	r8, s15
 801519a:	459e      	cmp	lr, r3
 801519c:	f040 8111 	bne.w	80153c2 <uxr_read_framed_msg+0x366>
 80151a0:	2306      	movs	r3, #6
 80151a2:	7023      	strb	r3, [r4, #0]
 80151a4:	e76b      	b.n	801507e <uxr_read_framed_msg+0x22>
 80151a6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80151aa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80151ae:	4298      	cmp	r0, r3
 80151b0:	f000 80c2 	beq.w	8015338 <uxr_read_framed_msg+0x2dc>
 80151b4:	18e2      	adds	r2, r4, r3
 80151b6:	7891      	ldrb	r1, [r2, #2]
 80151b8:	297d      	cmp	r1, #125	@ 0x7d
 80151ba:	f000 814c 	beq.w	8015456 <uxr_read_framed_msg+0x3fa>
 80151be:	3301      	adds	r3, #1
 80151c0:	085a      	lsrs	r2, r3, #1
 80151c2:	fba5 0202 	umull	r0, r2, r5, r2
 80151c6:	0892      	lsrs	r2, r2, #2
 80151c8:	202a      	movs	r0, #42	@ 0x2a
 80151ca:	fb00 3312 	mls	r3, r0, r2, r3
 80151ce:	297e      	cmp	r1, #126	@ 0x7e
 80151d0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80151d4:	f000 81ca 	beq.w	801556c <uxr_read_framed_msg+0x510>
 80151d8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80151da:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80151de:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80151e0:	b29b      	uxth	r3, r3
 80151e2:	2000      	movs	r0, #0
 80151e4:	428b      	cmp	r3, r1
 80151e6:	8623      	strh	r3, [r4, #48]	@ 0x30
 80151e8:	8660      	strh	r0, [r4, #50]	@ 0x32
 80151ea:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80151ec:	f240 80df 	bls.w	80153ae <uxr_read_framed_msg+0x352>
 80151f0:	7020      	strb	r0, [r4, #0]
 80151f2:	b003      	add	sp, #12
 80151f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151f8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80151fc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015200:	4299      	cmp	r1, r3
 8015202:	f000 80a8 	beq.w	8015356 <uxr_read_framed_msg+0x2fa>
 8015206:	18e2      	adds	r2, r4, r3
 8015208:	7890      	ldrb	r0, [r2, #2]
 801520a:	287d      	cmp	r0, #125	@ 0x7d
 801520c:	f000 8164 	beq.w	80154d8 <uxr_read_framed_msg+0x47c>
 8015210:	3301      	adds	r3, #1
 8015212:	085a      	lsrs	r2, r3, #1
 8015214:	fba5 1202 	umull	r1, r2, r5, r2
 8015218:	0892      	lsrs	r2, r2, #2
 801521a:	212a      	movs	r1, #42	@ 0x2a
 801521c:	fb01 3312 	mls	r3, r1, r2, r3
 8015220:	287e      	cmp	r0, #126	@ 0x7e
 8015222:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015226:	f000 8191 	beq.w	801554c <uxr_read_framed_msg+0x4f0>
 801522a:	2304      	movs	r3, #4
 801522c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801522e:	7023      	strb	r3, [r4, #0]
 8015230:	e725      	b.n	801507e <uxr_read_framed_msg+0x22>
 8015232:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015236:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801523a:	4290      	cmp	r0, r2
 801523c:	f000 80b3 	beq.w	80153a6 <uxr_read_framed_msg+0x34a>
 8015240:	18a3      	adds	r3, r4, r2
 8015242:	7899      	ldrb	r1, [r3, #2]
 8015244:	297d      	cmp	r1, #125	@ 0x7d
 8015246:	f000 8164 	beq.w	8015512 <uxr_read_framed_msg+0x4b6>
 801524a:	3201      	adds	r2, #1
 801524c:	0850      	lsrs	r0, r2, #1
 801524e:	fba5 3000 	umull	r3, r0, r5, r0
 8015252:	0880      	lsrs	r0, r0, #2
 8015254:	232a      	movs	r3, #42	@ 0x2a
 8015256:	fb03 2210 	mls	r2, r3, r0, r2
 801525a:	297e      	cmp	r1, #126	@ 0x7e
 801525c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015260:	f000 8188 	beq.w	8015574 <uxr_read_framed_msg+0x518>
 8015264:	7863      	ldrb	r3, [r4, #1]
 8015266:	428b      	cmp	r3, r1
 8015268:	bf0c      	ite	eq
 801526a:	2303      	moveq	r3, #3
 801526c:	2300      	movne	r3, #0
 801526e:	7023      	strb	r3, [r4, #0]
 8015270:	e705      	b.n	801507e <uxr_read_framed_msg+0x22>
 8015272:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015276:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801527a:	2200      	movs	r2, #0
 801527c:	4299      	cmp	r1, r3
 801527e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8015282:	d06c      	beq.n	801535e <uxr_read_framed_msg+0x302>
 8015284:	18e2      	adds	r2, r4, r3
 8015286:	7890      	ldrb	r0, [r2, #2]
 8015288:	287d      	cmp	r0, #125	@ 0x7d
 801528a:	f000 8101 	beq.w	8015490 <uxr_read_framed_msg+0x434>
 801528e:	3301      	adds	r3, #1
 8015290:	085a      	lsrs	r2, r3, #1
 8015292:	fba5 1202 	umull	r1, r2, r5, r2
 8015296:	0892      	lsrs	r2, r2, #2
 8015298:	212a      	movs	r1, #42	@ 0x2a
 801529a:	fb01 3312 	mls	r3, r1, r2, r3
 801529e:	287e      	cmp	r0, #126	@ 0x7e
 80152a0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80152a4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80152a8:	d059      	beq.n	801535e <uxr_read_framed_msg+0x302>
 80152aa:	2302      	movs	r3, #2
 80152ac:	7023      	strb	r3, [r4, #0]
 80152ae:	e6e6      	b.n	801507e <uxr_read_framed_msg+0x22>
 80152b0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80152b4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80152b8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80152bc:	1c51      	adds	r1, r2, #1
 80152be:	084b      	lsrs	r3, r1, #1
 80152c0:	fba5 c303 	umull	ip, r3, r5, r3
 80152c4:	089b      	lsrs	r3, r3, #2
 80152c6:	fb0e 1313 	mls	r3, lr, r3, r1
 80152ca:	4592      	cmp	sl, r2
 80152cc:	eb04 0002 	add.w	r0, r4, r2
 80152d0:	b2da      	uxtb	r2, r3
 80152d2:	f43f af04 	beq.w	80150de <uxr_read_framed_msg+0x82>
 80152d6:	7883      	ldrb	r3, [r0, #2]
 80152d8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80152dc:	2b7e      	cmp	r3, #126	@ 0x7e
 80152de:	d1ed      	bne.n	80152bc <uxr_read_framed_msg+0x260>
 80152e0:	2301      	movs	r3, #1
 80152e2:	7023      	strb	r3, [r4, #0]
 80152e4:	e6cb      	b.n	801507e <uxr_read_framed_msg+0x22>
 80152e6:	f100 0c01 	add.w	ip, r0, #1
 80152ea:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80152ee:	fba5 8202 	umull	r8, r2, r5, r2
 80152f2:	0892      	lsrs	r2, r2, #2
 80152f4:	fb01 c212 	mls	r2, r1, r2, ip
 80152f8:	eb04 0c02 	add.w	ip, r4, r2
 80152fc:	b2d2      	uxtb	r2, r2
 80152fe:	4592      	cmp	sl, r2
 8015300:	f100 0002 	add.w	r0, r0, #2
 8015304:	f43f af47 	beq.w	8015196 <uxr_read_framed_msg+0x13a>
 8015308:	0842      	lsrs	r2, r0, #1
 801530a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801530e:	fba5 8202 	umull	r8, r2, r5, r2
 8015312:	0892      	lsrs	r2, r2, #2
 8015314:	fb01 0012 	mls	r0, r1, r2, r0
 8015318:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801531c:	f08a 0c20 	eor.w	ip, sl, #32
 8015320:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8015324:	f47f af11 	bne.w	801514a <uxr_read_framed_msg+0xee>
 8015328:	459e      	cmp	lr, r3
 801532a:	ee17 8a90 	vmov	r8, s15
 801532e:	f43f af37 	beq.w	80151a0 <uxr_read_framed_msg+0x144>
 8015332:	2301      	movs	r3, #1
 8015334:	7023      	strb	r3, [r4, #0]
 8015336:	e6a2      	b.n	801507e <uxr_read_framed_msg+0x22>
 8015338:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801533a:	9300      	str	r3, [sp, #0]
 801533c:	2301      	movs	r3, #1
 801533e:	9301      	str	r3, [sp, #4]
 8015340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015342:	464a      	mov	r2, r9
 8015344:	4641      	mov	r1, r8
 8015346:	4620      	mov	r0, r4
 8015348:	f7ff fe06 	bl	8014f58 <uxr_framing_read_transport>
 801534c:	2800      	cmp	r0, #0
 801534e:	f43f aec6 	beq.w	80150de <uxr_read_framed_msg+0x82>
 8015352:	7823      	ldrb	r3, [r4, #0]
 8015354:	e693      	b.n	801507e <uxr_read_framed_msg+0x22>
 8015356:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015358:	9300      	str	r3, [sp, #0]
 801535a:	2302      	movs	r3, #2
 801535c:	e7ef      	b.n	801533e <uxr_read_framed_msg+0x2e2>
 801535e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015360:	9300      	str	r3, [sp, #0]
 8015362:	2304      	movs	r3, #4
 8015364:	9301      	str	r3, [sp, #4]
 8015366:	464a      	mov	r2, r9
 8015368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801536a:	4641      	mov	r1, r8
 801536c:	4620      	mov	r0, r4
 801536e:	f7ff fdf3 	bl	8014f58 <uxr_framing_read_transport>
 8015372:	2800      	cmp	r0, #0
 8015374:	d1ed      	bne.n	8015352 <uxr_read_framed_msg+0x2f6>
 8015376:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801537a:	2b7e      	cmp	r3, #126	@ 0x7e
 801537c:	d0e9      	beq.n	8015352 <uxr_read_framed_msg+0x2f6>
 801537e:	e6ae      	b.n	80150de <uxr_read_framed_msg+0x82>
 8015380:	30c30c31 	.word	0x30c30c31
 8015384:	080180d0 	.word	0x080180d0
 8015388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801538a:	9300      	str	r3, [sp, #0]
 801538c:	2305      	movs	r3, #5
 801538e:	9301      	str	r3, [sp, #4]
 8015390:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015392:	f7ff fde1 	bl	8014f58 <uxr_framing_read_transport>
 8015396:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801539a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801539e:	429a      	cmp	r2, r3
 80153a0:	f43f ae9d 	beq.w	80150de <uxr_read_framed_msg+0x82>
 80153a4:	e668      	b.n	8015078 <uxr_read_framed_msg+0x1c>
 80153a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153a8:	9300      	str	r3, [sp, #0]
 80153aa:	2303      	movs	r3, #3
 80153ac:	e7c7      	b.n	801533e <uxr_read_framed_msg+0x2e2>
 80153ae:	2305      	movs	r3, #5
 80153b0:	7023      	strb	r3, [r4, #0]
 80153b2:	e664      	b.n	801507e <uxr_read_framed_msg+0x22>
 80153b4:	ee17 8a90 	vmov	r8, s15
 80153b8:	f43f aef2 	beq.w	80151a0 <uxr_read_framed_msg+0x144>
 80153bc:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80153c0:	d08e      	beq.n	80152e0 <uxr_read_framed_msg+0x284>
 80153c2:	ebae 0303 	sub.w	r3, lr, r3
 80153c6:	3302      	adds	r3, #2
 80153c8:	9301      	str	r3, [sp, #4]
 80153ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153cc:	9300      	str	r3, [sp, #0]
 80153ce:	e7b7      	b.n	8015340 <uxr_read_framed_msg+0x2e4>
 80153d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80153d2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80153d6:	7013      	strb	r3, [r2, #0]
 80153d8:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80153da:	b003      	add	sp, #12
 80153dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153e0:	f103 0c01 	add.w	ip, r3, #1
 80153e4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80153e8:	fba5 0202 	umull	r0, r2, r5, r2
 80153ec:	0892      	lsrs	r2, r2, #2
 80153ee:	202a      	movs	r0, #42	@ 0x2a
 80153f0:	fb00 c212 	mls	r2, r0, r2, ip
 80153f4:	fa5f fc82 	uxtb.w	ip, r2
 80153f8:	4561      	cmp	r1, ip
 80153fa:	d09d      	beq.n	8015338 <uxr_read_framed_msg+0x2dc>
 80153fc:	3302      	adds	r3, #2
 80153fe:	4422      	add	r2, r4
 8015400:	0859      	lsrs	r1, r3, #1
 8015402:	7892      	ldrb	r2, [r2, #2]
 8015404:	fba5 c101 	umull	ip, r1, r5, r1
 8015408:	0889      	lsrs	r1, r1, #2
 801540a:	fb00 3311 	mls	r3, r0, r1, r3
 801540e:	2a7e      	cmp	r2, #126	@ 0x7e
 8015410:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015414:	f000 80aa 	beq.w	801556c <uxr_read_framed_msg+0x510>
 8015418:	f082 0220 	eor.w	r2, r2, #32
 801541c:	e654      	b.n	80150c8 <uxr_read_framed_msg+0x6c>
 801541e:	1c58      	adds	r0, r3, #1
 8015420:	0842      	lsrs	r2, r0, #1
 8015422:	fba5 c202 	umull	ip, r2, r5, r2
 8015426:	0892      	lsrs	r2, r2, #2
 8015428:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801542c:	fb0c 0212 	mls	r2, ip, r2, r0
 8015430:	b2d0      	uxtb	r0, r2
 8015432:	4281      	cmp	r1, r0
 8015434:	d08f      	beq.n	8015356 <uxr_read_framed_msg+0x2fa>
 8015436:	4422      	add	r2, r4
 8015438:	3302      	adds	r3, #2
 801543a:	7890      	ldrb	r0, [r2, #2]
 801543c:	085a      	lsrs	r2, r3, #1
 801543e:	fba5 1202 	umull	r1, r2, r5, r2
 8015442:	0892      	lsrs	r2, r2, #2
 8015444:	fb0c 3312 	mls	r3, ip, r2, r3
 8015448:	287e      	cmp	r0, #126	@ 0x7e
 801544a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801544e:	d07d      	beq.n	801554c <uxr_read_framed_msg+0x4f0>
 8015450:	f080 0020 	eor.w	r0, r0, #32
 8015454:	e660      	b.n	8015118 <uxr_read_framed_msg+0xbc>
 8015456:	1c59      	adds	r1, r3, #1
 8015458:	084a      	lsrs	r2, r1, #1
 801545a:	fba5 c202 	umull	ip, r2, r5, r2
 801545e:	0892      	lsrs	r2, r2, #2
 8015460:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015464:	fb0c 1212 	mls	r2, ip, r2, r1
 8015468:	b2d1      	uxtb	r1, r2
 801546a:	4288      	cmp	r0, r1
 801546c:	f43f af64 	beq.w	8015338 <uxr_read_framed_msg+0x2dc>
 8015470:	4422      	add	r2, r4
 8015472:	3302      	adds	r3, #2
 8015474:	7891      	ldrb	r1, [r2, #2]
 8015476:	085a      	lsrs	r2, r3, #1
 8015478:	fba5 0202 	umull	r0, r2, r5, r2
 801547c:	0892      	lsrs	r2, r2, #2
 801547e:	fb0c 3312 	mls	r3, ip, r2, r3
 8015482:	297e      	cmp	r1, #126	@ 0x7e
 8015484:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015488:	d070      	beq.n	801556c <uxr_read_framed_msg+0x510>
 801548a:	f081 0120 	eor.w	r1, r1, #32
 801548e:	e6a3      	b.n	80151d8 <uxr_read_framed_msg+0x17c>
 8015490:	f103 0c01 	add.w	ip, r3, #1
 8015494:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015498:	fba5 0202 	umull	r0, r2, r5, r2
 801549c:	0892      	lsrs	r2, r2, #2
 801549e:	202a      	movs	r0, #42	@ 0x2a
 80154a0:	fb00 c212 	mls	r2, r0, r2, ip
 80154a4:	fa5f fc82 	uxtb.w	ip, r2
 80154a8:	4561      	cmp	r1, ip
 80154aa:	f43f af58 	beq.w	801535e <uxr_read_framed_msg+0x302>
 80154ae:	4422      	add	r2, r4
 80154b0:	3302      	adds	r3, #2
 80154b2:	7891      	ldrb	r1, [r2, #2]
 80154b4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80154b8:	085a      	lsrs	r2, r3, #1
 80154ba:	fba5 c202 	umull	ip, r2, r5, r2
 80154be:	0892      	lsrs	r2, r2, #2
 80154c0:	fb00 3312 	mls	r3, r0, r2, r3
 80154c4:	297e      	cmp	r1, #126	@ 0x7e
 80154c6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80154ca:	f43f af48 	beq.w	801535e <uxr_read_framed_msg+0x302>
 80154ce:	f081 0120 	eor.w	r1, r1, #32
 80154d2:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80154d6:	e6e8      	b.n	80152aa <uxr_read_framed_msg+0x24e>
 80154d8:	1c58      	adds	r0, r3, #1
 80154da:	0842      	lsrs	r2, r0, #1
 80154dc:	fba5 c202 	umull	ip, r2, r5, r2
 80154e0:	0892      	lsrs	r2, r2, #2
 80154e2:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80154e6:	fb0c 0212 	mls	r2, ip, r2, r0
 80154ea:	b2d0      	uxtb	r0, r2
 80154ec:	4281      	cmp	r1, r0
 80154ee:	f43f af32 	beq.w	8015356 <uxr_read_framed_msg+0x2fa>
 80154f2:	4422      	add	r2, r4
 80154f4:	3302      	adds	r3, #2
 80154f6:	7890      	ldrb	r0, [r2, #2]
 80154f8:	085a      	lsrs	r2, r3, #1
 80154fa:	fba5 1202 	umull	r1, r2, r5, r2
 80154fe:	0892      	lsrs	r2, r2, #2
 8015500:	fb0c 3312 	mls	r3, ip, r2, r3
 8015504:	287e      	cmp	r0, #126	@ 0x7e
 8015506:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801550a:	d01f      	beq.n	801554c <uxr_read_framed_msg+0x4f0>
 801550c:	f080 0020 	eor.w	r0, r0, #32
 8015510:	e68b      	b.n	801522a <uxr_read_framed_msg+0x1ce>
 8015512:	1c51      	adds	r1, r2, #1
 8015514:	084b      	lsrs	r3, r1, #1
 8015516:	fba5 c303 	umull	ip, r3, r5, r3
 801551a:	089b      	lsrs	r3, r3, #2
 801551c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015520:	fb0c 1313 	mls	r3, ip, r3, r1
 8015524:	b2d9      	uxtb	r1, r3
 8015526:	4288      	cmp	r0, r1
 8015528:	f43f af3d 	beq.w	80153a6 <uxr_read_framed_msg+0x34a>
 801552c:	3202      	adds	r2, #2
 801552e:	4423      	add	r3, r4
 8015530:	0850      	lsrs	r0, r2, #1
 8015532:	789b      	ldrb	r3, [r3, #2]
 8015534:	fba5 1000 	umull	r1, r0, r5, r0
 8015538:	0880      	lsrs	r0, r0, #2
 801553a:	fb0c 2210 	mls	r2, ip, r0, r2
 801553e:	2b7e      	cmp	r3, #126	@ 0x7e
 8015540:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015544:	d016      	beq.n	8015574 <uxr_read_framed_msg+0x518>
 8015546:	f083 0120 	eor.w	r1, r3, #32
 801554a:	e68b      	b.n	8015264 <uxr_read_framed_msg+0x208>
 801554c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801554e:	9300      	str	r3, [sp, #0]
 8015550:	2302      	movs	r3, #2
 8015552:	9301      	str	r3, [sp, #4]
 8015554:	464a      	mov	r2, r9
 8015556:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015558:	4641      	mov	r1, r8
 801555a:	4620      	mov	r0, r4
 801555c:	f7ff fcfc 	bl	8014f58 <uxr_framing_read_transport>
 8015560:	2800      	cmp	r0, #0
 8015562:	f47f aef6 	bne.w	8015352 <uxr_read_framed_msg+0x2f6>
 8015566:	2301      	movs	r3, #1
 8015568:	7023      	strb	r3, [r4, #0]
 801556a:	e588      	b.n	801507e <uxr_read_framed_msg+0x22>
 801556c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801556e:	9300      	str	r3, [sp, #0]
 8015570:	2301      	movs	r3, #1
 8015572:	e7ee      	b.n	8015552 <uxr_read_framed_msg+0x4f6>
 8015574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015576:	9300      	str	r3, [sp, #0]
 8015578:	2303      	movs	r3, #3
 801557a:	e7ea      	b.n	8015552 <uxr_read_framed_msg+0x4f6>
 801557c:	ee17 8a90 	vmov	r8, s15
 8015580:	e6ae      	b.n	80152e0 <uxr_read_framed_msg+0x284>
 8015582:	bf00      	nop

08015584 <rcl_get_default_domain_id>:
 8015584:	b530      	push	{r4, r5, lr}
 8015586:	b083      	sub	sp, #12
 8015588:	2300      	movs	r3, #0
 801558a:	9300      	str	r3, [sp, #0]
 801558c:	b1d0      	cbz	r0, 80155c4 <rcl_get_default_domain_id+0x40>
 801558e:	4604      	mov	r4, r0
 8015590:	4669      	mov	r1, sp
 8015592:	4815      	ldr	r0, [pc, #84]	@ (80155e8 <rcl_get_default_domain_id+0x64>)
 8015594:	f7fc fc60 	bl	8011e58 <rcutils_get_env>
 8015598:	4602      	mov	r2, r0
 801559a:	b110      	cbz	r0, 80155a2 <rcl_get_default_domain_id+0x1e>
 801559c:	2001      	movs	r0, #1
 801559e:	b003      	add	sp, #12
 80155a0:	bd30      	pop	{r4, r5, pc}
 80155a2:	9b00      	ldr	r3, [sp, #0]
 80155a4:	b18b      	cbz	r3, 80155ca <rcl_get_default_domain_id+0x46>
 80155a6:	7818      	ldrb	r0, [r3, #0]
 80155a8:	2800      	cmp	r0, #0
 80155aa:	d0f8      	beq.n	801559e <rcl_get_default_domain_id+0x1a>
 80155ac:	a901      	add	r1, sp, #4
 80155ae:	4618      	mov	r0, r3
 80155b0:	9201      	str	r2, [sp, #4]
 80155b2:	f000 fe6d 	bl	8016290 <strtoul>
 80155b6:	4605      	mov	r5, r0
 80155b8:	b150      	cbz	r0, 80155d0 <rcl_get_default_domain_id+0x4c>
 80155ba:	1c43      	adds	r3, r0, #1
 80155bc:	d00d      	beq.n	80155da <rcl_get_default_domain_id+0x56>
 80155be:	6025      	str	r5, [r4, #0]
 80155c0:	2000      	movs	r0, #0
 80155c2:	e7ec      	b.n	801559e <rcl_get_default_domain_id+0x1a>
 80155c4:	200b      	movs	r0, #11
 80155c6:	b003      	add	sp, #12
 80155c8:	bd30      	pop	{r4, r5, pc}
 80155ca:	4618      	mov	r0, r3
 80155cc:	b003      	add	sp, #12
 80155ce:	bd30      	pop	{r4, r5, pc}
 80155d0:	9b01      	ldr	r3, [sp, #4]
 80155d2:	781b      	ldrb	r3, [r3, #0]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d0f2      	beq.n	80155be <rcl_get_default_domain_id+0x3a>
 80155d8:	e7e0      	b.n	801559c <rcl_get_default_domain_id+0x18>
 80155da:	f001 f8a5 	bl	8016728 <__errno>
 80155de:	6803      	ldr	r3, [r0, #0]
 80155e0:	2b22      	cmp	r3, #34	@ 0x22
 80155e2:	d1ec      	bne.n	80155be <rcl_get_default_domain_id+0x3a>
 80155e4:	e7da      	b.n	801559c <rcl_get_default_domain_id+0x18>
 80155e6:	bf00      	nop
 80155e8:	080182d0 	.word	0x080182d0

080155ec <rcl_expand_topic_name>:
 80155ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155f0:	b08b      	sub	sp, #44	@ 0x2c
 80155f2:	9306      	str	r3, [sp, #24]
 80155f4:	2800      	cmp	r0, #0
 80155f6:	f000 80ad 	beq.w	8015754 <rcl_expand_topic_name+0x168>
 80155fa:	460e      	mov	r6, r1
 80155fc:	2900      	cmp	r1, #0
 80155fe:	f000 80a9 	beq.w	8015754 <rcl_expand_topic_name+0x168>
 8015602:	4617      	mov	r7, r2
 8015604:	2a00      	cmp	r2, #0
 8015606:	f000 80a5 	beq.w	8015754 <rcl_expand_topic_name+0x168>
 801560a:	2b00      	cmp	r3, #0
 801560c:	f000 80a2 	beq.w	8015754 <rcl_expand_topic_name+0x168>
 8015610:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015612:	2b00      	cmp	r3, #0
 8015614:	f000 809e 	beq.w	8015754 <rcl_expand_topic_name+0x168>
 8015618:	2200      	movs	r2, #0
 801561a:	a909      	add	r1, sp, #36	@ 0x24
 801561c:	4680      	mov	r8, r0
 801561e:	f000 f9fb 	bl	8015a18 <rcl_validate_topic_name>
 8015622:	4604      	mov	r4, r0
 8015624:	2800      	cmp	r0, #0
 8015626:	f040 8096 	bne.w	8015756 <rcl_expand_topic_name+0x16a>
 801562a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801562c:	2b00      	cmp	r3, #0
 801562e:	f040 809a 	bne.w	8015766 <rcl_expand_topic_name+0x17a>
 8015632:	4602      	mov	r2, r0
 8015634:	a909      	add	r1, sp, #36	@ 0x24
 8015636:	4630      	mov	r0, r6
 8015638:	f7fd f86c 	bl	8012714 <rmw_validate_node_name>
 801563c:	2800      	cmp	r0, #0
 801563e:	f040 808e 	bne.w	801575e <rcl_expand_topic_name+0x172>
 8015642:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015644:	2a00      	cmp	r2, #0
 8015646:	f040 8093 	bne.w	8015770 <rcl_expand_topic_name+0x184>
 801564a:	a909      	add	r1, sp, #36	@ 0x24
 801564c:	4638      	mov	r0, r7
 801564e:	f7fd f843 	bl	80126d8 <rmw_validate_namespace>
 8015652:	2800      	cmp	r0, #0
 8015654:	f040 8083 	bne.w	801575e <rcl_expand_topic_name+0x172>
 8015658:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801565a:	2c00      	cmp	r4, #0
 801565c:	f040 80ed 	bne.w	801583a <rcl_expand_topic_name+0x24e>
 8015660:	217b      	movs	r1, #123	@ 0x7b
 8015662:	4640      	mov	r0, r8
 8015664:	f000 ffd4 	bl	8016610 <strchr>
 8015668:	f898 3000 	ldrb.w	r3, [r8]
 801566c:	2b2f      	cmp	r3, #47	@ 0x2f
 801566e:	4605      	mov	r5, r0
 8015670:	f000 809e 	beq.w	80157b0 <rcl_expand_topic_name+0x1c4>
 8015674:	2b7e      	cmp	r3, #126	@ 0x7e
 8015676:	f040 80a2 	bne.w	80157be <rcl_expand_topic_name+0x1d2>
 801567a:	4638      	mov	r0, r7
 801567c:	f7ea fdba 	bl	80001f4 <strlen>
 8015680:	4a82      	ldr	r2, [pc, #520]	@ (801588c <rcl_expand_topic_name+0x2a0>)
 8015682:	4b83      	ldr	r3, [pc, #524]	@ (8015890 <rcl_expand_topic_name+0x2a4>)
 8015684:	2801      	cmp	r0, #1
 8015686:	bf18      	it	ne
 8015688:	4613      	movne	r3, r2
 801568a:	9302      	str	r3, [sp, #8]
 801568c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801568e:	9300      	str	r3, [sp, #0]
 8015690:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8015694:	f108 0301 	add.w	r3, r8, #1
 8015698:	9305      	str	r3, [sp, #20]
 801569a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801569e:	9301      	str	r3, [sp, #4]
 80156a0:	ab14      	add	r3, sp, #80	@ 0x50
 80156a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80156a4:	f7fc fc00 	bl	8011ea8 <rcutils_format_string_limit>
 80156a8:	4682      	mov	sl, r0
 80156aa:	2800      	cmp	r0, #0
 80156ac:	f000 80c7 	beq.w	801583e <rcl_expand_topic_name+0x252>
 80156b0:	2d00      	cmp	r5, #0
 80156b2:	f000 80a2 	beq.w	80157fa <rcl_expand_topic_name+0x20e>
 80156b6:	217b      	movs	r1, #123	@ 0x7b
 80156b8:	f000 ffaa 	bl	8016610 <strchr>
 80156bc:	46d1      	mov	r9, sl
 80156be:	4605      	mov	r5, r0
 80156c0:	9407      	str	r4, [sp, #28]
 80156c2:	46d3      	mov	fp, sl
 80156c4:	464c      	mov	r4, r9
 80156c6:	2d00      	cmp	r5, #0
 80156c8:	f000 80be 	beq.w	8015848 <rcl_expand_topic_name+0x25c>
 80156cc:	217d      	movs	r1, #125	@ 0x7d
 80156ce:	4620      	mov	r0, r4
 80156d0:	f000 ff9e 	bl	8016610 <strchr>
 80156d4:	eba0 0905 	sub.w	r9, r0, r5
 80156d8:	f109 0a01 	add.w	sl, r9, #1
 80156dc:	486d      	ldr	r0, [pc, #436]	@ (8015894 <rcl_expand_topic_name+0x2a8>)
 80156de:	4652      	mov	r2, sl
 80156e0:	4629      	mov	r1, r5
 80156e2:	f000 ffa2 	bl	801662a <strncmp>
 80156e6:	2800      	cmp	r0, #0
 80156e8:	d067      	beq.n	80157ba <rcl_expand_topic_name+0x1ce>
 80156ea:	486b      	ldr	r0, [pc, #428]	@ (8015898 <rcl_expand_topic_name+0x2ac>)
 80156ec:	4652      	mov	r2, sl
 80156ee:	4629      	mov	r1, r5
 80156f0:	f000 ff9b 	bl	801662a <strncmp>
 80156f4:	b130      	cbz	r0, 8015704 <rcl_expand_topic_name+0x118>
 80156f6:	4869      	ldr	r0, [pc, #420]	@ (801589c <rcl_expand_topic_name+0x2b0>)
 80156f8:	4652      	mov	r2, sl
 80156fa:	4629      	mov	r1, r5
 80156fc:	f000 ff95 	bl	801662a <strncmp>
 8015700:	2800      	cmp	r0, #0
 8015702:	d137      	bne.n	8015774 <rcl_expand_topic_name+0x188>
 8015704:	46b9      	mov	r9, r7
 8015706:	ab16      	add	r3, sp, #88	@ 0x58
 8015708:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801570c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015710:	ab14      	add	r3, sp, #80	@ 0x50
 8015712:	4628      	mov	r0, r5
 8015714:	cb0c      	ldmia	r3, {r2, r3}
 8015716:	4651      	mov	r1, sl
 8015718:	f7fc fd02 	bl	8012120 <rcutils_strndup>
 801571c:	4605      	mov	r5, r0
 801571e:	2800      	cmp	r0, #0
 8015720:	f000 809c 	beq.w	801585c <rcl_expand_topic_name+0x270>
 8015724:	464a      	mov	r2, r9
 8015726:	4620      	mov	r0, r4
 8015728:	ab14      	add	r3, sp, #80	@ 0x50
 801572a:	4629      	mov	r1, r5
 801572c:	f7fc fbf6 	bl	8011f1c <rcutils_repl_str>
 8015730:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015732:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015734:	4604      	mov	r4, r0
 8015736:	4628      	mov	r0, r5
 8015738:	4798      	blx	r3
 801573a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801573c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801573e:	4658      	mov	r0, fp
 8015740:	4798      	blx	r3
 8015742:	2c00      	cmp	r4, #0
 8015744:	d07b      	beq.n	801583e <rcl_expand_topic_name+0x252>
 8015746:	217b      	movs	r1, #123	@ 0x7b
 8015748:	4620      	mov	r0, r4
 801574a:	f000 ff61 	bl	8016610 <strchr>
 801574e:	46a3      	mov	fp, r4
 8015750:	4605      	mov	r5, r0
 8015752:	e7b8      	b.n	80156c6 <rcl_expand_topic_name+0xda>
 8015754:	240b      	movs	r4, #11
 8015756:	4620      	mov	r0, r4
 8015758:	b00b      	add	sp, #44	@ 0x2c
 801575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801575e:	f7f9 fdd9 	bl	800f314 <rcl_convert_rmw_ret_to_rcl_ret>
 8015762:	4604      	mov	r4, r0
 8015764:	e7f7      	b.n	8015756 <rcl_expand_topic_name+0x16a>
 8015766:	2467      	movs	r4, #103	@ 0x67
 8015768:	4620      	mov	r0, r4
 801576a:	b00b      	add	sp, #44	@ 0x2c
 801576c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015770:	24c9      	movs	r4, #201	@ 0xc9
 8015772:	e7f0      	b.n	8015756 <rcl_expand_topic_name+0x16a>
 8015774:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8015778:	9806      	ldr	r0, [sp, #24]
 801577a:	1c69      	adds	r1, r5, #1
 801577c:	f7fc fdea 	bl	8012354 <rcutils_string_map_getn>
 8015780:	4681      	mov	r9, r0
 8015782:	2800      	cmp	r0, #0
 8015784:	d1bf      	bne.n	8015706 <rcl_expand_topic_name+0x11a>
 8015786:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015788:	aa16      	add	r2, sp, #88	@ 0x58
 801578a:	6018      	str	r0, [r3, #0]
 801578c:	ca07      	ldmia	r2, {r0, r1, r2}
 801578e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015792:	ab14      	add	r3, sp, #80	@ 0x50
 8015794:	cb0c      	ldmia	r3, {r2, r3}
 8015796:	4651      	mov	r1, sl
 8015798:	4628      	mov	r0, r5
 801579a:	f7fc fcc1 	bl	8012120 <rcutils_strndup>
 801579e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80157a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80157a2:	4798      	blx	r3
 80157a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80157a6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80157a8:	4658      	mov	r0, fp
 80157aa:	2469      	movs	r4, #105	@ 0x69
 80157ac:	4798      	blx	r3
 80157ae:	e7d2      	b.n	8015756 <rcl_expand_topic_name+0x16a>
 80157b0:	2800      	cmp	r0, #0
 80157b2:	d05b      	beq.n	801586c <rcl_expand_topic_name+0x280>
 80157b4:	46c1      	mov	r9, r8
 80157b6:	46a2      	mov	sl, r4
 80157b8:	e782      	b.n	80156c0 <rcl_expand_topic_name+0xd4>
 80157ba:	46b1      	mov	r9, r6
 80157bc:	e7a3      	b.n	8015706 <rcl_expand_topic_name+0x11a>
 80157be:	2800      	cmp	r0, #0
 80157c0:	d1f8      	bne.n	80157b4 <rcl_expand_topic_name+0x1c8>
 80157c2:	4638      	mov	r0, r7
 80157c4:	f7ea fd16 	bl	80001f4 <strlen>
 80157c8:	4a35      	ldr	r2, [pc, #212]	@ (80158a0 <rcl_expand_topic_name+0x2b4>)
 80157ca:	4b36      	ldr	r3, [pc, #216]	@ (80158a4 <rcl_expand_topic_name+0x2b8>)
 80157cc:	f8cd 8010 	str.w	r8, [sp, #16]
 80157d0:	2801      	cmp	r0, #1
 80157d2:	bf18      	it	ne
 80157d4:	4613      	movne	r3, r2
 80157d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80157da:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80157de:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80157e0:	9703      	str	r7, [sp, #12]
 80157e2:	9200      	str	r2, [sp, #0]
 80157e4:	ab14      	add	r3, sp, #80	@ 0x50
 80157e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80157e8:	f7fc fb5e 	bl	8011ea8 <rcutils_format_string_limit>
 80157ec:	4682      	mov	sl, r0
 80157ee:	4653      	mov	r3, sl
 80157f0:	b32b      	cbz	r3, 801583e <rcl_expand_topic_name+0x252>
 80157f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80157f4:	f8c3 a000 	str.w	sl, [r3]
 80157f8:	e7ad      	b.n	8015756 <rcl_expand_topic_name+0x16a>
 80157fa:	f89a 3000 	ldrb.w	r3, [sl]
 80157fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8015800:	d0f7      	beq.n	80157f2 <rcl_expand_topic_name+0x206>
 8015802:	4638      	mov	r0, r7
 8015804:	f7ea fcf6 	bl	80001f4 <strlen>
 8015808:	4a25      	ldr	r2, [pc, #148]	@ (80158a0 <rcl_expand_topic_name+0x2b4>)
 801580a:	4b26      	ldr	r3, [pc, #152]	@ (80158a4 <rcl_expand_topic_name+0x2b8>)
 801580c:	f8cd a010 	str.w	sl, [sp, #16]
 8015810:	2801      	cmp	r0, #1
 8015812:	bf18      	it	ne
 8015814:	4613      	movne	r3, r2
 8015816:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801581a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801581e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8015820:	9703      	str	r7, [sp, #12]
 8015822:	9200      	str	r2, [sp, #0]
 8015824:	ab14      	add	r3, sp, #80	@ 0x50
 8015826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015828:	f7fc fb3e 	bl	8011ea8 <rcutils_format_string_limit>
 801582c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801582e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015830:	4605      	mov	r5, r0
 8015832:	4650      	mov	r0, sl
 8015834:	4798      	blx	r3
 8015836:	46aa      	mov	sl, r5
 8015838:	e7d9      	b.n	80157ee <rcl_expand_topic_name+0x202>
 801583a:	24ca      	movs	r4, #202	@ 0xca
 801583c:	e78b      	b.n	8015756 <rcl_expand_topic_name+0x16a>
 801583e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015840:	2300      	movs	r3, #0
 8015842:	6013      	str	r3, [r2, #0]
 8015844:	240a      	movs	r4, #10
 8015846:	e786      	b.n	8015756 <rcl_expand_topic_name+0x16a>
 8015848:	465b      	mov	r3, fp
 801584a:	9c07      	ldr	r4, [sp, #28]
 801584c:	46da      	mov	sl, fp
 801584e:	2b00      	cmp	r3, #0
 8015850:	d1d3      	bne.n	80157fa <rcl_expand_topic_name+0x20e>
 8015852:	f898 3000 	ldrb.w	r3, [r8]
 8015856:	2b2f      	cmp	r3, #47	@ 0x2f
 8015858:	d0cb      	beq.n	80157f2 <rcl_expand_topic_name+0x206>
 801585a:	e7b2      	b.n	80157c2 <rcl_expand_topic_name+0x1d6>
 801585c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8015860:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015862:	6015      	str	r5, [r2, #0]
 8015864:	4658      	mov	r0, fp
 8015866:	4798      	blx	r3
 8015868:	240a      	movs	r4, #10
 801586a:	e774      	b.n	8015756 <rcl_expand_topic_name+0x16a>
 801586c:	ab17      	add	r3, sp, #92	@ 0x5c
 801586e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015872:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015876:	ab14      	add	r3, sp, #80	@ 0x50
 8015878:	cb0e      	ldmia	r3, {r1, r2, r3}
 801587a:	4640      	mov	r0, r8
 801587c:	f7fc fc2e 	bl	80120dc <rcutils_strdup>
 8015880:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015882:	2800      	cmp	r0, #0
 8015884:	6018      	str	r0, [r3, #0]
 8015886:	bf08      	it	eq
 8015888:	240a      	moveq	r4, #10
 801588a:	e764      	b.n	8015756 <rcl_expand_topic_name+0x16a>
 801588c:	080182e0 	.word	0x080182e0
 8015890:	080179b4 	.word	0x080179b4
 8015894:	080182e8 	.word	0x080182e8
 8015898:	080182f0 	.word	0x080182f0
 801589c:	080182f8 	.word	0x080182f8
 80158a0:	08017b3c 	.word	0x08017b3c
 80158a4:	080179c4 	.word	0x080179c4

080158a8 <rcl_get_default_topic_name_substitutions>:
 80158a8:	2800      	cmp	r0, #0
 80158aa:	bf0c      	ite	eq
 80158ac:	200b      	moveq	r0, #11
 80158ae:	2000      	movne	r0, #0
 80158b0:	4770      	bx	lr
 80158b2:	bf00      	nop

080158b4 <rcl_get_zero_initialized_guard_condition>:
 80158b4:	4a03      	ldr	r2, [pc, #12]	@ (80158c4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80158b6:	4603      	mov	r3, r0
 80158b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80158bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80158c0:	4618      	mov	r0, r3
 80158c2:	4770      	bx	lr
 80158c4:	08018304 	.word	0x08018304

080158c8 <rcl_guard_condition_init_from_rmw>:
 80158c8:	b082      	sub	sp, #8
 80158ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158ce:	b086      	sub	sp, #24
 80158d0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80158d4:	4604      	mov	r4, r0
 80158d6:	f84c 3f04 	str.w	r3, [ip, #4]!
 80158da:	460e      	mov	r6, r1
 80158dc:	4617      	mov	r7, r2
 80158de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80158e2:	f10d 0e04 	add.w	lr, sp, #4
 80158e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80158ea:	f8dc 3000 	ldr.w	r3, [ip]
 80158ee:	f8ce 3000 	str.w	r3, [lr]
 80158f2:	a801      	add	r0, sp, #4
 80158f4:	f7f5 ff80 	bl	800b7f8 <rcutils_allocator_is_valid>
 80158f8:	b350      	cbz	r0, 8015950 <rcl_guard_condition_init_from_rmw+0x88>
 80158fa:	b34c      	cbz	r4, 8015950 <rcl_guard_condition_init_from_rmw+0x88>
 80158fc:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015900:	f1b8 0f00 	cmp.w	r8, #0
 8015904:	d11e      	bne.n	8015944 <rcl_guard_condition_init_from_rmw+0x7c>
 8015906:	b31f      	cbz	r7, 8015950 <rcl_guard_condition_init_from_rmw+0x88>
 8015908:	4638      	mov	r0, r7
 801590a:	f7f9 fd21 	bl	800f350 <rcl_context_is_valid>
 801590e:	b328      	cbz	r0, 801595c <rcl_guard_condition_init_from_rmw+0x94>
 8015910:	9b01      	ldr	r3, [sp, #4]
 8015912:	9905      	ldr	r1, [sp, #20]
 8015914:	201c      	movs	r0, #28
 8015916:	4798      	blx	r3
 8015918:	4605      	mov	r5, r0
 801591a:	6060      	str	r0, [r4, #4]
 801591c:	b358      	cbz	r0, 8015976 <rcl_guard_condition_init_from_rmw+0xae>
 801591e:	b1fe      	cbz	r6, 8015960 <rcl_guard_condition_init_from_rmw+0x98>
 8015920:	6006      	str	r6, [r0, #0]
 8015922:	f880 8004 	strb.w	r8, [r0, #4]
 8015926:	ac01      	add	r4, sp, #4
 8015928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801592a:	f105 0c08 	add.w	ip, r5, #8
 801592e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015932:	6823      	ldr	r3, [r4, #0]
 8015934:	f8cc 3000 	str.w	r3, [ip]
 8015938:	2000      	movs	r0, #0
 801593a:	b006      	add	sp, #24
 801593c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015940:	b002      	add	sp, #8
 8015942:	4770      	bx	lr
 8015944:	2064      	movs	r0, #100	@ 0x64
 8015946:	b006      	add	sp, #24
 8015948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801594c:	b002      	add	sp, #8
 801594e:	4770      	bx	lr
 8015950:	200b      	movs	r0, #11
 8015952:	b006      	add	sp, #24
 8015954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015958:	b002      	add	sp, #8
 801595a:	4770      	bx	lr
 801595c:	2065      	movs	r0, #101	@ 0x65
 801595e:	e7f2      	b.n	8015946 <rcl_guard_condition_init_from_rmw+0x7e>
 8015960:	6838      	ldr	r0, [r7, #0]
 8015962:	3028      	adds	r0, #40	@ 0x28
 8015964:	f000 fa3a 	bl	8015ddc <rmw_create_guard_condition>
 8015968:	6028      	str	r0, [r5, #0]
 801596a:	6865      	ldr	r5, [r4, #4]
 801596c:	682e      	ldr	r6, [r5, #0]
 801596e:	b126      	cbz	r6, 801597a <rcl_guard_condition_init_from_rmw+0xb2>
 8015970:	2301      	movs	r3, #1
 8015972:	712b      	strb	r3, [r5, #4]
 8015974:	e7d7      	b.n	8015926 <rcl_guard_condition_init_from_rmw+0x5e>
 8015976:	200a      	movs	r0, #10
 8015978:	e7e5      	b.n	8015946 <rcl_guard_condition_init_from_rmw+0x7e>
 801597a:	4628      	mov	r0, r5
 801597c:	9b02      	ldr	r3, [sp, #8]
 801597e:	9905      	ldr	r1, [sp, #20]
 8015980:	4798      	blx	r3
 8015982:	6066      	str	r6, [r4, #4]
 8015984:	2001      	movs	r0, #1
 8015986:	e7de      	b.n	8015946 <rcl_guard_condition_init_from_rmw+0x7e>

08015988 <rcl_guard_condition_fini>:
 8015988:	b570      	push	{r4, r5, r6, lr}
 801598a:	b082      	sub	sp, #8
 801598c:	b1f0      	cbz	r0, 80159cc <rcl_guard_condition_fini+0x44>
 801598e:	6843      	ldr	r3, [r0, #4]
 8015990:	4604      	mov	r4, r0
 8015992:	b163      	cbz	r3, 80159ae <rcl_guard_condition_fini+0x26>
 8015994:	6818      	ldr	r0, [r3, #0]
 8015996:	68de      	ldr	r6, [r3, #12]
 8015998:	6999      	ldr	r1, [r3, #24]
 801599a:	b160      	cbz	r0, 80159b6 <rcl_guard_condition_fini+0x2e>
 801599c:	791d      	ldrb	r5, [r3, #4]
 801599e:	b965      	cbnz	r5, 80159ba <rcl_guard_condition_fini+0x32>
 80159a0:	4618      	mov	r0, r3
 80159a2:	47b0      	blx	r6
 80159a4:	2300      	movs	r3, #0
 80159a6:	4628      	mov	r0, r5
 80159a8:	6063      	str	r3, [r4, #4]
 80159aa:	b002      	add	sp, #8
 80159ac:	bd70      	pop	{r4, r5, r6, pc}
 80159ae:	461d      	mov	r5, r3
 80159b0:	4628      	mov	r0, r5
 80159b2:	b002      	add	sp, #8
 80159b4:	bd70      	pop	{r4, r5, r6, pc}
 80159b6:	4605      	mov	r5, r0
 80159b8:	e7f2      	b.n	80159a0 <rcl_guard_condition_fini+0x18>
 80159ba:	9101      	str	r1, [sp, #4]
 80159bc:	f000 fa22 	bl	8015e04 <rmw_destroy_guard_condition>
 80159c0:	1e05      	subs	r5, r0, #0
 80159c2:	6863      	ldr	r3, [r4, #4]
 80159c4:	9901      	ldr	r1, [sp, #4]
 80159c6:	bf18      	it	ne
 80159c8:	2501      	movne	r5, #1
 80159ca:	e7e9      	b.n	80159a0 <rcl_guard_condition_fini+0x18>
 80159cc:	250b      	movs	r5, #11
 80159ce:	4628      	mov	r0, r5
 80159d0:	b002      	add	sp, #8
 80159d2:	bd70      	pop	{r4, r5, r6, pc}

080159d4 <rcl_guard_condition_get_default_options>:
 80159d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159d6:	b087      	sub	sp, #28
 80159d8:	4606      	mov	r6, r0
 80159da:	4668      	mov	r0, sp
 80159dc:	f7f5 fefe 	bl	800b7dc <rcutils_get_default_allocator>
 80159e0:	4b09      	ldr	r3, [pc, #36]	@ (8015a08 <rcl_guard_condition_get_default_options+0x34>)
 80159e2:	46ee      	mov	lr, sp
 80159e4:	469c      	mov	ip, r3
 80159e6:	461d      	mov	r5, r3
 80159e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80159ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159f2:	4634      	mov	r4, r6
 80159f4:	f8de 7000 	ldr.w	r7, [lr]
 80159f8:	f8cc 7000 	str.w	r7, [ip]
 80159fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159fe:	4630      	mov	r0, r6
 8015a00:	6027      	str	r7, [r4, #0]
 8015a02:	b007      	add	sp, #28
 8015a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a06:	bf00      	nop
 8015a08:	2000dd94 	.word	0x2000dd94

08015a0c <rcl_guard_condition_get_rmw_handle>:
 8015a0c:	b110      	cbz	r0, 8015a14 <rcl_guard_condition_get_rmw_handle+0x8>
 8015a0e:	6840      	ldr	r0, [r0, #4]
 8015a10:	b100      	cbz	r0, 8015a14 <rcl_guard_condition_get_rmw_handle+0x8>
 8015a12:	6800      	ldr	r0, [r0, #0]
 8015a14:	4770      	bx	lr
 8015a16:	bf00      	nop

08015a18 <rcl_validate_topic_name>:
 8015a18:	2800      	cmp	r0, #0
 8015a1a:	d07a      	beq.n	8015b12 <rcl_validate_topic_name+0xfa>
 8015a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a20:	460e      	mov	r6, r1
 8015a22:	2900      	cmp	r1, #0
 8015a24:	d07c      	beq.n	8015b20 <rcl_validate_topic_name+0x108>
 8015a26:	4617      	mov	r7, r2
 8015a28:	4605      	mov	r5, r0
 8015a2a:	f7ea fbe3 	bl	80001f4 <strlen>
 8015a2e:	b1b0      	cbz	r0, 8015a5e <rcl_validate_topic_name+0x46>
 8015a30:	f895 9000 	ldrb.w	r9, [r5]
 8015a34:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8015bb8 <rcl_validate_topic_name+0x1a0>
 8015a38:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015a3c:	f013 0304 	ands.w	r3, r3, #4
 8015a40:	d169      	bne.n	8015b16 <rcl_validate_topic_name+0xfe>
 8015a42:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8015a46:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015a4a:	2a2f      	cmp	r2, #47	@ 0x2f
 8015a4c:	d10e      	bne.n	8015a6c <rcl_validate_topic_name+0x54>
 8015a4e:	2202      	movs	r2, #2
 8015a50:	6032      	str	r2, [r6, #0]
 8015a52:	b36f      	cbz	r7, 8015ab0 <rcl_validate_topic_name+0x98>
 8015a54:	f8c7 8000 	str.w	r8, [r7]
 8015a58:	4618      	mov	r0, r3
 8015a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a5e:	2301      	movs	r3, #1
 8015a60:	6033      	str	r3, [r6, #0]
 8015a62:	b32f      	cbz	r7, 8015ab0 <rcl_validate_topic_name+0x98>
 8015a64:	2000      	movs	r0, #0
 8015a66:	6038      	str	r0, [r7, #0]
 8015a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a6c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8015a70:	461c      	mov	r4, r3
 8015a72:	4619      	mov	r1, r3
 8015a74:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015a78:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8015a7c:	f1be 0f09 	cmp.w	lr, #9
 8015a80:	d919      	bls.n	8015ab6 <rcl_validate_topic_name+0x9e>
 8015a82:	f022 0e20 	bic.w	lr, r2, #32
 8015a86:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8015a8a:	f1be 0f19 	cmp.w	lr, #25
 8015a8e:	d912      	bls.n	8015ab6 <rcl_validate_topic_name+0x9e>
 8015a90:	2a5f      	cmp	r2, #95	@ 0x5f
 8015a92:	d019      	beq.n	8015ac8 <rcl_validate_topic_name+0xb0>
 8015a94:	2a2f      	cmp	r2, #47	@ 0x2f
 8015a96:	d051      	beq.n	8015b3c <rcl_validate_topic_name+0x124>
 8015a98:	2a7e      	cmp	r2, #126	@ 0x7e
 8015a9a:	d048      	beq.n	8015b2e <rcl_validate_topic_name+0x116>
 8015a9c:	2a7b      	cmp	r2, #123	@ 0x7b
 8015a9e:	d054      	beq.n	8015b4a <rcl_validate_topic_name+0x132>
 8015aa0:	2a7d      	cmp	r2, #125	@ 0x7d
 8015aa2:	d161      	bne.n	8015b68 <rcl_validate_topic_name+0x150>
 8015aa4:	2c00      	cmp	r4, #0
 8015aa6:	d155      	bne.n	8015b54 <rcl_validate_topic_name+0x13c>
 8015aa8:	2305      	movs	r3, #5
 8015aaa:	6033      	str	r3, [r6, #0]
 8015aac:	b107      	cbz	r7, 8015ab0 <rcl_validate_topic_name+0x98>
 8015aae:	6039      	str	r1, [r7, #0]
 8015ab0:	2000      	movs	r0, #0
 8015ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ab6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015aba:	0752      	lsls	r2, r2, #29
 8015abc:	d504      	bpl.n	8015ac8 <rcl_validate_topic_name+0xb0>
 8015abe:	b11c      	cbz	r4, 8015ac8 <rcl_validate_topic_name+0xb0>
 8015ac0:	b111      	cbz	r1, 8015ac8 <rcl_validate_topic_name+0xb0>
 8015ac2:	1e4a      	subs	r2, r1, #1
 8015ac4:	429a      	cmp	r2, r3
 8015ac6:	d02d      	beq.n	8015b24 <rcl_validate_topic_name+0x10c>
 8015ac8:	3101      	adds	r1, #1
 8015aca:	4288      	cmp	r0, r1
 8015acc:	d1d2      	bne.n	8015a74 <rcl_validate_topic_name+0x5c>
 8015ace:	2c00      	cmp	r4, #0
 8015ad0:	d145      	bne.n	8015b5e <rcl_validate_topic_name+0x146>
 8015ad2:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8015ad6:	d04f      	beq.n	8015b78 <rcl_validate_topic_name+0x160>
 8015ad8:	4620      	mov	r0, r4
 8015ada:	2301      	movs	r3, #1
 8015adc:	e006      	b.n	8015aec <rcl_validate_topic_name+0xd4>
 8015ade:	428b      	cmp	r3, r1
 8015ae0:	f105 0501 	add.w	r5, r5, #1
 8015ae4:	f103 0201 	add.w	r2, r3, #1
 8015ae8:	d236      	bcs.n	8015b58 <rcl_validate_topic_name+0x140>
 8015aea:	4613      	mov	r3, r2
 8015aec:	4580      	cmp	r8, r0
 8015aee:	f100 0001 	add.w	r0, r0, #1
 8015af2:	d0f4      	beq.n	8015ade <rcl_validate_topic_name+0xc6>
 8015af4:	782a      	ldrb	r2, [r5, #0]
 8015af6:	2a2f      	cmp	r2, #47	@ 0x2f
 8015af8:	d1f1      	bne.n	8015ade <rcl_validate_topic_name+0xc6>
 8015afa:	786a      	ldrb	r2, [r5, #1]
 8015afc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015b00:	0754      	lsls	r4, r2, #29
 8015b02:	d5ec      	bpl.n	8015ade <rcl_validate_topic_name+0xc6>
 8015b04:	2204      	movs	r2, #4
 8015b06:	6032      	str	r2, [r6, #0]
 8015b08:	2f00      	cmp	r7, #0
 8015b0a:	d0d1      	beq.n	8015ab0 <rcl_validate_topic_name+0x98>
 8015b0c:	603b      	str	r3, [r7, #0]
 8015b0e:	2000      	movs	r0, #0
 8015b10:	e7aa      	b.n	8015a68 <rcl_validate_topic_name+0x50>
 8015b12:	200b      	movs	r0, #11
 8015b14:	4770      	bx	lr
 8015b16:	2304      	movs	r3, #4
 8015b18:	6033      	str	r3, [r6, #0]
 8015b1a:	2f00      	cmp	r7, #0
 8015b1c:	d1a2      	bne.n	8015a64 <rcl_validate_topic_name+0x4c>
 8015b1e:	e7c7      	b.n	8015ab0 <rcl_validate_topic_name+0x98>
 8015b20:	200b      	movs	r0, #11
 8015b22:	e7a1      	b.n	8015a68 <rcl_validate_topic_name+0x50>
 8015b24:	2309      	movs	r3, #9
 8015b26:	6033      	str	r3, [r6, #0]
 8015b28:	2f00      	cmp	r7, #0
 8015b2a:	d1c0      	bne.n	8015aae <rcl_validate_topic_name+0x96>
 8015b2c:	e7c0      	b.n	8015ab0 <rcl_validate_topic_name+0x98>
 8015b2e:	2900      	cmp	r1, #0
 8015b30:	d0ca      	beq.n	8015ac8 <rcl_validate_topic_name+0xb0>
 8015b32:	2306      	movs	r3, #6
 8015b34:	6033      	str	r3, [r6, #0]
 8015b36:	2f00      	cmp	r7, #0
 8015b38:	d1b9      	bne.n	8015aae <rcl_validate_topic_name+0x96>
 8015b3a:	e7b9      	b.n	8015ab0 <rcl_validate_topic_name+0x98>
 8015b3c:	2c00      	cmp	r4, #0
 8015b3e:	d0c3      	beq.n	8015ac8 <rcl_validate_topic_name+0xb0>
 8015b40:	2308      	movs	r3, #8
 8015b42:	6033      	str	r3, [r6, #0]
 8015b44:	2f00      	cmp	r7, #0
 8015b46:	d1b2      	bne.n	8015aae <rcl_validate_topic_name+0x96>
 8015b48:	e7b2      	b.n	8015ab0 <rcl_validate_topic_name+0x98>
 8015b4a:	2c00      	cmp	r4, #0
 8015b4c:	d1f8      	bne.n	8015b40 <rcl_validate_topic_name+0x128>
 8015b4e:	460b      	mov	r3, r1
 8015b50:	2401      	movs	r4, #1
 8015b52:	e7b9      	b.n	8015ac8 <rcl_validate_topic_name+0xb0>
 8015b54:	2400      	movs	r4, #0
 8015b56:	e7b7      	b.n	8015ac8 <rcl_validate_topic_name+0xb0>
 8015b58:	2000      	movs	r0, #0
 8015b5a:	6030      	str	r0, [r6, #0]
 8015b5c:	e784      	b.n	8015a68 <rcl_validate_topic_name+0x50>
 8015b5e:	2205      	movs	r2, #5
 8015b60:	6032      	str	r2, [r6, #0]
 8015b62:	2f00      	cmp	r7, #0
 8015b64:	d1d2      	bne.n	8015b0c <rcl_validate_topic_name+0xf4>
 8015b66:	e7a3      	b.n	8015ab0 <rcl_validate_topic_name+0x98>
 8015b68:	2c00      	cmp	r4, #0
 8015b6a:	bf14      	ite	ne
 8015b6c:	2308      	movne	r3, #8
 8015b6e:	2303      	moveq	r3, #3
 8015b70:	6033      	str	r3, [r6, #0]
 8015b72:	2f00      	cmp	r7, #0
 8015b74:	d19b      	bne.n	8015aae <rcl_validate_topic_name+0x96>
 8015b76:	e79b      	b.n	8015ab0 <rcl_validate_topic_name+0x98>
 8015b78:	2301      	movs	r3, #1
 8015b7a:	e00a      	b.n	8015b92 <rcl_validate_topic_name+0x17a>
 8015b7c:	2c01      	cmp	r4, #1
 8015b7e:	d013      	beq.n	8015ba8 <rcl_validate_topic_name+0x190>
 8015b80:	4299      	cmp	r1, r3
 8015b82:	f104 0401 	add.w	r4, r4, #1
 8015b86:	f105 0501 	add.w	r5, r5, #1
 8015b8a:	f103 0201 	add.w	r2, r3, #1
 8015b8e:	d9e3      	bls.n	8015b58 <rcl_validate_topic_name+0x140>
 8015b90:	4613      	mov	r3, r2
 8015b92:	45a0      	cmp	r8, r4
 8015b94:	d0f4      	beq.n	8015b80 <rcl_validate_topic_name+0x168>
 8015b96:	782a      	ldrb	r2, [r5, #0]
 8015b98:	2a2f      	cmp	r2, #47	@ 0x2f
 8015b9a:	d1ef      	bne.n	8015b7c <rcl_validate_topic_name+0x164>
 8015b9c:	786a      	ldrb	r2, [r5, #1]
 8015b9e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015ba2:	0752      	lsls	r2, r2, #29
 8015ba4:	d5ec      	bpl.n	8015b80 <rcl_validate_topic_name+0x168>
 8015ba6:	e7ad      	b.n	8015b04 <rcl_validate_topic_name+0xec>
 8015ba8:	2307      	movs	r3, #7
 8015baa:	6033      	str	r3, [r6, #0]
 8015bac:	2f00      	cmp	r7, #0
 8015bae:	f43f af7f 	beq.w	8015ab0 <rcl_validate_topic_name+0x98>
 8015bb2:	603c      	str	r4, [r7, #0]
 8015bb4:	2000      	movs	r0, #0
 8015bb6:	e757      	b.n	8015a68 <rcl_validate_topic_name+0x50>
 8015bb8:	0801837c 	.word	0x0801837c

08015bbc <rcutils_string_array_fini>:
 8015bbc:	b320      	cbz	r0, 8015c08 <rcutils_string_array_fini+0x4c>
 8015bbe:	b570      	push	{r4, r5, r6, lr}
 8015bc0:	4604      	mov	r4, r0
 8015bc2:	6840      	ldr	r0, [r0, #4]
 8015bc4:	b1d8      	cbz	r0, 8015bfe <rcutils_string_array_fini+0x42>
 8015bc6:	f104 0008 	add.w	r0, r4, #8
 8015bca:	f7f5 fe15 	bl	800b7f8 <rcutils_allocator_is_valid>
 8015bce:	b1b8      	cbz	r0, 8015c00 <rcutils_string_array_fini+0x44>
 8015bd0:	6823      	ldr	r3, [r4, #0]
 8015bd2:	b1bb      	cbz	r3, 8015c04 <rcutils_string_array_fini+0x48>
 8015bd4:	2500      	movs	r5, #0
 8015bd6:	6860      	ldr	r0, [r4, #4]
 8015bd8:	462e      	mov	r6, r5
 8015bda:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8015bde:	68e3      	ldr	r3, [r4, #12]
 8015be0:	69a1      	ldr	r1, [r4, #24]
 8015be2:	4798      	blx	r3
 8015be4:	e9d4 3000 	ldrd	r3, r0, [r4]
 8015be8:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8015bec:	3501      	adds	r5, #1
 8015bee:	429d      	cmp	r5, r3
 8015bf0:	d3f3      	bcc.n	8015bda <rcutils_string_array_fini+0x1e>
 8015bf2:	68e3      	ldr	r3, [r4, #12]
 8015bf4:	69a1      	ldr	r1, [r4, #24]
 8015bf6:	4798      	blx	r3
 8015bf8:	2000      	movs	r0, #0
 8015bfa:	e9c4 0000 	strd	r0, r0, [r4]
 8015bfe:	bd70      	pop	{r4, r5, r6, pc}
 8015c00:	200b      	movs	r0, #11
 8015c02:	bd70      	pop	{r4, r5, r6, pc}
 8015c04:	6860      	ldr	r0, [r4, #4]
 8015c06:	e7f4      	b.n	8015bf2 <rcutils_string_array_fini+0x36>
 8015c08:	200b      	movs	r0, #11
 8015c0a:	4770      	bx	lr

08015c0c <on_status>:
 8015c0c:	b082      	sub	sp, #8
 8015c0e:	b002      	add	sp, #8
 8015c10:	4770      	bx	lr
 8015c12:	bf00      	nop

08015c14 <on_topic>:
 8015c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c18:	4a22      	ldr	r2, [pc, #136]	@ (8015ca4 <on_topic+0x90>)
 8015c1a:	b094      	sub	sp, #80	@ 0x50
 8015c1c:	6812      	ldr	r2, [r2, #0]
 8015c1e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8015c20:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015c24:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8015c28:	b3c2      	cbz	r2, 8015c9c <on_topic+0x88>
 8015c2a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8015c2e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8015c32:	e001      	b.n	8015c38 <on_topic+0x24>
 8015c34:	6852      	ldr	r2, [r2, #4]
 8015c36:	b38a      	cbz	r2, 8015c9c <on_topic+0x88>
 8015c38:	6894      	ldr	r4, [r2, #8]
 8015c3a:	8aa3      	ldrh	r3, [r4, #20]
 8015c3c:	428b      	cmp	r3, r1
 8015c3e:	d1f9      	bne.n	8015c34 <on_topic+0x20>
 8015c40:	7da3      	ldrb	r3, [r4, #22]
 8015c42:	4283      	cmp	r3, r0
 8015c44:	d1f6      	bne.n	8015c34 <on_topic+0x20>
 8015c46:	2248      	movs	r2, #72	@ 0x48
 8015c48:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015c4c:	4668      	mov	r0, sp
 8015c4e:	f000 fda0 	bl	8016792 <memcpy>
 8015c52:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8015c56:	cb0c      	ldmia	r3, {r2, r3}
 8015c58:	4620      	mov	r0, r4
 8015c5a:	f7f6 f9fd 	bl	800c058 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015c5e:	4607      	mov	r7, r0
 8015c60:	b1e0      	cbz	r0, 8015c9c <on_topic+0x88>
 8015c62:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8015c66:	4632      	mov	r2, r6
 8015c68:	4628      	mov	r0, r5
 8015c6a:	f108 0110 	add.w	r1, r8, #16
 8015c6e:	f7fd ffc9 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 8015c72:	b930      	cbnz	r0, 8015c82 <on_topic+0x6e>
 8015c74:	480c      	ldr	r0, [pc, #48]	@ (8015ca8 <on_topic+0x94>)
 8015c76:	4639      	mov	r1, r7
 8015c78:	b014      	add	sp, #80	@ 0x50
 8015c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c7e:	f7fc bdb7 	b.w	80127f0 <put_memory>
 8015c82:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8015c86:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8015c8a:	f7fd fedf 	bl	8013a4c <rmw_uros_epoch_nanos>
 8015c8e:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8015c92:	2305      	movs	r3, #5
 8015c94:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015c98:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8015c9c:	b014      	add	sp, #80	@ 0x50
 8015c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ca2:	bf00      	nop
 8015ca4:	2000dbf4 	.word	0x2000dbf4
 8015ca8:	2000dbe4 	.word	0x2000dbe4

08015cac <on_request>:
 8015cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb0:	4823      	ldr	r0, [pc, #140]	@ (8015d40 <on_request+0x94>)
 8015cb2:	b094      	sub	sp, #80	@ 0x50
 8015cb4:	6800      	ldr	r0, [r0, #0]
 8015cb6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015cb8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015cbc:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015cbe:	2800      	cmp	r0, #0
 8015cc0:	d03b      	beq.n	8015d3a <on_request+0x8e>
 8015cc2:	461d      	mov	r5, r3
 8015cc4:	e001      	b.n	8015cca <on_request+0x1e>
 8015cc6:	6840      	ldr	r0, [r0, #4]
 8015cc8:	b3b8      	cbz	r0, 8015d3a <on_request+0x8e>
 8015cca:	6884      	ldr	r4, [r0, #8]
 8015ccc:	8b21      	ldrh	r1, [r4, #24]
 8015cce:	4291      	cmp	r1, r2
 8015cd0:	d1f9      	bne.n	8015cc6 <on_request+0x1a>
 8015cd2:	2248      	movs	r2, #72	@ 0x48
 8015cd4:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015cd8:	4668      	mov	r0, sp
 8015cda:	f000 fd5a 	bl	8016792 <memcpy>
 8015cde:	f104 0320 	add.w	r3, r4, #32
 8015ce2:	cb0c      	ldmia	r3, {r2, r3}
 8015ce4:	4620      	mov	r0, r4
 8015ce6:	f7f6 f9b7 	bl	800c058 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015cea:	4680      	mov	r8, r0
 8015cec:	b328      	cbz	r0, 8015d3a <on_request+0x8e>
 8015cee:	4638      	mov	r0, r7
 8015cf0:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015cf4:	4632      	mov	r2, r6
 8015cf6:	f107 0110 	add.w	r1, r7, #16
 8015cfa:	f7fd ff83 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 8015cfe:	b930      	cbnz	r0, 8015d0e <on_request+0x62>
 8015d00:	4810      	ldr	r0, [pc, #64]	@ (8015d44 <on_request+0x98>)
 8015d02:	4641      	mov	r1, r8
 8015d04:	b014      	add	sp, #80	@ 0x50
 8015d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d0a:	f7fc bd71 	b.w	80127f0 <put_memory>
 8015d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d10:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8015d14:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015d18:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015d1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015d24:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015d28:	f7fd fe90 	bl	8013a4c <rmw_uros_epoch_nanos>
 8015d2c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015d30:	2303      	movs	r3, #3
 8015d32:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015d36:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015d3a:	b014      	add	sp, #80	@ 0x50
 8015d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d40:	2000dbc4 	.word	0x2000dbc4
 8015d44:	2000dbe4 	.word	0x2000dbe4

08015d48 <on_reply>:
 8015d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d4c:	4821      	ldr	r0, [pc, #132]	@ (8015dd4 <on_reply+0x8c>)
 8015d4e:	b094      	sub	sp, #80	@ 0x50
 8015d50:	6800      	ldr	r0, [r0, #0]
 8015d52:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015d54:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015d58:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015d5a:	b3b8      	cbz	r0, 8015dcc <on_reply+0x84>
 8015d5c:	461d      	mov	r5, r3
 8015d5e:	e001      	b.n	8015d64 <on_reply+0x1c>
 8015d60:	6840      	ldr	r0, [r0, #4]
 8015d62:	b398      	cbz	r0, 8015dcc <on_reply+0x84>
 8015d64:	6884      	ldr	r4, [r0, #8]
 8015d66:	8b21      	ldrh	r1, [r4, #24]
 8015d68:	4291      	cmp	r1, r2
 8015d6a:	d1f9      	bne.n	8015d60 <on_reply+0x18>
 8015d6c:	2248      	movs	r2, #72	@ 0x48
 8015d6e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015d72:	4668      	mov	r0, sp
 8015d74:	f000 fd0d 	bl	8016792 <memcpy>
 8015d78:	f104 0320 	add.w	r3, r4, #32
 8015d7c:	cb0c      	ldmia	r3, {r2, r3}
 8015d7e:	4620      	mov	r0, r4
 8015d80:	f7f6 f96a 	bl	800c058 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015d84:	4680      	mov	r8, r0
 8015d86:	b308      	cbz	r0, 8015dcc <on_reply+0x84>
 8015d88:	4638      	mov	r0, r7
 8015d8a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015d8e:	4632      	mov	r2, r6
 8015d90:	f107 0110 	add.w	r1, r7, #16
 8015d94:	f7fd ff36 	bl	8013c04 <ucdr_deserialize_array_uint8_t>
 8015d98:	b930      	cbnz	r0, 8015da8 <on_reply+0x60>
 8015d9a:	480f      	ldr	r0, [pc, #60]	@ (8015dd8 <on_reply+0x90>)
 8015d9c:	4641      	mov	r1, r8
 8015d9e:	b014      	add	sp, #80	@ 0x50
 8015da0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015da4:	f7fc bd24 	b.w	80127f0 <put_memory>
 8015da8:	2200      	movs	r2, #0
 8015daa:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8015dae:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015db2:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015db6:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8015dba:	f7fd fe47 	bl	8013a4c <rmw_uros_epoch_nanos>
 8015dbe:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015dc2:	2304      	movs	r3, #4
 8015dc4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015dc8:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015dcc:	b014      	add	sp, #80	@ 0x50
 8015dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dd2:	bf00      	nop
 8015dd4:	200092d8 	.word	0x200092d8
 8015dd8:	2000dbe4 	.word	0x2000dbe4

08015ddc <rmw_create_guard_condition>:
 8015ddc:	b538      	push	{r3, r4, r5, lr}
 8015dde:	4605      	mov	r5, r0
 8015de0:	4807      	ldr	r0, [pc, #28]	@ (8015e00 <rmw_create_guard_condition+0x24>)
 8015de2:	f7fc fcf5 	bl	80127d0 <get_memory>
 8015de6:	b148      	cbz	r0, 8015dfc <rmw_create_guard_condition+0x20>
 8015de8:	6884      	ldr	r4, [r0, #8]
 8015dea:	2300      	movs	r3, #0
 8015dec:	7423      	strb	r3, [r4, #16]
 8015dee:	61e5      	str	r5, [r4, #28]
 8015df0:	f7fc fd56 	bl	80128a0 <rmw_get_implementation_identifier>
 8015df4:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8015df8:	f104 0014 	add.w	r0, r4, #20
 8015dfc:	bd38      	pop	{r3, r4, r5, pc}
 8015dfe:	bf00      	nop
 8015e00:	2000db84 	.word	0x2000db84

08015e04 <rmw_destroy_guard_condition>:
 8015e04:	b508      	push	{r3, lr}
 8015e06:	4b08      	ldr	r3, [pc, #32]	@ (8015e28 <rmw_destroy_guard_condition+0x24>)
 8015e08:	6819      	ldr	r1, [r3, #0]
 8015e0a:	b911      	cbnz	r1, 8015e12 <rmw_destroy_guard_condition+0xe>
 8015e0c:	e00a      	b.n	8015e24 <rmw_destroy_guard_condition+0x20>
 8015e0e:	6849      	ldr	r1, [r1, #4]
 8015e10:	b141      	cbz	r1, 8015e24 <rmw_destroy_guard_condition+0x20>
 8015e12:	688b      	ldr	r3, [r1, #8]
 8015e14:	3314      	adds	r3, #20
 8015e16:	4298      	cmp	r0, r3
 8015e18:	d1f9      	bne.n	8015e0e <rmw_destroy_guard_condition+0xa>
 8015e1a:	4803      	ldr	r0, [pc, #12]	@ (8015e28 <rmw_destroy_guard_condition+0x24>)
 8015e1c:	f7fc fce8 	bl	80127f0 <put_memory>
 8015e20:	2000      	movs	r0, #0
 8015e22:	bd08      	pop	{r3, pc}
 8015e24:	2001      	movs	r0, #1
 8015e26:	bd08      	pop	{r3, pc}
 8015e28:	2000db84 	.word	0x2000db84

08015e2c <calloc>:
 8015e2c:	4b02      	ldr	r3, [pc, #8]	@ (8015e38 <calloc+0xc>)
 8015e2e:	460a      	mov	r2, r1
 8015e30:	4601      	mov	r1, r0
 8015e32:	6818      	ldr	r0, [r3, #0]
 8015e34:	f000 b802 	b.w	8015e3c <_calloc_r>
 8015e38:	20000268 	.word	0x20000268

08015e3c <_calloc_r>:
 8015e3c:	b570      	push	{r4, r5, r6, lr}
 8015e3e:	fba1 5402 	umull	r5, r4, r1, r2
 8015e42:	b93c      	cbnz	r4, 8015e54 <_calloc_r+0x18>
 8015e44:	4629      	mov	r1, r5
 8015e46:	f000 f887 	bl	8015f58 <_malloc_r>
 8015e4a:	4606      	mov	r6, r0
 8015e4c:	b928      	cbnz	r0, 8015e5a <_calloc_r+0x1e>
 8015e4e:	2600      	movs	r6, #0
 8015e50:	4630      	mov	r0, r6
 8015e52:	bd70      	pop	{r4, r5, r6, pc}
 8015e54:	220c      	movs	r2, #12
 8015e56:	6002      	str	r2, [r0, #0]
 8015e58:	e7f9      	b.n	8015e4e <_calloc_r+0x12>
 8015e5a:	462a      	mov	r2, r5
 8015e5c:	4621      	mov	r1, r4
 8015e5e:	f000 fbcf 	bl	8016600 <memset>
 8015e62:	e7f5      	b.n	8015e50 <_calloc_r+0x14>

08015e64 <getenv>:
 8015e64:	b507      	push	{r0, r1, r2, lr}
 8015e66:	4b04      	ldr	r3, [pc, #16]	@ (8015e78 <getenv+0x14>)
 8015e68:	4601      	mov	r1, r0
 8015e6a:	aa01      	add	r2, sp, #4
 8015e6c:	6818      	ldr	r0, [r3, #0]
 8015e6e:	f000 f805 	bl	8015e7c <_findenv_r>
 8015e72:	b003      	add	sp, #12
 8015e74:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e78:	20000268 	.word	0x20000268

08015e7c <_findenv_r>:
 8015e7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e80:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8015ef0 <_findenv_r+0x74>
 8015e84:	4606      	mov	r6, r0
 8015e86:	4689      	mov	r9, r1
 8015e88:	4617      	mov	r7, r2
 8015e8a:	f000 fcaf 	bl	80167ec <__env_lock>
 8015e8e:	f8da 4000 	ldr.w	r4, [sl]
 8015e92:	b134      	cbz	r4, 8015ea2 <_findenv_r+0x26>
 8015e94:	464b      	mov	r3, r9
 8015e96:	4698      	mov	r8, r3
 8015e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e9c:	b13a      	cbz	r2, 8015eae <_findenv_r+0x32>
 8015e9e:	2a3d      	cmp	r2, #61	@ 0x3d
 8015ea0:	d1f9      	bne.n	8015e96 <_findenv_r+0x1a>
 8015ea2:	4630      	mov	r0, r6
 8015ea4:	f000 fca8 	bl	80167f8 <__env_unlock>
 8015ea8:	2000      	movs	r0, #0
 8015eaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eae:	eba8 0809 	sub.w	r8, r8, r9
 8015eb2:	46a3      	mov	fp, r4
 8015eb4:	f854 0b04 	ldr.w	r0, [r4], #4
 8015eb8:	2800      	cmp	r0, #0
 8015eba:	d0f2      	beq.n	8015ea2 <_findenv_r+0x26>
 8015ebc:	4642      	mov	r2, r8
 8015ebe:	4649      	mov	r1, r9
 8015ec0:	f000 fbb3 	bl	801662a <strncmp>
 8015ec4:	2800      	cmp	r0, #0
 8015ec6:	d1f4      	bne.n	8015eb2 <_findenv_r+0x36>
 8015ec8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015ecc:	eb03 0508 	add.w	r5, r3, r8
 8015ed0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015ed4:	2b3d      	cmp	r3, #61	@ 0x3d
 8015ed6:	d1ec      	bne.n	8015eb2 <_findenv_r+0x36>
 8015ed8:	f8da 3000 	ldr.w	r3, [sl]
 8015edc:	ebab 0303 	sub.w	r3, fp, r3
 8015ee0:	109b      	asrs	r3, r3, #2
 8015ee2:	4630      	mov	r0, r6
 8015ee4:	603b      	str	r3, [r7, #0]
 8015ee6:	f000 fc87 	bl	80167f8 <__env_unlock>
 8015eea:	1c68      	adds	r0, r5, #1
 8015eec:	e7dd      	b.n	8015eaa <_findenv_r+0x2e>
 8015eee:	bf00      	nop
 8015ef0:	20000000 	.word	0x20000000

08015ef4 <malloc>:
 8015ef4:	4b02      	ldr	r3, [pc, #8]	@ (8015f00 <malloc+0xc>)
 8015ef6:	4601      	mov	r1, r0
 8015ef8:	6818      	ldr	r0, [r3, #0]
 8015efa:	f000 b82d 	b.w	8015f58 <_malloc_r>
 8015efe:	bf00      	nop
 8015f00:	20000268 	.word	0x20000268

08015f04 <free>:
 8015f04:	4b02      	ldr	r3, [pc, #8]	@ (8015f10 <free+0xc>)
 8015f06:	4601      	mov	r1, r0
 8015f08:	6818      	ldr	r0, [r3, #0]
 8015f0a:	f000 bc7b 	b.w	8016804 <_free_r>
 8015f0e:	bf00      	nop
 8015f10:	20000268 	.word	0x20000268

08015f14 <sbrk_aligned>:
 8015f14:	b570      	push	{r4, r5, r6, lr}
 8015f16:	4e0f      	ldr	r6, [pc, #60]	@ (8015f54 <sbrk_aligned+0x40>)
 8015f18:	460c      	mov	r4, r1
 8015f1a:	6831      	ldr	r1, [r6, #0]
 8015f1c:	4605      	mov	r5, r0
 8015f1e:	b911      	cbnz	r1, 8015f26 <sbrk_aligned+0x12>
 8015f20:	f000 fbe0 	bl	80166e4 <_sbrk_r>
 8015f24:	6030      	str	r0, [r6, #0]
 8015f26:	4621      	mov	r1, r4
 8015f28:	4628      	mov	r0, r5
 8015f2a:	f000 fbdb 	bl	80166e4 <_sbrk_r>
 8015f2e:	1c43      	adds	r3, r0, #1
 8015f30:	d103      	bne.n	8015f3a <sbrk_aligned+0x26>
 8015f32:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015f36:	4620      	mov	r0, r4
 8015f38:	bd70      	pop	{r4, r5, r6, pc}
 8015f3a:	1cc4      	adds	r4, r0, #3
 8015f3c:	f024 0403 	bic.w	r4, r4, #3
 8015f40:	42a0      	cmp	r0, r4
 8015f42:	d0f8      	beq.n	8015f36 <sbrk_aligned+0x22>
 8015f44:	1a21      	subs	r1, r4, r0
 8015f46:	4628      	mov	r0, r5
 8015f48:	f000 fbcc 	bl	80166e4 <_sbrk_r>
 8015f4c:	3001      	adds	r0, #1
 8015f4e:	d1f2      	bne.n	8015f36 <sbrk_aligned+0x22>
 8015f50:	e7ef      	b.n	8015f32 <sbrk_aligned+0x1e>
 8015f52:	bf00      	nop
 8015f54:	2000dda8 	.word	0x2000dda8

08015f58 <_malloc_r>:
 8015f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f5c:	1ccd      	adds	r5, r1, #3
 8015f5e:	f025 0503 	bic.w	r5, r5, #3
 8015f62:	3508      	adds	r5, #8
 8015f64:	2d0c      	cmp	r5, #12
 8015f66:	bf38      	it	cc
 8015f68:	250c      	movcc	r5, #12
 8015f6a:	2d00      	cmp	r5, #0
 8015f6c:	4606      	mov	r6, r0
 8015f6e:	db01      	blt.n	8015f74 <_malloc_r+0x1c>
 8015f70:	42a9      	cmp	r1, r5
 8015f72:	d904      	bls.n	8015f7e <_malloc_r+0x26>
 8015f74:	230c      	movs	r3, #12
 8015f76:	6033      	str	r3, [r6, #0]
 8015f78:	2000      	movs	r0, #0
 8015f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016054 <_malloc_r+0xfc>
 8015f82:	f000 f869 	bl	8016058 <__malloc_lock>
 8015f86:	f8d8 3000 	ldr.w	r3, [r8]
 8015f8a:	461c      	mov	r4, r3
 8015f8c:	bb44      	cbnz	r4, 8015fe0 <_malloc_r+0x88>
 8015f8e:	4629      	mov	r1, r5
 8015f90:	4630      	mov	r0, r6
 8015f92:	f7ff ffbf 	bl	8015f14 <sbrk_aligned>
 8015f96:	1c43      	adds	r3, r0, #1
 8015f98:	4604      	mov	r4, r0
 8015f9a:	d158      	bne.n	801604e <_malloc_r+0xf6>
 8015f9c:	f8d8 4000 	ldr.w	r4, [r8]
 8015fa0:	4627      	mov	r7, r4
 8015fa2:	2f00      	cmp	r7, #0
 8015fa4:	d143      	bne.n	801602e <_malloc_r+0xd6>
 8015fa6:	2c00      	cmp	r4, #0
 8015fa8:	d04b      	beq.n	8016042 <_malloc_r+0xea>
 8015faa:	6823      	ldr	r3, [r4, #0]
 8015fac:	4639      	mov	r1, r7
 8015fae:	4630      	mov	r0, r6
 8015fb0:	eb04 0903 	add.w	r9, r4, r3
 8015fb4:	f000 fb96 	bl	80166e4 <_sbrk_r>
 8015fb8:	4581      	cmp	r9, r0
 8015fba:	d142      	bne.n	8016042 <_malloc_r+0xea>
 8015fbc:	6821      	ldr	r1, [r4, #0]
 8015fbe:	1a6d      	subs	r5, r5, r1
 8015fc0:	4629      	mov	r1, r5
 8015fc2:	4630      	mov	r0, r6
 8015fc4:	f7ff ffa6 	bl	8015f14 <sbrk_aligned>
 8015fc8:	3001      	adds	r0, #1
 8015fca:	d03a      	beq.n	8016042 <_malloc_r+0xea>
 8015fcc:	6823      	ldr	r3, [r4, #0]
 8015fce:	442b      	add	r3, r5
 8015fd0:	6023      	str	r3, [r4, #0]
 8015fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8015fd6:	685a      	ldr	r2, [r3, #4]
 8015fd8:	bb62      	cbnz	r2, 8016034 <_malloc_r+0xdc>
 8015fda:	f8c8 7000 	str.w	r7, [r8]
 8015fde:	e00f      	b.n	8016000 <_malloc_r+0xa8>
 8015fe0:	6822      	ldr	r2, [r4, #0]
 8015fe2:	1b52      	subs	r2, r2, r5
 8015fe4:	d420      	bmi.n	8016028 <_malloc_r+0xd0>
 8015fe6:	2a0b      	cmp	r2, #11
 8015fe8:	d917      	bls.n	801601a <_malloc_r+0xc2>
 8015fea:	1961      	adds	r1, r4, r5
 8015fec:	42a3      	cmp	r3, r4
 8015fee:	6025      	str	r5, [r4, #0]
 8015ff0:	bf18      	it	ne
 8015ff2:	6059      	strne	r1, [r3, #4]
 8015ff4:	6863      	ldr	r3, [r4, #4]
 8015ff6:	bf08      	it	eq
 8015ff8:	f8c8 1000 	streq.w	r1, [r8]
 8015ffc:	5162      	str	r2, [r4, r5]
 8015ffe:	604b      	str	r3, [r1, #4]
 8016000:	4630      	mov	r0, r6
 8016002:	f000 f82f 	bl	8016064 <__malloc_unlock>
 8016006:	f104 000b 	add.w	r0, r4, #11
 801600a:	1d23      	adds	r3, r4, #4
 801600c:	f020 0007 	bic.w	r0, r0, #7
 8016010:	1ac2      	subs	r2, r0, r3
 8016012:	bf1c      	itt	ne
 8016014:	1a1b      	subne	r3, r3, r0
 8016016:	50a3      	strne	r3, [r4, r2]
 8016018:	e7af      	b.n	8015f7a <_malloc_r+0x22>
 801601a:	6862      	ldr	r2, [r4, #4]
 801601c:	42a3      	cmp	r3, r4
 801601e:	bf0c      	ite	eq
 8016020:	f8c8 2000 	streq.w	r2, [r8]
 8016024:	605a      	strne	r2, [r3, #4]
 8016026:	e7eb      	b.n	8016000 <_malloc_r+0xa8>
 8016028:	4623      	mov	r3, r4
 801602a:	6864      	ldr	r4, [r4, #4]
 801602c:	e7ae      	b.n	8015f8c <_malloc_r+0x34>
 801602e:	463c      	mov	r4, r7
 8016030:	687f      	ldr	r7, [r7, #4]
 8016032:	e7b6      	b.n	8015fa2 <_malloc_r+0x4a>
 8016034:	461a      	mov	r2, r3
 8016036:	685b      	ldr	r3, [r3, #4]
 8016038:	42a3      	cmp	r3, r4
 801603a:	d1fb      	bne.n	8016034 <_malloc_r+0xdc>
 801603c:	2300      	movs	r3, #0
 801603e:	6053      	str	r3, [r2, #4]
 8016040:	e7de      	b.n	8016000 <_malloc_r+0xa8>
 8016042:	230c      	movs	r3, #12
 8016044:	6033      	str	r3, [r6, #0]
 8016046:	4630      	mov	r0, r6
 8016048:	f000 f80c 	bl	8016064 <__malloc_unlock>
 801604c:	e794      	b.n	8015f78 <_malloc_r+0x20>
 801604e:	6005      	str	r5, [r0, #0]
 8016050:	e7d6      	b.n	8016000 <_malloc_r+0xa8>
 8016052:	bf00      	nop
 8016054:	2000ddac 	.word	0x2000ddac

08016058 <__malloc_lock>:
 8016058:	4801      	ldr	r0, [pc, #4]	@ (8016060 <__malloc_lock+0x8>)
 801605a:	f000 bb90 	b.w	801677e <__retarget_lock_acquire_recursive>
 801605e:	bf00      	nop
 8016060:	2000def1 	.word	0x2000def1

08016064 <__malloc_unlock>:
 8016064:	4801      	ldr	r0, [pc, #4]	@ (801606c <__malloc_unlock+0x8>)
 8016066:	f000 bb8b 	b.w	8016780 <__retarget_lock_release_recursive>
 801606a:	bf00      	nop
 801606c:	2000def1 	.word	0x2000def1

08016070 <srand>:
 8016070:	b538      	push	{r3, r4, r5, lr}
 8016072:	4b10      	ldr	r3, [pc, #64]	@ (80160b4 <srand+0x44>)
 8016074:	681d      	ldr	r5, [r3, #0]
 8016076:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016078:	4604      	mov	r4, r0
 801607a:	b9b3      	cbnz	r3, 80160aa <srand+0x3a>
 801607c:	2018      	movs	r0, #24
 801607e:	f7ff ff39 	bl	8015ef4 <malloc>
 8016082:	4602      	mov	r2, r0
 8016084:	6328      	str	r0, [r5, #48]	@ 0x30
 8016086:	b920      	cbnz	r0, 8016092 <srand+0x22>
 8016088:	4b0b      	ldr	r3, [pc, #44]	@ (80160b8 <srand+0x48>)
 801608a:	480c      	ldr	r0, [pc, #48]	@ (80160bc <srand+0x4c>)
 801608c:	2146      	movs	r1, #70	@ 0x46
 801608e:	f000 fb8f 	bl	80167b0 <__assert_func>
 8016092:	490b      	ldr	r1, [pc, #44]	@ (80160c0 <srand+0x50>)
 8016094:	4b0b      	ldr	r3, [pc, #44]	@ (80160c4 <srand+0x54>)
 8016096:	e9c0 1300 	strd	r1, r3, [r0]
 801609a:	4b0b      	ldr	r3, [pc, #44]	@ (80160c8 <srand+0x58>)
 801609c:	6083      	str	r3, [r0, #8]
 801609e:	230b      	movs	r3, #11
 80160a0:	8183      	strh	r3, [r0, #12]
 80160a2:	2100      	movs	r1, #0
 80160a4:	2001      	movs	r0, #1
 80160a6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80160aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80160ac:	2200      	movs	r2, #0
 80160ae:	611c      	str	r4, [r3, #16]
 80160b0:	615a      	str	r2, [r3, #20]
 80160b2:	bd38      	pop	{r3, r4, r5, pc}
 80160b4:	20000268 	.word	0x20000268
 80160b8:	0801830c 	.word	0x0801830c
 80160bc:	08018323 	.word	0x08018323
 80160c0:	abcd330e 	.word	0xabcd330e
 80160c4:	e66d1234 	.word	0xe66d1234
 80160c8:	0005deec 	.word	0x0005deec

080160cc <rand>:
 80160cc:	4b16      	ldr	r3, [pc, #88]	@ (8016128 <rand+0x5c>)
 80160ce:	b510      	push	{r4, lr}
 80160d0:	681c      	ldr	r4, [r3, #0]
 80160d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80160d4:	b9b3      	cbnz	r3, 8016104 <rand+0x38>
 80160d6:	2018      	movs	r0, #24
 80160d8:	f7ff ff0c 	bl	8015ef4 <malloc>
 80160dc:	4602      	mov	r2, r0
 80160de:	6320      	str	r0, [r4, #48]	@ 0x30
 80160e0:	b920      	cbnz	r0, 80160ec <rand+0x20>
 80160e2:	4b12      	ldr	r3, [pc, #72]	@ (801612c <rand+0x60>)
 80160e4:	4812      	ldr	r0, [pc, #72]	@ (8016130 <rand+0x64>)
 80160e6:	2152      	movs	r1, #82	@ 0x52
 80160e8:	f000 fb62 	bl	80167b0 <__assert_func>
 80160ec:	4911      	ldr	r1, [pc, #68]	@ (8016134 <rand+0x68>)
 80160ee:	4b12      	ldr	r3, [pc, #72]	@ (8016138 <rand+0x6c>)
 80160f0:	e9c0 1300 	strd	r1, r3, [r0]
 80160f4:	4b11      	ldr	r3, [pc, #68]	@ (801613c <rand+0x70>)
 80160f6:	6083      	str	r3, [r0, #8]
 80160f8:	230b      	movs	r3, #11
 80160fa:	8183      	strh	r3, [r0, #12]
 80160fc:	2100      	movs	r1, #0
 80160fe:	2001      	movs	r0, #1
 8016100:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016104:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016106:	480e      	ldr	r0, [pc, #56]	@ (8016140 <rand+0x74>)
 8016108:	690b      	ldr	r3, [r1, #16]
 801610a:	694c      	ldr	r4, [r1, #20]
 801610c:	4a0d      	ldr	r2, [pc, #52]	@ (8016144 <rand+0x78>)
 801610e:	4358      	muls	r0, r3
 8016110:	fb02 0004 	mla	r0, r2, r4, r0
 8016114:	fba3 3202 	umull	r3, r2, r3, r2
 8016118:	3301      	adds	r3, #1
 801611a:	eb40 0002 	adc.w	r0, r0, r2
 801611e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016122:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016126:	bd10      	pop	{r4, pc}
 8016128:	20000268 	.word	0x20000268
 801612c:	0801830c 	.word	0x0801830c
 8016130:	08018323 	.word	0x08018323
 8016134:	abcd330e 	.word	0xabcd330e
 8016138:	e66d1234 	.word	0xe66d1234
 801613c:	0005deec 	.word	0x0005deec
 8016140:	5851f42d 	.word	0x5851f42d
 8016144:	4c957f2d 	.word	0x4c957f2d

08016148 <realloc>:
 8016148:	4b02      	ldr	r3, [pc, #8]	@ (8016154 <realloc+0xc>)
 801614a:	460a      	mov	r2, r1
 801614c:	4601      	mov	r1, r0
 801614e:	6818      	ldr	r0, [r3, #0]
 8016150:	f000 b802 	b.w	8016158 <_realloc_r>
 8016154:	20000268 	.word	0x20000268

08016158 <_realloc_r>:
 8016158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801615c:	4680      	mov	r8, r0
 801615e:	4615      	mov	r5, r2
 8016160:	460c      	mov	r4, r1
 8016162:	b921      	cbnz	r1, 801616e <_realloc_r+0x16>
 8016164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016168:	4611      	mov	r1, r2
 801616a:	f7ff bef5 	b.w	8015f58 <_malloc_r>
 801616e:	b92a      	cbnz	r2, 801617c <_realloc_r+0x24>
 8016170:	f000 fb48 	bl	8016804 <_free_r>
 8016174:	2400      	movs	r4, #0
 8016176:	4620      	mov	r0, r4
 8016178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801617c:	f000 fb8c 	bl	8016898 <_malloc_usable_size_r>
 8016180:	4285      	cmp	r5, r0
 8016182:	4606      	mov	r6, r0
 8016184:	d802      	bhi.n	801618c <_realloc_r+0x34>
 8016186:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801618a:	d8f4      	bhi.n	8016176 <_realloc_r+0x1e>
 801618c:	4629      	mov	r1, r5
 801618e:	4640      	mov	r0, r8
 8016190:	f7ff fee2 	bl	8015f58 <_malloc_r>
 8016194:	4607      	mov	r7, r0
 8016196:	2800      	cmp	r0, #0
 8016198:	d0ec      	beq.n	8016174 <_realloc_r+0x1c>
 801619a:	42b5      	cmp	r5, r6
 801619c:	462a      	mov	r2, r5
 801619e:	4621      	mov	r1, r4
 80161a0:	bf28      	it	cs
 80161a2:	4632      	movcs	r2, r6
 80161a4:	f000 faf5 	bl	8016792 <memcpy>
 80161a8:	4621      	mov	r1, r4
 80161aa:	4640      	mov	r0, r8
 80161ac:	f000 fb2a 	bl	8016804 <_free_r>
 80161b0:	463c      	mov	r4, r7
 80161b2:	e7e0      	b.n	8016176 <_realloc_r+0x1e>

080161b4 <_strtoul_l.constprop.0>:
 80161b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161b8:	4e34      	ldr	r6, [pc, #208]	@ (801628c <_strtoul_l.constprop.0+0xd8>)
 80161ba:	4686      	mov	lr, r0
 80161bc:	460d      	mov	r5, r1
 80161be:	4628      	mov	r0, r5
 80161c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80161c4:	5d37      	ldrb	r7, [r6, r4]
 80161c6:	f017 0708 	ands.w	r7, r7, #8
 80161ca:	d1f8      	bne.n	80161be <_strtoul_l.constprop.0+0xa>
 80161cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80161ce:	d12f      	bne.n	8016230 <_strtoul_l.constprop.0+0x7c>
 80161d0:	782c      	ldrb	r4, [r5, #0]
 80161d2:	2701      	movs	r7, #1
 80161d4:	1c85      	adds	r5, r0, #2
 80161d6:	f033 0010 	bics.w	r0, r3, #16
 80161da:	d109      	bne.n	80161f0 <_strtoul_l.constprop.0+0x3c>
 80161dc:	2c30      	cmp	r4, #48	@ 0x30
 80161de:	d12c      	bne.n	801623a <_strtoul_l.constprop.0+0x86>
 80161e0:	7828      	ldrb	r0, [r5, #0]
 80161e2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80161e6:	2858      	cmp	r0, #88	@ 0x58
 80161e8:	d127      	bne.n	801623a <_strtoul_l.constprop.0+0x86>
 80161ea:	786c      	ldrb	r4, [r5, #1]
 80161ec:	2310      	movs	r3, #16
 80161ee:	3502      	adds	r5, #2
 80161f0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80161f4:	2600      	movs	r6, #0
 80161f6:	fbb8 f8f3 	udiv	r8, r8, r3
 80161fa:	fb03 f908 	mul.w	r9, r3, r8
 80161fe:	ea6f 0909 	mvn.w	r9, r9
 8016202:	4630      	mov	r0, r6
 8016204:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016208:	f1bc 0f09 	cmp.w	ip, #9
 801620c:	d81c      	bhi.n	8016248 <_strtoul_l.constprop.0+0x94>
 801620e:	4664      	mov	r4, ip
 8016210:	42a3      	cmp	r3, r4
 8016212:	dd2a      	ble.n	801626a <_strtoul_l.constprop.0+0xb6>
 8016214:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8016218:	d007      	beq.n	801622a <_strtoul_l.constprop.0+0x76>
 801621a:	4580      	cmp	r8, r0
 801621c:	d322      	bcc.n	8016264 <_strtoul_l.constprop.0+0xb0>
 801621e:	d101      	bne.n	8016224 <_strtoul_l.constprop.0+0x70>
 8016220:	45a1      	cmp	r9, r4
 8016222:	db1f      	blt.n	8016264 <_strtoul_l.constprop.0+0xb0>
 8016224:	fb00 4003 	mla	r0, r0, r3, r4
 8016228:	2601      	movs	r6, #1
 801622a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801622e:	e7e9      	b.n	8016204 <_strtoul_l.constprop.0+0x50>
 8016230:	2c2b      	cmp	r4, #43	@ 0x2b
 8016232:	bf04      	itt	eq
 8016234:	782c      	ldrbeq	r4, [r5, #0]
 8016236:	1c85      	addeq	r5, r0, #2
 8016238:	e7cd      	b.n	80161d6 <_strtoul_l.constprop.0+0x22>
 801623a:	2b00      	cmp	r3, #0
 801623c:	d1d8      	bne.n	80161f0 <_strtoul_l.constprop.0+0x3c>
 801623e:	2c30      	cmp	r4, #48	@ 0x30
 8016240:	bf0c      	ite	eq
 8016242:	2308      	moveq	r3, #8
 8016244:	230a      	movne	r3, #10
 8016246:	e7d3      	b.n	80161f0 <_strtoul_l.constprop.0+0x3c>
 8016248:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801624c:	f1bc 0f19 	cmp.w	ip, #25
 8016250:	d801      	bhi.n	8016256 <_strtoul_l.constprop.0+0xa2>
 8016252:	3c37      	subs	r4, #55	@ 0x37
 8016254:	e7dc      	b.n	8016210 <_strtoul_l.constprop.0+0x5c>
 8016256:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801625a:	f1bc 0f19 	cmp.w	ip, #25
 801625e:	d804      	bhi.n	801626a <_strtoul_l.constprop.0+0xb6>
 8016260:	3c57      	subs	r4, #87	@ 0x57
 8016262:	e7d5      	b.n	8016210 <_strtoul_l.constprop.0+0x5c>
 8016264:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016268:	e7df      	b.n	801622a <_strtoul_l.constprop.0+0x76>
 801626a:	1c73      	adds	r3, r6, #1
 801626c:	d106      	bne.n	801627c <_strtoul_l.constprop.0+0xc8>
 801626e:	2322      	movs	r3, #34	@ 0x22
 8016270:	f8ce 3000 	str.w	r3, [lr]
 8016274:	4630      	mov	r0, r6
 8016276:	b932      	cbnz	r2, 8016286 <_strtoul_l.constprop.0+0xd2>
 8016278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801627c:	b107      	cbz	r7, 8016280 <_strtoul_l.constprop.0+0xcc>
 801627e:	4240      	negs	r0, r0
 8016280:	2a00      	cmp	r2, #0
 8016282:	d0f9      	beq.n	8016278 <_strtoul_l.constprop.0+0xc4>
 8016284:	b106      	cbz	r6, 8016288 <_strtoul_l.constprop.0+0xd4>
 8016286:	1e69      	subs	r1, r5, #1
 8016288:	6011      	str	r1, [r2, #0]
 801628a:	e7f5      	b.n	8016278 <_strtoul_l.constprop.0+0xc4>
 801628c:	0801837c 	.word	0x0801837c

08016290 <strtoul>:
 8016290:	4613      	mov	r3, r2
 8016292:	460a      	mov	r2, r1
 8016294:	4601      	mov	r1, r0
 8016296:	4802      	ldr	r0, [pc, #8]	@ (80162a0 <strtoul+0x10>)
 8016298:	6800      	ldr	r0, [r0, #0]
 801629a:	f7ff bf8b 	b.w	80161b4 <_strtoul_l.constprop.0>
 801629e:	bf00      	nop
 80162a0:	20000268 	.word	0x20000268

080162a4 <std>:
 80162a4:	2300      	movs	r3, #0
 80162a6:	b510      	push	{r4, lr}
 80162a8:	4604      	mov	r4, r0
 80162aa:	e9c0 3300 	strd	r3, r3, [r0]
 80162ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80162b2:	6083      	str	r3, [r0, #8]
 80162b4:	8181      	strh	r1, [r0, #12]
 80162b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80162b8:	81c2      	strh	r2, [r0, #14]
 80162ba:	6183      	str	r3, [r0, #24]
 80162bc:	4619      	mov	r1, r3
 80162be:	2208      	movs	r2, #8
 80162c0:	305c      	adds	r0, #92	@ 0x5c
 80162c2:	f000 f99d 	bl	8016600 <memset>
 80162c6:	4b0d      	ldr	r3, [pc, #52]	@ (80162fc <std+0x58>)
 80162c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80162ca:	4b0d      	ldr	r3, [pc, #52]	@ (8016300 <std+0x5c>)
 80162cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80162ce:	4b0d      	ldr	r3, [pc, #52]	@ (8016304 <std+0x60>)
 80162d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80162d2:	4b0d      	ldr	r3, [pc, #52]	@ (8016308 <std+0x64>)
 80162d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80162d6:	4b0d      	ldr	r3, [pc, #52]	@ (801630c <std+0x68>)
 80162d8:	6224      	str	r4, [r4, #32]
 80162da:	429c      	cmp	r4, r3
 80162dc:	d006      	beq.n	80162ec <std+0x48>
 80162de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80162e2:	4294      	cmp	r4, r2
 80162e4:	d002      	beq.n	80162ec <std+0x48>
 80162e6:	33d0      	adds	r3, #208	@ 0xd0
 80162e8:	429c      	cmp	r4, r3
 80162ea:	d105      	bne.n	80162f8 <std+0x54>
 80162ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80162f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162f4:	f000 ba42 	b.w	801677c <__retarget_lock_init_recursive>
 80162f8:	bd10      	pop	{r4, pc}
 80162fa:	bf00      	nop
 80162fc:	080164b5 	.word	0x080164b5
 8016300:	080164d7 	.word	0x080164d7
 8016304:	0801650f 	.word	0x0801650f
 8016308:	08016533 	.word	0x08016533
 801630c:	2000ddb0 	.word	0x2000ddb0

08016310 <stdio_exit_handler>:
 8016310:	4a02      	ldr	r2, [pc, #8]	@ (801631c <stdio_exit_handler+0xc>)
 8016312:	4903      	ldr	r1, [pc, #12]	@ (8016320 <stdio_exit_handler+0x10>)
 8016314:	4803      	ldr	r0, [pc, #12]	@ (8016324 <stdio_exit_handler+0x14>)
 8016316:	f000 b869 	b.w	80163ec <_fwalk_sglue>
 801631a:	bf00      	nop
 801631c:	2000025c 	.word	0x2000025c
 8016320:	08017201 	.word	0x08017201
 8016324:	2000026c 	.word	0x2000026c

08016328 <cleanup_stdio>:
 8016328:	6841      	ldr	r1, [r0, #4]
 801632a:	4b0c      	ldr	r3, [pc, #48]	@ (801635c <cleanup_stdio+0x34>)
 801632c:	4299      	cmp	r1, r3
 801632e:	b510      	push	{r4, lr}
 8016330:	4604      	mov	r4, r0
 8016332:	d001      	beq.n	8016338 <cleanup_stdio+0x10>
 8016334:	f000 ff64 	bl	8017200 <_fflush_r>
 8016338:	68a1      	ldr	r1, [r4, #8]
 801633a:	4b09      	ldr	r3, [pc, #36]	@ (8016360 <cleanup_stdio+0x38>)
 801633c:	4299      	cmp	r1, r3
 801633e:	d002      	beq.n	8016346 <cleanup_stdio+0x1e>
 8016340:	4620      	mov	r0, r4
 8016342:	f000 ff5d 	bl	8017200 <_fflush_r>
 8016346:	68e1      	ldr	r1, [r4, #12]
 8016348:	4b06      	ldr	r3, [pc, #24]	@ (8016364 <cleanup_stdio+0x3c>)
 801634a:	4299      	cmp	r1, r3
 801634c:	d004      	beq.n	8016358 <cleanup_stdio+0x30>
 801634e:	4620      	mov	r0, r4
 8016350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016354:	f000 bf54 	b.w	8017200 <_fflush_r>
 8016358:	bd10      	pop	{r4, pc}
 801635a:	bf00      	nop
 801635c:	2000ddb0 	.word	0x2000ddb0
 8016360:	2000de18 	.word	0x2000de18
 8016364:	2000de80 	.word	0x2000de80

08016368 <global_stdio_init.part.0>:
 8016368:	b510      	push	{r4, lr}
 801636a:	4b0b      	ldr	r3, [pc, #44]	@ (8016398 <global_stdio_init.part.0+0x30>)
 801636c:	4c0b      	ldr	r4, [pc, #44]	@ (801639c <global_stdio_init.part.0+0x34>)
 801636e:	4a0c      	ldr	r2, [pc, #48]	@ (80163a0 <global_stdio_init.part.0+0x38>)
 8016370:	601a      	str	r2, [r3, #0]
 8016372:	4620      	mov	r0, r4
 8016374:	2200      	movs	r2, #0
 8016376:	2104      	movs	r1, #4
 8016378:	f7ff ff94 	bl	80162a4 <std>
 801637c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016380:	2201      	movs	r2, #1
 8016382:	2109      	movs	r1, #9
 8016384:	f7ff ff8e 	bl	80162a4 <std>
 8016388:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801638c:	2202      	movs	r2, #2
 801638e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016392:	2112      	movs	r1, #18
 8016394:	f7ff bf86 	b.w	80162a4 <std>
 8016398:	2000dee8 	.word	0x2000dee8
 801639c:	2000ddb0 	.word	0x2000ddb0
 80163a0:	08016311 	.word	0x08016311

080163a4 <__sfp_lock_acquire>:
 80163a4:	4801      	ldr	r0, [pc, #4]	@ (80163ac <__sfp_lock_acquire+0x8>)
 80163a6:	f000 b9ea 	b.w	801677e <__retarget_lock_acquire_recursive>
 80163aa:	bf00      	nop
 80163ac:	2000def2 	.word	0x2000def2

080163b0 <__sfp_lock_release>:
 80163b0:	4801      	ldr	r0, [pc, #4]	@ (80163b8 <__sfp_lock_release+0x8>)
 80163b2:	f000 b9e5 	b.w	8016780 <__retarget_lock_release_recursive>
 80163b6:	bf00      	nop
 80163b8:	2000def2 	.word	0x2000def2

080163bc <__sinit>:
 80163bc:	b510      	push	{r4, lr}
 80163be:	4604      	mov	r4, r0
 80163c0:	f7ff fff0 	bl	80163a4 <__sfp_lock_acquire>
 80163c4:	6a23      	ldr	r3, [r4, #32]
 80163c6:	b11b      	cbz	r3, 80163d0 <__sinit+0x14>
 80163c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163cc:	f7ff bff0 	b.w	80163b0 <__sfp_lock_release>
 80163d0:	4b04      	ldr	r3, [pc, #16]	@ (80163e4 <__sinit+0x28>)
 80163d2:	6223      	str	r3, [r4, #32]
 80163d4:	4b04      	ldr	r3, [pc, #16]	@ (80163e8 <__sinit+0x2c>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d1f5      	bne.n	80163c8 <__sinit+0xc>
 80163dc:	f7ff ffc4 	bl	8016368 <global_stdio_init.part.0>
 80163e0:	e7f2      	b.n	80163c8 <__sinit+0xc>
 80163e2:	bf00      	nop
 80163e4:	08016329 	.word	0x08016329
 80163e8:	2000dee8 	.word	0x2000dee8

080163ec <_fwalk_sglue>:
 80163ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163f0:	4607      	mov	r7, r0
 80163f2:	4688      	mov	r8, r1
 80163f4:	4614      	mov	r4, r2
 80163f6:	2600      	movs	r6, #0
 80163f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80163fc:	f1b9 0901 	subs.w	r9, r9, #1
 8016400:	d505      	bpl.n	801640e <_fwalk_sglue+0x22>
 8016402:	6824      	ldr	r4, [r4, #0]
 8016404:	2c00      	cmp	r4, #0
 8016406:	d1f7      	bne.n	80163f8 <_fwalk_sglue+0xc>
 8016408:	4630      	mov	r0, r6
 801640a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801640e:	89ab      	ldrh	r3, [r5, #12]
 8016410:	2b01      	cmp	r3, #1
 8016412:	d907      	bls.n	8016424 <_fwalk_sglue+0x38>
 8016414:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016418:	3301      	adds	r3, #1
 801641a:	d003      	beq.n	8016424 <_fwalk_sglue+0x38>
 801641c:	4629      	mov	r1, r5
 801641e:	4638      	mov	r0, r7
 8016420:	47c0      	blx	r8
 8016422:	4306      	orrs	r6, r0
 8016424:	3568      	adds	r5, #104	@ 0x68
 8016426:	e7e9      	b.n	80163fc <_fwalk_sglue+0x10>

08016428 <iprintf>:
 8016428:	b40f      	push	{r0, r1, r2, r3}
 801642a:	b507      	push	{r0, r1, r2, lr}
 801642c:	4906      	ldr	r1, [pc, #24]	@ (8016448 <iprintf+0x20>)
 801642e:	ab04      	add	r3, sp, #16
 8016430:	6808      	ldr	r0, [r1, #0]
 8016432:	f853 2b04 	ldr.w	r2, [r3], #4
 8016436:	6881      	ldr	r1, [r0, #8]
 8016438:	9301      	str	r3, [sp, #4]
 801643a:	f000 fbb7 	bl	8016bac <_vfiprintf_r>
 801643e:	b003      	add	sp, #12
 8016440:	f85d eb04 	ldr.w	lr, [sp], #4
 8016444:	b004      	add	sp, #16
 8016446:	4770      	bx	lr
 8016448:	20000268 	.word	0x20000268

0801644c <sniprintf>:
 801644c:	b40c      	push	{r2, r3}
 801644e:	b530      	push	{r4, r5, lr}
 8016450:	4b17      	ldr	r3, [pc, #92]	@ (80164b0 <sniprintf+0x64>)
 8016452:	1e0c      	subs	r4, r1, #0
 8016454:	681d      	ldr	r5, [r3, #0]
 8016456:	b09d      	sub	sp, #116	@ 0x74
 8016458:	da08      	bge.n	801646c <sniprintf+0x20>
 801645a:	238b      	movs	r3, #139	@ 0x8b
 801645c:	602b      	str	r3, [r5, #0]
 801645e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016462:	b01d      	add	sp, #116	@ 0x74
 8016464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016468:	b002      	add	sp, #8
 801646a:	4770      	bx	lr
 801646c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016470:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016474:	bf14      	ite	ne
 8016476:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801647a:	4623      	moveq	r3, r4
 801647c:	9304      	str	r3, [sp, #16]
 801647e:	9307      	str	r3, [sp, #28]
 8016480:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016484:	9002      	str	r0, [sp, #8]
 8016486:	9006      	str	r0, [sp, #24]
 8016488:	f8ad 3016 	strh.w	r3, [sp, #22]
 801648c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801648e:	ab21      	add	r3, sp, #132	@ 0x84
 8016490:	a902      	add	r1, sp, #8
 8016492:	4628      	mov	r0, r5
 8016494:	9301      	str	r3, [sp, #4]
 8016496:	f000 fa63 	bl	8016960 <_svfiprintf_r>
 801649a:	1c43      	adds	r3, r0, #1
 801649c:	bfbc      	itt	lt
 801649e:	238b      	movlt	r3, #139	@ 0x8b
 80164a0:	602b      	strlt	r3, [r5, #0]
 80164a2:	2c00      	cmp	r4, #0
 80164a4:	d0dd      	beq.n	8016462 <sniprintf+0x16>
 80164a6:	9b02      	ldr	r3, [sp, #8]
 80164a8:	2200      	movs	r2, #0
 80164aa:	701a      	strb	r2, [r3, #0]
 80164ac:	e7d9      	b.n	8016462 <sniprintf+0x16>
 80164ae:	bf00      	nop
 80164b0:	20000268 	.word	0x20000268

080164b4 <__sread>:
 80164b4:	b510      	push	{r4, lr}
 80164b6:	460c      	mov	r4, r1
 80164b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164bc:	f000 f900 	bl	80166c0 <_read_r>
 80164c0:	2800      	cmp	r0, #0
 80164c2:	bfab      	itete	ge
 80164c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80164c6:	89a3      	ldrhlt	r3, [r4, #12]
 80164c8:	181b      	addge	r3, r3, r0
 80164ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80164ce:	bfac      	ite	ge
 80164d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80164d2:	81a3      	strhlt	r3, [r4, #12]
 80164d4:	bd10      	pop	{r4, pc}

080164d6 <__swrite>:
 80164d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164da:	461f      	mov	r7, r3
 80164dc:	898b      	ldrh	r3, [r1, #12]
 80164de:	05db      	lsls	r3, r3, #23
 80164e0:	4605      	mov	r5, r0
 80164e2:	460c      	mov	r4, r1
 80164e4:	4616      	mov	r6, r2
 80164e6:	d505      	bpl.n	80164f4 <__swrite+0x1e>
 80164e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164ec:	2302      	movs	r3, #2
 80164ee:	2200      	movs	r2, #0
 80164f0:	f000 f8d4 	bl	801669c <_lseek_r>
 80164f4:	89a3      	ldrh	r3, [r4, #12]
 80164f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80164fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80164fe:	81a3      	strh	r3, [r4, #12]
 8016500:	4632      	mov	r2, r6
 8016502:	463b      	mov	r3, r7
 8016504:	4628      	mov	r0, r5
 8016506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801650a:	f000 b8fb 	b.w	8016704 <_write_r>

0801650e <__sseek>:
 801650e:	b510      	push	{r4, lr}
 8016510:	460c      	mov	r4, r1
 8016512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016516:	f000 f8c1 	bl	801669c <_lseek_r>
 801651a:	1c43      	adds	r3, r0, #1
 801651c:	89a3      	ldrh	r3, [r4, #12]
 801651e:	bf15      	itete	ne
 8016520:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016522:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016526:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801652a:	81a3      	strheq	r3, [r4, #12]
 801652c:	bf18      	it	ne
 801652e:	81a3      	strhne	r3, [r4, #12]
 8016530:	bd10      	pop	{r4, pc}

08016532 <__sclose>:
 8016532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016536:	f000 b8a1 	b.w	801667c <_close_r>

0801653a <_vsniprintf_r>:
 801653a:	b530      	push	{r4, r5, lr}
 801653c:	4614      	mov	r4, r2
 801653e:	2c00      	cmp	r4, #0
 8016540:	b09b      	sub	sp, #108	@ 0x6c
 8016542:	4605      	mov	r5, r0
 8016544:	461a      	mov	r2, r3
 8016546:	da05      	bge.n	8016554 <_vsniprintf_r+0x1a>
 8016548:	238b      	movs	r3, #139	@ 0x8b
 801654a:	6003      	str	r3, [r0, #0]
 801654c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016550:	b01b      	add	sp, #108	@ 0x6c
 8016552:	bd30      	pop	{r4, r5, pc}
 8016554:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016558:	f8ad 300c 	strh.w	r3, [sp, #12]
 801655c:	bf14      	ite	ne
 801655e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016562:	4623      	moveq	r3, r4
 8016564:	9302      	str	r3, [sp, #8]
 8016566:	9305      	str	r3, [sp, #20]
 8016568:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801656c:	9100      	str	r1, [sp, #0]
 801656e:	9104      	str	r1, [sp, #16]
 8016570:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016574:	4669      	mov	r1, sp
 8016576:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016578:	f000 f9f2 	bl	8016960 <_svfiprintf_r>
 801657c:	1c43      	adds	r3, r0, #1
 801657e:	bfbc      	itt	lt
 8016580:	238b      	movlt	r3, #139	@ 0x8b
 8016582:	602b      	strlt	r3, [r5, #0]
 8016584:	2c00      	cmp	r4, #0
 8016586:	d0e3      	beq.n	8016550 <_vsniprintf_r+0x16>
 8016588:	9b00      	ldr	r3, [sp, #0]
 801658a:	2200      	movs	r2, #0
 801658c:	701a      	strb	r2, [r3, #0]
 801658e:	e7df      	b.n	8016550 <_vsniprintf_r+0x16>

08016590 <vsniprintf>:
 8016590:	b507      	push	{r0, r1, r2, lr}
 8016592:	9300      	str	r3, [sp, #0]
 8016594:	4613      	mov	r3, r2
 8016596:	460a      	mov	r2, r1
 8016598:	4601      	mov	r1, r0
 801659a:	4803      	ldr	r0, [pc, #12]	@ (80165a8 <vsniprintf+0x18>)
 801659c:	6800      	ldr	r0, [r0, #0]
 801659e:	f7ff ffcc 	bl	801653a <_vsniprintf_r>
 80165a2:	b003      	add	sp, #12
 80165a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80165a8:	20000268 	.word	0x20000268

080165ac <memcmp>:
 80165ac:	b510      	push	{r4, lr}
 80165ae:	3901      	subs	r1, #1
 80165b0:	4402      	add	r2, r0
 80165b2:	4290      	cmp	r0, r2
 80165b4:	d101      	bne.n	80165ba <memcmp+0xe>
 80165b6:	2000      	movs	r0, #0
 80165b8:	e005      	b.n	80165c6 <memcmp+0x1a>
 80165ba:	7803      	ldrb	r3, [r0, #0]
 80165bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80165c0:	42a3      	cmp	r3, r4
 80165c2:	d001      	beq.n	80165c8 <memcmp+0x1c>
 80165c4:	1b18      	subs	r0, r3, r4
 80165c6:	bd10      	pop	{r4, pc}
 80165c8:	3001      	adds	r0, #1
 80165ca:	e7f2      	b.n	80165b2 <memcmp+0x6>

080165cc <memmove>:
 80165cc:	4288      	cmp	r0, r1
 80165ce:	b510      	push	{r4, lr}
 80165d0:	eb01 0402 	add.w	r4, r1, r2
 80165d4:	d902      	bls.n	80165dc <memmove+0x10>
 80165d6:	4284      	cmp	r4, r0
 80165d8:	4623      	mov	r3, r4
 80165da:	d807      	bhi.n	80165ec <memmove+0x20>
 80165dc:	1e43      	subs	r3, r0, #1
 80165de:	42a1      	cmp	r1, r4
 80165e0:	d008      	beq.n	80165f4 <memmove+0x28>
 80165e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80165e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80165ea:	e7f8      	b.n	80165de <memmove+0x12>
 80165ec:	4402      	add	r2, r0
 80165ee:	4601      	mov	r1, r0
 80165f0:	428a      	cmp	r2, r1
 80165f2:	d100      	bne.n	80165f6 <memmove+0x2a>
 80165f4:	bd10      	pop	{r4, pc}
 80165f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80165fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80165fe:	e7f7      	b.n	80165f0 <memmove+0x24>

08016600 <memset>:
 8016600:	4402      	add	r2, r0
 8016602:	4603      	mov	r3, r0
 8016604:	4293      	cmp	r3, r2
 8016606:	d100      	bne.n	801660a <memset+0xa>
 8016608:	4770      	bx	lr
 801660a:	f803 1b01 	strb.w	r1, [r3], #1
 801660e:	e7f9      	b.n	8016604 <memset+0x4>

08016610 <strchr>:
 8016610:	b2c9      	uxtb	r1, r1
 8016612:	4603      	mov	r3, r0
 8016614:	4618      	mov	r0, r3
 8016616:	f813 2b01 	ldrb.w	r2, [r3], #1
 801661a:	b112      	cbz	r2, 8016622 <strchr+0x12>
 801661c:	428a      	cmp	r2, r1
 801661e:	d1f9      	bne.n	8016614 <strchr+0x4>
 8016620:	4770      	bx	lr
 8016622:	2900      	cmp	r1, #0
 8016624:	bf18      	it	ne
 8016626:	2000      	movne	r0, #0
 8016628:	4770      	bx	lr

0801662a <strncmp>:
 801662a:	b510      	push	{r4, lr}
 801662c:	b16a      	cbz	r2, 801664a <strncmp+0x20>
 801662e:	3901      	subs	r1, #1
 8016630:	1884      	adds	r4, r0, r2
 8016632:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016636:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801663a:	429a      	cmp	r2, r3
 801663c:	d103      	bne.n	8016646 <strncmp+0x1c>
 801663e:	42a0      	cmp	r0, r4
 8016640:	d001      	beq.n	8016646 <strncmp+0x1c>
 8016642:	2a00      	cmp	r2, #0
 8016644:	d1f5      	bne.n	8016632 <strncmp+0x8>
 8016646:	1ad0      	subs	r0, r2, r3
 8016648:	bd10      	pop	{r4, pc}
 801664a:	4610      	mov	r0, r2
 801664c:	e7fc      	b.n	8016648 <strncmp+0x1e>

0801664e <strstr>:
 801664e:	780a      	ldrb	r2, [r1, #0]
 8016650:	b570      	push	{r4, r5, r6, lr}
 8016652:	b96a      	cbnz	r2, 8016670 <strstr+0x22>
 8016654:	bd70      	pop	{r4, r5, r6, pc}
 8016656:	429a      	cmp	r2, r3
 8016658:	d109      	bne.n	801666e <strstr+0x20>
 801665a:	460c      	mov	r4, r1
 801665c:	4605      	mov	r5, r0
 801665e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016662:	2b00      	cmp	r3, #0
 8016664:	d0f6      	beq.n	8016654 <strstr+0x6>
 8016666:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801666a:	429e      	cmp	r6, r3
 801666c:	d0f7      	beq.n	801665e <strstr+0x10>
 801666e:	3001      	adds	r0, #1
 8016670:	7803      	ldrb	r3, [r0, #0]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d1ef      	bne.n	8016656 <strstr+0x8>
 8016676:	4618      	mov	r0, r3
 8016678:	e7ec      	b.n	8016654 <strstr+0x6>
	...

0801667c <_close_r>:
 801667c:	b538      	push	{r3, r4, r5, lr}
 801667e:	4d06      	ldr	r5, [pc, #24]	@ (8016698 <_close_r+0x1c>)
 8016680:	2300      	movs	r3, #0
 8016682:	4604      	mov	r4, r0
 8016684:	4608      	mov	r0, r1
 8016686:	602b      	str	r3, [r5, #0]
 8016688:	f7ec f852 	bl	8002730 <_close>
 801668c:	1c43      	adds	r3, r0, #1
 801668e:	d102      	bne.n	8016696 <_close_r+0x1a>
 8016690:	682b      	ldr	r3, [r5, #0]
 8016692:	b103      	cbz	r3, 8016696 <_close_r+0x1a>
 8016694:	6023      	str	r3, [r4, #0]
 8016696:	bd38      	pop	{r3, r4, r5, pc}
 8016698:	2000deec 	.word	0x2000deec

0801669c <_lseek_r>:
 801669c:	b538      	push	{r3, r4, r5, lr}
 801669e:	4d07      	ldr	r5, [pc, #28]	@ (80166bc <_lseek_r+0x20>)
 80166a0:	4604      	mov	r4, r0
 80166a2:	4608      	mov	r0, r1
 80166a4:	4611      	mov	r1, r2
 80166a6:	2200      	movs	r2, #0
 80166a8:	602a      	str	r2, [r5, #0]
 80166aa:	461a      	mov	r2, r3
 80166ac:	f7ec f867 	bl	800277e <_lseek>
 80166b0:	1c43      	adds	r3, r0, #1
 80166b2:	d102      	bne.n	80166ba <_lseek_r+0x1e>
 80166b4:	682b      	ldr	r3, [r5, #0]
 80166b6:	b103      	cbz	r3, 80166ba <_lseek_r+0x1e>
 80166b8:	6023      	str	r3, [r4, #0]
 80166ba:	bd38      	pop	{r3, r4, r5, pc}
 80166bc:	2000deec 	.word	0x2000deec

080166c0 <_read_r>:
 80166c0:	b538      	push	{r3, r4, r5, lr}
 80166c2:	4d07      	ldr	r5, [pc, #28]	@ (80166e0 <_read_r+0x20>)
 80166c4:	4604      	mov	r4, r0
 80166c6:	4608      	mov	r0, r1
 80166c8:	4611      	mov	r1, r2
 80166ca:	2200      	movs	r2, #0
 80166cc:	602a      	str	r2, [r5, #0]
 80166ce:	461a      	mov	r2, r3
 80166d0:	f7eb fff5 	bl	80026be <_read>
 80166d4:	1c43      	adds	r3, r0, #1
 80166d6:	d102      	bne.n	80166de <_read_r+0x1e>
 80166d8:	682b      	ldr	r3, [r5, #0]
 80166da:	b103      	cbz	r3, 80166de <_read_r+0x1e>
 80166dc:	6023      	str	r3, [r4, #0]
 80166de:	bd38      	pop	{r3, r4, r5, pc}
 80166e0:	2000deec 	.word	0x2000deec

080166e4 <_sbrk_r>:
 80166e4:	b538      	push	{r3, r4, r5, lr}
 80166e6:	4d06      	ldr	r5, [pc, #24]	@ (8016700 <_sbrk_r+0x1c>)
 80166e8:	2300      	movs	r3, #0
 80166ea:	4604      	mov	r4, r0
 80166ec:	4608      	mov	r0, r1
 80166ee:	602b      	str	r3, [r5, #0]
 80166f0:	f7ec f852 	bl	8002798 <_sbrk>
 80166f4:	1c43      	adds	r3, r0, #1
 80166f6:	d102      	bne.n	80166fe <_sbrk_r+0x1a>
 80166f8:	682b      	ldr	r3, [r5, #0]
 80166fa:	b103      	cbz	r3, 80166fe <_sbrk_r+0x1a>
 80166fc:	6023      	str	r3, [r4, #0]
 80166fe:	bd38      	pop	{r3, r4, r5, pc}
 8016700:	2000deec 	.word	0x2000deec

08016704 <_write_r>:
 8016704:	b538      	push	{r3, r4, r5, lr}
 8016706:	4d07      	ldr	r5, [pc, #28]	@ (8016724 <_write_r+0x20>)
 8016708:	4604      	mov	r4, r0
 801670a:	4608      	mov	r0, r1
 801670c:	4611      	mov	r1, r2
 801670e:	2200      	movs	r2, #0
 8016710:	602a      	str	r2, [r5, #0]
 8016712:	461a      	mov	r2, r3
 8016714:	f7eb fff0 	bl	80026f8 <_write>
 8016718:	1c43      	adds	r3, r0, #1
 801671a:	d102      	bne.n	8016722 <_write_r+0x1e>
 801671c:	682b      	ldr	r3, [r5, #0]
 801671e:	b103      	cbz	r3, 8016722 <_write_r+0x1e>
 8016720:	6023      	str	r3, [r4, #0]
 8016722:	bd38      	pop	{r3, r4, r5, pc}
 8016724:	2000deec 	.word	0x2000deec

08016728 <__errno>:
 8016728:	4b01      	ldr	r3, [pc, #4]	@ (8016730 <__errno+0x8>)
 801672a:	6818      	ldr	r0, [r3, #0]
 801672c:	4770      	bx	lr
 801672e:	bf00      	nop
 8016730:	20000268 	.word	0x20000268

08016734 <__libc_init_array>:
 8016734:	b570      	push	{r4, r5, r6, lr}
 8016736:	4d0d      	ldr	r5, [pc, #52]	@ (801676c <__libc_init_array+0x38>)
 8016738:	4c0d      	ldr	r4, [pc, #52]	@ (8016770 <__libc_init_array+0x3c>)
 801673a:	1b64      	subs	r4, r4, r5
 801673c:	10a4      	asrs	r4, r4, #2
 801673e:	2600      	movs	r6, #0
 8016740:	42a6      	cmp	r6, r4
 8016742:	d109      	bne.n	8016758 <__libc_init_array+0x24>
 8016744:	4d0b      	ldr	r5, [pc, #44]	@ (8016774 <__libc_init_array+0x40>)
 8016746:	4c0c      	ldr	r4, [pc, #48]	@ (8016778 <__libc_init_array+0x44>)
 8016748:	f000 fef8 	bl	801753c <_init>
 801674c:	1b64      	subs	r4, r4, r5
 801674e:	10a4      	asrs	r4, r4, #2
 8016750:	2600      	movs	r6, #0
 8016752:	42a6      	cmp	r6, r4
 8016754:	d105      	bne.n	8016762 <__libc_init_array+0x2e>
 8016756:	bd70      	pop	{r4, r5, r6, pc}
 8016758:	f855 3b04 	ldr.w	r3, [r5], #4
 801675c:	4798      	blx	r3
 801675e:	3601      	adds	r6, #1
 8016760:	e7ee      	b.n	8016740 <__libc_init_array+0xc>
 8016762:	f855 3b04 	ldr.w	r3, [r5], #4
 8016766:	4798      	blx	r3
 8016768:	3601      	adds	r6, #1
 801676a:	e7f2      	b.n	8016752 <__libc_init_array+0x1e>
 801676c:	080184f4 	.word	0x080184f4
 8016770:	080184f4 	.word	0x080184f4
 8016774:	080184f4 	.word	0x080184f4
 8016778:	08018500 	.word	0x08018500

0801677c <__retarget_lock_init_recursive>:
 801677c:	4770      	bx	lr

0801677e <__retarget_lock_acquire_recursive>:
 801677e:	4770      	bx	lr

08016780 <__retarget_lock_release_recursive>:
 8016780:	4770      	bx	lr

08016782 <strcpy>:
 8016782:	4603      	mov	r3, r0
 8016784:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016788:	f803 2b01 	strb.w	r2, [r3], #1
 801678c:	2a00      	cmp	r2, #0
 801678e:	d1f9      	bne.n	8016784 <strcpy+0x2>
 8016790:	4770      	bx	lr

08016792 <memcpy>:
 8016792:	440a      	add	r2, r1
 8016794:	4291      	cmp	r1, r2
 8016796:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801679a:	d100      	bne.n	801679e <memcpy+0xc>
 801679c:	4770      	bx	lr
 801679e:	b510      	push	{r4, lr}
 80167a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80167a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80167a8:	4291      	cmp	r1, r2
 80167aa:	d1f9      	bne.n	80167a0 <memcpy+0xe>
 80167ac:	bd10      	pop	{r4, pc}
	...

080167b0 <__assert_func>:
 80167b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80167b2:	4614      	mov	r4, r2
 80167b4:	461a      	mov	r2, r3
 80167b6:	4b09      	ldr	r3, [pc, #36]	@ (80167dc <__assert_func+0x2c>)
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	4605      	mov	r5, r0
 80167bc:	68d8      	ldr	r0, [r3, #12]
 80167be:	b954      	cbnz	r4, 80167d6 <__assert_func+0x26>
 80167c0:	4b07      	ldr	r3, [pc, #28]	@ (80167e0 <__assert_func+0x30>)
 80167c2:	461c      	mov	r4, r3
 80167c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80167c8:	9100      	str	r1, [sp, #0]
 80167ca:	462b      	mov	r3, r5
 80167cc:	4905      	ldr	r1, [pc, #20]	@ (80167e4 <__assert_func+0x34>)
 80167ce:	f000 fd3f 	bl	8017250 <fiprintf>
 80167d2:	f000 fde3 	bl	801739c <abort>
 80167d6:	4b04      	ldr	r3, [pc, #16]	@ (80167e8 <__assert_func+0x38>)
 80167d8:	e7f4      	b.n	80167c4 <__assert_func+0x14>
 80167da:	bf00      	nop
 80167dc:	20000268 	.word	0x20000268
 80167e0:	080184b7 	.word	0x080184b7
 80167e4:	08018489 	.word	0x08018489
 80167e8:	0801847c 	.word	0x0801847c

080167ec <__env_lock>:
 80167ec:	4801      	ldr	r0, [pc, #4]	@ (80167f4 <__env_lock+0x8>)
 80167ee:	f7ff bfc6 	b.w	801677e <__retarget_lock_acquire_recursive>
 80167f2:	bf00      	nop
 80167f4:	2000def0 	.word	0x2000def0

080167f8 <__env_unlock>:
 80167f8:	4801      	ldr	r0, [pc, #4]	@ (8016800 <__env_unlock+0x8>)
 80167fa:	f7ff bfc1 	b.w	8016780 <__retarget_lock_release_recursive>
 80167fe:	bf00      	nop
 8016800:	2000def0 	.word	0x2000def0

08016804 <_free_r>:
 8016804:	b538      	push	{r3, r4, r5, lr}
 8016806:	4605      	mov	r5, r0
 8016808:	2900      	cmp	r1, #0
 801680a:	d041      	beq.n	8016890 <_free_r+0x8c>
 801680c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016810:	1f0c      	subs	r4, r1, #4
 8016812:	2b00      	cmp	r3, #0
 8016814:	bfb8      	it	lt
 8016816:	18e4      	addlt	r4, r4, r3
 8016818:	f7ff fc1e 	bl	8016058 <__malloc_lock>
 801681c:	4a1d      	ldr	r2, [pc, #116]	@ (8016894 <_free_r+0x90>)
 801681e:	6813      	ldr	r3, [r2, #0]
 8016820:	b933      	cbnz	r3, 8016830 <_free_r+0x2c>
 8016822:	6063      	str	r3, [r4, #4]
 8016824:	6014      	str	r4, [r2, #0]
 8016826:	4628      	mov	r0, r5
 8016828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801682c:	f7ff bc1a 	b.w	8016064 <__malloc_unlock>
 8016830:	42a3      	cmp	r3, r4
 8016832:	d908      	bls.n	8016846 <_free_r+0x42>
 8016834:	6820      	ldr	r0, [r4, #0]
 8016836:	1821      	adds	r1, r4, r0
 8016838:	428b      	cmp	r3, r1
 801683a:	bf01      	itttt	eq
 801683c:	6819      	ldreq	r1, [r3, #0]
 801683e:	685b      	ldreq	r3, [r3, #4]
 8016840:	1809      	addeq	r1, r1, r0
 8016842:	6021      	streq	r1, [r4, #0]
 8016844:	e7ed      	b.n	8016822 <_free_r+0x1e>
 8016846:	461a      	mov	r2, r3
 8016848:	685b      	ldr	r3, [r3, #4]
 801684a:	b10b      	cbz	r3, 8016850 <_free_r+0x4c>
 801684c:	42a3      	cmp	r3, r4
 801684e:	d9fa      	bls.n	8016846 <_free_r+0x42>
 8016850:	6811      	ldr	r1, [r2, #0]
 8016852:	1850      	adds	r0, r2, r1
 8016854:	42a0      	cmp	r0, r4
 8016856:	d10b      	bne.n	8016870 <_free_r+0x6c>
 8016858:	6820      	ldr	r0, [r4, #0]
 801685a:	4401      	add	r1, r0
 801685c:	1850      	adds	r0, r2, r1
 801685e:	4283      	cmp	r3, r0
 8016860:	6011      	str	r1, [r2, #0]
 8016862:	d1e0      	bne.n	8016826 <_free_r+0x22>
 8016864:	6818      	ldr	r0, [r3, #0]
 8016866:	685b      	ldr	r3, [r3, #4]
 8016868:	6053      	str	r3, [r2, #4]
 801686a:	4408      	add	r0, r1
 801686c:	6010      	str	r0, [r2, #0]
 801686e:	e7da      	b.n	8016826 <_free_r+0x22>
 8016870:	d902      	bls.n	8016878 <_free_r+0x74>
 8016872:	230c      	movs	r3, #12
 8016874:	602b      	str	r3, [r5, #0]
 8016876:	e7d6      	b.n	8016826 <_free_r+0x22>
 8016878:	6820      	ldr	r0, [r4, #0]
 801687a:	1821      	adds	r1, r4, r0
 801687c:	428b      	cmp	r3, r1
 801687e:	bf04      	itt	eq
 8016880:	6819      	ldreq	r1, [r3, #0]
 8016882:	685b      	ldreq	r3, [r3, #4]
 8016884:	6063      	str	r3, [r4, #4]
 8016886:	bf04      	itt	eq
 8016888:	1809      	addeq	r1, r1, r0
 801688a:	6021      	streq	r1, [r4, #0]
 801688c:	6054      	str	r4, [r2, #4]
 801688e:	e7ca      	b.n	8016826 <_free_r+0x22>
 8016890:	bd38      	pop	{r3, r4, r5, pc}
 8016892:	bf00      	nop
 8016894:	2000ddac 	.word	0x2000ddac

08016898 <_malloc_usable_size_r>:
 8016898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801689c:	1f18      	subs	r0, r3, #4
 801689e:	2b00      	cmp	r3, #0
 80168a0:	bfbc      	itt	lt
 80168a2:	580b      	ldrlt	r3, [r1, r0]
 80168a4:	18c0      	addlt	r0, r0, r3
 80168a6:	4770      	bx	lr

080168a8 <__ssputs_r>:
 80168a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168ac:	688e      	ldr	r6, [r1, #8]
 80168ae:	461f      	mov	r7, r3
 80168b0:	42be      	cmp	r6, r7
 80168b2:	680b      	ldr	r3, [r1, #0]
 80168b4:	4682      	mov	sl, r0
 80168b6:	460c      	mov	r4, r1
 80168b8:	4690      	mov	r8, r2
 80168ba:	d82d      	bhi.n	8016918 <__ssputs_r+0x70>
 80168bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80168c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80168c4:	d026      	beq.n	8016914 <__ssputs_r+0x6c>
 80168c6:	6965      	ldr	r5, [r4, #20]
 80168c8:	6909      	ldr	r1, [r1, #16]
 80168ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80168ce:	eba3 0901 	sub.w	r9, r3, r1
 80168d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80168d6:	1c7b      	adds	r3, r7, #1
 80168d8:	444b      	add	r3, r9
 80168da:	106d      	asrs	r5, r5, #1
 80168dc:	429d      	cmp	r5, r3
 80168de:	bf38      	it	cc
 80168e0:	461d      	movcc	r5, r3
 80168e2:	0553      	lsls	r3, r2, #21
 80168e4:	d527      	bpl.n	8016936 <__ssputs_r+0x8e>
 80168e6:	4629      	mov	r1, r5
 80168e8:	f7ff fb36 	bl	8015f58 <_malloc_r>
 80168ec:	4606      	mov	r6, r0
 80168ee:	b360      	cbz	r0, 801694a <__ssputs_r+0xa2>
 80168f0:	6921      	ldr	r1, [r4, #16]
 80168f2:	464a      	mov	r2, r9
 80168f4:	f7ff ff4d 	bl	8016792 <memcpy>
 80168f8:	89a3      	ldrh	r3, [r4, #12]
 80168fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80168fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016902:	81a3      	strh	r3, [r4, #12]
 8016904:	6126      	str	r6, [r4, #16]
 8016906:	6165      	str	r5, [r4, #20]
 8016908:	444e      	add	r6, r9
 801690a:	eba5 0509 	sub.w	r5, r5, r9
 801690e:	6026      	str	r6, [r4, #0]
 8016910:	60a5      	str	r5, [r4, #8]
 8016912:	463e      	mov	r6, r7
 8016914:	42be      	cmp	r6, r7
 8016916:	d900      	bls.n	801691a <__ssputs_r+0x72>
 8016918:	463e      	mov	r6, r7
 801691a:	6820      	ldr	r0, [r4, #0]
 801691c:	4632      	mov	r2, r6
 801691e:	4641      	mov	r1, r8
 8016920:	f7ff fe54 	bl	80165cc <memmove>
 8016924:	68a3      	ldr	r3, [r4, #8]
 8016926:	1b9b      	subs	r3, r3, r6
 8016928:	60a3      	str	r3, [r4, #8]
 801692a:	6823      	ldr	r3, [r4, #0]
 801692c:	4433      	add	r3, r6
 801692e:	6023      	str	r3, [r4, #0]
 8016930:	2000      	movs	r0, #0
 8016932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016936:	462a      	mov	r2, r5
 8016938:	f7ff fc0e 	bl	8016158 <_realloc_r>
 801693c:	4606      	mov	r6, r0
 801693e:	2800      	cmp	r0, #0
 8016940:	d1e0      	bne.n	8016904 <__ssputs_r+0x5c>
 8016942:	6921      	ldr	r1, [r4, #16]
 8016944:	4650      	mov	r0, sl
 8016946:	f7ff ff5d 	bl	8016804 <_free_r>
 801694a:	230c      	movs	r3, #12
 801694c:	f8ca 3000 	str.w	r3, [sl]
 8016950:	89a3      	ldrh	r3, [r4, #12]
 8016952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016956:	81a3      	strh	r3, [r4, #12]
 8016958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801695c:	e7e9      	b.n	8016932 <__ssputs_r+0x8a>
	...

08016960 <_svfiprintf_r>:
 8016960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016964:	4698      	mov	r8, r3
 8016966:	898b      	ldrh	r3, [r1, #12]
 8016968:	061b      	lsls	r3, r3, #24
 801696a:	b09d      	sub	sp, #116	@ 0x74
 801696c:	4607      	mov	r7, r0
 801696e:	460d      	mov	r5, r1
 8016970:	4614      	mov	r4, r2
 8016972:	d510      	bpl.n	8016996 <_svfiprintf_r+0x36>
 8016974:	690b      	ldr	r3, [r1, #16]
 8016976:	b973      	cbnz	r3, 8016996 <_svfiprintf_r+0x36>
 8016978:	2140      	movs	r1, #64	@ 0x40
 801697a:	f7ff faed 	bl	8015f58 <_malloc_r>
 801697e:	6028      	str	r0, [r5, #0]
 8016980:	6128      	str	r0, [r5, #16]
 8016982:	b930      	cbnz	r0, 8016992 <_svfiprintf_r+0x32>
 8016984:	230c      	movs	r3, #12
 8016986:	603b      	str	r3, [r7, #0]
 8016988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801698c:	b01d      	add	sp, #116	@ 0x74
 801698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016992:	2340      	movs	r3, #64	@ 0x40
 8016994:	616b      	str	r3, [r5, #20]
 8016996:	2300      	movs	r3, #0
 8016998:	9309      	str	r3, [sp, #36]	@ 0x24
 801699a:	2320      	movs	r3, #32
 801699c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80169a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80169a4:	2330      	movs	r3, #48	@ 0x30
 80169a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016b44 <_svfiprintf_r+0x1e4>
 80169aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80169ae:	f04f 0901 	mov.w	r9, #1
 80169b2:	4623      	mov	r3, r4
 80169b4:	469a      	mov	sl, r3
 80169b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169ba:	b10a      	cbz	r2, 80169c0 <_svfiprintf_r+0x60>
 80169bc:	2a25      	cmp	r2, #37	@ 0x25
 80169be:	d1f9      	bne.n	80169b4 <_svfiprintf_r+0x54>
 80169c0:	ebba 0b04 	subs.w	fp, sl, r4
 80169c4:	d00b      	beq.n	80169de <_svfiprintf_r+0x7e>
 80169c6:	465b      	mov	r3, fp
 80169c8:	4622      	mov	r2, r4
 80169ca:	4629      	mov	r1, r5
 80169cc:	4638      	mov	r0, r7
 80169ce:	f7ff ff6b 	bl	80168a8 <__ssputs_r>
 80169d2:	3001      	adds	r0, #1
 80169d4:	f000 80a7 	beq.w	8016b26 <_svfiprintf_r+0x1c6>
 80169d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80169da:	445a      	add	r2, fp
 80169dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80169de:	f89a 3000 	ldrb.w	r3, [sl]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	f000 809f 	beq.w	8016b26 <_svfiprintf_r+0x1c6>
 80169e8:	2300      	movs	r3, #0
 80169ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80169ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80169f2:	f10a 0a01 	add.w	sl, sl, #1
 80169f6:	9304      	str	r3, [sp, #16]
 80169f8:	9307      	str	r3, [sp, #28]
 80169fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80169fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8016a00:	4654      	mov	r4, sl
 8016a02:	2205      	movs	r2, #5
 8016a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a08:	484e      	ldr	r0, [pc, #312]	@ (8016b44 <_svfiprintf_r+0x1e4>)
 8016a0a:	f7e9 fc01 	bl	8000210 <memchr>
 8016a0e:	9a04      	ldr	r2, [sp, #16]
 8016a10:	b9d8      	cbnz	r0, 8016a4a <_svfiprintf_r+0xea>
 8016a12:	06d0      	lsls	r0, r2, #27
 8016a14:	bf44      	itt	mi
 8016a16:	2320      	movmi	r3, #32
 8016a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016a1c:	0711      	lsls	r1, r2, #28
 8016a1e:	bf44      	itt	mi
 8016a20:	232b      	movmi	r3, #43	@ 0x2b
 8016a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016a26:	f89a 3000 	ldrb.w	r3, [sl]
 8016a2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8016a2c:	d015      	beq.n	8016a5a <_svfiprintf_r+0xfa>
 8016a2e:	9a07      	ldr	r2, [sp, #28]
 8016a30:	4654      	mov	r4, sl
 8016a32:	2000      	movs	r0, #0
 8016a34:	f04f 0c0a 	mov.w	ip, #10
 8016a38:	4621      	mov	r1, r4
 8016a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a3e:	3b30      	subs	r3, #48	@ 0x30
 8016a40:	2b09      	cmp	r3, #9
 8016a42:	d94b      	bls.n	8016adc <_svfiprintf_r+0x17c>
 8016a44:	b1b0      	cbz	r0, 8016a74 <_svfiprintf_r+0x114>
 8016a46:	9207      	str	r2, [sp, #28]
 8016a48:	e014      	b.n	8016a74 <_svfiprintf_r+0x114>
 8016a4a:	eba0 0308 	sub.w	r3, r0, r8
 8016a4e:	fa09 f303 	lsl.w	r3, r9, r3
 8016a52:	4313      	orrs	r3, r2
 8016a54:	9304      	str	r3, [sp, #16]
 8016a56:	46a2      	mov	sl, r4
 8016a58:	e7d2      	b.n	8016a00 <_svfiprintf_r+0xa0>
 8016a5a:	9b03      	ldr	r3, [sp, #12]
 8016a5c:	1d19      	adds	r1, r3, #4
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	9103      	str	r1, [sp, #12]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	bfbb      	ittet	lt
 8016a66:	425b      	neglt	r3, r3
 8016a68:	f042 0202 	orrlt.w	r2, r2, #2
 8016a6c:	9307      	strge	r3, [sp, #28]
 8016a6e:	9307      	strlt	r3, [sp, #28]
 8016a70:	bfb8      	it	lt
 8016a72:	9204      	strlt	r2, [sp, #16]
 8016a74:	7823      	ldrb	r3, [r4, #0]
 8016a76:	2b2e      	cmp	r3, #46	@ 0x2e
 8016a78:	d10a      	bne.n	8016a90 <_svfiprintf_r+0x130>
 8016a7a:	7863      	ldrb	r3, [r4, #1]
 8016a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016a7e:	d132      	bne.n	8016ae6 <_svfiprintf_r+0x186>
 8016a80:	9b03      	ldr	r3, [sp, #12]
 8016a82:	1d1a      	adds	r2, r3, #4
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	9203      	str	r2, [sp, #12]
 8016a88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016a8c:	3402      	adds	r4, #2
 8016a8e:	9305      	str	r3, [sp, #20]
 8016a90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016b54 <_svfiprintf_r+0x1f4>
 8016a94:	7821      	ldrb	r1, [r4, #0]
 8016a96:	2203      	movs	r2, #3
 8016a98:	4650      	mov	r0, sl
 8016a9a:	f7e9 fbb9 	bl	8000210 <memchr>
 8016a9e:	b138      	cbz	r0, 8016ab0 <_svfiprintf_r+0x150>
 8016aa0:	9b04      	ldr	r3, [sp, #16]
 8016aa2:	eba0 000a 	sub.w	r0, r0, sl
 8016aa6:	2240      	movs	r2, #64	@ 0x40
 8016aa8:	4082      	lsls	r2, r0
 8016aaa:	4313      	orrs	r3, r2
 8016aac:	3401      	adds	r4, #1
 8016aae:	9304      	str	r3, [sp, #16]
 8016ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ab4:	4824      	ldr	r0, [pc, #144]	@ (8016b48 <_svfiprintf_r+0x1e8>)
 8016ab6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016aba:	2206      	movs	r2, #6
 8016abc:	f7e9 fba8 	bl	8000210 <memchr>
 8016ac0:	2800      	cmp	r0, #0
 8016ac2:	d036      	beq.n	8016b32 <_svfiprintf_r+0x1d2>
 8016ac4:	4b21      	ldr	r3, [pc, #132]	@ (8016b4c <_svfiprintf_r+0x1ec>)
 8016ac6:	bb1b      	cbnz	r3, 8016b10 <_svfiprintf_r+0x1b0>
 8016ac8:	9b03      	ldr	r3, [sp, #12]
 8016aca:	3307      	adds	r3, #7
 8016acc:	f023 0307 	bic.w	r3, r3, #7
 8016ad0:	3308      	adds	r3, #8
 8016ad2:	9303      	str	r3, [sp, #12]
 8016ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ad6:	4433      	add	r3, r6
 8016ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ada:	e76a      	b.n	80169b2 <_svfiprintf_r+0x52>
 8016adc:	fb0c 3202 	mla	r2, ip, r2, r3
 8016ae0:	460c      	mov	r4, r1
 8016ae2:	2001      	movs	r0, #1
 8016ae4:	e7a8      	b.n	8016a38 <_svfiprintf_r+0xd8>
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	3401      	adds	r4, #1
 8016aea:	9305      	str	r3, [sp, #20]
 8016aec:	4619      	mov	r1, r3
 8016aee:	f04f 0c0a 	mov.w	ip, #10
 8016af2:	4620      	mov	r0, r4
 8016af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016af8:	3a30      	subs	r2, #48	@ 0x30
 8016afa:	2a09      	cmp	r2, #9
 8016afc:	d903      	bls.n	8016b06 <_svfiprintf_r+0x1a6>
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d0c6      	beq.n	8016a90 <_svfiprintf_r+0x130>
 8016b02:	9105      	str	r1, [sp, #20]
 8016b04:	e7c4      	b.n	8016a90 <_svfiprintf_r+0x130>
 8016b06:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b0a:	4604      	mov	r4, r0
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	e7f0      	b.n	8016af2 <_svfiprintf_r+0x192>
 8016b10:	ab03      	add	r3, sp, #12
 8016b12:	9300      	str	r3, [sp, #0]
 8016b14:	462a      	mov	r2, r5
 8016b16:	4b0e      	ldr	r3, [pc, #56]	@ (8016b50 <_svfiprintf_r+0x1f0>)
 8016b18:	a904      	add	r1, sp, #16
 8016b1a:	4638      	mov	r0, r7
 8016b1c:	f3af 8000 	nop.w
 8016b20:	1c42      	adds	r2, r0, #1
 8016b22:	4606      	mov	r6, r0
 8016b24:	d1d6      	bne.n	8016ad4 <_svfiprintf_r+0x174>
 8016b26:	89ab      	ldrh	r3, [r5, #12]
 8016b28:	065b      	lsls	r3, r3, #25
 8016b2a:	f53f af2d 	bmi.w	8016988 <_svfiprintf_r+0x28>
 8016b2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016b30:	e72c      	b.n	801698c <_svfiprintf_r+0x2c>
 8016b32:	ab03      	add	r3, sp, #12
 8016b34:	9300      	str	r3, [sp, #0]
 8016b36:	462a      	mov	r2, r5
 8016b38:	4b05      	ldr	r3, [pc, #20]	@ (8016b50 <_svfiprintf_r+0x1f0>)
 8016b3a:	a904      	add	r1, sp, #16
 8016b3c:	4638      	mov	r0, r7
 8016b3e:	f000 f9bb 	bl	8016eb8 <_printf_i>
 8016b42:	e7ed      	b.n	8016b20 <_svfiprintf_r+0x1c0>
 8016b44:	080184b8 	.word	0x080184b8
 8016b48:	080184c2 	.word	0x080184c2
 8016b4c:	00000000 	.word	0x00000000
 8016b50:	080168a9 	.word	0x080168a9
 8016b54:	080184be 	.word	0x080184be

08016b58 <__sfputc_r>:
 8016b58:	6893      	ldr	r3, [r2, #8]
 8016b5a:	3b01      	subs	r3, #1
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	b410      	push	{r4}
 8016b60:	6093      	str	r3, [r2, #8]
 8016b62:	da08      	bge.n	8016b76 <__sfputc_r+0x1e>
 8016b64:	6994      	ldr	r4, [r2, #24]
 8016b66:	42a3      	cmp	r3, r4
 8016b68:	db01      	blt.n	8016b6e <__sfputc_r+0x16>
 8016b6a:	290a      	cmp	r1, #10
 8016b6c:	d103      	bne.n	8016b76 <__sfputc_r+0x1e>
 8016b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b72:	f000 bb7f 	b.w	8017274 <__swbuf_r>
 8016b76:	6813      	ldr	r3, [r2, #0]
 8016b78:	1c58      	adds	r0, r3, #1
 8016b7a:	6010      	str	r0, [r2, #0]
 8016b7c:	7019      	strb	r1, [r3, #0]
 8016b7e:	4608      	mov	r0, r1
 8016b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b84:	4770      	bx	lr

08016b86 <__sfputs_r>:
 8016b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b88:	4606      	mov	r6, r0
 8016b8a:	460f      	mov	r7, r1
 8016b8c:	4614      	mov	r4, r2
 8016b8e:	18d5      	adds	r5, r2, r3
 8016b90:	42ac      	cmp	r4, r5
 8016b92:	d101      	bne.n	8016b98 <__sfputs_r+0x12>
 8016b94:	2000      	movs	r0, #0
 8016b96:	e007      	b.n	8016ba8 <__sfputs_r+0x22>
 8016b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b9c:	463a      	mov	r2, r7
 8016b9e:	4630      	mov	r0, r6
 8016ba0:	f7ff ffda 	bl	8016b58 <__sfputc_r>
 8016ba4:	1c43      	adds	r3, r0, #1
 8016ba6:	d1f3      	bne.n	8016b90 <__sfputs_r+0xa>
 8016ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016bac <_vfiprintf_r>:
 8016bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bb0:	460d      	mov	r5, r1
 8016bb2:	b09d      	sub	sp, #116	@ 0x74
 8016bb4:	4614      	mov	r4, r2
 8016bb6:	4698      	mov	r8, r3
 8016bb8:	4606      	mov	r6, r0
 8016bba:	b118      	cbz	r0, 8016bc4 <_vfiprintf_r+0x18>
 8016bbc:	6a03      	ldr	r3, [r0, #32]
 8016bbe:	b90b      	cbnz	r3, 8016bc4 <_vfiprintf_r+0x18>
 8016bc0:	f7ff fbfc 	bl	80163bc <__sinit>
 8016bc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016bc6:	07d9      	lsls	r1, r3, #31
 8016bc8:	d405      	bmi.n	8016bd6 <_vfiprintf_r+0x2a>
 8016bca:	89ab      	ldrh	r3, [r5, #12]
 8016bcc:	059a      	lsls	r2, r3, #22
 8016bce:	d402      	bmi.n	8016bd6 <_vfiprintf_r+0x2a>
 8016bd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016bd2:	f7ff fdd4 	bl	801677e <__retarget_lock_acquire_recursive>
 8016bd6:	89ab      	ldrh	r3, [r5, #12]
 8016bd8:	071b      	lsls	r3, r3, #28
 8016bda:	d501      	bpl.n	8016be0 <_vfiprintf_r+0x34>
 8016bdc:	692b      	ldr	r3, [r5, #16]
 8016bde:	b99b      	cbnz	r3, 8016c08 <_vfiprintf_r+0x5c>
 8016be0:	4629      	mov	r1, r5
 8016be2:	4630      	mov	r0, r6
 8016be4:	f000 fb84 	bl	80172f0 <__swsetup_r>
 8016be8:	b170      	cbz	r0, 8016c08 <_vfiprintf_r+0x5c>
 8016bea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016bec:	07dc      	lsls	r4, r3, #31
 8016bee:	d504      	bpl.n	8016bfa <_vfiprintf_r+0x4e>
 8016bf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016bf4:	b01d      	add	sp, #116	@ 0x74
 8016bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bfa:	89ab      	ldrh	r3, [r5, #12]
 8016bfc:	0598      	lsls	r0, r3, #22
 8016bfe:	d4f7      	bmi.n	8016bf0 <_vfiprintf_r+0x44>
 8016c00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016c02:	f7ff fdbd 	bl	8016780 <__retarget_lock_release_recursive>
 8016c06:	e7f3      	b.n	8016bf0 <_vfiprintf_r+0x44>
 8016c08:	2300      	movs	r3, #0
 8016c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016c0c:	2320      	movs	r3, #32
 8016c0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8016c16:	2330      	movs	r3, #48	@ 0x30
 8016c18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016dc8 <_vfiprintf_r+0x21c>
 8016c1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016c20:	f04f 0901 	mov.w	r9, #1
 8016c24:	4623      	mov	r3, r4
 8016c26:	469a      	mov	sl, r3
 8016c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c2c:	b10a      	cbz	r2, 8016c32 <_vfiprintf_r+0x86>
 8016c2e:	2a25      	cmp	r2, #37	@ 0x25
 8016c30:	d1f9      	bne.n	8016c26 <_vfiprintf_r+0x7a>
 8016c32:	ebba 0b04 	subs.w	fp, sl, r4
 8016c36:	d00b      	beq.n	8016c50 <_vfiprintf_r+0xa4>
 8016c38:	465b      	mov	r3, fp
 8016c3a:	4622      	mov	r2, r4
 8016c3c:	4629      	mov	r1, r5
 8016c3e:	4630      	mov	r0, r6
 8016c40:	f7ff ffa1 	bl	8016b86 <__sfputs_r>
 8016c44:	3001      	adds	r0, #1
 8016c46:	f000 80a7 	beq.w	8016d98 <_vfiprintf_r+0x1ec>
 8016c4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016c4c:	445a      	add	r2, fp
 8016c4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8016c50:	f89a 3000 	ldrb.w	r3, [sl]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	f000 809f 	beq.w	8016d98 <_vfiprintf_r+0x1ec>
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016c60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c64:	f10a 0a01 	add.w	sl, sl, #1
 8016c68:	9304      	str	r3, [sp, #16]
 8016c6a:	9307      	str	r3, [sp, #28]
 8016c6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016c70:	931a      	str	r3, [sp, #104]	@ 0x68
 8016c72:	4654      	mov	r4, sl
 8016c74:	2205      	movs	r2, #5
 8016c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c7a:	4853      	ldr	r0, [pc, #332]	@ (8016dc8 <_vfiprintf_r+0x21c>)
 8016c7c:	f7e9 fac8 	bl	8000210 <memchr>
 8016c80:	9a04      	ldr	r2, [sp, #16]
 8016c82:	b9d8      	cbnz	r0, 8016cbc <_vfiprintf_r+0x110>
 8016c84:	06d1      	lsls	r1, r2, #27
 8016c86:	bf44      	itt	mi
 8016c88:	2320      	movmi	r3, #32
 8016c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016c8e:	0713      	lsls	r3, r2, #28
 8016c90:	bf44      	itt	mi
 8016c92:	232b      	movmi	r3, #43	@ 0x2b
 8016c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016c98:	f89a 3000 	ldrb.w	r3, [sl]
 8016c9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c9e:	d015      	beq.n	8016ccc <_vfiprintf_r+0x120>
 8016ca0:	9a07      	ldr	r2, [sp, #28]
 8016ca2:	4654      	mov	r4, sl
 8016ca4:	2000      	movs	r0, #0
 8016ca6:	f04f 0c0a 	mov.w	ip, #10
 8016caa:	4621      	mov	r1, r4
 8016cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016cb0:	3b30      	subs	r3, #48	@ 0x30
 8016cb2:	2b09      	cmp	r3, #9
 8016cb4:	d94b      	bls.n	8016d4e <_vfiprintf_r+0x1a2>
 8016cb6:	b1b0      	cbz	r0, 8016ce6 <_vfiprintf_r+0x13a>
 8016cb8:	9207      	str	r2, [sp, #28]
 8016cba:	e014      	b.n	8016ce6 <_vfiprintf_r+0x13a>
 8016cbc:	eba0 0308 	sub.w	r3, r0, r8
 8016cc0:	fa09 f303 	lsl.w	r3, r9, r3
 8016cc4:	4313      	orrs	r3, r2
 8016cc6:	9304      	str	r3, [sp, #16]
 8016cc8:	46a2      	mov	sl, r4
 8016cca:	e7d2      	b.n	8016c72 <_vfiprintf_r+0xc6>
 8016ccc:	9b03      	ldr	r3, [sp, #12]
 8016cce:	1d19      	adds	r1, r3, #4
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	9103      	str	r1, [sp, #12]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	bfbb      	ittet	lt
 8016cd8:	425b      	neglt	r3, r3
 8016cda:	f042 0202 	orrlt.w	r2, r2, #2
 8016cde:	9307      	strge	r3, [sp, #28]
 8016ce0:	9307      	strlt	r3, [sp, #28]
 8016ce2:	bfb8      	it	lt
 8016ce4:	9204      	strlt	r2, [sp, #16]
 8016ce6:	7823      	ldrb	r3, [r4, #0]
 8016ce8:	2b2e      	cmp	r3, #46	@ 0x2e
 8016cea:	d10a      	bne.n	8016d02 <_vfiprintf_r+0x156>
 8016cec:	7863      	ldrb	r3, [r4, #1]
 8016cee:	2b2a      	cmp	r3, #42	@ 0x2a
 8016cf0:	d132      	bne.n	8016d58 <_vfiprintf_r+0x1ac>
 8016cf2:	9b03      	ldr	r3, [sp, #12]
 8016cf4:	1d1a      	adds	r2, r3, #4
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	9203      	str	r2, [sp, #12]
 8016cfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016cfe:	3402      	adds	r4, #2
 8016d00:	9305      	str	r3, [sp, #20]
 8016d02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016dd8 <_vfiprintf_r+0x22c>
 8016d06:	7821      	ldrb	r1, [r4, #0]
 8016d08:	2203      	movs	r2, #3
 8016d0a:	4650      	mov	r0, sl
 8016d0c:	f7e9 fa80 	bl	8000210 <memchr>
 8016d10:	b138      	cbz	r0, 8016d22 <_vfiprintf_r+0x176>
 8016d12:	9b04      	ldr	r3, [sp, #16]
 8016d14:	eba0 000a 	sub.w	r0, r0, sl
 8016d18:	2240      	movs	r2, #64	@ 0x40
 8016d1a:	4082      	lsls	r2, r0
 8016d1c:	4313      	orrs	r3, r2
 8016d1e:	3401      	adds	r4, #1
 8016d20:	9304      	str	r3, [sp, #16]
 8016d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d26:	4829      	ldr	r0, [pc, #164]	@ (8016dcc <_vfiprintf_r+0x220>)
 8016d28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016d2c:	2206      	movs	r2, #6
 8016d2e:	f7e9 fa6f 	bl	8000210 <memchr>
 8016d32:	2800      	cmp	r0, #0
 8016d34:	d03f      	beq.n	8016db6 <_vfiprintf_r+0x20a>
 8016d36:	4b26      	ldr	r3, [pc, #152]	@ (8016dd0 <_vfiprintf_r+0x224>)
 8016d38:	bb1b      	cbnz	r3, 8016d82 <_vfiprintf_r+0x1d6>
 8016d3a:	9b03      	ldr	r3, [sp, #12]
 8016d3c:	3307      	adds	r3, #7
 8016d3e:	f023 0307 	bic.w	r3, r3, #7
 8016d42:	3308      	adds	r3, #8
 8016d44:	9303      	str	r3, [sp, #12]
 8016d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d48:	443b      	add	r3, r7
 8016d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d4c:	e76a      	b.n	8016c24 <_vfiprintf_r+0x78>
 8016d4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016d52:	460c      	mov	r4, r1
 8016d54:	2001      	movs	r0, #1
 8016d56:	e7a8      	b.n	8016caa <_vfiprintf_r+0xfe>
 8016d58:	2300      	movs	r3, #0
 8016d5a:	3401      	adds	r4, #1
 8016d5c:	9305      	str	r3, [sp, #20]
 8016d5e:	4619      	mov	r1, r3
 8016d60:	f04f 0c0a 	mov.w	ip, #10
 8016d64:	4620      	mov	r0, r4
 8016d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d6a:	3a30      	subs	r2, #48	@ 0x30
 8016d6c:	2a09      	cmp	r2, #9
 8016d6e:	d903      	bls.n	8016d78 <_vfiprintf_r+0x1cc>
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d0c6      	beq.n	8016d02 <_vfiprintf_r+0x156>
 8016d74:	9105      	str	r1, [sp, #20]
 8016d76:	e7c4      	b.n	8016d02 <_vfiprintf_r+0x156>
 8016d78:	fb0c 2101 	mla	r1, ip, r1, r2
 8016d7c:	4604      	mov	r4, r0
 8016d7e:	2301      	movs	r3, #1
 8016d80:	e7f0      	b.n	8016d64 <_vfiprintf_r+0x1b8>
 8016d82:	ab03      	add	r3, sp, #12
 8016d84:	9300      	str	r3, [sp, #0]
 8016d86:	462a      	mov	r2, r5
 8016d88:	4b12      	ldr	r3, [pc, #72]	@ (8016dd4 <_vfiprintf_r+0x228>)
 8016d8a:	a904      	add	r1, sp, #16
 8016d8c:	4630      	mov	r0, r6
 8016d8e:	f3af 8000 	nop.w
 8016d92:	4607      	mov	r7, r0
 8016d94:	1c78      	adds	r0, r7, #1
 8016d96:	d1d6      	bne.n	8016d46 <_vfiprintf_r+0x19a>
 8016d98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d9a:	07d9      	lsls	r1, r3, #31
 8016d9c:	d405      	bmi.n	8016daa <_vfiprintf_r+0x1fe>
 8016d9e:	89ab      	ldrh	r3, [r5, #12]
 8016da0:	059a      	lsls	r2, r3, #22
 8016da2:	d402      	bmi.n	8016daa <_vfiprintf_r+0x1fe>
 8016da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016da6:	f7ff fceb 	bl	8016780 <__retarget_lock_release_recursive>
 8016daa:	89ab      	ldrh	r3, [r5, #12]
 8016dac:	065b      	lsls	r3, r3, #25
 8016dae:	f53f af1f 	bmi.w	8016bf0 <_vfiprintf_r+0x44>
 8016db2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016db4:	e71e      	b.n	8016bf4 <_vfiprintf_r+0x48>
 8016db6:	ab03      	add	r3, sp, #12
 8016db8:	9300      	str	r3, [sp, #0]
 8016dba:	462a      	mov	r2, r5
 8016dbc:	4b05      	ldr	r3, [pc, #20]	@ (8016dd4 <_vfiprintf_r+0x228>)
 8016dbe:	a904      	add	r1, sp, #16
 8016dc0:	4630      	mov	r0, r6
 8016dc2:	f000 f879 	bl	8016eb8 <_printf_i>
 8016dc6:	e7e4      	b.n	8016d92 <_vfiprintf_r+0x1e6>
 8016dc8:	080184b8 	.word	0x080184b8
 8016dcc:	080184c2 	.word	0x080184c2
 8016dd0:	00000000 	.word	0x00000000
 8016dd4:	08016b87 	.word	0x08016b87
 8016dd8:	080184be 	.word	0x080184be

08016ddc <_printf_common>:
 8016ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016de0:	4616      	mov	r6, r2
 8016de2:	4698      	mov	r8, r3
 8016de4:	688a      	ldr	r2, [r1, #8]
 8016de6:	690b      	ldr	r3, [r1, #16]
 8016de8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016dec:	4293      	cmp	r3, r2
 8016dee:	bfb8      	it	lt
 8016df0:	4613      	movlt	r3, r2
 8016df2:	6033      	str	r3, [r6, #0]
 8016df4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016df8:	4607      	mov	r7, r0
 8016dfa:	460c      	mov	r4, r1
 8016dfc:	b10a      	cbz	r2, 8016e02 <_printf_common+0x26>
 8016dfe:	3301      	adds	r3, #1
 8016e00:	6033      	str	r3, [r6, #0]
 8016e02:	6823      	ldr	r3, [r4, #0]
 8016e04:	0699      	lsls	r1, r3, #26
 8016e06:	bf42      	ittt	mi
 8016e08:	6833      	ldrmi	r3, [r6, #0]
 8016e0a:	3302      	addmi	r3, #2
 8016e0c:	6033      	strmi	r3, [r6, #0]
 8016e0e:	6825      	ldr	r5, [r4, #0]
 8016e10:	f015 0506 	ands.w	r5, r5, #6
 8016e14:	d106      	bne.n	8016e24 <_printf_common+0x48>
 8016e16:	f104 0a19 	add.w	sl, r4, #25
 8016e1a:	68e3      	ldr	r3, [r4, #12]
 8016e1c:	6832      	ldr	r2, [r6, #0]
 8016e1e:	1a9b      	subs	r3, r3, r2
 8016e20:	42ab      	cmp	r3, r5
 8016e22:	dc26      	bgt.n	8016e72 <_printf_common+0x96>
 8016e24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016e28:	6822      	ldr	r2, [r4, #0]
 8016e2a:	3b00      	subs	r3, #0
 8016e2c:	bf18      	it	ne
 8016e2e:	2301      	movne	r3, #1
 8016e30:	0692      	lsls	r2, r2, #26
 8016e32:	d42b      	bmi.n	8016e8c <_printf_common+0xb0>
 8016e34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016e38:	4641      	mov	r1, r8
 8016e3a:	4638      	mov	r0, r7
 8016e3c:	47c8      	blx	r9
 8016e3e:	3001      	adds	r0, #1
 8016e40:	d01e      	beq.n	8016e80 <_printf_common+0xa4>
 8016e42:	6823      	ldr	r3, [r4, #0]
 8016e44:	6922      	ldr	r2, [r4, #16]
 8016e46:	f003 0306 	and.w	r3, r3, #6
 8016e4a:	2b04      	cmp	r3, #4
 8016e4c:	bf02      	ittt	eq
 8016e4e:	68e5      	ldreq	r5, [r4, #12]
 8016e50:	6833      	ldreq	r3, [r6, #0]
 8016e52:	1aed      	subeq	r5, r5, r3
 8016e54:	68a3      	ldr	r3, [r4, #8]
 8016e56:	bf0c      	ite	eq
 8016e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016e5c:	2500      	movne	r5, #0
 8016e5e:	4293      	cmp	r3, r2
 8016e60:	bfc4      	itt	gt
 8016e62:	1a9b      	subgt	r3, r3, r2
 8016e64:	18ed      	addgt	r5, r5, r3
 8016e66:	2600      	movs	r6, #0
 8016e68:	341a      	adds	r4, #26
 8016e6a:	42b5      	cmp	r5, r6
 8016e6c:	d11a      	bne.n	8016ea4 <_printf_common+0xc8>
 8016e6e:	2000      	movs	r0, #0
 8016e70:	e008      	b.n	8016e84 <_printf_common+0xa8>
 8016e72:	2301      	movs	r3, #1
 8016e74:	4652      	mov	r2, sl
 8016e76:	4641      	mov	r1, r8
 8016e78:	4638      	mov	r0, r7
 8016e7a:	47c8      	blx	r9
 8016e7c:	3001      	adds	r0, #1
 8016e7e:	d103      	bne.n	8016e88 <_printf_common+0xac>
 8016e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e88:	3501      	adds	r5, #1
 8016e8a:	e7c6      	b.n	8016e1a <_printf_common+0x3e>
 8016e8c:	18e1      	adds	r1, r4, r3
 8016e8e:	1c5a      	adds	r2, r3, #1
 8016e90:	2030      	movs	r0, #48	@ 0x30
 8016e92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016e96:	4422      	add	r2, r4
 8016e98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016e9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016ea0:	3302      	adds	r3, #2
 8016ea2:	e7c7      	b.n	8016e34 <_printf_common+0x58>
 8016ea4:	2301      	movs	r3, #1
 8016ea6:	4622      	mov	r2, r4
 8016ea8:	4641      	mov	r1, r8
 8016eaa:	4638      	mov	r0, r7
 8016eac:	47c8      	blx	r9
 8016eae:	3001      	adds	r0, #1
 8016eb0:	d0e6      	beq.n	8016e80 <_printf_common+0xa4>
 8016eb2:	3601      	adds	r6, #1
 8016eb4:	e7d9      	b.n	8016e6a <_printf_common+0x8e>
	...

08016eb8 <_printf_i>:
 8016eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016ebc:	7e0f      	ldrb	r7, [r1, #24]
 8016ebe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016ec0:	2f78      	cmp	r7, #120	@ 0x78
 8016ec2:	4691      	mov	r9, r2
 8016ec4:	4680      	mov	r8, r0
 8016ec6:	460c      	mov	r4, r1
 8016ec8:	469a      	mov	sl, r3
 8016eca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016ece:	d807      	bhi.n	8016ee0 <_printf_i+0x28>
 8016ed0:	2f62      	cmp	r7, #98	@ 0x62
 8016ed2:	d80a      	bhi.n	8016eea <_printf_i+0x32>
 8016ed4:	2f00      	cmp	r7, #0
 8016ed6:	f000 80d2 	beq.w	801707e <_printf_i+0x1c6>
 8016eda:	2f58      	cmp	r7, #88	@ 0x58
 8016edc:	f000 80b9 	beq.w	8017052 <_printf_i+0x19a>
 8016ee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016ee4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016ee8:	e03a      	b.n	8016f60 <_printf_i+0xa8>
 8016eea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016eee:	2b15      	cmp	r3, #21
 8016ef0:	d8f6      	bhi.n	8016ee0 <_printf_i+0x28>
 8016ef2:	a101      	add	r1, pc, #4	@ (adr r1, 8016ef8 <_printf_i+0x40>)
 8016ef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016ef8:	08016f51 	.word	0x08016f51
 8016efc:	08016f65 	.word	0x08016f65
 8016f00:	08016ee1 	.word	0x08016ee1
 8016f04:	08016ee1 	.word	0x08016ee1
 8016f08:	08016ee1 	.word	0x08016ee1
 8016f0c:	08016ee1 	.word	0x08016ee1
 8016f10:	08016f65 	.word	0x08016f65
 8016f14:	08016ee1 	.word	0x08016ee1
 8016f18:	08016ee1 	.word	0x08016ee1
 8016f1c:	08016ee1 	.word	0x08016ee1
 8016f20:	08016ee1 	.word	0x08016ee1
 8016f24:	08017065 	.word	0x08017065
 8016f28:	08016f8f 	.word	0x08016f8f
 8016f2c:	0801701f 	.word	0x0801701f
 8016f30:	08016ee1 	.word	0x08016ee1
 8016f34:	08016ee1 	.word	0x08016ee1
 8016f38:	08017087 	.word	0x08017087
 8016f3c:	08016ee1 	.word	0x08016ee1
 8016f40:	08016f8f 	.word	0x08016f8f
 8016f44:	08016ee1 	.word	0x08016ee1
 8016f48:	08016ee1 	.word	0x08016ee1
 8016f4c:	08017027 	.word	0x08017027
 8016f50:	6833      	ldr	r3, [r6, #0]
 8016f52:	1d1a      	adds	r2, r3, #4
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	6032      	str	r2, [r6, #0]
 8016f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016f5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016f60:	2301      	movs	r3, #1
 8016f62:	e09d      	b.n	80170a0 <_printf_i+0x1e8>
 8016f64:	6833      	ldr	r3, [r6, #0]
 8016f66:	6820      	ldr	r0, [r4, #0]
 8016f68:	1d19      	adds	r1, r3, #4
 8016f6a:	6031      	str	r1, [r6, #0]
 8016f6c:	0606      	lsls	r6, r0, #24
 8016f6e:	d501      	bpl.n	8016f74 <_printf_i+0xbc>
 8016f70:	681d      	ldr	r5, [r3, #0]
 8016f72:	e003      	b.n	8016f7c <_printf_i+0xc4>
 8016f74:	0645      	lsls	r5, r0, #25
 8016f76:	d5fb      	bpl.n	8016f70 <_printf_i+0xb8>
 8016f78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016f7c:	2d00      	cmp	r5, #0
 8016f7e:	da03      	bge.n	8016f88 <_printf_i+0xd0>
 8016f80:	232d      	movs	r3, #45	@ 0x2d
 8016f82:	426d      	negs	r5, r5
 8016f84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016f88:	4859      	ldr	r0, [pc, #356]	@ (80170f0 <_printf_i+0x238>)
 8016f8a:	230a      	movs	r3, #10
 8016f8c:	e011      	b.n	8016fb2 <_printf_i+0xfa>
 8016f8e:	6821      	ldr	r1, [r4, #0]
 8016f90:	6833      	ldr	r3, [r6, #0]
 8016f92:	0608      	lsls	r0, r1, #24
 8016f94:	f853 5b04 	ldr.w	r5, [r3], #4
 8016f98:	d402      	bmi.n	8016fa0 <_printf_i+0xe8>
 8016f9a:	0649      	lsls	r1, r1, #25
 8016f9c:	bf48      	it	mi
 8016f9e:	b2ad      	uxthmi	r5, r5
 8016fa0:	2f6f      	cmp	r7, #111	@ 0x6f
 8016fa2:	4853      	ldr	r0, [pc, #332]	@ (80170f0 <_printf_i+0x238>)
 8016fa4:	6033      	str	r3, [r6, #0]
 8016fa6:	bf14      	ite	ne
 8016fa8:	230a      	movne	r3, #10
 8016faa:	2308      	moveq	r3, #8
 8016fac:	2100      	movs	r1, #0
 8016fae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016fb2:	6866      	ldr	r6, [r4, #4]
 8016fb4:	60a6      	str	r6, [r4, #8]
 8016fb6:	2e00      	cmp	r6, #0
 8016fb8:	bfa2      	ittt	ge
 8016fba:	6821      	ldrge	r1, [r4, #0]
 8016fbc:	f021 0104 	bicge.w	r1, r1, #4
 8016fc0:	6021      	strge	r1, [r4, #0]
 8016fc2:	b90d      	cbnz	r5, 8016fc8 <_printf_i+0x110>
 8016fc4:	2e00      	cmp	r6, #0
 8016fc6:	d04b      	beq.n	8017060 <_printf_i+0x1a8>
 8016fc8:	4616      	mov	r6, r2
 8016fca:	fbb5 f1f3 	udiv	r1, r5, r3
 8016fce:	fb03 5711 	mls	r7, r3, r1, r5
 8016fd2:	5dc7      	ldrb	r7, [r0, r7]
 8016fd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016fd8:	462f      	mov	r7, r5
 8016fda:	42bb      	cmp	r3, r7
 8016fdc:	460d      	mov	r5, r1
 8016fde:	d9f4      	bls.n	8016fca <_printf_i+0x112>
 8016fe0:	2b08      	cmp	r3, #8
 8016fe2:	d10b      	bne.n	8016ffc <_printf_i+0x144>
 8016fe4:	6823      	ldr	r3, [r4, #0]
 8016fe6:	07df      	lsls	r7, r3, #31
 8016fe8:	d508      	bpl.n	8016ffc <_printf_i+0x144>
 8016fea:	6923      	ldr	r3, [r4, #16]
 8016fec:	6861      	ldr	r1, [r4, #4]
 8016fee:	4299      	cmp	r1, r3
 8016ff0:	bfde      	ittt	le
 8016ff2:	2330      	movle	r3, #48	@ 0x30
 8016ff4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016ff8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8016ffc:	1b92      	subs	r2, r2, r6
 8016ffe:	6122      	str	r2, [r4, #16]
 8017000:	f8cd a000 	str.w	sl, [sp]
 8017004:	464b      	mov	r3, r9
 8017006:	aa03      	add	r2, sp, #12
 8017008:	4621      	mov	r1, r4
 801700a:	4640      	mov	r0, r8
 801700c:	f7ff fee6 	bl	8016ddc <_printf_common>
 8017010:	3001      	adds	r0, #1
 8017012:	d14a      	bne.n	80170aa <_printf_i+0x1f2>
 8017014:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017018:	b004      	add	sp, #16
 801701a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801701e:	6823      	ldr	r3, [r4, #0]
 8017020:	f043 0320 	orr.w	r3, r3, #32
 8017024:	6023      	str	r3, [r4, #0]
 8017026:	4833      	ldr	r0, [pc, #204]	@ (80170f4 <_printf_i+0x23c>)
 8017028:	2778      	movs	r7, #120	@ 0x78
 801702a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801702e:	6823      	ldr	r3, [r4, #0]
 8017030:	6831      	ldr	r1, [r6, #0]
 8017032:	061f      	lsls	r7, r3, #24
 8017034:	f851 5b04 	ldr.w	r5, [r1], #4
 8017038:	d402      	bmi.n	8017040 <_printf_i+0x188>
 801703a:	065f      	lsls	r7, r3, #25
 801703c:	bf48      	it	mi
 801703e:	b2ad      	uxthmi	r5, r5
 8017040:	6031      	str	r1, [r6, #0]
 8017042:	07d9      	lsls	r1, r3, #31
 8017044:	bf44      	itt	mi
 8017046:	f043 0320 	orrmi.w	r3, r3, #32
 801704a:	6023      	strmi	r3, [r4, #0]
 801704c:	b11d      	cbz	r5, 8017056 <_printf_i+0x19e>
 801704e:	2310      	movs	r3, #16
 8017050:	e7ac      	b.n	8016fac <_printf_i+0xf4>
 8017052:	4827      	ldr	r0, [pc, #156]	@ (80170f0 <_printf_i+0x238>)
 8017054:	e7e9      	b.n	801702a <_printf_i+0x172>
 8017056:	6823      	ldr	r3, [r4, #0]
 8017058:	f023 0320 	bic.w	r3, r3, #32
 801705c:	6023      	str	r3, [r4, #0]
 801705e:	e7f6      	b.n	801704e <_printf_i+0x196>
 8017060:	4616      	mov	r6, r2
 8017062:	e7bd      	b.n	8016fe0 <_printf_i+0x128>
 8017064:	6833      	ldr	r3, [r6, #0]
 8017066:	6825      	ldr	r5, [r4, #0]
 8017068:	6961      	ldr	r1, [r4, #20]
 801706a:	1d18      	adds	r0, r3, #4
 801706c:	6030      	str	r0, [r6, #0]
 801706e:	062e      	lsls	r6, r5, #24
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	d501      	bpl.n	8017078 <_printf_i+0x1c0>
 8017074:	6019      	str	r1, [r3, #0]
 8017076:	e002      	b.n	801707e <_printf_i+0x1c6>
 8017078:	0668      	lsls	r0, r5, #25
 801707a:	d5fb      	bpl.n	8017074 <_printf_i+0x1bc>
 801707c:	8019      	strh	r1, [r3, #0]
 801707e:	2300      	movs	r3, #0
 8017080:	6123      	str	r3, [r4, #16]
 8017082:	4616      	mov	r6, r2
 8017084:	e7bc      	b.n	8017000 <_printf_i+0x148>
 8017086:	6833      	ldr	r3, [r6, #0]
 8017088:	1d1a      	adds	r2, r3, #4
 801708a:	6032      	str	r2, [r6, #0]
 801708c:	681e      	ldr	r6, [r3, #0]
 801708e:	6862      	ldr	r2, [r4, #4]
 8017090:	2100      	movs	r1, #0
 8017092:	4630      	mov	r0, r6
 8017094:	f7e9 f8bc 	bl	8000210 <memchr>
 8017098:	b108      	cbz	r0, 801709e <_printf_i+0x1e6>
 801709a:	1b80      	subs	r0, r0, r6
 801709c:	6060      	str	r0, [r4, #4]
 801709e:	6863      	ldr	r3, [r4, #4]
 80170a0:	6123      	str	r3, [r4, #16]
 80170a2:	2300      	movs	r3, #0
 80170a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80170a8:	e7aa      	b.n	8017000 <_printf_i+0x148>
 80170aa:	6923      	ldr	r3, [r4, #16]
 80170ac:	4632      	mov	r2, r6
 80170ae:	4649      	mov	r1, r9
 80170b0:	4640      	mov	r0, r8
 80170b2:	47d0      	blx	sl
 80170b4:	3001      	adds	r0, #1
 80170b6:	d0ad      	beq.n	8017014 <_printf_i+0x15c>
 80170b8:	6823      	ldr	r3, [r4, #0]
 80170ba:	079b      	lsls	r3, r3, #30
 80170bc:	d413      	bmi.n	80170e6 <_printf_i+0x22e>
 80170be:	68e0      	ldr	r0, [r4, #12]
 80170c0:	9b03      	ldr	r3, [sp, #12]
 80170c2:	4298      	cmp	r0, r3
 80170c4:	bfb8      	it	lt
 80170c6:	4618      	movlt	r0, r3
 80170c8:	e7a6      	b.n	8017018 <_printf_i+0x160>
 80170ca:	2301      	movs	r3, #1
 80170cc:	4632      	mov	r2, r6
 80170ce:	4649      	mov	r1, r9
 80170d0:	4640      	mov	r0, r8
 80170d2:	47d0      	blx	sl
 80170d4:	3001      	adds	r0, #1
 80170d6:	d09d      	beq.n	8017014 <_printf_i+0x15c>
 80170d8:	3501      	adds	r5, #1
 80170da:	68e3      	ldr	r3, [r4, #12]
 80170dc:	9903      	ldr	r1, [sp, #12]
 80170de:	1a5b      	subs	r3, r3, r1
 80170e0:	42ab      	cmp	r3, r5
 80170e2:	dcf2      	bgt.n	80170ca <_printf_i+0x212>
 80170e4:	e7eb      	b.n	80170be <_printf_i+0x206>
 80170e6:	2500      	movs	r5, #0
 80170e8:	f104 0619 	add.w	r6, r4, #25
 80170ec:	e7f5      	b.n	80170da <_printf_i+0x222>
 80170ee:	bf00      	nop
 80170f0:	080184c9 	.word	0x080184c9
 80170f4:	080184da 	.word	0x080184da

080170f8 <__sflush_r>:
 80170f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80170fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017100:	0716      	lsls	r6, r2, #28
 8017102:	4605      	mov	r5, r0
 8017104:	460c      	mov	r4, r1
 8017106:	d454      	bmi.n	80171b2 <__sflush_r+0xba>
 8017108:	684b      	ldr	r3, [r1, #4]
 801710a:	2b00      	cmp	r3, #0
 801710c:	dc02      	bgt.n	8017114 <__sflush_r+0x1c>
 801710e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017110:	2b00      	cmp	r3, #0
 8017112:	dd48      	ble.n	80171a6 <__sflush_r+0xae>
 8017114:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017116:	2e00      	cmp	r6, #0
 8017118:	d045      	beq.n	80171a6 <__sflush_r+0xae>
 801711a:	2300      	movs	r3, #0
 801711c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017120:	682f      	ldr	r7, [r5, #0]
 8017122:	6a21      	ldr	r1, [r4, #32]
 8017124:	602b      	str	r3, [r5, #0]
 8017126:	d030      	beq.n	801718a <__sflush_r+0x92>
 8017128:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801712a:	89a3      	ldrh	r3, [r4, #12]
 801712c:	0759      	lsls	r1, r3, #29
 801712e:	d505      	bpl.n	801713c <__sflush_r+0x44>
 8017130:	6863      	ldr	r3, [r4, #4]
 8017132:	1ad2      	subs	r2, r2, r3
 8017134:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017136:	b10b      	cbz	r3, 801713c <__sflush_r+0x44>
 8017138:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801713a:	1ad2      	subs	r2, r2, r3
 801713c:	2300      	movs	r3, #0
 801713e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017140:	6a21      	ldr	r1, [r4, #32]
 8017142:	4628      	mov	r0, r5
 8017144:	47b0      	blx	r6
 8017146:	1c43      	adds	r3, r0, #1
 8017148:	89a3      	ldrh	r3, [r4, #12]
 801714a:	d106      	bne.n	801715a <__sflush_r+0x62>
 801714c:	6829      	ldr	r1, [r5, #0]
 801714e:	291d      	cmp	r1, #29
 8017150:	d82b      	bhi.n	80171aa <__sflush_r+0xb2>
 8017152:	4a2a      	ldr	r2, [pc, #168]	@ (80171fc <__sflush_r+0x104>)
 8017154:	410a      	asrs	r2, r1
 8017156:	07d6      	lsls	r6, r2, #31
 8017158:	d427      	bmi.n	80171aa <__sflush_r+0xb2>
 801715a:	2200      	movs	r2, #0
 801715c:	6062      	str	r2, [r4, #4]
 801715e:	04d9      	lsls	r1, r3, #19
 8017160:	6922      	ldr	r2, [r4, #16]
 8017162:	6022      	str	r2, [r4, #0]
 8017164:	d504      	bpl.n	8017170 <__sflush_r+0x78>
 8017166:	1c42      	adds	r2, r0, #1
 8017168:	d101      	bne.n	801716e <__sflush_r+0x76>
 801716a:	682b      	ldr	r3, [r5, #0]
 801716c:	b903      	cbnz	r3, 8017170 <__sflush_r+0x78>
 801716e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017172:	602f      	str	r7, [r5, #0]
 8017174:	b1b9      	cbz	r1, 80171a6 <__sflush_r+0xae>
 8017176:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801717a:	4299      	cmp	r1, r3
 801717c:	d002      	beq.n	8017184 <__sflush_r+0x8c>
 801717e:	4628      	mov	r0, r5
 8017180:	f7ff fb40 	bl	8016804 <_free_r>
 8017184:	2300      	movs	r3, #0
 8017186:	6363      	str	r3, [r4, #52]	@ 0x34
 8017188:	e00d      	b.n	80171a6 <__sflush_r+0xae>
 801718a:	2301      	movs	r3, #1
 801718c:	4628      	mov	r0, r5
 801718e:	47b0      	blx	r6
 8017190:	4602      	mov	r2, r0
 8017192:	1c50      	adds	r0, r2, #1
 8017194:	d1c9      	bne.n	801712a <__sflush_r+0x32>
 8017196:	682b      	ldr	r3, [r5, #0]
 8017198:	2b00      	cmp	r3, #0
 801719a:	d0c6      	beq.n	801712a <__sflush_r+0x32>
 801719c:	2b1d      	cmp	r3, #29
 801719e:	d001      	beq.n	80171a4 <__sflush_r+0xac>
 80171a0:	2b16      	cmp	r3, #22
 80171a2:	d11e      	bne.n	80171e2 <__sflush_r+0xea>
 80171a4:	602f      	str	r7, [r5, #0]
 80171a6:	2000      	movs	r0, #0
 80171a8:	e022      	b.n	80171f0 <__sflush_r+0xf8>
 80171aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80171ae:	b21b      	sxth	r3, r3
 80171b0:	e01b      	b.n	80171ea <__sflush_r+0xf2>
 80171b2:	690f      	ldr	r7, [r1, #16]
 80171b4:	2f00      	cmp	r7, #0
 80171b6:	d0f6      	beq.n	80171a6 <__sflush_r+0xae>
 80171b8:	0793      	lsls	r3, r2, #30
 80171ba:	680e      	ldr	r6, [r1, #0]
 80171bc:	bf08      	it	eq
 80171be:	694b      	ldreq	r3, [r1, #20]
 80171c0:	600f      	str	r7, [r1, #0]
 80171c2:	bf18      	it	ne
 80171c4:	2300      	movne	r3, #0
 80171c6:	eba6 0807 	sub.w	r8, r6, r7
 80171ca:	608b      	str	r3, [r1, #8]
 80171cc:	f1b8 0f00 	cmp.w	r8, #0
 80171d0:	dde9      	ble.n	80171a6 <__sflush_r+0xae>
 80171d2:	6a21      	ldr	r1, [r4, #32]
 80171d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80171d6:	4643      	mov	r3, r8
 80171d8:	463a      	mov	r2, r7
 80171da:	4628      	mov	r0, r5
 80171dc:	47b0      	blx	r6
 80171de:	2800      	cmp	r0, #0
 80171e0:	dc08      	bgt.n	80171f4 <__sflush_r+0xfc>
 80171e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80171ea:	81a3      	strh	r3, [r4, #12]
 80171ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80171f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171f4:	4407      	add	r7, r0
 80171f6:	eba8 0800 	sub.w	r8, r8, r0
 80171fa:	e7e7      	b.n	80171cc <__sflush_r+0xd4>
 80171fc:	dfbffffe 	.word	0xdfbffffe

08017200 <_fflush_r>:
 8017200:	b538      	push	{r3, r4, r5, lr}
 8017202:	690b      	ldr	r3, [r1, #16]
 8017204:	4605      	mov	r5, r0
 8017206:	460c      	mov	r4, r1
 8017208:	b913      	cbnz	r3, 8017210 <_fflush_r+0x10>
 801720a:	2500      	movs	r5, #0
 801720c:	4628      	mov	r0, r5
 801720e:	bd38      	pop	{r3, r4, r5, pc}
 8017210:	b118      	cbz	r0, 801721a <_fflush_r+0x1a>
 8017212:	6a03      	ldr	r3, [r0, #32]
 8017214:	b90b      	cbnz	r3, 801721a <_fflush_r+0x1a>
 8017216:	f7ff f8d1 	bl	80163bc <__sinit>
 801721a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801721e:	2b00      	cmp	r3, #0
 8017220:	d0f3      	beq.n	801720a <_fflush_r+0xa>
 8017222:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017224:	07d0      	lsls	r0, r2, #31
 8017226:	d404      	bmi.n	8017232 <_fflush_r+0x32>
 8017228:	0599      	lsls	r1, r3, #22
 801722a:	d402      	bmi.n	8017232 <_fflush_r+0x32>
 801722c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801722e:	f7ff faa6 	bl	801677e <__retarget_lock_acquire_recursive>
 8017232:	4628      	mov	r0, r5
 8017234:	4621      	mov	r1, r4
 8017236:	f7ff ff5f 	bl	80170f8 <__sflush_r>
 801723a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801723c:	07da      	lsls	r2, r3, #31
 801723e:	4605      	mov	r5, r0
 8017240:	d4e4      	bmi.n	801720c <_fflush_r+0xc>
 8017242:	89a3      	ldrh	r3, [r4, #12]
 8017244:	059b      	lsls	r3, r3, #22
 8017246:	d4e1      	bmi.n	801720c <_fflush_r+0xc>
 8017248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801724a:	f7ff fa99 	bl	8016780 <__retarget_lock_release_recursive>
 801724e:	e7dd      	b.n	801720c <_fflush_r+0xc>

08017250 <fiprintf>:
 8017250:	b40e      	push	{r1, r2, r3}
 8017252:	b503      	push	{r0, r1, lr}
 8017254:	4601      	mov	r1, r0
 8017256:	ab03      	add	r3, sp, #12
 8017258:	4805      	ldr	r0, [pc, #20]	@ (8017270 <fiprintf+0x20>)
 801725a:	f853 2b04 	ldr.w	r2, [r3], #4
 801725e:	6800      	ldr	r0, [r0, #0]
 8017260:	9301      	str	r3, [sp, #4]
 8017262:	f7ff fca3 	bl	8016bac <_vfiprintf_r>
 8017266:	b002      	add	sp, #8
 8017268:	f85d eb04 	ldr.w	lr, [sp], #4
 801726c:	b003      	add	sp, #12
 801726e:	4770      	bx	lr
 8017270:	20000268 	.word	0x20000268

08017274 <__swbuf_r>:
 8017274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017276:	460e      	mov	r6, r1
 8017278:	4614      	mov	r4, r2
 801727a:	4605      	mov	r5, r0
 801727c:	b118      	cbz	r0, 8017286 <__swbuf_r+0x12>
 801727e:	6a03      	ldr	r3, [r0, #32]
 8017280:	b90b      	cbnz	r3, 8017286 <__swbuf_r+0x12>
 8017282:	f7ff f89b 	bl	80163bc <__sinit>
 8017286:	69a3      	ldr	r3, [r4, #24]
 8017288:	60a3      	str	r3, [r4, #8]
 801728a:	89a3      	ldrh	r3, [r4, #12]
 801728c:	071a      	lsls	r2, r3, #28
 801728e:	d501      	bpl.n	8017294 <__swbuf_r+0x20>
 8017290:	6923      	ldr	r3, [r4, #16]
 8017292:	b943      	cbnz	r3, 80172a6 <__swbuf_r+0x32>
 8017294:	4621      	mov	r1, r4
 8017296:	4628      	mov	r0, r5
 8017298:	f000 f82a 	bl	80172f0 <__swsetup_r>
 801729c:	b118      	cbz	r0, 80172a6 <__swbuf_r+0x32>
 801729e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80172a2:	4638      	mov	r0, r7
 80172a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172a6:	6823      	ldr	r3, [r4, #0]
 80172a8:	6922      	ldr	r2, [r4, #16]
 80172aa:	1a98      	subs	r0, r3, r2
 80172ac:	6963      	ldr	r3, [r4, #20]
 80172ae:	b2f6      	uxtb	r6, r6
 80172b0:	4283      	cmp	r3, r0
 80172b2:	4637      	mov	r7, r6
 80172b4:	dc05      	bgt.n	80172c2 <__swbuf_r+0x4e>
 80172b6:	4621      	mov	r1, r4
 80172b8:	4628      	mov	r0, r5
 80172ba:	f7ff ffa1 	bl	8017200 <_fflush_r>
 80172be:	2800      	cmp	r0, #0
 80172c0:	d1ed      	bne.n	801729e <__swbuf_r+0x2a>
 80172c2:	68a3      	ldr	r3, [r4, #8]
 80172c4:	3b01      	subs	r3, #1
 80172c6:	60a3      	str	r3, [r4, #8]
 80172c8:	6823      	ldr	r3, [r4, #0]
 80172ca:	1c5a      	adds	r2, r3, #1
 80172cc:	6022      	str	r2, [r4, #0]
 80172ce:	701e      	strb	r6, [r3, #0]
 80172d0:	6962      	ldr	r2, [r4, #20]
 80172d2:	1c43      	adds	r3, r0, #1
 80172d4:	429a      	cmp	r2, r3
 80172d6:	d004      	beq.n	80172e2 <__swbuf_r+0x6e>
 80172d8:	89a3      	ldrh	r3, [r4, #12]
 80172da:	07db      	lsls	r3, r3, #31
 80172dc:	d5e1      	bpl.n	80172a2 <__swbuf_r+0x2e>
 80172de:	2e0a      	cmp	r6, #10
 80172e0:	d1df      	bne.n	80172a2 <__swbuf_r+0x2e>
 80172e2:	4621      	mov	r1, r4
 80172e4:	4628      	mov	r0, r5
 80172e6:	f7ff ff8b 	bl	8017200 <_fflush_r>
 80172ea:	2800      	cmp	r0, #0
 80172ec:	d0d9      	beq.n	80172a2 <__swbuf_r+0x2e>
 80172ee:	e7d6      	b.n	801729e <__swbuf_r+0x2a>

080172f0 <__swsetup_r>:
 80172f0:	b538      	push	{r3, r4, r5, lr}
 80172f2:	4b29      	ldr	r3, [pc, #164]	@ (8017398 <__swsetup_r+0xa8>)
 80172f4:	4605      	mov	r5, r0
 80172f6:	6818      	ldr	r0, [r3, #0]
 80172f8:	460c      	mov	r4, r1
 80172fa:	b118      	cbz	r0, 8017304 <__swsetup_r+0x14>
 80172fc:	6a03      	ldr	r3, [r0, #32]
 80172fe:	b90b      	cbnz	r3, 8017304 <__swsetup_r+0x14>
 8017300:	f7ff f85c 	bl	80163bc <__sinit>
 8017304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017308:	0719      	lsls	r1, r3, #28
 801730a:	d422      	bmi.n	8017352 <__swsetup_r+0x62>
 801730c:	06da      	lsls	r2, r3, #27
 801730e:	d407      	bmi.n	8017320 <__swsetup_r+0x30>
 8017310:	2209      	movs	r2, #9
 8017312:	602a      	str	r2, [r5, #0]
 8017314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017318:	81a3      	strh	r3, [r4, #12]
 801731a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801731e:	e033      	b.n	8017388 <__swsetup_r+0x98>
 8017320:	0758      	lsls	r0, r3, #29
 8017322:	d512      	bpl.n	801734a <__swsetup_r+0x5a>
 8017324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017326:	b141      	cbz	r1, 801733a <__swsetup_r+0x4a>
 8017328:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801732c:	4299      	cmp	r1, r3
 801732e:	d002      	beq.n	8017336 <__swsetup_r+0x46>
 8017330:	4628      	mov	r0, r5
 8017332:	f7ff fa67 	bl	8016804 <_free_r>
 8017336:	2300      	movs	r3, #0
 8017338:	6363      	str	r3, [r4, #52]	@ 0x34
 801733a:	89a3      	ldrh	r3, [r4, #12]
 801733c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017340:	81a3      	strh	r3, [r4, #12]
 8017342:	2300      	movs	r3, #0
 8017344:	6063      	str	r3, [r4, #4]
 8017346:	6923      	ldr	r3, [r4, #16]
 8017348:	6023      	str	r3, [r4, #0]
 801734a:	89a3      	ldrh	r3, [r4, #12]
 801734c:	f043 0308 	orr.w	r3, r3, #8
 8017350:	81a3      	strh	r3, [r4, #12]
 8017352:	6923      	ldr	r3, [r4, #16]
 8017354:	b94b      	cbnz	r3, 801736a <__swsetup_r+0x7a>
 8017356:	89a3      	ldrh	r3, [r4, #12]
 8017358:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801735c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017360:	d003      	beq.n	801736a <__swsetup_r+0x7a>
 8017362:	4621      	mov	r1, r4
 8017364:	4628      	mov	r0, r5
 8017366:	f000 f846 	bl	80173f6 <__smakebuf_r>
 801736a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801736e:	f013 0201 	ands.w	r2, r3, #1
 8017372:	d00a      	beq.n	801738a <__swsetup_r+0x9a>
 8017374:	2200      	movs	r2, #0
 8017376:	60a2      	str	r2, [r4, #8]
 8017378:	6962      	ldr	r2, [r4, #20]
 801737a:	4252      	negs	r2, r2
 801737c:	61a2      	str	r2, [r4, #24]
 801737e:	6922      	ldr	r2, [r4, #16]
 8017380:	b942      	cbnz	r2, 8017394 <__swsetup_r+0xa4>
 8017382:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017386:	d1c5      	bne.n	8017314 <__swsetup_r+0x24>
 8017388:	bd38      	pop	{r3, r4, r5, pc}
 801738a:	0799      	lsls	r1, r3, #30
 801738c:	bf58      	it	pl
 801738e:	6962      	ldrpl	r2, [r4, #20]
 8017390:	60a2      	str	r2, [r4, #8]
 8017392:	e7f4      	b.n	801737e <__swsetup_r+0x8e>
 8017394:	2000      	movs	r0, #0
 8017396:	e7f7      	b.n	8017388 <__swsetup_r+0x98>
 8017398:	20000268 	.word	0x20000268

0801739c <abort>:
 801739c:	b508      	push	{r3, lr}
 801739e:	2006      	movs	r0, #6
 80173a0:	f000 f88e 	bl	80174c0 <raise>
 80173a4:	2001      	movs	r0, #1
 80173a6:	f7eb f97f 	bl	80026a8 <_exit>

080173aa <__swhatbuf_r>:
 80173aa:	b570      	push	{r4, r5, r6, lr}
 80173ac:	460c      	mov	r4, r1
 80173ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173b2:	2900      	cmp	r1, #0
 80173b4:	b096      	sub	sp, #88	@ 0x58
 80173b6:	4615      	mov	r5, r2
 80173b8:	461e      	mov	r6, r3
 80173ba:	da0d      	bge.n	80173d8 <__swhatbuf_r+0x2e>
 80173bc:	89a3      	ldrh	r3, [r4, #12]
 80173be:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80173c2:	f04f 0100 	mov.w	r1, #0
 80173c6:	bf14      	ite	ne
 80173c8:	2340      	movne	r3, #64	@ 0x40
 80173ca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80173ce:	2000      	movs	r0, #0
 80173d0:	6031      	str	r1, [r6, #0]
 80173d2:	602b      	str	r3, [r5, #0]
 80173d4:	b016      	add	sp, #88	@ 0x58
 80173d6:	bd70      	pop	{r4, r5, r6, pc}
 80173d8:	466a      	mov	r2, sp
 80173da:	f000 f879 	bl	80174d0 <_fstat_r>
 80173de:	2800      	cmp	r0, #0
 80173e0:	dbec      	blt.n	80173bc <__swhatbuf_r+0x12>
 80173e2:	9901      	ldr	r1, [sp, #4]
 80173e4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80173e8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80173ec:	4259      	negs	r1, r3
 80173ee:	4159      	adcs	r1, r3
 80173f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80173f4:	e7eb      	b.n	80173ce <__swhatbuf_r+0x24>

080173f6 <__smakebuf_r>:
 80173f6:	898b      	ldrh	r3, [r1, #12]
 80173f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80173fa:	079d      	lsls	r5, r3, #30
 80173fc:	4606      	mov	r6, r0
 80173fe:	460c      	mov	r4, r1
 8017400:	d507      	bpl.n	8017412 <__smakebuf_r+0x1c>
 8017402:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017406:	6023      	str	r3, [r4, #0]
 8017408:	6123      	str	r3, [r4, #16]
 801740a:	2301      	movs	r3, #1
 801740c:	6163      	str	r3, [r4, #20]
 801740e:	b003      	add	sp, #12
 8017410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017412:	ab01      	add	r3, sp, #4
 8017414:	466a      	mov	r2, sp
 8017416:	f7ff ffc8 	bl	80173aa <__swhatbuf_r>
 801741a:	9f00      	ldr	r7, [sp, #0]
 801741c:	4605      	mov	r5, r0
 801741e:	4639      	mov	r1, r7
 8017420:	4630      	mov	r0, r6
 8017422:	f7fe fd99 	bl	8015f58 <_malloc_r>
 8017426:	b948      	cbnz	r0, 801743c <__smakebuf_r+0x46>
 8017428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801742c:	059a      	lsls	r2, r3, #22
 801742e:	d4ee      	bmi.n	801740e <__smakebuf_r+0x18>
 8017430:	f023 0303 	bic.w	r3, r3, #3
 8017434:	f043 0302 	orr.w	r3, r3, #2
 8017438:	81a3      	strh	r3, [r4, #12]
 801743a:	e7e2      	b.n	8017402 <__smakebuf_r+0xc>
 801743c:	89a3      	ldrh	r3, [r4, #12]
 801743e:	6020      	str	r0, [r4, #0]
 8017440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017444:	81a3      	strh	r3, [r4, #12]
 8017446:	9b01      	ldr	r3, [sp, #4]
 8017448:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801744c:	b15b      	cbz	r3, 8017466 <__smakebuf_r+0x70>
 801744e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017452:	4630      	mov	r0, r6
 8017454:	f000 f84e 	bl	80174f4 <_isatty_r>
 8017458:	b128      	cbz	r0, 8017466 <__smakebuf_r+0x70>
 801745a:	89a3      	ldrh	r3, [r4, #12]
 801745c:	f023 0303 	bic.w	r3, r3, #3
 8017460:	f043 0301 	orr.w	r3, r3, #1
 8017464:	81a3      	strh	r3, [r4, #12]
 8017466:	89a3      	ldrh	r3, [r4, #12]
 8017468:	431d      	orrs	r5, r3
 801746a:	81a5      	strh	r5, [r4, #12]
 801746c:	e7cf      	b.n	801740e <__smakebuf_r+0x18>

0801746e <_raise_r>:
 801746e:	291f      	cmp	r1, #31
 8017470:	b538      	push	{r3, r4, r5, lr}
 8017472:	4605      	mov	r5, r0
 8017474:	460c      	mov	r4, r1
 8017476:	d904      	bls.n	8017482 <_raise_r+0x14>
 8017478:	2316      	movs	r3, #22
 801747a:	6003      	str	r3, [r0, #0]
 801747c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017480:	bd38      	pop	{r3, r4, r5, pc}
 8017482:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017484:	b112      	cbz	r2, 801748c <_raise_r+0x1e>
 8017486:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801748a:	b94b      	cbnz	r3, 80174a0 <_raise_r+0x32>
 801748c:	4628      	mov	r0, r5
 801748e:	f000 f853 	bl	8017538 <_getpid_r>
 8017492:	4622      	mov	r2, r4
 8017494:	4601      	mov	r1, r0
 8017496:	4628      	mov	r0, r5
 8017498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801749c:	f000 b83a 	b.w	8017514 <_kill_r>
 80174a0:	2b01      	cmp	r3, #1
 80174a2:	d00a      	beq.n	80174ba <_raise_r+0x4c>
 80174a4:	1c59      	adds	r1, r3, #1
 80174a6:	d103      	bne.n	80174b0 <_raise_r+0x42>
 80174a8:	2316      	movs	r3, #22
 80174aa:	6003      	str	r3, [r0, #0]
 80174ac:	2001      	movs	r0, #1
 80174ae:	e7e7      	b.n	8017480 <_raise_r+0x12>
 80174b0:	2100      	movs	r1, #0
 80174b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80174b6:	4620      	mov	r0, r4
 80174b8:	4798      	blx	r3
 80174ba:	2000      	movs	r0, #0
 80174bc:	e7e0      	b.n	8017480 <_raise_r+0x12>
	...

080174c0 <raise>:
 80174c0:	4b02      	ldr	r3, [pc, #8]	@ (80174cc <raise+0xc>)
 80174c2:	4601      	mov	r1, r0
 80174c4:	6818      	ldr	r0, [r3, #0]
 80174c6:	f7ff bfd2 	b.w	801746e <_raise_r>
 80174ca:	bf00      	nop
 80174cc:	20000268 	.word	0x20000268

080174d0 <_fstat_r>:
 80174d0:	b538      	push	{r3, r4, r5, lr}
 80174d2:	4d07      	ldr	r5, [pc, #28]	@ (80174f0 <_fstat_r+0x20>)
 80174d4:	2300      	movs	r3, #0
 80174d6:	4604      	mov	r4, r0
 80174d8:	4608      	mov	r0, r1
 80174da:	4611      	mov	r1, r2
 80174dc:	602b      	str	r3, [r5, #0]
 80174de:	f7eb f933 	bl	8002748 <_fstat>
 80174e2:	1c43      	adds	r3, r0, #1
 80174e4:	d102      	bne.n	80174ec <_fstat_r+0x1c>
 80174e6:	682b      	ldr	r3, [r5, #0]
 80174e8:	b103      	cbz	r3, 80174ec <_fstat_r+0x1c>
 80174ea:	6023      	str	r3, [r4, #0]
 80174ec:	bd38      	pop	{r3, r4, r5, pc}
 80174ee:	bf00      	nop
 80174f0:	2000deec 	.word	0x2000deec

080174f4 <_isatty_r>:
 80174f4:	b538      	push	{r3, r4, r5, lr}
 80174f6:	4d06      	ldr	r5, [pc, #24]	@ (8017510 <_isatty_r+0x1c>)
 80174f8:	2300      	movs	r3, #0
 80174fa:	4604      	mov	r4, r0
 80174fc:	4608      	mov	r0, r1
 80174fe:	602b      	str	r3, [r5, #0]
 8017500:	f7eb f932 	bl	8002768 <_isatty>
 8017504:	1c43      	adds	r3, r0, #1
 8017506:	d102      	bne.n	801750e <_isatty_r+0x1a>
 8017508:	682b      	ldr	r3, [r5, #0]
 801750a:	b103      	cbz	r3, 801750e <_isatty_r+0x1a>
 801750c:	6023      	str	r3, [r4, #0]
 801750e:	bd38      	pop	{r3, r4, r5, pc}
 8017510:	2000deec 	.word	0x2000deec

08017514 <_kill_r>:
 8017514:	b538      	push	{r3, r4, r5, lr}
 8017516:	4d07      	ldr	r5, [pc, #28]	@ (8017534 <_kill_r+0x20>)
 8017518:	2300      	movs	r3, #0
 801751a:	4604      	mov	r4, r0
 801751c:	4608      	mov	r0, r1
 801751e:	4611      	mov	r1, r2
 8017520:	602b      	str	r3, [r5, #0]
 8017522:	f7eb f8b1 	bl	8002688 <_kill>
 8017526:	1c43      	adds	r3, r0, #1
 8017528:	d102      	bne.n	8017530 <_kill_r+0x1c>
 801752a:	682b      	ldr	r3, [r5, #0]
 801752c:	b103      	cbz	r3, 8017530 <_kill_r+0x1c>
 801752e:	6023      	str	r3, [r4, #0]
 8017530:	bd38      	pop	{r3, r4, r5, pc}
 8017532:	bf00      	nop
 8017534:	2000deec 	.word	0x2000deec

08017538 <_getpid_r>:
 8017538:	f7eb b89e 	b.w	8002678 <_getpid>

0801753c <_init>:
 801753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801753e:	bf00      	nop
 8017540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017542:	bc08      	pop	{r3}
 8017544:	469e      	mov	lr, r3
 8017546:	4770      	bx	lr

08017548 <_fini>:
 8017548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801754a:	bf00      	nop
 801754c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801754e:	bc08      	pop	{r3}
 8017550:	469e      	mov	lr, r3
 8017552:	4770      	bx	lr
