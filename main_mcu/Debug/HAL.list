
HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000185a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fec  08018748  08018748  00019748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019734  08019734  0001b2b8  2**0
                  CONTENTS
  4 .ARM          00000008  08019734  08019734  0001a734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801973c  0801973c  0001b2b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801973c  0801973c  0001a73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019748  08019748  0001a748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b8  20000000  0801974c  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dd7c  200002b8  08019a04  0001b2b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000e034  08019a04  0001c034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b2b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d58e  00000000  00000000  0001b2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000404b  00000000  00000000  00038876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  0003c8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001392  00000000  00000000  0003e1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008e2a  00000000  00000000  0003f56a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e338  00000000  00000000  00048394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6c11  00000000  00000000  000666cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0010d2dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a3c  00000000  00000000  0010d354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00114d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b8 	.word	0x200002b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801872c 	.word	0x0801872c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002bc 	.word	0x200002bc
 80001dc:	0801872c 	.word	0x0801872c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_ldivmod>:
 8000bec:	b97b      	cbnz	r3, 8000c0e <__aeabi_ldivmod+0x22>
 8000bee:	b972      	cbnz	r2, 8000c0e <__aeabi_ldivmod+0x22>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bfbe      	ittt	lt
 8000bf4:	2000      	movlt	r0, #0
 8000bf6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bfa:	e006      	blt.n	8000c0a <__aeabi_ldivmod+0x1e>
 8000bfc:	bf08      	it	eq
 8000bfe:	2800      	cmpeq	r0, #0
 8000c00:	bf1c      	itt	ne
 8000c02:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c06:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0a:	f000 b9b5 	b.w	8000f78 <__aeabi_idiv0>
 8000c0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c16:	2900      	cmp	r1, #0
 8000c18:	db09      	blt.n	8000c2e <__aeabi_ldivmod+0x42>
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db1a      	blt.n	8000c54 <__aeabi_ldivmod+0x68>
 8000c1e:	f000 f84d 	bl	8000cbc <__udivmoddi4>
 8000c22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2a:	b004      	add	sp, #16
 8000c2c:	4770      	bx	lr
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db1b      	blt.n	8000c70 <__aeabi_ldivmod+0x84>
 8000c38:	f000 f840 	bl	8000cbc <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4240      	negs	r0, r0
 8000c48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	4770      	bx	lr
 8000c54:	4252      	negs	r2, r2
 8000c56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5a:	f000 f82f 	bl	8000cbc <__udivmoddi4>
 8000c5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c66:	b004      	add	sp, #16
 8000c68:	4240      	negs	r0, r0
 8000c6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f821 	bl	8000cbc <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ca0:	f000 b96a 	b.w	8000f78 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f806 	bl	8000cbc <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9d08      	ldr	r5, [sp, #32]
 8000cc2:	460c      	mov	r4, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14e      	bne.n	8000d66 <__udivmoddi4+0xaa>
 8000cc8:	4694      	mov	ip, r2
 8000cca:	458c      	cmp	ip, r1
 8000ccc:	4686      	mov	lr, r0
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	d962      	bls.n	8000d9a <__udivmoddi4+0xde>
 8000cd4:	b14a      	cbz	r2, 8000cea <__udivmoddi4+0x2e>
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	4091      	lsls	r1, r2
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	4319      	orrs	r1, r3
 8000ce6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f f68c 	uxth.w	r6, ip
 8000cf2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d02:	fb04 f106 	mul.w	r1, r4, r6
 8000d06:	4299      	cmp	r1, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x64>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d12:	f080 8112 	bcs.w	8000f3a <__udivmoddi4+0x27e>
 8000d16:	4299      	cmp	r1, r3
 8000d18:	f240 810f 	bls.w	8000f3a <__udivmoddi4+0x27e>
 8000d1c:	3c02      	subs	r4, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a59      	subs	r1, r3, r1
 8000d22:	fa1f f38e 	uxth.w	r3, lr
 8000d26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d32:	fb00 f606 	mul.w	r6, r0, r6
 8000d36:	429e      	cmp	r6, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x94>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d42:	f080 80fc 	bcs.w	8000f3e <__udivmoddi4+0x282>
 8000d46:	429e      	cmp	r6, r3
 8000d48:	f240 80f9 	bls.w	8000f3e <__udivmoddi4+0x282>
 8000d4c:	4463      	add	r3, ip
 8000d4e:	3802      	subs	r0, #2
 8000d50:	1b9b      	subs	r3, r3, r6
 8000d52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d56:	2100      	movs	r1, #0
 8000d58:	b11d      	cbz	r5, 8000d62 <__udivmoddi4+0xa6>
 8000d5a:	40d3      	lsrs	r3, r2
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d905      	bls.n	8000d76 <__udivmoddi4+0xba>
 8000d6a:	b10d      	cbz	r5, 8000d70 <__udivmoddi4+0xb4>
 8000d6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	4608      	mov	r0, r1
 8000d74:	e7f5      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000d76:	fab3 f183 	clz	r1, r3
 8000d7a:	2900      	cmp	r1, #0
 8000d7c:	d146      	bne.n	8000e0c <__udivmoddi4+0x150>
 8000d7e:	42a3      	cmp	r3, r4
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xcc>
 8000d82:	4290      	cmp	r0, r2
 8000d84:	f0c0 80f0 	bcc.w	8000f68 <__udivmoddi4+0x2ac>
 8000d88:	1a86      	subs	r6, r0, r2
 8000d8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	d0e6      	beq.n	8000d62 <__udivmoddi4+0xa6>
 8000d94:	e9c5 6300 	strd	r6, r3, [r5]
 8000d98:	e7e3      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	f040 8090 	bne.w	8000ec0 <__udivmoddi4+0x204>
 8000da0:	eba1 040c 	sub.w	r4, r1, ip
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	2101      	movs	r1, #1
 8000dae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000db2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dbe:	fb07 f006 	mul.w	r0, r7, r6
 8000dc2:	4298      	cmp	r0, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x11c>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x11a>
 8000dd0:	4298      	cmp	r0, r3
 8000dd2:	f200 80cd 	bhi.w	8000f70 <__udivmoddi4+0x2b4>
 8000dd6:	4626      	mov	r6, r4
 8000dd8:	1a1c      	subs	r4, r3, r0
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000de2:	fb08 4410 	mls	r4, r8, r0, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb00 f707 	mul.w	r7, r0, r7
 8000dee:	429f      	cmp	r7, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x148>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x146>
 8000dfc:	429f      	cmp	r7, r3
 8000dfe:	f200 80b0 	bhi.w	8000f62 <__udivmoddi4+0x2a6>
 8000e02:	4620      	mov	r0, r4
 8000e04:	1bdb      	subs	r3, r3, r7
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0x9c>
 8000e0c:	f1c1 0620 	rsb	r6, r1, #32
 8000e10:	408b      	lsls	r3, r1
 8000e12:	fa22 f706 	lsr.w	r7, r2, r6
 8000e16:	431f      	orrs	r7, r3
 8000e18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e20:	ea43 030c 	orr.w	r3, r3, ip
 8000e24:	40f4      	lsrs	r4, r6
 8000e26:	fa00 f801 	lsl.w	r8, r0, r1
 8000e2a:	0c38      	lsrs	r0, r7, #16
 8000e2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e30:	fbb4 fef0 	udiv	lr, r4, r0
 8000e34:	fa1f fc87 	uxth.w	ip, r7
 8000e38:	fb00 441e 	mls	r4, r0, lr, r4
 8000e3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e40:	fb0e f90c 	mul.w	r9, lr, ip
 8000e44:	45a1      	cmp	r9, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	d90a      	bls.n	8000e62 <__udivmoddi4+0x1a6>
 8000e4c:	193c      	adds	r4, r7, r4
 8000e4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e52:	f080 8084 	bcs.w	8000f5e <__udivmoddi4+0x2a2>
 8000e56:	45a1      	cmp	r9, r4
 8000e58:	f240 8081 	bls.w	8000f5e <__udivmoddi4+0x2a2>
 8000e5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e60:	443c      	add	r4, r7
 8000e62:	eba4 0409 	sub.w	r4, r4, r9
 8000e66:	fa1f f983 	uxth.w	r9, r3
 8000e6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e7a:	45a4      	cmp	ip, r4
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x1d2>
 8000e7e:	193c      	adds	r4, r7, r4
 8000e80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e84:	d267      	bcs.n	8000f56 <__udivmoddi4+0x29a>
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d965      	bls.n	8000f56 <__udivmoddi4+0x29a>
 8000e8a:	3b02      	subs	r3, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e92:	fba0 9302 	umull	r9, r3, r0, r2
 8000e96:	eba4 040c 	sub.w	r4, r4, ip
 8000e9a:	429c      	cmp	r4, r3
 8000e9c:	46ce      	mov	lr, r9
 8000e9e:	469c      	mov	ip, r3
 8000ea0:	d351      	bcc.n	8000f46 <__udivmoddi4+0x28a>
 8000ea2:	d04e      	beq.n	8000f42 <__udivmoddi4+0x286>
 8000ea4:	b155      	cbz	r5, 8000ebc <__udivmoddi4+0x200>
 8000ea6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000eae:	fa04 f606 	lsl.w	r6, r4, r6
 8000eb2:	40cb      	lsrs	r3, r1
 8000eb4:	431e      	orrs	r6, r3
 8000eb6:	40cc      	lsrs	r4, r1
 8000eb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	e750      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000ec0:	f1c2 0320 	rsb	r3, r2, #32
 8000ec4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ed0:	4094      	lsls	r4, r2
 8000ed2:	430c      	orrs	r4, r1
 8000ed4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000edc:	fa1f f78c 	uxth.w	r7, ip
 8000ee0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee8:	0c23      	lsrs	r3, r4, #16
 8000eea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eee:	fb00 f107 	mul.w	r1, r0, r7
 8000ef2:	4299      	cmp	r1, r3
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x24c>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efe:	d22c      	bcs.n	8000f5a <__udivmoddi4+0x29e>
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d92a      	bls.n	8000f5a <__udivmoddi4+0x29e>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1a5b      	subs	r3, r3, r1
 8000f0a:	b2a4      	uxth	r4, r4
 8000f0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f10:	fb08 3311 	mls	r3, r8, r1, r3
 8000f14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f18:	fb01 f307 	mul.w	r3, r1, r7
 8000f1c:	42a3      	cmp	r3, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x276>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f28:	d213      	bcs.n	8000f52 <__udivmoddi4+0x296>
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	d911      	bls.n	8000f52 <__udivmoddi4+0x296>
 8000f2e:	3902      	subs	r1, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	1ae4      	subs	r4, r4, r3
 8000f34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f38:	e739      	b.n	8000dae <__udivmoddi4+0xf2>
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	e6f0      	b.n	8000d20 <__udivmoddi4+0x64>
 8000f3e:	4608      	mov	r0, r1
 8000f40:	e706      	b.n	8000d50 <__udivmoddi4+0x94>
 8000f42:	45c8      	cmp	r8, r9
 8000f44:	d2ae      	bcs.n	8000ea4 <__udivmoddi4+0x1e8>
 8000f46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4e:	3801      	subs	r0, #1
 8000f50:	e7a8      	b.n	8000ea4 <__udivmoddi4+0x1e8>
 8000f52:	4631      	mov	r1, r6
 8000f54:	e7ed      	b.n	8000f32 <__udivmoddi4+0x276>
 8000f56:	4603      	mov	r3, r0
 8000f58:	e799      	b.n	8000e8e <__udivmoddi4+0x1d2>
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	e7d4      	b.n	8000f08 <__udivmoddi4+0x24c>
 8000f5e:	46d6      	mov	lr, sl
 8000f60:	e77f      	b.n	8000e62 <__udivmoddi4+0x1a6>
 8000f62:	4463      	add	r3, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e74d      	b.n	8000e04 <__udivmoddi4+0x148>
 8000f68:	4606      	mov	r6, r0
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	e70f      	b.n	8000d90 <__udivmoddi4+0xd4>
 8000f70:	3e02      	subs	r6, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	e730      	b.n	8000dd8 <__udivmoddi4+0x11c>
 8000f76:	bf00      	nop

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f88:	f007 fd2c 	bl	80089e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80010f8 <pvPortMallocMicroROS+0x17c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000f94:	f000 f986 	bl	80012a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f98:	4b58      	ldr	r3, [pc, #352]	@ (80010fc <pvPortMallocMicroROS+0x180>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f040 8090 	bne.w	80010c6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d01e      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fac:	2208      	movs	r2, #8
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d015      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f023 0307 	bic.w	r3, r3, #7
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fd6:	f383 8811 	msr	BASEPRI, r3
 8000fda:	f3bf 8f6f 	isb	sy
 8000fde:	f3bf 8f4f 	dsb	sy
 8000fe2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	e7fd      	b.n	8000fe6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d06a      	beq.n	80010c6 <pvPortMallocMicroROS+0x14a>
 8000ff0:	4b43      	ldr	r3, [pc, #268]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d865      	bhi.n	80010c6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000ffa:	4b42      	ldr	r3, [pc, #264]	@ (8001104 <pvPortMallocMicroROS+0x188>)
 8000ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000ffe:	4b41      	ldr	r3, [pc, #260]	@ (8001104 <pvPortMallocMicroROS+0x188>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001004:	e004      	b.n	8001010 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	d903      	bls.n	8001022 <pvPortMallocMicroROS+0xa6>
 800101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f1      	bne.n	8001006 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001022:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <pvPortMallocMicroROS+0x17c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001028:	429a      	cmp	r2, r3
 800102a:	d04c      	beq.n	80010c6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2208      	movs	r2, #8
 8001032:	4413      	add	r3, r2
 8001034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	1ad2      	subs	r2, r2, r3
 8001046:	2308      	movs	r3, #8
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	429a      	cmp	r2, r3
 800104c:	d920      	bls.n	8001090 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800104e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00b      	beq.n	8001078 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001064:	f383 8811 	msr	BASEPRI, r3
 8001068:	f3bf 8f6f 	isb	sy
 800106c:	f3bf 8f4f 	dsb	sy
 8001070:	613b      	str	r3, [r7, #16]
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	1ad2      	subs	r2, r2, r3
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800108a:	69b8      	ldr	r0, [r7, #24]
 800108c:	f000 f96c 	bl	8001368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 800109c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <pvPortMallocMicroROS+0x18c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d203      	bcs.n	80010b2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <pvPortMallocMicroROS+0x184>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a16      	ldr	r2, [pc, #88]	@ (8001108 <pvPortMallocMicroROS+0x18c>)
 80010b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <pvPortMallocMicroROS+0x180>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010c6:	f007 fc9b 	bl	8008a00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <pvPortMallocMicroROS+0x170>
	__asm volatile
 80010d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d8:	f383 8811 	msr	BASEPRI, r3
 80010dc:	f3bf 8f6f 	isb	sy
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	60fb      	str	r3, [r7, #12]
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80010ec:	69fb      	ldr	r3, [r7, #28]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3728      	adds	r7, #40	@ 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20003edc 	.word	0x20003edc
 80010fc:	20003ee8 	.word	0x20003ee8
 8001100:	20003ee0 	.word	0x20003ee0
 8001104:	20003ed4 	.word	0x20003ed4
 8001108:	20003ee4 	.word	0x20003ee4

0800110c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d04a      	beq.n	80011b4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800111e:	2308      	movs	r3, #8
 8001120:	425b      	negs	r3, r3
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4413      	add	r3, r2
 8001126:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10b      	bne.n	8001152 <vPortFreeMicroROS+0x46>
	__asm volatile
 800113a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800113e:	f383 8811 	msr	BASEPRI, r3
 8001142:	f3bf 8f6f 	isb	sy
 8001146:	f3bf 8f4f 	dsb	sy
 800114a:	60fb      	str	r3, [r7, #12]
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	e7fd      	b.n	800114e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <vPortFreeMicroROS+0x66>
	__asm volatile
 800115a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800115e:	f383 8811 	msr	BASEPRI, r3
 8001162:	f3bf 8f6f 	isb	sy
 8001166:	f3bf 8f4f 	dsb	sy
 800116a:	60bb      	str	r3, [r7, #8]
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	e7fd      	b.n	800116e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4013      	ands	r3, r2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d019      	beq.n	80011b4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d115      	bne.n	80011b4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <vPortFreeMicroROS+0xb0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001198:	f007 fc24 	bl	80089e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <vPortFreeMicroROS+0xb4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <vPortFreeMicroROS+0xb4>)
 80011a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011aa:	6938      	ldr	r0, [r7, #16]
 80011ac:	f000 f8dc 	bl	8001368 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011b0:	f007 fc26 	bl	8008a00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20003ee8 	.word	0x20003ee8
 80011c0:	20003ee0 	.word	0x20003ee0

080011c4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011d0:	2308      	movs	r3, #8
 80011d2:	425b      	negs	r3, r3
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	4413      	add	r3, r2
 80011d8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <getBlockSize+0x38>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]

	return count;
 80011ec:	68fb      	ldr	r3, [r7, #12]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20003ee8 	.word	0x20003ee8

08001200 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800120a:	f007 fbeb 	bl	80089e4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800120e:	6838      	ldr	r0, [r7, #0]
 8001210:	f7ff feb4 	bl	8000f7c <pvPortMallocMicroROS>
 8001214:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d017      	beq.n	800124c <pvPortReallocMicroROS+0x4c>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d014      	beq.n	800124c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffce 	bl	80011c4 <getBlockSize>
 8001228:	4603      	mov	r3, r0
 800122a:	2208      	movs	r2, #8
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d201      	bcs.n	800123c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	68b8      	ldr	r0, [r7, #8]
 8001242:	f016 fb9e 	bl	8017982 <memcpy>

		vPortFreeMicroROS(pv);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff60 	bl	800110c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800124c:	f007 fbd8 	bl	8008a00 <xTaskResumeAll>

	return newmem;
 8001250:	68bb      	ldr	r3, [r7, #8]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001264:	f007 fbbe 	bl	80089e4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff fe82 	bl	8000f7c <pvPortMallocMicroROS>
 8001278:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800127e:	e004      	b.n	800128a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	613a      	str	r2, [r7, #16]
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	1e5a      	subs	r2, r3, #1
 800128e:	617a      	str	r2, [r7, #20]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f5      	bne.n	8001280 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001294:	f007 fbb4 	bl	8008a00 <xTaskResumeAll>
  	return mem;
 8001298:	68fb      	ldr	r3, [r7, #12]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012aa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80012ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012b0:	4b27      	ldr	r3, [pc, #156]	@ (8001350 <prvHeapInit+0xac>)
 80012b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00c      	beq.n	80012d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3307      	adds	r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f023 0307 	bic.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001350 <prvHeapInit+0xac>)
 80012d4:	4413      	add	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <prvHeapInit+0xb0>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <prvHeapInit+0xb0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80012f0:	2208      	movs	r2, #8
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f023 0307 	bic.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4a15      	ldr	r2, [pc, #84]	@ (8001358 <prvHeapInit+0xb4>)
 8001304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <prvHeapInit+0xb4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800130e:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <prvHeapInit+0xb4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	1ad2      	subs	r2, r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <prvHeapInit+0xb4>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <prvHeapInit+0xb8>)
 8001332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <prvHeapInit+0xbc>)
 800133a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800133c:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <prvHeapInit+0xc0>)
 800133e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	200002d4 	.word	0x200002d4
 8001354:	20003ed4 	.word	0x20003ed4
 8001358:	20003edc 	.word	0x20003edc
 800135c:	20003ee4 	.word	0x20003ee4
 8001360:	20003ee0 	.word	0x20003ee0
 8001364:	20003ee8 	.word	0x20003ee8

08001368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <prvInsertBlockIntoFreeList+0xac>)
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e002      	b.n	800137c <prvInsertBlockIntoFreeList+0x14>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	d8f7      	bhi.n	8001376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	4413      	add	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	d108      	bne.n	80013aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	441a      	add	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	441a      	add	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d118      	bne.n	80013f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <prvInsertBlockIntoFreeList+0xb0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d00d      	beq.n	80013e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	441a      	add	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e008      	b.n	80013f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <prvInsertBlockIntoFreeList+0xb0>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e003      	b.n	80013f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d002      	beq.n	8001406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20003ed4 	.word	0x20003ed4
 8001418:	20003edc 	.word	0x20003edc
 800141c:	00000000 	.word	0x00000000

08001420 <subscription_cmd_vel_callback>:
#define GYRO_XOUT_H_REG 0x43
#define PWR_MGMT_1_REG 0x6B
#define WHO_AM_I_REG 0x75

void subscription_cmd_vel_callback(const void * msgin)
{
 8001420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001424:	b088      	sub	sp, #32
 8001426:	af00      	add	r7, sp, #0
 8001428:	6178      	str	r0, [r7, #20]
	geometry_msgs__msg__Twist * msg = (geometry_msgs__msg__Twist *)msgin;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	61fb      	str	r3, [r7, #28]

	LeftWheelVelocity = msg->linear.x - msg->angular.z*Length;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800143a:	a3af      	add	r3, pc, #700	@ (adr r3, 80016f8 <subscription_cmd_vel_callback+0x2d8>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff f8f2 	bl	8000628 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4620      	mov	r0, r4
 800144a:	4629      	mov	r1, r5
 800144c:	f7fe ff34 	bl	80002b8 <__aeabi_dsub>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	49b0      	ldr	r1, [pc, #704]	@ (8001718 <subscription_cmd_vel_callback+0x2f8>)
 8001456:	e9c1 2300 	strd	r2, r3, [r1]
	RightWheelVelocity = msg->linear.x + msg->angular.z*Length;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001466:	a3a4      	add	r3, pc, #656	@ (adr r3, 80016f8 <subscription_cmd_vel_callback+0x2d8>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f8dc 	bl	8000628 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7fe ff20 	bl	80002bc <__adddf3>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	49a6      	ldr	r1, [pc, #664]	@ (800171c <subscription_cmd_vel_callback+0x2fc>)
 8001482:	e9c1 2300 	strd	r2, r3, [r1]


	LeftMotorSpeed = (int)(LeftWheelVelocity/WheelRadius) * 60/6.2831;            //w of motor in rpm
 8001486:	4ba4      	ldr	r3, [pc, #656]	@ (8001718 <subscription_cmd_vel_callback+0x2f8>)
 8001488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148c:	a39c      	add	r3, pc, #624	@ (adr r3, 8001700 <subscription_cmd_vel_callback+0x2e0>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f9f3 	bl	800087c <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fb5d 	bl	8000b5c <__aeabi_d2iz>
 80014a2:	4602      	mov	r2, r0
 80014a4:	4613      	mov	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f851 	bl	8000554 <__aeabi_i2d>
 80014b2:	a395      	add	r3, pc, #596	@ (adr r3, 8001708 <subscription_cmd_vel_callback+0x2e8>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7ff f9e0 	bl	800087c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4997      	ldr	r1, [pc, #604]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 80014c2:	e9c1 2300 	strd	r2, r3, [r1]
	RightMotorSpeed = (int)(RightWheelVelocity/WheelRadius) * 60/6.2831;
 80014c6:	4b95      	ldr	r3, [pc, #596]	@ (800171c <subscription_cmd_vel_callback+0x2fc>)
 80014c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014cc:	a38c      	add	r3, pc, #560	@ (adr r3, 8001700 <subscription_cmd_vel_callback+0x2e0>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f9d3 	bl	800087c <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fb3d 	bl	8000b5c <__aeabi_d2iz>
 80014e2:	4602      	mov	r2, r0
 80014e4:	4613      	mov	r3, r2
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f831 	bl	8000554 <__aeabi_i2d>
 80014f2:	a385      	add	r3, pc, #532	@ (adr r3, 8001708 <subscription_cmd_vel_callback+0x2e8>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f9c0 	bl	800087c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4988      	ldr	r1, [pc, #544]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 8001502:	e9c1 2300 	strd	r2, r3, [r1]
	//PWM2 Right motor PA6
	//PWM1 Right motor PA7
	//PWM2 Left motor PB1
	//PWM1 Left motor PB0

	if (LeftMotorSpeed>=0 && LeftMotorSpeed<=1000 && RightMotorSpeed>=0 && RightMotorSpeed<=1000)	//front
 8001506:	4b86      	ldr	r3, [pc, #536]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 8001508:	e9d3 0100 	ldrd	r0, r1, [r3]
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f7ff fb0e 	bl	8000b34 <__aeabi_dcmpge>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d042      	beq.n	80015a4 <subscription_cmd_vel_callback+0x184>
 800151e:	4b80      	ldr	r3, [pc, #512]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 8001520:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b7f      	ldr	r3, [pc, #508]	@ (8001728 <subscription_cmd_vel_callback+0x308>)
 800152a:	f7ff faf9 	bl	8000b20 <__aeabi_dcmple>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d037      	beq.n	80015a4 <subscription_cmd_vel_callback+0x184>
 8001534:	4b7b      	ldr	r3, [pc, #492]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 8001536:	e9d3 0100 	ldrd	r0, r1, [r3]
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	f7ff faf7 	bl	8000b34 <__aeabi_dcmpge>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d02b      	beq.n	80015a4 <subscription_cmd_vel_callback+0x184>
 800154c:	4b75      	ldr	r3, [pc, #468]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 800154e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b74      	ldr	r3, [pc, #464]	@ (8001728 <subscription_cmd_vel_callback+0x308>)
 8001558:	f7ff fae2 	bl	8000b20 <__aeabi_dcmple>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d020      	beq.n	80015a4 <subscription_cmd_vel_callback+0x184>
	{
 		TIM3->CCR1 = LeftMotorSpeed;
 8001562:	4b6f      	ldr	r3, [pc, #444]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	4c70      	ldr	r4, [pc, #448]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb1d 	bl	8000bac <__aeabi_d2uiz>
 8001572:	4603      	mov	r3, r0
 8001574:	6363      	str	r3, [r4, #52]	@ 0x34
//		TIM3->CCR2 = 0;
		TIM3->CCR3 = RightMotorSpeed;
 8001576:	4b6b      	ldr	r3, [pc, #428]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	4c6b      	ldr	r4, [pc, #428]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f7ff fb13 	bl	8000bac <__aeabi_d2uiz>
 8001586:	4603      	mov	r3, r0
 8001588:	63e3      	str	r3, [r4, #60]	@ 0x3c
//		TIM3->CCR4 = 0;
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 800158a:	2201      	movs	r2, #1
 800158c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001590:	4867      	ldr	r0, [pc, #412]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 8001592:	f002 f9cf 	bl	8003934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800159c:	4864      	ldr	r0, [pc, #400]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 800159e:	f002 f9c9 	bl	8003934 <HAL_GPIO_WritePin>
 80015a2:	e126      	b.n	80017f2 <subscription_cmd_vel_callback+0x3d2>
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
	}
	else if (LeftMotorSpeed<=0 && LeftMotorSpeed>=-1000 && RightMotorSpeed<=0 && RightMotorSpeed>=-1000)	//back
 80015a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 80015a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	f7ff fab5 	bl	8000b20 <__aeabi_dcmple>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d04a      	beq.n	8001652 <subscription_cmd_vel_callback+0x232>
 80015bc:	4b58      	ldr	r3, [pc, #352]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 80015be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c2:	a353      	add	r3, pc, #332	@ (adr r3, 8001710 <subscription_cmd_vel_callback+0x2f0>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7ff fab4 	bl	8000b34 <__aeabi_dcmpge>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d03f      	beq.n	8001652 <subscription_cmd_vel_callback+0x232>
 80015d2:	4b54      	ldr	r3, [pc, #336]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 80015d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	f7ff fa9e 	bl	8000b20 <__aeabi_dcmple>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d033      	beq.n	8001652 <subscription_cmd_vel_callback+0x232>
 80015ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 80015ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f0:	a347      	add	r3, pc, #284	@ (adr r3, 8001710 <subscription_cmd_vel_callback+0x2f0>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff fa9d 	bl	8000b34 <__aeabi_dcmpge>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d028      	beq.n	8001652 <subscription_cmd_vel_callback+0x232>
//		TIM3->CCR4 = -RightMotorSpeed;
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
		TIM3->CCR1 = -LeftMotorSpeed;
 8001600:	4b47      	ldr	r3, [pc, #284]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	60ba      	str	r2, [r7, #8]
 8001608:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4c47      	ldr	r4, [pc, #284]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 8001610:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001614:	f7ff faca 	bl	8000bac <__aeabi_d2uiz>
 8001618:	4603      	mov	r3, r0
 800161a:	6363      	str	r3, [r4, #52]	@ 0x34
//		TIM3->CCR2 = 0;
		TIM3->CCR3 = -RightMotorSpeed;
 800161c:	4b41      	ldr	r3, [pc, #260]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	603a      	str	r2, [r7, #0]
 8001624:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4c40      	ldr	r4, [pc, #256]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 800162c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001630:	f7ff fabc 	bl	8000bac <__aeabi_d2uiz>
 8001634:	4603      	mov	r3, r0
 8001636:	63e3      	str	r3, [r4, #60]	@ 0x3c
//		TIM3->CCR4 = 0;
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800163e:	483c      	ldr	r0, [pc, #240]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 8001640:	f002 f978 	bl	8003934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8001644:	2201      	movs	r2, #1
 8001646:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800164a:	4839      	ldr	r0, [pc, #228]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 800164c:	f002 f972 	bl	8003934 <HAL_GPIO_WritePin>
 8001650:	e0cf      	b.n	80017f2 <subscription_cmd_vel_callback+0x3d2>
	}
	else if (LeftMotorSpeed<=0 && LeftMotorSpeed>=-1000 && RightMotorSpeed>=0 && RightMotorSpeed<=1000)		//left
 8001652:	4b33      	ldr	r3, [pc, #204]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 8001654:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	f7ff fa5e 	bl	8000b20 <__aeabi_dcmple>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d064      	beq.n	8001734 <subscription_cmd_vel_callback+0x314>
 800166a:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 800166c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001670:	a327      	add	r3, pc, #156	@ (adr r3, 8001710 <subscription_cmd_vel_callback+0x2f0>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7ff fa5d 	bl	8000b34 <__aeabi_dcmpge>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d059      	beq.n	8001734 <subscription_cmd_vel_callback+0x314>
 8001680:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 8001682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	f7ff fa51 	bl	8000b34 <__aeabi_dcmpge>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d04d      	beq.n	8001734 <subscription_cmd_vel_callback+0x314>
 8001698:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 800169a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <subscription_cmd_vel_callback+0x308>)
 80016a4:	f7ff fa3c 	bl	8000b20 <__aeabi_dcmple>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d042      	beq.n	8001734 <subscription_cmd_vel_callback+0x314>
//		TIM3->CCR4 = RightMotorSpeed;
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
		TIM3->CCR1 = -LeftMotorSpeed;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <subscription_cmd_vel_callback+0x300>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	4692      	mov	sl, r2
 80016b6:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80016ba:	4c1c      	ldr	r4, [pc, #112]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 80016bc:	4650      	mov	r0, sl
 80016be:	4659      	mov	r1, fp
 80016c0:	f7ff fa74 	bl	8000bac <__aeabi_d2uiz>
 80016c4:	4603      	mov	r3, r0
 80016c6:	6363      	str	r3, [r4, #52]	@ 0x34
//		TIM3->CCR2 = 0;
		TIM3->CCR3 = RightMotorSpeed;
 80016c8:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <subscription_cmd_vel_callback+0x304>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	4c17      	ldr	r4, [pc, #92]	@ (800172c <subscription_cmd_vel_callback+0x30c>)
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f7ff fa6a 	bl	8000bac <__aeabi_d2uiz>
 80016d8:	4603      	mov	r3, r0
 80016da:	63e3      	str	r3, [r4, #60]	@ 0x3c
//		TIM3->CCR4 = 0;
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016e2:	4813      	ldr	r0, [pc, #76]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 80016e4:	f002 f926 	bl	8003934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016ee:	4810      	ldr	r0, [pc, #64]	@ (8001730 <subscription_cmd_vel_callback+0x310>)
 80016f0:	f002 f920 	bl	8003934 <HAL_GPIO_WritePin>
 80016f4:	e07d      	b.n	80017f2 <subscription_cmd_vel_callback+0x3d2>
 80016f6:	bf00      	nop
 80016f8:	cccccccd 	.word	0xcccccccd
 80016fc:	3fcccccc 	.word	0x3fcccccc
 8001700:	1eb851ec 	.word	0x1eb851ec
 8001704:	3fb1eb85 	.word	0x3fb1eb85
 8001708:	f765fd8b 	.word	0xf765fd8b
 800170c:	401921e4 	.word	0x401921e4
 8001710:	00000000 	.word	0x00000000
 8001714:	c08f4000 	.word	0xc08f4000
 8001718:	20004198 	.word	0x20004198
 800171c:	200041a0 	.word	0x200041a0
 8001720:	200041a8 	.word	0x200041a8
 8001724:	200041b0 	.word	0x200041b0
 8001728:	408f4000 	.word	0x408f4000
 800172c:	40000400 	.word	0x40000400
 8001730:	40020c00 	.word	0x40020c00
	}
	else if (LeftMotorSpeed>=0 && LeftMotorSpeed<=1000 && RightMotorSpeed<=0 && RightMotorSpeed>=-1000)		//right
 8001734:	4b34      	ldr	r3, [pc, #208]	@ (8001808 <subscription_cmd_vel_callback+0x3e8>)
 8001736:	e9d3 0100 	ldrd	r0, r1, [r3]
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	f7ff f9f7 	bl	8000b34 <__aeabi_dcmpge>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d045      	beq.n	80017d8 <subscription_cmd_vel_callback+0x3b8>
 800174c:	4b2e      	ldr	r3, [pc, #184]	@ (8001808 <subscription_cmd_vel_callback+0x3e8>)
 800174e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <subscription_cmd_vel_callback+0x3ec>)
 8001758:	f7ff f9e2 	bl	8000b20 <__aeabi_dcmple>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d03a      	beq.n	80017d8 <subscription_cmd_vel_callback+0x3b8>
 8001762:	4b2b      	ldr	r3, [pc, #172]	@ (8001810 <subscription_cmd_vel_callback+0x3f0>)
 8001764:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	f7ff f9d6 	bl	8000b20 <__aeabi_dcmple>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d02e      	beq.n	80017d8 <subscription_cmd_vel_callback+0x3b8>
 800177a:	4b25      	ldr	r3, [pc, #148]	@ (8001810 <subscription_cmd_vel_callback+0x3f0>)
 800177c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001780:	a31f      	add	r3, pc, #124	@ (adr r3, 8001800 <subscription_cmd_vel_callback+0x3e0>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7ff f9d5 	bl	8000b34 <__aeabi_dcmpge>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d023      	beq.n	80017d8 <subscription_cmd_vel_callback+0x3b8>
//		TIM3->CCR4 = 0;
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
		TIM3->CCR1 = LeftMotorSpeed;
 8001790:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <subscription_cmd_vel_callback+0x3e8>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	4c1f      	ldr	r4, [pc, #124]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff fa06 	bl	8000bac <__aeabi_d2uiz>
 80017a0:	4603      	mov	r3, r0
 80017a2:	6363      	str	r3, [r4, #52]	@ 0x34
//		TIM3->CCR2 = 0;
		TIM3->CCR3 = -RightMotorSpeed;
 80017a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <subscription_cmd_vel_callback+0x3f0>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017aa:	4690      	mov	r8, r2
 80017ac:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80017b0:	4c18      	ldr	r4, [pc, #96]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 80017b2:	4640      	mov	r0, r8
 80017b4:	4649      	mov	r1, r9
 80017b6:	f7ff f9f9 	bl	8000bac <__aeabi_d2uiz>
 80017ba:	4603      	mov	r3, r0
 80017bc:	63e3      	str	r3, [r4, #60]	@ 0x3c
//		TIM3->CCR4 = 0;
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 80017be:	2201      	movs	r2, #1
 80017c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017c4:	4814      	ldr	r0, [pc, #80]	@ (8001818 <subscription_cmd_vel_callback+0x3f8>)
 80017c6:	f002 f8b5 	bl	8003934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80017ca:	2201      	movs	r2, #1
 80017cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017d0:	4811      	ldr	r0, [pc, #68]	@ (8001818 <subscription_cmd_vel_callback+0x3f8>)
 80017d2:	f002 f8af 	bl	8003934 <HAL_GPIO_WritePin>
 80017d6:	e00c      	b.n	80017f2 <subscription_cmd_vel_callback+0x3d2>
	}
	else
	{
		TIM3->CCR1 = 0;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = 0;
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = 0;
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = 0;
 80017ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <subscription_cmd_vel_callback+0x3f4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	641a      	str	r2, [r3, #64]	@ 0x40
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
	}
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3720      	adds	r7, #32
 80017f6:	46bd      	mov	sp, r7
 80017f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017fc:	f3af 8000 	nop.w
 8001800:	00000000 	.word	0x00000000
 8001804:	c08f4000 	.word	0xc08f4000
 8001808:	200041a8 	.word	0x200041a8
 800180c:	408f4000 	.word	0x408f4000
 8001810:	200041b0 	.word	0x200041b0
 8001814:	40000400 	.word	0x40000400
 8001818:	40020c00 	.word	0x40020c00

0800181c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)					//PA0 LeftWheelEncoderChannelA  PE11 LeftWheelEncoderChannelB
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d11b      	bne.n	8001864 <HAL_GPIO_EXTI_Callback+0x48>
	{
//		LeftWheelEncoder++;
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == 1) LeftWheelEncoder++;
 800182c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001830:	481d      	ldr	r0, [pc, #116]	@ (80018a8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001832:	f002 f867 	bl	8003904 <HAL_GPIO_ReadPin>
 8001836:	4603      	mov	r3, r0
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_GPIO_EXTI_Callback+0x2c>
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_GPIO_EXTI_Callback+0x90>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	4a1a      	ldr	r2, [pc, #104]	@ (80018ac <HAL_GPIO_EXTI_Callback+0x90>)
 8001844:	6013      	str	r3, [r2, #0]
	{
//		RightWheelEncoder++;
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 0) RightWheelEncoder++;
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 1) RightWheelEncoder--;
	}
}
 8001846:	e02b      	b.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == 0) LeftWheelEncoder--;
 8001848:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800184c:	4816      	ldr	r0, [pc, #88]	@ (80018a8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800184e:	f002 f859 	bl	8003904 <HAL_GPIO_ReadPin>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d123      	bne.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_GPIO_EXTI_Callback+0x90>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3b01      	subs	r3, #1
 800185e:	4a13      	ldr	r2, [pc, #76]	@ (80018ac <HAL_GPIO_EXTI_Callback+0x90>)
 8001860:	6013      	str	r3, [r2, #0]
}
 8001862:	e01d      	b.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
	else if (GPIO_Pin == GPIO_PIN_1)					//PA1 RightWheelEncoderChannelA  PE12 RightWheelEncoderChannelB
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d11a      	bne.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 0) RightWheelEncoder++;
 800186a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800186e:	480e      	ldr	r0, [pc, #56]	@ (80018a8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001870:	f002 f848 	bl	8003904 <HAL_GPIO_ReadPin>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d105      	bne.n	8001886 <HAL_GPIO_EXTI_Callback+0x6a>
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x94>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	4a0b      	ldr	r2, [pc, #44]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	e00c      	b.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 1) RightWheelEncoder--;
 8001886:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800188a:	4807      	ldr	r0, [pc, #28]	@ (80018a8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800188c:	f002 f83a 	bl	8003904 <HAL_GPIO_ReadPin>
 8001890:	4603      	mov	r3, r0
 8001892:	2b01      	cmp	r3, #1
 8001894:	d104      	bne.n	80018a0 <HAL_GPIO_EXTI_Callback+0x84>
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3b01      	subs	r3, #1
 800189c:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x94>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40021000 	.word	0x40021000
 80018ac:	2000418c 	.word	0x2000418c
 80018b0:	20004190 	.word	0x20004190

080018b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b8:	f001 f91a 	bl	8002af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018bc:	f000 f850 	bl	8001960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c0:	f000 f9ce 	bl	8001c60 <MX_GPIO_Init>
  MX_DMA_Init();
 80018c4:	f000 f9a4 	bl	8001c10 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018c8:	f000 f978 	bl	8001bbc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80018cc:	f000 f8de 	bl	8001a8c <MX_TIM3_Init>
  MX_I2C2_Init();
 80018d0:	f000 f8ae 	bl	8001a30 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  mpu_init(&mpu,&hi2c2);
 80018d4:	4918      	ldr	r1, [pc, #96]	@ (8001938 <main+0x84>)
 80018d6:	4819      	ldr	r0, [pc, #100]	@ (800193c <main+0x88>)
 80018d8:	f000 fce9 	bl	80022ae <mpu_init>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80018dc:	2100      	movs	r1, #0
 80018de:	4818      	ldr	r0, [pc, #96]	@ (8001940 <main+0x8c>)
 80018e0:	f003 fdbe 	bl	8005460 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80018e4:	2104      	movs	r1, #4
 80018e6:	4816      	ldr	r0, [pc, #88]	@ (8001940 <main+0x8c>)
 80018e8:	f003 fdba 	bl	8005460 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80018ec:	2108      	movs	r1, #8
 80018ee:	4814      	ldr	r0, [pc, #80]	@ (8001940 <main+0x8c>)
 80018f0:	f003 fdb6 	bl	8005460 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80018f4:	210c      	movs	r1, #12
 80018f6:	4812      	ldr	r0, [pc, #72]	@ (8001940 <main+0x8c>)
 80018f8:	f003 fdb2 	bl	8005460 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018fc:	f005 fdc6 	bl	800748c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  imuToUros = osMessageQueueNew(5,sizeof(geometry_msgs__msg__Twist),&imuToUrosAttr);
 8001900:	4a10      	ldr	r2, [pc, #64]	@ (8001944 <main+0x90>)
 8001902:	2130      	movs	r1, #48	@ 0x30
 8001904:	2005      	movs	r0, #5
 8001906:	f005 feb8 	bl	800767a <osMessageQueueNew>
 800190a:	4603      	mov	r3, r0
 800190c:	4a0e      	ldr	r2, [pc, #56]	@ (8001948 <main+0x94>)
 800190e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001910:	4a0e      	ldr	r2, [pc, #56]	@ (800194c <main+0x98>)
 8001912:	2100      	movs	r1, #0
 8001914:	480e      	ldr	r0, [pc, #56]	@ (8001950 <main+0x9c>)
 8001916:	f005 fe03 	bl	8007520 <osThreadNew>
 800191a:	4603      	mov	r3, r0
 800191c:	4a0d      	ldr	r2, [pc, #52]	@ (8001954 <main+0xa0>)
 800191e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  imuTaskHandle = osThreadNew(StartDefaultTask, &mpu, &imuTaskAttributes);
 8001920:	4a0d      	ldr	r2, [pc, #52]	@ (8001958 <main+0xa4>)
 8001922:	4906      	ldr	r1, [pc, #24]	@ (800193c <main+0x88>)
 8001924:	480a      	ldr	r0, [pc, #40]	@ (8001950 <main+0x9c>)
 8001926:	f005 fdfb 	bl	8007520 <osThreadNew>
 800192a:	4603      	mov	r3, r0
 800192c:	4a0b      	ldr	r2, [pc, #44]	@ (800195c <main+0xa8>)
 800192e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001930:	f005 fdd0 	bl	80074d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <main+0x80>
 8001938:	20003eec 	.word	0x20003eec
 800193c:	200041b8 	.word	0x200041b8
 8001940:	20003f40 	.word	0x20003f40
 8001944:	08018860 	.word	0x08018860
 8001948:	20004188 	.word	0x20004188
 800194c:	08018818 	.word	0x08018818
 8001950:	08001dd1 	.word	0x08001dd1
 8001954:	20004090 	.word	0x20004090
 8001958:	0801883c 	.word	0x0801883c
 800195c:	20004094 	.word	0x20004094

08001960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b094      	sub	sp, #80	@ 0x50
 8001964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001966:	f107 0320 	add.w	r3, r7, #32
 800196a:	2230      	movs	r2, #48	@ 0x30
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f015 ff3e 	bl	80177f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	4b27      	ldr	r3, [pc, #156]	@ (8001a28 <SystemClock_Config+0xc8>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198c:	4a26      	ldr	r2, [pc, #152]	@ (8001a28 <SystemClock_Config+0xc8>)
 800198e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001992:	6413      	str	r3, [r2, #64]	@ 0x40
 8001994:	4b24      	ldr	r3, [pc, #144]	@ (8001a28 <SystemClock_Config+0xc8>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a0:	2300      	movs	r3, #0
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <SystemClock_Config+0xcc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a20      	ldr	r2, [pc, #128]	@ (8001a2c <SystemClock_Config+0xcc>)
 80019aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <SystemClock_Config+0xcc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019bc:	2301      	movs	r3, #1
 80019be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c6:	2302      	movs	r3, #2
 80019c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019d0:	2304      	movs	r3, #4
 80019d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80019d4:	23c0      	movs	r3, #192	@ 0xc0
 80019d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019d8:	2304      	movs	r3, #4
 80019da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80019dc:	2308      	movs	r3, #8
 80019de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e0:	f107 0320 	add.w	r3, r7, #32
 80019e4:	4618      	mov	r0, r3
 80019e6:	f002 fffb 	bl	80049e0 <HAL_RCC_OscConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019f0:	f000 faf4 	bl	8001fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f4:	230f      	movs	r3, #15
 80019f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f8:	2302      	movs	r3, #2
 80019fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	2103      	movs	r1, #3
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 fa5d 	bl	8004ed0 <HAL_RCC_ClockConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a1c:	f000 fade 	bl	8001fdc <Error_Handler>
  }
}
 8001a20:	bf00      	nop
 8001a22:	3750      	adds	r7, #80	@ 0x50
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40007000 	.word	0x40007000

08001a30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a36:	4a13      	ldr	r2, [pc, #76]	@ (8001a84 <MX_I2C2_Init+0x54>)
 8001a38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a3c:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <MX_I2C2_Init+0x58>)
 8001a3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a6e:	f001 ff93 	bl	8003998 <HAL_I2C_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a78:	f000 fab0 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20003eec 	.word	0x20003eec
 8001a84:	40005800 	.word	0x40005800
 8001a88:	000186a0 	.word	0x000186a0

08001a8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08e      	sub	sp, #56	@ 0x38
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa0:	f107 0320 	add.w	r3, r7, #32
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
 8001ab8:	615a      	str	r2, [r3, #20]
 8001aba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001abc:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb4 <MX_TIM3_Init+0x128>)
 8001abe:	4a3e      	ldr	r2, [pc, #248]	@ (8001bb8 <MX_TIM3_Init+0x12c>)
 8001ac0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001ac2:	4b3c      	ldr	r3, [pc, #240]	@ (8001bb4 <MX_TIM3_Init+0x128>)
 8001ac4:	2209      	movs	r2, #9
 8001ac6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb4 <MX_TIM3_Init+0x128>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001ace:	4b39      	ldr	r3, [pc, #228]	@ (8001bb4 <MX_TIM3_Init+0x128>)
 8001ad0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ad4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad6:	4b37      	ldr	r3, [pc, #220]	@ (8001bb4 <MX_TIM3_Init+0x128>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001adc:	4b35      	ldr	r3, [pc, #212]	@ (8001bb4 <MX_TIM3_Init+0x128>)
 8001ade:	2280      	movs	r2, #128	@ 0x80
 8001ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ae2:	4834      	ldr	r0, [pc, #208]	@ (8001bb4 <MX_TIM3_Init+0x128>)
 8001ae4:	f003 fc14 	bl	8005310 <HAL_TIM_Base_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001aee:	f000 fa75 	bl	8001fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001af8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001afc:	4619      	mov	r1, r3
 8001afe:	482d      	ldr	r0, [pc, #180]	@ (8001bb4 <MX_TIM3_Init+0x128>)
 8001b00:	f003 fe20 	bl	8005744 <HAL_TIM_ConfigClockSource>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b0a:	f000 fa67 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b0e:	4829      	ldr	r0, [pc, #164]	@ (8001bb4 <MX_TIM3_Init+0x128>)
 8001b10:	f003 fc4d 	bl	80053ae <HAL_TIM_PWM_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b1a:	f000 fa5f 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b26:	f107 0320 	add.w	r3, r7, #32
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4821      	ldr	r0, [pc, #132]	@ (8001bb4 <MX_TIM3_Init+0x128>)
 8001b2e:	f004 f9a9 	bl	8005e84 <HAL_TIMEx_MasterConfigSynchronization>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b38:	f000 fa50 	bl	8001fdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b3c:	2360      	movs	r3, #96	@ 0x60
 8001b3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4619      	mov	r1, r3
 8001b52:	4818      	ldr	r0, [pc, #96]	@ (8001bb4 <MX_TIM3_Init+0x128>)
 8001b54:	f003 fd34 	bl	80055c0 <HAL_TIM_PWM_ConfigChannel>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b5e:	f000 fa3d 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2204      	movs	r2, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4812      	ldr	r0, [pc, #72]	@ (8001bb4 <MX_TIM3_Init+0x128>)
 8001b6a:	f003 fd29 	bl	80055c0 <HAL_TIM_PWM_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001b74:	f000 fa32 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2208      	movs	r2, #8
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480d      	ldr	r0, [pc, #52]	@ (8001bb4 <MX_TIM3_Init+0x128>)
 8001b80:	f003 fd1e 	bl	80055c0 <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001b8a:	f000 fa27 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	220c      	movs	r2, #12
 8001b92:	4619      	mov	r1, r3
 8001b94:	4807      	ldr	r0, [pc, #28]	@ (8001bb4 <MX_TIM3_Init+0x128>)
 8001b96:	f003 fd13 	bl	80055c0 <HAL_TIM_PWM_ConfigChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001ba0:	f000 fa1c 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ba4:	4803      	ldr	r0, [pc, #12]	@ (8001bb4 <MX_TIM3_Init+0x128>)
 8001ba6:	f000 fc8d 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 8001baa:	bf00      	nop
 8001bac:	3738      	adds	r7, #56	@ 0x38
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20003f40 	.word	0x20003f40
 8001bb8:	40000400 	.word	0x40000400

08001bbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	@ (8001c0c <MX_USART2_UART_Init+0x50>)
 8001bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bc6:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bf2:	4805      	ldr	r0, [pc, #20]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	f004 f9b4 	bl	8005f60 <HAL_UART_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bfe:	f000 f9ed 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20003f88 	.word	0x20003f88
 8001c0c:	40004400 	.word	0x40004400

08001c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <MX_DMA_Init+0x4c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c5c <MX_DMA_Init+0x4c>)
 8001c20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <MX_DMA_Init+0x4c>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2105      	movs	r1, #5
 8001c36:	2010      	movs	r0, #16
 8001c38:	f001 f8a7 	bl	8002d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001c3c:	2010      	movs	r0, #16
 8001c3e:	f001 f8c0 	bl	8002dc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2105      	movs	r1, #5
 8001c46:	2011      	movs	r0, #17
 8001c48:	f001 f89f 	bl	8002d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001c4c:	2011      	movs	r0, #17
 8001c4e:	f001 f8b8 	bl	8002dc2 <HAL_NVIC_EnableIRQ>

}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800

08001c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	@ 0x30
 8001c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	4b51      	ldr	r3, [pc, #324]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	4a50      	ldr	r2, [pc, #320]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c86:	4b4e      	ldr	r3, [pc, #312]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	4b4a      	ldr	r3, [pc, #296]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	4a49      	ldr	r2, [pc, #292]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001c9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca2:	4b47      	ldr	r3, [pc, #284]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	4b43      	ldr	r3, [pc, #268]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a42      	ldr	r2, [pc, #264]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b40      	ldr	r3, [pc, #256]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b3c      	ldr	r3, [pc, #240]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a3b      	ldr	r2, [pc, #236]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b39      	ldr	r3, [pc, #228]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	4b35      	ldr	r3, [pc, #212]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a34      	ldr	r2, [pc, #208]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001cf0:	f043 0310 	orr.w	r3, r3, #16
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b32      	ldr	r3, [pc, #200]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a2d      	ldr	r2, [pc, #180]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001d0c:	f043 0308 	orr.w	r3, r3, #8
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001d24:	4827      	ldr	r0, [pc, #156]	@ (8001dc4 <MX_GPIO_Init+0x164>)
 8001d26:	f001 fe05 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4822      	ldr	r0, [pc, #136]	@ (8001dc8 <MX_GPIO_Init+0x168>)
 8001d40:	f001 fc5c 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d44:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	4619      	mov	r1, r3
 8001d58:	481c      	ldr	r0, [pc, #112]	@ (8001dcc <MX_GPIO_Init+0x16c>)
 8001d5a:	f001 fc4f 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d5e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d6c:	f107 031c 	add.w	r3, r7, #28
 8001d70:	4619      	mov	r1, r3
 8001d72:	4814      	ldr	r0, [pc, #80]	@ (8001dc4 <MX_GPIO_Init+0x164>)
 8001d74:	f001 fc42 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d78:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <MX_GPIO_Init+0x164>)
 8001d92:	f001 fc33 	bl	80035fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2105      	movs	r1, #5
 8001d9a:	2006      	movs	r0, #6
 8001d9c:	f000 fff5 	bl	8002d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001da0:	2006      	movs	r0, #6
 8001da2:	f001 f80e 	bl	8002dc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2105      	movs	r1, #5
 8001daa:	2007      	movs	r0, #7
 8001dac:	f000 ffed 	bl	8002d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001db0:	2007      	movs	r0, #7
 8001db2:	f001 f806 	bl	8002dc2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001db6:	bf00      	nop
 8001db8:	3730      	adds	r7, #48	@ 0x30
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020c00 	.word	0x40020c00
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001dd0:	b5b0      	push	{r4, r5, r7, lr}
 8001dd2:	b0e6      	sub	sp, #408	@ 0x198
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001dda:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001dde:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	  // micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8001de0:	4b69      	ldr	r3, [pc, #420]	@ (8001f88 <StartDefaultTask+0x1b8>)
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	4b69      	ldr	r3, [pc, #420]	@ (8001f8c <StartDefaultTask+0x1bc>)
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	4b69      	ldr	r3, [pc, #420]	@ (8001f90 <StartDefaultTask+0x1c0>)
 8001dea:	4a6a      	ldr	r2, [pc, #424]	@ (8001f94 <StartDefaultTask+0x1c4>)
 8001dec:	496a      	ldr	r1, [pc, #424]	@ (8001f98 <StartDefaultTask+0x1c8>)
 8001dee:	2001      	movs	r0, #1
 8001df0:	f00a fe8e 	bl	800cb10 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001df4:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f00a fdbb 	bl	800c974 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001dfe:	4b67      	ldr	r3, [pc, #412]	@ (8001f9c <StartDefaultTask+0x1cc>)
 8001e00:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001e04:	4b66      	ldr	r3, [pc, #408]	@ (8001fa0 <StartDefaultTask+0x1d0>)
 8001e06:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001e0a:	4b66      	ldr	r3, [pc, #408]	@ (8001fa4 <StartDefaultTask+0x1d4>)
 8001e0c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001e10:	4b65      	ldr	r3, [pc, #404]	@ (8001fa8 <StartDefaultTask+0x1d8>)
 8001e12:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001e16:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f00a fdb8 	bl	800c990 <rcutils_set_default_allocator>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f083 0301 	eor.w	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d004      	beq.n	8001e36 <StartDefaultTask+0x66>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001e2c:	f240 219a 	movw	r1, #666	@ 0x29a
 8001e30:	485e      	ldr	r0, [pc, #376]	@ (8001fac <StartDefaultTask+0x1dc>)
 8001e32:	f015 fbf1 	bl	8017618 <iprintf>
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  geometry_msgs__msg__Twist imu;
     rcl_publisher_t imu_pub;

	  allocator = rcl_get_default_allocator();
 8001e36:	463b      	mov	r3, r7
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f00a fdc7 	bl	800c9cc <rcutils_get_default_allocator>
 8001e3e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e42:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e46:	f107 04e8 	add.w	r4, r7, #232	@ 0xe8
 8001e4a:	461d      	mov	r5, r3
 8001e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e50:	682b      	ldr	r3, [r5, #0]
 8001e52:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8001e54:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001e58:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	f00a fc92 	bl	800c788 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "stm32_microros", "", &support);
 8001e64:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001e68:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8001e6c:	4a50      	ldr	r2, [pc, #320]	@ (8001fb0 <StartDefaultTask+0x1e0>)
 8001e6e:	4951      	ldr	r1, [pc, #324]	@ (8001fb4 <StartDefaultTask+0x1e4>)
 8001e70:	f00a fcd4 	bl	800c81c <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8001e74:	f00b fba6 	bl	800d5c4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001e7e:	f507 70b8 	add.w	r0, r7, #368	@ 0x170
 8001e82:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb8 <StartDefaultTask+0x1e8>)
 8001e84:	f00a fd06 	bl	800c894 <rclc_publisher_init_default>
	    &publisher1,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int16),
	    "lwheel");

	  rclc_publisher_init_default(
 8001e88:	f00b fb9c 	bl	800d5c4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001e92:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8001e96:	4b49      	ldr	r3, [pc, #292]	@ (8001fbc <StartDefaultTask+0x1ec>)
 8001e98:	f00a fcfc 	bl	800c894 <rclc_publisher_init_default>
	  	    &publisher2,
	  	    &node,
	  	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int16),
	  	    "rwheel");
	  rclc_publisher_init_default(
 8001e9c:	f008 fa2c 	bl	800a2f8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001ea6:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8001eaa:	4b45      	ldr	r3, [pc, #276]	@ (8001fc0 <StartDefaultTask+0x1f0>)
 8001eac:	f00a fcf2 	bl	800c894 <rclc_publisher_init_default>
	  		ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	  		"imu_raw");

	  // create subscriber

	  	  rclc_subscription_init_default(
 8001eb0:	f008 fa22 	bl	800a2f8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001eba:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8001ebe:	4b41      	ldr	r3, [pc, #260]	@ (8001fc4 <StartDefaultTask+0x1f4>)
 8001ec0:	f00a fd1c 	bl	800c8fc <rclc_subscription_init_default>
	  	     &node,
	  	     ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	  	     "cmd_vel");

	  	// create executor
	  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001ec4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001ec8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f00a f987 	bl	800c1e0 <rclc_executor_get_zero_initialized_executor>
	  	rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001ed2:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001ed6:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8001eda:	f107 0020 	add.w	r0, r7, #32
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f00a f98a 	bl	800c1f8 <rclc_executor_init>
	  	rclc_executor_add_subscription(&executor, &subscriber_cmd_vel, &sub_cmd_vel_msg, &subscription_cmd_vel_callback, ON_NEW_DATA);
 8001ee4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001ee8:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8001eec:	f107 0020 	add.w	r0, r7, #32
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	4b34      	ldr	r3, [pc, #208]	@ (8001fc8 <StartDefaultTask+0x1f8>)
 8001ef6:	f00a f9ef 	bl	800c2d8 <rclc_executor_add_subscription>

	  for(;;)
	  {
		msg1.data = LeftWheelEncoder;
 8001efa:	4b34      	ldr	r3, [pc, #208]	@ (8001fcc <StartDefaultTask+0x1fc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	f8a7 3164 	strh.w	r3, [r7, #356]	@ 0x164
		msg2.data = RightWheelEncoder;
 8001f04:	4b32      	ldr	r3, [pc, #200]	@ (8001fd0 <StartDefaultTask+0x200>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	f8a7 3160 	strh.w	r3, [r7, #352]	@ 0x160

		osMessageQueueGet(imuToUros, &imu, NULL, 0U);
 8001f0e:	4b31      	ldr	r3, [pc, #196]	@ (8001fd4 <StartDefaultTask+0x204>)
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001f16:	2300      	movs	r3, #0
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f005 fc21 	bl	8007760 <osMessageQueueGet>


	    rcl_ret_t ret1 = rcl_publish(&publisher1, &msg1, NULL);
 8001f1e:	f507 71b2 	add.w	r1, r7, #356	@ 0x164
 8001f22:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001f26:	2200      	movs	r2, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f009 fdcb 	bl	800bac4 <rcl_publish>
 8001f2e:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c
	    rcl_ret_t ret2 = rcl_publish(&publisher2, &msg2, NULL);
 8001f32:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001f36:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f009 fdc1 	bl	800bac4 <rcl_publish>
 8001f42:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188

	    rcl_publish(&imu_pub, &imu, NULL);
 8001f46:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001f4a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f009 fdb7 	bl	800bac4 <rcl_publish>

	    rclc_executor_spin_some(&executor, 1000);    	// waits for 1000ns for ros data, theres no data it continues, if there is data then it executes subscription callback
 8001f56:	f107 0120 	add.w	r1, r7, #32
 8001f5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	4608      	mov	r0, r1
 8001f64:	f00a fbd8 	bl	800c718 <rclc_executor_spin_some>



	    if ((ret1 | ret2) != RCL_RET_OK)
 8001f68:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8001f6c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001f70:	4313      	orrs	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d004      	beq.n	8001f80 <StartDefaultTask+0x1b0>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 8001f76:	f240 21e5 	movw	r1, #741	@ 0x2e5
 8001f7a:	4817      	ldr	r0, [pc, #92]	@ (8001fd8 <StartDefaultTask+0x208>)
 8001f7c:	f015 fb4c 	bl	8017618 <iprintf>
	    }
	    osDelay(10);
 8001f80:	200a      	movs	r0, #10
 8001f82:	f005 fb5f 	bl	8007644 <osDelay>
	  {
 8001f86:	e7b8      	b.n	8001efa <StartDefaultTask+0x12a>
 8001f88:	080029f5 	.word	0x080029f5
 8001f8c:	0800298d 	.word	0x0800298d
 8001f90:	0800296d 	.word	0x0800296d
 8001f94:	08002941 	.word	0x08002941
 8001f98:	20003f88 	.word	0x20003f88
 8001f9c:	08001fe9 	.word	0x08001fe9
 8001fa0:	0800202d 	.word	0x0800202d
 8001fa4:	08002065 	.word	0x08002065
 8001fa8:	080020d1 	.word	0x080020d1
 8001fac:	08018768 	.word	0x08018768
 8001fb0:	08018790 	.word	0x08018790
 8001fb4:	08018794 	.word	0x08018794
 8001fb8:	080187a4 	.word	0x080187a4
 8001fbc:	080187ac 	.word	0x080187ac
 8001fc0:	080187b4 	.word	0x080187b4
 8001fc4:	080187bc 	.word	0x080187bc
 8001fc8:	08001421 	.word	0x08001421
 8001fcc:	2000418c 	.word	0x2000418c
 8001fd0:	20004190 	.word	0x20004190
 8001fd4:	20004188 	.word	0x20004188
 8001fd8:	080187c4 	.word	0x080187c4

08001fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe0:	b672      	cpsid	i
}
 8001fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <Error_Handler+0x8>

08001fe8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <microros_allocate+0x3c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <microros_allocate+0x3c>)
 8002000:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002002:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <microros_allocate+0x40>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	461a      	mov	r2, r3
 800200e:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <microros_allocate+0x40>)
 8002010:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe ffb2 	bl	8000f7c <pvPortMallocMicroROS>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20004200 	.word	0x20004200
 8002028:	20004204 	.word	0x20004204

0800202c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00c      	beq.n	8002056 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff f8c1 	bl	80011c4 <getBlockSize>
 8002042:	4603      	mov	r3, r0
 8002044:	4a06      	ldr	r2, [pc, #24]	@ (8002060 <microros_deallocate+0x34>)
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	461a      	mov	r2, r3
 800204c:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <microros_deallocate+0x34>)
 800204e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff f85b 	bl	800110c <vPortFreeMicroROS>
  }
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20004204 	.word	0x20004204

08002064 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002070:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <microros_reallocate+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	4413      	add	r3, r2
 800207a:	461a      	mov	r2, r3
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <microros_reallocate+0x64>)
 800207e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002080:	4b12      	ldr	r3, [pc, #72]	@ (80020cc <microros_reallocate+0x68>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	4413      	add	r3, r2
 800208a:	461a      	mov	r2, r3
 800208c:	4b0f      	ldr	r3, [pc, #60]	@ (80020cc <microros_reallocate+0x68>)
 800208e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d104      	bne.n	80020a0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002096:	68b8      	ldr	r0, [r7, #8]
 8002098:	f7fe ff70 	bl	8000f7c <pvPortMallocMicroROS>
 800209c:	4603      	mov	r3, r0
 800209e:	e00e      	b.n	80020be <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f7ff f88f 	bl	80011c4 <getBlockSize>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4a08      	ldr	r2, [pc, #32]	@ (80020cc <microros_reallocate+0x68>)
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <microros_reallocate+0x68>)
 80020b2:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f7ff f8a2 	bl	8001200 <pvPortReallocMicroROS>
 80020bc:	4603      	mov	r3, r0
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20004200 	.word	0x20004200
 80020cc:	20004204 	.word	0x20004204

080020d0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002118 <microros_zero_allocate+0x48>)
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	4413      	add	r3, r2
 80020ea:	461a      	mov	r2, r3
 80020ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <microros_zero_allocate+0x48>)
 80020ee:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	fb02 f303 	mul.w	r3, r2, r3
 80020f8:	4a08      	ldr	r2, [pc, #32]	@ (800211c <microros_zero_allocate+0x4c>)
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	4413      	add	r3, r2
 80020fe:	461a      	mov	r2, r3
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <microros_zero_allocate+0x4c>)
 8002102:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f7ff f8a7 	bl	800125a <pvPortCallocMicroROS>
 800210c:	4603      	mov	r3, r0
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20004200 	.word	0x20004200
 800211c:	20004204 	.word	0x20004204

08002120 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002120:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002132:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002136:	a320      	add	r3, pc, #128	@ (adr r3, 80021b8 <UTILS_NanosecondsToTimespec+0x98>)
 8002138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213c:	f7fe fd56 	bl	8000bec <__aeabi_ldivmod>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800214a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800214e:	a31a      	add	r3, pc, #104	@ (adr r3, 80021b8 <UTILS_NanosecondsToTimespec+0x98>)
 8002150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002154:	f7fe fd4a 	bl	8000bec <__aeabi_ldivmod>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	da20      	bge.n	80021a6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a11      	ldr	r2, [pc, #68]	@ (80021b0 <UTILS_NanosecondsToTimespec+0x90>)
 800216a:	fb82 1203 	smull	r1, r2, r2, r3
 800216e:	1712      	asrs	r2, r2, #28
 8002170:	17db      	asrs	r3, r3, #31
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	3301      	adds	r3, #1
 8002176:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	6979      	ldr	r1, [r7, #20]
 8002180:	17c8      	asrs	r0, r1, #31
 8002182:	460c      	mov	r4, r1
 8002184:	4605      	mov	r5, r0
 8002186:	ebb2 0804 	subs.w	r8, r2, r4
 800218a:	eb63 0905 	sbc.w	r9, r3, r5
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	4906      	ldr	r1, [pc, #24]	@ (80021b4 <UTILS_NanosecondsToTimespec+0x94>)
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	441a      	add	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	609a      	str	r2, [r3, #8]
    }
}
 80021a6:	bf00      	nop
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021b0:	44b82fa1 	.word	0x44b82fa1
 80021b4:	3b9aca00 	.word	0x3b9aca00
 80021b8:	3b9aca00 	.word	0x3b9aca00
 80021bc:	00000000 	.word	0x00000000

080021c0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80021c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c4:	b08e      	sub	sp, #56	@ 0x38
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80021ca:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80021cc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80021d0:	2300      	movs	r3, #0
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80021e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021e6:	4618      	mov	r0, r3
 80021e8:	f006 fe86 	bl	8008ef8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80021ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ee:	17da      	asrs	r2, r3, #31
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	61fa      	str	r2, [r7, #28]
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	69b9      	ldr	r1, [r7, #24]
 80021fe:	000b      	movs	r3, r1
 8002200:	2200      	movs	r2, #0
 8002202:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002208:	2200      	movs	r2, #0
 800220a:	461c      	mov	r4, r3
 800220c:	4615      	mov	r5, r2
 800220e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002212:	1911      	adds	r1, r2, r4
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	416b      	adcs	r3, r5
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800221e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002222:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	f04f 0400 	mov.w	r4, #0
 800222e:	f04f 0500 	mov.w	r5, #0
 8002232:	015d      	lsls	r5, r3, #5
 8002234:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002238:	0154      	lsls	r4, r2, #5
 800223a:	4622      	mov	r2, r4
 800223c:	462b      	mov	r3, r5
 800223e:	ebb2 0800 	subs.w	r8, r2, r0
 8002242:	eb63 0901 	sbc.w	r9, r3, r1
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002252:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002256:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800225a:	4690      	mov	r8, r2
 800225c:	4699      	mov	r9, r3
 800225e:	eb18 0a00 	adds.w	sl, r8, r0
 8002262:	eb49 0b01 	adc.w	fp, r9, r1
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002272:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002276:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800227a:	ebb2 040a 	subs.w	r4, r2, sl
 800227e:	603c      	str	r4, [r7, #0]
 8002280:	eb63 030b 	sbc.w	r3, r3, fp
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800228a:	4623      	mov	r3, r4
 800228c:	181b      	adds	r3, r3, r0
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	462b      	mov	r3, r5
 8002292:	eb41 0303 	adc.w	r3, r1, r3
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	6a3a      	ldr	r2, [r7, #32]
 800229a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800229e:	f7ff ff3f 	bl	8002120 <UTILS_NanosecondsToTimespec>

    return 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	3738      	adds	r7, #56	@ 0x38
 80022a8:	46bd      	mov	sp, r7
 80022aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080022ae <mpu_init>:
 *      Author: bala
 */
#include "mpu.h"

void mpu_init(mpu_struct *mpu, I2C_HandleTypeDef *hi2c)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b088      	sub	sp, #32
 80022b2:	af04      	add	r7, sp, #16
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
	mpu->hi2c = hi2c;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	601a      	str	r2, [r3, #0]

	uint8_t tx_data;
	uint8_t rx_data;


	HAL_I2C_Mem_Read (hi2c, MPU6050_ADDR,WHO_AM_I_REG,1, &rx_data, 1, 1000);
 80022be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022c2:	9302      	str	r3, [sp, #8]
 80022c4:	2301      	movs	r3, #1
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	f107 030e 	add.w	r3, r7, #14
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2301      	movs	r3, #1
 80022d0:	2275      	movs	r2, #117	@ 0x75
 80022d2:	21d0      	movs	r1, #208	@ 0xd0
 80022d4:	6838      	ldr	r0, [r7, #0]
 80022d6:	f001 fd9d 	bl	8003e14 <HAL_I2C_Mem_Read>

	if (rx_data == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 80022da:	7bbb      	ldrb	r3, [r7, #14]
 80022dc:	2b68      	cmp	r3, #104	@ 0x68
 80022de:	d143      	bne.n	8002368 <mpu_init+0xba>
	{
		mpu->status = 1;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	711a      	strb	r2, [r3, #4]
		// power management register 0X6B we should write all 0's to wake the sensor up
		tx_data = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&tx_data, 1, 1000);
 80022ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ee:	9302      	str	r3, [sp, #8]
 80022f0:	2301      	movs	r3, #1
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	f107 030f 	add.w	r3, r7, #15
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	2301      	movs	r3, #1
 80022fc:	226b      	movs	r2, #107	@ 0x6b
 80022fe:	21d0      	movs	r1, #208	@ 0xd0
 8002300:	6838      	ldr	r0, [r7, #0]
 8002302:	f001 fc8d 	bl	8003c20 <HAL_I2C_Mem_Write>

		// Set tx_data RATE of 1KHz by writing SMPLRT_DIV register
		tx_data = 0x07;
 8002306:	2307      	movs	r3, #7
 8002308:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &tx_data, 1, 1000);
 800230a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800230e:	9302      	str	r3, [sp, #8]
 8002310:	2301      	movs	r3, #1
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	f107 030f 	add.w	r3, r7, #15
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	2301      	movs	r3, #1
 800231c:	2219      	movs	r2, #25
 800231e:	21d0      	movs	r1, #208	@ 0xd0
 8002320:	6838      	ldr	r0, [r7, #0]
 8002322:	f001 fc7d 	bl	8003c20 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 ->   2g
		tx_data = 0x00;
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &tx_data, 1, 1000);
 800232a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800232e:	9302      	str	r3, [sp, #8]
 8002330:	2301      	movs	r3, #1
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	f107 030f 	add.w	r3, r7, #15
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2301      	movs	r3, #1
 800233c:	221c      	movs	r2, #28
 800233e:	21d0      	movs	r1, #208	@ 0xd0
 8002340:	6838      	ldr	r0, [r7, #0]
 8002342:	f001 fc6d 	bl	8003c20 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->   250  /s
		tx_data = 0x00;
 8002346:	2300      	movs	r3, #0
 8002348:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &tx_data, 1, 1000);
 800234a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800234e:	9302      	str	r3, [sp, #8]
 8002350:	2301      	movs	r3, #1
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	f107 030f 	add.w	r3, r7, #15
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	221b      	movs	r2, #27
 800235e:	21d0      	movs	r1, #208	@ 0xd0
 8002360:	6838      	ldr	r0, [r7, #0]
 8002362:	f001 fc5d 	bl	8003c20 <HAL_I2C_Mem_Write>
	{
		mpu->status = 0;
	}


}
 8002366:	e002      	b.n	800236e <mpu_init+0xc0>
		mpu->status = 0;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	711a      	strb	r2, [r3, #4]
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <HAL_MspInit+0x54>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	4a11      	ldr	r2, [pc, #68]	@ (80023cc <HAL_MspInit+0x54>)
 8002388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800238c:	6453      	str	r3, [r2, #68]	@ 0x44
 800238e:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <HAL_MspInit+0x54>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <HAL_MspInit+0x54>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	4a0a      	ldr	r2, [pc, #40]	@ (80023cc <HAL_MspInit+0x54>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023aa:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <HAL_MspInit+0x54>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	210f      	movs	r1, #15
 80023ba:	f06f 0001 	mvn.w	r0, #1
 80023be:	f000 fce4 	bl	8002d8a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800

080023d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08a      	sub	sp, #40	@ 0x28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a21      	ldr	r2, [pc, #132]	@ (8002474 <HAL_I2C_MspInit+0xa4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d13c      	bne.n	800246c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	4b20      	ldr	r3, [pc, #128]	@ (8002478 <HAL_I2C_MspInit+0xa8>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002478 <HAL_I2C_MspInit+0xa8>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	6313      	str	r3, [r2, #48]	@ 0x30
 8002402:	4b1d      	ldr	r3, [pc, #116]	@ (8002478 <HAL_I2C_MspInit+0xa8>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800240e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002414:	2312      	movs	r3, #18
 8002416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241c:	2303      	movs	r3, #3
 800241e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002420:	2304      	movs	r3, #4
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4619      	mov	r1, r3
 800242a:	4814      	ldr	r0, [pc, #80]	@ (800247c <HAL_I2C_MspInit+0xac>)
 800242c:	f001 f8e6 	bl	80035fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002430:	2308      	movs	r3, #8
 8002432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002434:	2312      	movs	r3, #18
 8002436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243c:	2303      	movs	r3, #3
 800243e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002440:	2309      	movs	r3, #9
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	480c      	ldr	r0, [pc, #48]	@ (800247c <HAL_I2C_MspInit+0xac>)
 800244c:	f001 f8d6 	bl	80035fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <HAL_I2C_MspInit+0xa8>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	4a07      	ldr	r2, [pc, #28]	@ (8002478 <HAL_I2C_MspInit+0xa8>)
 800245a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800245e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002460:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_I2C_MspInit+0xa8>)
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800246c:	bf00      	nop
 800246e:	3728      	adds	r7, #40	@ 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40005800 	.word	0x40005800
 8002478:	40023800 	.word	0x40023800
 800247c:	40020400 	.word	0x40020400

08002480 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0b      	ldr	r2, [pc, #44]	@ (80024bc <HAL_TIM_Base_MspInit+0x3c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d10d      	bne.n	80024ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <HAL_TIM_Base_MspInit+0x40>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	4a09      	ldr	r2, [pc, #36]	@ (80024c0 <HAL_TIM_Base_MspInit+0x40>)
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a2:	4b07      	ldr	r3, [pc, #28]	@ (80024c0 <HAL_TIM_Base_MspInit+0x40>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40000400 	.word	0x40000400
 80024c0:	40023800 	.word	0x40023800

080024c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	@ 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a21      	ldr	r2, [pc, #132]	@ (8002568 <HAL_TIM_MspPostInit+0xa4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d13b      	bne.n	800255e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	4b20      	ldr	r3, [pc, #128]	@ (800256c <HAL_TIM_MspPostInit+0xa8>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	4a1f      	ldr	r2, [pc, #124]	@ (800256c <HAL_TIM_MspPostInit+0xa8>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f6:	4b1d      	ldr	r3, [pc, #116]	@ (800256c <HAL_TIM_MspPostInit+0xa8>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b19      	ldr	r3, [pc, #100]	@ (800256c <HAL_TIM_MspPostInit+0xa8>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	4a18      	ldr	r2, [pc, #96]	@ (800256c <HAL_TIM_MspPostInit+0xa8>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6313      	str	r3, [r2, #48]	@ 0x30
 8002512:	4b16      	ldr	r3, [pc, #88]	@ (800256c <HAL_TIM_MspPostInit+0xa8>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800251e:	23c0      	movs	r3, #192	@ 0xc0
 8002520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800252e:	2302      	movs	r3, #2
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	480d      	ldr	r0, [pc, #52]	@ (8002570 <HAL_TIM_MspPostInit+0xac>)
 800253a:	f001 f85f 	bl	80035fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800253e:	2303      	movs	r3, #3
 8002540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800254e:	2302      	movs	r3, #2
 8002550:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002552:	f107 0314 	add.w	r3, r7, #20
 8002556:	4619      	mov	r1, r3
 8002558:	4806      	ldr	r0, [pc, #24]	@ (8002574 <HAL_TIM_MspPostInit+0xb0>)
 800255a:	f001 f84f 	bl	80035fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800255e:	bf00      	nop
 8002560:	3728      	adds	r7, #40	@ 0x28
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40000400 	.word	0x40000400
 800256c:	40023800 	.word	0x40023800
 8002570:	40020000 	.word	0x40020000
 8002574:	40020400 	.word	0x40020400

08002578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	@ 0x28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a4d      	ldr	r2, [pc, #308]	@ (80026cc <HAL_UART_MspInit+0x154>)
 8002596:	4293      	cmp	r3, r2
 8002598:	f040 8093 	bne.w	80026c2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	4b4b      	ldr	r3, [pc, #300]	@ (80026d0 <HAL_UART_MspInit+0x158>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	4a4a      	ldr	r2, [pc, #296]	@ (80026d0 <HAL_UART_MspInit+0x158>)
 80025a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ac:	4b48      	ldr	r3, [pc, #288]	@ (80026d0 <HAL_UART_MspInit+0x158>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	4b44      	ldr	r3, [pc, #272]	@ (80026d0 <HAL_UART_MspInit+0x158>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c0:	4a43      	ldr	r2, [pc, #268]	@ (80026d0 <HAL_UART_MspInit+0x158>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c8:	4b41      	ldr	r3, [pc, #260]	@ (80026d0 <HAL_UART_MspInit+0x158>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025d4:	230c      	movs	r3, #12
 80025d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025e4:	2307      	movs	r3, #7
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4619      	mov	r1, r3
 80025ee:	4839      	ldr	r0, [pc, #228]	@ (80026d4 <HAL_UART_MspInit+0x15c>)
 80025f0:	f001 f804 	bl	80035fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80025f4:	4b38      	ldr	r3, [pc, #224]	@ (80026d8 <HAL_UART_MspInit+0x160>)
 80025f6:	4a39      	ldr	r2, [pc, #228]	@ (80026dc <HAL_UART_MspInit+0x164>)
 80025f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80025fa:	4b37      	ldr	r3, [pc, #220]	@ (80026d8 <HAL_UART_MspInit+0x160>)
 80025fc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002600:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002602:	4b35      	ldr	r3, [pc, #212]	@ (80026d8 <HAL_UART_MspInit+0x160>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002608:	4b33      	ldr	r3, [pc, #204]	@ (80026d8 <HAL_UART_MspInit+0x160>)
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800260e:	4b32      	ldr	r3, [pc, #200]	@ (80026d8 <HAL_UART_MspInit+0x160>)
 8002610:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002614:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002616:	4b30      	ldr	r3, [pc, #192]	@ (80026d8 <HAL_UART_MspInit+0x160>)
 8002618:	2200      	movs	r2, #0
 800261a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800261c:	4b2e      	ldr	r3, [pc, #184]	@ (80026d8 <HAL_UART_MspInit+0x160>)
 800261e:	2200      	movs	r2, #0
 8002620:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002622:	4b2d      	ldr	r3, [pc, #180]	@ (80026d8 <HAL_UART_MspInit+0x160>)
 8002624:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002628:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800262a:	4b2b      	ldr	r3, [pc, #172]	@ (80026d8 <HAL_UART_MspInit+0x160>)
 800262c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002630:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002632:	4b29      	ldr	r3, [pc, #164]	@ (80026d8 <HAL_UART_MspInit+0x160>)
 8002634:	2200      	movs	r2, #0
 8002636:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002638:	4827      	ldr	r0, [pc, #156]	@ (80026d8 <HAL_UART_MspInit+0x160>)
 800263a:	f000 fbdd 	bl	8002df8 <HAL_DMA_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002644:	f7ff fcca 	bl	8001fdc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a23      	ldr	r2, [pc, #140]	@ (80026d8 <HAL_UART_MspInit+0x160>)
 800264c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800264e:	4a22      	ldr	r2, [pc, #136]	@ (80026d8 <HAL_UART_MspInit+0x160>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002654:	4b22      	ldr	r3, [pc, #136]	@ (80026e0 <HAL_UART_MspInit+0x168>)
 8002656:	4a23      	ldr	r2, [pc, #140]	@ (80026e4 <HAL_UART_MspInit+0x16c>)
 8002658:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800265a:	4b21      	ldr	r3, [pc, #132]	@ (80026e0 <HAL_UART_MspInit+0x168>)
 800265c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002660:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002662:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <HAL_UART_MspInit+0x168>)
 8002664:	2240      	movs	r2, #64	@ 0x40
 8002666:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002668:	4b1d      	ldr	r3, [pc, #116]	@ (80026e0 <HAL_UART_MspInit+0x168>)
 800266a:	2200      	movs	r2, #0
 800266c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800266e:	4b1c      	ldr	r3, [pc, #112]	@ (80026e0 <HAL_UART_MspInit+0x168>)
 8002670:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002674:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002676:	4b1a      	ldr	r3, [pc, #104]	@ (80026e0 <HAL_UART_MspInit+0x168>)
 8002678:	2200      	movs	r2, #0
 800267a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800267c:	4b18      	ldr	r3, [pc, #96]	@ (80026e0 <HAL_UART_MspInit+0x168>)
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002682:	4b17      	ldr	r3, [pc, #92]	@ (80026e0 <HAL_UART_MspInit+0x168>)
 8002684:	2200      	movs	r2, #0
 8002686:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002688:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <HAL_UART_MspInit+0x168>)
 800268a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800268e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002690:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <HAL_UART_MspInit+0x168>)
 8002692:	2200      	movs	r2, #0
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002696:	4812      	ldr	r0, [pc, #72]	@ (80026e0 <HAL_UART_MspInit+0x168>)
 8002698:	f000 fbae 	bl	8002df8 <HAL_DMA_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80026a2:	f7ff fc9b 	bl	8001fdc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a0d      	ldr	r2, [pc, #52]	@ (80026e0 <HAL_UART_MspInit+0x168>)
 80026aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80026ac:	4a0c      	ldr	r2, [pc, #48]	@ (80026e0 <HAL_UART_MspInit+0x168>)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2105      	movs	r1, #5
 80026b6:	2026      	movs	r0, #38	@ 0x26
 80026b8:	f000 fb67 	bl	8002d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026bc:	2026      	movs	r0, #38	@ 0x26
 80026be:	f000 fb80 	bl	8002dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	@ 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40004400 	.word	0x40004400
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020000 	.word	0x40020000
 80026d8:	20003fd0 	.word	0x20003fd0
 80026dc:	40026088 	.word	0x40026088
 80026e0:	20004030 	.word	0x20004030
 80026e4:	400260a0 	.word	0x400260a0

080026e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <NMI_Handler+0x4>

080026f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <HardFault_Handler+0x4>

080026f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <MemManage_Handler+0x4>

08002700 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <BusFault_Handler+0x4>

08002708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <UsageFault_Handler+0x4>

08002710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002722:	f000 fa37 	bl	8002b94 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002726:	f006 fd6b 	bl	8009200 <xTaskGetSchedulerState>
 800272a:	4603      	mov	r3, r0
 800272c:	2b01      	cmp	r3, #1
 800272e:	d001      	beq.n	8002734 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002730:	f007 fb62 	bl	8009df8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}

08002738 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800273c:	2001      	movs	r0, #1
 800273e:	f001 f913 	bl	8003968 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}

08002746 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800274a:	2002      	movs	r0, #2
 800274c:	f001 f90c 	bl	8003968 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002758:	4802      	ldr	r0, [pc, #8]	@ (8002764 <DMA1_Stream5_IRQHandler+0x10>)
 800275a:	f000 fce5 	bl	8003128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20003fd0 	.word	0x20003fd0

08002768 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800276c:	4802      	ldr	r0, [pc, #8]	@ (8002778 <DMA1_Stream6_IRQHandler+0x10>)
 800276e:	f000 fcdb 	bl	8003128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20004030 	.word	0x20004030

0800277c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002780:	4802      	ldr	r0, [pc, #8]	@ (800278c <USART2_IRQHandler+0x10>)
 8002782:	f003 fd51 	bl	8006228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20003f88 	.word	0x20003f88

08002790 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return 1;
 8002794:	2301      	movs	r3, #1
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <_kill>:

int _kill(int pid, int sig)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027aa:	f015 f8b5 	bl	8017918 <__errno>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2216      	movs	r2, #22
 80027b2:	601a      	str	r2, [r3, #0]
  return -1;
 80027b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_exit>:

void _exit (int status)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ffe7 	bl	80027a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027d2:	bf00      	nop
 80027d4:	e7fd      	b.n	80027d2 <_exit+0x12>

080027d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	e00a      	b.n	80027fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027e8:	f3af 8000 	nop.w
 80027ec:	4601      	mov	r1, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	60ba      	str	r2, [r7, #8]
 80027f4:	b2ca      	uxtb	r2, r1
 80027f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	3301      	adds	r3, #1
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	429a      	cmp	r2, r3
 8002804:	dbf0      	blt.n	80027e8 <_read+0x12>
  }

  return len;
 8002806:	687b      	ldr	r3, [r7, #4]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	e009      	b.n	8002836 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	60ba      	str	r2, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3301      	adds	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	dbf1      	blt.n	8002822 <_write+0x12>
  }
  return len;
 800283e:	687b      	ldr	r3, [r7, #4]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_close>:

int _close(int file)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002870:	605a      	str	r2, [r3, #4]
  return 0;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <_isatty>:

int _isatty(int file)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002888:	2301      	movs	r3, #1
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b8:	4a14      	ldr	r2, [pc, #80]	@ (800290c <_sbrk+0x5c>)
 80028ba:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <_sbrk+0x60>)
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c4:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <_sbrk+0x64>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028cc:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <_sbrk+0x64>)
 80028ce:	4a12      	ldr	r2, [pc, #72]	@ (8002918 <_sbrk+0x68>)
 80028d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <_sbrk+0x64>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d207      	bcs.n	80028f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e0:	f015 f81a 	bl	8017918 <__errno>
 80028e4:	4603      	mov	r3, r0
 80028e6:	220c      	movs	r2, #12
 80028e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028ee:	e009      	b.n	8002904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f0:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <_sbrk+0x64>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028f6:	4b07      	ldr	r3, [pc, #28]	@ (8002914 <_sbrk+0x64>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	4a05      	ldr	r2, [pc, #20]	@ (8002914 <_sbrk+0x64>)
 8002900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002902:	68fb      	ldr	r3, [r7, #12]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20020000 	.word	0x20020000
 8002910:	00000400 	.word	0x00000400
 8002914:	2000420c 	.word	0x2000420c
 8002918:	2000e038 	.word	0x2000e038

0800291c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002920:	4b06      	ldr	r3, [pc, #24]	@ (800293c <SystemInit+0x20>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002926:	4a05      	ldr	r2, [pc, #20]	@ (800293c <SystemInit+0x20>)
 8002928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800292c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800294e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002950:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002954:	4904      	ldr	r1, [pc, #16]	@ (8002968 <cubemx_transport_open+0x28>)
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f003 fbc2 	bl	80060e0 <HAL_UART_Receive_DMA>
    return true;
 800295c:	2301      	movs	r3, #1
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20004210 	.word	0x20004210

0800296c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800297a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f003 fbd4 	bl	800612a <HAL_UART_DMAStop>
    return true;
 8002982:	2301      	movs	r3, #1
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80029a0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d11c      	bne.n	80029e8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	6978      	ldr	r0, [r7, #20]
 80029b8:	f003 fb22 	bl	8006000 <HAL_UART_Transmit_DMA>
 80029bc:	4603      	mov	r3, r0
 80029be:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80029c0:	e002      	b.n	80029c8 <cubemx_transport_write+0x3c>
            osDelay(1);
 80029c2:	2001      	movs	r0, #1
 80029c4:	f004 fe3e 	bl	8007644 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d105      	bne.n	80029da <cubemx_transport_write+0x4e>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	d1f3      	bne.n	80029c2 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80029da:	7cfb      	ldrb	r3, [r7, #19]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <cubemx_transport_write+0x58>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	e002      	b.n	80029ea <cubemx_transport_write+0x5e>
 80029e4:	2300      	movs	r3, #0
 80029e6:	e000      	b.n	80029ea <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80029e8:	2300      	movs	r3, #0
    }
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a08:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a0e:	b672      	cpsid	i
}
 8002a10:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002a90 <cubemx_transport_read+0x9c>)
 8002a20:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a22:	b662      	cpsie	i
}
 8002a24:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	f004 fe09 	bl	8007644 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002a32:	4b18      	ldr	r3, [pc, #96]	@ (8002a94 <cubemx_transport_read+0xa0>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	4b16      	ldr	r3, [pc, #88]	@ (8002a90 <cubemx_transport_read+0x9c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d103      	bne.n	8002a46 <cubemx_transport_read+0x52>
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	dbe3      	blt.n	8002a0e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002a4a:	e011      	b.n	8002a70 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002a4c:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <cubemx_transport_read+0xa0>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	440b      	add	r3, r1
 8002a56:	4910      	ldr	r1, [pc, #64]	@ (8002a98 <cubemx_transport_read+0xa4>)
 8002a58:	5c8a      	ldrb	r2, [r1, r2]
 8002a5a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a94 <cubemx_transport_read+0xa0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3301      	adds	r3, #1
 8002a62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a66:	4a0b      	ldr	r2, [pc, #44]	@ (8002a94 <cubemx_transport_read+0xa0>)
 8002a68:	6013      	str	r3, [r2, #0]
        wrote++;
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002a70:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <cubemx_transport_read+0xa0>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <cubemx_transport_read+0x9c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d003      	beq.n	8002a84 <cubemx_transport_read+0x90>
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d3e3      	bcc.n	8002a4c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002a84:	69bb      	ldr	r3, [r7, #24]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20004a14 	.word	0x20004a14
 8002a94:	20004a10 	.word	0x20004a10
 8002a98:	20004210 	.word	0x20004210

08002a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ad4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002aa0:	f7ff ff3c 	bl	800291c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aa4:	480c      	ldr	r0, [pc, #48]	@ (8002ad8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002aa6:	490d      	ldr	r1, [pc, #52]	@ (8002adc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aac:	e002      	b.n	8002ab4 <LoopCopyDataInit>

08002aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ab2:	3304      	adds	r3, #4

08002ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab8:	d3f9      	bcc.n	8002aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002abc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ae8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac0:	e001      	b.n	8002ac6 <LoopFillZerobss>

08002ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac4:	3204      	adds	r2, #4

08002ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac8:	d3fb      	bcc.n	8002ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aca:	f014 ff2b 	bl	8017924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ace:	f7fe fef1 	bl	80018b4 <main>
  bx  lr    
 8002ad2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ad4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002adc:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8002ae0:	0801974c 	.word	0x0801974c
  ldr r2, =_sbss
 8002ae4:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8002ae8:	2000e034 	.word	0x2000e034

08002aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aec:	e7fe      	b.n	8002aec <ADC_IRQHandler>
	...

08002af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <HAL_Init+0x40>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b30 <HAL_Init+0x40>)
 8002afa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b00:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <HAL_Init+0x40>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0a      	ldr	r2, [pc, #40]	@ (8002b30 <HAL_Init+0x40>)
 8002b06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b0c:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <HAL_Init+0x40>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a07      	ldr	r2, [pc, #28]	@ (8002b30 <HAL_Init+0x40>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b18:	2003      	movs	r0, #3
 8002b1a:	f000 f92b 	bl	8002d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b1e:	200f      	movs	r0, #15
 8002b20:	f000 f808 	bl	8002b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b24:	f7ff fc28 	bl	8002378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023c00 	.word	0x40023c00

08002b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b3c:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <HAL_InitTick+0x54>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b12      	ldr	r3, [pc, #72]	@ (8002b8c <HAL_InitTick+0x58>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	4619      	mov	r1, r3
 8002b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f943 	bl	8002dde <HAL_SYSTICK_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00e      	b.n	8002b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b0f      	cmp	r3, #15
 8002b66:	d80a      	bhi.n	8002b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b70:	f000 f90b 	bl	8002d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b74:	4a06      	ldr	r2, [pc, #24]	@ (8002b90 <HAL_InitTick+0x5c>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000004 	.word	0x20000004
 8002b8c:	2000000c 	.word	0x2000000c
 8002b90:	20000008 	.word	0x20000008

08002b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <HAL_IncTick+0x20>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <HAL_IncTick+0x24>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a04      	ldr	r2, [pc, #16]	@ (8002bb8 <HAL_IncTick+0x24>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	2000000c 	.word	0x2000000c
 8002bb8:	20004a18 	.word	0x20004a18

08002bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	@ (8002bd0 <HAL_GetTick+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20004a18 	.word	0x20004a18

08002bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <__NVIC_SetPriorityGrouping+0x44>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c06:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <__NVIC_SetPriorityGrouping+0x44>)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	60d3      	str	r3, [r2, #12]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c20:	4b04      	ldr	r3, [pc, #16]	@ (8002c34 <__NVIC_GetPriorityGrouping+0x18>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	f003 0307 	and.w	r3, r3, #7
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	db0b      	blt.n	8002c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	f003 021f 	and.w	r2, r3, #31
 8002c50:	4907      	ldr	r1, [pc, #28]	@ (8002c70 <__NVIC_EnableIRQ+0x38>)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2001      	movs	r0, #1
 8002c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000e100 	.word	0xe000e100

08002c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	6039      	str	r1, [r7, #0]
 8002c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	db0a      	blt.n	8002c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	490c      	ldr	r1, [pc, #48]	@ (8002cc0 <__NVIC_SetPriority+0x4c>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	440b      	add	r3, r1
 8002c98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c9c:	e00a      	b.n	8002cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4908      	ldr	r1, [pc, #32]	@ (8002cc4 <__NVIC_SetPriority+0x50>)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	3b04      	subs	r3, #4
 8002cac:	0112      	lsls	r2, r2, #4
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	761a      	strb	r2, [r3, #24]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000e100 	.word	0xe000e100
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	@ 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f1c3 0307 	rsb	r3, r3, #7
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	bf28      	it	cs
 8002ce6:	2304      	movcs	r3, #4
 8002ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3304      	adds	r3, #4
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d902      	bls.n	8002cf8 <NVIC_EncodePriority+0x30>
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3b03      	subs	r3, #3
 8002cf6:	e000      	b.n	8002cfa <NVIC_EncodePriority+0x32>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	43d9      	mvns	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	4313      	orrs	r3, r2
         );
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3724      	adds	r7, #36	@ 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d40:	d301      	bcc.n	8002d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d42:	2301      	movs	r3, #1
 8002d44:	e00f      	b.n	8002d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d46:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <SysTick_Config+0x40>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d4e:	210f      	movs	r1, #15
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d54:	f7ff ff8e 	bl	8002c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d58:	4b05      	ldr	r3, [pc, #20]	@ (8002d70 <SysTick_Config+0x40>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5e:	4b04      	ldr	r3, [pc, #16]	@ (8002d70 <SysTick_Config+0x40>)
 8002d60:	2207      	movs	r2, #7
 8002d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	e000e010 	.word	0xe000e010

08002d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ff29 	bl	8002bd4 <__NVIC_SetPriorityGrouping>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	4603      	mov	r3, r0
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d9c:	f7ff ff3e 	bl	8002c1c <__NVIC_GetPriorityGrouping>
 8002da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	6978      	ldr	r0, [r7, #20]
 8002da8:	f7ff ff8e 	bl	8002cc8 <NVIC_EncodePriority>
 8002dac:	4602      	mov	r2, r0
 8002dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff5d 	bl	8002c74 <__NVIC_SetPriority>
}
 8002dba:	bf00      	nop
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff31 	bl	8002c38 <__NVIC_EnableIRQ>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ffa2 	bl	8002d30 <SysTick_Config>
 8002dec:	4603      	mov	r3, r0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e04:	f7ff feda 	bl	8002bbc <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e099      	b.n	8002f48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e34:	e00f      	b.n	8002e56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e36:	f7ff fec1 	bl	8002bbc <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b05      	cmp	r3, #5
 8002e42:	d908      	bls.n	8002e56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e078      	b.n	8002f48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e8      	bne.n	8002e36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	4b38      	ldr	r3, [pc, #224]	@ (8002f50 <HAL_DMA_Init+0x158>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d107      	bne.n	8002ec0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f023 0307 	bic.w	r3, r3, #7
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d117      	bne.n	8002f1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00e      	beq.n	8002f1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fb01 	bl	8003504 <DMA_CheckFifoParam>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2240      	movs	r2, #64	@ 0x40
 8002f0c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f16:	2301      	movs	r3, #1
 8002f18:	e016      	b.n	8002f48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fab8 	bl	8003498 <DMA_CalcBaseAndBitshift>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f30:	223f      	movs	r2, #63	@ 0x3f
 8002f32:	409a      	lsls	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	f010803f 	.word	0xf010803f

08002f54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_DMA_Start_IT+0x26>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e040      	b.n	8002ffc <HAL_DMA_Start_IT+0xa8>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d12f      	bne.n	8002fee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2202      	movs	r2, #2
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fa4a 	bl	800343c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fac:	223f      	movs	r2, #63	@ 0x3f
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0216 	orr.w	r2, r2, #22
 8002fc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0208 	orr.w	r2, r2, #8
 8002fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	e005      	b.n	8002ffa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003010:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003012:	f7ff fdd3 	bl	8002bbc <HAL_GetTick>
 8003016:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d008      	beq.n	8003036 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2280      	movs	r2, #128	@ 0x80
 8003028:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e052      	b.n	80030dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0216 	bic.w	r2, r2, #22
 8003044:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003054:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d103      	bne.n	8003066 <HAL_DMA_Abort+0x62>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0208 	bic.w	r2, r2, #8
 8003074:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003086:	e013      	b.n	80030b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003088:	f7ff fd98 	bl	8002bbc <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b05      	cmp	r3, #5
 8003094:	d90c      	bls.n	80030b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2203      	movs	r2, #3
 80030a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e015      	b.n	80030dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1e4      	bne.n	8003088 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c2:	223f      	movs	r2, #63	@ 0x3f
 80030c4:	409a      	lsls	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d004      	beq.n	8003102 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2280      	movs	r2, #128	@ 0x80
 80030fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e00c      	b.n	800311c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2205      	movs	r2, #5
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0201 	bic.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003134:	4b8e      	ldr	r3, [pc, #568]	@ (8003370 <HAL_DMA_IRQHandler+0x248>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a8e      	ldr	r2, [pc, #568]	@ (8003374 <HAL_DMA_IRQHandler+0x24c>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	0a9b      	lsrs	r3, r3, #10
 8003140:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003146:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003152:	2208      	movs	r2, #8
 8003154:	409a      	lsls	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d01a      	beq.n	8003194 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0204 	bic.w	r2, r2, #4
 800317a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	2208      	movs	r2, #8
 8003182:	409a      	lsls	r2, r3
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318c:	f043 0201 	orr.w	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003198:	2201      	movs	r2, #1
 800319a:	409a      	lsls	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d012      	beq.n	80031ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00b      	beq.n	80031ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b6:	2201      	movs	r2, #1
 80031b8:	409a      	lsls	r2, r3
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c2:	f043 0202 	orr.w	r2, r3, #2
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ce:	2204      	movs	r2, #4
 80031d0:	409a      	lsls	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d012      	beq.n	8003200 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00b      	beq.n	8003200 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ec:	2204      	movs	r2, #4
 80031ee:	409a      	lsls	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f8:	f043 0204 	orr.w	r2, r3, #4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003204:	2210      	movs	r2, #16
 8003206:	409a      	lsls	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d043      	beq.n	8003298 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d03c      	beq.n	8003298 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003222:	2210      	movs	r2, #16
 8003224:	409a      	lsls	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d018      	beq.n	800326a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d108      	bne.n	8003258 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d024      	beq.n	8003298 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	4798      	blx	r3
 8003256:	e01f      	b.n	8003298 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01b      	beq.n	8003298 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
 8003268:	e016      	b.n	8003298 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d107      	bne.n	8003288 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0208 	bic.w	r2, r2, #8
 8003286:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329c:	2220      	movs	r2, #32
 800329e:	409a      	lsls	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 808f 	beq.w	80033c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 8087 	beq.w	80033c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032be:	2220      	movs	r2, #32
 80032c0:	409a      	lsls	r2, r3
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d136      	bne.n	8003340 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0216 	bic.w	r2, r2, #22
 80032e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d103      	bne.n	8003302 <HAL_DMA_IRQHandler+0x1da>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0208 	bic.w	r2, r2, #8
 8003310:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003316:	223f      	movs	r2, #63	@ 0x3f
 8003318:	409a      	lsls	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003332:	2b00      	cmp	r3, #0
 8003334:	d07e      	beq.n	8003434 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	4798      	blx	r3
        }
        return;
 800333e:	e079      	b.n	8003434 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d01d      	beq.n	800338a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10d      	bne.n	8003378 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003360:	2b00      	cmp	r3, #0
 8003362:	d031      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
 800336c:	e02c      	b.n	80033c8 <HAL_DMA_IRQHandler+0x2a0>
 800336e:	bf00      	nop
 8003370:	20000004 	.word	0x20000004
 8003374:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d023      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
 8003388:	e01e      	b.n	80033c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10f      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0210 	bic.w	r2, r2, #16
 80033a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d032      	beq.n	8003436 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d022      	beq.n	8003422 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2205      	movs	r2, #5
 80033e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	3301      	adds	r3, #1
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d307      	bcc.n	8003410 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f2      	bne.n	80033f4 <HAL_DMA_IRQHandler+0x2cc>
 800340e:	e000      	b.n	8003412 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003410:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
 8003432:	e000      	b.n	8003436 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003434:	bf00      	nop
    }
  }
}
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003458:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b40      	cmp	r3, #64	@ 0x40
 8003468:	d108      	bne.n	800347c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800347a:	e007      	b.n	800348c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	60da      	str	r2, [r3, #12]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	3b10      	subs	r3, #16
 80034a8:	4a14      	ldr	r2, [pc, #80]	@ (80034fc <DMA_CalcBaseAndBitshift+0x64>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	091b      	lsrs	r3, r3, #4
 80034b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034b2:	4a13      	ldr	r2, [pc, #76]	@ (8003500 <DMA_CalcBaseAndBitshift+0x68>)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4413      	add	r3, r2
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d909      	bls.n	80034da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034ce:	f023 0303 	bic.w	r3, r3, #3
 80034d2:	1d1a      	adds	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80034d8:	e007      	b.n	80034ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034e2:	f023 0303 	bic.w	r3, r3, #3
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	aaaaaaab 	.word	0xaaaaaaab
 8003500:	08018890 	.word	0x08018890

08003504 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003514:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d11f      	bne.n	800355e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d856      	bhi.n	80035d2 <DMA_CheckFifoParam+0xce>
 8003524:	a201      	add	r2, pc, #4	@ (adr r2, 800352c <DMA_CheckFifoParam+0x28>)
 8003526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352a:	bf00      	nop
 800352c:	0800353d 	.word	0x0800353d
 8003530:	0800354f 	.word	0x0800354f
 8003534:	0800353d 	.word	0x0800353d
 8003538:	080035d3 	.word	0x080035d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003540:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d046      	beq.n	80035d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354c:	e043      	b.n	80035d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003552:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003556:	d140      	bne.n	80035da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800355c:	e03d      	b.n	80035da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003566:	d121      	bne.n	80035ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b03      	cmp	r3, #3
 800356c:	d837      	bhi.n	80035de <DMA_CheckFifoParam+0xda>
 800356e:	a201      	add	r2, pc, #4	@ (adr r2, 8003574 <DMA_CheckFifoParam+0x70>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	08003585 	.word	0x08003585
 8003578:	0800358b 	.word	0x0800358b
 800357c:	08003585 	.word	0x08003585
 8003580:	0800359d 	.word	0x0800359d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      break;
 8003588:	e030      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d025      	beq.n	80035e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359a:	e022      	b.n	80035e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035a4:	d11f      	bne.n	80035e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035aa:	e01c      	b.n	80035e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d903      	bls.n	80035ba <DMA_CheckFifoParam+0xb6>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d003      	beq.n	80035c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035b8:	e018      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
      break;
 80035be:	e015      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
      break;
 80035d0:	e00b      	b.n	80035ea <DMA_CheckFifoParam+0xe6>
      break;
 80035d2:	bf00      	nop
 80035d4:	e00a      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      break;
 80035d6:	bf00      	nop
 80035d8:	e008      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      break;
 80035da:	bf00      	nop
 80035dc:	e006      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      break;
 80035de:	bf00      	nop
 80035e0:	e004      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      break;
 80035e2:	bf00      	nop
 80035e4:	e002      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      break;   
 80035e6:	bf00      	nop
 80035e8:	e000      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      break;
 80035ea:	bf00      	nop
    }
  } 
  
  return status; 
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop

080035fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	@ 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800360e:	2300      	movs	r3, #0
 8003610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	e159      	b.n	80038cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003618:	2201      	movs	r2, #1
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	429a      	cmp	r2, r3
 8003632:	f040 8148 	bne.w	80038c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b01      	cmp	r3, #1
 8003640:	d005      	beq.n	800364e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800364a:	2b02      	cmp	r3, #2
 800364c:	d130      	bne.n	80036b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	2203      	movs	r2, #3
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003684:	2201      	movs	r2, #1
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 0201 	and.w	r2, r3, #1
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d017      	beq.n	80036ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	2203      	movs	r2, #3
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d123      	bne.n	8003740 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	08da      	lsrs	r2, r3, #3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3208      	adds	r2, #8
 8003700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	220f      	movs	r2, #15
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	08da      	lsrs	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3208      	adds	r2, #8
 800373a:	69b9      	ldr	r1, [r7, #24]
 800373c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	2203      	movs	r2, #3
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 0203 	and.w	r2, r3, #3
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a2 	beq.w	80038c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	4b57      	ldr	r3, [pc, #348]	@ (80038e4 <HAL_GPIO_Init+0x2e8>)
 8003788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378a:	4a56      	ldr	r2, [pc, #344]	@ (80038e4 <HAL_GPIO_Init+0x2e8>)
 800378c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003790:	6453      	str	r3, [r2, #68]	@ 0x44
 8003792:	4b54      	ldr	r3, [pc, #336]	@ (80038e4 <HAL_GPIO_Init+0x2e8>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800379e:	4a52      	ldr	r2, [pc, #328]	@ (80038e8 <HAL_GPIO_Init+0x2ec>)
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	089b      	lsrs	r3, r3, #2
 80037a4:	3302      	adds	r3, #2
 80037a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	220f      	movs	r2, #15
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a49      	ldr	r2, [pc, #292]	@ (80038ec <HAL_GPIO_Init+0x2f0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d019      	beq.n	80037fe <HAL_GPIO_Init+0x202>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a48      	ldr	r2, [pc, #288]	@ (80038f0 <HAL_GPIO_Init+0x2f4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_GPIO_Init+0x1fe>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a47      	ldr	r2, [pc, #284]	@ (80038f4 <HAL_GPIO_Init+0x2f8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00d      	beq.n	80037f6 <HAL_GPIO_Init+0x1fa>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a46      	ldr	r2, [pc, #280]	@ (80038f8 <HAL_GPIO_Init+0x2fc>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d007      	beq.n	80037f2 <HAL_GPIO_Init+0x1f6>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a45      	ldr	r2, [pc, #276]	@ (80038fc <HAL_GPIO_Init+0x300>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_GPIO_Init+0x1f2>
 80037ea:	2304      	movs	r3, #4
 80037ec:	e008      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037ee:	2307      	movs	r3, #7
 80037f0:	e006      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037f2:	2303      	movs	r3, #3
 80037f4:	e004      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e002      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037fe:	2300      	movs	r3, #0
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	f002 0203 	and.w	r2, r2, #3
 8003806:	0092      	lsls	r2, r2, #2
 8003808:	4093      	lsls	r3, r2
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003810:	4935      	ldr	r1, [pc, #212]	@ (80038e8 <HAL_GPIO_Init+0x2ec>)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	089b      	lsrs	r3, r3, #2
 8003816:	3302      	adds	r3, #2
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800381e:	4b38      	ldr	r3, [pc, #224]	@ (8003900 <HAL_GPIO_Init+0x304>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003842:	4a2f      	ldr	r2, [pc, #188]	@ (8003900 <HAL_GPIO_Init+0x304>)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003848:	4b2d      	ldr	r3, [pc, #180]	@ (8003900 <HAL_GPIO_Init+0x304>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800386c:	4a24      	ldr	r2, [pc, #144]	@ (8003900 <HAL_GPIO_Init+0x304>)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003872:	4b23      	ldr	r3, [pc, #140]	@ (8003900 <HAL_GPIO_Init+0x304>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003896:	4a1a      	ldr	r2, [pc, #104]	@ (8003900 <HAL_GPIO_Init+0x304>)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800389c:	4b18      	ldr	r3, [pc, #96]	@ (8003900 <HAL_GPIO_Init+0x304>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003900 <HAL_GPIO_Init+0x304>)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3301      	adds	r3, #1
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	2b0f      	cmp	r3, #15
 80038d0:	f67f aea2 	bls.w	8003618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	3724      	adds	r7, #36	@ 0x24
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40013800 	.word	0x40013800
 80038ec:	40020000 	.word	0x40020000
 80038f0:	40020400 	.word	0x40020400
 80038f4:	40020800 	.word	0x40020800
 80038f8:	40020c00 	.word	0x40020c00
 80038fc:	40021000 	.word	0x40021000
 8003900:	40013c00 	.word	0x40013c00

08003904 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	887b      	ldrh	r3, [r7, #2]
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
 8003920:	e001      	b.n	8003926 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003926:	7bfb      	ldrb	r3, [r7, #15]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	807b      	strh	r3, [r7, #2]
 8003940:	4613      	mov	r3, r2
 8003942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003944:	787b      	ldrb	r3, [r7, #1]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003950:	e003      	b.n	800395a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	041a      	lsls	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	619a      	str	r2, [r3, #24]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003972:	4b08      	ldr	r3, [pc, #32]	@ (8003994 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800397e:	4a05      	ldr	r2, [pc, #20]	@ (8003994 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003984:	88fb      	ldrh	r3, [r7, #6]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd ff48 	bl	800181c <HAL_GPIO_EXTI_Callback>
  }
}
 800398c:	bf00      	nop
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40013c00 	.word	0x40013c00

08003998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e12b      	b.n	8003c02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fe fd06 	bl	80023d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2224      	movs	r2, #36	@ 0x24
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039fc:	f001 fc60 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 8003a00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4a81      	ldr	r2, [pc, #516]	@ (8003c0c <HAL_I2C_Init+0x274>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d807      	bhi.n	8003a1c <HAL_I2C_Init+0x84>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a80      	ldr	r2, [pc, #512]	@ (8003c10 <HAL_I2C_Init+0x278>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	bf94      	ite	ls
 8003a14:	2301      	movls	r3, #1
 8003a16:	2300      	movhi	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e006      	b.n	8003a2a <HAL_I2C_Init+0x92>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a7d      	ldr	r2, [pc, #500]	@ (8003c14 <HAL_I2C_Init+0x27c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	bf94      	ite	ls
 8003a24:	2301      	movls	r3, #1
 8003a26:	2300      	movhi	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e0e7      	b.n	8003c02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a78      	ldr	r2, [pc, #480]	@ (8003c18 <HAL_I2C_Init+0x280>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	0c9b      	lsrs	r3, r3, #18
 8003a3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a6a      	ldr	r2, [pc, #424]	@ (8003c0c <HAL_I2C_Init+0x274>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d802      	bhi.n	8003a6c <HAL_I2C_Init+0xd4>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	e009      	b.n	8003a80 <HAL_I2C_Init+0xe8>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	4a69      	ldr	r2, [pc, #420]	@ (8003c1c <HAL_I2C_Init+0x284>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	099b      	lsrs	r3, r3, #6
 8003a7e:	3301      	adds	r3, #1
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	495c      	ldr	r1, [pc, #368]	@ (8003c0c <HAL_I2C_Init+0x274>)
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	d819      	bhi.n	8003ad4 <HAL_I2C_Init+0x13c>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1e59      	subs	r1, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aae:	1c59      	adds	r1, r3, #1
 8003ab0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_I2C_Init+0x138>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1e59      	subs	r1, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ace:	e051      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	e04f      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d111      	bne.n	8003b00 <HAL_I2C_Init+0x168>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1e58      	subs	r0, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	440b      	add	r3, r1
 8003aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e012      	b.n	8003b26 <HAL_I2C_Init+0x18e>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e58      	subs	r0, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	0099      	lsls	r1, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b16:	3301      	adds	r3, #1
 8003b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Init+0x196>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e022      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10e      	bne.n	8003b54 <HAL_I2C_Init+0x1bc>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1e58      	subs	r0, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6859      	ldr	r1, [r3, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	440b      	add	r3, r1
 8003b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b52:	e00f      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e58      	subs	r0, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	0099      	lsls	r1, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	6809      	ldr	r1, [r1, #0]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69da      	ldr	r2, [r3, #28]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ba2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6911      	ldr	r1, [r2, #16]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68d2      	ldr	r2, [r2, #12]
 8003bae:	4311      	orrs	r1, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	000186a0 	.word	0x000186a0
 8003c10:	001e847f 	.word	0x001e847f
 8003c14:	003d08ff 	.word	0x003d08ff
 8003c18:	431bde83 	.word	0x431bde83
 8003c1c:	10624dd3 	.word	0x10624dd3

08003c20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	4608      	mov	r0, r1
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	817b      	strh	r3, [r7, #10]
 8003c32:	460b      	mov	r3, r1
 8003c34:	813b      	strh	r3, [r7, #8]
 8003c36:	4613      	mov	r3, r2
 8003c38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c3a:	f7fe ffbf 	bl	8002bbc <HAL_GetTick>
 8003c3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	f040 80d9 	bne.w	8003e00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	2319      	movs	r3, #25
 8003c54:	2201      	movs	r2, #1
 8003c56:	496d      	ldr	r1, [pc, #436]	@ (8003e0c <HAL_I2C_Mem_Write+0x1ec>)
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fc8b 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c64:	2302      	movs	r3, #2
 8003c66:	e0cc      	b.n	8003e02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_I2C_Mem_Write+0x56>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e0c5      	b.n	8003e02 <HAL_I2C_Mem_Write+0x1e2>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d007      	beq.n	8003c9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003caa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2221      	movs	r2, #33	@ 0x21
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2240      	movs	r2, #64	@ 0x40
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a3a      	ldr	r2, [r7, #32]
 8003cc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4a4d      	ldr	r2, [pc, #308]	@ (8003e10 <HAL_I2C_Mem_Write+0x1f0>)
 8003cdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cde:	88f8      	ldrh	r0, [r7, #6]
 8003ce0:	893a      	ldrh	r2, [r7, #8]
 8003ce2:	8979      	ldrh	r1, [r7, #10]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	9301      	str	r3, [sp, #4]
 8003ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	4603      	mov	r3, r0
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fac2 	bl	8004278 <I2C_RequestMemoryWrite>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d052      	beq.n	8003da0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e081      	b.n	8003e02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fd50 	bl	80047a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00d      	beq.n	8003d2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d107      	bne.n	8003d26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e06b      	b.n	8003e02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d11b      	bne.n	8003da0 <HAL_I2C_Mem_Write+0x180>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d017      	beq.n	8003da0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1aa      	bne.n	8003cfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 fd43 	bl	8004838 <I2C_WaitOnBTFFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d107      	bne.n	8003dd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e016      	b.n	8003e02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e000      	b.n	8003e02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e00:	2302      	movs	r3, #2
  }
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	00100002 	.word	0x00100002
 8003e10:	ffff0000 	.word	0xffff0000

08003e14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08c      	sub	sp, #48	@ 0x30
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	4608      	mov	r0, r1
 8003e1e:	4611      	mov	r1, r2
 8003e20:	461a      	mov	r2, r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	817b      	strh	r3, [r7, #10]
 8003e26:	460b      	mov	r3, r1
 8003e28:	813b      	strh	r3, [r7, #8]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e2e:	f7fe fec5 	bl	8002bbc <HAL_GetTick>
 8003e32:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	f040 8214 	bne.w	800426a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	2319      	movs	r3, #25
 8003e48:	2201      	movs	r2, #1
 8003e4a:	497b      	ldr	r1, [pc, #492]	@ (8004038 <HAL_I2C_Mem_Read+0x224>)
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fb91 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e207      	b.n	800426c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_I2C_Mem_Read+0x56>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e200      	b.n	800426c <HAL_I2C_Mem_Read+0x458>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d007      	beq.n	8003e90 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2222      	movs	r2, #34	@ 0x22
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2240      	movs	r2, #64	@ 0x40
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a5b      	ldr	r2, [pc, #364]	@ (800403c <HAL_I2C_Mem_Read+0x228>)
 8003ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ed2:	88f8      	ldrh	r0, [r7, #6]
 8003ed4:	893a      	ldrh	r2, [r7, #8]
 8003ed6:	8979      	ldrh	r1, [r7, #10]
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fa5e 	bl	80043a4 <I2C_RequestMemoryRead>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e1bc      	b.n	800426c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d113      	bne.n	8003f22 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efa:	2300      	movs	r3, #0
 8003efc:	623b      	str	r3, [r7, #32]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	623b      	str	r3, [r7, #32]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	623b      	str	r3, [r7, #32]
 8003f0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	e190      	b.n	8004244 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d11b      	bne.n	8003f62 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	e170      	b.n	8004244 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d11b      	bne.n	8003fa2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61bb      	str	r3, [r7, #24]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	e150      	b.n	8004244 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003fb8:	e144      	b.n	8004244 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	f200 80f1 	bhi.w	80041a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d123      	bne.n	8004014 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fc79 	bl	80048c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e145      	b.n	800426c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004012:	e117      	b.n	8004244 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004018:	2b02      	cmp	r3, #2
 800401a:	d14e      	bne.n	80040ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004022:	2200      	movs	r2, #0
 8004024:	4906      	ldr	r1, [pc, #24]	@ (8004040 <HAL_I2C_Mem_Read+0x22c>)
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 faa4 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e11a      	b.n	800426c <HAL_I2C_Mem_Read+0x458>
 8004036:	bf00      	nop
 8004038:	00100002 	.word	0x00100002
 800403c:	ffff0000 	.word	0xffff0000
 8004040:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004052:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040b8:	e0c4      	b.n	8004244 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c0:	2200      	movs	r2, #0
 80040c2:	496c      	ldr	r1, [pc, #432]	@ (8004274 <HAL_I2C_Mem_Read+0x460>)
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fa55 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0cb      	b.n	800426c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411c:	2200      	movs	r2, #0
 800411e:	4955      	ldr	r1, [pc, #340]	@ (8004274 <HAL_I2C_Mem_Read+0x460>)
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 fa27 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e09d      	b.n	800426c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041a4:	e04e      	b.n	8004244 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fb8c 	bl	80048c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e058      	b.n	800426c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d124      	bne.n	8004244 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d107      	bne.n	8004212 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004210:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004248:	2b00      	cmp	r3, #0
 800424a:	f47f aeb6 	bne.w	8003fba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	e000      	b.n	800426c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800426a:	2302      	movs	r3, #2
  }
}
 800426c:	4618      	mov	r0, r3
 800426e:	3728      	adds	r7, #40	@ 0x28
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	00010004 	.word	0x00010004

08004278 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	4608      	mov	r0, r1
 8004282:	4611      	mov	r1, r2
 8004284:	461a      	mov	r2, r3
 8004286:	4603      	mov	r3, r0
 8004288:	817b      	strh	r3, [r7, #10]
 800428a:	460b      	mov	r3, r1
 800428c:	813b      	strh	r3, [r7, #8]
 800428e:	4613      	mov	r3, r2
 8004290:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f960 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00d      	beq.n	80042d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042c8:	d103      	bne.n	80042d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e05f      	b.n	8004396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042d6:	897b      	ldrh	r3, [r7, #10]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	461a      	mov	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	6a3a      	ldr	r2, [r7, #32]
 80042ea:	492d      	ldr	r1, [pc, #180]	@ (80043a0 <I2C_RequestMemoryWrite+0x128>)
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f9bb 	bl	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e04c      	b.n	8004396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004314:	6a39      	ldr	r1, [r7, #32]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fa46 	bl	80047a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00d      	beq.n	800433e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	2b04      	cmp	r3, #4
 8004328:	d107      	bne.n	800433a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004338:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e02b      	b.n	8004396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004344:	893b      	ldrh	r3, [r7, #8]
 8004346:	b2da      	uxtb	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	611a      	str	r2, [r3, #16]
 800434e:	e021      	b.n	8004394 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004350:	893b      	ldrh	r3, [r7, #8]
 8004352:	0a1b      	lsrs	r3, r3, #8
 8004354:	b29b      	uxth	r3, r3
 8004356:	b2da      	uxtb	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800435e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004360:	6a39      	ldr	r1, [r7, #32]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fa20 	bl	80047a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00d      	beq.n	800438a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	2b04      	cmp	r3, #4
 8004374:	d107      	bne.n	8004386 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004384:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e005      	b.n	8004396 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800438a:	893b      	ldrh	r3, [r7, #8]
 800438c:	b2da      	uxtb	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	00010002 	.word	0x00010002

080043a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	4608      	mov	r0, r1
 80043ae:	4611      	mov	r1, r2
 80043b0:	461a      	mov	r2, r3
 80043b2:	4603      	mov	r3, r0
 80043b4:	817b      	strh	r3, [r7, #10]
 80043b6:	460b      	mov	r3, r1
 80043b8:	813b      	strh	r3, [r7, #8]
 80043ba:	4613      	mov	r3, r2
 80043bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f8c2 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00d      	beq.n	8004412 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004404:	d103      	bne.n	800440e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800440c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e0aa      	b.n	8004568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004412:	897b      	ldrh	r3, [r7, #10]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	461a      	mov	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004420:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	6a3a      	ldr	r2, [r7, #32]
 8004426:	4952      	ldr	r1, [pc, #328]	@ (8004570 <I2C_RequestMemoryRead+0x1cc>)
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f91d 	bl	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e097      	b.n	8004568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800444e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004450:	6a39      	ldr	r1, [r7, #32]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f9a8 	bl	80047a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00d      	beq.n	800447a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	2b04      	cmp	r3, #4
 8004464:	d107      	bne.n	8004476 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004474:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e076      	b.n	8004568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d105      	bne.n	800448c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004480:	893b      	ldrh	r3, [r7, #8]
 8004482:	b2da      	uxtb	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	611a      	str	r2, [r3, #16]
 800448a:	e021      	b.n	80044d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800448c:	893b      	ldrh	r3, [r7, #8]
 800448e:	0a1b      	lsrs	r3, r3, #8
 8004490:	b29b      	uxth	r3, r3
 8004492:	b2da      	uxtb	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800449a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800449c:	6a39      	ldr	r1, [r7, #32]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f982 	bl	80047a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00d      	beq.n	80044c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d107      	bne.n	80044c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e050      	b.n	8004568 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044c6:	893b      	ldrh	r3, [r7, #8]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d2:	6a39      	ldr	r1, [r7, #32]
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 f967 	bl	80047a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00d      	beq.n	80044fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d107      	bne.n	80044f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e035      	b.n	8004568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800450a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800450c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	2200      	movs	r2, #0
 8004514:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f82b 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00d      	beq.n	8004540 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004532:	d103      	bne.n	800453c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e013      	b.n	8004568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004540:	897b      	ldrh	r3, [r7, #10]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	b2da      	uxtb	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	6a3a      	ldr	r2, [r7, #32]
 8004554:	4906      	ldr	r1, [pc, #24]	@ (8004570 <I2C_RequestMemoryRead+0x1cc>)
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f886 	bl	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	00010002 	.word	0x00010002

08004574 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004584:	e048      	b.n	8004618 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800458c:	d044      	beq.n	8004618 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458e:	f7fe fb15 	bl	8002bbc <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d302      	bcc.n	80045a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d139      	bne.n	8004618 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	0c1b      	lsrs	r3, r3, #16
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d10d      	bne.n	80045ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	43da      	mvns	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4013      	ands	r3, r2
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	e00c      	b.n	80045e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	43da      	mvns	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4013      	ands	r3, r2
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf0c      	ite	eq
 80045dc:	2301      	moveq	r3, #1
 80045de:	2300      	movne	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d116      	bne.n	8004618 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e023      	b.n	8004660 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	0c1b      	lsrs	r3, r3, #16
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d10d      	bne.n	800463e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	43da      	mvns	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	4013      	ands	r3, r2
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	e00c      	b.n	8004658 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	43da      	mvns	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	4013      	ands	r3, r2
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	429a      	cmp	r2, r3
 800465c:	d093      	beq.n	8004586 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004676:	e071      	b.n	800475c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004686:	d123      	bne.n	80046d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004696:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	f043 0204 	orr.w	r2, r3, #4
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e067      	b.n	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046d6:	d041      	beq.n	800475c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d8:	f7fe fa70 	bl	8002bbc <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d302      	bcc.n	80046ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d136      	bne.n	800475c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d10c      	bne.n	8004712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	43da      	mvns	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4013      	ands	r3, r2
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	bf14      	ite	ne
 800470a:	2301      	movne	r3, #1
 800470c:	2300      	moveq	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	e00b      	b.n	800472a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	43da      	mvns	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4013      	ands	r3, r2
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf14      	ite	ne
 8004724:	2301      	movne	r3, #1
 8004726:	2300      	moveq	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d016      	beq.n	800475c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004748:	f043 0220 	orr.w	r2, r3, #32
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e021      	b.n	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	0c1b      	lsrs	r3, r3, #16
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d10c      	bne.n	8004780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	43da      	mvns	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4013      	ands	r3, r2
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e00b      	b.n	8004798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	43da      	mvns	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4013      	ands	r3, r2
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	bf14      	ite	ne
 8004792:	2301      	movne	r3, #1
 8004794:	2300      	moveq	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	f47f af6d 	bne.w	8004678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047b4:	e034      	b.n	8004820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f8e3 	bl	8004982 <I2C_IsAcknowledgeFailed>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e034      	b.n	8004830 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047cc:	d028      	beq.n	8004820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ce:	f7fe f9f5 	bl	8002bbc <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d302      	bcc.n	80047e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d11d      	bne.n	8004820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ee:	2b80      	cmp	r3, #128	@ 0x80
 80047f0:	d016      	beq.n	8004820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480c:	f043 0220 	orr.w	r2, r3, #32
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e007      	b.n	8004830 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800482a:	2b80      	cmp	r3, #128	@ 0x80
 800482c:	d1c3      	bne.n	80047b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004844:	e034      	b.n	80048b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f89b 	bl	8004982 <I2C_IsAcknowledgeFailed>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e034      	b.n	80048c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800485c:	d028      	beq.n	80048b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485e:	f7fe f9ad 	bl	8002bbc <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	d302      	bcc.n	8004874 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d11d      	bne.n	80048b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b04      	cmp	r3, #4
 8004880:	d016      	beq.n	80048b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	f043 0220 	orr.w	r2, r3, #32
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e007      	b.n	80048c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d1c3      	bne.n	8004846 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048d4:	e049      	b.n	800496a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d119      	bne.n	8004918 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0210 	mvn.w	r2, #16
 80048ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e030      	b.n	800497a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004918:	f7fe f950 	bl	8002bbc <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	429a      	cmp	r2, r3
 8004926:	d302      	bcc.n	800492e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d11d      	bne.n	800496a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004938:	2b40      	cmp	r3, #64	@ 0x40
 800493a:	d016      	beq.n	800496a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	f043 0220 	orr.w	r2, r3, #32
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e007      	b.n	800497a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004974:	2b40      	cmp	r3, #64	@ 0x40
 8004976:	d1ae      	bne.n	80048d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004998:	d11b      	bne.n	80049d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	f043 0204 	orr.w	r2, r3, #4
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e267      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d075      	beq.n	8004aea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049fe:	4b88      	ldr	r3, [pc, #544]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d00c      	beq.n	8004a24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a0a:	4b85      	ldr	r3, [pc, #532]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d112      	bne.n	8004a3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a16:	4b82      	ldr	r3, [pc, #520]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a22:	d10b      	bne.n	8004a3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a24:	4b7e      	ldr	r3, [pc, #504]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d05b      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x108>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d157      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e242      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a44:	d106      	bne.n	8004a54 <HAL_RCC_OscConfig+0x74>
 8004a46:	4b76      	ldr	r3, [pc, #472]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a75      	ldr	r2, [pc, #468]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	e01d      	b.n	8004a90 <HAL_RCC_OscConfig+0xb0>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x98>
 8004a5e:	4b70      	ldr	r3, [pc, #448]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a6f      	ldr	r2, [pc, #444]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a6c      	ldr	r2, [pc, #432]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e00b      	b.n	8004a90 <HAL_RCC_OscConfig+0xb0>
 8004a78:	4b69      	ldr	r3, [pc, #420]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a68      	ldr	r2, [pc, #416]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4b66      	ldr	r3, [pc, #408]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a65      	ldr	r2, [pc, #404]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d013      	beq.n	8004ac0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a98:	f7fe f890 	bl	8002bbc <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7fe f88c 	bl	8002bbc <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	@ 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e207      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0xc0>
 8004abe:	e014      	b.n	8004aea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac0:	f7fe f87c 	bl	8002bbc <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac8:	f7fe f878 	bl	8002bbc <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	@ 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e1f3      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ada:	4b51      	ldr	r3, [pc, #324]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0xe8>
 8004ae6:	e000      	b.n	8004aea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d063      	beq.n	8004bbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004af6:	4b4a      	ldr	r3, [pc, #296]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b02:	4b47      	ldr	r3, [pc, #284]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d11c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0e:	4b44      	ldr	r3, [pc, #272]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d116      	bne.n	8004b48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1a:	4b41      	ldr	r3, [pc, #260]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_RCC_OscConfig+0x152>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d001      	beq.n	8004b32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e1c7      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b32:	4b3b      	ldr	r3, [pc, #236]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4937      	ldr	r1, [pc, #220]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b46:	e03a      	b.n	8004bbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d020      	beq.n	8004b92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b50:	4b34      	ldr	r3, [pc, #208]	@ (8004c24 <HAL_RCC_OscConfig+0x244>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b56:	f7fe f831 	bl	8002bbc <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b5e:	f7fe f82d 	bl	8002bbc <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e1a8      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b70:	4b2b      	ldr	r3, [pc, #172]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7c:	4b28      	ldr	r3, [pc, #160]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4925      	ldr	r1, [pc, #148]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	600b      	str	r3, [r1, #0]
 8004b90:	e015      	b.n	8004bbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b92:	4b24      	ldr	r3, [pc, #144]	@ (8004c24 <HAL_RCC_OscConfig+0x244>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fe f810 	bl	8002bbc <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba0:	f7fe f80c 	bl	8002bbc <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e187      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f0      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d036      	beq.n	8004c38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d016      	beq.n	8004c00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd2:	4b15      	ldr	r3, [pc, #84]	@ (8004c28 <HAL_RCC_OscConfig+0x248>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd8:	f7fd fff0 	bl	8002bbc <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be0:	f7fd ffec 	bl	8002bbc <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e167      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCC_OscConfig+0x200>
 8004bfe:	e01b      	b.n	8004c38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c00:	4b09      	ldr	r3, [pc, #36]	@ (8004c28 <HAL_RCC_OscConfig+0x248>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c06:	f7fd ffd9 	bl	8002bbc <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c0c:	e00e      	b.n	8004c2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c0e:	f7fd ffd5 	bl	8002bbc <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d907      	bls.n	8004c2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e150      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
 8004c20:	40023800 	.word	0x40023800
 8004c24:	42470000 	.word	0x42470000
 8004c28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c2c:	4b88      	ldr	r3, [pc, #544]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004c2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ea      	bne.n	8004c0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8097 	beq.w	8004d74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c46:	2300      	movs	r3, #0
 8004c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c4a:	4b81      	ldr	r3, [pc, #516]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10f      	bne.n	8004c76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c56:	2300      	movs	r3, #0
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	4a7c      	ldr	r2, [pc, #496]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c66:	4b7a      	ldr	r3, [pc, #488]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c72:	2301      	movs	r3, #1
 8004c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c76:	4b77      	ldr	r3, [pc, #476]	@ (8004e54 <HAL_RCC_OscConfig+0x474>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d118      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c82:	4b74      	ldr	r3, [pc, #464]	@ (8004e54 <HAL_RCC_OscConfig+0x474>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a73      	ldr	r2, [pc, #460]	@ (8004e54 <HAL_RCC_OscConfig+0x474>)
 8004c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c8e:	f7fd ff95 	bl	8002bbc <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c96:	f7fd ff91 	bl	8002bbc <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e10c      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca8:	4b6a      	ldr	r3, [pc, #424]	@ (8004e54 <HAL_RCC_OscConfig+0x474>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d106      	bne.n	8004cca <HAL_RCC_OscConfig+0x2ea>
 8004cbc:	4b64      	ldr	r3, [pc, #400]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc0:	4a63      	ldr	r2, [pc, #396]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc8:	e01c      	b.n	8004d04 <HAL_RCC_OscConfig+0x324>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b05      	cmp	r3, #5
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCC_OscConfig+0x30c>
 8004cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd6:	4a5e      	ldr	r2, [pc, #376]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	f043 0304 	orr.w	r3, r3, #4
 8004cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cde:	4b5c      	ldr	r3, [pc, #368]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce2:	4a5b      	ldr	r2, [pc, #364]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004ce4:	f043 0301 	orr.w	r3, r3, #1
 8004ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cea:	e00b      	b.n	8004d04 <HAL_RCC_OscConfig+0x324>
 8004cec:	4b58      	ldr	r3, [pc, #352]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf0:	4a57      	ldr	r2, [pc, #348]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	f023 0301 	bic.w	r3, r3, #1
 8004cf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cf8:	4b55      	ldr	r3, [pc, #340]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfc:	4a54      	ldr	r2, [pc, #336]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	f023 0304 	bic.w	r3, r3, #4
 8004d02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d015      	beq.n	8004d38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0c:	f7fd ff56 	bl	8002bbc <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d12:	e00a      	b.n	8004d2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d14:	f7fd ff52 	bl	8002bbc <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e0cb      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2a:	4b49      	ldr	r3, [pc, #292]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0ee      	beq.n	8004d14 <HAL_RCC_OscConfig+0x334>
 8004d36:	e014      	b.n	8004d62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d38:	f7fd ff40 	bl	8002bbc <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d3e:	e00a      	b.n	8004d56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d40:	f7fd ff3c 	bl	8002bbc <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e0b5      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d56:	4b3e      	ldr	r3, [pc, #248]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1ee      	bne.n	8004d40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d105      	bne.n	8004d74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d68:	4b39      	ldr	r3, [pc, #228]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6c:	4a38      	ldr	r2, [pc, #224]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004d6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80a1 	beq.w	8004ec0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d7e:	4b34      	ldr	r3, [pc, #208]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 030c 	and.w	r3, r3, #12
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d05c      	beq.n	8004e44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d141      	bne.n	8004e16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d92:	4b31      	ldr	r3, [pc, #196]	@ (8004e58 <HAL_RCC_OscConfig+0x478>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d98:	f7fd ff10 	bl	8002bbc <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da0:	f7fd ff0c 	bl	8002bbc <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e087      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db2:	4b27      	ldr	r3, [pc, #156]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f0      	bne.n	8004da0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69da      	ldr	r2, [r3, #28]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	019b      	lsls	r3, r3, #6
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	041b      	lsls	r3, r3, #16
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	061b      	lsls	r3, r3, #24
 8004de2:	491b      	ldr	r1, [pc, #108]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004de8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e58 <HAL_RCC_OscConfig+0x478>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dee:	f7fd fee5 	bl	8002bbc <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df6:	f7fd fee1 	bl	8002bbc <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e05c      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e08:	4b11      	ldr	r3, [pc, #68]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f0      	beq.n	8004df6 <HAL_RCC_OscConfig+0x416>
 8004e14:	e054      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e16:	4b10      	ldr	r3, [pc, #64]	@ (8004e58 <HAL_RCC_OscConfig+0x478>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1c:	f7fd fece 	bl	8002bbc <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e24:	f7fd feca 	bl	8002bbc <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e045      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e36:	4b06      	ldr	r3, [pc, #24]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0x444>
 8004e42:	e03d      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d107      	bne.n	8004e5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e038      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
 8004e50:	40023800 	.word	0x40023800
 8004e54:	40007000 	.word	0x40007000
 8004e58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ecc <HAL_RCC_OscConfig+0x4ec>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d028      	beq.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d121      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d11a      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d111      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d107      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800

08004ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0cc      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee4:	4b68      	ldr	r3, [pc, #416]	@ (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d90c      	bls.n	8004f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef2:	4b65      	ldr	r3, [pc, #404]	@ (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efa:	4b63      	ldr	r3, [pc, #396]	@ (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0b8      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d020      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f24:	4b59      	ldr	r3, [pc, #356]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	4a58      	ldr	r2, [pc, #352]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f3c:	4b53      	ldr	r3, [pc, #332]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	4a52      	ldr	r2, [pc, #328]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f48:	4b50      	ldr	r3, [pc, #320]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	494d      	ldr	r1, [pc, #308]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d044      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6e:	4b47      	ldr	r3, [pc, #284]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d119      	bne.n	8004fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e07f      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d003      	beq.n	8004f8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d107      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e06f      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e067      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fae:	4b37      	ldr	r3, [pc, #220]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f023 0203 	bic.w	r2, r3, #3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4934      	ldr	r1, [pc, #208]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fc0:	f7fd fdfc 	bl	8002bbc <HAL_GetTick>
 8004fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc6:	e00a      	b.n	8004fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc8:	f7fd fdf8 	bl	8002bbc <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e04f      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fde:	4b2b      	ldr	r3, [pc, #172]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 020c 	and.w	r2, r3, #12
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d1eb      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff0:	4b25      	ldr	r3, [pc, #148]	@ (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d20c      	bcs.n	8005018 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffe:	4b22      	ldr	r3, [pc, #136]	@ (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b20      	ldr	r3, [pc, #128]	@ (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e032      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005024:	4b19      	ldr	r3, [pc, #100]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4916      	ldr	r1, [pc, #88]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005042:	4b12      	ldr	r3, [pc, #72]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	490e      	ldr	r1, [pc, #56]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005056:	f000 f821 	bl	800509c <HAL_RCC_GetSysClockFreq>
 800505a:	4602      	mov	r2, r0
 800505c:	4b0b      	ldr	r3, [pc, #44]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	091b      	lsrs	r3, r3, #4
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	490a      	ldr	r1, [pc, #40]	@ (8005090 <HAL_RCC_ClockConfig+0x1c0>)
 8005068:	5ccb      	ldrb	r3, [r1, r3]
 800506a:	fa22 f303 	lsr.w	r3, r2, r3
 800506e:	4a09      	ldr	r2, [pc, #36]	@ (8005094 <HAL_RCC_ClockConfig+0x1c4>)
 8005070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005072:	4b09      	ldr	r3, [pc, #36]	@ (8005098 <HAL_RCC_ClockConfig+0x1c8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f7fd fd5c 	bl	8002b34 <HAL_InitTick>

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40023c00 	.word	0x40023c00
 800508c:	40023800 	.word	0x40023800
 8005090:	08018878 	.word	0x08018878
 8005094:	20000004 	.word	0x20000004
 8005098:	20000008 	.word	0x20000008

0800509c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800509c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050a0:	b094      	sub	sp, #80	@ 0x50
 80050a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80050a8:	2300      	movs	r3, #0
 80050aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050ac:	2300      	movs	r3, #0
 80050ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050b4:	4b79      	ldr	r3, [pc, #484]	@ (800529c <HAL_RCC_GetSysClockFreq+0x200>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 030c 	and.w	r3, r3, #12
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d00d      	beq.n	80050dc <HAL_RCC_GetSysClockFreq+0x40>
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	f200 80e1 	bhi.w	8005288 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_RCC_GetSysClockFreq+0x34>
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d003      	beq.n	80050d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80050ce:	e0db      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050d0:	4b73      	ldr	r3, [pc, #460]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80050d2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80050d4:	e0db      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050d6:	4b73      	ldr	r3, [pc, #460]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80050d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050da:	e0d8      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050dc:	4b6f      	ldr	r3, [pc, #444]	@ (800529c <HAL_RCC_GetSysClockFreq+0x200>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050e6:	4b6d      	ldr	r3, [pc, #436]	@ (800529c <HAL_RCC_GetSysClockFreq+0x200>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d063      	beq.n	80051ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050f2:	4b6a      	ldr	r3, [pc, #424]	@ (800529c <HAL_RCC_GetSysClockFreq+0x200>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	099b      	lsrs	r3, r3, #6
 80050f8:	2200      	movs	r2, #0
 80050fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005104:	633b      	str	r3, [r7, #48]	@ 0x30
 8005106:	2300      	movs	r3, #0
 8005108:	637b      	str	r3, [r7, #52]	@ 0x34
 800510a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800510e:	4622      	mov	r2, r4
 8005110:	462b      	mov	r3, r5
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f04f 0100 	mov.w	r1, #0
 800511a:	0159      	lsls	r1, r3, #5
 800511c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005120:	0150      	lsls	r0, r2, #5
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4621      	mov	r1, r4
 8005128:	1a51      	subs	r1, r2, r1
 800512a:	6139      	str	r1, [r7, #16]
 800512c:	4629      	mov	r1, r5
 800512e:	eb63 0301 	sbc.w	r3, r3, r1
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005140:	4659      	mov	r1, fp
 8005142:	018b      	lsls	r3, r1, #6
 8005144:	4651      	mov	r1, sl
 8005146:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800514a:	4651      	mov	r1, sl
 800514c:	018a      	lsls	r2, r1, #6
 800514e:	4651      	mov	r1, sl
 8005150:	ebb2 0801 	subs.w	r8, r2, r1
 8005154:	4659      	mov	r1, fp
 8005156:	eb63 0901 	sbc.w	r9, r3, r1
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005166:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800516a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800516e:	4690      	mov	r8, r2
 8005170:	4699      	mov	r9, r3
 8005172:	4623      	mov	r3, r4
 8005174:	eb18 0303 	adds.w	r3, r8, r3
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	462b      	mov	r3, r5
 800517c:	eb49 0303 	adc.w	r3, r9, r3
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800518e:	4629      	mov	r1, r5
 8005190:	024b      	lsls	r3, r1, #9
 8005192:	4621      	mov	r1, r4
 8005194:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005198:	4621      	mov	r1, r4
 800519a:	024a      	lsls	r2, r1, #9
 800519c:	4610      	mov	r0, r2
 800519e:	4619      	mov	r1, r3
 80051a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051a2:	2200      	movs	r2, #0
 80051a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051ac:	f7fb fd6e 	bl	8000c8c <__aeabi_uldivmod>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4613      	mov	r3, r2
 80051b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051b8:	e058      	b.n	800526c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ba:	4b38      	ldr	r3, [pc, #224]	@ (800529c <HAL_RCC_GetSysClockFreq+0x200>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	099b      	lsrs	r3, r3, #6
 80051c0:	2200      	movs	r2, #0
 80051c2:	4618      	mov	r0, r3
 80051c4:	4611      	mov	r1, r2
 80051c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051ca:	623b      	str	r3, [r7, #32]
 80051cc:	2300      	movs	r3, #0
 80051ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80051d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051d4:	4642      	mov	r2, r8
 80051d6:	464b      	mov	r3, r9
 80051d8:	f04f 0000 	mov.w	r0, #0
 80051dc:	f04f 0100 	mov.w	r1, #0
 80051e0:	0159      	lsls	r1, r3, #5
 80051e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051e6:	0150      	lsls	r0, r2, #5
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4641      	mov	r1, r8
 80051ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80051f2:	4649      	mov	r1, r9
 80051f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005204:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005208:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800520c:	ebb2 040a 	subs.w	r4, r2, sl
 8005210:	eb63 050b 	sbc.w	r5, r3, fp
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	00eb      	lsls	r3, r5, #3
 800521e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005222:	00e2      	lsls	r2, r4, #3
 8005224:	4614      	mov	r4, r2
 8005226:	461d      	mov	r5, r3
 8005228:	4643      	mov	r3, r8
 800522a:	18e3      	adds	r3, r4, r3
 800522c:	603b      	str	r3, [r7, #0]
 800522e:	464b      	mov	r3, r9
 8005230:	eb45 0303 	adc.w	r3, r5, r3
 8005234:	607b      	str	r3, [r7, #4]
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005242:	4629      	mov	r1, r5
 8005244:	028b      	lsls	r3, r1, #10
 8005246:	4621      	mov	r1, r4
 8005248:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800524c:	4621      	mov	r1, r4
 800524e:	028a      	lsls	r2, r1, #10
 8005250:	4610      	mov	r0, r2
 8005252:	4619      	mov	r1, r3
 8005254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005256:	2200      	movs	r2, #0
 8005258:	61bb      	str	r3, [r7, #24]
 800525a:	61fa      	str	r2, [r7, #28]
 800525c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005260:	f7fb fd14 	bl	8000c8c <__aeabi_uldivmod>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4613      	mov	r3, r2
 800526a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800526c:	4b0b      	ldr	r3, [pc, #44]	@ (800529c <HAL_RCC_GetSysClockFreq+0x200>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	0c1b      	lsrs	r3, r3, #16
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	3301      	adds	r3, #1
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800527c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800527e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005286:	e002      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005288:	4b05      	ldr	r3, [pc, #20]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800528a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800528c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800528e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005290:	4618      	mov	r0, r3
 8005292:	3750      	adds	r7, #80	@ 0x50
 8005294:	46bd      	mov	sp, r7
 8005296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800529a:	bf00      	nop
 800529c:	40023800 	.word	0x40023800
 80052a0:	00f42400 	.word	0x00f42400
 80052a4:	007a1200 	.word	0x007a1200

080052a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052ac:	4b03      	ldr	r3, [pc, #12]	@ (80052bc <HAL_RCC_GetHCLKFreq+0x14>)
 80052ae:	681b      	ldr	r3, [r3, #0]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	20000004 	.word	0x20000004

080052c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052c4:	f7ff fff0 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 80052c8:	4602      	mov	r2, r0
 80052ca:	4b05      	ldr	r3, [pc, #20]	@ (80052e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	0a9b      	lsrs	r3, r3, #10
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	4903      	ldr	r1, [pc, #12]	@ (80052e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052d6:	5ccb      	ldrb	r3, [r1, r3]
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40023800 	.word	0x40023800
 80052e4:	08018888 	.word	0x08018888

080052e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052ec:	f7ff ffdc 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 80052f0:	4602      	mov	r2, r0
 80052f2:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	0b5b      	lsrs	r3, r3, #13
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	4903      	ldr	r1, [pc, #12]	@ (800530c <HAL_RCC_GetPCLK2Freq+0x24>)
 80052fe:	5ccb      	ldrb	r3, [r1, r3]
 8005300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005304:	4618      	mov	r0, r3
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40023800 	.word	0x40023800
 800530c:	08018888 	.word	0x08018888

08005310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e041      	b.n	80053a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fd f8a2 	bl	8002480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3304      	adds	r3, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f000 fac0 	bl	80058d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e041      	b.n	8005444 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d106      	bne.n	80053da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f839 	bl	800544c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3304      	adds	r3, #4
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f000 fa71 	bl	80058d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d109      	bne.n	8005484 <HAL_TIM_PWM_Start+0x24>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b01      	cmp	r3, #1
 800547a:	bf14      	ite	ne
 800547c:	2301      	movne	r3, #1
 800547e:	2300      	moveq	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	e022      	b.n	80054ca <HAL_TIM_PWM_Start+0x6a>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b04      	cmp	r3, #4
 8005488:	d109      	bne.n	800549e <HAL_TIM_PWM_Start+0x3e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b01      	cmp	r3, #1
 8005494:	bf14      	ite	ne
 8005496:	2301      	movne	r3, #1
 8005498:	2300      	moveq	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	e015      	b.n	80054ca <HAL_TIM_PWM_Start+0x6a>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d109      	bne.n	80054b8 <HAL_TIM_PWM_Start+0x58>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	bf14      	ite	ne
 80054b0:	2301      	movne	r3, #1
 80054b2:	2300      	moveq	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	e008      	b.n	80054ca <HAL_TIM_PWM_Start+0x6a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	bf14      	ite	ne
 80054c4:	2301      	movne	r3, #1
 80054c6:	2300      	moveq	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e068      	b.n	80055a4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d104      	bne.n	80054e2 <HAL_TIM_PWM_Start+0x82>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054e0:	e013      	b.n	800550a <HAL_TIM_PWM_Start+0xaa>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d104      	bne.n	80054f2 <HAL_TIM_PWM_Start+0x92>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054f0:	e00b      	b.n	800550a <HAL_TIM_PWM_Start+0xaa>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d104      	bne.n	8005502 <HAL_TIM_PWM_Start+0xa2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005500:	e003      	b.n	800550a <HAL_TIM_PWM_Start+0xaa>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2201      	movs	r2, #1
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fc90 	bl	8005e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a23      	ldr	r2, [pc, #140]	@ (80055ac <HAL_TIM_PWM_Start+0x14c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d107      	bne.n	8005532 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005530:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1d      	ldr	r2, [pc, #116]	@ (80055ac <HAL_TIM_PWM_Start+0x14c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d018      	beq.n	800556e <HAL_TIM_PWM_Start+0x10e>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005544:	d013      	beq.n	800556e <HAL_TIM_PWM_Start+0x10e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a19      	ldr	r2, [pc, #100]	@ (80055b0 <HAL_TIM_PWM_Start+0x150>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00e      	beq.n	800556e <HAL_TIM_PWM_Start+0x10e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a17      	ldr	r2, [pc, #92]	@ (80055b4 <HAL_TIM_PWM_Start+0x154>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d009      	beq.n	800556e <HAL_TIM_PWM_Start+0x10e>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a16      	ldr	r2, [pc, #88]	@ (80055b8 <HAL_TIM_PWM_Start+0x158>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d004      	beq.n	800556e <HAL_TIM_PWM_Start+0x10e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a14      	ldr	r2, [pc, #80]	@ (80055bc <HAL_TIM_PWM_Start+0x15c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d111      	bne.n	8005592 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b06      	cmp	r3, #6
 800557e:	d010      	beq.n	80055a2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005590:	e007      	b.n	80055a2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0201 	orr.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40010000 	.word	0x40010000
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40000c00 	.word	0x40000c00
 80055bc:	40014000 	.word	0x40014000

080055c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055da:	2302      	movs	r3, #2
 80055dc:	e0ae      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b0c      	cmp	r3, #12
 80055ea:	f200 809f 	bhi.w	800572c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055ee:	a201      	add	r2, pc, #4	@ (adr r2, 80055f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f4:	08005629 	.word	0x08005629
 80055f8:	0800572d 	.word	0x0800572d
 80055fc:	0800572d 	.word	0x0800572d
 8005600:	0800572d 	.word	0x0800572d
 8005604:	08005669 	.word	0x08005669
 8005608:	0800572d 	.word	0x0800572d
 800560c:	0800572d 	.word	0x0800572d
 8005610:	0800572d 	.word	0x0800572d
 8005614:	080056ab 	.word	0x080056ab
 8005618:	0800572d 	.word	0x0800572d
 800561c:	0800572d 	.word	0x0800572d
 8005620:	0800572d 	.word	0x0800572d
 8005624:	080056eb 	.word	0x080056eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 f9dc 	bl	80059ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0208 	orr.w	r2, r2, #8
 8005642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0204 	bic.w	r2, r2, #4
 8005652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6999      	ldr	r1, [r3, #24]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	619a      	str	r2, [r3, #24]
      break;
 8005666:	e064      	b.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fa22 	bl	8005ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6999      	ldr	r1, [r3, #24]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	021a      	lsls	r2, r3, #8
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	619a      	str	r2, [r3, #24]
      break;
 80056a8:	e043      	b.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fa6d 	bl	8005b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0208 	orr.w	r2, r2, #8
 80056c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0204 	bic.w	r2, r2, #4
 80056d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69d9      	ldr	r1, [r3, #28]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	61da      	str	r2, [r3, #28]
      break;
 80056e8:	e023      	b.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fab7 	bl	8005c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69d9      	ldr	r1, [r3, #28]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	021a      	lsls	r2, r3, #8
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	61da      	str	r2, [r3, #28]
      break;
 800572a:	e002      	b.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	75fb      	strb	r3, [r7, #23]
      break;
 8005730:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800573a:	7dfb      	ldrb	r3, [r7, #23]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_TIM_ConfigClockSource+0x1c>
 800575c:	2302      	movs	r3, #2
 800575e:	e0b4      	b.n	80058ca <HAL_TIM_ConfigClockSource+0x186>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800577e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005798:	d03e      	beq.n	8005818 <HAL_TIM_ConfigClockSource+0xd4>
 800579a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800579e:	f200 8087 	bhi.w	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a6:	f000 8086 	beq.w	80058b6 <HAL_TIM_ConfigClockSource+0x172>
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ae:	d87f      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057b0:	2b70      	cmp	r3, #112	@ 0x70
 80057b2:	d01a      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0xa6>
 80057b4:	2b70      	cmp	r3, #112	@ 0x70
 80057b6:	d87b      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057b8:	2b60      	cmp	r3, #96	@ 0x60
 80057ba:	d050      	beq.n	800585e <HAL_TIM_ConfigClockSource+0x11a>
 80057bc:	2b60      	cmp	r3, #96	@ 0x60
 80057be:	d877      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c0:	2b50      	cmp	r3, #80	@ 0x50
 80057c2:	d03c      	beq.n	800583e <HAL_TIM_ConfigClockSource+0xfa>
 80057c4:	2b50      	cmp	r3, #80	@ 0x50
 80057c6:	d873      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c8:	2b40      	cmp	r3, #64	@ 0x40
 80057ca:	d058      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x13a>
 80057cc:	2b40      	cmp	r3, #64	@ 0x40
 80057ce:	d86f      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d0:	2b30      	cmp	r3, #48	@ 0x30
 80057d2:	d064      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057d4:	2b30      	cmp	r3, #48	@ 0x30
 80057d6:	d86b      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d060      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d867      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d05c      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057e4:	2b10      	cmp	r3, #16
 80057e6:	d05a      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057e8:	e062      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057fa:	f000 fafd 	bl	8005df8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800580c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	609a      	str	r2, [r3, #8]
      break;
 8005816:	e04f      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005828:	f000 fae6 	bl	8005df8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800583a:	609a      	str	r2, [r3, #8]
      break;
 800583c:	e03c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800584a:	461a      	mov	r2, r3
 800584c:	f000 fa5a 	bl	8005d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2150      	movs	r1, #80	@ 0x50
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fab3 	bl	8005dc2 <TIM_ITRx_SetConfig>
      break;
 800585c:	e02c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800586a:	461a      	mov	r2, r3
 800586c:	f000 fa79 	bl	8005d62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2160      	movs	r1, #96	@ 0x60
 8005876:	4618      	mov	r0, r3
 8005878:	f000 faa3 	bl	8005dc2 <TIM_ITRx_SetConfig>
      break;
 800587c:	e01c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800588a:	461a      	mov	r2, r3
 800588c:	f000 fa3a 	bl	8005d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2140      	movs	r1, #64	@ 0x40
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fa93 	bl	8005dc2 <TIM_ITRx_SetConfig>
      break;
 800589c:	e00c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4619      	mov	r1, r3
 80058a8:	4610      	mov	r0, r2
 80058aa:	f000 fa8a 	bl	8005dc2 <TIM_ITRx_SetConfig>
      break;
 80058ae:	e003      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]
      break;
 80058b4:	e000      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a3a      	ldr	r2, [pc, #232]	@ (80059d0 <TIM_Base_SetConfig+0xfc>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00f      	beq.n	800590c <TIM_Base_SetConfig+0x38>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058f2:	d00b      	beq.n	800590c <TIM_Base_SetConfig+0x38>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a37      	ldr	r2, [pc, #220]	@ (80059d4 <TIM_Base_SetConfig+0x100>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d007      	beq.n	800590c <TIM_Base_SetConfig+0x38>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a36      	ldr	r2, [pc, #216]	@ (80059d8 <TIM_Base_SetConfig+0x104>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d003      	beq.n	800590c <TIM_Base_SetConfig+0x38>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a35      	ldr	r2, [pc, #212]	@ (80059dc <TIM_Base_SetConfig+0x108>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d108      	bne.n	800591e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a2b      	ldr	r2, [pc, #172]	@ (80059d0 <TIM_Base_SetConfig+0xfc>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d01b      	beq.n	800595e <TIM_Base_SetConfig+0x8a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800592c:	d017      	beq.n	800595e <TIM_Base_SetConfig+0x8a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a28      	ldr	r2, [pc, #160]	@ (80059d4 <TIM_Base_SetConfig+0x100>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d013      	beq.n	800595e <TIM_Base_SetConfig+0x8a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a27      	ldr	r2, [pc, #156]	@ (80059d8 <TIM_Base_SetConfig+0x104>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00f      	beq.n	800595e <TIM_Base_SetConfig+0x8a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a26      	ldr	r2, [pc, #152]	@ (80059dc <TIM_Base_SetConfig+0x108>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00b      	beq.n	800595e <TIM_Base_SetConfig+0x8a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a25      	ldr	r2, [pc, #148]	@ (80059e0 <TIM_Base_SetConfig+0x10c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d007      	beq.n	800595e <TIM_Base_SetConfig+0x8a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a24      	ldr	r2, [pc, #144]	@ (80059e4 <TIM_Base_SetConfig+0x110>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d003      	beq.n	800595e <TIM_Base_SetConfig+0x8a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a23      	ldr	r2, [pc, #140]	@ (80059e8 <TIM_Base_SetConfig+0x114>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d108      	bne.n	8005970 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a0e      	ldr	r2, [pc, #56]	@ (80059d0 <TIM_Base_SetConfig+0xfc>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d103      	bne.n	80059a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d105      	bne.n	80059c2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f023 0201 	bic.w	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	611a      	str	r2, [r3, #16]
  }
}
 80059c2:	bf00      	nop
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40000800 	.word	0x40000800
 80059dc:	40000c00 	.word	0x40000c00
 80059e0:	40014000 	.word	0x40014000
 80059e4:	40014400 	.word	0x40014400
 80059e8:	40014800 	.word	0x40014800

080059ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	f023 0201 	bic.w	r2, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0303 	bic.w	r3, r3, #3
 8005a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f023 0302 	bic.w	r3, r3, #2
 8005a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab4 <TIM_OC1_SetConfig+0xc8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d10c      	bne.n	8005a62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f023 0308 	bic.w	r3, r3, #8
 8005a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f023 0304 	bic.w	r3, r3, #4
 8005a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a13      	ldr	r2, [pc, #76]	@ (8005ab4 <TIM_OC1_SetConfig+0xc8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d111      	bne.n	8005a8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	621a      	str	r2, [r3, #32]
}
 8005aa8:	bf00      	nop
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	40010000 	.word	0x40010000

08005ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f023 0210 	bic.w	r2, r3, #16
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 0320 	bic.w	r3, r3, #32
 8005b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a1e      	ldr	r2, [pc, #120]	@ (8005b8c <TIM_OC2_SetConfig+0xd4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d10d      	bne.n	8005b34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a15      	ldr	r2, [pc, #84]	@ (8005b8c <TIM_OC2_SetConfig+0xd4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d113      	bne.n	8005b64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40010000 	.word	0x40010000

08005b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0303 	bic.w	r3, r3, #3
 8005bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c60 <TIM_OC3_SetConfig+0xd0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d10d      	bne.n	8005c0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a14      	ldr	r2, [pc, #80]	@ (8005c60 <TIM_OC3_SetConfig+0xd0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d113      	bne.n	8005c3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	621a      	str	r2, [r3, #32]
}
 8005c54:	bf00      	nop
 8005c56:	371c      	adds	r7, #28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	40010000 	.word	0x40010000

08005c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	031b      	lsls	r3, r3, #12
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a10      	ldr	r2, [pc, #64]	@ (8005d00 <TIM_OC4_SetConfig+0x9c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d109      	bne.n	8005cd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	019b      	lsls	r3, r3, #6
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	621a      	str	r2, [r3, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40010000 	.word	0x40010000

08005d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f023 0201 	bic.w	r2, r3, #1
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f023 030a 	bic.w	r3, r3, #10
 8005d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	621a      	str	r2, [r3, #32]
}
 8005d56:	bf00      	nop
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b087      	sub	sp, #28
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	f023 0210 	bic.w	r2, r3, #16
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	031b      	lsls	r3, r3, #12
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f043 0307 	orr.w	r3, r3, #7
 8005de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	609a      	str	r2, [r3, #8]
}
 8005dec:	bf00      	nop
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	021a      	lsls	r2, r3, #8
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	609a      	str	r2, [r3, #8]
}
 8005e2c:	bf00      	nop
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f003 031f 	and.w	r3, r3, #31
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a1a      	ldr	r2, [r3, #32]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	401a      	ands	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a1a      	ldr	r2, [r3, #32]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e70:	431a      	orrs	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
	...

08005e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e050      	b.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1c      	ldr	r2, [pc, #112]	@ (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d018      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee8:	d013      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a18      	ldr	r2, [pc, #96]	@ (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00e      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a16      	ldr	r2, [pc, #88]	@ (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d009      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a15      	ldr	r2, [pc, #84]	@ (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d004      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a13      	ldr	r2, [pc, #76]	@ (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d10c      	bne.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40014000 	.word	0x40014000

08005f60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e042      	b.n	8005ff8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fc faf6 	bl	8002578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2224      	movs	r2, #36	@ 0x24
 8005f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 ffc9 	bl	8006f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695a      	ldr	r2, [r3, #20]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08c      	sub	sp, #48	@ 0x30
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	4613      	mov	r3, r2
 800600c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b20      	cmp	r3, #32
 8006018:	d156      	bne.n	80060c8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <HAL_UART_Transmit_DMA+0x26>
 8006020:	88fb      	ldrh	r3, [r7, #6]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e04f      	b.n	80060ca <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	88fa      	ldrh	r2, [r7, #6]
 8006034:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	88fa      	ldrh	r2, [r7, #6]
 800603a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2221      	movs	r2, #33	@ 0x21
 8006046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604e:	4a21      	ldr	r2, [pc, #132]	@ (80060d4 <HAL_UART_Transmit_DMA+0xd4>)
 8006050:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006056:	4a20      	ldr	r2, [pc, #128]	@ (80060d8 <HAL_UART_Transmit_DMA+0xd8>)
 8006058:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605e:	4a1f      	ldr	r2, [pc, #124]	@ (80060dc <HAL_UART_Transmit_DMA+0xdc>)
 8006060:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006066:	2200      	movs	r2, #0
 8006068:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800606a:	f107 0308 	add.w	r3, r7, #8
 800606e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006076:	6819      	ldr	r1, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3304      	adds	r3, #4
 800607e:	461a      	mov	r2, r3
 8006080:	88fb      	ldrh	r3, [r7, #6]
 8006082:	f7fc ff67 	bl	8002f54 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800608e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3314      	adds	r3, #20
 8006096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	e853 3f00 	ldrex	r3, [r3]
 800609e:	617b      	str	r3, [r7, #20]
   return(result);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3314      	adds	r3, #20
 80060ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80060b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b4:	6a39      	ldr	r1, [r7, #32]
 80060b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b8:	e841 2300 	strex	r3, r2, [r1]
 80060bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1e5      	bne.n	8006090 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	e000      	b.n	80060ca <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80060c8:	2302      	movs	r3, #2
  }
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3730      	adds	r7, #48	@ 0x30
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	080067c9 	.word	0x080067c9
 80060d8:	08006863 	.word	0x08006863
 80060dc:	080069e7 	.word	0x080069e7

080060e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d112      	bne.n	8006120 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <HAL_UART_Receive_DMA+0x26>
 8006100:	88fb      	ldrh	r3, [r7, #6]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e00b      	b.n	8006122 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006110:	88fb      	ldrh	r3, [r7, #6]
 8006112:	461a      	mov	r2, r3
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 fcb0 	bl	8006a7c <UART_Start_Receive_DMA>
 800611c:	4603      	mov	r3, r0
 800611e:	e000      	b.n	8006122 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006120:	2302      	movs	r3, #2
  }
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b090      	sub	sp, #64	@ 0x40
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006132:	2300      	movs	r3, #0
 8006134:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006140:	2b80      	cmp	r3, #128	@ 0x80
 8006142:	bf0c      	ite	eq
 8006144:	2301      	moveq	r3, #1
 8006146:	2300      	movne	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b21      	cmp	r3, #33	@ 0x21
 8006156:	d128      	bne.n	80061aa <HAL_UART_DMAStop+0x80>
 8006158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800615a:	2b00      	cmp	r3, #0
 800615c:	d025      	beq.n	80061aa <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3314      	adds	r3, #20
 8006164:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	623b      	str	r3, [r7, #32]
   return(result);
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006174:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3314      	adds	r3, #20
 800617c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800617e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006180:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800618c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e5      	bne.n	800615e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006196:	2b00      	cmp	r3, #0
 8006198:	d004      	beq.n	80061a4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fc ff30 	bl	8003004 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fd03 	bl	8006bb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b4:	2b40      	cmp	r3, #64	@ 0x40
 80061b6:	bf0c      	ite	eq
 80061b8:	2301      	moveq	r3, #1
 80061ba:	2300      	movne	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b22      	cmp	r3, #34	@ 0x22
 80061ca:	d128      	bne.n	800621e <HAL_UART_DMAStop+0xf4>
 80061cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d025      	beq.n	800621e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3314      	adds	r3, #20
 80061d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3314      	adds	r3, #20
 80061f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061f2:	61fa      	str	r2, [r7, #28]
 80061f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	69b9      	ldr	r1, [r7, #24]
 80061f8:	69fa      	ldr	r2, [r7, #28]
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e5      	bne.n	80061d2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800620a:	2b00      	cmp	r3, #0
 800620c:	d004      	beq.n	8006218 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006212:	4618      	mov	r0, r3
 8006214:	f7fc fef6 	bl	8003004 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fcf1 	bl	8006c00 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3740      	adds	r7, #64	@ 0x40
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b0ba      	sub	sp, #232	@ 0xe8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800624e:	2300      	movs	r3, #0
 8006250:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006254:	2300      	movs	r3, #0
 8006256:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800625a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10f      	bne.n	800628e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800626e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d009      	beq.n	800628e <HAL_UART_IRQHandler+0x66>
 800627a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fd99 	bl	8006dbe <UART_Receive_IT>
      return;
 800628c:	e25b      	b.n	8006746 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800628e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 80de 	beq.w	8006454 <HAL_UART_IRQHandler+0x22c>
 8006298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d106      	bne.n	80062b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 80d1 	beq.w	8006454 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00b      	beq.n	80062d6 <HAL_UART_IRQHandler+0xae>
 80062be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ce:	f043 0201 	orr.w	r2, r3, #1
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <HAL_UART_IRQHandler+0xd2>
 80062e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f2:	f043 0202 	orr.w	r2, r3, #2
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00b      	beq.n	800631e <HAL_UART_IRQHandler+0xf6>
 8006306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006316:	f043 0204 	orr.w	r2, r3, #4
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d011      	beq.n	800634e <HAL_UART_IRQHandler+0x126>
 800632a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d105      	bne.n	8006342 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d005      	beq.n	800634e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006346:	f043 0208 	orr.w	r2, r3, #8
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 81f2 	beq.w	800673c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <HAL_UART_IRQHandler+0x14e>
 8006364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fd24 	bl	8006dbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006380:	2b40      	cmp	r3, #64	@ 0x40
 8006382:	bf0c      	ite	eq
 8006384:	2301      	moveq	r3, #1
 8006386:	2300      	movne	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006392:	f003 0308 	and.w	r3, r3, #8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d103      	bne.n	80063a2 <HAL_UART_IRQHandler+0x17a>
 800639a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d04f      	beq.n	8006442 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fc2c 	bl	8006c00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b2:	2b40      	cmp	r3, #64	@ 0x40
 80063b4:	d141      	bne.n	800643a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3314      	adds	r3, #20
 80063bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3314      	adds	r3, #20
 80063de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1d9      	bne.n	80063b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d013      	beq.n	8006432 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800640e:	4a7e      	ldr	r2, [pc, #504]	@ (8006608 <HAL_UART_IRQHandler+0x3e0>)
 8006410:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006416:	4618      	mov	r0, r3
 8006418:	f7fc fe64 	bl	80030e4 <HAL_DMA_Abort_IT>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d016      	beq.n	8006450 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800642c:	4610      	mov	r0, r2
 800642e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006430:	e00e      	b.n	8006450 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f9b2 	bl	800679c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006438:	e00a      	b.n	8006450 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f9ae 	bl	800679c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006440:	e006      	b.n	8006450 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f9aa 	bl	800679c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800644e:	e175      	b.n	800673c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006450:	bf00      	nop
    return;
 8006452:	e173      	b.n	800673c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006458:	2b01      	cmp	r3, #1
 800645a:	f040 814f 	bne.w	80066fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800645e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006462:	f003 0310 	and.w	r3, r3, #16
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 8148 	beq.w	80066fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800646c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006470:	f003 0310 	and.w	r3, r3, #16
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 8141 	beq.w	80066fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800647a:	2300      	movs	r3, #0
 800647c:	60bb      	str	r3, [r7, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60bb      	str	r3, [r7, #8]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	60bb      	str	r3, [r7, #8]
 800648e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649a:	2b40      	cmp	r3, #64	@ 0x40
 800649c:	f040 80b6 	bne.w	800660c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 8145 	beq.w	8006740 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064be:	429a      	cmp	r2, r3
 80064c0:	f080 813e 	bcs.w	8006740 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064d6:	f000 8088 	beq.w	80065ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	330c      	adds	r3, #12
 80064e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	330c      	adds	r3, #12
 8006502:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006506:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800650a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006512:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800651e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1d9      	bne.n	80064da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3314      	adds	r3, #20
 800652c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3314      	adds	r3, #20
 8006546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800654a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800654e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006552:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800655c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e1      	bne.n	8006526 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3314      	adds	r3, #20
 8006568:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800656c:	e853 3f00 	ldrex	r3, [r3]
 8006570:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006578:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3314      	adds	r3, #20
 8006582:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006586:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006588:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800658c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e3      	bne.n	8006562 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330c      	adds	r3, #12
 80065ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065ba:	f023 0310 	bic.w	r3, r3, #16
 80065be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	330c      	adds	r3, #12
 80065c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80065cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065d4:	e841 2300 	strex	r3, r2, [r1]
 80065d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e3      	bne.n	80065a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fc fd0d 	bl	8003004 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2202      	movs	r2, #2
 80065ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f8d5 	bl	80067b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006606:	e09b      	b.n	8006740 <HAL_UART_IRQHandler+0x518>
 8006608:	08006cc7 	.word	0x08006cc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006614:	b29b      	uxth	r3, r3
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 808e 	beq.w	8006744 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006628:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 8089 	beq.w	8006744 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	330c      	adds	r3, #12
 8006638:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006644:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006648:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	330c      	adds	r3, #12
 8006652:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006656:	647a      	str	r2, [r7, #68]	@ 0x44
 8006658:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800665c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e3      	bne.n	8006632 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3314      	adds	r3, #20
 8006670:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	623b      	str	r3, [r7, #32]
   return(result);
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	f023 0301 	bic.w	r3, r3, #1
 8006680:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3314      	adds	r3, #20
 800668a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800668e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006690:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800669c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e3      	bne.n	800666a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	330c      	adds	r3, #12
 80066b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	60fb      	str	r3, [r7, #12]
   return(result);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0310 	bic.w	r3, r3, #16
 80066c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	330c      	adds	r3, #12
 80066d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80066d4:	61fa      	str	r2, [r7, #28]
 80066d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	69b9      	ldr	r1, [r7, #24]
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	e841 2300 	strex	r3, r2, [r1]
 80066e0:	617b      	str	r3, [r7, #20]
   return(result);
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e3      	bne.n	80066b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f85b 	bl	80067b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066fa:	e023      	b.n	8006744 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006704:	2b00      	cmp	r3, #0
 8006706:	d009      	beq.n	800671c <HAL_UART_IRQHandler+0x4f4>
 8006708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800670c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 faea 	bl	8006cee <UART_Transmit_IT>
    return;
 800671a:	e014      	b.n	8006746 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800671c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00e      	beq.n	8006746 <HAL_UART_IRQHandler+0x51e>
 8006728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800672c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006730:	2b00      	cmp	r3, #0
 8006732:	d008      	beq.n	8006746 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fb2a 	bl	8006d8e <UART_EndTransmit_IT>
    return;
 800673a:	e004      	b.n	8006746 <HAL_UART_IRQHandler+0x51e>
    return;
 800673c:	bf00      	nop
 800673e:	e002      	b.n	8006746 <HAL_UART_IRQHandler+0x51e>
      return;
 8006740:	bf00      	nop
 8006742:	e000      	b.n	8006746 <HAL_UART_IRQHandler+0x51e>
      return;
 8006744:	bf00      	nop
  }
}
 8006746:	37e8      	adds	r7, #232	@ 0xe8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b090      	sub	sp, #64	@ 0x40
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d137      	bne.n	8006854 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80067e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e6:	2200      	movs	r2, #0
 80067e8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3314      	adds	r3, #20
 80067f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	623b      	str	r3, [r7, #32]
   return(result);
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006800:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3314      	adds	r3, #20
 8006808:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800680a:	633a      	str	r2, [r7, #48]	@ 0x30
 800680c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e5      	bne.n	80067ea <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800681e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	330c      	adds	r3, #12
 8006824:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	60fb      	str	r3, [r7, #12]
   return(result);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006834:	637b      	str	r3, [r7, #52]	@ 0x34
 8006836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	330c      	adds	r3, #12
 800683c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800683e:	61fa      	str	r2, [r7, #28]
 8006840:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	69b9      	ldr	r1, [r7, #24]
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	e841 2300 	strex	r3, r2, [r1]
 800684a:	617b      	str	r3, [r7, #20]
   return(result);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1e5      	bne.n	800681e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006852:	e002      	b.n	800685a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006854:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006856:	f7ff ff79 	bl	800674c <HAL_UART_TxCpltCallback>
}
 800685a:	bf00      	nop
 800685c:	3740      	adds	r7, #64	@ 0x40
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7ff ff75 	bl	8006760 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006876:	bf00      	nop
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b09c      	sub	sp, #112	@ 0x70
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006896:	2b00      	cmp	r3, #0
 8006898:	d172      	bne.n	8006980 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800689a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800689c:	2200      	movs	r2, #0
 800689e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	330c      	adds	r3, #12
 80068a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	330c      	adds	r3, #12
 80068be:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80068c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80068c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e5      	bne.n	80068a0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3314      	adds	r3, #20
 80068da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068e6:	f023 0301 	bic.w	r3, r3, #1
 80068ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80068ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3314      	adds	r3, #20
 80068f2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80068f4:	647a      	str	r2, [r7, #68]	@ 0x44
 80068f6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e5      	bne.n	80068d4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006908:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3314      	adds	r3, #20
 800690e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006912:	e853 3f00 	ldrex	r3, [r3]
 8006916:	623b      	str	r3, [r7, #32]
   return(result);
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800691e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006920:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3314      	adds	r3, #20
 8006926:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006928:	633a      	str	r2, [r7, #48]	@ 0x30
 800692a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800692e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006930:	e841 2300 	strex	r3, r2, [r1]
 8006934:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e5      	bne.n	8006908 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800693c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800693e:	2220      	movs	r2, #32
 8006940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006948:	2b01      	cmp	r3, #1
 800694a:	d119      	bne.n	8006980 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	330c      	adds	r3, #12
 8006952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	60fb      	str	r3, [r7, #12]
   return(result);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0310 	bic.w	r3, r3, #16
 8006962:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006964:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	330c      	adds	r3, #12
 800696a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800696c:	61fa      	str	r2, [r7, #28]
 800696e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	69b9      	ldr	r1, [r7, #24]
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	617b      	str	r3, [r7, #20]
   return(result);
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e5      	bne.n	800694c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006982:	2200      	movs	r2, #0
 8006984:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698a:	2b01      	cmp	r3, #1
 800698c:	d106      	bne.n	800699c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800698e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006990:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006992:	4619      	mov	r1, r3
 8006994:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006996:	f7ff ff0b 	bl	80067b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800699a:	e002      	b.n	80069a2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800699c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800699e:	f7ff fee9 	bl	8006774 <HAL_UART_RxCpltCallback>
}
 80069a2:	bf00      	nop
 80069a4:	3770      	adds	r7, #112	@ 0x70
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2201      	movs	r2, #1
 80069bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d108      	bne.n	80069d8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069ca:	085b      	lsrs	r3, r3, #1
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	4619      	mov	r1, r3
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f7ff feed 	bl	80067b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069d6:	e002      	b.n	80069de <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f7ff fed5 	bl	8006788 <HAL_UART_RxHalfCpltCallback>
}
 80069de:	bf00      	nop
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a02:	2b80      	cmp	r3, #128	@ 0x80
 8006a04:	bf0c      	ite	eq
 8006a06:	2301      	moveq	r3, #1
 8006a08:	2300      	movne	r3, #0
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b21      	cmp	r3, #33	@ 0x21
 8006a18:	d108      	bne.n	8006a2c <UART_DMAError+0x46>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d005      	beq.n	8006a2c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2200      	movs	r2, #0
 8006a24:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006a26:	68b8      	ldr	r0, [r7, #8]
 8006a28:	f000 f8c2 	bl	8006bb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a36:	2b40      	cmp	r3, #64	@ 0x40
 8006a38:	bf0c      	ite	eq
 8006a3a:	2301      	moveq	r3, #1
 8006a3c:	2300      	movne	r3, #0
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b22      	cmp	r3, #34	@ 0x22
 8006a4c:	d108      	bne.n	8006a60 <UART_DMAError+0x7a>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2200      	movs	r2, #0
 8006a58:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006a5a:	68b8      	ldr	r0, [r7, #8]
 8006a5c:	f000 f8d0 	bl	8006c00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a64:	f043 0210 	orr.w	r2, r3, #16
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a6c:	68b8      	ldr	r0, [r7, #8]
 8006a6e:	f7ff fe95 	bl	800679c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b098      	sub	sp, #96	@ 0x60
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	88fa      	ldrh	r2, [r7, #6]
 8006a94:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2222      	movs	r2, #34	@ 0x22
 8006aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa8:	4a3e      	ldr	r2, [pc, #248]	@ (8006ba4 <UART_Start_Receive_DMA+0x128>)
 8006aaa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab0:	4a3d      	ldr	r2, [pc, #244]	@ (8006ba8 <UART_Start_Receive_DMA+0x12c>)
 8006ab2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab8:	4a3c      	ldr	r2, [pc, #240]	@ (8006bac <UART_Start_Receive_DMA+0x130>)
 8006aba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ac4:	f107 0308 	add.w	r3, r7, #8
 8006ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	88fb      	ldrh	r3, [r7, #6]
 8006adc:	f7fc fa3a 	bl	8002f54 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	613b      	str	r3, [r7, #16]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d019      	beq.n	8006b32 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	330c      	adds	r3, #12
 8006b04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	330c      	adds	r3, #12
 8006b1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b1e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006b20:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006b24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e5      	bne.n	8006afe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3314      	adds	r3, #20
 8006b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b44:	f043 0301 	orr.w	r3, r3, #1
 8006b48:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3314      	adds	r3, #20
 8006b50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b52:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006b54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006b58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e5      	bne.n	8006b32 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3314      	adds	r3, #20
 8006b6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	617b      	str	r3, [r7, #20]
   return(result);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3314      	adds	r3, #20
 8006b84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b86:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6a39      	ldr	r1, [r7, #32]
 8006b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e5      	bne.n	8006b66 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3760      	adds	r7, #96	@ 0x60
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	0800687f 	.word	0x0800687f
 8006ba8:	080069ab 	.word	0x080069ab
 8006bac:	080069e7 	.word	0x080069e7

08006bb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b089      	sub	sp, #36	@ 0x24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	330c      	adds	r3, #12
 8006bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	330c      	adds	r3, #12
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	61ba      	str	r2, [r7, #24]
 8006bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6979      	ldr	r1, [r7, #20]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	613b      	str	r3, [r7, #16]
   return(result);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e5      	bne.n	8006bb8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006bf4:	bf00      	nop
 8006bf6:	3724      	adds	r7, #36	@ 0x24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b095      	sub	sp, #84	@ 0x54
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	330c      	adds	r3, #12
 8006c0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	330c      	adds	r3, #12
 8006c26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c28:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e5      	bne.n	8006c08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3314      	adds	r3, #20
 8006c42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3314      	adds	r3, #20
 8006c5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e5      	bne.n	8006c3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d119      	bne.n	8006cac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f023 0310 	bic.w	r3, r3, #16
 8006c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	330c      	adds	r3, #12
 8006c96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c98:	61ba      	str	r2, [r7, #24]
 8006c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	6979      	ldr	r1, [r7, #20]
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e5      	bne.n	8006c78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006cba:	bf00      	nop
 8006cbc:	3754      	adds	r7, #84	@ 0x54
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff fd5b 	bl	800679c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ce6:	bf00      	nop
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b085      	sub	sp, #20
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b21      	cmp	r3, #33	@ 0x21
 8006d00:	d13e      	bne.n	8006d80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d0a:	d114      	bne.n	8006d36 <UART_Transmit_IT+0x48>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d110      	bne.n	8006d36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	1c9a      	adds	r2, r3, #2
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	621a      	str	r2, [r3, #32]
 8006d34:	e008      	b.n	8006d48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	1c59      	adds	r1, r3, #1
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6211      	str	r1, [r2, #32]
 8006d40:	781a      	ldrb	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	4619      	mov	r1, r3
 8006d56:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10f      	bne.n	8006d7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e000      	b.n	8006d82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d80:	2302      	movs	r3, #2
  }
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006da4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7ff fccc 	bl	800674c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b08c      	sub	sp, #48	@ 0x30
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b22      	cmp	r3, #34	@ 0x22
 8006dd0:	f040 80ae 	bne.w	8006f30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ddc:	d117      	bne.n	8006e0e <UART_Receive_IT+0x50>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d113      	bne.n	8006e0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e06:	1c9a      	adds	r2, r3, #2
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e0c:	e026      	b.n	8006e5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e20:	d007      	beq.n	8006e32 <UART_Receive_IT+0x74>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <UART_Receive_IT+0x82>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	e008      	b.n	8006e52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d15d      	bne.n	8006f2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0220 	bic.w	r2, r2, #32
 8006e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	695a      	ldr	r2, [r3, #20]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d135      	bne.n	8006f22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	613b      	str	r3, [r7, #16]
   return(result);
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f023 0310 	bic.w	r3, r3, #16
 8006ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	330c      	adds	r3, #12
 8006eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006edc:	623a      	str	r2, [r7, #32]
 8006ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	69f9      	ldr	r1, [r7, #28]
 8006ee2:	6a3a      	ldr	r2, [r7, #32]
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e5      	bne.n	8006ebc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0310 	and.w	r3, r3, #16
 8006efa:	2b10      	cmp	r3, #16
 8006efc:	d10a      	bne.n	8006f14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fc48 	bl	80067b0 <HAL_UARTEx_RxEventCallback>
 8006f20:	e002      	b.n	8006f28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7ff fc26 	bl	8006774 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e002      	b.n	8006f32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	e000      	b.n	8006f32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f30:	2302      	movs	r3, #2
  }
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3730      	adds	r7, #48	@ 0x30
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f40:	b0c0      	sub	sp, #256	@ 0x100
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f58:	68d9      	ldr	r1, [r3, #12]
 8006f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	ea40 0301 	orr.w	r3, r0, r1
 8006f64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	431a      	orrs	r2, r3
 8006f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f94:	f021 010c 	bic.w	r1, r1, #12
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006fa2:	430b      	orrs	r3, r1
 8006fa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb6:	6999      	ldr	r1, [r3, #24]
 8006fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	ea40 0301 	orr.w	r3, r0, r1
 8006fc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	4b8f      	ldr	r3, [pc, #572]	@ (8007208 <UART_SetConfig+0x2cc>)
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d005      	beq.n	8006fdc <UART_SetConfig+0xa0>
 8006fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800720c <UART_SetConfig+0x2d0>)
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d104      	bne.n	8006fe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fdc:	f7fe f984 	bl	80052e8 <HAL_RCC_GetPCLK2Freq>
 8006fe0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006fe4:	e003      	b.n	8006fee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fe6:	f7fe f96b 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 8006fea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ff8:	f040 810c 	bne.w	8007214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007000:	2200      	movs	r2, #0
 8007002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007006:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800700a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800700e:	4622      	mov	r2, r4
 8007010:	462b      	mov	r3, r5
 8007012:	1891      	adds	r1, r2, r2
 8007014:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007016:	415b      	adcs	r3, r3
 8007018:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800701a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800701e:	4621      	mov	r1, r4
 8007020:	eb12 0801 	adds.w	r8, r2, r1
 8007024:	4629      	mov	r1, r5
 8007026:	eb43 0901 	adc.w	r9, r3, r1
 800702a:	f04f 0200 	mov.w	r2, #0
 800702e:	f04f 0300 	mov.w	r3, #0
 8007032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800703a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800703e:	4690      	mov	r8, r2
 8007040:	4699      	mov	r9, r3
 8007042:	4623      	mov	r3, r4
 8007044:	eb18 0303 	adds.w	r3, r8, r3
 8007048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800704c:	462b      	mov	r3, r5
 800704e:	eb49 0303 	adc.w	r3, r9, r3
 8007052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007062:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800706a:	460b      	mov	r3, r1
 800706c:	18db      	adds	r3, r3, r3
 800706e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007070:	4613      	mov	r3, r2
 8007072:	eb42 0303 	adc.w	r3, r2, r3
 8007076:	657b      	str	r3, [r7, #84]	@ 0x54
 8007078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800707c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007080:	f7f9 fe04 	bl	8000c8c <__aeabi_uldivmod>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4b61      	ldr	r3, [pc, #388]	@ (8007210 <UART_SetConfig+0x2d4>)
 800708a:	fba3 2302 	umull	r2, r3, r3, r2
 800708e:	095b      	lsrs	r3, r3, #5
 8007090:	011c      	lsls	r4, r3, #4
 8007092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007096:	2200      	movs	r2, #0
 8007098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800709c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80070a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80070a4:	4642      	mov	r2, r8
 80070a6:	464b      	mov	r3, r9
 80070a8:	1891      	adds	r1, r2, r2
 80070aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80070ac:	415b      	adcs	r3, r3
 80070ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80070b4:	4641      	mov	r1, r8
 80070b6:	eb12 0a01 	adds.w	sl, r2, r1
 80070ba:	4649      	mov	r1, r9
 80070bc:	eb43 0b01 	adc.w	fp, r3, r1
 80070c0:	f04f 0200 	mov.w	r2, #0
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070d4:	4692      	mov	sl, r2
 80070d6:	469b      	mov	fp, r3
 80070d8:	4643      	mov	r3, r8
 80070da:	eb1a 0303 	adds.w	r3, sl, r3
 80070de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070e2:	464b      	mov	r3, r9
 80070e4:	eb4b 0303 	adc.w	r3, fp, r3
 80070e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80070fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007100:	460b      	mov	r3, r1
 8007102:	18db      	adds	r3, r3, r3
 8007104:	643b      	str	r3, [r7, #64]	@ 0x40
 8007106:	4613      	mov	r3, r2
 8007108:	eb42 0303 	adc.w	r3, r2, r3
 800710c:	647b      	str	r3, [r7, #68]	@ 0x44
 800710e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007116:	f7f9 fdb9 	bl	8000c8c <__aeabi_uldivmod>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4611      	mov	r1, r2
 8007120:	4b3b      	ldr	r3, [pc, #236]	@ (8007210 <UART_SetConfig+0x2d4>)
 8007122:	fba3 2301 	umull	r2, r3, r3, r1
 8007126:	095b      	lsrs	r3, r3, #5
 8007128:	2264      	movs	r2, #100	@ 0x64
 800712a:	fb02 f303 	mul.w	r3, r2, r3
 800712e:	1acb      	subs	r3, r1, r3
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007136:	4b36      	ldr	r3, [pc, #216]	@ (8007210 <UART_SetConfig+0x2d4>)
 8007138:	fba3 2302 	umull	r2, r3, r3, r2
 800713c:	095b      	lsrs	r3, r3, #5
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007144:	441c      	add	r4, r3
 8007146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800714a:	2200      	movs	r2, #0
 800714c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007150:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007158:	4642      	mov	r2, r8
 800715a:	464b      	mov	r3, r9
 800715c:	1891      	adds	r1, r2, r2
 800715e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007160:	415b      	adcs	r3, r3
 8007162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007168:	4641      	mov	r1, r8
 800716a:	1851      	adds	r1, r2, r1
 800716c:	6339      	str	r1, [r7, #48]	@ 0x30
 800716e:	4649      	mov	r1, r9
 8007170:	414b      	adcs	r3, r1
 8007172:	637b      	str	r3, [r7, #52]	@ 0x34
 8007174:	f04f 0200 	mov.w	r2, #0
 8007178:	f04f 0300 	mov.w	r3, #0
 800717c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007180:	4659      	mov	r1, fp
 8007182:	00cb      	lsls	r3, r1, #3
 8007184:	4651      	mov	r1, sl
 8007186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800718a:	4651      	mov	r1, sl
 800718c:	00ca      	lsls	r2, r1, #3
 800718e:	4610      	mov	r0, r2
 8007190:	4619      	mov	r1, r3
 8007192:	4603      	mov	r3, r0
 8007194:	4642      	mov	r2, r8
 8007196:	189b      	adds	r3, r3, r2
 8007198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800719c:	464b      	mov	r3, r9
 800719e:	460a      	mov	r2, r1
 80071a0:	eb42 0303 	adc.w	r3, r2, r3
 80071a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80071b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80071bc:	460b      	mov	r3, r1
 80071be:	18db      	adds	r3, r3, r3
 80071c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071c2:	4613      	mov	r3, r2
 80071c4:	eb42 0303 	adc.w	r3, r2, r3
 80071c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80071ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80071d2:	f7f9 fd5b 	bl	8000c8c <__aeabi_uldivmod>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4b0d      	ldr	r3, [pc, #52]	@ (8007210 <UART_SetConfig+0x2d4>)
 80071dc:	fba3 1302 	umull	r1, r3, r3, r2
 80071e0:	095b      	lsrs	r3, r3, #5
 80071e2:	2164      	movs	r1, #100	@ 0x64
 80071e4:	fb01 f303 	mul.w	r3, r1, r3
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	3332      	adds	r3, #50	@ 0x32
 80071ee:	4a08      	ldr	r2, [pc, #32]	@ (8007210 <UART_SetConfig+0x2d4>)
 80071f0:	fba2 2303 	umull	r2, r3, r2, r3
 80071f4:	095b      	lsrs	r3, r3, #5
 80071f6:	f003 0207 	and.w	r2, r3, #7
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4422      	add	r2, r4
 8007202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007204:	e106      	b.n	8007414 <UART_SetConfig+0x4d8>
 8007206:	bf00      	nop
 8007208:	40011000 	.word	0x40011000
 800720c:	40011400 	.word	0x40011400
 8007210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007218:	2200      	movs	r2, #0
 800721a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800721e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007226:	4642      	mov	r2, r8
 8007228:	464b      	mov	r3, r9
 800722a:	1891      	adds	r1, r2, r2
 800722c:	6239      	str	r1, [r7, #32]
 800722e:	415b      	adcs	r3, r3
 8007230:	627b      	str	r3, [r7, #36]	@ 0x24
 8007232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007236:	4641      	mov	r1, r8
 8007238:	1854      	adds	r4, r2, r1
 800723a:	4649      	mov	r1, r9
 800723c:	eb43 0501 	adc.w	r5, r3, r1
 8007240:	f04f 0200 	mov.w	r2, #0
 8007244:	f04f 0300 	mov.w	r3, #0
 8007248:	00eb      	lsls	r3, r5, #3
 800724a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800724e:	00e2      	lsls	r2, r4, #3
 8007250:	4614      	mov	r4, r2
 8007252:	461d      	mov	r5, r3
 8007254:	4643      	mov	r3, r8
 8007256:	18e3      	adds	r3, r4, r3
 8007258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800725c:	464b      	mov	r3, r9
 800725e:	eb45 0303 	adc.w	r3, r5, r3
 8007262:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007272:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007282:	4629      	mov	r1, r5
 8007284:	008b      	lsls	r3, r1, #2
 8007286:	4621      	mov	r1, r4
 8007288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800728c:	4621      	mov	r1, r4
 800728e:	008a      	lsls	r2, r1, #2
 8007290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007294:	f7f9 fcfa 	bl	8000c8c <__aeabi_uldivmod>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4b60      	ldr	r3, [pc, #384]	@ (8007420 <UART_SetConfig+0x4e4>)
 800729e:	fba3 2302 	umull	r2, r3, r3, r2
 80072a2:	095b      	lsrs	r3, r3, #5
 80072a4:	011c      	lsls	r4, r3, #4
 80072a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80072b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80072b8:	4642      	mov	r2, r8
 80072ba:	464b      	mov	r3, r9
 80072bc:	1891      	adds	r1, r2, r2
 80072be:	61b9      	str	r1, [r7, #24]
 80072c0:	415b      	adcs	r3, r3
 80072c2:	61fb      	str	r3, [r7, #28]
 80072c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072c8:	4641      	mov	r1, r8
 80072ca:	1851      	adds	r1, r2, r1
 80072cc:	6139      	str	r1, [r7, #16]
 80072ce:	4649      	mov	r1, r9
 80072d0:	414b      	adcs	r3, r1
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	f04f 0200 	mov.w	r2, #0
 80072d8:	f04f 0300 	mov.w	r3, #0
 80072dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072e0:	4659      	mov	r1, fp
 80072e2:	00cb      	lsls	r3, r1, #3
 80072e4:	4651      	mov	r1, sl
 80072e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072ea:	4651      	mov	r1, sl
 80072ec:	00ca      	lsls	r2, r1, #3
 80072ee:	4610      	mov	r0, r2
 80072f0:	4619      	mov	r1, r3
 80072f2:	4603      	mov	r3, r0
 80072f4:	4642      	mov	r2, r8
 80072f6:	189b      	adds	r3, r3, r2
 80072f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072fc:	464b      	mov	r3, r9
 80072fe:	460a      	mov	r2, r1
 8007300:	eb42 0303 	adc.w	r3, r2, r3
 8007304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007312:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007320:	4649      	mov	r1, r9
 8007322:	008b      	lsls	r3, r1, #2
 8007324:	4641      	mov	r1, r8
 8007326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800732a:	4641      	mov	r1, r8
 800732c:	008a      	lsls	r2, r1, #2
 800732e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007332:	f7f9 fcab 	bl	8000c8c <__aeabi_uldivmod>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4611      	mov	r1, r2
 800733c:	4b38      	ldr	r3, [pc, #224]	@ (8007420 <UART_SetConfig+0x4e4>)
 800733e:	fba3 2301 	umull	r2, r3, r3, r1
 8007342:	095b      	lsrs	r3, r3, #5
 8007344:	2264      	movs	r2, #100	@ 0x64
 8007346:	fb02 f303 	mul.w	r3, r2, r3
 800734a:	1acb      	subs	r3, r1, r3
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	3332      	adds	r3, #50	@ 0x32
 8007350:	4a33      	ldr	r2, [pc, #204]	@ (8007420 <UART_SetConfig+0x4e4>)
 8007352:	fba2 2303 	umull	r2, r3, r2, r3
 8007356:	095b      	lsrs	r3, r3, #5
 8007358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800735c:	441c      	add	r4, r3
 800735e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007362:	2200      	movs	r2, #0
 8007364:	673b      	str	r3, [r7, #112]	@ 0x70
 8007366:	677a      	str	r2, [r7, #116]	@ 0x74
 8007368:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800736c:	4642      	mov	r2, r8
 800736e:	464b      	mov	r3, r9
 8007370:	1891      	adds	r1, r2, r2
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	415b      	adcs	r3, r3
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800737c:	4641      	mov	r1, r8
 800737e:	1851      	adds	r1, r2, r1
 8007380:	6039      	str	r1, [r7, #0]
 8007382:	4649      	mov	r1, r9
 8007384:	414b      	adcs	r3, r1
 8007386:	607b      	str	r3, [r7, #4]
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007394:	4659      	mov	r1, fp
 8007396:	00cb      	lsls	r3, r1, #3
 8007398:	4651      	mov	r1, sl
 800739a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800739e:	4651      	mov	r1, sl
 80073a0:	00ca      	lsls	r2, r1, #3
 80073a2:	4610      	mov	r0, r2
 80073a4:	4619      	mov	r1, r3
 80073a6:	4603      	mov	r3, r0
 80073a8:	4642      	mov	r2, r8
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073ae:	464b      	mov	r3, r9
 80073b0:	460a      	mov	r2, r1
 80073b2:	eb42 0303 	adc.w	r3, r2, r3
 80073b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80073c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80073d0:	4649      	mov	r1, r9
 80073d2:	008b      	lsls	r3, r1, #2
 80073d4:	4641      	mov	r1, r8
 80073d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073da:	4641      	mov	r1, r8
 80073dc:	008a      	lsls	r2, r1, #2
 80073de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80073e2:	f7f9 fc53 	bl	8000c8c <__aeabi_uldivmod>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007420 <UART_SetConfig+0x4e4>)
 80073ec:	fba3 1302 	umull	r1, r3, r3, r2
 80073f0:	095b      	lsrs	r3, r3, #5
 80073f2:	2164      	movs	r1, #100	@ 0x64
 80073f4:	fb01 f303 	mul.w	r3, r1, r3
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	3332      	adds	r3, #50	@ 0x32
 80073fe:	4a08      	ldr	r2, [pc, #32]	@ (8007420 <UART_SetConfig+0x4e4>)
 8007400:	fba2 2303 	umull	r2, r3, r2, r3
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	f003 020f 	and.w	r2, r3, #15
 800740a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4422      	add	r2, r4
 8007412:	609a      	str	r2, [r3, #8]
}
 8007414:	bf00      	nop
 8007416:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800741a:	46bd      	mov	sp, r7
 800741c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007420:	51eb851f 	.word	0x51eb851f

08007424 <__NVIC_SetPriority>:
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	4603      	mov	r3, r0
 800742c:	6039      	str	r1, [r7, #0]
 800742e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007434:	2b00      	cmp	r3, #0
 8007436:	db0a      	blt.n	800744e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	b2da      	uxtb	r2, r3
 800743c:	490c      	ldr	r1, [pc, #48]	@ (8007470 <__NVIC_SetPriority+0x4c>)
 800743e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007442:	0112      	lsls	r2, r2, #4
 8007444:	b2d2      	uxtb	r2, r2
 8007446:	440b      	add	r3, r1
 8007448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800744c:	e00a      	b.n	8007464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	b2da      	uxtb	r2, r3
 8007452:	4908      	ldr	r1, [pc, #32]	@ (8007474 <__NVIC_SetPriority+0x50>)
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	f003 030f 	and.w	r3, r3, #15
 800745a:	3b04      	subs	r3, #4
 800745c:	0112      	lsls	r2, r2, #4
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	440b      	add	r3, r1
 8007462:	761a      	strb	r2, [r3, #24]
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	e000e100 	.word	0xe000e100
 8007474:	e000ed00 	.word	0xe000ed00

08007478 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800747c:	2100      	movs	r1, #0
 800747e:	f06f 0004 	mvn.w	r0, #4
 8007482:	f7ff ffcf 	bl	8007424 <__NVIC_SetPriority>
#endif
}
 8007486:	bf00      	nop
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007492:	f3ef 8305 	mrs	r3, IPSR
 8007496:	603b      	str	r3, [r7, #0]
  return(result);
 8007498:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800749e:	f06f 0305 	mvn.w	r3, #5
 80074a2:	607b      	str	r3, [r7, #4]
 80074a4:	e00c      	b.n	80074c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80074a6:	4b0a      	ldr	r3, [pc, #40]	@ (80074d0 <osKernelInitialize+0x44>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d105      	bne.n	80074ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80074ae:	4b08      	ldr	r3, [pc, #32]	@ (80074d0 <osKernelInitialize+0x44>)
 80074b0:	2201      	movs	r2, #1
 80074b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	607b      	str	r3, [r7, #4]
 80074b8:	e002      	b.n	80074c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80074ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074c0:	687b      	ldr	r3, [r7, #4]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	20004a1c 	.word	0x20004a1c

080074d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074da:	f3ef 8305 	mrs	r3, IPSR
 80074de:	603b      	str	r3, [r7, #0]
  return(result);
 80074e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80074e6:	f06f 0305 	mvn.w	r3, #5
 80074ea:	607b      	str	r3, [r7, #4]
 80074ec:	e010      	b.n	8007510 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80074ee:	4b0b      	ldr	r3, [pc, #44]	@ (800751c <osKernelStart+0x48>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d109      	bne.n	800750a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80074f6:	f7ff ffbf 	bl	8007478 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80074fa:	4b08      	ldr	r3, [pc, #32]	@ (800751c <osKernelStart+0x48>)
 80074fc:	2202      	movs	r2, #2
 80074fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007500:	f001 fa08 	bl	8008914 <vTaskStartScheduler>
      stat = osOK;
 8007504:	2300      	movs	r3, #0
 8007506:	607b      	str	r3, [r7, #4]
 8007508:	e002      	b.n	8007510 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800750a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800750e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007510:	687b      	ldr	r3, [r7, #4]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	20004a1c 	.word	0x20004a1c

08007520 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007520:	b580      	push	{r7, lr}
 8007522:	b08e      	sub	sp, #56	@ 0x38
 8007524:	af04      	add	r7, sp, #16
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800752c:	2300      	movs	r3, #0
 800752e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007530:	f3ef 8305 	mrs	r3, IPSR
 8007534:	617b      	str	r3, [r7, #20]
  return(result);
 8007536:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007538:	2b00      	cmp	r3, #0
 800753a:	d17e      	bne.n	800763a <osThreadNew+0x11a>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d07b      	beq.n	800763a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007542:	2380      	movs	r3, #128	@ 0x80
 8007544:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007546:	2318      	movs	r3, #24
 8007548:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800754a:	2300      	movs	r3, #0
 800754c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800754e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007552:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d045      	beq.n	80075e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <osThreadNew+0x48>
        name = attr->name;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d008      	beq.n	800758e <osThreadNew+0x6e>
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	2b38      	cmp	r3, #56	@ 0x38
 8007580:	d805      	bhi.n	800758e <osThreadNew+0x6e>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <osThreadNew+0x72>
        return (NULL);
 800758e:	2300      	movs	r3, #0
 8007590:	e054      	b.n	800763c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	089b      	lsrs	r3, r3, #2
 80075a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00e      	beq.n	80075c8 <osThreadNew+0xa8>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	2b5b      	cmp	r3, #91	@ 0x5b
 80075b0:	d90a      	bls.n	80075c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d006      	beq.n	80075c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <osThreadNew+0xa8>
        mem = 1;
 80075c2:	2301      	movs	r3, #1
 80075c4:	61bb      	str	r3, [r7, #24]
 80075c6:	e010      	b.n	80075ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10c      	bne.n	80075ea <osThreadNew+0xca>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d108      	bne.n	80075ea <osThreadNew+0xca>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d104      	bne.n	80075ea <osThreadNew+0xca>
          mem = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	61bb      	str	r3, [r7, #24]
 80075e4:	e001      	b.n	80075ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d110      	bne.n	8007612 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075f8:	9202      	str	r2, [sp, #8]
 80075fa:	9301      	str	r3, [sp, #4]
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	6a3a      	ldr	r2, [r7, #32]
 8007604:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 ffa8 	bl	800855c <xTaskCreateStatic>
 800760c:	4603      	mov	r3, r0
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	e013      	b.n	800763a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d110      	bne.n	800763a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	b29a      	uxth	r2, r3
 800761c:	f107 0310 	add.w	r3, r7, #16
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 fff6 	bl	800861c <xTaskCreate>
 8007630:	4603      	mov	r3, r0
 8007632:	2b01      	cmp	r3, #1
 8007634:	d001      	beq.n	800763a <osThreadNew+0x11a>
            hTask = NULL;
 8007636:	2300      	movs	r3, #0
 8007638:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800763a:	693b      	ldr	r3, [r7, #16]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3728      	adds	r7, #40	@ 0x28
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800764c:	f3ef 8305 	mrs	r3, IPSR
 8007650:	60bb      	str	r3, [r7, #8]
  return(result);
 8007652:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007654:	2b00      	cmp	r3, #0
 8007656:	d003      	beq.n	8007660 <osDelay+0x1c>
    stat = osErrorISR;
 8007658:	f06f 0305 	mvn.w	r3, #5
 800765c:	60fb      	str	r3, [r7, #12]
 800765e:	e007      	b.n	8007670 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007660:	2300      	movs	r3, #0
 8007662:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <osDelay+0x2c>
      vTaskDelay(ticks);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 f91c 	bl	80088a8 <vTaskDelay>
    }
  }

  return (stat);
 8007670:	68fb      	ldr	r3, [r7, #12]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800767a:	b580      	push	{r7, lr}
 800767c:	b08a      	sub	sp, #40	@ 0x28
 800767e:	af02      	add	r7, sp, #8
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007686:	2300      	movs	r3, #0
 8007688:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800768a:	f3ef 8305 	mrs	r3, IPSR
 800768e:	613b      	str	r3, [r7, #16]
  return(result);
 8007690:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007692:	2b00      	cmp	r3, #0
 8007694:	d15f      	bne.n	8007756 <osMessageQueueNew+0xdc>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d05c      	beq.n	8007756 <osMessageQueueNew+0xdc>
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d059      	beq.n	8007756 <osMessageQueueNew+0xdc>
    mem = -1;
 80076a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d029      	beq.n	8007702 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d012      	beq.n	80076dc <osMessageQueueNew+0x62>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	2b4f      	cmp	r3, #79	@ 0x4f
 80076bc:	d90e      	bls.n	80076dc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	695a      	ldr	r2, [r3, #20]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	68b9      	ldr	r1, [r7, #8]
 80076ce:	fb01 f303 	mul.w	r3, r1, r3
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d302      	bcc.n	80076dc <osMessageQueueNew+0x62>
        mem = 1;
 80076d6:	2301      	movs	r3, #1
 80076d8:	61bb      	str	r3, [r7, #24]
 80076da:	e014      	b.n	8007706 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d110      	bne.n	8007706 <osMessageQueueNew+0x8c>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10c      	bne.n	8007706 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d108      	bne.n	8007706 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d104      	bne.n	8007706 <osMessageQueueNew+0x8c>
          mem = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61bb      	str	r3, [r7, #24]
 8007700:	e001      	b.n	8007706 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d10b      	bne.n	8007724 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691a      	ldr	r2, [r3, #16]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	2100      	movs	r1, #0
 8007716:	9100      	str	r1, [sp, #0]
 8007718:	68b9      	ldr	r1, [r7, #8]
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 f9d0 	bl	8007ac0 <xQueueGenericCreateStatic>
 8007720:	61f8      	str	r0, [r7, #28]
 8007722:	e008      	b.n	8007736 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d105      	bne.n	8007736 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800772a:	2200      	movs	r2, #0
 800772c:	68b9      	ldr	r1, [r7, #8]
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 fa43 	bl	8007bba <xQueueGenericCreate>
 8007734:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00c      	beq.n	8007756 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <osMessageQueueNew+0xd0>
        name = attr->name;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	e001      	b.n	800774e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800774a:	2300      	movs	r3, #0
 800774c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800774e:	6979      	ldr	r1, [r7, #20]
 8007750:	69f8      	ldr	r0, [r7, #28]
 8007752:	f000 fea5 	bl	80084a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007756:	69fb      	ldr	r3, [r7, #28]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3720      	adds	r7, #32
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007776:	f3ef 8305 	mrs	r3, IPSR
 800777a:	617b      	str	r3, [r7, #20]
  return(result);
 800777c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800777e:	2b00      	cmp	r3, #0
 8007780:	d028      	beq.n	80077d4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d005      	beq.n	8007794 <osMessageQueueGet+0x34>
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <osMessageQueueGet+0x34>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007794:	f06f 0303 	mvn.w	r3, #3
 8007798:	61fb      	str	r3, [r7, #28]
 800779a:	e037      	b.n	800780c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800779c:	2300      	movs	r3, #0
 800779e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80077a0:	f107 0310 	add.w	r3, r7, #16
 80077a4:	461a      	mov	r2, r3
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	69b8      	ldr	r0, [r7, #24]
 80077aa:	f000 fce7 	bl	800817c <xQueueReceiveFromISR>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d003      	beq.n	80077bc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80077b4:	f06f 0302 	mvn.w	r3, #2
 80077b8:	61fb      	str	r3, [r7, #28]
 80077ba:	e027      	b.n	800780c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d024      	beq.n	800780c <osMessageQueueGet+0xac>
 80077c2:	4b15      	ldr	r3, [pc, #84]	@ (8007818 <osMessageQueueGet+0xb8>)
 80077c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	e01b      	b.n	800780c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <osMessageQueueGet+0x80>
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d103      	bne.n	80077e8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80077e0:	f06f 0303 	mvn.w	r3, #3
 80077e4:	61fb      	str	r3, [r7, #28]
 80077e6:	e011      	b.n	800780c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	69b8      	ldr	r0, [r7, #24]
 80077ee:	f000 fbe3 	bl	8007fb8 <xQueueReceive>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d009      	beq.n	800780c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80077fe:	f06f 0301 	mvn.w	r3, #1
 8007802:	61fb      	str	r3, [r7, #28]
 8007804:	e002      	b.n	800780c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007806:	f06f 0302 	mvn.w	r3, #2
 800780a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800780c:	69fb      	ldr	r3, [r7, #28]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3720      	adds	r7, #32
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	e000ed04 	.word	0xe000ed04

0800781c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4a07      	ldr	r2, [pc, #28]	@ (8007848 <vApplicationGetIdleTaskMemory+0x2c>)
 800782c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	4a06      	ldr	r2, [pc, #24]	@ (800784c <vApplicationGetIdleTaskMemory+0x30>)
 8007832:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2280      	movs	r2, #128	@ 0x80
 8007838:	601a      	str	r2, [r3, #0]
}
 800783a:	bf00      	nop
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	20004a20 	.word	0x20004a20
 800784c:	20004a7c 	.word	0x20004a7c

08007850 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4a07      	ldr	r2, [pc, #28]	@ (800787c <vApplicationGetTimerTaskMemory+0x2c>)
 8007860:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	4a06      	ldr	r2, [pc, #24]	@ (8007880 <vApplicationGetTimerTaskMemory+0x30>)
 8007866:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800786e:	601a      	str	r2, [r3, #0]
}
 8007870:	bf00      	nop
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	20004c7c 	.word	0x20004c7c
 8007880:	20004cd8 	.word	0x20004cd8

08007884 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f103 0208 	add.w	r2, r3, #8
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800789c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f103 0208 	add.w	r2, r3, #8
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f103 0208 	add.w	r2, r3, #8
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078d2:	bf00      	nop
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078de:	b480      	push	{r7}
 80078e0:	b085      	sub	sp, #20
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	601a      	str	r2, [r3, #0]
}
 800791a:	bf00      	nop
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800793c:	d103      	bne.n	8007946 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	e00c      	b.n	8007960 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3308      	adds	r3, #8
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	e002      	b.n	8007954 <vListInsert+0x2e>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	429a      	cmp	r2, r3
 800795e:	d2f6      	bcs.n	800794e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	1c5a      	adds	r2, r3, #1
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	601a      	str	r2, [r3, #0]
}
 800798c:	bf00      	nop
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	6892      	ldr	r2, [r2, #8]
 80079ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	6852      	ldr	r2, [r2, #4]
 80079b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d103      	bne.n	80079cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	1e5a      	subs	r2, r3, #1
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10b      	bne.n	8007a18 <xQueueGenericReset+0x2c>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	60bb      	str	r3, [r7, #8]
}
 8007a12:	bf00      	nop
 8007a14:	bf00      	nop
 8007a16:	e7fd      	b.n	8007a14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a18:	f002 f95e 	bl	8009cd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a24:	68f9      	ldr	r1, [r7, #12]
 8007a26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a28:	fb01 f303 	mul.w	r3, r1, r3
 8007a2c:	441a      	add	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	68f9      	ldr	r1, [r7, #12]
 8007a4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a4e:	fb01 f303 	mul.w	r3, r1, r3
 8007a52:	441a      	add	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	22ff      	movs	r2, #255	@ 0xff
 8007a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	22ff      	movs	r2, #255	@ 0xff
 8007a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d114      	bne.n	8007a98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d01a      	beq.n	8007aac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3310      	adds	r3, #16
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f001 f9d8 	bl	8008e30 <xTaskRemoveFromEventList>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d012      	beq.n	8007aac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a86:	4b0d      	ldr	r3, [pc, #52]	@ (8007abc <xQueueGenericReset+0xd0>)
 8007a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	e009      	b.n	8007aac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	3310      	adds	r3, #16
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff fef1 	bl	8007884 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3324      	adds	r3, #36	@ 0x24
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff feec 	bl	8007884 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007aac:	f002 f946 	bl	8009d3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ab0:	2301      	movs	r3, #1
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	e000ed04 	.word	0xe000ed04

08007ac0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08e      	sub	sp, #56	@ 0x38
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10b      	bne.n	8007aec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ae6:	bf00      	nop
 8007ae8:	bf00      	nop
 8007aea:	e7fd      	b.n	8007ae8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10b      	bne.n	8007b0a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	e7fd      	b.n	8007b06 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <xQueueGenericCreateStatic+0x56>
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <xQueueGenericCreateStatic+0x5a>
 8007b16:	2301      	movs	r3, #1
 8007b18:	e000      	b.n	8007b1c <xQueueGenericCreateStatic+0x5c>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10b      	bne.n	8007b38 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	623b      	str	r3, [r7, #32]
}
 8007b32:	bf00      	nop
 8007b34:	bf00      	nop
 8007b36:	e7fd      	b.n	8007b34 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d102      	bne.n	8007b44 <xQueueGenericCreateStatic+0x84>
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <xQueueGenericCreateStatic+0x88>
 8007b44:	2301      	movs	r3, #1
 8007b46:	e000      	b.n	8007b4a <xQueueGenericCreateStatic+0x8a>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10b      	bne.n	8007b66 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	61fb      	str	r3, [r7, #28]
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	e7fd      	b.n	8007b62 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b66:	2350      	movs	r3, #80	@ 0x50
 8007b68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2b50      	cmp	r3, #80	@ 0x50
 8007b6e:	d00b      	beq.n	8007b88 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	61bb      	str	r3, [r7, #24]
}
 8007b82:	bf00      	nop
 8007b84:	bf00      	nop
 8007b86:	e7fd      	b.n	8007b84 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00d      	beq.n	8007bb0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b9c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	68b9      	ldr	r1, [r7, #8]
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 f840 	bl	8007c30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3730      	adds	r7, #48	@ 0x30
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b08a      	sub	sp, #40	@ 0x28
 8007bbe:	af02      	add	r7, sp, #8
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10b      	bne.n	8007be6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	613b      	str	r3, [r7, #16]
}
 8007be0:	bf00      	nop
 8007be2:	bf00      	nop
 8007be4:	e7fd      	b.n	8007be2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	fb02 f303 	mul.w	r3, r2, r3
 8007bee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	3350      	adds	r3, #80	@ 0x50
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f002 f991 	bl	8009f1c <pvPortMalloc>
 8007bfa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d011      	beq.n	8007c26 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	3350      	adds	r3, #80	@ 0x50
 8007c0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c14:	79fa      	ldrb	r2, [r7, #7]
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	68b9      	ldr	r1, [r7, #8]
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f000 f805 	bl	8007c30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c26:	69bb      	ldr	r3, [r7, #24]
	}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3720      	adds	r7, #32
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
 8007c3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d103      	bne.n	8007c4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	e002      	b.n	8007c52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c5e:	2101      	movs	r1, #1
 8007c60:	69b8      	ldr	r0, [r7, #24]
 8007c62:	f7ff fec3 	bl	80079ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	78fa      	ldrb	r2, [r7, #3]
 8007c6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c6e:	bf00      	nop
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08e      	sub	sp, #56	@ 0x38
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c86:	2300      	movs	r3, #0
 8007c88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10b      	bne.n	8007cac <xQueueGenericSend+0x34>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	e7fd      	b.n	8007ca8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d103      	bne.n	8007cba <xQueueGenericSend+0x42>
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <xQueueGenericSend+0x46>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e000      	b.n	8007cc0 <xQueueGenericSend+0x48>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10b      	bne.n	8007cdc <xQueueGenericSend+0x64>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007cd6:	bf00      	nop
 8007cd8:	bf00      	nop
 8007cda:	e7fd      	b.n	8007cd8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d103      	bne.n	8007cea <xQueueGenericSend+0x72>
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d101      	bne.n	8007cee <xQueueGenericSend+0x76>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e000      	b.n	8007cf0 <xQueueGenericSend+0x78>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10b      	bne.n	8007d0c <xQueueGenericSend+0x94>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	623b      	str	r3, [r7, #32]
}
 8007d06:	bf00      	nop
 8007d08:	bf00      	nop
 8007d0a:	e7fd      	b.n	8007d08 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d0c:	f001 fa78 	bl	8009200 <xTaskGetSchedulerState>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d102      	bne.n	8007d1c <xQueueGenericSend+0xa4>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <xQueueGenericSend+0xa8>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e000      	b.n	8007d22 <xQueueGenericSend+0xaa>
 8007d20:	2300      	movs	r3, #0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10b      	bne.n	8007d3e <xQueueGenericSend+0xc6>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	61fb      	str	r3, [r7, #28]
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	e7fd      	b.n	8007d3a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d3e:	f001 ffcb 	bl	8009cd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d302      	bcc.n	8007d54 <xQueueGenericSend+0xdc>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d129      	bne.n	8007da8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d5a:	f000 fa91 	bl	8008280 <prvCopyDataToQueue>
 8007d5e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d010      	beq.n	8007d8a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6a:	3324      	adds	r3, #36	@ 0x24
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f001 f85f 	bl	8008e30 <xTaskRemoveFromEventList>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d013      	beq.n	8007da0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d78:	4b3f      	ldr	r3, [pc, #252]	@ (8007e78 <xQueueGenericSend+0x200>)
 8007d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	e00a      	b.n	8007da0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d007      	beq.n	8007da0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d90:	4b39      	ldr	r3, [pc, #228]	@ (8007e78 <xQueueGenericSend+0x200>)
 8007d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007da0:	f001 ffcc 	bl	8009d3c <vPortExitCritical>
				return pdPASS;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e063      	b.n	8007e70 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d103      	bne.n	8007db6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dae:	f001 ffc5 	bl	8009d3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007db2:	2300      	movs	r3, #0
 8007db4:	e05c      	b.n	8007e70 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d106      	bne.n	8007dca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dbc:	f107 0314 	add.w	r3, r7, #20
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f001 f8c1 	bl	8008f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dca:	f001 ffb7 	bl	8009d3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dce:	f000 fe09 	bl	80089e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dd2:	f001 ff81 	bl	8009cd8 <vPortEnterCritical>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ddc:	b25b      	sxtb	r3, r3
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007de2:	d103      	bne.n	8007dec <xQueueGenericSend+0x174>
 8007de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007df2:	b25b      	sxtb	r3, r3
 8007df4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007df8:	d103      	bne.n	8007e02 <xQueueGenericSend+0x18a>
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e02:	f001 ff9b 	bl	8009d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e06:	1d3a      	adds	r2, r7, #4
 8007e08:	f107 0314 	add.w	r3, r7, #20
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f001 f8b0 	bl	8008f74 <xTaskCheckForTimeOut>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d124      	bne.n	8007e64 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e1c:	f000 fb28 	bl	8008470 <prvIsQueueFull>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d018      	beq.n	8007e58 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e28:	3310      	adds	r3, #16
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 ffac 	bl	8008d8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e36:	f000 fab3 	bl	80083a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e3a:	f000 fde1 	bl	8008a00 <xTaskResumeAll>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f47f af7c 	bne.w	8007d3e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007e46:	4b0c      	ldr	r3, [pc, #48]	@ (8007e78 <xQueueGenericSend+0x200>)
 8007e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	e772      	b.n	8007d3e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e5a:	f000 faa1 	bl	80083a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e5e:	f000 fdcf 	bl	8008a00 <xTaskResumeAll>
 8007e62:	e76c      	b.n	8007d3e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e66:	f000 fa9b 	bl	80083a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e6a:	f000 fdc9 	bl	8008a00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3738      	adds	r7, #56	@ 0x38
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	e000ed04 	.word	0xe000ed04

08007e7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b090      	sub	sp, #64	@ 0x40
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10b      	bne.n	8007eac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ea6:	bf00      	nop
 8007ea8:	bf00      	nop
 8007eaa:	e7fd      	b.n	8007ea8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d103      	bne.n	8007eba <xQueueGenericSendFromISR+0x3e>
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <xQueueGenericSendFromISR+0x42>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e000      	b.n	8007ec0 <xQueueGenericSendFromISR+0x44>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10b      	bne.n	8007edc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ed6:	bf00      	nop
 8007ed8:	bf00      	nop
 8007eda:	e7fd      	b.n	8007ed8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d103      	bne.n	8007eea <xQueueGenericSendFromISR+0x6e>
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d101      	bne.n	8007eee <xQueueGenericSendFromISR+0x72>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e000      	b.n	8007ef0 <xQueueGenericSendFromISR+0x74>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10b      	bne.n	8007f0c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	623b      	str	r3, [r7, #32]
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	e7fd      	b.n	8007f08 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f0c:	f001 ffc4 	bl	8009e98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f10:	f3ef 8211 	mrs	r2, BASEPRI
 8007f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	61fa      	str	r2, [r7, #28]
 8007f26:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f28:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f2a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d302      	bcc.n	8007f3e <xQueueGenericSendFromISR+0xc2>
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d12f      	bne.n	8007f9e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	68b9      	ldr	r1, [r7, #8]
 8007f52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f54:	f000 f994 	bl	8008280 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f58:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f60:	d112      	bne.n	8007f88 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d016      	beq.n	8007f98 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6c:	3324      	adds	r3, #36	@ 0x24
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 ff5e 	bl	8008e30 <xTaskRemoveFromEventList>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00e      	beq.n	8007f98 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00b      	beq.n	8007f98 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	e007      	b.n	8007f98 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	b25a      	sxtb	r2, r3
 8007f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007f9c:	e001      	b.n	8007fa2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fa4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3740      	adds	r7, #64	@ 0x40
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08c      	sub	sp, #48	@ 0x30
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10b      	bne.n	8007fea <xQueueReceive+0x32>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	623b      	str	r3, [r7, #32]
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop
 8007fe8:	e7fd      	b.n	8007fe6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d103      	bne.n	8007ff8 <xQueueReceive+0x40>
 8007ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <xQueueReceive+0x44>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e000      	b.n	8007ffe <xQueueReceive+0x46>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10b      	bne.n	800801a <xQueueReceive+0x62>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	61fb      	str	r3, [r7, #28]
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop
 8008018:	e7fd      	b.n	8008016 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800801a:	f001 f8f1 	bl	8009200 <xTaskGetSchedulerState>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d102      	bne.n	800802a <xQueueReceive+0x72>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <xQueueReceive+0x76>
 800802a:	2301      	movs	r3, #1
 800802c:	e000      	b.n	8008030 <xQueueReceive+0x78>
 800802e:	2300      	movs	r3, #0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10b      	bne.n	800804c <xQueueReceive+0x94>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	61bb      	str	r3, [r7, #24]
}
 8008046:	bf00      	nop
 8008048:	bf00      	nop
 800804a:	e7fd      	b.n	8008048 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800804c:	f001 fe44 	bl	8009cd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008054:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008058:	2b00      	cmp	r3, #0
 800805a:	d01f      	beq.n	800809c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800805c:	68b9      	ldr	r1, [r7, #8]
 800805e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008060:	f000 f978 	bl	8008354 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008066:	1e5a      	subs	r2, r3, #1
 8008068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800806c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00f      	beq.n	8008094 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008076:	3310      	adds	r3, #16
 8008078:	4618      	mov	r0, r3
 800807a:	f000 fed9 	bl	8008e30 <xTaskRemoveFromEventList>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d007      	beq.n	8008094 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008084:	4b3c      	ldr	r3, [pc, #240]	@ (8008178 <xQueueReceive+0x1c0>)
 8008086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008094:	f001 fe52 	bl	8009d3c <vPortExitCritical>
				return pdPASS;
 8008098:	2301      	movs	r3, #1
 800809a:	e069      	b.n	8008170 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d103      	bne.n	80080aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080a2:	f001 fe4b 	bl	8009d3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080a6:	2300      	movs	r3, #0
 80080a8:	e062      	b.n	8008170 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d106      	bne.n	80080be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080b0:	f107 0310 	add.w	r3, r7, #16
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 ff47 	bl	8008f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080ba:	2301      	movs	r3, #1
 80080bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080be:	f001 fe3d 	bl	8009d3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080c2:	f000 fc8f 	bl	80089e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080c6:	f001 fe07 	bl	8009cd8 <vPortEnterCritical>
 80080ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080d0:	b25b      	sxtb	r3, r3
 80080d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080d6:	d103      	bne.n	80080e0 <xQueueReceive+0x128>
 80080d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080e6:	b25b      	sxtb	r3, r3
 80080e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080ec:	d103      	bne.n	80080f6 <xQueueReceive+0x13e>
 80080ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080f6:	f001 fe21 	bl	8009d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080fa:	1d3a      	adds	r2, r7, #4
 80080fc:	f107 0310 	add.w	r3, r7, #16
 8008100:	4611      	mov	r1, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f000 ff36 	bl	8008f74 <xTaskCheckForTimeOut>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d123      	bne.n	8008156 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800810e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008110:	f000 f998 	bl	8008444 <prvIsQueueEmpty>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d017      	beq.n	800814a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800811a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811c:	3324      	adds	r3, #36	@ 0x24
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	4611      	mov	r1, r2
 8008122:	4618      	mov	r0, r3
 8008124:	f000 fe32 	bl	8008d8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800812a:	f000 f939 	bl	80083a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800812e:	f000 fc67 	bl	8008a00 <xTaskResumeAll>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d189      	bne.n	800804c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008138:	4b0f      	ldr	r3, [pc, #60]	@ (8008178 <xQueueReceive+0x1c0>)
 800813a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	e780      	b.n	800804c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800814a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800814c:	f000 f928 	bl	80083a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008150:	f000 fc56 	bl	8008a00 <xTaskResumeAll>
 8008154:	e77a      	b.n	800804c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008158:	f000 f922 	bl	80083a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800815c:	f000 fc50 	bl	8008a00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008160:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008162:	f000 f96f 	bl	8008444 <prvIsQueueEmpty>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	f43f af6f 	beq.w	800804c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800816e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008170:	4618      	mov	r0, r3
 8008172:	3730      	adds	r7, #48	@ 0x30
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08e      	sub	sp, #56	@ 0x38
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800818c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10b      	bne.n	80081aa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	623b      	str	r3, [r7, #32]
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop
 80081a8:	e7fd      	b.n	80081a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d103      	bne.n	80081b8 <xQueueReceiveFromISR+0x3c>
 80081b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <xQueueReceiveFromISR+0x40>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e000      	b.n	80081be <xQueueReceiveFromISR+0x42>
 80081bc:	2300      	movs	r3, #0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10b      	bne.n	80081da <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	61fb      	str	r3, [r7, #28]
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop
 80081d8:	e7fd      	b.n	80081d6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081da:	f001 fe5d 	bl	8009e98 <vPortValidateInterruptPriority>
	__asm volatile
 80081de:	f3ef 8211 	mrs	r2, BASEPRI
 80081e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	61ba      	str	r2, [r7, #24]
 80081f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80081f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008202:	2b00      	cmp	r3, #0
 8008204:	d02f      	beq.n	8008266 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008208:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800820c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008210:	68b9      	ldr	r1, [r7, #8]
 8008212:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008214:	f000 f89e 	bl	8008354 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821a:	1e5a      	subs	r2, r3, #1
 800821c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008220:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008228:	d112      	bne.n	8008250 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d016      	beq.n	8008260 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008234:	3310      	adds	r3, #16
 8008236:	4618      	mov	r0, r3
 8008238:	f000 fdfa 	bl	8008e30 <xTaskRemoveFromEventList>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00e      	beq.n	8008260 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00b      	beq.n	8008260 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	e007      	b.n	8008260 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008254:	3301      	adds	r3, #1
 8008256:	b2db      	uxtb	r3, r3
 8008258:	b25a      	sxtb	r2, r3
 800825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008260:	2301      	movs	r3, #1
 8008262:	637b      	str	r3, [r7, #52]	@ 0x34
 8008264:	e001      	b.n	800826a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008266:	2300      	movs	r3, #0
 8008268:	637b      	str	r3, [r7, #52]	@ 0x34
 800826a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	f383 8811 	msr	BASEPRI, r3
}
 8008274:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008278:	4618      	mov	r0, r3
 800827a:	3738      	adds	r7, #56	@ 0x38
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008294:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10d      	bne.n	80082ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d14d      	bne.n	8008342 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 ffc6 	bl	800923c <xTaskPriorityDisinherit>
 80082b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	609a      	str	r2, [r3, #8]
 80082b8:	e043      	b.n	8008342 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d119      	bne.n	80082f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6858      	ldr	r0, [r3, #4]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c8:	461a      	mov	r2, r3
 80082ca:	68b9      	ldr	r1, [r7, #8]
 80082cc:	f00f fb59 	bl	8017982 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d8:	441a      	add	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d32b      	bcc.n	8008342 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	605a      	str	r2, [r3, #4]
 80082f2:	e026      	b.n	8008342 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	68d8      	ldr	r0, [r3, #12]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082fc:	461a      	mov	r2, r3
 80082fe:	68b9      	ldr	r1, [r7, #8]
 8008300:	f00f fb3f 	bl	8017982 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800830c:	425b      	negs	r3, r3
 800830e:	441a      	add	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	68da      	ldr	r2, [r3, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	429a      	cmp	r2, r3
 800831e:	d207      	bcs.n	8008330 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	689a      	ldr	r2, [r3, #8]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008328:	425b      	negs	r3, r3
 800832a:	441a      	add	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b02      	cmp	r3, #2
 8008334:	d105      	bne.n	8008342 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	3b01      	subs	r3, #1
 8008340:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800834a:	697b      	ldr	r3, [r7, #20]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3718      	adds	r7, #24
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008362:	2b00      	cmp	r3, #0
 8008364:	d018      	beq.n	8008398 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68da      	ldr	r2, [r3, #12]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836e:	441a      	add	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	429a      	cmp	r2, r3
 800837e:	d303      	bcc.n	8008388 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68d9      	ldr	r1, [r3, #12]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008390:	461a      	mov	r2, r3
 8008392:	6838      	ldr	r0, [r7, #0]
 8008394:	f00f faf5 	bl	8017982 <memcpy>
	}
}
 8008398:	bf00      	nop
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80083a8:	f001 fc96 	bl	8009cd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083b4:	e011      	b.n	80083da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d012      	beq.n	80083e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	3324      	adds	r3, #36	@ 0x24
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fd34 	bl	8008e30 <xTaskRemoveFromEventList>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80083ce:	f000 fe35 	bl	800903c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
 80083d4:	3b01      	subs	r3, #1
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	dce9      	bgt.n	80083b6 <prvUnlockQueue+0x16>
 80083e2:	e000      	b.n	80083e6 <prvUnlockQueue+0x46>
					break;
 80083e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	22ff      	movs	r2, #255	@ 0xff
 80083ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80083ee:	f001 fca5 	bl	8009d3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083f2:	f001 fc71 	bl	8009cd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083fe:	e011      	b.n	8008424 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d012      	beq.n	800842e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3310      	adds	r3, #16
 800840c:	4618      	mov	r0, r3
 800840e:	f000 fd0f 	bl	8008e30 <xTaskRemoveFromEventList>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008418:	f000 fe10 	bl	800903c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	3b01      	subs	r3, #1
 8008420:	b2db      	uxtb	r3, r3
 8008422:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008428:	2b00      	cmp	r3, #0
 800842a:	dce9      	bgt.n	8008400 <prvUnlockQueue+0x60>
 800842c:	e000      	b.n	8008430 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800842e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	22ff      	movs	r2, #255	@ 0xff
 8008434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008438:	f001 fc80 	bl	8009d3c <vPortExitCritical>
}
 800843c:	bf00      	nop
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800844c:	f001 fc44 	bl	8009cd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008454:	2b00      	cmp	r3, #0
 8008456:	d102      	bne.n	800845e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008458:	2301      	movs	r3, #1
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	e001      	b.n	8008462 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008462:	f001 fc6b 	bl	8009d3c <vPortExitCritical>

	return xReturn;
 8008466:	68fb      	ldr	r3, [r7, #12]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008478:	f001 fc2e 	bl	8009cd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008484:	429a      	cmp	r2, r3
 8008486:	d102      	bne.n	800848e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008488:	2301      	movs	r3, #1
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	e001      	b.n	8008492 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008492:	f001 fc53 	bl	8009d3c <vPortExitCritical>

	return xReturn;
 8008496:	68fb      	ldr	r3, [r7, #12]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084aa:	2300      	movs	r3, #0
 80084ac:	60fb      	str	r3, [r7, #12]
 80084ae:	e014      	b.n	80084da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80084b0:	4a0f      	ldr	r2, [pc, #60]	@ (80084f0 <vQueueAddToRegistry+0x50>)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10b      	bne.n	80084d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80084bc:	490c      	ldr	r1, [pc, #48]	@ (80084f0 <vQueueAddToRegistry+0x50>)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80084c6:	4a0a      	ldr	r2, [pc, #40]	@ (80084f0 <vQueueAddToRegistry+0x50>)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	4413      	add	r3, r2
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80084d2:	e006      	b.n	80084e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3301      	adds	r3, #1
 80084d8:	60fb      	str	r3, [r7, #12]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b07      	cmp	r3, #7
 80084de:	d9e7      	bls.n	80084b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80084e0:	bf00      	nop
 80084e2:	bf00      	nop
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	200050d8 	.word	0x200050d8

080084f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008504:	f001 fbe8 	bl	8009cd8 <vPortEnterCritical>
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800850e:	b25b      	sxtb	r3, r3
 8008510:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008514:	d103      	bne.n	800851e <vQueueWaitForMessageRestricted+0x2a>
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008524:	b25b      	sxtb	r3, r3
 8008526:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800852a:	d103      	bne.n	8008534 <vQueueWaitForMessageRestricted+0x40>
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008534:	f001 fc02 	bl	8009d3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800853c:	2b00      	cmp	r3, #0
 800853e:	d106      	bne.n	800854e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	3324      	adds	r3, #36	@ 0x24
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	68b9      	ldr	r1, [r7, #8]
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fc45 	bl	8008dd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800854e:	6978      	ldr	r0, [r7, #20]
 8008550:	f7ff ff26 	bl	80083a0 <prvUnlockQueue>
	}
 8008554:	bf00      	nop
 8008556:	3718      	adds	r7, #24
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08e      	sub	sp, #56	@ 0x38
 8008560:	af04      	add	r7, sp, #16
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
 8008568:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800856a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10b      	bne.n	8008588 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	623b      	str	r3, [r7, #32]
}
 8008582:	bf00      	nop
 8008584:	bf00      	nop
 8008586:	e7fd      	b.n	8008584 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10b      	bne.n	80085a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	61fb      	str	r3, [r7, #28]
}
 80085a0:	bf00      	nop
 80085a2:	bf00      	nop
 80085a4:	e7fd      	b.n	80085a2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80085a6:	235c      	movs	r3, #92	@ 0x5c
 80085a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80085ae:	d00b      	beq.n	80085c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	61bb      	str	r3, [r7, #24]
}
 80085c2:	bf00      	nop
 80085c4:	bf00      	nop
 80085c6:	e7fd      	b.n	80085c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80085c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80085ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d01e      	beq.n	800860e <xTaskCreateStatic+0xb2>
 80085d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d01b      	beq.n	800860e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085e8:	2300      	movs	r3, #0
 80085ea:	9303      	str	r3, [sp, #12]
 80085ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ee:	9302      	str	r3, [sp, #8]
 80085f0:	f107 0314 	add.w	r3, r7, #20
 80085f4:	9301      	str	r3, [sp, #4]
 80085f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 f850 	bl	80086a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008606:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008608:	f000 f8de 	bl	80087c8 <prvAddNewTaskToReadyList>
 800860c:	e001      	b.n	8008612 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800860e:	2300      	movs	r3, #0
 8008610:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008612:	697b      	ldr	r3, [r7, #20]
	}
 8008614:	4618      	mov	r0, r3
 8008616:	3728      	adds	r7, #40	@ 0x28
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08c      	sub	sp, #48	@ 0x30
 8008620:	af04      	add	r7, sp, #16
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	4613      	mov	r3, r2
 800862a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800862c:	88fb      	ldrh	r3, [r7, #6]
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4618      	mov	r0, r3
 8008632:	f001 fc73 	bl	8009f1c <pvPortMalloc>
 8008636:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00e      	beq.n	800865c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800863e:	205c      	movs	r0, #92	@ 0x5c
 8008640:	f001 fc6c 	bl	8009f1c <pvPortMalloc>
 8008644:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	631a      	str	r2, [r3, #48]	@ 0x30
 8008652:	e005      	b.n	8008660 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008654:	6978      	ldr	r0, [r7, #20]
 8008656:	f001 fd2f 	bl	800a0b8 <vPortFree>
 800865a:	e001      	b.n	8008660 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800865c:	2300      	movs	r3, #0
 800865e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d017      	beq.n	8008696 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800866e:	88fa      	ldrh	r2, [r7, #6]
 8008670:	2300      	movs	r3, #0
 8008672:	9303      	str	r3, [sp, #12]
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	9302      	str	r3, [sp, #8]
 8008678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	68b9      	ldr	r1, [r7, #8]
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f000 f80e 	bl	80086a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800868a:	69f8      	ldr	r0, [r7, #28]
 800868c:	f000 f89c 	bl	80087c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008690:	2301      	movs	r3, #1
 8008692:	61bb      	str	r3, [r7, #24]
 8008694:	e002      	b.n	800869c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008696:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800869a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800869c:	69bb      	ldr	r3, [r7, #24]
	}
 800869e:	4618      	mov	r0, r3
 80086a0:	3720      	adds	r7, #32
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b088      	sub	sp, #32
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	607a      	str	r2, [r7, #4]
 80086b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80086b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	461a      	mov	r2, r3
 80086be:	21a5      	movs	r1, #165	@ 0xa5
 80086c0:	f00f f896 	bl	80177f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80086c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80086ce:	3b01      	subs	r3, #1
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	f023 0307 	bic.w	r3, r3, #7
 80086dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	f003 0307 	and.w	r3, r3, #7
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00b      	beq.n	8008700 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80086e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	617b      	str	r3, [r7, #20]
}
 80086fa:	bf00      	nop
 80086fc:	bf00      	nop
 80086fe:	e7fd      	b.n	80086fc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d01f      	beq.n	8008746 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008706:	2300      	movs	r3, #0
 8008708:	61fb      	str	r3, [r7, #28]
 800870a:	e012      	b.n	8008732 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	4413      	add	r3, r2
 8008712:	7819      	ldrb	r1, [r3, #0]
 8008714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	4413      	add	r3, r2
 800871a:	3334      	adds	r3, #52	@ 0x34
 800871c:	460a      	mov	r2, r1
 800871e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	4413      	add	r3, r2
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d006      	beq.n	800873a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	3301      	adds	r3, #1
 8008730:	61fb      	str	r3, [r7, #28]
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	2b0f      	cmp	r3, #15
 8008736:	d9e9      	bls.n	800870c <prvInitialiseNewTask+0x66>
 8008738:	e000      	b.n	800873c <prvInitialiseNewTask+0x96>
			{
				break;
 800873a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800873c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008744:	e003      	b.n	800874e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800874e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008750:	2b37      	cmp	r3, #55	@ 0x37
 8008752:	d901      	bls.n	8008758 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008754:	2337      	movs	r3, #55	@ 0x37
 8008756:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800875c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800875e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008762:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008766:	2200      	movs	r2, #0
 8008768:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800876a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876c:	3304      	adds	r3, #4
 800876e:	4618      	mov	r0, r3
 8008770:	f7ff f8a8 	bl	80078c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008776:	3318      	adds	r3, #24
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff f8a3 	bl	80078c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800877e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008782:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008786:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800878a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800878e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008790:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008792:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008796:	2200      	movs	r2, #0
 8008798:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800879a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	68f9      	ldr	r1, [r7, #12]
 80087a6:	69b8      	ldr	r0, [r7, #24]
 80087a8:	f001 f966 	bl	8009a78 <pxPortInitialiseStack>
 80087ac:	4602      	mov	r2, r0
 80087ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80087b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d002      	beq.n	80087be <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087be:	bf00      	nop
 80087c0:	3720      	adds	r7, #32
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80087d0:	f001 fa82 	bl	8009cd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087d4:	4b2d      	ldr	r3, [pc, #180]	@ (800888c <prvAddNewTaskToReadyList+0xc4>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3301      	adds	r3, #1
 80087da:	4a2c      	ldr	r2, [pc, #176]	@ (800888c <prvAddNewTaskToReadyList+0xc4>)
 80087dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087de:	4b2c      	ldr	r3, [pc, #176]	@ (8008890 <prvAddNewTaskToReadyList+0xc8>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d109      	bne.n	80087fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008890 <prvAddNewTaskToReadyList+0xc8>)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80087ec:	4b27      	ldr	r3, [pc, #156]	@ (800888c <prvAddNewTaskToReadyList+0xc4>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d110      	bne.n	8008816 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80087f4:	f000 fc46 	bl	8009084 <prvInitialiseTaskLists>
 80087f8:	e00d      	b.n	8008816 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80087fa:	4b26      	ldr	r3, [pc, #152]	@ (8008894 <prvAddNewTaskToReadyList+0xcc>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d109      	bne.n	8008816 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008802:	4b23      	ldr	r3, [pc, #140]	@ (8008890 <prvAddNewTaskToReadyList+0xc8>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880c:	429a      	cmp	r2, r3
 800880e:	d802      	bhi.n	8008816 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008810:	4a1f      	ldr	r2, [pc, #124]	@ (8008890 <prvAddNewTaskToReadyList+0xc8>)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008816:	4b20      	ldr	r3, [pc, #128]	@ (8008898 <prvAddNewTaskToReadyList+0xd0>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3301      	adds	r3, #1
 800881c:	4a1e      	ldr	r2, [pc, #120]	@ (8008898 <prvAddNewTaskToReadyList+0xd0>)
 800881e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008820:	4b1d      	ldr	r3, [pc, #116]	@ (8008898 <prvAddNewTaskToReadyList+0xd0>)
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800882c:	4b1b      	ldr	r3, [pc, #108]	@ (800889c <prvAddNewTaskToReadyList+0xd4>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	429a      	cmp	r2, r3
 8008832:	d903      	bls.n	800883c <prvAddNewTaskToReadyList+0x74>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008838:	4a18      	ldr	r2, [pc, #96]	@ (800889c <prvAddNewTaskToReadyList+0xd4>)
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008840:	4613      	mov	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4a15      	ldr	r2, [pc, #84]	@ (80088a0 <prvAddNewTaskToReadyList+0xd8>)
 800884a:	441a      	add	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	3304      	adds	r3, #4
 8008850:	4619      	mov	r1, r3
 8008852:	4610      	mov	r0, r2
 8008854:	f7ff f843 	bl	80078de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008858:	f001 fa70 	bl	8009d3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800885c:	4b0d      	ldr	r3, [pc, #52]	@ (8008894 <prvAddNewTaskToReadyList+0xcc>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00e      	beq.n	8008882 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008864:	4b0a      	ldr	r3, [pc, #40]	@ (8008890 <prvAddNewTaskToReadyList+0xc8>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886e:	429a      	cmp	r2, r3
 8008870:	d207      	bcs.n	8008882 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008872:	4b0c      	ldr	r3, [pc, #48]	@ (80088a4 <prvAddNewTaskToReadyList+0xdc>)
 8008874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008878:	601a      	str	r2, [r3, #0]
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008882:	bf00      	nop
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	200055ec 	.word	0x200055ec
 8008890:	20005118 	.word	0x20005118
 8008894:	200055f8 	.word	0x200055f8
 8008898:	20005608 	.word	0x20005608
 800889c:	200055f4 	.word	0x200055f4
 80088a0:	2000511c 	.word	0x2000511c
 80088a4:	e000ed04 	.word	0xe000ed04

080088a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088b0:	2300      	movs	r3, #0
 80088b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d018      	beq.n	80088ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088ba:	4b14      	ldr	r3, [pc, #80]	@ (800890c <vTaskDelay+0x64>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00b      	beq.n	80088da <vTaskDelay+0x32>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	60bb      	str	r3, [r7, #8]
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
 80088d8:	e7fd      	b.n	80088d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80088da:	f000 f883 	bl	80089e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088de:	2100      	movs	r1, #0
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fd1b 	bl	800931c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088e6:	f000 f88b 	bl	8008a00 <xTaskResumeAll>
 80088ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d107      	bne.n	8008902 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80088f2:	4b07      	ldr	r3, [pc, #28]	@ (8008910 <vTaskDelay+0x68>)
 80088f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008902:	bf00      	nop
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	20005614 	.word	0x20005614
 8008910:	e000ed04 	.word	0xe000ed04

08008914 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b08a      	sub	sp, #40	@ 0x28
 8008918:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800891a:	2300      	movs	r3, #0
 800891c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800891e:	2300      	movs	r3, #0
 8008920:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008922:	463a      	mov	r2, r7
 8008924:	1d39      	adds	r1, r7, #4
 8008926:	f107 0308 	add.w	r3, r7, #8
 800892a:	4618      	mov	r0, r3
 800892c:	f7fe ff76 	bl	800781c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	9202      	str	r2, [sp, #8]
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	2300      	movs	r3, #0
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	2300      	movs	r3, #0
 8008940:	460a      	mov	r2, r1
 8008942:	4922      	ldr	r1, [pc, #136]	@ (80089cc <vTaskStartScheduler+0xb8>)
 8008944:	4822      	ldr	r0, [pc, #136]	@ (80089d0 <vTaskStartScheduler+0xbc>)
 8008946:	f7ff fe09 	bl	800855c <xTaskCreateStatic>
 800894a:	4603      	mov	r3, r0
 800894c:	4a21      	ldr	r2, [pc, #132]	@ (80089d4 <vTaskStartScheduler+0xc0>)
 800894e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008950:	4b20      	ldr	r3, [pc, #128]	@ (80089d4 <vTaskStartScheduler+0xc0>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008958:	2301      	movs	r3, #1
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	e001      	b.n	8008962 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800895e:	2300      	movs	r3, #0
 8008960:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d102      	bne.n	800896e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008968:	f000 fd2c 	bl	80093c4 <xTimerCreateTimerTask>
 800896c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d116      	bne.n	80089a2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	613b      	str	r3, [r7, #16]
}
 8008986:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008988:	4b13      	ldr	r3, [pc, #76]	@ (80089d8 <vTaskStartScheduler+0xc4>)
 800898a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800898e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008990:	4b12      	ldr	r3, [pc, #72]	@ (80089dc <vTaskStartScheduler+0xc8>)
 8008992:	2201      	movs	r2, #1
 8008994:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008996:	4b12      	ldr	r3, [pc, #72]	@ (80089e0 <vTaskStartScheduler+0xcc>)
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800899c:	f001 f8f8 	bl	8009b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089a0:	e00f      	b.n	80089c2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089a8:	d10b      	bne.n	80089c2 <vTaskStartScheduler+0xae>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	60fb      	str	r3, [r7, #12]
}
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	e7fd      	b.n	80089be <vTaskStartScheduler+0xaa>
}
 80089c2:	bf00      	nop
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	080187e0 	.word	0x080187e0
 80089d0:	08009055 	.word	0x08009055
 80089d4:	20005610 	.word	0x20005610
 80089d8:	2000560c 	.word	0x2000560c
 80089dc:	200055f8 	.word	0x200055f8
 80089e0:	200055f0 	.word	0x200055f0

080089e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089e4:	b480      	push	{r7}
 80089e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80089e8:	4b04      	ldr	r3, [pc, #16]	@ (80089fc <vTaskSuspendAll+0x18>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3301      	adds	r3, #1
 80089ee:	4a03      	ldr	r2, [pc, #12]	@ (80089fc <vTaskSuspendAll+0x18>)
 80089f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80089f2:	bf00      	nop
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	20005614 	.word	0x20005614

08008a00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a0e:	4b42      	ldr	r3, [pc, #264]	@ (8008b18 <xTaskResumeAll+0x118>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10b      	bne.n	8008a2e <xTaskResumeAll+0x2e>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	603b      	str	r3, [r7, #0]
}
 8008a28:	bf00      	nop
 8008a2a:	bf00      	nop
 8008a2c:	e7fd      	b.n	8008a2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a2e:	f001 f953 	bl	8009cd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a32:	4b39      	ldr	r3, [pc, #228]	@ (8008b18 <xTaskResumeAll+0x118>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3b01      	subs	r3, #1
 8008a38:	4a37      	ldr	r2, [pc, #220]	@ (8008b18 <xTaskResumeAll+0x118>)
 8008a3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a3c:	4b36      	ldr	r3, [pc, #216]	@ (8008b18 <xTaskResumeAll+0x118>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d162      	bne.n	8008b0a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a44:	4b35      	ldr	r3, [pc, #212]	@ (8008b1c <xTaskResumeAll+0x11c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d05e      	beq.n	8008b0a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a4c:	e02f      	b.n	8008aae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a4e:	4b34      	ldr	r3, [pc, #208]	@ (8008b20 <xTaskResumeAll+0x120>)
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	3318      	adds	r3, #24
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe ff9c 	bl	8007998 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	3304      	adds	r3, #4
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fe ff97 	bl	8007998 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8008b24 <xTaskResumeAll+0x124>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d903      	bls.n	8008a7e <xTaskResumeAll+0x7e>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7a:	4a2a      	ldr	r2, [pc, #168]	@ (8008b24 <xTaskResumeAll+0x124>)
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a82:	4613      	mov	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4a27      	ldr	r2, [pc, #156]	@ (8008b28 <xTaskResumeAll+0x128>)
 8008a8c:	441a      	add	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3304      	adds	r3, #4
 8008a92:	4619      	mov	r1, r3
 8008a94:	4610      	mov	r0, r2
 8008a96:	f7fe ff22 	bl	80078de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a9e:	4b23      	ldr	r3, [pc, #140]	@ (8008b2c <xTaskResumeAll+0x12c>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d302      	bcc.n	8008aae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008aa8:	4b21      	ldr	r3, [pc, #132]	@ (8008b30 <xTaskResumeAll+0x130>)
 8008aaa:	2201      	movs	r2, #1
 8008aac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008aae:	4b1c      	ldr	r3, [pc, #112]	@ (8008b20 <xTaskResumeAll+0x120>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1cb      	bne.n	8008a4e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008abc:	f000 fb80 	bl	80091c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8008b34 <xTaskResumeAll+0x134>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d010      	beq.n	8008aee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008acc:	f000 f846 	bl	8008b5c <xTaskIncrementTick>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d002      	beq.n	8008adc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008ad6:	4b16      	ldr	r3, [pc, #88]	@ (8008b30 <xTaskResumeAll+0x130>)
 8008ad8:	2201      	movs	r2, #1
 8008ada:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1f1      	bne.n	8008acc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008ae8:	4b12      	ldr	r3, [pc, #72]	@ (8008b34 <xTaskResumeAll+0x134>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008aee:	4b10      	ldr	r3, [pc, #64]	@ (8008b30 <xTaskResumeAll+0x130>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d009      	beq.n	8008b0a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008af6:	2301      	movs	r3, #1
 8008af8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008afa:	4b0f      	ldr	r3, [pc, #60]	@ (8008b38 <xTaskResumeAll+0x138>)
 8008afc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b00:	601a      	str	r2, [r3, #0]
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b0a:	f001 f917 	bl	8009d3c <vPortExitCritical>

	return xAlreadyYielded;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	20005614 	.word	0x20005614
 8008b1c:	200055ec 	.word	0x200055ec
 8008b20:	200055ac 	.word	0x200055ac
 8008b24:	200055f4 	.word	0x200055f4
 8008b28:	2000511c 	.word	0x2000511c
 8008b2c:	20005118 	.word	0x20005118
 8008b30:	20005600 	.word	0x20005600
 8008b34:	200055fc 	.word	0x200055fc
 8008b38:	e000ed04 	.word	0xe000ed04

08008b3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b42:	4b05      	ldr	r3, [pc, #20]	@ (8008b58 <xTaskGetTickCount+0x1c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b48:	687b      	ldr	r3, [r7, #4]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	200055f0 	.word	0x200055f0

08008b5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b62:	2300      	movs	r3, #0
 8008b64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b66:	4b4f      	ldr	r3, [pc, #316]	@ (8008ca4 <xTaskIncrementTick+0x148>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f040 8090 	bne.w	8008c90 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b70:	4b4d      	ldr	r3, [pc, #308]	@ (8008ca8 <xTaskIncrementTick+0x14c>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3301      	adds	r3, #1
 8008b76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b78:	4a4b      	ldr	r2, [pc, #300]	@ (8008ca8 <xTaskIncrementTick+0x14c>)
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d121      	bne.n	8008bc8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b84:	4b49      	ldr	r3, [pc, #292]	@ (8008cac <xTaskIncrementTick+0x150>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00b      	beq.n	8008ba6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	603b      	str	r3, [r7, #0]
}
 8008ba0:	bf00      	nop
 8008ba2:	bf00      	nop
 8008ba4:	e7fd      	b.n	8008ba2 <xTaskIncrementTick+0x46>
 8008ba6:	4b41      	ldr	r3, [pc, #260]	@ (8008cac <xTaskIncrementTick+0x150>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	4b40      	ldr	r3, [pc, #256]	@ (8008cb0 <xTaskIncrementTick+0x154>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a3e      	ldr	r2, [pc, #248]	@ (8008cac <xTaskIncrementTick+0x150>)
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	4a3e      	ldr	r2, [pc, #248]	@ (8008cb0 <xTaskIncrementTick+0x154>)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6013      	str	r3, [r2, #0]
 8008bba:	4b3e      	ldr	r3, [pc, #248]	@ (8008cb4 <xTaskIncrementTick+0x158>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8008cb4 <xTaskIncrementTick+0x158>)
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	f000 fafc 	bl	80091c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8008cb8 <xTaskIncrementTick+0x15c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d349      	bcc.n	8008c66 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bd2:	4b36      	ldr	r3, [pc, #216]	@ (8008cac <xTaskIncrementTick+0x150>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d104      	bne.n	8008be6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bdc:	4b36      	ldr	r3, [pc, #216]	@ (8008cb8 <xTaskIncrementTick+0x15c>)
 8008bde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008be2:	601a      	str	r2, [r3, #0]
					break;
 8008be4:	e03f      	b.n	8008c66 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be6:	4b31      	ldr	r3, [pc, #196]	@ (8008cac <xTaskIncrementTick+0x150>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d203      	bcs.n	8008c06 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8008cb8 <xTaskIncrementTick+0x15c>)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c04:	e02f      	b.n	8008c66 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	3304      	adds	r3, #4
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe fec4 	bl	8007998 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d004      	beq.n	8008c22 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	3318      	adds	r3, #24
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fe febb 	bl	8007998 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c26:	4b25      	ldr	r3, [pc, #148]	@ (8008cbc <xTaskIncrementTick+0x160>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d903      	bls.n	8008c36 <xTaskIncrementTick+0xda>
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c32:	4a22      	ldr	r2, [pc, #136]	@ (8008cbc <xTaskIncrementTick+0x160>)
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4a1f      	ldr	r2, [pc, #124]	@ (8008cc0 <xTaskIncrementTick+0x164>)
 8008c44:	441a      	add	r2, r3
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	3304      	adds	r3, #4
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	f7fe fe46 	bl	80078de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c56:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc4 <xTaskIncrementTick+0x168>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d3b8      	bcc.n	8008bd2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008c60:	2301      	movs	r3, #1
 8008c62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c64:	e7b5      	b.n	8008bd2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c66:	4b17      	ldr	r3, [pc, #92]	@ (8008cc4 <xTaskIncrementTick+0x168>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c6c:	4914      	ldr	r1, [pc, #80]	@ (8008cc0 <xTaskIncrementTick+0x164>)
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	440b      	add	r3, r1
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d901      	bls.n	8008c82 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c82:	4b11      	ldr	r3, [pc, #68]	@ (8008cc8 <xTaskIncrementTick+0x16c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d007      	beq.n	8008c9a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	617b      	str	r3, [r7, #20]
 8008c8e:	e004      	b.n	8008c9a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c90:	4b0e      	ldr	r3, [pc, #56]	@ (8008ccc <xTaskIncrementTick+0x170>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	3301      	adds	r3, #1
 8008c96:	4a0d      	ldr	r2, [pc, #52]	@ (8008ccc <xTaskIncrementTick+0x170>)
 8008c98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c9a:	697b      	ldr	r3, [r7, #20]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	20005614 	.word	0x20005614
 8008ca8:	200055f0 	.word	0x200055f0
 8008cac:	200055a4 	.word	0x200055a4
 8008cb0:	200055a8 	.word	0x200055a8
 8008cb4:	20005604 	.word	0x20005604
 8008cb8:	2000560c 	.word	0x2000560c
 8008cbc:	200055f4 	.word	0x200055f4
 8008cc0:	2000511c 	.word	0x2000511c
 8008cc4:	20005118 	.word	0x20005118
 8008cc8:	20005600 	.word	0x20005600
 8008ccc:	200055fc 	.word	0x200055fc

08008cd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008cd6:	4b28      	ldr	r3, [pc, #160]	@ (8008d78 <vTaskSwitchContext+0xa8>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008cde:	4b27      	ldr	r3, [pc, #156]	@ (8008d7c <vTaskSwitchContext+0xac>)
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ce4:	e042      	b.n	8008d6c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008ce6:	4b25      	ldr	r3, [pc, #148]	@ (8008d7c <vTaskSwitchContext+0xac>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cec:	4b24      	ldr	r3, [pc, #144]	@ (8008d80 <vTaskSwitchContext+0xb0>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	60fb      	str	r3, [r7, #12]
 8008cf2:	e011      	b.n	8008d18 <vTaskSwitchContext+0x48>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10b      	bne.n	8008d12 <vTaskSwitchContext+0x42>
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	607b      	str	r3, [r7, #4]
}
 8008d0c:	bf00      	nop
 8008d0e:	bf00      	nop
 8008d10:	e7fd      	b.n	8008d0e <vTaskSwitchContext+0x3e>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3b01      	subs	r3, #1
 8008d16:	60fb      	str	r3, [r7, #12]
 8008d18:	491a      	ldr	r1, [pc, #104]	@ (8008d84 <vTaskSwitchContext+0xb4>)
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	440b      	add	r3, r1
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d0e3      	beq.n	8008cf4 <vTaskSwitchContext+0x24>
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4a13      	ldr	r2, [pc, #76]	@ (8008d84 <vTaskSwitchContext+0xb4>)
 8008d38:	4413      	add	r3, r2
 8008d3a:	60bb      	str	r3, [r7, #8]
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	605a      	str	r2, [r3, #4]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d104      	bne.n	8008d5c <vTaskSwitchContext+0x8c>
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	605a      	str	r2, [r3, #4]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	4a09      	ldr	r2, [pc, #36]	@ (8008d88 <vTaskSwitchContext+0xb8>)
 8008d64:	6013      	str	r3, [r2, #0]
 8008d66:	4a06      	ldr	r2, [pc, #24]	@ (8008d80 <vTaskSwitchContext+0xb0>)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6013      	str	r3, [r2, #0]
}
 8008d6c:	bf00      	nop
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	20005614 	.word	0x20005614
 8008d7c:	20005600 	.word	0x20005600
 8008d80:	200055f4 	.word	0x200055f4
 8008d84:	2000511c 	.word	0x2000511c
 8008d88:	20005118 	.word	0x20005118

08008d8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10b      	bne.n	8008db4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	60fb      	str	r3, [r7, #12]
}
 8008dae:	bf00      	nop
 8008db0:	bf00      	nop
 8008db2:	e7fd      	b.n	8008db0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008db4:	4b07      	ldr	r3, [pc, #28]	@ (8008dd4 <vTaskPlaceOnEventList+0x48>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3318      	adds	r3, #24
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7fe fdb2 	bl	8007926 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008dc2:	2101      	movs	r1, #1
 8008dc4:	6838      	ldr	r0, [r7, #0]
 8008dc6:	f000 faa9 	bl	800931c <prvAddCurrentTaskToDelayedList>
}
 8008dca:	bf00      	nop
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20005118 	.word	0x20005118

08008dd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10b      	bne.n	8008e02 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	617b      	str	r3, [r7, #20]
}
 8008dfc:	bf00      	nop
 8008dfe:	bf00      	nop
 8008e00:	e7fd      	b.n	8008dfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e02:	4b0a      	ldr	r3, [pc, #40]	@ (8008e2c <vTaskPlaceOnEventListRestricted+0x54>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3318      	adds	r3, #24
 8008e08:	4619      	mov	r1, r3
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f7fe fd67 	bl	80078de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d002      	beq.n	8008e1c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008e16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e1a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e1c:	6879      	ldr	r1, [r7, #4]
 8008e1e:	68b8      	ldr	r0, [r7, #8]
 8008e20:	f000 fa7c 	bl	800931c <prvAddCurrentTaskToDelayedList>
	}
 8008e24:	bf00      	nop
 8008e26:	3718      	adds	r7, #24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20005118 	.word	0x20005118

08008e30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10b      	bne.n	8008e5e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	60fb      	str	r3, [r7, #12]
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	e7fd      	b.n	8008e5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	3318      	adds	r3, #24
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fe fd98 	bl	8007998 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e68:	4b1d      	ldr	r3, [pc, #116]	@ (8008ee0 <xTaskRemoveFromEventList+0xb0>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d11d      	bne.n	8008eac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	3304      	adds	r3, #4
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fe fd8f 	bl	8007998 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e7e:	4b19      	ldr	r3, [pc, #100]	@ (8008ee4 <xTaskRemoveFromEventList+0xb4>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d903      	bls.n	8008e8e <xTaskRemoveFromEventList+0x5e>
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8a:	4a16      	ldr	r2, [pc, #88]	@ (8008ee4 <xTaskRemoveFromEventList+0xb4>)
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e92:	4613      	mov	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4a13      	ldr	r2, [pc, #76]	@ (8008ee8 <xTaskRemoveFromEventList+0xb8>)
 8008e9c:	441a      	add	r2, r3
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	f7fe fd1a 	bl	80078de <vListInsertEnd>
 8008eaa:	e005      	b.n	8008eb8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	3318      	adds	r3, #24
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	480e      	ldr	r0, [pc, #56]	@ (8008eec <xTaskRemoveFromEventList+0xbc>)
 8008eb4:	f7fe fd13 	bl	80078de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8008ef0 <xTaskRemoveFromEventList+0xc0>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d905      	bls.n	8008ed2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008eca:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef4 <xTaskRemoveFromEventList+0xc4>)
 8008ecc:	2201      	movs	r2, #1
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	e001      	b.n	8008ed6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ed6:	697b      	ldr	r3, [r7, #20]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20005614 	.word	0x20005614
 8008ee4:	200055f4 	.word	0x200055f4
 8008ee8:	2000511c 	.word	0x2000511c
 8008eec:	200055ac 	.word	0x200055ac
 8008ef0:	20005118 	.word	0x20005118
 8008ef4:	20005600 	.word	0x20005600

08008ef8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10b      	bne.n	8008f1e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	60fb      	str	r3, [r7, #12]
}
 8008f18:	bf00      	nop
 8008f1a:	bf00      	nop
 8008f1c:	e7fd      	b.n	8008f1a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008f1e:	f000 fedb 	bl	8009cd8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f22:	4b07      	ldr	r3, [pc, #28]	@ (8008f40 <vTaskSetTimeOutState+0x48>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008f2a:	4b06      	ldr	r3, [pc, #24]	@ (8008f44 <vTaskSetTimeOutState+0x4c>)
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008f32:	f000 ff03 	bl	8009d3c <vPortExitCritical>
}
 8008f36:	bf00      	nop
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	20005604 	.word	0x20005604
 8008f44:	200055f0 	.word	0x200055f0

08008f48 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f50:	4b06      	ldr	r3, [pc, #24]	@ (8008f6c <vTaskInternalSetTimeOutState+0x24>)
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f58:	4b05      	ldr	r3, [pc, #20]	@ (8008f70 <vTaskInternalSetTimeOutState+0x28>)
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	605a      	str	r2, [r3, #4]
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	20005604 	.word	0x20005604
 8008f70:	200055f0 	.word	0x200055f0

08008f74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10b      	bne.n	8008f9c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	613b      	str	r3, [r7, #16]
}
 8008f96:	bf00      	nop
 8008f98:	bf00      	nop
 8008f9a:	e7fd      	b.n	8008f98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10b      	bne.n	8008fba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	60fb      	str	r3, [r7, #12]
}
 8008fb4:	bf00      	nop
 8008fb6:	bf00      	nop
 8008fb8:	e7fd      	b.n	8008fb6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008fba:	f000 fe8d 	bl	8009cd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8009034 <xTaskCheckForTimeOut+0xc0>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	69ba      	ldr	r2, [r7, #24]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fd6:	d102      	bne.n	8008fde <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61fb      	str	r3, [r7, #28]
 8008fdc:	e023      	b.n	8009026 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	4b15      	ldr	r3, [pc, #84]	@ (8009038 <xTaskCheckForTimeOut+0xc4>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d007      	beq.n	8008ffa <xTaskCheckForTimeOut+0x86>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d302      	bcc.n	8008ffa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	61fb      	str	r3, [r7, #28]
 8008ff8:	e015      	b.n	8009026 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	429a      	cmp	r2, r3
 8009002:	d20b      	bcs.n	800901c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	1ad2      	subs	r2, r2, r3
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff ff99 	bl	8008f48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009016:	2300      	movs	r3, #0
 8009018:	61fb      	str	r3, [r7, #28]
 800901a:	e004      	b.n	8009026 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009022:	2301      	movs	r3, #1
 8009024:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009026:	f000 fe89 	bl	8009d3c <vPortExitCritical>

	return xReturn;
 800902a:	69fb      	ldr	r3, [r7, #28]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3720      	adds	r7, #32
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	200055f0 	.word	0x200055f0
 8009038:	20005604 	.word	0x20005604

0800903c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800903c:	b480      	push	{r7}
 800903e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009040:	4b03      	ldr	r3, [pc, #12]	@ (8009050 <vTaskMissedYield+0x14>)
 8009042:	2201      	movs	r2, #1
 8009044:	601a      	str	r2, [r3, #0]
}
 8009046:	bf00      	nop
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	20005600 	.word	0x20005600

08009054 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800905c:	f000 f852 	bl	8009104 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009060:	4b06      	ldr	r3, [pc, #24]	@ (800907c <prvIdleTask+0x28>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d9f9      	bls.n	800905c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009068:	4b05      	ldr	r3, [pc, #20]	@ (8009080 <prvIdleTask+0x2c>)
 800906a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009078:	e7f0      	b.n	800905c <prvIdleTask+0x8>
 800907a:	bf00      	nop
 800907c:	2000511c 	.word	0x2000511c
 8009080:	e000ed04 	.word	0xe000ed04

08009084 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800908a:	2300      	movs	r3, #0
 800908c:	607b      	str	r3, [r7, #4]
 800908e:	e00c      	b.n	80090aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	4613      	mov	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4a12      	ldr	r2, [pc, #72]	@ (80090e4 <prvInitialiseTaskLists+0x60>)
 800909c:	4413      	add	r3, r2
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe fbf0 	bl	8007884 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3301      	adds	r3, #1
 80090a8:	607b      	str	r3, [r7, #4]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b37      	cmp	r3, #55	@ 0x37
 80090ae:	d9ef      	bls.n	8009090 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090b0:	480d      	ldr	r0, [pc, #52]	@ (80090e8 <prvInitialiseTaskLists+0x64>)
 80090b2:	f7fe fbe7 	bl	8007884 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090b6:	480d      	ldr	r0, [pc, #52]	@ (80090ec <prvInitialiseTaskLists+0x68>)
 80090b8:	f7fe fbe4 	bl	8007884 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090bc:	480c      	ldr	r0, [pc, #48]	@ (80090f0 <prvInitialiseTaskLists+0x6c>)
 80090be:	f7fe fbe1 	bl	8007884 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090c2:	480c      	ldr	r0, [pc, #48]	@ (80090f4 <prvInitialiseTaskLists+0x70>)
 80090c4:	f7fe fbde 	bl	8007884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090c8:	480b      	ldr	r0, [pc, #44]	@ (80090f8 <prvInitialiseTaskLists+0x74>)
 80090ca:	f7fe fbdb 	bl	8007884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090ce:	4b0b      	ldr	r3, [pc, #44]	@ (80090fc <prvInitialiseTaskLists+0x78>)
 80090d0:	4a05      	ldr	r2, [pc, #20]	@ (80090e8 <prvInitialiseTaskLists+0x64>)
 80090d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009100 <prvInitialiseTaskLists+0x7c>)
 80090d6:	4a05      	ldr	r2, [pc, #20]	@ (80090ec <prvInitialiseTaskLists+0x68>)
 80090d8:	601a      	str	r2, [r3, #0]
}
 80090da:	bf00      	nop
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	2000511c 	.word	0x2000511c
 80090e8:	2000557c 	.word	0x2000557c
 80090ec:	20005590 	.word	0x20005590
 80090f0:	200055ac 	.word	0x200055ac
 80090f4:	200055c0 	.word	0x200055c0
 80090f8:	200055d8 	.word	0x200055d8
 80090fc:	200055a4 	.word	0x200055a4
 8009100:	200055a8 	.word	0x200055a8

08009104 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800910a:	e019      	b.n	8009140 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800910c:	f000 fde4 	bl	8009cd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009110:	4b10      	ldr	r3, [pc, #64]	@ (8009154 <prvCheckTasksWaitingTermination+0x50>)
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	3304      	adds	r3, #4
 800911c:	4618      	mov	r0, r3
 800911e:	f7fe fc3b 	bl	8007998 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009122:	4b0d      	ldr	r3, [pc, #52]	@ (8009158 <prvCheckTasksWaitingTermination+0x54>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3b01      	subs	r3, #1
 8009128:	4a0b      	ldr	r2, [pc, #44]	@ (8009158 <prvCheckTasksWaitingTermination+0x54>)
 800912a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800912c:	4b0b      	ldr	r3, [pc, #44]	@ (800915c <prvCheckTasksWaitingTermination+0x58>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3b01      	subs	r3, #1
 8009132:	4a0a      	ldr	r2, [pc, #40]	@ (800915c <prvCheckTasksWaitingTermination+0x58>)
 8009134:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009136:	f000 fe01 	bl	8009d3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f810 	bl	8009160 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009140:	4b06      	ldr	r3, [pc, #24]	@ (800915c <prvCheckTasksWaitingTermination+0x58>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e1      	bne.n	800910c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	200055c0 	.word	0x200055c0
 8009158:	200055ec 	.word	0x200055ec
 800915c:	200055d4 	.word	0x200055d4

08009160 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800916e:	2b00      	cmp	r3, #0
 8009170:	d108      	bne.n	8009184 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009176:	4618      	mov	r0, r3
 8009178:	f000 ff9e 	bl	800a0b8 <vPortFree>
				vPortFree( pxTCB );
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 ff9b 	bl	800a0b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009182:	e019      	b.n	80091b8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800918a:	2b01      	cmp	r3, #1
 800918c:	d103      	bne.n	8009196 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 ff92 	bl	800a0b8 <vPortFree>
	}
 8009194:	e010      	b.n	80091b8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800919c:	2b02      	cmp	r3, #2
 800919e:	d00b      	beq.n	80091b8 <prvDeleteTCB+0x58>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	60fb      	str	r3, [r7, #12]
}
 80091b2:	bf00      	nop
 80091b4:	bf00      	nop
 80091b6:	e7fd      	b.n	80091b4 <prvDeleteTCB+0x54>
	}
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091c6:	4b0c      	ldr	r3, [pc, #48]	@ (80091f8 <prvResetNextTaskUnblockTime+0x38>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d104      	bne.n	80091da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091d0:	4b0a      	ldr	r3, [pc, #40]	@ (80091fc <prvResetNextTaskUnblockTime+0x3c>)
 80091d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091d8:	e008      	b.n	80091ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091da:	4b07      	ldr	r3, [pc, #28]	@ (80091f8 <prvResetNextTaskUnblockTime+0x38>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	4a04      	ldr	r2, [pc, #16]	@ (80091fc <prvResetNextTaskUnblockTime+0x3c>)
 80091ea:	6013      	str	r3, [r2, #0]
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	200055a4 	.word	0x200055a4
 80091fc:	2000560c 	.word	0x2000560c

08009200 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009206:	4b0b      	ldr	r3, [pc, #44]	@ (8009234 <xTaskGetSchedulerState+0x34>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d102      	bne.n	8009214 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800920e:	2301      	movs	r3, #1
 8009210:	607b      	str	r3, [r7, #4]
 8009212:	e008      	b.n	8009226 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009214:	4b08      	ldr	r3, [pc, #32]	@ (8009238 <xTaskGetSchedulerState+0x38>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d102      	bne.n	8009222 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800921c:	2302      	movs	r3, #2
 800921e:	607b      	str	r3, [r7, #4]
 8009220:	e001      	b.n	8009226 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009222:	2300      	movs	r3, #0
 8009224:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009226:	687b      	ldr	r3, [r7, #4]
	}
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	200055f8 	.word	0x200055f8
 8009238:	20005614 	.word	0x20005614

0800923c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009248:	2300      	movs	r3, #0
 800924a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d058      	beq.n	8009304 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009252:	4b2f      	ldr	r3, [pc, #188]	@ (8009310 <xTaskPriorityDisinherit+0xd4>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	429a      	cmp	r2, r3
 800925a:	d00b      	beq.n	8009274 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	60fb      	str	r3, [r7, #12]
}
 800926e:	bf00      	nop
 8009270:	bf00      	nop
 8009272:	e7fd      	b.n	8009270 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10b      	bne.n	8009294 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	60bb      	str	r3, [r7, #8]
}
 800928e:	bf00      	nop
 8009290:	bf00      	nop
 8009292:	e7fd      	b.n	8009290 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009298:	1e5a      	subs	r2, r3, #1
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d02c      	beq.n	8009304 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d128      	bne.n	8009304 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	3304      	adds	r3, #4
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fe fb6e 	bl	8007998 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009314 <xTaskPriorityDisinherit+0xd8>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d903      	bls.n	80092e4 <xTaskPriorityDisinherit+0xa8>
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e0:	4a0c      	ldr	r2, [pc, #48]	@ (8009314 <xTaskPriorityDisinherit+0xd8>)
 80092e2:	6013      	str	r3, [r2, #0]
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092e8:	4613      	mov	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4a09      	ldr	r2, [pc, #36]	@ (8009318 <xTaskPriorityDisinherit+0xdc>)
 80092f2:	441a      	add	r2, r3
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	3304      	adds	r3, #4
 80092f8:	4619      	mov	r1, r3
 80092fa:	4610      	mov	r0, r2
 80092fc:	f7fe faef 	bl	80078de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009300:	2301      	movs	r3, #1
 8009302:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009304:	697b      	ldr	r3, [r7, #20]
	}
 8009306:	4618      	mov	r0, r3
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	20005118 	.word	0x20005118
 8009314:	200055f4 	.word	0x200055f4
 8009318:	2000511c 	.word	0x2000511c

0800931c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009326:	4b21      	ldr	r3, [pc, #132]	@ (80093ac <prvAddCurrentTaskToDelayedList+0x90>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800932c:	4b20      	ldr	r3, [pc, #128]	@ (80093b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3304      	adds	r3, #4
 8009332:	4618      	mov	r0, r3
 8009334:	f7fe fb30 	bl	8007998 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800933e:	d10a      	bne.n	8009356 <prvAddCurrentTaskToDelayedList+0x3a>
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d007      	beq.n	8009356 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009346:	4b1a      	ldr	r3, [pc, #104]	@ (80093b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	3304      	adds	r3, #4
 800934c:	4619      	mov	r1, r3
 800934e:	4819      	ldr	r0, [pc, #100]	@ (80093b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009350:	f7fe fac5 	bl	80078de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009354:	e026      	b.n	80093a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4413      	add	r3, r2
 800935c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800935e:	4b14      	ldr	r3, [pc, #80]	@ (80093b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	429a      	cmp	r2, r3
 800936c:	d209      	bcs.n	8009382 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800936e:	4b12      	ldr	r3, [pc, #72]	@ (80093b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	4b0f      	ldr	r3, [pc, #60]	@ (80093b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3304      	adds	r3, #4
 8009378:	4619      	mov	r1, r3
 800937a:	4610      	mov	r0, r2
 800937c:	f7fe fad3 	bl	8007926 <vListInsert>
}
 8009380:	e010      	b.n	80093a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009382:	4b0e      	ldr	r3, [pc, #56]	@ (80093bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	4b0a      	ldr	r3, [pc, #40]	@ (80093b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3304      	adds	r3, #4
 800938c:	4619      	mov	r1, r3
 800938e:	4610      	mov	r0, r2
 8009390:	f7fe fac9 	bl	8007926 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009394:	4b0a      	ldr	r3, [pc, #40]	@ (80093c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	429a      	cmp	r2, r3
 800939c:	d202      	bcs.n	80093a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800939e:	4a08      	ldr	r2, [pc, #32]	@ (80093c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	6013      	str	r3, [r2, #0]
}
 80093a4:	bf00      	nop
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	200055f0 	.word	0x200055f0
 80093b0:	20005118 	.word	0x20005118
 80093b4:	200055d8 	.word	0x200055d8
 80093b8:	200055a8 	.word	0x200055a8
 80093bc:	200055a4 	.word	0x200055a4
 80093c0:	2000560c 	.word	0x2000560c

080093c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08a      	sub	sp, #40	@ 0x28
 80093c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80093ca:	2300      	movs	r3, #0
 80093cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80093ce:	f000 fb13 	bl	80099f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80093d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009448 <xTimerCreateTimerTask+0x84>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d021      	beq.n	800941e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80093da:	2300      	movs	r3, #0
 80093dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80093de:	2300      	movs	r3, #0
 80093e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80093e2:	1d3a      	adds	r2, r7, #4
 80093e4:	f107 0108 	add.w	r1, r7, #8
 80093e8:	f107 030c 	add.w	r3, r7, #12
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fe fa2f 	bl	8007850 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	9202      	str	r2, [sp, #8]
 80093fa:	9301      	str	r3, [sp, #4]
 80093fc:	2302      	movs	r3, #2
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	2300      	movs	r3, #0
 8009402:	460a      	mov	r2, r1
 8009404:	4911      	ldr	r1, [pc, #68]	@ (800944c <xTimerCreateTimerTask+0x88>)
 8009406:	4812      	ldr	r0, [pc, #72]	@ (8009450 <xTimerCreateTimerTask+0x8c>)
 8009408:	f7ff f8a8 	bl	800855c <xTaskCreateStatic>
 800940c:	4603      	mov	r3, r0
 800940e:	4a11      	ldr	r2, [pc, #68]	@ (8009454 <xTimerCreateTimerTask+0x90>)
 8009410:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009412:	4b10      	ldr	r3, [pc, #64]	@ (8009454 <xTimerCreateTimerTask+0x90>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800941a:	2301      	movs	r3, #1
 800941c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10b      	bne.n	800943c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	613b      	str	r3, [r7, #16]
}
 8009436:	bf00      	nop
 8009438:	bf00      	nop
 800943a:	e7fd      	b.n	8009438 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800943c:	697b      	ldr	r3, [r7, #20]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3718      	adds	r7, #24
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	20005648 	.word	0x20005648
 800944c:	080187e8 	.word	0x080187e8
 8009450:	08009591 	.word	0x08009591
 8009454:	2000564c 	.word	0x2000564c

08009458 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b08a      	sub	sp, #40	@ 0x28
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009466:	2300      	movs	r3, #0
 8009468:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10b      	bne.n	8009488 <xTimerGenericCommand+0x30>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	623b      	str	r3, [r7, #32]
}
 8009482:	bf00      	nop
 8009484:	bf00      	nop
 8009486:	e7fd      	b.n	8009484 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009488:	4b19      	ldr	r3, [pc, #100]	@ (80094f0 <xTimerGenericCommand+0x98>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d02a      	beq.n	80094e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2b05      	cmp	r3, #5
 80094a0:	dc18      	bgt.n	80094d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80094a2:	f7ff fead 	bl	8009200 <xTaskGetSchedulerState>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d109      	bne.n	80094c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80094ac:	4b10      	ldr	r3, [pc, #64]	@ (80094f0 <xTimerGenericCommand+0x98>)
 80094ae:	6818      	ldr	r0, [r3, #0]
 80094b0:	f107 0110 	add.w	r1, r7, #16
 80094b4:	2300      	movs	r3, #0
 80094b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094b8:	f7fe fbde 	bl	8007c78 <xQueueGenericSend>
 80094bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80094be:	e012      	b.n	80094e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80094c0:	4b0b      	ldr	r3, [pc, #44]	@ (80094f0 <xTimerGenericCommand+0x98>)
 80094c2:	6818      	ldr	r0, [r3, #0]
 80094c4:	f107 0110 	add.w	r1, r7, #16
 80094c8:	2300      	movs	r3, #0
 80094ca:	2200      	movs	r2, #0
 80094cc:	f7fe fbd4 	bl	8007c78 <xQueueGenericSend>
 80094d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80094d2:	e008      	b.n	80094e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80094d4:	4b06      	ldr	r3, [pc, #24]	@ (80094f0 <xTimerGenericCommand+0x98>)
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	f107 0110 	add.w	r1, r7, #16
 80094dc:	2300      	movs	r3, #0
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	f7fe fccc 	bl	8007e7c <xQueueGenericSendFromISR>
 80094e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80094e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3728      	adds	r7, #40	@ 0x28
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	20005648 	.word	0x20005648

080094f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b088      	sub	sp, #32
 80094f8:	af02      	add	r7, sp, #8
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094fe:	4b23      	ldr	r3, [pc, #140]	@ (800958c <prvProcessExpiredTimer+0x98>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	3304      	adds	r3, #4
 800950c:	4618      	mov	r0, r3
 800950e:	f7fe fa43 	bl	8007998 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009518:	f003 0304 	and.w	r3, r3, #4
 800951c:	2b00      	cmp	r3, #0
 800951e:	d023      	beq.n	8009568 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	699a      	ldr	r2, [r3, #24]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	18d1      	adds	r1, r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	6978      	ldr	r0, [r7, #20]
 800952e:	f000 f8d5 	bl	80096dc <prvInsertTimerInActiveList>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d020      	beq.n	800957a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009538:	2300      	movs	r3, #0
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	2300      	movs	r3, #0
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	2100      	movs	r1, #0
 8009542:	6978      	ldr	r0, [r7, #20]
 8009544:	f7ff ff88 	bl	8009458 <xTimerGenericCommand>
 8009548:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d114      	bne.n	800957a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	60fb      	str	r3, [r7, #12]
}
 8009562:	bf00      	nop
 8009564:	bf00      	nop
 8009566:	e7fd      	b.n	8009564 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800956e:	f023 0301 	bic.w	r3, r3, #1
 8009572:	b2da      	uxtb	r2, r3
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	6978      	ldr	r0, [r7, #20]
 8009580:	4798      	blx	r3
}
 8009582:	bf00      	nop
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20005640 	.word	0x20005640

08009590 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009598:	f107 0308 	add.w	r3, r7, #8
 800959c:	4618      	mov	r0, r3
 800959e:	f000 f859 	bl	8009654 <prvGetNextExpireTime>
 80095a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	4619      	mov	r1, r3
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 f805 	bl	80095b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80095ae:	f000 f8d7 	bl	8009760 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095b2:	bf00      	nop
 80095b4:	e7f0      	b.n	8009598 <prvTimerTask+0x8>
	...

080095b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80095c2:	f7ff fa0f 	bl	80089e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095c6:	f107 0308 	add.w	r3, r7, #8
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 f866 	bl	800969c <prvSampleTimeNow>
 80095d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d130      	bne.n	800963a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10a      	bne.n	80095f4 <prvProcessTimerOrBlockTask+0x3c>
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d806      	bhi.n	80095f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80095e6:	f7ff fa0b 	bl	8008a00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80095ea:	68f9      	ldr	r1, [r7, #12]
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff ff81 	bl	80094f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80095f2:	e024      	b.n	800963e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d008      	beq.n	800960c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80095fa:	4b13      	ldr	r3, [pc, #76]	@ (8009648 <prvProcessTimerOrBlockTask+0x90>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d101      	bne.n	8009608 <prvProcessTimerOrBlockTask+0x50>
 8009604:	2301      	movs	r3, #1
 8009606:	e000      	b.n	800960a <prvProcessTimerOrBlockTask+0x52>
 8009608:	2300      	movs	r3, #0
 800960a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800960c:	4b0f      	ldr	r3, [pc, #60]	@ (800964c <prvProcessTimerOrBlockTask+0x94>)
 800960e:	6818      	ldr	r0, [r3, #0]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	4619      	mov	r1, r3
 800961a:	f7fe ff6b 	bl	80084f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800961e:	f7ff f9ef 	bl	8008a00 <xTaskResumeAll>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10a      	bne.n	800963e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009628:	4b09      	ldr	r3, [pc, #36]	@ (8009650 <prvProcessTimerOrBlockTask+0x98>)
 800962a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	f3bf 8f6f 	isb	sy
}
 8009638:	e001      	b.n	800963e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800963a:	f7ff f9e1 	bl	8008a00 <xTaskResumeAll>
}
 800963e:	bf00      	nop
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	20005644 	.word	0x20005644
 800964c:	20005648 	.word	0x20005648
 8009650:	e000ed04 	.word	0xe000ed04

08009654 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800965c:	4b0e      	ldr	r3, [pc, #56]	@ (8009698 <prvGetNextExpireTime+0x44>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <prvGetNextExpireTime+0x16>
 8009666:	2201      	movs	r2, #1
 8009668:	e000      	b.n	800966c <prvGetNextExpireTime+0x18>
 800966a:	2200      	movs	r2, #0
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d105      	bne.n	8009684 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009678:	4b07      	ldr	r3, [pc, #28]	@ (8009698 <prvGetNextExpireTime+0x44>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	60fb      	str	r3, [r7, #12]
 8009682:	e001      	b.n	8009688 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009684:	2300      	movs	r3, #0
 8009686:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009688:	68fb      	ldr	r3, [r7, #12]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	20005640 	.word	0x20005640

0800969c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80096a4:	f7ff fa4a 	bl	8008b3c <xTaskGetTickCount>
 80096a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80096aa:	4b0b      	ldr	r3, [pc, #44]	@ (80096d8 <prvSampleTimeNow+0x3c>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d205      	bcs.n	80096c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80096b4:	f000 f93a 	bl	800992c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	e002      	b.n	80096c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80096c6:	4a04      	ldr	r2, [pc, #16]	@ (80096d8 <prvSampleTimeNow+0x3c>)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80096cc:	68fb      	ldr	r3, [r7, #12]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20005650 	.word	0x20005650

080096dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
 80096e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80096ea:	2300      	movs	r3, #0
 80096ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d812      	bhi.n	8009728 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	1ad2      	subs	r2, r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	429a      	cmp	r2, r3
 800970e:	d302      	bcc.n	8009716 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009710:	2301      	movs	r3, #1
 8009712:	617b      	str	r3, [r7, #20]
 8009714:	e01b      	b.n	800974e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009716:	4b10      	ldr	r3, [pc, #64]	@ (8009758 <prvInsertTimerInActiveList+0x7c>)
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3304      	adds	r3, #4
 800971e:	4619      	mov	r1, r3
 8009720:	4610      	mov	r0, r2
 8009722:	f7fe f900 	bl	8007926 <vListInsert>
 8009726:	e012      	b.n	800974e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	429a      	cmp	r2, r3
 800972e:	d206      	bcs.n	800973e <prvInsertTimerInActiveList+0x62>
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	429a      	cmp	r2, r3
 8009736:	d302      	bcc.n	800973e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009738:	2301      	movs	r3, #1
 800973a:	617b      	str	r3, [r7, #20]
 800973c:	e007      	b.n	800974e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800973e:	4b07      	ldr	r3, [pc, #28]	@ (800975c <prvInsertTimerInActiveList+0x80>)
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3304      	adds	r3, #4
 8009746:	4619      	mov	r1, r3
 8009748:	4610      	mov	r0, r2
 800974a:	f7fe f8ec 	bl	8007926 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800974e:	697b      	ldr	r3, [r7, #20]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	20005644 	.word	0x20005644
 800975c:	20005640 	.word	0x20005640

08009760 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b08e      	sub	sp, #56	@ 0x38
 8009764:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009766:	e0ce      	b.n	8009906 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	da19      	bge.n	80097a2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800976e:	1d3b      	adds	r3, r7, #4
 8009770:	3304      	adds	r3, #4
 8009772:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10b      	bne.n	8009792 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	61fb      	str	r3, [r7, #28]
}
 800978c:	bf00      	nop
 800978e:	bf00      	nop
 8009790:	e7fd      	b.n	800978e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009798:	6850      	ldr	r0, [r2, #4]
 800979a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800979c:	6892      	ldr	r2, [r2, #8]
 800979e:	4611      	mov	r1, r2
 80097a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f2c0 80ae 	blt.w	8009906 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80097ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d004      	beq.n	80097c0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b8:	3304      	adds	r3, #4
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fe f8ec 	bl	8007998 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097c0:	463b      	mov	r3, r7
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7ff ff6a 	bl	800969c <prvSampleTimeNow>
 80097c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b09      	cmp	r3, #9
 80097ce:	f200 8097 	bhi.w	8009900 <prvProcessReceivedCommands+0x1a0>
 80097d2:	a201      	add	r2, pc, #4	@ (adr r2, 80097d8 <prvProcessReceivedCommands+0x78>)
 80097d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d8:	08009801 	.word	0x08009801
 80097dc:	08009801 	.word	0x08009801
 80097e0:	08009801 	.word	0x08009801
 80097e4:	08009877 	.word	0x08009877
 80097e8:	0800988b 	.word	0x0800988b
 80097ec:	080098d7 	.word	0x080098d7
 80097f0:	08009801 	.word	0x08009801
 80097f4:	08009801 	.word	0x08009801
 80097f8:	08009877 	.word	0x08009877
 80097fc:	0800988b 	.word	0x0800988b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009802:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009806:	f043 0301 	orr.w	r3, r3, #1
 800980a:	b2da      	uxtb	r2, r3
 800980c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	18d1      	adds	r1, r2, r3
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800981e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009820:	f7ff ff5c 	bl	80096dc <prvInsertTimerInActiveList>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d06c      	beq.n	8009904 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800982a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009830:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009834:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009838:	f003 0304 	and.w	r3, r3, #4
 800983c:	2b00      	cmp	r3, #0
 800983e:	d061      	beq.n	8009904 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	441a      	add	r2, r3
 8009848:	2300      	movs	r3, #0
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	2300      	movs	r3, #0
 800984e:	2100      	movs	r1, #0
 8009850:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009852:	f7ff fe01 	bl	8009458 <xTimerGenericCommand>
 8009856:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d152      	bne.n	8009904 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	61bb      	str	r3, [r7, #24]
}
 8009870:	bf00      	nop
 8009872:	bf00      	nop
 8009874:	e7fd      	b.n	8009872 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009878:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800987c:	f023 0301 	bic.w	r3, r3, #1
 8009880:	b2da      	uxtb	r2, r3
 8009882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009884:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009888:	e03d      	b.n	8009906 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800988a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009890:	f043 0301 	orr.w	r3, r3, #1
 8009894:	b2da      	uxtb	r2, r3
 8009896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009898:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80098a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10b      	bne.n	80098c2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	617b      	str	r3, [r7, #20]
}
 80098bc:	bf00      	nop
 80098be:	bf00      	nop
 80098c0:	e7fd      	b.n	80098be <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80098c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c4:	699a      	ldr	r2, [r3, #24]
 80098c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c8:	18d1      	adds	r1, r2, r3
 80098ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098d0:	f7ff ff04 	bl	80096dc <prvInsertTimerInActiveList>
					break;
 80098d4:	e017      	b.n	8009906 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80098d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098dc:	f003 0302 	and.w	r3, r3, #2
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d103      	bne.n	80098ec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80098e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098e6:	f000 fbe7 	bl	800a0b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80098ea:	e00c      	b.n	8009906 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098f2:	f023 0301 	bic.w	r3, r3, #1
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80098fe:	e002      	b.n	8009906 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009900:	bf00      	nop
 8009902:	e000      	b.n	8009906 <prvProcessReceivedCommands+0x1a6>
					break;
 8009904:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009906:	4b08      	ldr	r3, [pc, #32]	@ (8009928 <prvProcessReceivedCommands+0x1c8>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	1d39      	adds	r1, r7, #4
 800990c:	2200      	movs	r2, #0
 800990e:	4618      	mov	r0, r3
 8009910:	f7fe fb52 	bl	8007fb8 <xQueueReceive>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	f47f af26 	bne.w	8009768 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	3730      	adds	r7, #48	@ 0x30
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20005648 	.word	0x20005648

0800992c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b088      	sub	sp, #32
 8009930:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009932:	e049      	b.n	80099c8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009934:	4b2e      	ldr	r3, [pc, #184]	@ (80099f0 <prvSwitchTimerLists+0xc4>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800993e:	4b2c      	ldr	r3, [pc, #176]	@ (80099f0 <prvSwitchTimerLists+0xc4>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	3304      	adds	r3, #4
 800994c:	4618      	mov	r0, r3
 800994e:	f7fe f823 	bl	8007998 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009960:	f003 0304 	and.w	r3, r3, #4
 8009964:	2b00      	cmp	r3, #0
 8009966:	d02f      	beq.n	80099c8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	4413      	add	r3, r2
 8009970:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	429a      	cmp	r2, r3
 8009978:	d90e      	bls.n	8009998 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009986:	4b1a      	ldr	r3, [pc, #104]	@ (80099f0 <prvSwitchTimerLists+0xc4>)
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3304      	adds	r3, #4
 800998e:	4619      	mov	r1, r3
 8009990:	4610      	mov	r0, r2
 8009992:	f7fd ffc8 	bl	8007926 <vListInsert>
 8009996:	e017      	b.n	80099c8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009998:	2300      	movs	r3, #0
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	2300      	movs	r3, #0
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	2100      	movs	r1, #0
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f7ff fd58 	bl	8009458 <xTimerGenericCommand>
 80099a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10b      	bne.n	80099c8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	603b      	str	r3, [r7, #0]
}
 80099c2:	bf00      	nop
 80099c4:	bf00      	nop
 80099c6:	e7fd      	b.n	80099c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099c8:	4b09      	ldr	r3, [pc, #36]	@ (80099f0 <prvSwitchTimerLists+0xc4>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1b0      	bne.n	8009934 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80099d2:	4b07      	ldr	r3, [pc, #28]	@ (80099f0 <prvSwitchTimerLists+0xc4>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80099d8:	4b06      	ldr	r3, [pc, #24]	@ (80099f4 <prvSwitchTimerLists+0xc8>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a04      	ldr	r2, [pc, #16]	@ (80099f0 <prvSwitchTimerLists+0xc4>)
 80099de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80099e0:	4a04      	ldr	r2, [pc, #16]	@ (80099f4 <prvSwitchTimerLists+0xc8>)
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	6013      	str	r3, [r2, #0]
}
 80099e6:	bf00      	nop
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20005640 	.word	0x20005640
 80099f4:	20005644 	.word	0x20005644

080099f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80099fe:	f000 f96b 	bl	8009cd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a02:	4b15      	ldr	r3, [pc, #84]	@ (8009a58 <prvCheckForValidListAndQueue+0x60>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d120      	bne.n	8009a4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a0a:	4814      	ldr	r0, [pc, #80]	@ (8009a5c <prvCheckForValidListAndQueue+0x64>)
 8009a0c:	f7fd ff3a 	bl	8007884 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a10:	4813      	ldr	r0, [pc, #76]	@ (8009a60 <prvCheckForValidListAndQueue+0x68>)
 8009a12:	f7fd ff37 	bl	8007884 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a16:	4b13      	ldr	r3, [pc, #76]	@ (8009a64 <prvCheckForValidListAndQueue+0x6c>)
 8009a18:	4a10      	ldr	r2, [pc, #64]	@ (8009a5c <prvCheckForValidListAndQueue+0x64>)
 8009a1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a1c:	4b12      	ldr	r3, [pc, #72]	@ (8009a68 <prvCheckForValidListAndQueue+0x70>)
 8009a1e:	4a10      	ldr	r2, [pc, #64]	@ (8009a60 <prvCheckForValidListAndQueue+0x68>)
 8009a20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a22:	2300      	movs	r3, #0
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	4b11      	ldr	r3, [pc, #68]	@ (8009a6c <prvCheckForValidListAndQueue+0x74>)
 8009a28:	4a11      	ldr	r2, [pc, #68]	@ (8009a70 <prvCheckForValidListAndQueue+0x78>)
 8009a2a:	2110      	movs	r1, #16
 8009a2c:	200a      	movs	r0, #10
 8009a2e:	f7fe f847 	bl	8007ac0 <xQueueGenericCreateStatic>
 8009a32:	4603      	mov	r3, r0
 8009a34:	4a08      	ldr	r2, [pc, #32]	@ (8009a58 <prvCheckForValidListAndQueue+0x60>)
 8009a36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a38:	4b07      	ldr	r3, [pc, #28]	@ (8009a58 <prvCheckForValidListAndQueue+0x60>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d005      	beq.n	8009a4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a40:	4b05      	ldr	r3, [pc, #20]	@ (8009a58 <prvCheckForValidListAndQueue+0x60>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	490b      	ldr	r1, [pc, #44]	@ (8009a74 <prvCheckForValidListAndQueue+0x7c>)
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fe fd2a 	bl	80084a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a4c:	f000 f976 	bl	8009d3c <vPortExitCritical>
}
 8009a50:	bf00      	nop
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	20005648 	.word	0x20005648
 8009a5c:	20005618 	.word	0x20005618
 8009a60:	2000562c 	.word	0x2000562c
 8009a64:	20005640 	.word	0x20005640
 8009a68:	20005644 	.word	0x20005644
 8009a6c:	200056f4 	.word	0x200056f4
 8009a70:	20005654 	.word	0x20005654
 8009a74:	080187f0 	.word	0x080187f0

08009a78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	3b04      	subs	r3, #4
 8009a88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3b04      	subs	r3, #4
 8009a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	f023 0201 	bic.w	r2, r3, #1
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	3b04      	subs	r3, #4
 8009aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8009adc <pxPortInitialiseStack+0x64>)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	3b14      	subs	r3, #20
 8009ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	3b04      	subs	r3, #4
 8009abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f06f 0202 	mvn.w	r2, #2
 8009ac6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	3b20      	subs	r3, #32
 8009acc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ace:	68fb      	ldr	r3, [r7, #12]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	08009ae1 	.word	0x08009ae1

08009ae0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009aea:	4b13      	ldr	r3, [pc, #76]	@ (8009b38 <prvTaskExitError+0x58>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009af2:	d00b      	beq.n	8009b0c <prvTaskExitError+0x2c>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	60fb      	str	r3, [r7, #12]
}
 8009b06:	bf00      	nop
 8009b08:	bf00      	nop
 8009b0a:	e7fd      	b.n	8009b08 <prvTaskExitError+0x28>
	__asm volatile
 8009b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	60bb      	str	r3, [r7, #8]
}
 8009b1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b20:	bf00      	nop
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d0fc      	beq.n	8009b22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b28:	bf00      	nop
 8009b2a:	bf00      	nop
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	20000010 	.word	0x20000010
 8009b3c:	00000000 	.word	0x00000000

08009b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b40:	4b07      	ldr	r3, [pc, #28]	@ (8009b60 <pxCurrentTCBConst2>)
 8009b42:	6819      	ldr	r1, [r3, #0]
 8009b44:	6808      	ldr	r0, [r1, #0]
 8009b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4a:	f380 8809 	msr	PSP, r0
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f04f 0000 	mov.w	r0, #0
 8009b56:	f380 8811 	msr	BASEPRI, r0
 8009b5a:	4770      	bx	lr
 8009b5c:	f3af 8000 	nop.w

08009b60 <pxCurrentTCBConst2>:
 8009b60:	20005118 	.word	0x20005118
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop

08009b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b68:	4808      	ldr	r0, [pc, #32]	@ (8009b8c <prvPortStartFirstTask+0x24>)
 8009b6a:	6800      	ldr	r0, [r0, #0]
 8009b6c:	6800      	ldr	r0, [r0, #0]
 8009b6e:	f380 8808 	msr	MSP, r0
 8009b72:	f04f 0000 	mov.w	r0, #0
 8009b76:	f380 8814 	msr	CONTROL, r0
 8009b7a:	b662      	cpsie	i
 8009b7c:	b661      	cpsie	f
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	df00      	svc	0
 8009b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b8a:	bf00      	nop
 8009b8c:	e000ed08 	.word	0xe000ed08

08009b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b96:	4b47      	ldr	r3, [pc, #284]	@ (8009cb4 <xPortStartScheduler+0x124>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a47      	ldr	r2, [pc, #284]	@ (8009cb8 <xPortStartScheduler+0x128>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d10b      	bne.n	8009bb8 <xPortStartScheduler+0x28>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	613b      	str	r3, [r7, #16]
}
 8009bb2:	bf00      	nop
 8009bb4:	bf00      	nop
 8009bb6:	e7fd      	b.n	8009bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8009cb4 <xPortStartScheduler+0x124>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a3f      	ldr	r2, [pc, #252]	@ (8009cbc <xPortStartScheduler+0x12c>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d10b      	bne.n	8009bda <xPortStartScheduler+0x4a>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	60fb      	str	r3, [r7, #12]
}
 8009bd4:	bf00      	nop
 8009bd6:	bf00      	nop
 8009bd8:	e7fd      	b.n	8009bd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009bda:	4b39      	ldr	r3, [pc, #228]	@ (8009cc0 <xPortStartScheduler+0x130>)
 8009bdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	22ff      	movs	r2, #255	@ 0xff
 8009bea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bf4:	78fb      	ldrb	r3, [r7, #3]
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009bfc:	b2da      	uxtb	r2, r3
 8009bfe:	4b31      	ldr	r3, [pc, #196]	@ (8009cc4 <xPortStartScheduler+0x134>)
 8009c00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c02:	4b31      	ldr	r3, [pc, #196]	@ (8009cc8 <xPortStartScheduler+0x138>)
 8009c04:	2207      	movs	r2, #7
 8009c06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c08:	e009      	b.n	8009c1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8009cc8 <xPortStartScheduler+0x138>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	4a2d      	ldr	r2, [pc, #180]	@ (8009cc8 <xPortStartScheduler+0x138>)
 8009c12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c14:	78fb      	ldrb	r3, [r7, #3]
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	005b      	lsls	r3, r3, #1
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c1e:	78fb      	ldrb	r3, [r7, #3]
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c26:	2b80      	cmp	r3, #128	@ 0x80
 8009c28:	d0ef      	beq.n	8009c0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c2a:	4b27      	ldr	r3, [pc, #156]	@ (8009cc8 <xPortStartScheduler+0x138>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f1c3 0307 	rsb	r3, r3, #7
 8009c32:	2b04      	cmp	r3, #4
 8009c34:	d00b      	beq.n	8009c4e <xPortStartScheduler+0xbe>
	__asm volatile
 8009c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	60bb      	str	r3, [r7, #8]
}
 8009c48:	bf00      	nop
 8009c4a:	bf00      	nop
 8009c4c:	e7fd      	b.n	8009c4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8009cc8 <xPortStartScheduler+0x138>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	021b      	lsls	r3, r3, #8
 8009c54:	4a1c      	ldr	r2, [pc, #112]	@ (8009cc8 <xPortStartScheduler+0x138>)
 8009c56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c58:	4b1b      	ldr	r3, [pc, #108]	@ (8009cc8 <xPortStartScheduler+0x138>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009c60:	4a19      	ldr	r2, [pc, #100]	@ (8009cc8 <xPortStartScheduler+0x138>)
 8009c62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c6c:	4b17      	ldr	r3, [pc, #92]	@ (8009ccc <xPortStartScheduler+0x13c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a16      	ldr	r2, [pc, #88]	@ (8009ccc <xPortStartScheduler+0x13c>)
 8009c72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009c76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c78:	4b14      	ldr	r3, [pc, #80]	@ (8009ccc <xPortStartScheduler+0x13c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a13      	ldr	r2, [pc, #76]	@ (8009ccc <xPortStartScheduler+0x13c>)
 8009c7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009c82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c84:	f000 f8da 	bl	8009e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c88:	4b11      	ldr	r3, [pc, #68]	@ (8009cd0 <xPortStartScheduler+0x140>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c8e:	f000 f8f9 	bl	8009e84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c92:	4b10      	ldr	r3, [pc, #64]	@ (8009cd4 <xPortStartScheduler+0x144>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a0f      	ldr	r2, [pc, #60]	@ (8009cd4 <xPortStartScheduler+0x144>)
 8009c98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009c9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c9e:	f7ff ff63 	bl	8009b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ca2:	f7ff f815 	bl	8008cd0 <vTaskSwitchContext>
	prvTaskExitError();
 8009ca6:	f7ff ff1b 	bl	8009ae0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3718      	adds	r7, #24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	e000ed00 	.word	0xe000ed00
 8009cb8:	410fc271 	.word	0x410fc271
 8009cbc:	410fc270 	.word	0x410fc270
 8009cc0:	e000e400 	.word	0xe000e400
 8009cc4:	20005744 	.word	0x20005744
 8009cc8:	20005748 	.word	0x20005748
 8009ccc:	e000ed20 	.word	0xe000ed20
 8009cd0:	20000010 	.word	0x20000010
 8009cd4:	e000ef34 	.word	0xe000ef34

08009cd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	607b      	str	r3, [r7, #4]
}
 8009cf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cf2:	4b10      	ldr	r3, [pc, #64]	@ (8009d34 <vPortEnterCritical+0x5c>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8009d34 <vPortEnterCritical+0x5c>)
 8009cfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8009d34 <vPortEnterCritical+0x5c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d110      	bne.n	8009d26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d04:	4b0c      	ldr	r3, [pc, #48]	@ (8009d38 <vPortEnterCritical+0x60>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00b      	beq.n	8009d26 <vPortEnterCritical+0x4e>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	603b      	str	r3, [r7, #0]
}
 8009d20:	bf00      	nop
 8009d22:	bf00      	nop
 8009d24:	e7fd      	b.n	8009d22 <vPortEnterCritical+0x4a>
	}
}
 8009d26:	bf00      	nop
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	20000010 	.word	0x20000010
 8009d38:	e000ed04 	.word	0xe000ed04

08009d3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d42:	4b12      	ldr	r3, [pc, #72]	@ (8009d8c <vPortExitCritical+0x50>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10b      	bne.n	8009d62 <vPortExitCritical+0x26>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4e:	f383 8811 	msr	BASEPRI, r3
 8009d52:	f3bf 8f6f 	isb	sy
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	607b      	str	r3, [r7, #4]
}
 8009d5c:	bf00      	nop
 8009d5e:	bf00      	nop
 8009d60:	e7fd      	b.n	8009d5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009d62:	4b0a      	ldr	r3, [pc, #40]	@ (8009d8c <vPortExitCritical+0x50>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	4a08      	ldr	r2, [pc, #32]	@ (8009d8c <vPortExitCritical+0x50>)
 8009d6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d6c:	4b07      	ldr	r3, [pc, #28]	@ (8009d8c <vPortExitCritical+0x50>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d105      	bne.n	8009d80 <vPortExitCritical+0x44>
 8009d74:	2300      	movs	r3, #0
 8009d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	f383 8811 	msr	BASEPRI, r3
}
 8009d7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	20000010 	.word	0x20000010

08009d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d90:	f3ef 8009 	mrs	r0, PSP
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	4b15      	ldr	r3, [pc, #84]	@ (8009df0 <pxCurrentTCBConst>)
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	f01e 0f10 	tst.w	lr, #16
 8009da0:	bf08      	it	eq
 8009da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009daa:	6010      	str	r0, [r2, #0]
 8009dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009db0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009db4:	f380 8811 	msr	BASEPRI, r0
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f7fe ff86 	bl	8008cd0 <vTaskSwitchContext>
 8009dc4:	f04f 0000 	mov.w	r0, #0
 8009dc8:	f380 8811 	msr	BASEPRI, r0
 8009dcc:	bc09      	pop	{r0, r3}
 8009dce:	6819      	ldr	r1, [r3, #0]
 8009dd0:	6808      	ldr	r0, [r1, #0]
 8009dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd6:	f01e 0f10 	tst.w	lr, #16
 8009dda:	bf08      	it	eq
 8009ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009de0:	f380 8809 	msr	PSP, r0
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	f3af 8000 	nop.w

08009df0 <pxCurrentTCBConst>:
 8009df0:	20005118 	.word	0x20005118
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009df4:	bf00      	nop
 8009df6:	bf00      	nop

08009df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	607b      	str	r3, [r7, #4]
}
 8009e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e12:	f7fe fea3 	bl	8008b5c <xTaskIncrementTick>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d003      	beq.n	8009e24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e1c:	4b06      	ldr	r3, [pc, #24]	@ (8009e38 <xPortSysTickHandler+0x40>)
 8009e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	2300      	movs	r3, #0
 8009e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	f383 8811 	msr	BASEPRI, r3
}
 8009e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e30:	bf00      	nop
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	e000ed04 	.word	0xe000ed04

08009e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e40:	4b0b      	ldr	r3, [pc, #44]	@ (8009e70 <vPortSetupTimerInterrupt+0x34>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e46:	4b0b      	ldr	r3, [pc, #44]	@ (8009e74 <vPortSetupTimerInterrupt+0x38>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e78 <vPortSetupTimerInterrupt+0x3c>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a0a      	ldr	r2, [pc, #40]	@ (8009e7c <vPortSetupTimerInterrupt+0x40>)
 8009e52:	fba2 2303 	umull	r2, r3, r2, r3
 8009e56:	099b      	lsrs	r3, r3, #6
 8009e58:	4a09      	ldr	r2, [pc, #36]	@ (8009e80 <vPortSetupTimerInterrupt+0x44>)
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e5e:	4b04      	ldr	r3, [pc, #16]	@ (8009e70 <vPortSetupTimerInterrupt+0x34>)
 8009e60:	2207      	movs	r2, #7
 8009e62:	601a      	str	r2, [r3, #0]
}
 8009e64:	bf00      	nop
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	e000e010 	.word	0xe000e010
 8009e74:	e000e018 	.word	0xe000e018
 8009e78:	20000004 	.word	0x20000004
 8009e7c:	10624dd3 	.word	0x10624dd3
 8009e80:	e000e014 	.word	0xe000e014

08009e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009e94 <vPortEnableVFP+0x10>
 8009e88:	6801      	ldr	r1, [r0, #0]
 8009e8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009e8e:	6001      	str	r1, [r0, #0]
 8009e90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e92:	bf00      	nop
 8009e94:	e000ed88 	.word	0xe000ed88

08009e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e9e:	f3ef 8305 	mrs	r3, IPSR
 8009ea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2b0f      	cmp	r3, #15
 8009ea8:	d915      	bls.n	8009ed6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009eaa:	4a18      	ldr	r2, [pc, #96]	@ (8009f0c <vPortValidateInterruptPriority+0x74>)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	4413      	add	r3, r2
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009eb4:	4b16      	ldr	r3, [pc, #88]	@ (8009f10 <vPortValidateInterruptPriority+0x78>)
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	7afa      	ldrb	r2, [r7, #11]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d20b      	bcs.n	8009ed6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	607b      	str	r3, [r7, #4]
}
 8009ed0:	bf00      	nop
 8009ed2:	bf00      	nop
 8009ed4:	e7fd      	b.n	8009ed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8009f14 <vPortValidateInterruptPriority+0x7c>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009ede:	4b0e      	ldr	r3, [pc, #56]	@ (8009f18 <vPortValidateInterruptPriority+0x80>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d90b      	bls.n	8009efe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	603b      	str	r3, [r7, #0]
}
 8009ef8:	bf00      	nop
 8009efa:	bf00      	nop
 8009efc:	e7fd      	b.n	8009efa <vPortValidateInterruptPriority+0x62>
	}
 8009efe:	bf00      	nop
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	e000e3f0 	.word	0xe000e3f0
 8009f10:	20005744 	.word	0x20005744
 8009f14:	e000ed0c 	.word	0xe000ed0c
 8009f18:	20005748 	.word	0x20005748

08009f1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08a      	sub	sp, #40	@ 0x28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f24:	2300      	movs	r3, #0
 8009f26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f28:	f7fe fd5c 	bl	80089e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f2c:	4b5c      	ldr	r3, [pc, #368]	@ (800a0a0 <pvPortMalloc+0x184>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d101      	bne.n	8009f38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f34:	f000 f924 	bl	800a180 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f38:	4b5a      	ldr	r3, [pc, #360]	@ (800a0a4 <pvPortMalloc+0x188>)
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4013      	ands	r3, r2
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f040 8095 	bne.w	800a070 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d01e      	beq.n	8009f8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009f4c:	2208      	movs	r2, #8
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4413      	add	r3, r2
 8009f52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f003 0307 	and.w	r3, r3, #7
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d015      	beq.n	8009f8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f023 0307 	bic.w	r3, r3, #7
 8009f64:	3308      	adds	r3, #8
 8009f66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f003 0307 	and.w	r3, r3, #7
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00b      	beq.n	8009f8a <pvPortMalloc+0x6e>
	__asm volatile
 8009f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	617b      	str	r3, [r7, #20]
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop
 8009f88:	e7fd      	b.n	8009f86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d06f      	beq.n	800a070 <pvPortMalloc+0x154>
 8009f90:	4b45      	ldr	r3, [pc, #276]	@ (800a0a8 <pvPortMalloc+0x18c>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d86a      	bhi.n	800a070 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f9a:	4b44      	ldr	r3, [pc, #272]	@ (800a0ac <pvPortMalloc+0x190>)
 8009f9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f9e:	4b43      	ldr	r3, [pc, #268]	@ (800a0ac <pvPortMalloc+0x190>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009fa4:	e004      	b.n	8009fb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d903      	bls.n	8009fc2 <pvPortMalloc+0xa6>
 8009fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1f1      	bne.n	8009fa6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009fc2:	4b37      	ldr	r3, [pc, #220]	@ (800a0a0 <pvPortMalloc+0x184>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d051      	beq.n	800a070 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2208      	movs	r2, #8
 8009fd2:	4413      	add	r3, r2
 8009fd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	1ad2      	subs	r2, r2, r3
 8009fe6:	2308      	movs	r3, #8
 8009fe8:	005b      	lsls	r3, r3, #1
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d920      	bls.n	800a030 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	f003 0307 	and.w	r3, r3, #7
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00b      	beq.n	800a018 <pvPortMalloc+0xfc>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	613b      	str	r3, [r7, #16]
}
 800a012:	bf00      	nop
 800a014:	bf00      	nop
 800a016:	e7fd      	b.n	800a014 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	1ad2      	subs	r2, r2, r3
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a02a:	69b8      	ldr	r0, [r7, #24]
 800a02c:	f000 f90a 	bl	800a244 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a030:	4b1d      	ldr	r3, [pc, #116]	@ (800a0a8 <pvPortMalloc+0x18c>)
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	4a1b      	ldr	r2, [pc, #108]	@ (800a0a8 <pvPortMalloc+0x18c>)
 800a03c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a03e:	4b1a      	ldr	r3, [pc, #104]	@ (800a0a8 <pvPortMalloc+0x18c>)
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	4b1b      	ldr	r3, [pc, #108]	@ (800a0b0 <pvPortMalloc+0x194>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	429a      	cmp	r2, r3
 800a048:	d203      	bcs.n	800a052 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a04a:	4b17      	ldr	r3, [pc, #92]	@ (800a0a8 <pvPortMalloc+0x18c>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a18      	ldr	r2, [pc, #96]	@ (800a0b0 <pvPortMalloc+0x194>)
 800a050:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a054:	685a      	ldr	r2, [r3, #4]
 800a056:	4b13      	ldr	r3, [pc, #76]	@ (800a0a4 <pvPortMalloc+0x188>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	431a      	orrs	r2, r3
 800a05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a066:	4b13      	ldr	r3, [pc, #76]	@ (800a0b4 <pvPortMalloc+0x198>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3301      	adds	r3, #1
 800a06c:	4a11      	ldr	r2, [pc, #68]	@ (800a0b4 <pvPortMalloc+0x198>)
 800a06e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a070:	f7fe fcc6 	bl	8008a00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	f003 0307 	and.w	r3, r3, #7
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00b      	beq.n	800a096 <pvPortMalloc+0x17a>
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	60fb      	str	r3, [r7, #12]
}
 800a090:	bf00      	nop
 800a092:	bf00      	nop
 800a094:	e7fd      	b.n	800a092 <pvPortMalloc+0x176>
	return pvReturn;
 800a096:	69fb      	ldr	r3, [r7, #28]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3728      	adds	r7, #40	@ 0x28
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	20009354 	.word	0x20009354
 800a0a4:	20009368 	.word	0x20009368
 800a0a8:	20009358 	.word	0x20009358
 800a0ac:	2000934c 	.word	0x2000934c
 800a0b0:	2000935c 	.word	0x2000935c
 800a0b4:	20009360 	.word	0x20009360

0800a0b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d04f      	beq.n	800a16a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a0ca:	2308      	movs	r3, #8
 800a0cc:	425b      	negs	r3, r3
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	685a      	ldr	r2, [r3, #4]
 800a0dc:	4b25      	ldr	r3, [pc, #148]	@ (800a174 <vPortFree+0xbc>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10b      	bne.n	800a0fe <vPortFree+0x46>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	60fb      	str	r3, [r7, #12]
}
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	e7fd      	b.n	800a0fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00b      	beq.n	800a11e <vPortFree+0x66>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	60bb      	str	r3, [r7, #8]
}
 800a118:	bf00      	nop
 800a11a:	bf00      	nop
 800a11c:	e7fd      	b.n	800a11a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	4b14      	ldr	r3, [pc, #80]	@ (800a174 <vPortFree+0xbc>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4013      	ands	r3, r2
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d01e      	beq.n	800a16a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d11a      	bne.n	800a16a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	685a      	ldr	r2, [r3, #4]
 800a138:	4b0e      	ldr	r3, [pc, #56]	@ (800a174 <vPortFree+0xbc>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	43db      	mvns	r3, r3
 800a13e:	401a      	ands	r2, r3
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a144:	f7fe fc4e 	bl	80089e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	4b0a      	ldr	r3, [pc, #40]	@ (800a178 <vPortFree+0xc0>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4413      	add	r3, r2
 800a152:	4a09      	ldr	r2, [pc, #36]	@ (800a178 <vPortFree+0xc0>)
 800a154:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a156:	6938      	ldr	r0, [r7, #16]
 800a158:	f000 f874 	bl	800a244 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a15c:	4b07      	ldr	r3, [pc, #28]	@ (800a17c <vPortFree+0xc4>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	3301      	adds	r3, #1
 800a162:	4a06      	ldr	r2, [pc, #24]	@ (800a17c <vPortFree+0xc4>)
 800a164:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a166:	f7fe fc4b 	bl	8008a00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a16a:	bf00      	nop
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20009368 	.word	0x20009368
 800a178:	20009358 	.word	0x20009358
 800a17c:	20009364 	.word	0x20009364

0800a180 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a186:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a18a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a18c:	4b27      	ldr	r3, [pc, #156]	@ (800a22c <prvHeapInit+0xac>)
 800a18e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f003 0307 	and.w	r3, r3, #7
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00c      	beq.n	800a1b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3307      	adds	r3, #7
 800a19e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f023 0307 	bic.w	r3, r3, #7
 800a1a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	1ad3      	subs	r3, r2, r3
 800a1ae:	4a1f      	ldr	r2, [pc, #124]	@ (800a22c <prvHeapInit+0xac>)
 800a1b0:	4413      	add	r3, r2
 800a1b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a1b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a230 <prvHeapInit+0xb0>)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a1be:	4b1c      	ldr	r3, [pc, #112]	@ (800a230 <prvHeapInit+0xb0>)
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a1cc:	2208      	movs	r2, #8
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	1a9b      	subs	r3, r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f023 0307 	bic.w	r3, r3, #7
 800a1da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	4a15      	ldr	r2, [pc, #84]	@ (800a234 <prvHeapInit+0xb4>)
 800a1e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a1e2:	4b14      	ldr	r3, [pc, #80]	@ (800a234 <prvHeapInit+0xb4>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a1ea:	4b12      	ldr	r3, [pc, #72]	@ (800a234 <prvHeapInit+0xb4>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	1ad2      	subs	r2, r2, r3
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a200:	4b0c      	ldr	r3, [pc, #48]	@ (800a234 <prvHeapInit+0xb4>)
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	4a0a      	ldr	r2, [pc, #40]	@ (800a238 <prvHeapInit+0xb8>)
 800a20e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	4a09      	ldr	r2, [pc, #36]	@ (800a23c <prvHeapInit+0xbc>)
 800a216:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a218:	4b09      	ldr	r3, [pc, #36]	@ (800a240 <prvHeapInit+0xc0>)
 800a21a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a21e:	601a      	str	r2, [r3, #0]
}
 800a220:	bf00      	nop
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	2000574c 	.word	0x2000574c
 800a230:	2000934c 	.word	0x2000934c
 800a234:	20009354 	.word	0x20009354
 800a238:	2000935c 	.word	0x2000935c
 800a23c:	20009358 	.word	0x20009358
 800a240:	20009368 	.word	0x20009368

0800a244 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a24c:	4b28      	ldr	r3, [pc, #160]	@ (800a2f0 <prvInsertBlockIntoFreeList+0xac>)
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	e002      	b.n	800a258 <prvInsertBlockIntoFreeList+0x14>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	60fb      	str	r3, [r7, #12]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d8f7      	bhi.n	800a252 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	4413      	add	r3, r2
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	429a      	cmp	r2, r3
 800a272:	d108      	bne.n	800a286 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	685a      	ldr	r2, [r3, #4]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	441a      	add	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	441a      	add	r2, r3
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	429a      	cmp	r2, r3
 800a298:	d118      	bne.n	800a2cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	4b15      	ldr	r3, [pc, #84]	@ (800a2f4 <prvInsertBlockIntoFreeList+0xb0>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d00d      	beq.n	800a2c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685a      	ldr	r2, [r3, #4]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	441a      	add	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	601a      	str	r2, [r3, #0]
 800a2c0:	e008      	b.n	800a2d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a2c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f4 <prvInsertBlockIntoFreeList+0xb0>)
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	601a      	str	r2, [r3, #0]
 800a2ca:	e003      	b.n	800a2d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d002      	beq.n	800a2e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2e2:	bf00      	nop
 800a2e4:	3714      	adds	r7, #20
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	2000934c 	.word	0x2000934c
 800a2f4:	20009354 	.word	0x20009354

0800a2f8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a2f8:	4b04      	ldr	r3, [pc, #16]	@ (800a30c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	b10a      	cbz	r2, 800a302 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800a2fe:	4803      	ldr	r0, [pc, #12]	@ (800a30c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a300:	4770      	bx	lr
 800a302:	4a03      	ldr	r2, [pc, #12]	@ (800a310 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800a304:	4801      	ldr	r0, [pc, #4]	@ (800a30c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a306:	6812      	ldr	r2, [r2, #0]
 800a308:	601a      	str	r2, [r3, #0]
 800a30a:	4770      	bx	lr
 800a30c:	2000001c 	.word	0x2000001c
 800a310:	200001d0 	.word	0x200001d0

0800a314 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a314:	4a02      	ldr	r2, [pc, #8]	@ (800a320 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800a316:	4b03      	ldr	r3, [pc, #12]	@ (800a324 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800a318:	6812      	ldr	r2, [r2, #0]
 800a31a:	601a      	str	r2, [r3, #0]
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	200001d0 	.word	0x200001d0
 800a324:	2000001c 	.word	0x2000001c

0800a328 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800a328:	f003 b9a4 	b.w	800d674 <geometry_msgs__msg__Twist__init>

0800a32c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800a32c:	f003 b9c6 	b.w	800d6bc <geometry_msgs__msg__Twist__fini>

0800a330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a330:	b510      	push	{r4, lr}
 800a332:	f000 f819 	bl	800a368 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a336:	4c07      	ldr	r4, [pc, #28]	@ (800a354 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800a338:	60e0      	str	r0, [r4, #12]
 800a33a:	f000 f815 	bl	800a368 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a33e:	4b06      	ldr	r3, [pc, #24]	@ (800a358 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a340:	64a0      	str	r0, [r4, #72]	@ 0x48
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	b10a      	cbz	r2, 800a34a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800a346:	4804      	ldr	r0, [pc, #16]	@ (800a358 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a348:	bd10      	pop	{r4, pc}
 800a34a:	4a04      	ldr	r2, [pc, #16]	@ (800a35c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800a34c:	4802      	ldr	r0, [pc, #8]	@ (800a358 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a34e:	6812      	ldr	r2, [r2, #0]
 800a350:	601a      	str	r2, [r3, #0]
 800a352:	bd10      	pop	{r4, pc}
 800a354:	20000028 	.word	0x20000028
 800a358:	200000a0 	.word	0x200000a0
 800a35c:	200001d4 	.word	0x200001d4

0800a360 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800a360:	f003 b9b8 	b.w	800d6d4 <geometry_msgs__msg__Vector3__init>

0800a364 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800a364:	f003 b9ba 	b.w	800d6dc <geometry_msgs__msg__Vector3__fini>

0800a368 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a368:	4b04      	ldr	r3, [pc, #16]	@ (800a37c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	b10a      	cbz	r2, 800a372 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800a36e:	4803      	ldr	r0, [pc, #12]	@ (800a37c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a370:	4770      	bx	lr
 800a372:	4a03      	ldr	r2, [pc, #12]	@ (800a380 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800a374:	4801      	ldr	r0, [pc, #4]	@ (800a37c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a376:	6812      	ldr	r2, [r2, #0]
 800a378:	601a      	str	r2, [r3, #0]
 800a37a:	4770      	bx	lr
 800a37c:	20000160 	.word	0x20000160
 800a380:	200001d4 	.word	0x200001d4

0800a384 <get_serialized_size_geometry_msgs__msg__Twist>:
 800a384:	b570      	push	{r4, r5, r6, lr}
 800a386:	4604      	mov	r4, r0
 800a388:	b148      	cbz	r0, 800a39e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800a38a:	460d      	mov	r5, r1
 800a38c:	f000 f860 	bl	800a450 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a390:	4606      	mov	r6, r0
 800a392:	1829      	adds	r1, r5, r0
 800a394:	f104 0018 	add.w	r0, r4, #24
 800a398:	f000 f85a 	bl	800a450 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a39c:	4430      	add	r0, r6
 800a39e:	bd70      	pop	{r4, r5, r6, pc}

0800a3a0 <_Twist__cdr_deserialize>:
 800a3a0:	b570      	push	{r4, r5, r6, lr}
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	b189      	cbz	r1, 800a3ca <_Twist__cdr_deserialize+0x2a>
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	f000 f8de 	bl	800a568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a3ac:	6843      	ldr	r3, [r0, #4]
 800a3ae:	4621      	mov	r1, r4
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	4798      	blx	r3
 800a3b6:	f000 f8d7 	bl	800a568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a3ba:	6843      	ldr	r3, [r0, #4]
 800a3bc:	f104 0118 	add.w	r1, r4, #24
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3c8:	4718      	bx	r3
 800a3ca:	4608      	mov	r0, r1
 800a3cc:	bd70      	pop	{r4, r5, r6, pc}
 800a3ce:	bf00      	nop

0800a3d0 <_Twist__cdr_serialize>:
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	9101      	str	r1, [sp, #4]
 800a3d6:	b190      	cbz	r0, 800a3fe <_Twist__cdr_serialize+0x2e>
 800a3d8:	4604      	mov	r4, r0
 800a3da:	f000 f8c5 	bl	800a568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a3de:	6843      	ldr	r3, [r0, #4]
 800a3e0:	9901      	ldr	r1, [sp, #4]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4798      	blx	r3
 800a3e8:	f000 f8be 	bl	800a568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a3ec:	6843      	ldr	r3, [r0, #4]
 800a3ee:	9901      	ldr	r1, [sp, #4]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f104 0018 	add.w	r0, r4, #24
 800a3f6:	b002      	add	sp, #8
 800a3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3fc:	4718      	bx	r3
 800a3fe:	b002      	add	sp, #8
 800a400:	bd10      	pop	{r4, pc}
 800a402:	bf00      	nop

0800a404 <_Twist__get_serialized_size>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4604      	mov	r4, r0
 800a408:	b148      	cbz	r0, 800a41e <_Twist__get_serialized_size+0x1a>
 800a40a:	2100      	movs	r1, #0
 800a40c:	f000 f820 	bl	800a450 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a410:	4605      	mov	r5, r0
 800a412:	4601      	mov	r1, r0
 800a414:	f104 0018 	add.w	r0, r4, #24
 800a418:	f000 f81a 	bl	800a450 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a41c:	4428      	add	r0, r5
 800a41e:	bd38      	pop	{r3, r4, r5, pc}

0800a420 <_Twist__max_serialized_size>:
 800a420:	b510      	push	{r4, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	2301      	movs	r3, #1
 800a426:	2100      	movs	r1, #0
 800a428:	f10d 0007 	add.w	r0, sp, #7
 800a42c:	f88d 3007 	strb.w	r3, [sp, #7]
 800a430:	f000 f87e 	bl	800a530 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a434:	4604      	mov	r4, r0
 800a436:	4601      	mov	r1, r0
 800a438:	f10d 0007 	add.w	r0, sp, #7
 800a43c:	f000 f878 	bl	800a530 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a440:	4420      	add	r0, r4
 800a442:	b002      	add	sp, #8
 800a444:	bd10      	pop	{r4, pc}
 800a446:	bf00      	nop

0800a448 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a448:	4800      	ldr	r0, [pc, #0]	@ (800a44c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800a44a:	4770      	bx	lr
 800a44c:	2000016c 	.word	0x2000016c

0800a450 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800a450:	b1b8      	cbz	r0, 800a482 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800a452:	b538      	push	{r3, r4, r5, lr}
 800a454:	460d      	mov	r5, r1
 800a456:	4628      	mov	r0, r5
 800a458:	2108      	movs	r1, #8
 800a45a:	f001 f9fd 	bl	800b858 <ucdr_alignment>
 800a45e:	f105 0308 	add.w	r3, r5, #8
 800a462:	181c      	adds	r4, r3, r0
 800a464:	2108      	movs	r1, #8
 800a466:	4620      	mov	r0, r4
 800a468:	f001 f9f6 	bl	800b858 <ucdr_alignment>
 800a46c:	3008      	adds	r0, #8
 800a46e:	4404      	add	r4, r0
 800a470:	2108      	movs	r1, #8
 800a472:	4620      	mov	r0, r4
 800a474:	f001 f9f0 	bl	800b858 <ucdr_alignment>
 800a478:	f1c5 0508 	rsb	r5, r5, #8
 800a47c:	4428      	add	r0, r5
 800a47e:	4420      	add	r0, r4
 800a480:	bd38      	pop	{r3, r4, r5, pc}
 800a482:	4770      	bx	lr

0800a484 <_Vector3__cdr_deserialize>:
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	460c      	mov	r4, r1
 800a488:	b171      	cbz	r1, 800a4a8 <_Vector3__cdr_deserialize+0x24>
 800a48a:	4605      	mov	r5, r0
 800a48c:	f001 f8c6 	bl	800b61c <ucdr_deserialize_double>
 800a490:	f104 0108 	add.w	r1, r4, #8
 800a494:	4628      	mov	r0, r5
 800a496:	f001 f8c1 	bl	800b61c <ucdr_deserialize_double>
 800a49a:	f104 0110 	add.w	r1, r4, #16
 800a49e:	4628      	mov	r0, r5
 800a4a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4a4:	f001 b8ba 	b.w	800b61c <ucdr_deserialize_double>
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	bd38      	pop	{r3, r4, r5, pc}

0800a4ac <_Vector3__cdr_serialize>:
 800a4ac:	b198      	cbz	r0, 800a4d6 <_Vector3__cdr_serialize+0x2a>
 800a4ae:	b538      	push	{r3, r4, r5, lr}
 800a4b0:	ed90 0b00 	vldr	d0, [r0]
 800a4b4:	460d      	mov	r5, r1
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	4608      	mov	r0, r1
 800a4ba:	f000 ffdf 	bl	800b47c <ucdr_serialize_double>
 800a4be:	ed94 0b02 	vldr	d0, [r4, #8]
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	f000 ffda 	bl	800b47c <ucdr_serialize_double>
 800a4c8:	ed94 0b04 	vldr	d0, [r4, #16]
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4d2:	f000 bfd3 	b.w	800b47c <ucdr_serialize_double>
 800a4d6:	4770      	bx	lr

0800a4d8 <_Vector3__get_serialized_size>:
 800a4d8:	b198      	cbz	r0, 800a502 <_Vector3__get_serialized_size+0x2a>
 800a4da:	b510      	push	{r4, lr}
 800a4dc:	2108      	movs	r1, #8
 800a4de:	2000      	movs	r0, #0
 800a4e0:	f001 f9ba 	bl	800b858 <ucdr_alignment>
 800a4e4:	f100 0408 	add.w	r4, r0, #8
 800a4e8:	2108      	movs	r1, #8
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f001 f9b4 	bl	800b858 <ucdr_alignment>
 800a4f0:	3008      	adds	r0, #8
 800a4f2:	4404      	add	r4, r0
 800a4f4:	2108      	movs	r1, #8
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f001 f9ae 	bl	800b858 <ucdr_alignment>
 800a4fc:	3008      	adds	r0, #8
 800a4fe:	4420      	add	r0, r4
 800a500:	bd10      	pop	{r4, pc}
 800a502:	4770      	bx	lr

0800a504 <_Vector3__max_serialized_size>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	2108      	movs	r1, #8
 800a508:	2000      	movs	r0, #0
 800a50a:	f001 f9a5 	bl	800b858 <ucdr_alignment>
 800a50e:	f100 0508 	add.w	r5, r0, #8
 800a512:	2108      	movs	r1, #8
 800a514:	4628      	mov	r0, r5
 800a516:	f001 f99f 	bl	800b858 <ucdr_alignment>
 800a51a:	f100 0408 	add.w	r4, r0, #8
 800a51e:	442c      	add	r4, r5
 800a520:	2108      	movs	r1, #8
 800a522:	4620      	mov	r0, r4
 800a524:	f001 f998 	bl	800b858 <ucdr_alignment>
 800a528:	3008      	adds	r0, #8
 800a52a:	4420      	add	r0, r4
 800a52c:	bd38      	pop	{r3, r4, r5, pc}
 800a52e:	bf00      	nop

0800a530 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	2301      	movs	r3, #1
 800a534:	460c      	mov	r4, r1
 800a536:	7003      	strb	r3, [r0, #0]
 800a538:	2108      	movs	r1, #8
 800a53a:	4620      	mov	r0, r4
 800a53c:	f001 f98c 	bl	800b858 <ucdr_alignment>
 800a540:	f104 0508 	add.w	r5, r4, #8
 800a544:	1946      	adds	r6, r0, r5
 800a546:	2108      	movs	r1, #8
 800a548:	4630      	mov	r0, r6
 800a54a:	f001 f985 	bl	800b858 <ucdr_alignment>
 800a54e:	f100 0508 	add.w	r5, r0, #8
 800a552:	4435      	add	r5, r6
 800a554:	2108      	movs	r1, #8
 800a556:	4628      	mov	r0, r5
 800a558:	f001 f97e 	bl	800b858 <ucdr_alignment>
 800a55c:	f1c4 0408 	rsb	r4, r4, #8
 800a560:	4420      	add	r0, r4
 800a562:	4428      	add	r0, r5
 800a564:	bd70      	pop	{r4, r5, r6, pc}
 800a566:	bf00      	nop

0800a568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a568:	4800      	ldr	r0, [pc, #0]	@ (800a56c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800a56a:	4770      	bx	lr
 800a56c:	20000194 	.word	0x20000194

0800a570 <ucdr_serialize_bool>:
 800a570:	b538      	push	{r3, r4, r5, lr}
 800a572:	460d      	mov	r5, r1
 800a574:	2101      	movs	r1, #1
 800a576:	4604      	mov	r4, r0
 800a578:	f001 f922 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800a57c:	b148      	cbz	r0, 800a592 <ucdr_serialize_bool+0x22>
 800a57e:	68a3      	ldr	r3, [r4, #8]
 800a580:	701d      	strb	r5, [r3, #0]
 800a582:	68a2      	ldr	r2, [r4, #8]
 800a584:	6923      	ldr	r3, [r4, #16]
 800a586:	2101      	movs	r1, #1
 800a588:	440a      	add	r2, r1
 800a58a:	440b      	add	r3, r1
 800a58c:	60a2      	str	r2, [r4, #8]
 800a58e:	6123      	str	r3, [r4, #16]
 800a590:	7561      	strb	r1, [r4, #21]
 800a592:	7da0      	ldrb	r0, [r4, #22]
 800a594:	f080 0001 	eor.w	r0, r0, #1
 800a598:	bd38      	pop	{r3, r4, r5, pc}
 800a59a:	bf00      	nop

0800a59c <ucdr_deserialize_bool>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	460d      	mov	r5, r1
 800a5a0:	2101      	movs	r1, #1
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	f001 f90c 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800a5a8:	b160      	cbz	r0, 800a5c4 <ucdr_deserialize_bool+0x28>
 800a5aa:	68a2      	ldr	r2, [r4, #8]
 800a5ac:	6923      	ldr	r3, [r4, #16]
 800a5ae:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a5b2:	3900      	subs	r1, #0
 800a5b4:	bf18      	it	ne
 800a5b6:	2101      	movne	r1, #1
 800a5b8:	7029      	strb	r1, [r5, #0]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	2101      	movs	r1, #1
 800a5be:	60a2      	str	r2, [r4, #8]
 800a5c0:	6123      	str	r3, [r4, #16]
 800a5c2:	7561      	strb	r1, [r4, #21]
 800a5c4:	7da0      	ldrb	r0, [r4, #22]
 800a5c6:	f080 0001 	eor.w	r0, r0, #1
 800a5ca:	bd38      	pop	{r3, r4, r5, pc}

0800a5cc <ucdr_serialize_uint8_t>:
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	2101      	movs	r1, #1
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	f001 f8f4 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800a5d8:	b148      	cbz	r0, 800a5ee <ucdr_serialize_uint8_t+0x22>
 800a5da:	68a3      	ldr	r3, [r4, #8]
 800a5dc:	701d      	strb	r5, [r3, #0]
 800a5de:	68a2      	ldr	r2, [r4, #8]
 800a5e0:	6923      	ldr	r3, [r4, #16]
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	440a      	add	r2, r1
 800a5e6:	440b      	add	r3, r1
 800a5e8:	60a2      	str	r2, [r4, #8]
 800a5ea:	6123      	str	r3, [r4, #16]
 800a5ec:	7561      	strb	r1, [r4, #21]
 800a5ee:	7da0      	ldrb	r0, [r4, #22]
 800a5f0:	f080 0001 	eor.w	r0, r0, #1
 800a5f4:	bd38      	pop	{r3, r4, r5, pc}
 800a5f6:	bf00      	nop

0800a5f8 <ucdr_deserialize_uint8_t>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	460d      	mov	r5, r1
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	4604      	mov	r4, r0
 800a600:	f001 f8de 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800a604:	b150      	cbz	r0, 800a61c <ucdr_deserialize_uint8_t+0x24>
 800a606:	68a3      	ldr	r3, [r4, #8]
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	702b      	strb	r3, [r5, #0]
 800a60c:	68a2      	ldr	r2, [r4, #8]
 800a60e:	6923      	ldr	r3, [r4, #16]
 800a610:	2101      	movs	r1, #1
 800a612:	440a      	add	r2, r1
 800a614:	440b      	add	r3, r1
 800a616:	60a2      	str	r2, [r4, #8]
 800a618:	6123      	str	r3, [r4, #16]
 800a61a:	7561      	strb	r1, [r4, #21]
 800a61c:	7da0      	ldrb	r0, [r4, #22]
 800a61e:	f080 0001 	eor.w	r0, r0, #1
 800a622:	bd38      	pop	{r3, r4, r5, pc}

0800a624 <ucdr_serialize_uint16_t>:
 800a624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a628:	b082      	sub	sp, #8
 800a62a:	460b      	mov	r3, r1
 800a62c:	2102      	movs	r1, #2
 800a62e:	4604      	mov	r4, r0
 800a630:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a634:	f001 f918 	bl	800b868 <ucdr_buffer_alignment>
 800a638:	4601      	mov	r1, r0
 800a63a:	4620      	mov	r0, r4
 800a63c:	7d67      	ldrb	r7, [r4, #21]
 800a63e:	f001 f957 	bl	800b8f0 <ucdr_advance_buffer>
 800a642:	2102      	movs	r1, #2
 800a644:	4620      	mov	r0, r4
 800a646:	f001 f8af 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800a64a:	bb78      	cbnz	r0, 800a6ac <ucdr_serialize_uint16_t+0x88>
 800a64c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a650:	42ab      	cmp	r3, r5
 800a652:	d926      	bls.n	800a6a2 <ucdr_serialize_uint16_t+0x7e>
 800a654:	1b5e      	subs	r6, r3, r5
 800a656:	60a3      	str	r3, [r4, #8]
 800a658:	6923      	ldr	r3, [r4, #16]
 800a65a:	f1c6 0802 	rsb	r8, r6, #2
 800a65e:	4433      	add	r3, r6
 800a660:	6123      	str	r3, [r4, #16]
 800a662:	4641      	mov	r1, r8
 800a664:	4620      	mov	r0, r4
 800a666:	f001 f8ab 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d03b      	beq.n	800a6e6 <ucdr_serialize_uint16_t+0xc2>
 800a66e:	7d23      	ldrb	r3, [r4, #20]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d04a      	beq.n	800a70a <ucdr_serialize_uint16_t+0xe6>
 800a674:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a678:	702b      	strb	r3, [r5, #0]
 800a67a:	2e00      	cmp	r6, #0
 800a67c:	d040      	beq.n	800a700 <ucdr_serialize_uint16_t+0xdc>
 800a67e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a682:	706b      	strb	r3, [r5, #1]
 800a684:	6923      	ldr	r3, [r4, #16]
 800a686:	68a2      	ldr	r2, [r4, #8]
 800a688:	7da0      	ldrb	r0, [r4, #22]
 800a68a:	3302      	adds	r3, #2
 800a68c:	1b9e      	subs	r6, r3, r6
 800a68e:	4442      	add	r2, r8
 800a690:	2302      	movs	r3, #2
 800a692:	f080 0001 	eor.w	r0, r0, #1
 800a696:	60a2      	str	r2, [r4, #8]
 800a698:	6126      	str	r6, [r4, #16]
 800a69a:	7563      	strb	r3, [r4, #21]
 800a69c:	b002      	add	sp, #8
 800a69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a2:	2102      	movs	r1, #2
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f001 f88b 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800a6aa:	b190      	cbz	r0, 800a6d2 <ucdr_serialize_uint16_t+0xae>
 800a6ac:	7d23      	ldrb	r3, [r4, #20]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	68a3      	ldr	r3, [r4, #8]
 800a6b2:	d014      	beq.n	800a6de <ucdr_serialize_uint16_t+0xba>
 800a6b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a6b8:	701a      	strb	r2, [r3, #0]
 800a6ba:	68a3      	ldr	r3, [r4, #8]
 800a6bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a6c0:	705a      	strb	r2, [r3, #1]
 800a6c2:	68a2      	ldr	r2, [r4, #8]
 800a6c4:	6923      	ldr	r3, [r4, #16]
 800a6c6:	3202      	adds	r2, #2
 800a6c8:	3302      	adds	r3, #2
 800a6ca:	2102      	movs	r1, #2
 800a6cc:	60a2      	str	r2, [r4, #8]
 800a6ce:	6123      	str	r3, [r4, #16]
 800a6d0:	7561      	strb	r1, [r4, #21]
 800a6d2:	7da0      	ldrb	r0, [r4, #22]
 800a6d4:	f080 0001 	eor.w	r0, r0, #1
 800a6d8:	b002      	add	sp, #8
 800a6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a6e2:	801a      	strh	r2, [r3, #0]
 800a6e4:	e7ed      	b.n	800a6c2 <ucdr_serialize_uint16_t+0x9e>
 800a6e6:	68a2      	ldr	r2, [r4, #8]
 800a6e8:	6923      	ldr	r3, [r4, #16]
 800a6ea:	7da0      	ldrb	r0, [r4, #22]
 800a6ec:	7567      	strb	r7, [r4, #21]
 800a6ee:	1b92      	subs	r2, r2, r6
 800a6f0:	1b9b      	subs	r3, r3, r6
 800a6f2:	f080 0001 	eor.w	r0, r0, #1
 800a6f6:	60a2      	str	r2, [r4, #8]
 800a6f8:	6123      	str	r3, [r4, #16]
 800a6fa:	b002      	add	sp, #8
 800a6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a700:	68a3      	ldr	r3, [r4, #8]
 800a702:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a706:	701a      	strb	r2, [r3, #0]
 800a708:	e7bc      	b.n	800a684 <ucdr_serialize_uint16_t+0x60>
 800a70a:	4628      	mov	r0, r5
 800a70c:	f10d 0506 	add.w	r5, sp, #6
 800a710:	4629      	mov	r1, r5
 800a712:	4632      	mov	r2, r6
 800a714:	f00d f935 	bl	8017982 <memcpy>
 800a718:	68a0      	ldr	r0, [r4, #8]
 800a71a:	4642      	mov	r2, r8
 800a71c:	19a9      	adds	r1, r5, r6
 800a71e:	f00d f930 	bl	8017982 <memcpy>
 800a722:	e7af      	b.n	800a684 <ucdr_serialize_uint16_t+0x60>

0800a724 <ucdr_serialize_endian_uint16_t>:
 800a724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a728:	b083      	sub	sp, #12
 800a72a:	460d      	mov	r5, r1
 800a72c:	2102      	movs	r1, #2
 800a72e:	4604      	mov	r4, r0
 800a730:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a734:	f001 f898 	bl	800b868 <ucdr_buffer_alignment>
 800a738:	4601      	mov	r1, r0
 800a73a:	4620      	mov	r0, r4
 800a73c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a740:	f001 f8d6 	bl	800b8f0 <ucdr_advance_buffer>
 800a744:	2102      	movs	r1, #2
 800a746:	4620      	mov	r0, r4
 800a748:	f001 f82e 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800a74c:	bb70      	cbnz	r0, 800a7ac <ucdr_serialize_endian_uint16_t+0x88>
 800a74e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a752:	42be      	cmp	r6, r7
 800a754:	d925      	bls.n	800a7a2 <ucdr_serialize_endian_uint16_t+0x7e>
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	60a6      	str	r6, [r4, #8]
 800a75a:	1bf6      	subs	r6, r6, r7
 800a75c:	4433      	add	r3, r6
 800a75e:	f1c6 0902 	rsb	r9, r6, #2
 800a762:	6123      	str	r3, [r4, #16]
 800a764:	4649      	mov	r1, r9
 800a766:	4620      	mov	r0, r4
 800a768:	f001 f82a 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d039      	beq.n	800a7e4 <ucdr_serialize_endian_uint16_t+0xc0>
 800a770:	2d01      	cmp	r5, #1
 800a772:	d04a      	beq.n	800a80a <ucdr_serialize_endian_uint16_t+0xe6>
 800a774:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a778:	703b      	strb	r3, [r7, #0]
 800a77a:	2e00      	cmp	r6, #0
 800a77c:	d040      	beq.n	800a800 <ucdr_serialize_endian_uint16_t+0xdc>
 800a77e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a782:	707b      	strb	r3, [r7, #1]
 800a784:	6923      	ldr	r3, [r4, #16]
 800a786:	68a2      	ldr	r2, [r4, #8]
 800a788:	7da0      	ldrb	r0, [r4, #22]
 800a78a:	3302      	adds	r3, #2
 800a78c:	444a      	add	r2, r9
 800a78e:	1b9b      	subs	r3, r3, r6
 800a790:	2102      	movs	r1, #2
 800a792:	f080 0001 	eor.w	r0, r0, #1
 800a796:	60a2      	str	r2, [r4, #8]
 800a798:	6123      	str	r3, [r4, #16]
 800a79a:	7561      	strb	r1, [r4, #21]
 800a79c:	b003      	add	sp, #12
 800a79e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7a2:	2102      	movs	r1, #2
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f001 f80b 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800a7aa:	b188      	cbz	r0, 800a7d0 <ucdr_serialize_endian_uint16_t+0xac>
 800a7ac:	2d01      	cmp	r5, #1
 800a7ae:	68a3      	ldr	r3, [r4, #8]
 800a7b0:	d014      	beq.n	800a7dc <ucdr_serialize_endian_uint16_t+0xb8>
 800a7b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a7b6:	701a      	strb	r2, [r3, #0]
 800a7b8:	68a3      	ldr	r3, [r4, #8]
 800a7ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a7be:	705a      	strb	r2, [r3, #1]
 800a7c0:	68a2      	ldr	r2, [r4, #8]
 800a7c2:	6923      	ldr	r3, [r4, #16]
 800a7c4:	3202      	adds	r2, #2
 800a7c6:	3302      	adds	r3, #2
 800a7c8:	2102      	movs	r1, #2
 800a7ca:	60a2      	str	r2, [r4, #8]
 800a7cc:	6123      	str	r3, [r4, #16]
 800a7ce:	7561      	strb	r1, [r4, #21]
 800a7d0:	7da0      	ldrb	r0, [r4, #22]
 800a7d2:	f080 0001 	eor.w	r0, r0, #1
 800a7d6:	b003      	add	sp, #12
 800a7d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a7e0:	801a      	strh	r2, [r3, #0]
 800a7e2:	e7ed      	b.n	800a7c0 <ucdr_serialize_endian_uint16_t+0x9c>
 800a7e4:	68a2      	ldr	r2, [r4, #8]
 800a7e6:	6923      	ldr	r3, [r4, #16]
 800a7e8:	7da0      	ldrb	r0, [r4, #22]
 800a7ea:	f884 8015 	strb.w	r8, [r4, #21]
 800a7ee:	1b92      	subs	r2, r2, r6
 800a7f0:	1b9b      	subs	r3, r3, r6
 800a7f2:	f080 0001 	eor.w	r0, r0, #1
 800a7f6:	60a2      	str	r2, [r4, #8]
 800a7f8:	6123      	str	r3, [r4, #16]
 800a7fa:	b003      	add	sp, #12
 800a7fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a800:	68a3      	ldr	r3, [r4, #8]
 800a802:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a806:	701a      	strb	r2, [r3, #0]
 800a808:	e7bc      	b.n	800a784 <ucdr_serialize_endian_uint16_t+0x60>
 800a80a:	f10d 0506 	add.w	r5, sp, #6
 800a80e:	4629      	mov	r1, r5
 800a810:	4632      	mov	r2, r6
 800a812:	4638      	mov	r0, r7
 800a814:	f00d f8b5 	bl	8017982 <memcpy>
 800a818:	68a0      	ldr	r0, [r4, #8]
 800a81a:	464a      	mov	r2, r9
 800a81c:	19a9      	adds	r1, r5, r6
 800a81e:	f00d f8b0 	bl	8017982 <memcpy>
 800a822:	e7af      	b.n	800a784 <ucdr_serialize_endian_uint16_t+0x60>

0800a824 <ucdr_deserialize_uint16_t>:
 800a824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a828:	460d      	mov	r5, r1
 800a82a:	2102      	movs	r1, #2
 800a82c:	4604      	mov	r4, r0
 800a82e:	f001 f81b 	bl	800b868 <ucdr_buffer_alignment>
 800a832:	4601      	mov	r1, r0
 800a834:	4620      	mov	r0, r4
 800a836:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a83a:	f001 f859 	bl	800b8f0 <ucdr_advance_buffer>
 800a83e:	2102      	movs	r1, #2
 800a840:	4620      	mov	r0, r4
 800a842:	f000 ffb1 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800a846:	bb60      	cbnz	r0, 800a8a2 <ucdr_deserialize_uint16_t+0x7e>
 800a848:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a84c:	42be      	cmp	r6, r7
 800a84e:	d923      	bls.n	800a898 <ucdr_deserialize_uint16_t+0x74>
 800a850:	6923      	ldr	r3, [r4, #16]
 800a852:	60a6      	str	r6, [r4, #8]
 800a854:	1bf6      	subs	r6, r6, r7
 800a856:	4433      	add	r3, r6
 800a858:	f1c6 0902 	rsb	r9, r6, #2
 800a85c:	6123      	str	r3, [r4, #16]
 800a85e:	4649      	mov	r1, r9
 800a860:	4620      	mov	r0, r4
 800a862:	f000 ffad 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800a866:	2800      	cmp	r0, #0
 800a868:	d034      	beq.n	800a8d4 <ucdr_deserialize_uint16_t+0xb0>
 800a86a:	7d23      	ldrb	r3, [r4, #20]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d042      	beq.n	800a8f6 <ucdr_deserialize_uint16_t+0xd2>
 800a870:	787b      	ldrb	r3, [r7, #1]
 800a872:	702b      	strb	r3, [r5, #0]
 800a874:	2e00      	cmp	r6, #0
 800a876:	d03a      	beq.n	800a8ee <ucdr_deserialize_uint16_t+0xca>
 800a878:	783b      	ldrb	r3, [r7, #0]
 800a87a:	706b      	strb	r3, [r5, #1]
 800a87c:	6923      	ldr	r3, [r4, #16]
 800a87e:	68a2      	ldr	r2, [r4, #8]
 800a880:	7da0      	ldrb	r0, [r4, #22]
 800a882:	2102      	movs	r1, #2
 800a884:	3302      	adds	r3, #2
 800a886:	444a      	add	r2, r9
 800a888:	1b9b      	subs	r3, r3, r6
 800a88a:	7561      	strb	r1, [r4, #21]
 800a88c:	60a2      	str	r2, [r4, #8]
 800a88e:	6123      	str	r3, [r4, #16]
 800a890:	f080 0001 	eor.w	r0, r0, #1
 800a894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a898:	2102      	movs	r1, #2
 800a89a:	4620      	mov	r0, r4
 800a89c:	f000 ff90 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800a8a0:	b180      	cbz	r0, 800a8c4 <ucdr_deserialize_uint16_t+0xa0>
 800a8a2:	7d23      	ldrb	r3, [r4, #20]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	68a3      	ldr	r3, [r4, #8]
 800a8a8:	d011      	beq.n	800a8ce <ucdr_deserialize_uint16_t+0xaa>
 800a8aa:	785b      	ldrb	r3, [r3, #1]
 800a8ac:	702b      	strb	r3, [r5, #0]
 800a8ae:	68a3      	ldr	r3, [r4, #8]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	706b      	strb	r3, [r5, #1]
 800a8b4:	68a2      	ldr	r2, [r4, #8]
 800a8b6:	6923      	ldr	r3, [r4, #16]
 800a8b8:	3202      	adds	r2, #2
 800a8ba:	3302      	adds	r3, #2
 800a8bc:	2102      	movs	r1, #2
 800a8be:	60a2      	str	r2, [r4, #8]
 800a8c0:	6123      	str	r3, [r4, #16]
 800a8c2:	7561      	strb	r1, [r4, #21]
 800a8c4:	7da0      	ldrb	r0, [r4, #22]
 800a8c6:	f080 0001 	eor.w	r0, r0, #1
 800a8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8ce:	881b      	ldrh	r3, [r3, #0]
 800a8d0:	802b      	strh	r3, [r5, #0]
 800a8d2:	e7ef      	b.n	800a8b4 <ucdr_deserialize_uint16_t+0x90>
 800a8d4:	68a2      	ldr	r2, [r4, #8]
 800a8d6:	6923      	ldr	r3, [r4, #16]
 800a8d8:	7da0      	ldrb	r0, [r4, #22]
 800a8da:	f884 8015 	strb.w	r8, [r4, #21]
 800a8de:	1b92      	subs	r2, r2, r6
 800a8e0:	1b9b      	subs	r3, r3, r6
 800a8e2:	60a2      	str	r2, [r4, #8]
 800a8e4:	6123      	str	r3, [r4, #16]
 800a8e6:	f080 0001 	eor.w	r0, r0, #1
 800a8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8ee:	68a3      	ldr	r3, [r4, #8]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	706b      	strb	r3, [r5, #1]
 800a8f4:	e7c2      	b.n	800a87c <ucdr_deserialize_uint16_t+0x58>
 800a8f6:	4639      	mov	r1, r7
 800a8f8:	4632      	mov	r2, r6
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f00d f841 	bl	8017982 <memcpy>
 800a900:	68a1      	ldr	r1, [r4, #8]
 800a902:	464a      	mov	r2, r9
 800a904:	19a8      	adds	r0, r5, r6
 800a906:	f00d f83c 	bl	8017982 <memcpy>
 800a90a:	e7b7      	b.n	800a87c <ucdr_deserialize_uint16_t+0x58>

0800a90c <ucdr_deserialize_endian_uint16_t>:
 800a90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a910:	460e      	mov	r6, r1
 800a912:	2102      	movs	r1, #2
 800a914:	4604      	mov	r4, r0
 800a916:	4615      	mov	r5, r2
 800a918:	f000 ffa6 	bl	800b868 <ucdr_buffer_alignment>
 800a91c:	4601      	mov	r1, r0
 800a91e:	4620      	mov	r0, r4
 800a920:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a924:	f000 ffe4 	bl	800b8f0 <ucdr_advance_buffer>
 800a928:	2102      	movs	r1, #2
 800a92a:	4620      	mov	r0, r4
 800a92c:	f000 ff3c 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800a930:	bb70      	cbnz	r0, 800a990 <ucdr_deserialize_endian_uint16_t+0x84>
 800a932:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800a936:	4547      	cmp	r7, r8
 800a938:	d925      	bls.n	800a986 <ucdr_deserialize_endian_uint16_t+0x7a>
 800a93a:	6923      	ldr	r3, [r4, #16]
 800a93c:	60a7      	str	r7, [r4, #8]
 800a93e:	eba7 0708 	sub.w	r7, r7, r8
 800a942:	443b      	add	r3, r7
 800a944:	f1c7 0a02 	rsb	sl, r7, #2
 800a948:	6123      	str	r3, [r4, #16]
 800a94a:	4651      	mov	r1, sl
 800a94c:	4620      	mov	r0, r4
 800a94e:	f000 ff37 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800a952:	2800      	cmp	r0, #0
 800a954:	d034      	beq.n	800a9c0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800a956:	2e01      	cmp	r6, #1
 800a958:	d043      	beq.n	800a9e2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800a95a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a95e:	702b      	strb	r3, [r5, #0]
 800a960:	2f00      	cmp	r7, #0
 800a962:	d03a      	beq.n	800a9da <ucdr_deserialize_endian_uint16_t+0xce>
 800a964:	f898 3000 	ldrb.w	r3, [r8]
 800a968:	706b      	strb	r3, [r5, #1]
 800a96a:	6923      	ldr	r3, [r4, #16]
 800a96c:	68a2      	ldr	r2, [r4, #8]
 800a96e:	7da0      	ldrb	r0, [r4, #22]
 800a970:	2102      	movs	r1, #2
 800a972:	3302      	adds	r3, #2
 800a974:	4452      	add	r2, sl
 800a976:	1bdb      	subs	r3, r3, r7
 800a978:	7561      	strb	r1, [r4, #21]
 800a97a:	60a2      	str	r2, [r4, #8]
 800a97c:	6123      	str	r3, [r4, #16]
 800a97e:	f080 0001 	eor.w	r0, r0, #1
 800a982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a986:	2102      	movs	r1, #2
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 ff19 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800a98e:	b178      	cbz	r0, 800a9b0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800a990:	2e01      	cmp	r6, #1
 800a992:	68a3      	ldr	r3, [r4, #8]
 800a994:	d011      	beq.n	800a9ba <ucdr_deserialize_endian_uint16_t+0xae>
 800a996:	785b      	ldrb	r3, [r3, #1]
 800a998:	702b      	strb	r3, [r5, #0]
 800a99a:	68a3      	ldr	r3, [r4, #8]
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	706b      	strb	r3, [r5, #1]
 800a9a0:	68a2      	ldr	r2, [r4, #8]
 800a9a2:	6923      	ldr	r3, [r4, #16]
 800a9a4:	3202      	adds	r2, #2
 800a9a6:	3302      	adds	r3, #2
 800a9a8:	2102      	movs	r1, #2
 800a9aa:	60a2      	str	r2, [r4, #8]
 800a9ac:	6123      	str	r3, [r4, #16]
 800a9ae:	7561      	strb	r1, [r4, #21]
 800a9b0:	7da0      	ldrb	r0, [r4, #22]
 800a9b2:	f080 0001 	eor.w	r0, r0, #1
 800a9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ba:	881b      	ldrh	r3, [r3, #0]
 800a9bc:	802b      	strh	r3, [r5, #0]
 800a9be:	e7ef      	b.n	800a9a0 <ucdr_deserialize_endian_uint16_t+0x94>
 800a9c0:	68a2      	ldr	r2, [r4, #8]
 800a9c2:	6923      	ldr	r3, [r4, #16]
 800a9c4:	7da0      	ldrb	r0, [r4, #22]
 800a9c6:	f884 9015 	strb.w	r9, [r4, #21]
 800a9ca:	1bd2      	subs	r2, r2, r7
 800a9cc:	1bdb      	subs	r3, r3, r7
 800a9ce:	60a2      	str	r2, [r4, #8]
 800a9d0:	6123      	str	r3, [r4, #16]
 800a9d2:	f080 0001 	eor.w	r0, r0, #1
 800a9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9da:	68a3      	ldr	r3, [r4, #8]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	706b      	strb	r3, [r5, #1]
 800a9e0:	e7c3      	b.n	800a96a <ucdr_deserialize_endian_uint16_t+0x5e>
 800a9e2:	4641      	mov	r1, r8
 800a9e4:	463a      	mov	r2, r7
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	f00c ffcb 	bl	8017982 <memcpy>
 800a9ec:	68a1      	ldr	r1, [r4, #8]
 800a9ee:	4652      	mov	r2, sl
 800a9f0:	19e8      	adds	r0, r5, r7
 800a9f2:	f00c ffc6 	bl	8017982 <memcpy>
 800a9f6:	e7b8      	b.n	800a96a <ucdr_deserialize_endian_uint16_t+0x5e>

0800a9f8 <ucdr_serialize_uint32_t>:
 800a9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fc:	b082      	sub	sp, #8
 800a9fe:	4604      	mov	r4, r0
 800aa00:	9101      	str	r1, [sp, #4]
 800aa02:	2104      	movs	r1, #4
 800aa04:	f000 ff30 	bl	800b868 <ucdr_buffer_alignment>
 800aa08:	4601      	mov	r1, r0
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	7d67      	ldrb	r7, [r4, #21]
 800aa0e:	f000 ff6f 	bl	800b8f0 <ucdr_advance_buffer>
 800aa12:	2104      	movs	r1, #4
 800aa14:	4620      	mov	r0, r4
 800aa16:	f000 fec7 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	d139      	bne.n	800aa92 <ucdr_serialize_uint32_t+0x9a>
 800aa1e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800aa22:	42ab      	cmp	r3, r5
 800aa24:	d930      	bls.n	800aa88 <ucdr_serialize_uint32_t+0x90>
 800aa26:	1b5e      	subs	r6, r3, r5
 800aa28:	60a3      	str	r3, [r4, #8]
 800aa2a:	6923      	ldr	r3, [r4, #16]
 800aa2c:	f1c6 0804 	rsb	r8, r6, #4
 800aa30:	4433      	add	r3, r6
 800aa32:	6123      	str	r3, [r4, #16]
 800aa34:	4641      	mov	r1, r8
 800aa36:	4620      	mov	r0, r4
 800aa38:	f000 fec2 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d04c      	beq.n	800aada <ucdr_serialize_uint32_t+0xe2>
 800aa40:	7d23      	ldrb	r3, [r4, #20]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d063      	beq.n	800ab0e <ucdr_serialize_uint32_t+0x116>
 800aa46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aa4a:	702b      	strb	r3, [r5, #0]
 800aa4c:	2e00      	cmp	r6, #0
 800aa4e:	d051      	beq.n	800aaf4 <ucdr_serialize_uint32_t+0xfc>
 800aa50:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aa54:	706b      	strb	r3, [r5, #1]
 800aa56:	2e01      	cmp	r6, #1
 800aa58:	d050      	beq.n	800aafc <ucdr_serialize_uint32_t+0x104>
 800aa5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800aa5e:	70ab      	strb	r3, [r5, #2]
 800aa60:	2e02      	cmp	r6, #2
 800aa62:	d04f      	beq.n	800ab04 <ucdr_serialize_uint32_t+0x10c>
 800aa64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aa68:	70eb      	strb	r3, [r5, #3]
 800aa6a:	6923      	ldr	r3, [r4, #16]
 800aa6c:	68a2      	ldr	r2, [r4, #8]
 800aa6e:	7da0      	ldrb	r0, [r4, #22]
 800aa70:	3304      	adds	r3, #4
 800aa72:	1b9e      	subs	r6, r3, r6
 800aa74:	4442      	add	r2, r8
 800aa76:	2304      	movs	r3, #4
 800aa78:	f080 0001 	eor.w	r0, r0, #1
 800aa7c:	60a2      	str	r2, [r4, #8]
 800aa7e:	6126      	str	r6, [r4, #16]
 800aa80:	7563      	strb	r3, [r4, #21]
 800aa82:	b002      	add	sp, #8
 800aa84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa88:	2104      	movs	r1, #4
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f000 fe98 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800aa90:	b1d0      	cbz	r0, 800aac8 <ucdr_serialize_uint32_t+0xd0>
 800aa92:	7d23      	ldrb	r3, [r4, #20]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	68a3      	ldr	r3, [r4, #8]
 800aa98:	d01c      	beq.n	800aad4 <ucdr_serialize_uint32_t+0xdc>
 800aa9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aa9e:	701a      	strb	r2, [r3, #0]
 800aaa0:	68a3      	ldr	r3, [r4, #8]
 800aaa2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aaa6:	705a      	strb	r2, [r3, #1]
 800aaa8:	68a3      	ldr	r3, [r4, #8]
 800aaaa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aaae:	709a      	strb	r2, [r3, #2]
 800aab0:	68a3      	ldr	r3, [r4, #8]
 800aab2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aab6:	70da      	strb	r2, [r3, #3]
 800aab8:	68a2      	ldr	r2, [r4, #8]
 800aaba:	6923      	ldr	r3, [r4, #16]
 800aabc:	3204      	adds	r2, #4
 800aabe:	3304      	adds	r3, #4
 800aac0:	2104      	movs	r1, #4
 800aac2:	60a2      	str	r2, [r4, #8]
 800aac4:	6123      	str	r3, [r4, #16]
 800aac6:	7561      	strb	r1, [r4, #21]
 800aac8:	7da0      	ldrb	r0, [r4, #22]
 800aaca:	f080 0001 	eor.w	r0, r0, #1
 800aace:	b002      	add	sp, #8
 800aad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad4:	9a01      	ldr	r2, [sp, #4]
 800aad6:	601a      	str	r2, [r3, #0]
 800aad8:	e7ee      	b.n	800aab8 <ucdr_serialize_uint32_t+0xc0>
 800aada:	68a2      	ldr	r2, [r4, #8]
 800aadc:	6923      	ldr	r3, [r4, #16]
 800aade:	7da0      	ldrb	r0, [r4, #22]
 800aae0:	7567      	strb	r7, [r4, #21]
 800aae2:	1b92      	subs	r2, r2, r6
 800aae4:	1b9b      	subs	r3, r3, r6
 800aae6:	f080 0001 	eor.w	r0, r0, #1
 800aaea:	60a2      	str	r2, [r4, #8]
 800aaec:	6123      	str	r3, [r4, #16]
 800aaee:	b002      	add	sp, #8
 800aaf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf4:	68a3      	ldr	r3, [r4, #8]
 800aaf6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aafa:	701a      	strb	r2, [r3, #0]
 800aafc:	68a3      	ldr	r3, [r4, #8]
 800aafe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ab02:	701a      	strb	r2, [r3, #0]
 800ab04:	68a3      	ldr	r3, [r4, #8]
 800ab06:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ab0a:	701a      	strb	r2, [r3, #0]
 800ab0c:	e7ad      	b.n	800aa6a <ucdr_serialize_uint32_t+0x72>
 800ab0e:	4628      	mov	r0, r5
 800ab10:	ad01      	add	r5, sp, #4
 800ab12:	4629      	mov	r1, r5
 800ab14:	4632      	mov	r2, r6
 800ab16:	f00c ff34 	bl	8017982 <memcpy>
 800ab1a:	68a0      	ldr	r0, [r4, #8]
 800ab1c:	4642      	mov	r2, r8
 800ab1e:	19a9      	adds	r1, r5, r6
 800ab20:	f00c ff2f 	bl	8017982 <memcpy>
 800ab24:	e7a1      	b.n	800aa6a <ucdr_serialize_uint32_t+0x72>
 800ab26:	bf00      	nop

0800ab28 <ucdr_serialize_endian_uint32_t>:
 800ab28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab2c:	b083      	sub	sp, #12
 800ab2e:	460d      	mov	r5, r1
 800ab30:	2104      	movs	r1, #4
 800ab32:	4604      	mov	r4, r0
 800ab34:	9201      	str	r2, [sp, #4]
 800ab36:	f000 fe97 	bl	800b868 <ucdr_buffer_alignment>
 800ab3a:	4601      	mov	r1, r0
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ab42:	f000 fed5 	bl	800b8f0 <ucdr_advance_buffer>
 800ab46:	2104      	movs	r1, #4
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f000 fe2d 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	d138      	bne.n	800abc4 <ucdr_serialize_endian_uint32_t+0x9c>
 800ab52:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ab56:	42b7      	cmp	r7, r6
 800ab58:	d92f      	bls.n	800abba <ucdr_serialize_endian_uint32_t+0x92>
 800ab5a:	6923      	ldr	r3, [r4, #16]
 800ab5c:	60a7      	str	r7, [r4, #8]
 800ab5e:	1bbf      	subs	r7, r7, r6
 800ab60:	443b      	add	r3, r7
 800ab62:	f1c7 0904 	rsb	r9, r7, #4
 800ab66:	6123      	str	r3, [r4, #16]
 800ab68:	4649      	mov	r1, r9
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f000 fe28 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d04a      	beq.n	800ac0a <ucdr_serialize_endian_uint32_t+0xe2>
 800ab74:	2d01      	cmp	r5, #1
 800ab76:	d063      	beq.n	800ac40 <ucdr_serialize_endian_uint32_t+0x118>
 800ab78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ab7c:	7033      	strb	r3, [r6, #0]
 800ab7e:	2f00      	cmp	r7, #0
 800ab80:	d051      	beq.n	800ac26 <ucdr_serialize_endian_uint32_t+0xfe>
 800ab82:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ab86:	7073      	strb	r3, [r6, #1]
 800ab88:	2f01      	cmp	r7, #1
 800ab8a:	d050      	beq.n	800ac2e <ucdr_serialize_endian_uint32_t+0x106>
 800ab8c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ab90:	70b3      	strb	r3, [r6, #2]
 800ab92:	2f02      	cmp	r7, #2
 800ab94:	d04f      	beq.n	800ac36 <ucdr_serialize_endian_uint32_t+0x10e>
 800ab96:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ab9a:	70f3      	strb	r3, [r6, #3]
 800ab9c:	6923      	ldr	r3, [r4, #16]
 800ab9e:	68a2      	ldr	r2, [r4, #8]
 800aba0:	7da0      	ldrb	r0, [r4, #22]
 800aba2:	3304      	adds	r3, #4
 800aba4:	444a      	add	r2, r9
 800aba6:	1bdb      	subs	r3, r3, r7
 800aba8:	2104      	movs	r1, #4
 800abaa:	f080 0001 	eor.w	r0, r0, #1
 800abae:	60a2      	str	r2, [r4, #8]
 800abb0:	6123      	str	r3, [r4, #16]
 800abb2:	7561      	strb	r1, [r4, #21]
 800abb4:	b003      	add	sp, #12
 800abb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abba:	2104      	movs	r1, #4
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 fdff 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800abc2:	b1c8      	cbz	r0, 800abf8 <ucdr_serialize_endian_uint32_t+0xd0>
 800abc4:	2d01      	cmp	r5, #1
 800abc6:	68a3      	ldr	r3, [r4, #8]
 800abc8:	d01c      	beq.n	800ac04 <ucdr_serialize_endian_uint32_t+0xdc>
 800abca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800abce:	701a      	strb	r2, [r3, #0]
 800abd0:	68a3      	ldr	r3, [r4, #8]
 800abd2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800abd6:	705a      	strb	r2, [r3, #1]
 800abd8:	68a3      	ldr	r3, [r4, #8]
 800abda:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800abde:	709a      	strb	r2, [r3, #2]
 800abe0:	68a3      	ldr	r3, [r4, #8]
 800abe2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800abe6:	70da      	strb	r2, [r3, #3]
 800abe8:	68a2      	ldr	r2, [r4, #8]
 800abea:	6923      	ldr	r3, [r4, #16]
 800abec:	3204      	adds	r2, #4
 800abee:	3304      	adds	r3, #4
 800abf0:	2104      	movs	r1, #4
 800abf2:	60a2      	str	r2, [r4, #8]
 800abf4:	6123      	str	r3, [r4, #16]
 800abf6:	7561      	strb	r1, [r4, #21]
 800abf8:	7da0      	ldrb	r0, [r4, #22]
 800abfa:	f080 0001 	eor.w	r0, r0, #1
 800abfe:	b003      	add	sp, #12
 800ac00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac04:	9a01      	ldr	r2, [sp, #4]
 800ac06:	601a      	str	r2, [r3, #0]
 800ac08:	e7ee      	b.n	800abe8 <ucdr_serialize_endian_uint32_t+0xc0>
 800ac0a:	68a2      	ldr	r2, [r4, #8]
 800ac0c:	6923      	ldr	r3, [r4, #16]
 800ac0e:	7da0      	ldrb	r0, [r4, #22]
 800ac10:	f884 8015 	strb.w	r8, [r4, #21]
 800ac14:	1bd2      	subs	r2, r2, r7
 800ac16:	1bdb      	subs	r3, r3, r7
 800ac18:	f080 0001 	eor.w	r0, r0, #1
 800ac1c:	60a2      	str	r2, [r4, #8]
 800ac1e:	6123      	str	r3, [r4, #16]
 800ac20:	b003      	add	sp, #12
 800ac22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac26:	68a3      	ldr	r3, [r4, #8]
 800ac28:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ac2c:	701a      	strb	r2, [r3, #0]
 800ac2e:	68a3      	ldr	r3, [r4, #8]
 800ac30:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ac34:	701a      	strb	r2, [r3, #0]
 800ac36:	68a3      	ldr	r3, [r4, #8]
 800ac38:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ac3c:	701a      	strb	r2, [r3, #0]
 800ac3e:	e7ad      	b.n	800ab9c <ucdr_serialize_endian_uint32_t+0x74>
 800ac40:	ad01      	add	r5, sp, #4
 800ac42:	4629      	mov	r1, r5
 800ac44:	463a      	mov	r2, r7
 800ac46:	4630      	mov	r0, r6
 800ac48:	f00c fe9b 	bl	8017982 <memcpy>
 800ac4c:	68a0      	ldr	r0, [r4, #8]
 800ac4e:	464a      	mov	r2, r9
 800ac50:	19e9      	adds	r1, r5, r7
 800ac52:	f00c fe96 	bl	8017982 <memcpy>
 800ac56:	e7a1      	b.n	800ab9c <ucdr_serialize_endian_uint32_t+0x74>

0800ac58 <ucdr_deserialize_uint32_t>:
 800ac58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac5c:	460d      	mov	r5, r1
 800ac5e:	2104      	movs	r1, #4
 800ac60:	4604      	mov	r4, r0
 800ac62:	f000 fe01 	bl	800b868 <ucdr_buffer_alignment>
 800ac66:	4601      	mov	r1, r0
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ac6e:	f000 fe3f 	bl	800b8f0 <ucdr_advance_buffer>
 800ac72:	2104      	movs	r1, #4
 800ac74:	4620      	mov	r0, r4
 800ac76:	f000 fd97 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d138      	bne.n	800acf0 <ucdr_deserialize_uint32_t+0x98>
 800ac7e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ac82:	42b7      	cmp	r7, r6
 800ac84:	d92f      	bls.n	800ace6 <ucdr_deserialize_uint32_t+0x8e>
 800ac86:	6923      	ldr	r3, [r4, #16]
 800ac88:	60a7      	str	r7, [r4, #8]
 800ac8a:	1bbf      	subs	r7, r7, r6
 800ac8c:	443b      	add	r3, r7
 800ac8e:	f1c7 0904 	rsb	r9, r7, #4
 800ac92:	6123      	str	r3, [r4, #16]
 800ac94:	4649      	mov	r1, r9
 800ac96:	4620      	mov	r0, r4
 800ac98:	f000 fd92 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d046      	beq.n	800ad2e <ucdr_deserialize_uint32_t+0xd6>
 800aca0:	7d23      	ldrb	r3, [r4, #20]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d05c      	beq.n	800ad60 <ucdr_deserialize_uint32_t+0x108>
 800aca6:	78f3      	ldrb	r3, [r6, #3]
 800aca8:	702b      	strb	r3, [r5, #0]
 800acaa:	2f00      	cmp	r7, #0
 800acac:	d04c      	beq.n	800ad48 <ucdr_deserialize_uint32_t+0xf0>
 800acae:	78b3      	ldrb	r3, [r6, #2]
 800acb0:	706b      	strb	r3, [r5, #1]
 800acb2:	2f01      	cmp	r7, #1
 800acb4:	f105 0302 	add.w	r3, r5, #2
 800acb8:	d04a      	beq.n	800ad50 <ucdr_deserialize_uint32_t+0xf8>
 800acba:	7873      	ldrb	r3, [r6, #1]
 800acbc:	70ab      	strb	r3, [r5, #2]
 800acbe:	2f02      	cmp	r7, #2
 800acc0:	f105 0303 	add.w	r3, r5, #3
 800acc4:	d048      	beq.n	800ad58 <ucdr_deserialize_uint32_t+0x100>
 800acc6:	7833      	ldrb	r3, [r6, #0]
 800acc8:	70eb      	strb	r3, [r5, #3]
 800acca:	6923      	ldr	r3, [r4, #16]
 800accc:	68a2      	ldr	r2, [r4, #8]
 800acce:	7da0      	ldrb	r0, [r4, #22]
 800acd0:	2104      	movs	r1, #4
 800acd2:	3304      	adds	r3, #4
 800acd4:	444a      	add	r2, r9
 800acd6:	1bdb      	subs	r3, r3, r7
 800acd8:	7561      	strb	r1, [r4, #21]
 800acda:	60a2      	str	r2, [r4, #8]
 800acdc:	6123      	str	r3, [r4, #16]
 800acde:	f080 0001 	eor.w	r0, r0, #1
 800ace2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ace6:	2104      	movs	r1, #4
 800ace8:	4620      	mov	r0, r4
 800acea:	f000 fd69 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800acee:	b1b0      	cbz	r0, 800ad1e <ucdr_deserialize_uint32_t+0xc6>
 800acf0:	7d23      	ldrb	r3, [r4, #20]
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	68a3      	ldr	r3, [r4, #8]
 800acf6:	d017      	beq.n	800ad28 <ucdr_deserialize_uint32_t+0xd0>
 800acf8:	78db      	ldrb	r3, [r3, #3]
 800acfa:	702b      	strb	r3, [r5, #0]
 800acfc:	68a3      	ldr	r3, [r4, #8]
 800acfe:	789b      	ldrb	r3, [r3, #2]
 800ad00:	706b      	strb	r3, [r5, #1]
 800ad02:	68a3      	ldr	r3, [r4, #8]
 800ad04:	785b      	ldrb	r3, [r3, #1]
 800ad06:	70ab      	strb	r3, [r5, #2]
 800ad08:	68a3      	ldr	r3, [r4, #8]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	70eb      	strb	r3, [r5, #3]
 800ad0e:	68a2      	ldr	r2, [r4, #8]
 800ad10:	6923      	ldr	r3, [r4, #16]
 800ad12:	3204      	adds	r2, #4
 800ad14:	3304      	adds	r3, #4
 800ad16:	2104      	movs	r1, #4
 800ad18:	60a2      	str	r2, [r4, #8]
 800ad1a:	6123      	str	r3, [r4, #16]
 800ad1c:	7561      	strb	r1, [r4, #21]
 800ad1e:	7da0      	ldrb	r0, [r4, #22]
 800ad20:	f080 0001 	eor.w	r0, r0, #1
 800ad24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	602b      	str	r3, [r5, #0]
 800ad2c:	e7ef      	b.n	800ad0e <ucdr_deserialize_uint32_t+0xb6>
 800ad2e:	68a2      	ldr	r2, [r4, #8]
 800ad30:	6923      	ldr	r3, [r4, #16]
 800ad32:	7da0      	ldrb	r0, [r4, #22]
 800ad34:	f884 8015 	strb.w	r8, [r4, #21]
 800ad38:	1bd2      	subs	r2, r2, r7
 800ad3a:	1bdb      	subs	r3, r3, r7
 800ad3c:	60a2      	str	r2, [r4, #8]
 800ad3e:	6123      	str	r3, [r4, #16]
 800ad40:	f080 0001 	eor.w	r0, r0, #1
 800ad44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad48:	68a3      	ldr	r3, [r4, #8]
 800ad4a:	789b      	ldrb	r3, [r3, #2]
 800ad4c:	706b      	strb	r3, [r5, #1]
 800ad4e:	1cab      	adds	r3, r5, #2
 800ad50:	68a2      	ldr	r2, [r4, #8]
 800ad52:	7852      	ldrb	r2, [r2, #1]
 800ad54:	f803 2b01 	strb.w	r2, [r3], #1
 800ad58:	68a2      	ldr	r2, [r4, #8]
 800ad5a:	7812      	ldrb	r2, [r2, #0]
 800ad5c:	701a      	strb	r2, [r3, #0]
 800ad5e:	e7b4      	b.n	800acca <ucdr_deserialize_uint32_t+0x72>
 800ad60:	4631      	mov	r1, r6
 800ad62:	463a      	mov	r2, r7
 800ad64:	4628      	mov	r0, r5
 800ad66:	f00c fe0c 	bl	8017982 <memcpy>
 800ad6a:	68a1      	ldr	r1, [r4, #8]
 800ad6c:	464a      	mov	r2, r9
 800ad6e:	19e8      	adds	r0, r5, r7
 800ad70:	f00c fe07 	bl	8017982 <memcpy>
 800ad74:	e7a9      	b.n	800acca <ucdr_deserialize_uint32_t+0x72>
 800ad76:	bf00      	nop

0800ad78 <ucdr_deserialize_endian_uint32_t>:
 800ad78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad7c:	460e      	mov	r6, r1
 800ad7e:	2104      	movs	r1, #4
 800ad80:	4604      	mov	r4, r0
 800ad82:	4615      	mov	r5, r2
 800ad84:	f000 fd70 	bl	800b868 <ucdr_buffer_alignment>
 800ad88:	4601      	mov	r1, r0
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ad90:	f000 fdae 	bl	800b8f0 <ucdr_advance_buffer>
 800ad94:	2104      	movs	r1, #4
 800ad96:	4620      	mov	r0, r4
 800ad98:	f000 fd06 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d13c      	bne.n	800ae1a <ucdr_deserialize_endian_uint32_t+0xa2>
 800ada0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ada4:	42bb      	cmp	r3, r7
 800ada6:	d933      	bls.n	800ae10 <ucdr_deserialize_endian_uint32_t+0x98>
 800ada8:	eba3 0807 	sub.w	r8, r3, r7
 800adac:	60a3      	str	r3, [r4, #8]
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	f1c8 0a04 	rsb	sl, r8, #4
 800adb4:	4443      	add	r3, r8
 800adb6:	6123      	str	r3, [r4, #16]
 800adb8:	4651      	mov	r1, sl
 800adba:	4620      	mov	r0, r4
 800adbc:	f000 fd00 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d048      	beq.n	800ae56 <ucdr_deserialize_endian_uint32_t+0xde>
 800adc4:	2e01      	cmp	r6, #1
 800adc6:	d061      	beq.n	800ae8c <ucdr_deserialize_endian_uint32_t+0x114>
 800adc8:	78fb      	ldrb	r3, [r7, #3]
 800adca:	702b      	strb	r3, [r5, #0]
 800adcc:	f1b8 0f00 	cmp.w	r8, #0
 800add0:	d050      	beq.n	800ae74 <ucdr_deserialize_endian_uint32_t+0xfc>
 800add2:	78bb      	ldrb	r3, [r7, #2]
 800add4:	706b      	strb	r3, [r5, #1]
 800add6:	f1b8 0f01 	cmp.w	r8, #1
 800adda:	f105 0302 	add.w	r3, r5, #2
 800adde:	d04d      	beq.n	800ae7c <ucdr_deserialize_endian_uint32_t+0x104>
 800ade0:	787b      	ldrb	r3, [r7, #1]
 800ade2:	70ab      	strb	r3, [r5, #2]
 800ade4:	f1b8 0f02 	cmp.w	r8, #2
 800ade8:	f105 0303 	add.w	r3, r5, #3
 800adec:	d04a      	beq.n	800ae84 <ucdr_deserialize_endian_uint32_t+0x10c>
 800adee:	783b      	ldrb	r3, [r7, #0]
 800adf0:	70eb      	strb	r3, [r5, #3]
 800adf2:	6923      	ldr	r3, [r4, #16]
 800adf4:	68a2      	ldr	r2, [r4, #8]
 800adf6:	7da0      	ldrb	r0, [r4, #22]
 800adf8:	2104      	movs	r1, #4
 800adfa:	3304      	adds	r3, #4
 800adfc:	4452      	add	r2, sl
 800adfe:	eba3 0308 	sub.w	r3, r3, r8
 800ae02:	7561      	strb	r1, [r4, #21]
 800ae04:	60a2      	str	r2, [r4, #8]
 800ae06:	6123      	str	r3, [r4, #16]
 800ae08:	f080 0001 	eor.w	r0, r0, #1
 800ae0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae10:	2104      	movs	r1, #4
 800ae12:	4620      	mov	r0, r4
 800ae14:	f000 fcd4 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800ae18:	b1a8      	cbz	r0, 800ae46 <ucdr_deserialize_endian_uint32_t+0xce>
 800ae1a:	2e01      	cmp	r6, #1
 800ae1c:	68a3      	ldr	r3, [r4, #8]
 800ae1e:	d017      	beq.n	800ae50 <ucdr_deserialize_endian_uint32_t+0xd8>
 800ae20:	78db      	ldrb	r3, [r3, #3]
 800ae22:	702b      	strb	r3, [r5, #0]
 800ae24:	68a3      	ldr	r3, [r4, #8]
 800ae26:	789b      	ldrb	r3, [r3, #2]
 800ae28:	706b      	strb	r3, [r5, #1]
 800ae2a:	68a3      	ldr	r3, [r4, #8]
 800ae2c:	785b      	ldrb	r3, [r3, #1]
 800ae2e:	70ab      	strb	r3, [r5, #2]
 800ae30:	68a3      	ldr	r3, [r4, #8]
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	70eb      	strb	r3, [r5, #3]
 800ae36:	68a2      	ldr	r2, [r4, #8]
 800ae38:	6923      	ldr	r3, [r4, #16]
 800ae3a:	3204      	adds	r2, #4
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	2104      	movs	r1, #4
 800ae40:	60a2      	str	r2, [r4, #8]
 800ae42:	6123      	str	r3, [r4, #16]
 800ae44:	7561      	strb	r1, [r4, #21]
 800ae46:	7da0      	ldrb	r0, [r4, #22]
 800ae48:	f080 0001 	eor.w	r0, r0, #1
 800ae4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	602b      	str	r3, [r5, #0]
 800ae54:	e7ef      	b.n	800ae36 <ucdr_deserialize_endian_uint32_t+0xbe>
 800ae56:	68a2      	ldr	r2, [r4, #8]
 800ae58:	6923      	ldr	r3, [r4, #16]
 800ae5a:	7da0      	ldrb	r0, [r4, #22]
 800ae5c:	f884 9015 	strb.w	r9, [r4, #21]
 800ae60:	eba2 0208 	sub.w	r2, r2, r8
 800ae64:	eba3 0308 	sub.w	r3, r3, r8
 800ae68:	60a2      	str	r2, [r4, #8]
 800ae6a:	6123      	str	r3, [r4, #16]
 800ae6c:	f080 0001 	eor.w	r0, r0, #1
 800ae70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae74:	68a3      	ldr	r3, [r4, #8]
 800ae76:	789b      	ldrb	r3, [r3, #2]
 800ae78:	706b      	strb	r3, [r5, #1]
 800ae7a:	1cab      	adds	r3, r5, #2
 800ae7c:	68a2      	ldr	r2, [r4, #8]
 800ae7e:	7852      	ldrb	r2, [r2, #1]
 800ae80:	f803 2b01 	strb.w	r2, [r3], #1
 800ae84:	68a2      	ldr	r2, [r4, #8]
 800ae86:	7812      	ldrb	r2, [r2, #0]
 800ae88:	701a      	strb	r2, [r3, #0]
 800ae8a:	e7b2      	b.n	800adf2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800ae8c:	4639      	mov	r1, r7
 800ae8e:	4642      	mov	r2, r8
 800ae90:	4628      	mov	r0, r5
 800ae92:	f00c fd76 	bl	8017982 <memcpy>
 800ae96:	68a1      	ldr	r1, [r4, #8]
 800ae98:	4652      	mov	r2, sl
 800ae9a:	eb05 0008 	add.w	r0, r5, r8
 800ae9e:	f00c fd70 	bl	8017982 <memcpy>
 800aea2:	e7a6      	b.n	800adf2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800aea4 <ucdr_serialize_uint64_t>:
 800aea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea8:	2108      	movs	r1, #8
 800aeaa:	b082      	sub	sp, #8
 800aeac:	4604      	mov	r4, r0
 800aeae:	e9cd 2300 	strd	r2, r3, [sp]
 800aeb2:	f000 fcd9 	bl	800b868 <ucdr_buffer_alignment>
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	4620      	mov	r0, r4
 800aeba:	7d67      	ldrb	r7, [r4, #21]
 800aebc:	f000 fd18 	bl	800b8f0 <ucdr_advance_buffer>
 800aec0:	2108      	movs	r1, #8
 800aec2:	4620      	mov	r0, r4
 800aec4:	f000 fc70 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800aec8:	2800      	cmp	r0, #0
 800aeca:	d14e      	bne.n	800af6a <ucdr_serialize_uint64_t+0xc6>
 800aecc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800aed0:	42ab      	cmp	r3, r5
 800aed2:	d945      	bls.n	800af60 <ucdr_serialize_uint64_t+0xbc>
 800aed4:	1b5e      	subs	r6, r3, r5
 800aed6:	60a3      	str	r3, [r4, #8]
 800aed8:	6923      	ldr	r3, [r4, #16]
 800aeda:	f1c6 0808 	rsb	r8, r6, #8
 800aede:	4433      	add	r3, r6
 800aee0:	6123      	str	r3, [r4, #16]
 800aee2:	4641      	mov	r1, r8
 800aee4:	4620      	mov	r0, r4
 800aee6:	f000 fc6b 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d074      	beq.n	800afd8 <ucdr_serialize_uint64_t+0x134>
 800aeee:	7d23      	ldrb	r3, [r4, #20]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	f000 809b 	beq.w	800b02c <ucdr_serialize_uint64_t+0x188>
 800aef6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aefa:	702b      	strb	r3, [r5, #0]
 800aefc:	2e00      	cmp	r6, #0
 800aefe:	d078      	beq.n	800aff2 <ucdr_serialize_uint64_t+0x14e>
 800af00:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800af04:	706b      	strb	r3, [r5, #1]
 800af06:	2e01      	cmp	r6, #1
 800af08:	d077      	beq.n	800affa <ucdr_serialize_uint64_t+0x156>
 800af0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800af0e:	70ab      	strb	r3, [r5, #2]
 800af10:	2e02      	cmp	r6, #2
 800af12:	d076      	beq.n	800b002 <ucdr_serialize_uint64_t+0x15e>
 800af14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800af18:	70eb      	strb	r3, [r5, #3]
 800af1a:	2e03      	cmp	r6, #3
 800af1c:	d075      	beq.n	800b00a <ucdr_serialize_uint64_t+0x166>
 800af1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800af22:	712b      	strb	r3, [r5, #4]
 800af24:	2e04      	cmp	r6, #4
 800af26:	d074      	beq.n	800b012 <ucdr_serialize_uint64_t+0x16e>
 800af28:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800af2c:	716b      	strb	r3, [r5, #5]
 800af2e:	2e05      	cmp	r6, #5
 800af30:	d073      	beq.n	800b01a <ucdr_serialize_uint64_t+0x176>
 800af32:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800af36:	71ab      	strb	r3, [r5, #6]
 800af38:	2e06      	cmp	r6, #6
 800af3a:	d072      	beq.n	800b022 <ucdr_serialize_uint64_t+0x17e>
 800af3c:	f89d 3000 	ldrb.w	r3, [sp]
 800af40:	71eb      	strb	r3, [r5, #7]
 800af42:	6923      	ldr	r3, [r4, #16]
 800af44:	68a2      	ldr	r2, [r4, #8]
 800af46:	7da0      	ldrb	r0, [r4, #22]
 800af48:	3308      	adds	r3, #8
 800af4a:	1b9e      	subs	r6, r3, r6
 800af4c:	4442      	add	r2, r8
 800af4e:	2308      	movs	r3, #8
 800af50:	f080 0001 	eor.w	r0, r0, #1
 800af54:	60a2      	str	r2, [r4, #8]
 800af56:	6126      	str	r6, [r4, #16]
 800af58:	7563      	strb	r3, [r4, #21]
 800af5a:	b002      	add	sp, #8
 800af5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af60:	2108      	movs	r1, #8
 800af62:	4620      	mov	r0, r4
 800af64:	f000 fc2c 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800af68:	b350      	cbz	r0, 800afc0 <ucdr_serialize_uint64_t+0x11c>
 800af6a:	7d23      	ldrb	r3, [r4, #20]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d02d      	beq.n	800afcc <ucdr_serialize_uint64_t+0x128>
 800af70:	68a3      	ldr	r3, [r4, #8]
 800af72:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800af76:	701a      	strb	r2, [r3, #0]
 800af78:	68a3      	ldr	r3, [r4, #8]
 800af7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af7e:	705a      	strb	r2, [r3, #1]
 800af80:	68a3      	ldr	r3, [r4, #8]
 800af82:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800af86:	709a      	strb	r2, [r3, #2]
 800af88:	68a3      	ldr	r3, [r4, #8]
 800af8a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800af8e:	70da      	strb	r2, [r3, #3]
 800af90:	68a3      	ldr	r3, [r4, #8]
 800af92:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800af96:	711a      	strb	r2, [r3, #4]
 800af98:	68a3      	ldr	r3, [r4, #8]
 800af9a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800af9e:	715a      	strb	r2, [r3, #5]
 800afa0:	68a3      	ldr	r3, [r4, #8]
 800afa2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800afa6:	719a      	strb	r2, [r3, #6]
 800afa8:	68a3      	ldr	r3, [r4, #8]
 800afaa:	f89d 2000 	ldrb.w	r2, [sp]
 800afae:	71da      	strb	r2, [r3, #7]
 800afb0:	68a2      	ldr	r2, [r4, #8]
 800afb2:	6923      	ldr	r3, [r4, #16]
 800afb4:	3208      	adds	r2, #8
 800afb6:	3308      	adds	r3, #8
 800afb8:	2108      	movs	r1, #8
 800afba:	60a2      	str	r2, [r4, #8]
 800afbc:	6123      	str	r3, [r4, #16]
 800afbe:	7561      	strb	r1, [r4, #21]
 800afc0:	7da0      	ldrb	r0, [r4, #22]
 800afc2:	f080 0001 	eor.w	r0, r0, #1
 800afc6:	b002      	add	sp, #8
 800afc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afcc:	466b      	mov	r3, sp
 800afce:	cb03      	ldmia	r3!, {r0, r1}
 800afd0:	68a3      	ldr	r3, [r4, #8]
 800afd2:	6018      	str	r0, [r3, #0]
 800afd4:	6059      	str	r1, [r3, #4]
 800afd6:	e7eb      	b.n	800afb0 <ucdr_serialize_uint64_t+0x10c>
 800afd8:	68a2      	ldr	r2, [r4, #8]
 800afda:	6923      	ldr	r3, [r4, #16]
 800afdc:	7da0      	ldrb	r0, [r4, #22]
 800afde:	7567      	strb	r7, [r4, #21]
 800afe0:	1b92      	subs	r2, r2, r6
 800afe2:	1b9b      	subs	r3, r3, r6
 800afe4:	f080 0001 	eor.w	r0, r0, #1
 800afe8:	60a2      	str	r2, [r4, #8]
 800afea:	6123      	str	r3, [r4, #16]
 800afec:	b002      	add	sp, #8
 800afee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff2:	68a3      	ldr	r3, [r4, #8]
 800aff4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aff8:	701a      	strb	r2, [r3, #0]
 800affa:	68a3      	ldr	r3, [r4, #8]
 800affc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b000:	701a      	strb	r2, [r3, #0]
 800b002:	68a3      	ldr	r3, [r4, #8]
 800b004:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b008:	701a      	strb	r2, [r3, #0]
 800b00a:	68a3      	ldr	r3, [r4, #8]
 800b00c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b010:	701a      	strb	r2, [r3, #0]
 800b012:	68a3      	ldr	r3, [r4, #8]
 800b014:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b018:	701a      	strb	r2, [r3, #0]
 800b01a:	68a3      	ldr	r3, [r4, #8]
 800b01c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b020:	701a      	strb	r2, [r3, #0]
 800b022:	68a3      	ldr	r3, [r4, #8]
 800b024:	f89d 2000 	ldrb.w	r2, [sp]
 800b028:	701a      	strb	r2, [r3, #0]
 800b02a:	e78a      	b.n	800af42 <ucdr_serialize_uint64_t+0x9e>
 800b02c:	4628      	mov	r0, r5
 800b02e:	466d      	mov	r5, sp
 800b030:	4629      	mov	r1, r5
 800b032:	4632      	mov	r2, r6
 800b034:	f00c fca5 	bl	8017982 <memcpy>
 800b038:	68a0      	ldr	r0, [r4, #8]
 800b03a:	4642      	mov	r2, r8
 800b03c:	19a9      	adds	r1, r5, r6
 800b03e:	f00c fca0 	bl	8017982 <memcpy>
 800b042:	e77e      	b.n	800af42 <ucdr_serialize_uint64_t+0x9e>

0800b044 <ucdr_serialize_int16_t>:
 800b044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b048:	b082      	sub	sp, #8
 800b04a:	460b      	mov	r3, r1
 800b04c:	2102      	movs	r1, #2
 800b04e:	4604      	mov	r4, r0
 800b050:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b054:	f000 fc08 	bl	800b868 <ucdr_buffer_alignment>
 800b058:	4601      	mov	r1, r0
 800b05a:	4620      	mov	r0, r4
 800b05c:	7d67      	ldrb	r7, [r4, #21]
 800b05e:	f000 fc47 	bl	800b8f0 <ucdr_advance_buffer>
 800b062:	2102      	movs	r1, #2
 800b064:	4620      	mov	r0, r4
 800b066:	f000 fb9f 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800b06a:	bb78      	cbnz	r0, 800b0cc <ucdr_serialize_int16_t+0x88>
 800b06c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b070:	42ab      	cmp	r3, r5
 800b072:	d926      	bls.n	800b0c2 <ucdr_serialize_int16_t+0x7e>
 800b074:	1b5e      	subs	r6, r3, r5
 800b076:	60a3      	str	r3, [r4, #8]
 800b078:	6923      	ldr	r3, [r4, #16]
 800b07a:	f1c6 0802 	rsb	r8, r6, #2
 800b07e:	4433      	add	r3, r6
 800b080:	6123      	str	r3, [r4, #16]
 800b082:	4641      	mov	r1, r8
 800b084:	4620      	mov	r0, r4
 800b086:	f000 fb9b 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d03b      	beq.n	800b106 <ucdr_serialize_int16_t+0xc2>
 800b08e:	7d23      	ldrb	r3, [r4, #20]
 800b090:	2b01      	cmp	r3, #1
 800b092:	d04a      	beq.n	800b12a <ucdr_serialize_int16_t+0xe6>
 800b094:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b098:	702b      	strb	r3, [r5, #0]
 800b09a:	2e00      	cmp	r6, #0
 800b09c:	d040      	beq.n	800b120 <ucdr_serialize_int16_t+0xdc>
 800b09e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b0a2:	706b      	strb	r3, [r5, #1]
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	68a2      	ldr	r2, [r4, #8]
 800b0a8:	7da0      	ldrb	r0, [r4, #22]
 800b0aa:	3302      	adds	r3, #2
 800b0ac:	1b9e      	subs	r6, r3, r6
 800b0ae:	4442      	add	r2, r8
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	f080 0001 	eor.w	r0, r0, #1
 800b0b6:	60a2      	str	r2, [r4, #8]
 800b0b8:	6126      	str	r6, [r4, #16]
 800b0ba:	7563      	strb	r3, [r4, #21]
 800b0bc:	b002      	add	sp, #8
 800b0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c2:	2102      	movs	r1, #2
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f000 fb7b 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800b0ca:	b190      	cbz	r0, 800b0f2 <ucdr_serialize_int16_t+0xae>
 800b0cc:	7d23      	ldrb	r3, [r4, #20]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	68a3      	ldr	r3, [r4, #8]
 800b0d2:	d014      	beq.n	800b0fe <ucdr_serialize_int16_t+0xba>
 800b0d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b0d8:	701a      	strb	r2, [r3, #0]
 800b0da:	68a3      	ldr	r3, [r4, #8]
 800b0dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b0e0:	705a      	strb	r2, [r3, #1]
 800b0e2:	68a2      	ldr	r2, [r4, #8]
 800b0e4:	6923      	ldr	r3, [r4, #16]
 800b0e6:	3202      	adds	r2, #2
 800b0e8:	3302      	adds	r3, #2
 800b0ea:	2102      	movs	r1, #2
 800b0ec:	60a2      	str	r2, [r4, #8]
 800b0ee:	6123      	str	r3, [r4, #16]
 800b0f0:	7561      	strb	r1, [r4, #21]
 800b0f2:	7da0      	ldrb	r0, [r4, #22]
 800b0f4:	f080 0001 	eor.w	r0, r0, #1
 800b0f8:	b002      	add	sp, #8
 800b0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b102:	801a      	strh	r2, [r3, #0]
 800b104:	e7ed      	b.n	800b0e2 <ucdr_serialize_int16_t+0x9e>
 800b106:	68a2      	ldr	r2, [r4, #8]
 800b108:	6923      	ldr	r3, [r4, #16]
 800b10a:	7da0      	ldrb	r0, [r4, #22]
 800b10c:	7567      	strb	r7, [r4, #21]
 800b10e:	1b92      	subs	r2, r2, r6
 800b110:	1b9b      	subs	r3, r3, r6
 800b112:	f080 0001 	eor.w	r0, r0, #1
 800b116:	60a2      	str	r2, [r4, #8]
 800b118:	6123      	str	r3, [r4, #16]
 800b11a:	b002      	add	sp, #8
 800b11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b120:	68a3      	ldr	r3, [r4, #8]
 800b122:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b126:	701a      	strb	r2, [r3, #0]
 800b128:	e7bc      	b.n	800b0a4 <ucdr_serialize_int16_t+0x60>
 800b12a:	4628      	mov	r0, r5
 800b12c:	f10d 0506 	add.w	r5, sp, #6
 800b130:	4629      	mov	r1, r5
 800b132:	4632      	mov	r2, r6
 800b134:	f00c fc25 	bl	8017982 <memcpy>
 800b138:	68a0      	ldr	r0, [r4, #8]
 800b13a:	4642      	mov	r2, r8
 800b13c:	19a9      	adds	r1, r5, r6
 800b13e:	f00c fc20 	bl	8017982 <memcpy>
 800b142:	e7af      	b.n	800b0a4 <ucdr_serialize_int16_t+0x60>

0800b144 <ucdr_deserialize_int16_t>:
 800b144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b148:	460d      	mov	r5, r1
 800b14a:	2102      	movs	r1, #2
 800b14c:	4604      	mov	r4, r0
 800b14e:	f000 fb8b 	bl	800b868 <ucdr_buffer_alignment>
 800b152:	4601      	mov	r1, r0
 800b154:	4620      	mov	r0, r4
 800b156:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b15a:	f000 fbc9 	bl	800b8f0 <ucdr_advance_buffer>
 800b15e:	2102      	movs	r1, #2
 800b160:	4620      	mov	r0, r4
 800b162:	f000 fb21 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800b166:	bb60      	cbnz	r0, 800b1c2 <ucdr_deserialize_int16_t+0x7e>
 800b168:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b16c:	42be      	cmp	r6, r7
 800b16e:	d923      	bls.n	800b1b8 <ucdr_deserialize_int16_t+0x74>
 800b170:	6923      	ldr	r3, [r4, #16]
 800b172:	60a6      	str	r6, [r4, #8]
 800b174:	1bf6      	subs	r6, r6, r7
 800b176:	4433      	add	r3, r6
 800b178:	f1c6 0902 	rsb	r9, r6, #2
 800b17c:	6123      	str	r3, [r4, #16]
 800b17e:	4649      	mov	r1, r9
 800b180:	4620      	mov	r0, r4
 800b182:	f000 fb1d 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800b186:	2800      	cmp	r0, #0
 800b188:	d034      	beq.n	800b1f4 <ucdr_deserialize_int16_t+0xb0>
 800b18a:	7d23      	ldrb	r3, [r4, #20]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d042      	beq.n	800b216 <ucdr_deserialize_int16_t+0xd2>
 800b190:	787b      	ldrb	r3, [r7, #1]
 800b192:	702b      	strb	r3, [r5, #0]
 800b194:	2e00      	cmp	r6, #0
 800b196:	d03a      	beq.n	800b20e <ucdr_deserialize_int16_t+0xca>
 800b198:	783b      	ldrb	r3, [r7, #0]
 800b19a:	706b      	strb	r3, [r5, #1]
 800b19c:	6923      	ldr	r3, [r4, #16]
 800b19e:	68a2      	ldr	r2, [r4, #8]
 800b1a0:	7da0      	ldrb	r0, [r4, #22]
 800b1a2:	2102      	movs	r1, #2
 800b1a4:	3302      	adds	r3, #2
 800b1a6:	444a      	add	r2, r9
 800b1a8:	1b9b      	subs	r3, r3, r6
 800b1aa:	7561      	strb	r1, [r4, #21]
 800b1ac:	60a2      	str	r2, [r4, #8]
 800b1ae:	6123      	str	r3, [r4, #16]
 800b1b0:	f080 0001 	eor.w	r0, r0, #1
 800b1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1b8:	2102      	movs	r1, #2
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 fb00 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800b1c0:	b180      	cbz	r0, 800b1e4 <ucdr_deserialize_int16_t+0xa0>
 800b1c2:	7d23      	ldrb	r3, [r4, #20]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	68a3      	ldr	r3, [r4, #8]
 800b1c8:	d011      	beq.n	800b1ee <ucdr_deserialize_int16_t+0xaa>
 800b1ca:	785b      	ldrb	r3, [r3, #1]
 800b1cc:	702b      	strb	r3, [r5, #0]
 800b1ce:	68a3      	ldr	r3, [r4, #8]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	706b      	strb	r3, [r5, #1]
 800b1d4:	68a2      	ldr	r2, [r4, #8]
 800b1d6:	6923      	ldr	r3, [r4, #16]
 800b1d8:	3202      	adds	r2, #2
 800b1da:	3302      	adds	r3, #2
 800b1dc:	2102      	movs	r1, #2
 800b1de:	60a2      	str	r2, [r4, #8]
 800b1e0:	6123      	str	r3, [r4, #16]
 800b1e2:	7561      	strb	r1, [r4, #21]
 800b1e4:	7da0      	ldrb	r0, [r4, #22]
 800b1e6:	f080 0001 	eor.w	r0, r0, #1
 800b1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	802b      	strh	r3, [r5, #0]
 800b1f2:	e7ef      	b.n	800b1d4 <ucdr_deserialize_int16_t+0x90>
 800b1f4:	68a2      	ldr	r2, [r4, #8]
 800b1f6:	6923      	ldr	r3, [r4, #16]
 800b1f8:	7da0      	ldrb	r0, [r4, #22]
 800b1fa:	f884 8015 	strb.w	r8, [r4, #21]
 800b1fe:	1b92      	subs	r2, r2, r6
 800b200:	1b9b      	subs	r3, r3, r6
 800b202:	60a2      	str	r2, [r4, #8]
 800b204:	6123      	str	r3, [r4, #16]
 800b206:	f080 0001 	eor.w	r0, r0, #1
 800b20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b20e:	68a3      	ldr	r3, [r4, #8]
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	706b      	strb	r3, [r5, #1]
 800b214:	e7c2      	b.n	800b19c <ucdr_deserialize_int16_t+0x58>
 800b216:	4639      	mov	r1, r7
 800b218:	4632      	mov	r2, r6
 800b21a:	4628      	mov	r0, r5
 800b21c:	f00c fbb1 	bl	8017982 <memcpy>
 800b220:	68a1      	ldr	r1, [r4, #8]
 800b222:	464a      	mov	r2, r9
 800b224:	19a8      	adds	r0, r5, r6
 800b226:	f00c fbac 	bl	8017982 <memcpy>
 800b22a:	e7b7      	b.n	800b19c <ucdr_deserialize_int16_t+0x58>

0800b22c <ucdr_serialize_int32_t>:
 800b22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b230:	b082      	sub	sp, #8
 800b232:	4604      	mov	r4, r0
 800b234:	9101      	str	r1, [sp, #4]
 800b236:	2104      	movs	r1, #4
 800b238:	f000 fb16 	bl	800b868 <ucdr_buffer_alignment>
 800b23c:	4601      	mov	r1, r0
 800b23e:	4620      	mov	r0, r4
 800b240:	7d67      	ldrb	r7, [r4, #21]
 800b242:	f000 fb55 	bl	800b8f0 <ucdr_advance_buffer>
 800b246:	2104      	movs	r1, #4
 800b248:	4620      	mov	r0, r4
 800b24a:	f000 faad 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800b24e:	2800      	cmp	r0, #0
 800b250:	d139      	bne.n	800b2c6 <ucdr_serialize_int32_t+0x9a>
 800b252:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b256:	42ab      	cmp	r3, r5
 800b258:	d930      	bls.n	800b2bc <ucdr_serialize_int32_t+0x90>
 800b25a:	1b5e      	subs	r6, r3, r5
 800b25c:	60a3      	str	r3, [r4, #8]
 800b25e:	6923      	ldr	r3, [r4, #16]
 800b260:	f1c6 0804 	rsb	r8, r6, #4
 800b264:	4433      	add	r3, r6
 800b266:	6123      	str	r3, [r4, #16]
 800b268:	4641      	mov	r1, r8
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 faa8 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800b270:	2800      	cmp	r0, #0
 800b272:	d04c      	beq.n	800b30e <ucdr_serialize_int32_t+0xe2>
 800b274:	7d23      	ldrb	r3, [r4, #20]
 800b276:	2b01      	cmp	r3, #1
 800b278:	d063      	beq.n	800b342 <ucdr_serialize_int32_t+0x116>
 800b27a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b27e:	702b      	strb	r3, [r5, #0]
 800b280:	2e00      	cmp	r6, #0
 800b282:	d051      	beq.n	800b328 <ucdr_serialize_int32_t+0xfc>
 800b284:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b288:	706b      	strb	r3, [r5, #1]
 800b28a:	2e01      	cmp	r6, #1
 800b28c:	d050      	beq.n	800b330 <ucdr_serialize_int32_t+0x104>
 800b28e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b292:	70ab      	strb	r3, [r5, #2]
 800b294:	2e02      	cmp	r6, #2
 800b296:	d04f      	beq.n	800b338 <ucdr_serialize_int32_t+0x10c>
 800b298:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b29c:	70eb      	strb	r3, [r5, #3]
 800b29e:	6923      	ldr	r3, [r4, #16]
 800b2a0:	68a2      	ldr	r2, [r4, #8]
 800b2a2:	7da0      	ldrb	r0, [r4, #22]
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	1b9e      	subs	r6, r3, r6
 800b2a8:	4442      	add	r2, r8
 800b2aa:	2304      	movs	r3, #4
 800b2ac:	f080 0001 	eor.w	r0, r0, #1
 800b2b0:	60a2      	str	r2, [r4, #8]
 800b2b2:	6126      	str	r6, [r4, #16]
 800b2b4:	7563      	strb	r3, [r4, #21]
 800b2b6:	b002      	add	sp, #8
 800b2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2bc:	2104      	movs	r1, #4
 800b2be:	4620      	mov	r0, r4
 800b2c0:	f000 fa7e 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800b2c4:	b1d0      	cbz	r0, 800b2fc <ucdr_serialize_int32_t+0xd0>
 800b2c6:	7d23      	ldrb	r3, [r4, #20]
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	68a3      	ldr	r3, [r4, #8]
 800b2cc:	d01c      	beq.n	800b308 <ucdr_serialize_int32_t+0xdc>
 800b2ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b2d2:	701a      	strb	r2, [r3, #0]
 800b2d4:	68a3      	ldr	r3, [r4, #8]
 800b2d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b2da:	705a      	strb	r2, [r3, #1]
 800b2dc:	68a3      	ldr	r3, [r4, #8]
 800b2de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b2e2:	709a      	strb	r2, [r3, #2]
 800b2e4:	68a3      	ldr	r3, [r4, #8]
 800b2e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b2ea:	70da      	strb	r2, [r3, #3]
 800b2ec:	68a2      	ldr	r2, [r4, #8]
 800b2ee:	6923      	ldr	r3, [r4, #16]
 800b2f0:	3204      	adds	r2, #4
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	2104      	movs	r1, #4
 800b2f6:	60a2      	str	r2, [r4, #8]
 800b2f8:	6123      	str	r3, [r4, #16]
 800b2fa:	7561      	strb	r1, [r4, #21]
 800b2fc:	7da0      	ldrb	r0, [r4, #22]
 800b2fe:	f080 0001 	eor.w	r0, r0, #1
 800b302:	b002      	add	sp, #8
 800b304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b308:	9a01      	ldr	r2, [sp, #4]
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	e7ee      	b.n	800b2ec <ucdr_serialize_int32_t+0xc0>
 800b30e:	68a2      	ldr	r2, [r4, #8]
 800b310:	6923      	ldr	r3, [r4, #16]
 800b312:	7da0      	ldrb	r0, [r4, #22]
 800b314:	7567      	strb	r7, [r4, #21]
 800b316:	1b92      	subs	r2, r2, r6
 800b318:	1b9b      	subs	r3, r3, r6
 800b31a:	f080 0001 	eor.w	r0, r0, #1
 800b31e:	60a2      	str	r2, [r4, #8]
 800b320:	6123      	str	r3, [r4, #16]
 800b322:	b002      	add	sp, #8
 800b324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b328:	68a3      	ldr	r3, [r4, #8]
 800b32a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b32e:	701a      	strb	r2, [r3, #0]
 800b330:	68a3      	ldr	r3, [r4, #8]
 800b332:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b336:	701a      	strb	r2, [r3, #0]
 800b338:	68a3      	ldr	r3, [r4, #8]
 800b33a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b33e:	701a      	strb	r2, [r3, #0]
 800b340:	e7ad      	b.n	800b29e <ucdr_serialize_int32_t+0x72>
 800b342:	4628      	mov	r0, r5
 800b344:	ad01      	add	r5, sp, #4
 800b346:	4629      	mov	r1, r5
 800b348:	4632      	mov	r2, r6
 800b34a:	f00c fb1a 	bl	8017982 <memcpy>
 800b34e:	68a0      	ldr	r0, [r4, #8]
 800b350:	4642      	mov	r2, r8
 800b352:	19a9      	adds	r1, r5, r6
 800b354:	f00c fb15 	bl	8017982 <memcpy>
 800b358:	e7a1      	b.n	800b29e <ucdr_serialize_int32_t+0x72>
 800b35a:	bf00      	nop

0800b35c <ucdr_deserialize_int32_t>:
 800b35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b360:	460d      	mov	r5, r1
 800b362:	2104      	movs	r1, #4
 800b364:	4604      	mov	r4, r0
 800b366:	f000 fa7f 	bl	800b868 <ucdr_buffer_alignment>
 800b36a:	4601      	mov	r1, r0
 800b36c:	4620      	mov	r0, r4
 800b36e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b372:	f000 fabd 	bl	800b8f0 <ucdr_advance_buffer>
 800b376:	2104      	movs	r1, #4
 800b378:	4620      	mov	r0, r4
 800b37a:	f000 fa15 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800b37e:	2800      	cmp	r0, #0
 800b380:	d138      	bne.n	800b3f4 <ucdr_deserialize_int32_t+0x98>
 800b382:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b386:	42b7      	cmp	r7, r6
 800b388:	d92f      	bls.n	800b3ea <ucdr_deserialize_int32_t+0x8e>
 800b38a:	6923      	ldr	r3, [r4, #16]
 800b38c:	60a7      	str	r7, [r4, #8]
 800b38e:	1bbf      	subs	r7, r7, r6
 800b390:	443b      	add	r3, r7
 800b392:	f1c7 0904 	rsb	r9, r7, #4
 800b396:	6123      	str	r3, [r4, #16]
 800b398:	4649      	mov	r1, r9
 800b39a:	4620      	mov	r0, r4
 800b39c:	f000 fa10 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	d046      	beq.n	800b432 <ucdr_deserialize_int32_t+0xd6>
 800b3a4:	7d23      	ldrb	r3, [r4, #20]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d05c      	beq.n	800b464 <ucdr_deserialize_int32_t+0x108>
 800b3aa:	78f3      	ldrb	r3, [r6, #3]
 800b3ac:	702b      	strb	r3, [r5, #0]
 800b3ae:	2f00      	cmp	r7, #0
 800b3b0:	d04c      	beq.n	800b44c <ucdr_deserialize_int32_t+0xf0>
 800b3b2:	78b3      	ldrb	r3, [r6, #2]
 800b3b4:	706b      	strb	r3, [r5, #1]
 800b3b6:	2f01      	cmp	r7, #1
 800b3b8:	f105 0302 	add.w	r3, r5, #2
 800b3bc:	d04a      	beq.n	800b454 <ucdr_deserialize_int32_t+0xf8>
 800b3be:	7873      	ldrb	r3, [r6, #1]
 800b3c0:	70ab      	strb	r3, [r5, #2]
 800b3c2:	2f02      	cmp	r7, #2
 800b3c4:	f105 0303 	add.w	r3, r5, #3
 800b3c8:	d048      	beq.n	800b45c <ucdr_deserialize_int32_t+0x100>
 800b3ca:	7833      	ldrb	r3, [r6, #0]
 800b3cc:	70eb      	strb	r3, [r5, #3]
 800b3ce:	6923      	ldr	r3, [r4, #16]
 800b3d0:	68a2      	ldr	r2, [r4, #8]
 800b3d2:	7da0      	ldrb	r0, [r4, #22]
 800b3d4:	2104      	movs	r1, #4
 800b3d6:	3304      	adds	r3, #4
 800b3d8:	444a      	add	r2, r9
 800b3da:	1bdb      	subs	r3, r3, r7
 800b3dc:	7561      	strb	r1, [r4, #21]
 800b3de:	60a2      	str	r2, [r4, #8]
 800b3e0:	6123      	str	r3, [r4, #16]
 800b3e2:	f080 0001 	eor.w	r0, r0, #1
 800b3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ea:	2104      	movs	r1, #4
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f000 f9e7 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800b3f2:	b1b0      	cbz	r0, 800b422 <ucdr_deserialize_int32_t+0xc6>
 800b3f4:	7d23      	ldrb	r3, [r4, #20]
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	68a3      	ldr	r3, [r4, #8]
 800b3fa:	d017      	beq.n	800b42c <ucdr_deserialize_int32_t+0xd0>
 800b3fc:	78db      	ldrb	r3, [r3, #3]
 800b3fe:	702b      	strb	r3, [r5, #0]
 800b400:	68a3      	ldr	r3, [r4, #8]
 800b402:	789b      	ldrb	r3, [r3, #2]
 800b404:	706b      	strb	r3, [r5, #1]
 800b406:	68a3      	ldr	r3, [r4, #8]
 800b408:	785b      	ldrb	r3, [r3, #1]
 800b40a:	70ab      	strb	r3, [r5, #2]
 800b40c:	68a3      	ldr	r3, [r4, #8]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	70eb      	strb	r3, [r5, #3]
 800b412:	68a2      	ldr	r2, [r4, #8]
 800b414:	6923      	ldr	r3, [r4, #16]
 800b416:	3204      	adds	r2, #4
 800b418:	3304      	adds	r3, #4
 800b41a:	2104      	movs	r1, #4
 800b41c:	60a2      	str	r2, [r4, #8]
 800b41e:	6123      	str	r3, [r4, #16]
 800b420:	7561      	strb	r1, [r4, #21]
 800b422:	7da0      	ldrb	r0, [r4, #22]
 800b424:	f080 0001 	eor.w	r0, r0, #1
 800b428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	602b      	str	r3, [r5, #0]
 800b430:	e7ef      	b.n	800b412 <ucdr_deserialize_int32_t+0xb6>
 800b432:	68a2      	ldr	r2, [r4, #8]
 800b434:	6923      	ldr	r3, [r4, #16]
 800b436:	7da0      	ldrb	r0, [r4, #22]
 800b438:	f884 8015 	strb.w	r8, [r4, #21]
 800b43c:	1bd2      	subs	r2, r2, r7
 800b43e:	1bdb      	subs	r3, r3, r7
 800b440:	60a2      	str	r2, [r4, #8]
 800b442:	6123      	str	r3, [r4, #16]
 800b444:	f080 0001 	eor.w	r0, r0, #1
 800b448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b44c:	68a3      	ldr	r3, [r4, #8]
 800b44e:	789b      	ldrb	r3, [r3, #2]
 800b450:	706b      	strb	r3, [r5, #1]
 800b452:	1cab      	adds	r3, r5, #2
 800b454:	68a2      	ldr	r2, [r4, #8]
 800b456:	7852      	ldrb	r2, [r2, #1]
 800b458:	f803 2b01 	strb.w	r2, [r3], #1
 800b45c:	68a2      	ldr	r2, [r4, #8]
 800b45e:	7812      	ldrb	r2, [r2, #0]
 800b460:	701a      	strb	r2, [r3, #0]
 800b462:	e7b4      	b.n	800b3ce <ucdr_deserialize_int32_t+0x72>
 800b464:	4631      	mov	r1, r6
 800b466:	463a      	mov	r2, r7
 800b468:	4628      	mov	r0, r5
 800b46a:	f00c fa8a 	bl	8017982 <memcpy>
 800b46e:	68a1      	ldr	r1, [r4, #8]
 800b470:	464a      	mov	r2, r9
 800b472:	19e8      	adds	r0, r5, r7
 800b474:	f00c fa85 	bl	8017982 <memcpy>
 800b478:	e7a9      	b.n	800b3ce <ucdr_deserialize_int32_t+0x72>
 800b47a:	bf00      	nop

0800b47c <ucdr_serialize_double>:
 800b47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b480:	2108      	movs	r1, #8
 800b482:	b082      	sub	sp, #8
 800b484:	4604      	mov	r4, r0
 800b486:	ed8d 0b00 	vstr	d0, [sp]
 800b48a:	f000 f9ed 	bl	800b868 <ucdr_buffer_alignment>
 800b48e:	4601      	mov	r1, r0
 800b490:	4620      	mov	r0, r4
 800b492:	7d67      	ldrb	r7, [r4, #21]
 800b494:	f000 fa2c 	bl	800b8f0 <ucdr_advance_buffer>
 800b498:	2108      	movs	r1, #8
 800b49a:	4620      	mov	r0, r4
 800b49c:	f000 f984 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d14e      	bne.n	800b542 <ucdr_serialize_double+0xc6>
 800b4a4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b4a8:	42ab      	cmp	r3, r5
 800b4aa:	d945      	bls.n	800b538 <ucdr_serialize_double+0xbc>
 800b4ac:	1b5e      	subs	r6, r3, r5
 800b4ae:	60a3      	str	r3, [r4, #8]
 800b4b0:	6923      	ldr	r3, [r4, #16]
 800b4b2:	f1c6 0808 	rsb	r8, r6, #8
 800b4b6:	4433      	add	r3, r6
 800b4b8:	6123      	str	r3, [r4, #16]
 800b4ba:	4641      	mov	r1, r8
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f000 f97f 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	d074      	beq.n	800b5b0 <ucdr_serialize_double+0x134>
 800b4c6:	7d23      	ldrb	r3, [r4, #20]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	f000 809b 	beq.w	800b604 <ucdr_serialize_double+0x188>
 800b4ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b4d2:	702b      	strb	r3, [r5, #0]
 800b4d4:	2e00      	cmp	r6, #0
 800b4d6:	d078      	beq.n	800b5ca <ucdr_serialize_double+0x14e>
 800b4d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b4dc:	706b      	strb	r3, [r5, #1]
 800b4de:	2e01      	cmp	r6, #1
 800b4e0:	d077      	beq.n	800b5d2 <ucdr_serialize_double+0x156>
 800b4e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b4e6:	70ab      	strb	r3, [r5, #2]
 800b4e8:	2e02      	cmp	r6, #2
 800b4ea:	d076      	beq.n	800b5da <ucdr_serialize_double+0x15e>
 800b4ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b4f0:	70eb      	strb	r3, [r5, #3]
 800b4f2:	2e03      	cmp	r6, #3
 800b4f4:	d075      	beq.n	800b5e2 <ucdr_serialize_double+0x166>
 800b4f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b4fa:	712b      	strb	r3, [r5, #4]
 800b4fc:	2e04      	cmp	r6, #4
 800b4fe:	d074      	beq.n	800b5ea <ucdr_serialize_double+0x16e>
 800b500:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b504:	716b      	strb	r3, [r5, #5]
 800b506:	2e05      	cmp	r6, #5
 800b508:	d073      	beq.n	800b5f2 <ucdr_serialize_double+0x176>
 800b50a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b50e:	71ab      	strb	r3, [r5, #6]
 800b510:	2e06      	cmp	r6, #6
 800b512:	d072      	beq.n	800b5fa <ucdr_serialize_double+0x17e>
 800b514:	f89d 3000 	ldrb.w	r3, [sp]
 800b518:	71eb      	strb	r3, [r5, #7]
 800b51a:	6923      	ldr	r3, [r4, #16]
 800b51c:	68a2      	ldr	r2, [r4, #8]
 800b51e:	7da0      	ldrb	r0, [r4, #22]
 800b520:	3308      	adds	r3, #8
 800b522:	1b9e      	subs	r6, r3, r6
 800b524:	4442      	add	r2, r8
 800b526:	2308      	movs	r3, #8
 800b528:	f080 0001 	eor.w	r0, r0, #1
 800b52c:	60a2      	str	r2, [r4, #8]
 800b52e:	6126      	str	r6, [r4, #16]
 800b530:	7563      	strb	r3, [r4, #21]
 800b532:	b002      	add	sp, #8
 800b534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b538:	2108      	movs	r1, #8
 800b53a:	4620      	mov	r0, r4
 800b53c:	f000 f940 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800b540:	b350      	cbz	r0, 800b598 <ucdr_serialize_double+0x11c>
 800b542:	7d23      	ldrb	r3, [r4, #20]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d02d      	beq.n	800b5a4 <ucdr_serialize_double+0x128>
 800b548:	68a3      	ldr	r3, [r4, #8]
 800b54a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b54e:	701a      	strb	r2, [r3, #0]
 800b550:	68a3      	ldr	r3, [r4, #8]
 800b552:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b556:	705a      	strb	r2, [r3, #1]
 800b558:	68a3      	ldr	r3, [r4, #8]
 800b55a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b55e:	709a      	strb	r2, [r3, #2]
 800b560:	68a3      	ldr	r3, [r4, #8]
 800b562:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b566:	70da      	strb	r2, [r3, #3]
 800b568:	68a3      	ldr	r3, [r4, #8]
 800b56a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b56e:	711a      	strb	r2, [r3, #4]
 800b570:	68a3      	ldr	r3, [r4, #8]
 800b572:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b576:	715a      	strb	r2, [r3, #5]
 800b578:	68a3      	ldr	r3, [r4, #8]
 800b57a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b57e:	719a      	strb	r2, [r3, #6]
 800b580:	68a3      	ldr	r3, [r4, #8]
 800b582:	f89d 2000 	ldrb.w	r2, [sp]
 800b586:	71da      	strb	r2, [r3, #7]
 800b588:	68a2      	ldr	r2, [r4, #8]
 800b58a:	6923      	ldr	r3, [r4, #16]
 800b58c:	3208      	adds	r2, #8
 800b58e:	3308      	adds	r3, #8
 800b590:	2108      	movs	r1, #8
 800b592:	60a2      	str	r2, [r4, #8]
 800b594:	6123      	str	r3, [r4, #16]
 800b596:	7561      	strb	r1, [r4, #21]
 800b598:	7da0      	ldrb	r0, [r4, #22]
 800b59a:	f080 0001 	eor.w	r0, r0, #1
 800b59e:	b002      	add	sp, #8
 800b5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a4:	466b      	mov	r3, sp
 800b5a6:	cb03      	ldmia	r3!, {r0, r1}
 800b5a8:	68a3      	ldr	r3, [r4, #8]
 800b5aa:	6018      	str	r0, [r3, #0]
 800b5ac:	6059      	str	r1, [r3, #4]
 800b5ae:	e7eb      	b.n	800b588 <ucdr_serialize_double+0x10c>
 800b5b0:	68a2      	ldr	r2, [r4, #8]
 800b5b2:	6923      	ldr	r3, [r4, #16]
 800b5b4:	7da0      	ldrb	r0, [r4, #22]
 800b5b6:	7567      	strb	r7, [r4, #21]
 800b5b8:	1b92      	subs	r2, r2, r6
 800b5ba:	1b9b      	subs	r3, r3, r6
 800b5bc:	f080 0001 	eor.w	r0, r0, #1
 800b5c0:	60a2      	str	r2, [r4, #8]
 800b5c2:	6123      	str	r3, [r4, #16]
 800b5c4:	b002      	add	sp, #8
 800b5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ca:	68a3      	ldr	r3, [r4, #8]
 800b5cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5d0:	701a      	strb	r2, [r3, #0]
 800b5d2:	68a3      	ldr	r3, [r4, #8]
 800b5d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b5d8:	701a      	strb	r2, [r3, #0]
 800b5da:	68a3      	ldr	r3, [r4, #8]
 800b5dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b5e0:	701a      	strb	r2, [r3, #0]
 800b5e2:	68a3      	ldr	r3, [r4, #8]
 800b5e4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b5e8:	701a      	strb	r2, [r3, #0]
 800b5ea:	68a3      	ldr	r3, [r4, #8]
 800b5ec:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b5f0:	701a      	strb	r2, [r3, #0]
 800b5f2:	68a3      	ldr	r3, [r4, #8]
 800b5f4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b5f8:	701a      	strb	r2, [r3, #0]
 800b5fa:	68a3      	ldr	r3, [r4, #8]
 800b5fc:	f89d 2000 	ldrb.w	r2, [sp]
 800b600:	701a      	strb	r2, [r3, #0]
 800b602:	e78a      	b.n	800b51a <ucdr_serialize_double+0x9e>
 800b604:	4628      	mov	r0, r5
 800b606:	466d      	mov	r5, sp
 800b608:	4629      	mov	r1, r5
 800b60a:	4632      	mov	r2, r6
 800b60c:	f00c f9b9 	bl	8017982 <memcpy>
 800b610:	68a0      	ldr	r0, [r4, #8]
 800b612:	4642      	mov	r2, r8
 800b614:	19a9      	adds	r1, r5, r6
 800b616:	f00c f9b4 	bl	8017982 <memcpy>
 800b61a:	e77e      	b.n	800b51a <ucdr_serialize_double+0x9e>

0800b61c <ucdr_deserialize_double>:
 800b61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b620:	460d      	mov	r5, r1
 800b622:	2108      	movs	r1, #8
 800b624:	4604      	mov	r4, r0
 800b626:	f000 f91f 	bl	800b868 <ucdr_buffer_alignment>
 800b62a:	4601      	mov	r1, r0
 800b62c:	4620      	mov	r0, r4
 800b62e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b632:	f000 f95d 	bl	800b8f0 <ucdr_advance_buffer>
 800b636:	2108      	movs	r1, #8
 800b638:	4620      	mov	r0, r4
 800b63a:	f000 f8b5 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800b63e:	2800      	cmp	r0, #0
 800b640:	d151      	bne.n	800b6e6 <ucdr_deserialize_double+0xca>
 800b642:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b646:	42be      	cmp	r6, r7
 800b648:	d948      	bls.n	800b6dc <ucdr_deserialize_double+0xc0>
 800b64a:	6923      	ldr	r3, [r4, #16]
 800b64c:	60a6      	str	r6, [r4, #8]
 800b64e:	1bf6      	subs	r6, r6, r7
 800b650:	4433      	add	r3, r6
 800b652:	f1c6 0808 	rsb	r8, r6, #8
 800b656:	6123      	str	r3, [r4, #16]
 800b658:	4641      	mov	r1, r8
 800b65a:	4620      	mov	r0, r4
 800b65c:	f000 f8b0 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800b660:	2800      	cmp	r0, #0
 800b662:	d06d      	beq.n	800b740 <ucdr_deserialize_double+0x124>
 800b664:	7d23      	ldrb	r3, [r4, #20]
 800b666:	2b01      	cmp	r3, #1
 800b668:	f000 8093 	beq.w	800b792 <ucdr_deserialize_double+0x176>
 800b66c:	79fb      	ldrb	r3, [r7, #7]
 800b66e:	702b      	strb	r3, [r5, #0]
 800b670:	2e00      	cmp	r6, #0
 800b672:	d072      	beq.n	800b75a <ucdr_deserialize_double+0x13e>
 800b674:	79bb      	ldrb	r3, [r7, #6]
 800b676:	706b      	strb	r3, [r5, #1]
 800b678:	2e01      	cmp	r6, #1
 800b67a:	f105 0302 	add.w	r3, r5, #2
 800b67e:	d070      	beq.n	800b762 <ucdr_deserialize_double+0x146>
 800b680:	797b      	ldrb	r3, [r7, #5]
 800b682:	70ab      	strb	r3, [r5, #2]
 800b684:	2e02      	cmp	r6, #2
 800b686:	f105 0303 	add.w	r3, r5, #3
 800b68a:	d06e      	beq.n	800b76a <ucdr_deserialize_double+0x14e>
 800b68c:	793b      	ldrb	r3, [r7, #4]
 800b68e:	70eb      	strb	r3, [r5, #3]
 800b690:	2e03      	cmp	r6, #3
 800b692:	f105 0304 	add.w	r3, r5, #4
 800b696:	d06c      	beq.n	800b772 <ucdr_deserialize_double+0x156>
 800b698:	78fb      	ldrb	r3, [r7, #3]
 800b69a:	712b      	strb	r3, [r5, #4]
 800b69c:	2e04      	cmp	r6, #4
 800b69e:	f105 0305 	add.w	r3, r5, #5
 800b6a2:	d06a      	beq.n	800b77a <ucdr_deserialize_double+0x15e>
 800b6a4:	78bb      	ldrb	r3, [r7, #2]
 800b6a6:	716b      	strb	r3, [r5, #5]
 800b6a8:	2e05      	cmp	r6, #5
 800b6aa:	f105 0306 	add.w	r3, r5, #6
 800b6ae:	d068      	beq.n	800b782 <ucdr_deserialize_double+0x166>
 800b6b0:	787b      	ldrb	r3, [r7, #1]
 800b6b2:	71ab      	strb	r3, [r5, #6]
 800b6b4:	2e06      	cmp	r6, #6
 800b6b6:	f105 0307 	add.w	r3, r5, #7
 800b6ba:	d066      	beq.n	800b78a <ucdr_deserialize_double+0x16e>
 800b6bc:	783b      	ldrb	r3, [r7, #0]
 800b6be:	71eb      	strb	r3, [r5, #7]
 800b6c0:	6923      	ldr	r3, [r4, #16]
 800b6c2:	68a2      	ldr	r2, [r4, #8]
 800b6c4:	7da0      	ldrb	r0, [r4, #22]
 800b6c6:	3308      	adds	r3, #8
 800b6c8:	1b9e      	subs	r6, r3, r6
 800b6ca:	2308      	movs	r3, #8
 800b6cc:	4442      	add	r2, r8
 800b6ce:	7563      	strb	r3, [r4, #21]
 800b6d0:	60a2      	str	r2, [r4, #8]
 800b6d2:	6126      	str	r6, [r4, #16]
 800b6d4:	f080 0001 	eor.w	r0, r0, #1
 800b6d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6dc:	2108      	movs	r1, #8
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f000 f86e 	bl	800b7c0 <ucdr_check_final_buffer_behavior>
 800b6e4:	b310      	cbz	r0, 800b72c <ucdr_deserialize_double+0x110>
 800b6e6:	7d23      	ldrb	r3, [r4, #20]
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	68a3      	ldr	r3, [r4, #8]
 800b6ec:	d023      	beq.n	800b736 <ucdr_deserialize_double+0x11a>
 800b6ee:	79db      	ldrb	r3, [r3, #7]
 800b6f0:	702b      	strb	r3, [r5, #0]
 800b6f2:	68a3      	ldr	r3, [r4, #8]
 800b6f4:	799b      	ldrb	r3, [r3, #6]
 800b6f6:	706b      	strb	r3, [r5, #1]
 800b6f8:	68a3      	ldr	r3, [r4, #8]
 800b6fa:	795b      	ldrb	r3, [r3, #5]
 800b6fc:	70ab      	strb	r3, [r5, #2]
 800b6fe:	68a3      	ldr	r3, [r4, #8]
 800b700:	791b      	ldrb	r3, [r3, #4]
 800b702:	70eb      	strb	r3, [r5, #3]
 800b704:	68a3      	ldr	r3, [r4, #8]
 800b706:	78db      	ldrb	r3, [r3, #3]
 800b708:	712b      	strb	r3, [r5, #4]
 800b70a:	68a3      	ldr	r3, [r4, #8]
 800b70c:	789b      	ldrb	r3, [r3, #2]
 800b70e:	716b      	strb	r3, [r5, #5]
 800b710:	68a3      	ldr	r3, [r4, #8]
 800b712:	785b      	ldrb	r3, [r3, #1]
 800b714:	71ab      	strb	r3, [r5, #6]
 800b716:	68a3      	ldr	r3, [r4, #8]
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	71eb      	strb	r3, [r5, #7]
 800b71c:	68a2      	ldr	r2, [r4, #8]
 800b71e:	6923      	ldr	r3, [r4, #16]
 800b720:	3208      	adds	r2, #8
 800b722:	3308      	adds	r3, #8
 800b724:	2108      	movs	r1, #8
 800b726:	60a2      	str	r2, [r4, #8]
 800b728:	6123      	str	r3, [r4, #16]
 800b72a:	7561      	strb	r1, [r4, #21]
 800b72c:	7da0      	ldrb	r0, [r4, #22]
 800b72e:	f080 0001 	eor.w	r0, r0, #1
 800b732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	606b      	str	r3, [r5, #4]
 800b73c:	602a      	str	r2, [r5, #0]
 800b73e:	e7ed      	b.n	800b71c <ucdr_deserialize_double+0x100>
 800b740:	68a2      	ldr	r2, [r4, #8]
 800b742:	6923      	ldr	r3, [r4, #16]
 800b744:	7da0      	ldrb	r0, [r4, #22]
 800b746:	f884 9015 	strb.w	r9, [r4, #21]
 800b74a:	1b92      	subs	r2, r2, r6
 800b74c:	1b9b      	subs	r3, r3, r6
 800b74e:	60a2      	str	r2, [r4, #8]
 800b750:	6123      	str	r3, [r4, #16]
 800b752:	f080 0001 	eor.w	r0, r0, #1
 800b756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b75a:	68a3      	ldr	r3, [r4, #8]
 800b75c:	799b      	ldrb	r3, [r3, #6]
 800b75e:	706b      	strb	r3, [r5, #1]
 800b760:	1cab      	adds	r3, r5, #2
 800b762:	68a2      	ldr	r2, [r4, #8]
 800b764:	7952      	ldrb	r2, [r2, #5]
 800b766:	f803 2b01 	strb.w	r2, [r3], #1
 800b76a:	68a2      	ldr	r2, [r4, #8]
 800b76c:	7912      	ldrb	r2, [r2, #4]
 800b76e:	f803 2b01 	strb.w	r2, [r3], #1
 800b772:	68a2      	ldr	r2, [r4, #8]
 800b774:	78d2      	ldrb	r2, [r2, #3]
 800b776:	f803 2b01 	strb.w	r2, [r3], #1
 800b77a:	68a2      	ldr	r2, [r4, #8]
 800b77c:	7892      	ldrb	r2, [r2, #2]
 800b77e:	f803 2b01 	strb.w	r2, [r3], #1
 800b782:	68a2      	ldr	r2, [r4, #8]
 800b784:	7852      	ldrb	r2, [r2, #1]
 800b786:	f803 2b01 	strb.w	r2, [r3], #1
 800b78a:	68a2      	ldr	r2, [r4, #8]
 800b78c:	7812      	ldrb	r2, [r2, #0]
 800b78e:	701a      	strb	r2, [r3, #0]
 800b790:	e796      	b.n	800b6c0 <ucdr_deserialize_double+0xa4>
 800b792:	4639      	mov	r1, r7
 800b794:	4632      	mov	r2, r6
 800b796:	4628      	mov	r0, r5
 800b798:	f00c f8f3 	bl	8017982 <memcpy>
 800b79c:	68a1      	ldr	r1, [r4, #8]
 800b79e:	4642      	mov	r2, r8
 800b7a0:	19a8      	adds	r0, r5, r6
 800b7a2:	f00c f8ee 	bl	8017982 <memcpy>
 800b7a6:	e78b      	b.n	800b6c0 <ucdr_deserialize_double+0xa4>

0800b7a8 <ucdr_check_buffer_available_for>:
 800b7a8:	7d83      	ldrb	r3, [r0, #22]
 800b7aa:	b93b      	cbnz	r3, 800b7bc <ucdr_check_buffer_available_for+0x14>
 800b7ac:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800b7b0:	4419      	add	r1, r3
 800b7b2:	4288      	cmp	r0, r1
 800b7b4:	bf34      	ite	cc
 800b7b6:	2000      	movcc	r0, #0
 800b7b8:	2001      	movcs	r0, #1
 800b7ba:	4770      	bx	lr
 800b7bc:	2000      	movs	r0, #0
 800b7be:	4770      	bx	lr

0800b7c0 <ucdr_check_final_buffer_behavior>:
 800b7c0:	7d83      	ldrb	r3, [r0, #22]
 800b7c2:	b943      	cbnz	r3, 800b7d6 <ucdr_check_final_buffer_behavior+0x16>
 800b7c4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800b7c8:	4291      	cmp	r1, r2
 800b7ca:	b510      	push	{r4, lr}
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	d205      	bcs.n	800b7dc <ucdr_check_final_buffer_behavior+0x1c>
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	bd10      	pop	{r4, pc}
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	4618      	mov	r0, r3
 800b7da:	4770      	bx	lr
 800b7dc:	6982      	ldr	r2, [r0, #24]
 800b7de:	b13a      	cbz	r2, 800b7f0 <ucdr_check_final_buffer_behavior+0x30>
 800b7e0:	69c1      	ldr	r1, [r0, #28]
 800b7e2:	4790      	blx	r2
 800b7e4:	f080 0301 	eor.w	r3, r0, #1
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	75a0      	strb	r0, [r4, #22]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	bd10      	pop	{r4, pc}
 800b7f0:	2001      	movs	r0, #1
 800b7f2:	75a0      	strb	r0, [r4, #22]
 800b7f4:	e7fa      	b.n	800b7ec <ucdr_check_final_buffer_behavior+0x2c>
 800b7f6:	bf00      	nop

0800b7f8 <ucdr_set_on_full_buffer_callback>:
 800b7f8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop

0800b800 <ucdr_init_buffer_origin_offset_endian>:
 800b800:	b410      	push	{r4}
 800b802:	9c01      	ldr	r4, [sp, #4]
 800b804:	6001      	str	r1, [r0, #0]
 800b806:	440a      	add	r2, r1
 800b808:	6042      	str	r2, [r0, #4]
 800b80a:	190a      	adds	r2, r1, r4
 800b80c:	441c      	add	r4, r3
 800b80e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800b812:	6082      	str	r2, [r0, #8]
 800b814:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b818:	7503      	strb	r3, [r0, #20]
 800b81a:	2200      	movs	r2, #0
 800b81c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800b820:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b824:	7542      	strb	r2, [r0, #21]
 800b826:	7582      	strb	r2, [r0, #22]
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop

0800b82c <ucdr_init_buffer_origin_offset>:
 800b82c:	b510      	push	{r4, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	9c04      	ldr	r4, [sp, #16]
 800b832:	9400      	str	r4, [sp, #0]
 800b834:	2401      	movs	r4, #1
 800b836:	9401      	str	r4, [sp, #4]
 800b838:	f7ff ffe2 	bl	800b800 <ucdr_init_buffer_origin_offset_endian>
 800b83c:	b002      	add	sp, #8
 800b83e:	bd10      	pop	{r4, pc}

0800b840 <ucdr_init_buffer_origin>:
 800b840:	b510      	push	{r4, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	2400      	movs	r4, #0
 800b846:	9400      	str	r4, [sp, #0]
 800b848:	f7ff fff0 	bl	800b82c <ucdr_init_buffer_origin_offset>
 800b84c:	b002      	add	sp, #8
 800b84e:	bd10      	pop	{r4, pc}

0800b850 <ucdr_init_buffer>:
 800b850:	2300      	movs	r3, #0
 800b852:	f7ff bff5 	b.w	800b840 <ucdr_init_buffer_origin>
 800b856:	bf00      	nop

0800b858 <ucdr_alignment>:
 800b858:	fbb0 f3f1 	udiv	r3, r0, r1
 800b85c:	fb03 0011 	mls	r0, r3, r1, r0
 800b860:	1a08      	subs	r0, r1, r0
 800b862:	3901      	subs	r1, #1
 800b864:	4008      	ands	r0, r1
 800b866:	4770      	bx	lr

0800b868 <ucdr_buffer_alignment>:
 800b868:	7d43      	ldrb	r3, [r0, #21]
 800b86a:	428b      	cmp	r3, r1
 800b86c:	d208      	bcs.n	800b880 <ucdr_buffer_alignment+0x18>
 800b86e:	6900      	ldr	r0, [r0, #16]
 800b870:	fbb0 f3f1 	udiv	r3, r0, r1
 800b874:	fb01 0013 	mls	r0, r1, r3, r0
 800b878:	1a08      	subs	r0, r1, r0
 800b87a:	3901      	subs	r1, #1
 800b87c:	4008      	ands	r0, r1
 800b87e:	4770      	bx	lr
 800b880:	2000      	movs	r0, #0
 800b882:	4770      	bx	lr

0800b884 <ucdr_align_to>:
 800b884:	b538      	push	{r3, r4, r5, lr}
 800b886:	4604      	mov	r4, r0
 800b888:	460d      	mov	r5, r1
 800b88a:	f7ff ffed 	bl	800b868 <ucdr_buffer_alignment>
 800b88e:	68a3      	ldr	r3, [r4, #8]
 800b890:	6921      	ldr	r1, [r4, #16]
 800b892:	7565      	strb	r5, [r4, #21]
 800b894:	181a      	adds	r2, r3, r0
 800b896:	6863      	ldr	r3, [r4, #4]
 800b898:	4293      	cmp	r3, r2
 800b89a:	4408      	add	r0, r1
 800b89c:	bf28      	it	cs
 800b89e:	4613      	movcs	r3, r2
 800b8a0:	6120      	str	r0, [r4, #16]
 800b8a2:	60a3      	str	r3, [r4, #8]
 800b8a4:	bd38      	pop	{r3, r4, r5, pc}
 800b8a6:	bf00      	nop

0800b8a8 <ucdr_buffer_length>:
 800b8a8:	6882      	ldr	r2, [r0, #8]
 800b8aa:	6800      	ldr	r0, [r0, #0]
 800b8ac:	1a10      	subs	r0, r2, r0
 800b8ae:	4770      	bx	lr

0800b8b0 <ucdr_buffer_remaining>:
 800b8b0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800b8b4:	1a10      	subs	r0, r2, r0
 800b8b6:	4770      	bx	lr

0800b8b8 <ucdr_check_final_buffer_behavior_array>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	7d83      	ldrb	r3, [r0, #22]
 800b8bc:	b963      	cbnz	r3, 800b8d8 <ucdr_check_final_buffer_behavior_array+0x20>
 800b8be:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	460d      	mov	r5, r1
 800b8c8:	d308      	bcc.n	800b8dc <ucdr_check_final_buffer_behavior_array+0x24>
 800b8ca:	b139      	cbz	r1, 800b8dc <ucdr_check_final_buffer_behavior_array+0x24>
 800b8cc:	6983      	ldr	r3, [r0, #24]
 800b8ce:	b163      	cbz	r3, 800b8ea <ucdr_check_final_buffer_behavior_array+0x32>
 800b8d0:	69c1      	ldr	r1, [r0, #28]
 800b8d2:	4798      	blx	r3
 800b8d4:	75a0      	strb	r0, [r4, #22]
 800b8d6:	b108      	cbz	r0, 800b8dc <ucdr_check_final_buffer_behavior_array+0x24>
 800b8d8:	2000      	movs	r0, #0
 800b8da:	bd38      	pop	{r3, r4, r5, pc}
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f7ff ffe7 	bl	800b8b0 <ucdr_buffer_remaining>
 800b8e2:	42a8      	cmp	r0, r5
 800b8e4:	bf28      	it	cs
 800b8e6:	4628      	movcs	r0, r5
 800b8e8:	bd38      	pop	{r3, r4, r5, pc}
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	7583      	strb	r3, [r0, #22]
 800b8ee:	e7f3      	b.n	800b8d8 <ucdr_check_final_buffer_behavior_array+0x20>

0800b8f0 <ucdr_advance_buffer>:
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	460d      	mov	r5, r1
 800b8f6:	f7ff ff57 	bl	800b7a8 <ucdr_check_buffer_available_for>
 800b8fa:	b178      	cbz	r0, 800b91c <ucdr_advance_buffer+0x2c>
 800b8fc:	6923      	ldr	r3, [r4, #16]
 800b8fe:	68a2      	ldr	r2, [r4, #8]
 800b900:	442b      	add	r3, r5
 800b902:	6123      	str	r3, [r4, #16]
 800b904:	2301      	movs	r3, #1
 800b906:	442a      	add	r2, r5
 800b908:	7563      	strb	r3, [r4, #21]
 800b90a:	60a2      	str	r2, [r4, #8]
 800b90c:	bd38      	pop	{r3, r4, r5, pc}
 800b90e:	68a2      	ldr	r2, [r4, #8]
 800b910:	6923      	ldr	r3, [r4, #16]
 800b912:	4402      	add	r2, r0
 800b914:	4403      	add	r3, r0
 800b916:	1a2d      	subs	r5, r5, r0
 800b918:	60a2      	str	r2, [r4, #8]
 800b91a:	6123      	str	r3, [r4, #16]
 800b91c:	4629      	mov	r1, r5
 800b91e:	2201      	movs	r2, #1
 800b920:	4620      	mov	r0, r4
 800b922:	f7ff ffc9 	bl	800b8b8 <ucdr_check_final_buffer_behavior_array>
 800b926:	2800      	cmp	r0, #0
 800b928:	d1f1      	bne.n	800b90e <ucdr_advance_buffer+0x1e>
 800b92a:	2301      	movs	r3, #1
 800b92c:	7563      	strb	r3, [r4, #21]
 800b92e:	bd38      	pop	{r3, r4, r5, pc}

0800b930 <rcl_get_zero_initialized_publisher>:
 800b930:	4b01      	ldr	r3, [pc, #4]	@ (800b938 <rcl_get_zero_initialized_publisher+0x8>)
 800b932:	6818      	ldr	r0, [r3, #0]
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	08018a58 	.word	0x08018a58

0800b93c <rcl_publisher_init>:
 800b93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b940:	b088      	sub	sp, #32
 800b942:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b944:	2d00      	cmp	r5, #0
 800b946:	d069      	beq.n	800ba1c <rcl_publisher_init+0xe0>
 800b948:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800b94c:	4604      	mov	r4, r0
 800b94e:	4648      	mov	r0, r9
 800b950:	460e      	mov	r6, r1
 800b952:	4690      	mov	r8, r2
 800b954:	461f      	mov	r7, r3
 800b956:	f001 f847 	bl	800c9e8 <rcutils_allocator_is_valid>
 800b95a:	2800      	cmp	r0, #0
 800b95c:	d05e      	beq.n	800ba1c <rcl_publisher_init+0xe0>
 800b95e:	2c00      	cmp	r4, #0
 800b960:	d05c      	beq.n	800ba1c <rcl_publisher_init+0xe0>
 800b962:	f8d4 a000 	ldr.w	sl, [r4]
 800b966:	f1ba 0f00 	cmp.w	sl, #0
 800b96a:	d004      	beq.n	800b976 <rcl_publisher_init+0x3a>
 800b96c:	2764      	movs	r7, #100	@ 0x64
 800b96e:	4638      	mov	r0, r7
 800b970:	b008      	add	sp, #32
 800b972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b976:	4630      	mov	r0, r6
 800b978:	f005 f9bc 	bl	8010cf4 <rcl_node_is_valid>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	d052      	beq.n	800ba26 <rcl_publisher_init+0xea>
 800b980:	f1b8 0f00 	cmp.w	r8, #0
 800b984:	d04a      	beq.n	800ba1c <rcl_publisher_init+0xe0>
 800b986:	2f00      	cmp	r7, #0
 800b988:	d048      	beq.n	800ba1c <rcl_publisher_init+0xe0>
 800b98a:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800b98e:	aa07      	add	r2, sp, #28
 800b990:	9205      	str	r2, [sp, #20]
 800b992:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800b996:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b99a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b99e:	f8cd a01c 	str.w	sl, [sp, #28]
 800b9a2:	4639      	mov	r1, r7
 800b9a4:	e899 000c 	ldmia.w	r9, {r2, r3}
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	f005 f9f7 	bl	8010d9c <rcl_node_resolve_name>
 800b9ae:	4607      	mov	r7, r0
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d14f      	bne.n	800ba54 <rcl_publisher_init+0x118>
 800b9b4:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800b9b6:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b9b8:	20c8      	movs	r0, #200	@ 0xc8
 800b9ba:	4798      	blx	r3
 800b9bc:	6020      	str	r0, [r4, #0]
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d04e      	beq.n	800ba60 <rcl_publisher_init+0x124>
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f005 f9b8 	bl	8010d38 <rcl_node_get_rmw_handle>
 800b9c8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	9a07      	ldr	r2, [sp, #28]
 800b9d0:	6827      	ldr	r7, [r4, #0]
 800b9d2:	462b      	mov	r3, r5
 800b9d4:	4641      	mov	r1, r8
 800b9d6:	f001 f915 	bl	800cc04 <rmw_create_publisher>
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800b9e0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b9e4:	b370      	cbz	r0, 800ba44 <rcl_publisher_init+0x108>
 800b9e6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800b9ea:	f001 f9e9 	bl	800cdc0 <rmw_publisher_get_actual_qos>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	4607      	mov	r7, r0
 800b9f2:	b9d0      	cbnz	r0, 800ba2a <rcl_publisher_init+0xee>
 800b9f4:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800b9f8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	2270      	movs	r2, #112	@ 0x70
 800ba00:	4618      	mov	r0, r3
 800ba02:	f00b ffbe 	bl	8017982 <memcpy>
 800ba06:	6832      	ldr	r2, [r6, #0]
 800ba08:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800ba0c:	9807      	ldr	r0, [sp, #28]
 800ba0e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800ba10:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ba12:	4798      	blx	r3
 800ba14:	4638      	mov	r0, r7
 800ba16:	b008      	add	sp, #32
 800ba18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1c:	270b      	movs	r7, #11
 800ba1e:	4638      	mov	r0, r7
 800ba20:	b008      	add	sp, #32
 800ba22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba26:	27c8      	movs	r7, #200	@ 0xc8
 800ba28:	e7a1      	b.n	800b96e <rcl_publisher_init+0x32>
 800ba2a:	b18b      	cbz	r3, 800ba50 <rcl_publisher_init+0x114>
 800ba2c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ba30:	b142      	cbz	r2, 800ba44 <rcl_publisher_init+0x108>
 800ba32:	4630      	mov	r0, r6
 800ba34:	f005 f980 	bl	8010d38 <rcl_node_get_rmw_handle>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ba3e:	f001 f9cf 	bl	800cde0 <rmw_destroy_publisher>
 800ba42:	6823      	ldr	r3, [r4, #0]
 800ba44:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800ba46:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ba48:	4618      	mov	r0, r3
 800ba4a:	4790      	blx	r2
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	6023      	str	r3, [r4, #0]
 800ba50:	2701      	movs	r7, #1
 800ba52:	e7db      	b.n	800ba0c <rcl_publisher_init+0xd0>
 800ba54:	2867      	cmp	r0, #103	@ 0x67
 800ba56:	d0d9      	beq.n	800ba0c <rcl_publisher_init+0xd0>
 800ba58:	2869      	cmp	r0, #105	@ 0x69
 800ba5a:	d003      	beq.n	800ba64 <rcl_publisher_init+0x128>
 800ba5c:	280a      	cmp	r0, #10
 800ba5e:	d1f7      	bne.n	800ba50 <rcl_publisher_init+0x114>
 800ba60:	270a      	movs	r7, #10
 800ba62:	e7d3      	b.n	800ba0c <rcl_publisher_init+0xd0>
 800ba64:	2767      	movs	r7, #103	@ 0x67
 800ba66:	e7d1      	b.n	800ba0c <rcl_publisher_init+0xd0>

0800ba68 <rcl_publisher_get_default_options>:
 800ba68:	b570      	push	{r4, r5, r6, lr}
 800ba6a:	4d14      	ldr	r5, [pc, #80]	@ (800babc <rcl_publisher_get_default_options+0x54>)
 800ba6c:	4914      	ldr	r1, [pc, #80]	@ (800bac0 <rcl_publisher_get_default_options+0x58>)
 800ba6e:	b088      	sub	sp, #32
 800ba70:	4604      	mov	r4, r0
 800ba72:	2250      	movs	r2, #80	@ 0x50
 800ba74:	4628      	mov	r0, r5
 800ba76:	f00b ff84 	bl	8017982 <memcpy>
 800ba7a:	a802      	add	r0, sp, #8
 800ba7c:	f000 ffa6 	bl	800c9cc <rcutils_get_default_allocator>
 800ba80:	f10d 0c08 	add.w	ip, sp, #8
 800ba84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ba88:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800ba8c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ba90:	466e      	mov	r6, sp
 800ba92:	f8dc 3000 	ldr.w	r3, [ip]
 800ba96:	f8ce 3000 	str.w	r3, [lr]
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	f001 f834 	bl	800cb08 <rmw_get_default_publisher_options>
 800baa0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800baa4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800baa8:	e883 0003 	stmia.w	r3, {r0, r1}
 800baac:	2270      	movs	r2, #112	@ 0x70
 800baae:	4629      	mov	r1, r5
 800bab0:	4620      	mov	r0, r4
 800bab2:	f00b ff66 	bl	8017982 <memcpy>
 800bab6:	4620      	mov	r0, r4
 800bab8:	b008      	add	sp, #32
 800baba:	bd70      	pop	{r4, r5, r6, pc}
 800babc:	20009370 	.word	0x20009370
 800bac0:	08018a60 	.word	0x08018a60

0800bac4 <rcl_publish>:
 800bac4:	b1f8      	cbz	r0, 800bb06 <rcl_publish+0x42>
 800bac6:	6803      	ldr	r3, [r0, #0]
 800bac8:	b570      	push	{r4, r5, r6, lr}
 800baca:	4604      	mov	r4, r0
 800bacc:	b1b3      	cbz	r3, 800bafc <rcl_publish+0x38>
 800bace:	4616      	mov	r6, r2
 800bad0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bad4:	b192      	cbz	r2, 800bafc <rcl_publish+0x38>
 800bad6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800bada:	460d      	mov	r5, r1
 800badc:	f004 fd30 	bl	8010540 <rcl_context_is_valid>
 800bae0:	b160      	cbz	r0, 800bafc <rcl_publish+0x38>
 800bae2:	6823      	ldr	r3, [r4, #0]
 800bae4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bae8:	b140      	cbz	r0, 800bafc <rcl_publish+0x38>
 800baea:	b155      	cbz	r5, 800bb02 <rcl_publish+0x3e>
 800baec:	4632      	mov	r2, r6
 800baee:	4629      	mov	r1, r5
 800baf0:	f001 f828 	bl	800cb44 <rmw_publish>
 800baf4:	3800      	subs	r0, #0
 800baf6:	bf18      	it	ne
 800baf8:	2001      	movne	r0, #1
 800bafa:	bd70      	pop	{r4, r5, r6, pc}
 800bafc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bb00:	bd70      	pop	{r4, r5, r6, pc}
 800bb02:	200b      	movs	r0, #11
 800bb04:	bd70      	pop	{r4, r5, r6, pc}
 800bb06:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bb0a:	4770      	bx	lr

0800bb0c <rcl_publisher_is_valid>:
 800bb0c:	b1a0      	cbz	r0, 800bb38 <rcl_publisher_is_valid+0x2c>
 800bb0e:	6803      	ldr	r3, [r0, #0]
 800bb10:	b510      	push	{r4, lr}
 800bb12:	4604      	mov	r4, r0
 800bb14:	b173      	cbz	r3, 800bb34 <rcl_publisher_is_valid+0x28>
 800bb16:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bb1a:	b15a      	cbz	r2, 800bb34 <rcl_publisher_is_valid+0x28>
 800bb1c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800bb20:	f004 fd0e 	bl	8010540 <rcl_context_is_valid>
 800bb24:	b130      	cbz	r0, 800bb34 <rcl_publisher_is_valid+0x28>
 800bb26:	6823      	ldr	r3, [r4, #0]
 800bb28:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bb2c:	3800      	subs	r0, #0
 800bb2e:	bf18      	it	ne
 800bb30:	2001      	movne	r0, #1
 800bb32:	bd10      	pop	{r4, pc}
 800bb34:	2000      	movs	r0, #0
 800bb36:	bd10      	pop	{r4, pc}
 800bb38:	2000      	movs	r0, #0
 800bb3a:	4770      	bx	lr

0800bb3c <rcl_publisher_is_valid_except_context>:
 800bb3c:	b130      	cbz	r0, 800bb4c <rcl_publisher_is_valid_except_context+0x10>
 800bb3e:	6800      	ldr	r0, [r0, #0]
 800bb40:	b120      	cbz	r0, 800bb4c <rcl_publisher_is_valid_except_context+0x10>
 800bb42:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800bb46:	3800      	subs	r0, #0
 800bb48:	bf18      	it	ne
 800bb4a:	2001      	movne	r0, #1
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop

0800bb50 <_rclc_check_for_new_data>:
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d046      	beq.n	800bbe2 <_rclc_check_for_new_data+0x92>
 800bb54:	b510      	push	{r4, lr}
 800bb56:	7802      	ldrb	r2, [r0, #0]
 800bb58:	b084      	sub	sp, #16
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2a0a      	cmp	r2, #10
 800bb5e:	d842      	bhi.n	800bbe6 <_rclc_check_for_new_data+0x96>
 800bb60:	e8df f002 	tbb	[pc, r2]
 800bb64:	14181212 	.word	0x14181212
 800bb68:	06060614 	.word	0x06060614
 800bb6c:	2e1a      	.short	0x2e1a
 800bb6e:	16          	.byte	0x16
 800bb6f:	00          	.byte	0x00
 800bb70:	6a0a      	ldr	r2, [r1, #32]
 800bb72:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bb74:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bb78:	2000      	movs	r0, #0
 800bb7a:	1a12      	subs	r2, r2, r0
 800bb7c:	bf18      	it	ne
 800bb7e:	2201      	movne	r2, #1
 800bb80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800bb84:	b004      	add	sp, #16
 800bb86:	bd10      	pop	{r4, pc}
 800bb88:	680a      	ldr	r2, [r1, #0]
 800bb8a:	e7f2      	b.n	800bb72 <_rclc_check_for_new_data+0x22>
 800bb8c:	698a      	ldr	r2, [r1, #24]
 800bb8e:	e7f0      	b.n	800bb72 <_rclc_check_for_new_data+0x22>
 800bb90:	688a      	ldr	r2, [r1, #8]
 800bb92:	e7ee      	b.n	800bb72 <_rclc_check_for_new_data+0x22>
 800bb94:	690a      	ldr	r2, [r1, #16]
 800bb96:	e7ec      	b.n	800bb72 <_rclc_check_for_new_data+0x22>
 800bb98:	685c      	ldr	r4, [r3, #4]
 800bb9a:	4608      	mov	r0, r1
 800bb9c:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800bba0:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800bba4:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800bba8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800bbac:	9300      	str	r3, [sp, #0]
 800bbae:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800bbb2:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800bbb6:	f104 0110 	add.w	r1, r4, #16
 800bbba:	f006 fdbd 	bl	8012738 <rcl_action_client_wait_set_get_entities_ready>
 800bbbe:	e7e1      	b.n	800bb84 <_rclc_check_for_new_data+0x34>
 800bbc0:	685c      	ldr	r4, [r3, #4]
 800bbc2:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800bbc6:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800bbca:	e9cd 3200 	strd	r3, r2, [sp]
 800bbce:	4608      	mov	r0, r1
 800bbd0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800bbd4:	f104 0220 	add.w	r2, r4, #32
 800bbd8:	f104 0110 	add.w	r1, r4, #16
 800bbdc:	f006 ffc4 	bl	8012b68 <rcl_action_server_wait_set_get_entities_ready>
 800bbe0:	e7d0      	b.n	800bb84 <_rclc_check_for_new_data+0x34>
 800bbe2:	200b      	movs	r0, #11
 800bbe4:	4770      	bx	lr
 800bbe6:	2001      	movs	r0, #1
 800bbe8:	e7cc      	b.n	800bb84 <_rclc_check_for_new_data+0x34>
 800bbea:	bf00      	nop

0800bbec <_rclc_take_new_data>:
 800bbec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbee:	b09b      	sub	sp, #108	@ 0x6c
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	f000 8088 	beq.w	800bd06 <_rclc_take_new_data+0x11a>
 800bbf6:	7803      	ldrb	r3, [r0, #0]
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	2b0a      	cmp	r3, #10
 800bbfc:	f200 8167 	bhi.w	800bece <_rclc_take_new_data+0x2e2>
 800bc00:	e8df f003 	tbb	[pc, r3]
 800bc04:	44152d2d 	.word	0x44152d2d
 800bc08:	19191944 	.word	0x19191944
 800bc0c:	065a      	.short	0x065a
 800bc0e:	15          	.byte	0x15
 800bc0f:	00          	.byte	0x00
 800bc10:	6840      	ldr	r0, [r0, #4]
 800bc12:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f040 80b2 	bne.w	800bd80 <_rclc_take_new_data+0x194>
 800bc1c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	f040 80e4 	bne.w	800bdee <_rclc_take_new_data+0x202>
 800bc26:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d16f      	bne.n	800bd0e <_rclc_take_new_data+0x122>
 800bc2e:	2500      	movs	r5, #0
 800bc30:	4628      	mov	r0, r5
 800bc32:	b01b      	add	sp, #108	@ 0x6c
 800bc34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc36:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bc38:	6a0b      	ldr	r3, [r1, #32]
 800bc3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d0f5      	beq.n	800bc2e <_rclc_take_new_data+0x42>
 800bc42:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bc46:	f104 0110 	add.w	r1, r4, #16
 800bc4a:	f005 fa51 	bl	80110f0 <rcl_take_request>
 800bc4e:	4605      	mov	r5, r0
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d0ec      	beq.n	800bc2e <_rclc_take_new_data+0x42>
 800bc54:	f240 2359 	movw	r3, #601	@ 0x259
 800bc58:	4298      	cmp	r0, r3
 800bc5a:	d013      	beq.n	800bc84 <_rclc_take_new_data+0x98>
 800bc5c:	e029      	b.n	800bcb2 <_rclc_take_new_data+0xc6>
 800bc5e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bc60:	680b      	ldr	r3, [r1, #0]
 800bc62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d0e1      	beq.n	800bc2e <_rclc_take_new_data+0x42>
 800bc6a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800bc6e:	2300      	movs	r3, #0
 800bc70:	aa0a      	add	r2, sp, #40	@ 0x28
 800bc72:	f005 fb7b 	bl	801136c <rcl_take>
 800bc76:	4605      	mov	r5, r0
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d0d9      	beq.n	800bc30 <_rclc_take_new_data+0x44>
 800bc7c:	f240 1391 	movw	r3, #401	@ 0x191
 800bc80:	4298      	cmp	r0, r3
 800bc82:	d116      	bne.n	800bcb2 <_rclc_take_new_data+0xc6>
 800bc84:	2300      	movs	r3, #0
 800bc86:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800bc8a:	e7d1      	b.n	800bc30 <_rclc_take_new_data+0x44>
 800bc8c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bc8e:	698b      	ldr	r3, [r1, #24]
 800bc90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d0ca      	beq.n	800bc2e <_rclc_take_new_data+0x42>
 800bc98:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bc9c:	f104 0110 	add.w	r1, r4, #16
 800bca0:	f004 fbde 	bl	8010460 <rcl_take_response>
 800bca4:	4605      	mov	r5, r0
 800bca6:	2800      	cmp	r0, #0
 800bca8:	d0c1      	beq.n	800bc2e <_rclc_take_new_data+0x42>
 800bcaa:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800bcae:	4298      	cmp	r0, r3
 800bcb0:	d0be      	beq.n	800bc30 <_rclc_take_new_data+0x44>
 800bcb2:	f000 febd 	bl	800ca30 <rcutils_reset_error>
 800bcb6:	e7bb      	b.n	800bc30 <_rclc_take_new_data+0x44>
 800bcb8:	6840      	ldr	r0, [r0, #4]
 800bcba:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d17d      	bne.n	800bdbe <_rclc_take_new_data+0x1d2>
 800bcc2:	69c3      	ldr	r3, [r0, #28]
 800bcc4:	b11b      	cbz	r3, 800bcce <_rclc_take_new_data+0xe2>
 800bcc6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d144      	bne.n	800bd58 <_rclc_take_new_data+0x16c>
 800bcce:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f040 80ac 	bne.w	800be30 <_rclc_take_new_data+0x244>
 800bcd8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d0a6      	beq.n	800bc2e <_rclc_take_new_data+0x42>
 800bce0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800bce2:	a90a      	add	r1, sp, #40	@ 0x28
 800bce4:	3010      	adds	r0, #16
 800bce6:	f006 fbff 	bl	80124e8 <rcl_action_take_result_response>
 800bcea:	4605      	mov	r5, r0
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d1e0      	bne.n	800bcb2 <_rclc_take_new_data+0xc6>
 800bcf0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bcf4:	6860      	ldr	r0, [r4, #4]
 800bcf6:	f007 f85b 	bl	8012db0 <rclc_action_find_handle_by_result_request_sequence_number>
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d098      	beq.n	800bc30 <_rclc_take_new_data+0x44>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800bd04:	e794      	b.n	800bc30 <_rclc_take_new_data+0x44>
 800bd06:	250b      	movs	r5, #11
 800bd08:	4628      	mov	r0, r5
 800bd0a:	b01b      	add	sp, #108	@ 0x6c
 800bd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd0e:	ae04      	add	r6, sp, #16
 800bd10:	aa0a      	add	r2, sp, #40	@ 0x28
 800bd12:	3010      	adds	r0, #16
 800bd14:	4631      	mov	r1, r6
 800bd16:	f006 fe5b 	bl	80129d0 <rcl_action_take_cancel_request>
 800bd1a:	4605      	mov	r5, r0
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d1c8      	bne.n	800bcb2 <_rclc_take_new_data+0xc6>
 800bd20:	6860      	ldr	r0, [r4, #4]
 800bd22:	a90a      	add	r1, sp, #40	@ 0x28
 800bd24:	f007 f802 	bl	8012d2c <rclc_action_find_goal_handle_by_uuid>
 800bd28:	4607      	mov	r7, r0
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	f000 80bb 	beq.w	800bea6 <_rclc_take_new_data+0x2ba>
 800bd30:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800bd34:	2101      	movs	r1, #1
 800bd36:	f006 ff83 	bl	8012c40 <rcl_action_transition_goal_state>
 800bd3a:	2803      	cmp	r0, #3
 800bd3c:	4684      	mov	ip, r0
 800bd3e:	f040 80a7 	bne.w	800be90 <_rclc_take_new_data+0x2a4>
 800bd42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bd44:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800bd48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd4a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bd4e:	e884 0003 	stmia.w	r4, {r0, r1}
 800bd52:	f887 c008 	strb.w	ip, [r7, #8]
 800bd56:	e76b      	b.n	800bc30 <_rclc_take_new_data+0x44>
 800bd58:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800bd5a:	3010      	adds	r0, #16
 800bd5c:	f006 fc44 	bl	80125e8 <rcl_action_take_feedback>
 800bd60:	4605      	mov	r5, r0
 800bd62:	2800      	cmp	r0, #0
 800bd64:	d1a5      	bne.n	800bcb2 <_rclc_take_new_data+0xc6>
 800bd66:	6860      	ldr	r0, [r4, #4]
 800bd68:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800bd6a:	f006 ffdf 	bl	8012d2c <rclc_action_find_goal_handle_by_uuid>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2800      	cmp	r0, #0
 800bd72:	f000 80a3 	beq.w	800bebc <_rclc_take_new_data+0x2d0>
 800bd76:	2201      	movs	r2, #1
 800bd78:	6860      	ldr	r0, [r4, #4]
 800bd7a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800bd7e:	e7a6      	b.n	800bcce <_rclc_take_new_data+0xe2>
 800bd80:	f006 ffae 	bl	8012ce0 <rclc_action_take_goal_handle>
 800bd84:	4606      	mov	r6, r0
 800bd86:	6860      	ldr	r0, [r4, #4]
 800bd88:	2e00      	cmp	r6, #0
 800bd8a:	f43f af47 	beq.w	800bc1c <_rclc_take_new_data+0x30>
 800bd8e:	6070      	str	r0, [r6, #4]
 800bd90:	69f2      	ldr	r2, [r6, #28]
 800bd92:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800bd96:	3010      	adds	r0, #16
 800bd98:	f006 fd62 	bl	8012860 <rcl_action_take_goal_request>
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	f040 808e 	bne.w	800bec0 <_rclc_take_new_data+0x2d4>
 800bda4:	69f7      	ldr	r7, [r6, #28]
 800bda6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bda8:	7235      	strb	r5, [r6, #8]
 800bdaa:	f8c6 0009 	str.w	r0, [r6, #9]
 800bdae:	f8c6 100d 	str.w	r1, [r6, #13]
 800bdb2:	6860      	ldr	r0, [r4, #4]
 800bdb4:	f8c6 2011 	str.w	r2, [r6, #17]
 800bdb8:	f8c6 3015 	str.w	r3, [r6, #21]
 800bdbc:	e72e      	b.n	800bc1c <_rclc_take_new_data+0x30>
 800bdbe:	aa04      	add	r2, sp, #16
 800bdc0:	a90a      	add	r1, sp, #40	@ 0x28
 800bdc2:	3010      	adds	r0, #16
 800bdc4:	f006 fb18 	bl	80123f8 <rcl_action_take_goal_response>
 800bdc8:	4605      	mov	r5, r0
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	f47f af71 	bne.w	800bcb2 <_rclc_take_new_data+0xc6>
 800bdd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bdd4:	6860      	ldr	r0, [r4, #4]
 800bdd6:	f006 ffd9 	bl	8012d8c <rclc_action_find_handle_by_goal_request_sequence_number>
 800bdda:	b130      	cbz	r0, 800bdea <_rclc_take_new_data+0x1fe>
 800bddc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800bde0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800bde4:	2201      	movs	r2, #1
 800bde6:	f880 2020 	strb.w	r2, [r0, #32]
 800bdea:	6860      	ldr	r0, [r4, #4]
 800bdec:	e769      	b.n	800bcc2 <_rclc_take_new_data+0xd6>
 800bdee:	aa04      	add	r2, sp, #16
 800bdf0:	3010      	adds	r0, #16
 800bdf2:	a90a      	add	r1, sp, #40	@ 0x28
 800bdf4:	f006 fdac 	bl	8012950 <rcl_action_take_result_request>
 800bdf8:	4605      	mov	r5, r0
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	f47f af59 	bne.w	800bcb2 <_rclc_take_new_data+0xc6>
 800be00:	6860      	ldr	r0, [r4, #4]
 800be02:	a904      	add	r1, sp, #16
 800be04:	f006 ff92 	bl	8012d2c <rclc_action_find_goal_handle_by_uuid>
 800be08:	4607      	mov	r7, r0
 800be0a:	b160      	cbz	r0, 800be26 <_rclc_take_new_data+0x23a>
 800be0c:	ad0a      	add	r5, sp, #40	@ 0x28
 800be0e:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800be12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be14:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800be16:	e895 0003 	ldmia.w	r5, {r0, r1}
 800be1a:	f04f 0c02 	mov.w	ip, #2
 800be1e:	e886 0003 	stmia.w	r6, {r0, r1}
 800be22:	f887 c008 	strb.w	ip, [r7, #8]
 800be26:	6860      	ldr	r0, [r4, #4]
 800be28:	2300      	movs	r3, #0
 800be2a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800be2e:	e6fa      	b.n	800bc26 <_rclc_take_new_data+0x3a>
 800be30:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800be34:	a90a      	add	r1, sp, #40	@ 0x28
 800be36:	3010      	adds	r0, #16
 800be38:	f006 fb96 	bl	8012568 <rcl_action_take_cancel_response>
 800be3c:	4605      	mov	r5, r0
 800be3e:	2800      	cmp	r0, #0
 800be40:	f47f af37 	bne.w	800bcb2 <_rclc_take_new_data+0xc6>
 800be44:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800be48:	6860      	ldr	r0, [r4, #4]
 800be4a:	f006 ffc3 	bl	8012dd4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800be4e:	4606      	mov	r6, r0
 800be50:	6860      	ldr	r0, [r4, #4]
 800be52:	2e00      	cmp	r6, #0
 800be54:	f43f af40 	beq.w	800bcd8 <_rclc_take_new_data+0xec>
 800be58:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800be5a:	2701      	movs	r7, #1
 800be5c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f43f af3a 	beq.w	800bcd8 <_rclc_take_new_data+0xec>
 800be64:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800be66:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800be6a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800be6e:	f006 ff5d 	bl	8012d2c <rclc_action_find_goal_handle_by_uuid>
 800be72:	b138      	cbz	r0, 800be84 <_rclc_take_new_data+0x298>
 800be74:	6860      	ldr	r0, [r4, #4]
 800be76:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800be78:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800be7c:	3501      	adds	r5, #1
 800be7e:	42ab      	cmp	r3, r5
 800be80:	d8f0      	bhi.n	800be64 <_rclc_take_new_data+0x278>
 800be82:	e729      	b.n	800bcd8 <_rclc_take_new_data+0xec>
 800be84:	6860      	ldr	r0, [r4, #4]
 800be86:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800be88:	3501      	adds	r5, #1
 800be8a:	42ab      	cmp	r3, r5
 800be8c:	d8ea      	bhi.n	800be64 <_rclc_take_new_data+0x278>
 800be8e:	e723      	b.n	800bcd8 <_rclc_take_new_data+0xec>
 800be90:	ab06      	add	r3, sp, #24
 800be92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be94:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800be98:	2103      	movs	r1, #3
 800be9a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800be9e:	6860      	ldr	r0, [r4, #4]
 800bea0:	f007 f80e 	bl	8012ec0 <rclc_action_server_goal_cancel_reject>
 800bea4:	e6c4      	b.n	800bc30 <_rclc_take_new_data+0x44>
 800bea6:	ab06      	add	r3, sp, #24
 800bea8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800beaa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800beae:	2102      	movs	r1, #2
 800beb0:	e896 000c 	ldmia.w	r6, {r2, r3}
 800beb4:	6860      	ldr	r0, [r4, #4]
 800beb6:	f007 f803 	bl	8012ec0 <rclc_action_server_goal_cancel_reject>
 800beba:	e6b9      	b.n	800bc30 <_rclc_take_new_data+0x44>
 800bebc:	6860      	ldr	r0, [r4, #4]
 800bebe:	e706      	b.n	800bcce <_rclc_take_new_data+0xe2>
 800bec0:	6860      	ldr	r0, [r4, #4]
 800bec2:	4631      	mov	r1, r6
 800bec4:	f006 ff1c 	bl	8012d00 <rclc_action_remove_used_goal_handle>
 800bec8:	f000 fdb2 	bl	800ca30 <rcutils_reset_error>
 800becc:	e6b0      	b.n	800bc30 <_rclc_take_new_data+0x44>
 800bece:	2501      	movs	r5, #1
 800bed0:	e6ae      	b.n	800bc30 <_rclc_take_new_data+0x44>
 800bed2:	bf00      	nop

0800bed4 <_rclc_execute.part.0>:
 800bed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bed6:	7803      	ldrb	r3, [r0, #0]
 800bed8:	b087      	sub	sp, #28
 800beda:	4604      	mov	r4, r0
 800bedc:	2b0a      	cmp	r3, #10
 800bede:	f200 8136 	bhi.w	800c14e <_rclc_execute.part.0+0x27a>
 800bee2:	e8df f003 	tbb	[pc, r3]
 800bee6:	435e      	.short	0x435e
 800bee8:	06a1664f 	.word	0x06a1664f
 800beec:	6c1e0606 	.word	0x6c1e0606
 800bef0:	59          	.byte	0x59
 800bef1:	00          	.byte	0x00
 800bef2:	2b06      	cmp	r3, #6
 800bef4:	f000 8122 	beq.w	800c13c <_rclc_execute.part.0+0x268>
 800bef8:	2b07      	cmp	r3, #7
 800befa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800befc:	f040 8118 	bne.w	800c130 <_rclc_execute.part.0+0x25c>
 800bf00:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800bf04:	6880      	ldr	r0, [r0, #8]
 800bf06:	4798      	blx	r3
 800bf08:	f104 0110 	add.w	r1, r4, #16
 800bf0c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800bf0e:	6860      	ldr	r0, [r4, #4]
 800bf10:	f005 f92e 	bl	8011170 <rcl_send_response>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d033      	beq.n	800bf80 <_rclc_execute.part.0+0xac>
 800bf18:	9005      	str	r0, [sp, #20]
 800bf1a:	f000 fd89 	bl	800ca30 <rcutils_reset_error>
 800bf1e:	9805      	ldr	r0, [sp, #20]
 800bf20:	e02e      	b.n	800bf80 <_rclc_execute.part.0+0xac>
 800bf22:	6840      	ldr	r0, [r0, #4]
 800bf24:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f000 8086 	beq.w	800c03a <_rclc_execute.part.0+0x166>
 800bf2e:	2600      	movs	r6, #0
 800bf30:	2701      	movs	r7, #1
 800bf32:	e004      	b.n	800bf3e <_rclc_execute.part.0+0x6a>
 800bf34:	f006 feae 	bl	8012c94 <rclc_action_send_result_request>
 800bf38:	b998      	cbnz	r0, 800bf62 <_rclc_execute.part.0+0x8e>
 800bf3a:	722f      	strb	r7, [r5, #8]
 800bf3c:	6860      	ldr	r0, [r4, #4]
 800bf3e:	f006 ff5b 	bl	8012df8 <rclc_action_find_first_handle_with_goal_response>
 800bf42:	4605      	mov	r5, r0
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d077      	beq.n	800c038 <_rclc_execute.part.0+0x164>
 800bf48:	6863      	ldr	r3, [r4, #4]
 800bf4a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800bf52:	f885 6020 	strb.w	r6, [r5, #32]
 800bf56:	4798      	blx	r3
 800bf58:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d1e8      	bne.n	800bf34 <_rclc_execute.part.0+0x60>
 800bf62:	6860      	ldr	r0, [r4, #4]
 800bf64:	4629      	mov	r1, r5
 800bf66:	f006 fecb 	bl	8012d00 <rclc_action_remove_used_goal_handle>
 800bf6a:	e7e7      	b.n	800bf3c <_rclc_execute.part.0+0x68>
 800bf6c:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800bf70:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800bf74:	2d00      	cmp	r5, #0
 800bf76:	f000 80c9 	beq.w	800c10c <_rclc_execute.part.0+0x238>
 800bf7a:	6880      	ldr	r0, [r0, #8]
 800bf7c:	4798      	blx	r3
 800bf7e:	2000      	movs	r0, #0
 800bf80:	b007      	add	sp, #28
 800bf82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf84:	6840      	ldr	r0, [r0, #4]
 800bf86:	f005 faf5 	bl	8011574 <rcl_timer_call>
 800bf8a:	f240 3321 	movw	r3, #801	@ 0x321
 800bf8e:	4298      	cmp	r0, r3
 800bf90:	d004      	beq.n	800bf9c <_rclc_execute.part.0+0xc8>
 800bf92:	2800      	cmp	r0, #0
 800bf94:	d0f4      	beq.n	800bf80 <_rclc_execute.part.0+0xac>
 800bf96:	e7bf      	b.n	800bf18 <_rclc_execute.part.0+0x44>
 800bf98:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bf9a:	4798      	blx	r3
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	b007      	add	sp, #28
 800bfa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfa2:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800bfa6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bfa8:	b925      	cbnz	r5, 800bfb4 <_rclc_execute.part.0+0xe0>
 800bfaa:	4628      	mov	r0, r5
 800bfac:	4798      	blx	r3
 800bfae:	4628      	mov	r0, r5
 800bfb0:	e7e6      	b.n	800bf80 <_rclc_execute.part.0+0xac>
 800bfb2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bfb4:	68a0      	ldr	r0, [r4, #8]
 800bfb6:	4798      	blx	r3
 800bfb8:	2000      	movs	r0, #0
 800bfba:	b007      	add	sp, #28
 800bfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfbe:	6840      	ldr	r0, [r0, #4]
 800bfc0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800bfc4:	bb3b      	cbnz	r3, 800c016 <_rclc_execute.part.0+0x142>
 800bfc6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d07b      	beq.n	800c0c6 <_rclc_execute.part.0+0x1f2>
 800bfce:	f640 0634 	movw	r6, #2100	@ 0x834
 800bfd2:	2701      	movs	r7, #1
 800bfd4:	e007      	b.n	800bfe6 <_rclc_execute.part.0+0x112>
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	f006 ff26 	bl	8012e28 <rclc_action_server_response_goal_request>
 800bfdc:	6860      	ldr	r0, [r4, #4]
 800bfde:	4629      	mov	r1, r5
 800bfe0:	f006 fe8e 	bl	8012d00 <rclc_action_remove_used_goal_handle>
 800bfe4:	6860      	ldr	r0, [r4, #4]
 800bfe6:	2100      	movs	r1, #0
 800bfe8:	f006 feb8 	bl	8012d5c <rclc_action_find_first_handle_by_status>
 800bfec:	4605      	mov	r5, r0
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d066      	beq.n	800c0c0 <_rclc_execute.part.0+0x1ec>
 800bff2:	6863      	ldr	r3, [r4, #4]
 800bff4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bff6:	699b      	ldr	r3, [r3, #24]
 800bff8:	4798      	blx	r3
 800bffa:	42b0      	cmp	r0, r6
 800bffc:	f04f 0100 	mov.w	r1, #0
 800c000:	d1e9      	bne.n	800bfd6 <_rclc_execute.part.0+0x102>
 800c002:	2101      	movs	r1, #1
 800c004:	4628      	mov	r0, r5
 800c006:	f006 ff0f 	bl	8012e28 <rclc_action_server_response_goal_request>
 800c00a:	722f      	strb	r7, [r5, #8]
 800c00c:	e7ea      	b.n	800bfe4 <_rclc_execute.part.0+0x110>
 800c00e:	6848      	ldr	r0, [r1, #4]
 800c010:	f006 fe76 	bl	8012d00 <rclc_action_remove_used_goal_handle>
 800c014:	6860      	ldr	r0, [r4, #4]
 800c016:	f006 fead 	bl	8012d74 <rclc_action_find_first_terminated_handle>
 800c01a:	4601      	mov	r1, r0
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d1f6      	bne.n	800c00e <_rclc_execute.part.0+0x13a>
 800c020:	6860      	ldr	r0, [r4, #4]
 800c022:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c026:	e7ce      	b.n	800bfc6 <_rclc_execute.part.0+0xf2>
 800c028:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c02a:	6880      	ldr	r0, [r0, #8]
 800c02c:	f104 0110 	add.w	r1, r4, #16
 800c030:	4798      	blx	r3
 800c032:	2000      	movs	r0, #0
 800c034:	b007      	add	sp, #28
 800c036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c038:	6860      	ldr	r0, [r4, #4]
 800c03a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c03e:	b18b      	cbz	r3, 800c064 <_rclc_execute.part.0+0x190>
 800c040:	68c5      	ldr	r5, [r0, #12]
 800c042:	b32d      	cbz	r5, 800c090 <_rclc_execute.part.0+0x1bc>
 800c044:	2600      	movs	r6, #0
 800c046:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c04a:	b143      	cbz	r3, 800c05e <_rclc_execute.part.0+0x18a>
 800c04c:	69c3      	ldr	r3, [r0, #28]
 800c04e:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c052:	b123      	cbz	r3, 800c05e <_rclc_execute.part.0+0x18a>
 800c054:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c056:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c058:	4628      	mov	r0, r5
 800c05a:	4798      	blx	r3
 800c05c:	6860      	ldr	r0, [r4, #4]
 800c05e:	682d      	ldr	r5, [r5, #0]
 800c060:	2d00      	cmp	r5, #0
 800c062:	d1f0      	bne.n	800c046 <_rclc_execute.part.0+0x172>
 800c064:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c068:	b193      	cbz	r3, 800c090 <_rclc_execute.part.0+0x1bc>
 800c06a:	68c5      	ldr	r5, [r0, #12]
 800c06c:	b185      	cbz	r5, 800c090 <_rclc_execute.part.0+0x1bc>
 800c06e:	2600      	movs	r6, #0
 800c070:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c074:	b14b      	cbz	r3, 800c08a <_rclc_execute.part.0+0x1b6>
 800c076:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c078:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c07c:	b12b      	cbz	r3, 800c08a <_rclc_execute.part.0+0x1b6>
 800c07e:	4628      	mov	r0, r5
 800c080:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c084:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c086:	4798      	blx	r3
 800c088:	6860      	ldr	r0, [r4, #4]
 800c08a:	682d      	ldr	r5, [r5, #0]
 800c08c:	2d00      	cmp	r5, #0
 800c08e:	d1ef      	bne.n	800c070 <_rclc_execute.part.0+0x19c>
 800c090:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c094:	2b00      	cmp	r3, #0
 800c096:	d081      	beq.n	800bf9c <_rclc_execute.part.0+0xc8>
 800c098:	2700      	movs	r7, #0
 800c09a:	e00b      	b.n	800c0b4 <_rclc_execute.part.0+0x1e0>
 800c09c:	6863      	ldr	r3, [r4, #4]
 800c09e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c0a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c0a2:	6a1e      	ldr	r6, [r3, #32]
 800c0a4:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c0a8:	47b0      	blx	r6
 800c0aa:	6860      	ldr	r0, [r4, #4]
 800c0ac:	4629      	mov	r1, r5
 800c0ae:	f006 fe27 	bl	8012d00 <rclc_action_remove_used_goal_handle>
 800c0b2:	6860      	ldr	r0, [r4, #4]
 800c0b4:	f006 feac 	bl	8012e10 <rclc_action_find_first_handle_with_result_response>
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	d1ee      	bne.n	800c09c <_rclc_execute.part.0+0x1c8>
 800c0be:	e76d      	b.n	800bf9c <_rclc_execute.part.0+0xc8>
 800c0c0:	6860      	ldr	r0, [r4, #4]
 800c0c2:	f880 5020 	strb.w	r5, [r0, #32]
 800c0c6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f43f af66 	beq.w	800bf9c <_rclc_execute.part.0+0xc8>
 800c0d0:	68c5      	ldr	r5, [r0, #12]
 800c0d2:	b1b5      	cbz	r5, 800c102 <_rclc_execute.part.0+0x22e>
 800c0d4:	2602      	movs	r6, #2
 800c0d6:	e001      	b.n	800c0dc <_rclc_execute.part.0+0x208>
 800c0d8:	682d      	ldr	r5, [r5, #0]
 800c0da:	b195      	cbz	r5, 800c102 <_rclc_execute.part.0+0x22e>
 800c0dc:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c0e0:	2b03      	cmp	r3, #3
 800c0e2:	d1f9      	bne.n	800c0d8 <_rclc_execute.part.0+0x204>
 800c0e4:	69c3      	ldr	r3, [r0, #28]
 800c0e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	4798      	blx	r3
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c0f8:	b163      	cbz	r3, 800c114 <_rclc_execute.part.0+0x240>
 800c0fa:	f006 feb5 	bl	8012e68 <rclc_action_server_goal_cancel_accept>
 800c0fe:	6860      	ldr	r0, [r4, #4]
 800c100:	e7ea      	b.n	800c0d8 <_rclc_execute.part.0+0x204>
 800c102:	2300      	movs	r3, #0
 800c104:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c108:	4618      	mov	r0, r3
 800c10a:	e739      	b.n	800bf80 <_rclc_execute.part.0+0xac>
 800c10c:	4628      	mov	r0, r5
 800c10e:	4798      	blx	r3
 800c110:	4628      	mov	r0, r5
 800c112:	e735      	b.n	800bf80 <_rclc_execute.part.0+0xac>
 800c114:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c116:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c11a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c11e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c122:	6860      	ldr	r0, [r4, #4]
 800c124:	2101      	movs	r1, #1
 800c126:	f006 fecb 	bl	8012ec0 <rclc_action_server_goal_cancel_reject>
 800c12a:	722e      	strb	r6, [r5, #8]
 800c12c:	6860      	ldr	r0, [r4, #4]
 800c12e:	e7d3      	b.n	800c0d8 <_rclc_execute.part.0+0x204>
 800c130:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c132:	6880      	ldr	r0, [r0, #8]
 800c134:	4798      	blx	r3
 800c136:	f104 0110 	add.w	r1, r4, #16
 800c13a:	e6e7      	b.n	800bf0c <_rclc_execute.part.0+0x38>
 800c13c:	f100 0110 	add.w	r1, r0, #16
 800c140:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c142:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c144:	6880      	ldr	r0, [r0, #8]
 800c146:	9105      	str	r1, [sp, #20]
 800c148:	4798      	blx	r3
 800c14a:	9905      	ldr	r1, [sp, #20]
 800c14c:	e6de      	b.n	800bf0c <_rclc_execute.part.0+0x38>
 800c14e:	2001      	movs	r0, #1
 800c150:	e716      	b.n	800bf80 <_rclc_execute.part.0+0xac>
 800c152:	bf00      	nop

0800c154 <rclc_executor_trigger_any>:
 800c154:	2800      	cmp	r0, #0
 800c156:	d03f      	beq.n	800c1d8 <rclc_executor_trigger_any+0x84>
 800c158:	2900      	cmp	r1, #0
 800c15a:	d03e      	beq.n	800c1da <rclc_executor_trigger_any+0x86>
 800c15c:	4603      	mov	r3, r0
 800c15e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c162:	2200      	movs	r2, #0
 800c164:	2800      	cmp	r0, #0
 800c166:	d037      	beq.n	800c1d8 <rclc_executor_trigger_any+0x84>
 800c168:	b430      	push	{r4, r5}
 800c16a:	f893 c000 	ldrb.w	ip, [r3]
 800c16e:	f1bc 0f08 	cmp.w	ip, #8
 800c172:	d11e      	bne.n	800c1b2 <rclc_executor_trigger_any+0x5e>
 800c174:	685c      	ldr	r4, [r3, #4]
 800c176:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c178:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c17c:	d105      	bne.n	800c18a <rclc_executor_trigger_any+0x36>
 800c17e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c182:	b910      	cbnz	r0, 800c18a <rclc_executor_trigger_any+0x36>
 800c184:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c188:	b128      	cbz	r0, 800c196 <rclc_executor_trigger_any+0x42>
 800c18a:	bc30      	pop	{r4, r5}
 800c18c:	4770      	bx	lr
 800c18e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c192:	2800      	cmp	r0, #0
 800c194:	d1f9      	bne.n	800c18a <rclc_executor_trigger_any+0x36>
 800c196:	3201      	adds	r2, #1
 800c198:	4291      	cmp	r1, r2
 800c19a:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c19e:	d018      	beq.n	800c1d2 <rclc_executor_trigger_any+0x7e>
 800c1a0:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	d0f0      	beq.n	800c18a <rclc_executor_trigger_any+0x36>
 800c1a8:	f893 c000 	ldrb.w	ip, [r3]
 800c1ac:	f1bc 0f08 	cmp.w	ip, #8
 800c1b0:	d0e0      	beq.n	800c174 <rclc_executor_trigger_any+0x20>
 800c1b2:	f1bc 0f09 	cmp.w	ip, #9
 800c1b6:	d1ea      	bne.n	800c18e <rclc_executor_trigger_any+0x3a>
 800c1b8:	685c      	ldr	r4, [r3, #4]
 800c1ba:	6a25      	ldr	r5, [r4, #32]
 800c1bc:	2d00      	cmp	r5, #0
 800c1be:	d1e4      	bne.n	800c18a <rclc_executor_trigger_any+0x36>
 800c1c0:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	d1e0      	bne.n	800c18a <rclc_executor_trigger_any+0x36>
 800c1c8:	3201      	adds	r2, #1
 800c1ca:	4291      	cmp	r1, r2
 800c1cc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c1d0:	d1e6      	bne.n	800c1a0 <rclc_executor_trigger_any+0x4c>
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	bc30      	pop	{r4, r5}
 800c1d6:	4770      	bx	lr
 800c1d8:	4770      	bx	lr
 800c1da:	4608      	mov	r0, r1
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop

0800c1e0 <rclc_executor_get_zero_initialized_executor>:
 800c1e0:	b510      	push	{r4, lr}
 800c1e2:	4903      	ldr	r1, [pc, #12]	@ (800c1f0 <rclc_executor_get_zero_initialized_executor+0x10>)
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	2288      	movs	r2, #136	@ 0x88
 800c1e8:	f00b fbcb 	bl	8017982 <memcpy>
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	bd10      	pop	{r4, pc}
 800c1f0:	08018ab0 	.word	0x08018ab0
 800c1f4:	00000000 	.word	0x00000000

0800c1f8 <rclc_executor_init>:
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d05f      	beq.n	800c2bc <rclc_executor_init+0xc4>
 800c1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c200:	460c      	mov	r4, r1
 800c202:	b0b0      	sub	sp, #192	@ 0xc0
 800c204:	2900      	cmp	r1, #0
 800c206:	d051      	beq.n	800c2ac <rclc_executor_init+0xb4>
 800c208:	4605      	mov	r5, r0
 800c20a:	4618      	mov	r0, r3
 800c20c:	4616      	mov	r6, r2
 800c20e:	461f      	mov	r7, r3
 800c210:	f000 fbea 	bl	800c9e8 <rcutils_allocator_is_valid>
 800c214:	2800      	cmp	r0, #0
 800c216:	d049      	beq.n	800c2ac <rclc_executor_init+0xb4>
 800c218:	2e00      	cmp	r6, #0
 800c21a:	d047      	beq.n	800c2ac <rclc_executor_init+0xb4>
 800c21c:	492c      	ldr	r1, [pc, #176]	@ (800c2d0 <rclc_executor_init+0xd8>)
 800c21e:	2288      	movs	r2, #136	@ 0x88
 800c220:	a80e      	add	r0, sp, #56	@ 0x38
 800c222:	f00b fbae 	bl	8017982 <memcpy>
 800c226:	a90e      	add	r1, sp, #56	@ 0x38
 800c228:	2288      	movs	r2, #136	@ 0x88
 800c22a:	4628      	mov	r0, r5
 800c22c:	f00b fba9 	bl	8017982 <memcpy>
 800c230:	602c      	str	r4, [r5, #0]
 800c232:	4668      	mov	r0, sp
 800c234:	60ae      	str	r6, [r5, #8]
 800c236:	466c      	mov	r4, sp
 800c238:	f005 fb0e 	bl	8011858 <rcl_get_zero_initialized_wait_set>
 800c23c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c23e:	f105 0c14 	add.w	ip, r5, #20
 800c242:	f8d7 8000 	ldr.w	r8, [r7]
 800c246:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c24a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c24c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c252:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c256:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c2c8 <rclc_executor_init+0xd0>
 800c25a:	6823      	ldr	r3, [r4, #0]
 800c25c:	f8cc 3000 	str.w	r3, [ip]
 800c260:	6939      	ldr	r1, [r7, #16]
 800c262:	612f      	str	r7, [r5, #16]
 800c264:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c268:	01b0      	lsls	r0, r6, #6
 800c26a:	47c0      	blx	r8
 800c26c:	6068      	str	r0, [r5, #4]
 800c26e:	b338      	cbz	r0, 800c2c0 <rclc_executor_init+0xc8>
 800c270:	2400      	movs	r4, #0
 800c272:	e000      	b.n	800c276 <rclc_executor_init+0x7e>
 800c274:	6868      	ldr	r0, [r5, #4]
 800c276:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c27a:	4631      	mov	r1, r6
 800c27c:	3401      	adds	r4, #1
 800c27e:	f000 fa6b 	bl	800c758 <rclc_executor_handle_init>
 800c282:	42a6      	cmp	r6, r4
 800c284:	d1f6      	bne.n	800c274 <rclc_executor_init+0x7c>
 800c286:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c28a:	f000 fa5b 	bl	800c744 <rclc_executor_handle_counters_zero_init>
 800c28e:	4a11      	ldr	r2, [pc, #68]	@ (800c2d4 <rclc_executor_init+0xdc>)
 800c290:	686b      	ldr	r3, [r5, #4]
 800c292:	2000      	movs	r0, #0
 800c294:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c298:	b163      	cbz	r3, 800c2b4 <rclc_executor_init+0xbc>
 800c29a:	692b      	ldr	r3, [r5, #16]
 800c29c:	b153      	cbz	r3, 800c2b4 <rclc_executor_init+0xbc>
 800c29e:	68ab      	ldr	r3, [r5, #8]
 800c2a0:	b143      	cbz	r3, 800c2b4 <rclc_executor_init+0xbc>
 800c2a2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c2a6:	b030      	add	sp, #192	@ 0xc0
 800c2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ac:	200b      	movs	r0, #11
 800c2ae:	b030      	add	sp, #192	@ 0xc0
 800c2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	b030      	add	sp, #192	@ 0xc0
 800c2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2bc:	200b      	movs	r0, #11
 800c2be:	4770      	bx	lr
 800c2c0:	200a      	movs	r0, #10
 800c2c2:	e7f4      	b.n	800c2ae <rclc_executor_init+0xb6>
 800c2c4:	f3af 8000 	nop.w
 800c2c8:	3b9aca00 	.word	0x3b9aca00
 800c2cc:	00000000 	.word	0x00000000
 800c2d0:	08018ab0 	.word	0x08018ab0
 800c2d4:	0800c155 	.word	0x0800c155

0800c2d8 <rclc_executor_add_subscription>:
 800c2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2da:	f89d e018 	ldrb.w	lr, [sp, #24]
 800c2de:	b338      	cbz	r0, 800c330 <rclc_executor_add_subscription+0x58>
 800c2e0:	b331      	cbz	r1, 800c330 <rclc_executor_add_subscription+0x58>
 800c2e2:	b32a      	cbz	r2, 800c330 <rclc_executor_add_subscription+0x58>
 800c2e4:	b323      	cbz	r3, 800c330 <rclc_executor_add_subscription+0x58>
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800c2ec:	42a8      	cmp	r0, r5
 800c2ee:	d301      	bcc.n	800c2f4 <rclc_executor_add_subscription+0x1c>
 800c2f0:	2001      	movs	r0, #1
 800c2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2f4:	6866      	ldr	r6, [r4, #4]
 800c2f6:	0187      	lsls	r7, r0, #6
 800c2f8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800c2fc:	2500      	movs	r5, #0
 800c2fe:	55f5      	strb	r5, [r6, r7]
 800c300:	3001      	adds	r0, #1
 800c302:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800c306:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800c30a:	2301      	movs	r3, #1
 800c30c:	f104 0514 	add.w	r5, r4, #20
 800c310:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c314:	f88c e001 	strb.w	lr, [ip, #1]
 800c318:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800c31c:	60e0      	str	r0, [r4, #12]
 800c31e:	4628      	mov	r0, r5
 800c320:	f005 faae 	bl	8011880 <rcl_wait_set_is_valid>
 800c324:	b930      	cbnz	r0, 800c334 <rclc_executor_add_subscription+0x5c>
 800c326:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800c328:	3301      	adds	r3, #1
 800c32a:	2000      	movs	r0, #0
 800c32c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800c32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c330:	200b      	movs	r0, #11
 800c332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c334:	4628      	mov	r0, r5
 800c336:	f005 faa9 	bl	801188c <rcl_wait_set_fini>
 800c33a:	2800      	cmp	r0, #0
 800c33c:	d0f3      	beq.n	800c326 <rclc_executor_add_subscription+0x4e>
 800c33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c340 <rclc_executor_prepare>:
 800c340:	2800      	cmp	r0, #0
 800c342:	d044      	beq.n	800c3ce <rclc_executor_prepare+0x8e>
 800c344:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c346:	f100 0514 	add.w	r5, r0, #20
 800c34a:	b09b      	sub	sp, #108	@ 0x6c
 800c34c:	4604      	mov	r4, r0
 800c34e:	4628      	mov	r0, r5
 800c350:	f005 fa96 	bl	8011880 <rcl_wait_set_is_valid>
 800c354:	b110      	cbz	r0, 800c35c <rclc_executor_prepare+0x1c>
 800c356:	2000      	movs	r0, #0
 800c358:	b01b      	add	sp, #108	@ 0x6c
 800c35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c35c:	4628      	mov	r0, r5
 800c35e:	f005 fa95 	bl	801188c <rcl_wait_set_fini>
 800c362:	2800      	cmp	r0, #0
 800c364:	d130      	bne.n	800c3c8 <rclc_executor_prepare+0x88>
 800c366:	a80c      	add	r0, sp, #48	@ 0x30
 800c368:	f005 fa76 	bl	8011858 <rcl_get_zero_initialized_wait_set>
 800c36c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800c370:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c374:	46ae      	mov	lr, r5
 800c376:	6927      	ldr	r7, [r4, #16]
 800c378:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c37c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c380:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c384:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c388:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c38c:	f8dc 3000 	ldr.w	r3, [ip]
 800c390:	f8ce 3000 	str.w	r3, [lr]
 800c394:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c396:	ae04      	add	r6, sp, #16
 800c398:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	6822      	ldr	r2, [r4, #0]
 800c39e:	6033      	str	r3, [r6, #0]
 800c3a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c3a2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c3a4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c3a8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800c3ac:	e9cd 2100 	strd	r2, r1, [sp]
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800c3b4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c3b6:	f005 fd67 	bl	8011e88 <rcl_wait_set_init>
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	d0cc      	beq.n	800c358 <rclc_executor_prepare+0x18>
 800c3be:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c3c0:	f000 fb36 	bl	800ca30 <rcutils_reset_error>
 800c3c4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c3c6:	e7c7      	b.n	800c358 <rclc_executor_prepare+0x18>
 800c3c8:	f000 fb32 	bl	800ca30 <rcutils_reset_error>
 800c3cc:	e7cb      	b.n	800c366 <rclc_executor_prepare+0x26>
 800c3ce:	200b      	movs	r0, #11
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop

0800c3d4 <rclc_executor_spin_some.part.0>:
 800c3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d8:	f100 0614 	add.w	r6, r0, #20
 800c3dc:	b083      	sub	sp, #12
 800c3de:	4691      	mov	r9, r2
 800c3e0:	4698      	mov	r8, r3
 800c3e2:	4605      	mov	r5, r0
 800c3e4:	f7ff ffac 	bl	800c340 <rclc_executor_prepare>
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	f005 fb1b 	bl	8011a24 <rcl_wait_set_clear>
 800c3ee:	4607      	mov	r7, r0
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	f040 80ed 	bne.w	800c5d0 <rclc_executor_spin_some.part.0+0x1fc>
 800c3f6:	68ab      	ldr	r3, [r5, #8]
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	b303      	cbz	r3, 800c43e <rclc_executor_spin_some.part.0+0x6a>
 800c3fc:	6869      	ldr	r1, [r5, #4]
 800c3fe:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800c402:	01a2      	lsls	r2, r4, #6
 800c404:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800c408:	b1cb      	cbz	r3, 800c43e <rclc_executor_spin_some.part.0+0x6a>
 800c40a:	5c8b      	ldrb	r3, [r1, r2]
 800c40c:	2b0a      	cmp	r3, #10
 800c40e:	f200 80d8 	bhi.w	800c5c2 <rclc_executor_spin_some.part.0+0x1ee>
 800c412:	e8df f003 	tbb	[pc, r3]
 800c416:	9c9c      	.short	0x9c9c
 800c418:	068c8ca7 	.word	0x068c8ca7
 800c41c:	bdc90606 	.word	0xbdc90606
 800c420:	b2          	.byte	0xb2
 800c421:	00          	.byte	0x00
 800c422:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c426:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c42a:	4630      	mov	r0, r6
 800c42c:	f005 fe42 	bl	80120b4 <rcl_wait_set_add_service>
 800c430:	2800      	cmp	r0, #0
 800c432:	f040 8086 	bne.w	800c542 <rclc_executor_spin_some.part.0+0x16e>
 800c436:	68ab      	ldr	r3, [r5, #8]
 800c438:	3401      	adds	r4, #1
 800c43a:	429c      	cmp	r4, r3
 800c43c:	d3de      	bcc.n	800c3fc <rclc_executor_spin_some.part.0+0x28>
 800c43e:	4643      	mov	r3, r8
 800c440:	464a      	mov	r2, r9
 800c442:	4630      	mov	r0, r6
 800c444:	f005 fe64 	bl	8012110 <rcl_wait>
 800c448:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f000 80c7 	beq.w	800c5e0 <rclc_executor_spin_some.part.0+0x20c>
 800c452:	2b01      	cmp	r3, #1
 800c454:	f040 80b5 	bne.w	800c5c2 <rclc_executor_spin_some.part.0+0x1ee>
 800c458:	68ab      	ldr	r3, [r5, #8]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f000 8159 	beq.w	800c712 <rclc_executor_spin_some.part.0+0x33e>
 800c460:	2400      	movs	r4, #0
 800c462:	46a0      	mov	r8, r4
 800c464:	f240 1991 	movw	r9, #401	@ 0x191
 800c468:	e00a      	b.n	800c480 <rclc_executor_spin_some.part.0+0xac>
 800c46a:	f7ff fb71 	bl	800bb50 <_rclc_check_for_new_data>
 800c46e:	4604      	mov	r4, r0
 800c470:	b110      	cbz	r0, 800c478 <rclc_executor_spin_some.part.0+0xa4>
 800c472:	4548      	cmp	r0, r9
 800c474:	f040 80b2 	bne.w	800c5dc <rclc_executor_spin_some.part.0+0x208>
 800c478:	68ab      	ldr	r3, [r5, #8]
 800c47a:	4598      	cmp	r8, r3
 800c47c:	f080 8126 	bcs.w	800c6cc <rclc_executor_spin_some.part.0+0x2f8>
 800c480:	686a      	ldr	r2, [r5, #4]
 800c482:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c486:	4631      	mov	r1, r6
 800c488:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c48c:	f108 0801 	add.w	r8, r8, #1
 800c490:	f1bc 0f00 	cmp.w	ip, #0
 800c494:	d1e9      	bne.n	800c46a <rclc_executor_spin_some.part.0+0x96>
 800c496:	4619      	mov	r1, r3
 800c498:	4610      	mov	r0, r2
 800c49a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c49e:	4798      	blx	r3
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	f000 809b 	beq.w	800c5dc <rclc_executor_spin_some.part.0+0x208>
 800c4a6:	68ab      	ldr	r3, [r5, #8]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f000 8097 	beq.w	800c5dc <rclc_executor_spin_some.part.0+0x208>
 800c4ae:	f04f 0800 	mov.w	r8, #0
 800c4b2:	f240 1991 	movw	r9, #401	@ 0x191
 800c4b6:	e009      	b.n	800c4cc <rclc_executor_spin_some.part.0+0xf8>
 800c4b8:	f7ff fb98 	bl	800bbec <_rclc_take_new_data>
 800c4bc:	4604      	mov	r4, r0
 800c4be:	b110      	cbz	r0, 800c4c6 <rclc_executor_spin_some.part.0+0xf2>
 800c4c0:	4548      	cmp	r0, r9
 800c4c2:	f040 808b 	bne.w	800c5dc <rclc_executor_spin_some.part.0+0x208>
 800c4c6:	68ab      	ldr	r3, [r5, #8]
 800c4c8:	4598      	cmp	r8, r3
 800c4ca:	d209      	bcs.n	800c4e0 <rclc_executor_spin_some.part.0+0x10c>
 800c4cc:	6868      	ldr	r0, [r5, #4]
 800c4ce:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c4d2:	4631      	mov	r1, r6
 800c4d4:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800c4d8:	f108 0801 	add.w	r8, r8, #1
 800c4dc:	2a00      	cmp	r2, #0
 800c4de:	d1eb      	bne.n	800c4b8 <rclc_executor_spin_some.part.0+0xe4>
 800c4e0:	2600      	movs	r6, #0
 800c4e2:	b97b      	cbnz	r3, 800c504 <rclc_executor_spin_some.part.0+0x130>
 800c4e4:	e07a      	b.n	800c5dc <rclc_executor_spin_some.part.0+0x208>
 800c4e6:	f812 200c 	ldrb.w	r2, [r2, ip]
 800c4ea:	2a08      	cmp	r2, #8
 800c4ec:	f000 80fd 	beq.w	800c6ea <rclc_executor_spin_some.part.0+0x316>
 800c4f0:	2a09      	cmp	r2, #9
 800c4f2:	f000 80ef 	beq.w	800c6d4 <rclc_executor_spin_some.part.0+0x300>
 800c4f6:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800c4fa:	b98a      	cbnz	r2, 800c520 <rclc_executor_spin_some.part.0+0x14c>
 800c4fc:	3601      	adds	r6, #1
 800c4fe:	429e      	cmp	r6, r3
 800c500:	d262      	bcs.n	800c5c8 <rclc_executor_spin_some.part.0+0x1f4>
 800c502:	2400      	movs	r4, #0
 800c504:	686a      	ldr	r2, [r5, #4]
 800c506:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800c50a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800c50e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800c512:	2900      	cmp	r1, #0
 800c514:	d062      	beq.n	800c5dc <rclc_executor_spin_some.part.0+0x208>
 800c516:	7841      	ldrb	r1, [r0, #1]
 800c518:	2900      	cmp	r1, #0
 800c51a:	d0e4      	beq.n	800c4e6 <rclc_executor_spin_some.part.0+0x112>
 800c51c:	2901      	cmp	r1, #1
 800c51e:	d1ed      	bne.n	800c4fc <rclc_executor_spin_some.part.0+0x128>
 800c520:	f7ff fcd8 	bl	800bed4 <_rclc_execute.part.0>
 800c524:	2800      	cmp	r0, #0
 800c526:	f040 80b6 	bne.w	800c696 <rclc_executor_spin_some.part.0+0x2c2>
 800c52a:	68ab      	ldr	r3, [r5, #8]
 800c52c:	e7e6      	b.n	800c4fc <rclc_executor_spin_some.part.0+0x128>
 800c52e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c532:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c536:	4630      	mov	r0, r6
 800c538:	f005 fd90 	bl	801205c <rcl_wait_set_add_client>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	f43f af7a 	beq.w	800c436 <rclc_executor_spin_some.part.0+0x62>
 800c542:	9001      	str	r0, [sp, #4]
 800c544:	f000 fa74 	bl	800ca30 <rcutils_reset_error>
 800c548:	9801      	ldr	r0, [sp, #4]
 800c54a:	4607      	mov	r7, r0
 800c54c:	e03c      	b.n	800c5c8 <rclc_executor_spin_some.part.0+0x1f4>
 800c54e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c552:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c556:	4630      	mov	r0, r6
 800c558:	f005 fa38 	bl	80119cc <rcl_wait_set_add_subscription>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	f43f af6a 	beq.w	800c436 <rclc_executor_spin_some.part.0+0x62>
 800c562:	e7ee      	b.n	800c542 <rclc_executor_spin_some.part.0+0x16e>
 800c564:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c568:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c56c:	4630      	mov	r0, r6
 800c56e:	f005 fd45 	bl	8011ffc <rcl_wait_set_add_timer>
 800c572:	2800      	cmp	r0, #0
 800c574:	f43f af5f 	beq.w	800c436 <rclc_executor_spin_some.part.0+0x62>
 800c578:	e7e3      	b.n	800c542 <rclc_executor_spin_some.part.0+0x16e>
 800c57a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c57e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c582:	4630      	mov	r0, r6
 800c584:	f005 fd0e 	bl	8011fa4 <rcl_wait_set_add_guard_condition>
 800c588:	2800      	cmp	r0, #0
 800c58a:	f43f af54 	beq.w	800c436 <rclc_executor_spin_some.part.0+0x62>
 800c58e:	e7d8      	b.n	800c542 <rclc_executor_spin_some.part.0+0x16e>
 800c590:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c594:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c598:	3110      	adds	r1, #16
 800c59a:	4630      	mov	r0, r6
 800c59c:	f006 fa90 	bl	8012ac0 <rcl_action_wait_set_add_action_server>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	f43f af48 	beq.w	800c436 <rclc_executor_spin_some.part.0+0x62>
 800c5a6:	e7cc      	b.n	800c542 <rclc_executor_spin_some.part.0+0x16e>
 800c5a8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c5ac:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c5b0:	3110      	adds	r1, #16
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	f006 f85b 	bl	8012670 <rcl_action_wait_set_add_action_client>
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	f43f af3b 	beq.w	800c436 <rclc_executor_spin_some.part.0+0x62>
 800c5c0:	e7bf      	b.n	800c542 <rclc_executor_spin_some.part.0+0x16e>
 800c5c2:	f000 fa35 	bl	800ca30 <rcutils_reset_error>
 800c5c6:	2701      	movs	r7, #1
 800c5c8:	4638      	mov	r0, r7
 800c5ca:	b003      	add	sp, #12
 800c5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d0:	f000 fa2e 	bl	800ca30 <rcutils_reset_error>
 800c5d4:	4638      	mov	r0, r7
 800c5d6:	b003      	add	sp, #12
 800c5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5dc:	4627      	mov	r7, r4
 800c5de:	e7f3      	b.n	800c5c8 <rclc_executor_spin_some.part.0+0x1f4>
 800c5e0:	68ab      	ldr	r3, [r5, #8]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f000 8092 	beq.w	800c70c <rclc_executor_spin_some.part.0+0x338>
 800c5e8:	2400      	movs	r4, #0
 800c5ea:	46a0      	mov	r8, r4
 800c5ec:	f240 1991 	movw	r9, #401	@ 0x191
 800c5f0:	e008      	b.n	800c604 <rclc_executor_spin_some.part.0+0x230>
 800c5f2:	f7ff faad 	bl	800bb50 <_rclc_check_for_new_data>
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	b108      	cbz	r0, 800c5fe <rclc_executor_spin_some.part.0+0x22a>
 800c5fa:	4548      	cmp	r0, r9
 800c5fc:	d1ee      	bne.n	800c5dc <rclc_executor_spin_some.part.0+0x208>
 800c5fe:	68ab      	ldr	r3, [r5, #8]
 800c600:	4598      	cmp	r8, r3
 800c602:	d265      	bcs.n	800c6d0 <rclc_executor_spin_some.part.0+0x2fc>
 800c604:	686a      	ldr	r2, [r5, #4]
 800c606:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c60a:	4631      	mov	r1, r6
 800c60c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c610:	f108 0801 	add.w	r8, r8, #1
 800c614:	f1bc 0f00 	cmp.w	ip, #0
 800c618:	d1eb      	bne.n	800c5f2 <rclc_executor_spin_some.part.0+0x21e>
 800c61a:	4619      	mov	r1, r3
 800c61c:	4610      	mov	r0, r2
 800c61e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c622:	4798      	blx	r3
 800c624:	2800      	cmp	r0, #0
 800c626:	d0d9      	beq.n	800c5dc <rclc_executor_spin_some.part.0+0x208>
 800c628:	68ab      	ldr	r3, [r5, #8]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d0d6      	beq.n	800c5dc <rclc_executor_spin_some.part.0+0x208>
 800c62e:	f04f 0800 	mov.w	r8, #0
 800c632:	f240 1991 	movw	r9, #401	@ 0x191
 800c636:	f240 2a59 	movw	sl, #601	@ 0x259
 800c63a:	e00e      	b.n	800c65a <rclc_executor_spin_some.part.0+0x286>
 800c63c:	f813 300b 	ldrb.w	r3, [r3, fp]
 800c640:	2b08      	cmp	r3, #8
 800c642:	d033      	beq.n	800c6ac <rclc_executor_spin_some.part.0+0x2d8>
 800c644:	2b09      	cmp	r3, #9
 800c646:	d028      	beq.n	800c69a <rclc_executor_spin_some.part.0+0x2c6>
 800c648:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800c64c:	b9fb      	cbnz	r3, 800c68e <rclc_executor_spin_some.part.0+0x2ba>
 800c64e:	68ab      	ldr	r3, [r5, #8]
 800c650:	f108 0801 	add.w	r8, r8, #1
 800c654:	4598      	cmp	r8, r3
 800c656:	d2b7      	bcs.n	800c5c8 <rclc_executor_spin_some.part.0+0x1f4>
 800c658:	2400      	movs	r4, #0
 800c65a:	6868      	ldr	r0, [r5, #4]
 800c65c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c660:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800c664:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d0b7      	beq.n	800c5dc <rclc_executor_spin_some.part.0+0x208>
 800c66c:	4631      	mov	r1, r6
 800c66e:	f7ff fabd 	bl	800bbec <_rclc_take_new_data>
 800c672:	b118      	cbz	r0, 800c67c <rclc_executor_spin_some.part.0+0x2a8>
 800c674:	4548      	cmp	r0, r9
 800c676:	d001      	beq.n	800c67c <rclc_executor_spin_some.part.0+0x2a8>
 800c678:	4550      	cmp	r0, sl
 800c67a:	d10c      	bne.n	800c696 <rclc_executor_spin_some.part.0+0x2c2>
 800c67c:	686b      	ldr	r3, [r5, #4]
 800c67e:	eb13 000b 	adds.w	r0, r3, fp
 800c682:	d021      	beq.n	800c6c8 <rclc_executor_spin_some.part.0+0x2f4>
 800c684:	7842      	ldrb	r2, [r0, #1]
 800c686:	2a00      	cmp	r2, #0
 800c688:	d0d8      	beq.n	800c63c <rclc_executor_spin_some.part.0+0x268>
 800c68a:	2a01      	cmp	r2, #1
 800c68c:	d1df      	bne.n	800c64e <rclc_executor_spin_some.part.0+0x27a>
 800c68e:	f7ff fc21 	bl	800bed4 <_rclc_execute.part.0>
 800c692:	2800      	cmp	r0, #0
 800c694:	d0db      	beq.n	800c64e <rclc_executor_spin_some.part.0+0x27a>
 800c696:	4607      	mov	r7, r0
 800c698:	e796      	b.n	800c5c8 <rclc_executor_spin_some.part.0+0x1f4>
 800c69a:	6843      	ldr	r3, [r0, #4]
 800c69c:	6a1a      	ldr	r2, [r3, #32]
 800c69e:	2a00      	cmp	r2, #0
 800c6a0:	d1f5      	bne.n	800c68e <rclc_executor_spin_some.part.0+0x2ba>
 800c6a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d0d1      	beq.n	800c64e <rclc_executor_spin_some.part.0+0x27a>
 800c6aa:	e7f0      	b.n	800c68e <rclc_executor_spin_some.part.0+0x2ba>
 800c6ac:	6843      	ldr	r3, [r0, #4]
 800c6ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c6b0:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800c6b4:	d1eb      	bne.n	800c68e <rclc_executor_spin_some.part.0+0x2ba>
 800c6b6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c6ba:	2a00      	cmp	r2, #0
 800c6bc:	d1e7      	bne.n	800c68e <rclc_executor_spin_some.part.0+0x2ba>
 800c6be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d0c3      	beq.n	800c64e <rclc_executor_spin_some.part.0+0x27a>
 800c6c6:	e7e2      	b.n	800c68e <rclc_executor_spin_some.part.0+0x2ba>
 800c6c8:	270b      	movs	r7, #11
 800c6ca:	e77d      	b.n	800c5c8 <rclc_executor_spin_some.part.0+0x1f4>
 800c6cc:	686a      	ldr	r2, [r5, #4]
 800c6ce:	e6e2      	b.n	800c496 <rclc_executor_spin_some.part.0+0xc2>
 800c6d0:	686a      	ldr	r2, [r5, #4]
 800c6d2:	e7a2      	b.n	800c61a <rclc_executor_spin_some.part.0+0x246>
 800c6d4:	6842      	ldr	r2, [r0, #4]
 800c6d6:	6a11      	ldr	r1, [r2, #32]
 800c6d8:	2900      	cmp	r1, #0
 800c6da:	f47f af21 	bne.w	800c520 <rclc_executor_spin_some.part.0+0x14c>
 800c6de:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800c6e2:	2a00      	cmp	r2, #0
 800c6e4:	f43f af0a 	beq.w	800c4fc <rclc_executor_spin_some.part.0+0x128>
 800c6e8:	e71a      	b.n	800c520 <rclc_executor_spin_some.part.0+0x14c>
 800c6ea:	6842      	ldr	r2, [r0, #4]
 800c6ec:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800c6ee:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800c6f2:	f47f af15 	bne.w	800c520 <rclc_executor_spin_some.part.0+0x14c>
 800c6f6:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800c6fa:	2900      	cmp	r1, #0
 800c6fc:	f47f af10 	bne.w	800c520 <rclc_executor_spin_some.part.0+0x14c>
 800c700:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800c704:	2a00      	cmp	r2, #0
 800c706:	f43f aef9 	beq.w	800c4fc <rclc_executor_spin_some.part.0+0x128>
 800c70a:	e709      	b.n	800c520 <rclc_executor_spin_some.part.0+0x14c>
 800c70c:	686a      	ldr	r2, [r5, #4]
 800c70e:	461c      	mov	r4, r3
 800c710:	e783      	b.n	800c61a <rclc_executor_spin_some.part.0+0x246>
 800c712:	686a      	ldr	r2, [r5, #4]
 800c714:	461c      	mov	r4, r3
 800c716:	e6be      	b.n	800c496 <rclc_executor_spin_some.part.0+0xc2>

0800c718 <rclc_executor_spin_some>:
 800c718:	b190      	cbz	r0, 800c740 <rclc_executor_spin_some+0x28>
 800c71a:	b570      	push	{r4, r5, r6, lr}
 800c71c:	4604      	mov	r4, r0
 800c71e:	6800      	ldr	r0, [r0, #0]
 800c720:	4616      	mov	r6, r2
 800c722:	461d      	mov	r5, r3
 800c724:	f003 ff0c 	bl	8010540 <rcl_context_is_valid>
 800c728:	b130      	cbz	r0, 800c738 <rclc_executor_spin_some+0x20>
 800c72a:	4632      	mov	r2, r6
 800c72c:	462b      	mov	r3, r5
 800c72e:	4620      	mov	r0, r4
 800c730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c734:	f7ff be4e 	b.w	800c3d4 <rclc_executor_spin_some.part.0>
 800c738:	f000 f97a 	bl	800ca30 <rcutils_reset_error>
 800c73c:	2001      	movs	r0, #1
 800c73e:	bd70      	pop	{r4, r5, r6, pc}
 800c740:	200b      	movs	r0, #11
 800c742:	4770      	bx	lr

0800c744 <rclc_executor_handle_counters_zero_init>:
 800c744:	b130      	cbz	r0, 800c754 <rclc_executor_handle_counters_zero_init+0x10>
 800c746:	b508      	push	{r3, lr}
 800c748:	2220      	movs	r2, #32
 800c74a:	2100      	movs	r1, #0
 800c74c:	f00b f850 	bl	80177f0 <memset>
 800c750:	2000      	movs	r0, #0
 800c752:	bd08      	pop	{r3, pc}
 800c754:	200b      	movs	r0, #11
 800c756:	4770      	bx	lr

0800c758 <rclc_executor_handle_init>:
 800c758:	b168      	cbz	r0, 800c776 <rclc_executor_handle_init+0x1e>
 800c75a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800c780 <rclc_executor_handle_init+0x28>
 800c75e:	2300      	movs	r3, #0
 800c760:	220b      	movs	r2, #11
 800c762:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800c766:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800c76a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800c76e:	8002      	strh	r2, [r0, #0]
 800c770:	8703      	strh	r3, [r0, #56]	@ 0x38
 800c772:	4618      	mov	r0, r3
 800c774:	4770      	bx	lr
 800c776:	200b      	movs	r0, #11
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	f3af 8000 	nop.w
	...

0800c788 <rclc_support_init>:
 800c788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c78c:	b086      	sub	sp, #24
 800c78e:	b3b8      	cbz	r0, 800c800 <rclc_support_init+0x78>
 800c790:	461c      	mov	r4, r3
 800c792:	b3ab      	cbz	r3, 800c800 <rclc_support_init+0x78>
 800c794:	460f      	mov	r7, r1
 800c796:	4690      	mov	r8, r2
 800c798:	4606      	mov	r6, r0
 800c79a:	f004 f83b 	bl	8010814 <rcl_get_zero_initialized_init_options>
 800c79e:	f104 030c 	add.w	r3, r4, #12
 800c7a2:	9005      	str	r0, [sp, #20]
 800c7a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c7a8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c7ac:	a805      	add	r0, sp, #20
 800c7ae:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c7b2:	f004 f831 	bl	8010818 <rcl_init_options_init>
 800c7b6:	4605      	mov	r5, r0
 800c7b8:	b9e0      	cbnz	r0, 800c7f4 <rclc_support_init+0x6c>
 800c7ba:	ad02      	add	r5, sp, #8
 800c7bc:	4628      	mov	r0, r5
 800c7be:	f003 feb5 	bl	801052c <rcl_get_zero_initialized_context>
 800c7c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c7c6:	4633      	mov	r3, r6
 800c7c8:	e886 0003 	stmia.w	r6, {r0, r1}
 800c7cc:	aa05      	add	r2, sp, #20
 800c7ce:	4641      	mov	r1, r8
 800c7d0:	4638      	mov	r0, r7
 800c7d2:	f003 ff1b 	bl	801060c <rcl_init>
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	b9b8      	cbnz	r0, 800c80a <rclc_support_init+0x82>
 800c7da:	60b4      	str	r4, [r6, #8]
 800c7dc:	4622      	mov	r2, r4
 800c7de:	f106 010c 	add.w	r1, r6, #12
 800c7e2:	2003      	movs	r0, #3
 800c7e4:	f004 fe42 	bl	801146c <rcl_clock_init>
 800c7e8:	4605      	mov	r5, r0
 800c7ea:	b970      	cbnz	r0, 800c80a <rclc_support_init+0x82>
 800c7ec:	a805      	add	r0, sp, #20
 800c7ee:	f004 f879 	bl	80108e4 <rcl_init_options_fini>
 800c7f2:	b108      	cbz	r0, 800c7f8 <rclc_support_init+0x70>
 800c7f4:	f000 f91c 	bl	800ca30 <rcutils_reset_error>
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	b006      	add	sp, #24
 800c7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c800:	250b      	movs	r5, #11
 800c802:	4628      	mov	r0, r5
 800c804:	b006      	add	sp, #24
 800c806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c80a:	f000 f911 	bl	800ca30 <rcutils_reset_error>
 800c80e:	a805      	add	r0, sp, #20
 800c810:	f004 f868 	bl	80108e4 <rcl_init_options_fini>
 800c814:	2800      	cmp	r0, #0
 800c816:	d0ef      	beq.n	800c7f8 <rclc_support_init+0x70>
 800c818:	e7ec      	b.n	800c7f4 <rclc_support_init+0x6c>
 800c81a:	bf00      	nop

0800c81c <rclc_node_init_default>:
 800c81c:	b3b8      	cbz	r0, 800c88e <rclc_node_init_default+0x72>
 800c81e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c822:	460d      	mov	r5, r1
 800c824:	b0a1      	sub	sp, #132	@ 0x84
 800c826:	b329      	cbz	r1, 800c874 <rclc_node_init_default+0x58>
 800c828:	4616      	mov	r6, r2
 800c82a:	b31a      	cbz	r2, 800c874 <rclc_node_init_default+0x58>
 800c82c:	461f      	mov	r7, r3
 800c82e:	b30b      	cbz	r3, 800c874 <rclc_node_init_default+0x58>
 800c830:	f10d 0810 	add.w	r8, sp, #16
 800c834:	4604      	mov	r4, r0
 800c836:	4640      	mov	r0, r8
 800c838:	f004 f90c 	bl	8010a54 <rcl_get_zero_initialized_node>
 800c83c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c840:	f10d 0918 	add.w	r9, sp, #24
 800c844:	e884 0003 	stmia.w	r4, {r0, r1}
 800c848:	4648      	mov	r0, r9
 800c84a:	f004 fa7b 	bl	8010d44 <rcl_node_get_default_options>
 800c84e:	4640      	mov	r0, r8
 800c850:	f004 f900 	bl	8010a54 <rcl_get_zero_initialized_node>
 800c854:	f8cd 9000 	str.w	r9, [sp]
 800c858:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c85c:	463b      	mov	r3, r7
 800c85e:	e884 0003 	stmia.w	r4, {r0, r1}
 800c862:	4632      	mov	r2, r6
 800c864:	4629      	mov	r1, r5
 800c866:	4620      	mov	r0, r4
 800c868:	f004 f8fe 	bl	8010a68 <rcl_node_init>
 800c86c:	b930      	cbnz	r0, 800c87c <rclc_node_init_default+0x60>
 800c86e:	b021      	add	sp, #132	@ 0x84
 800c870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c874:	200b      	movs	r0, #11
 800c876:	b021      	add	sp, #132	@ 0x84
 800c878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c87c:	9003      	str	r0, [sp, #12]
 800c87e:	f000 f8d7 	bl	800ca30 <rcutils_reset_error>
 800c882:	f000 f8d5 	bl	800ca30 <rcutils_reset_error>
 800c886:	9803      	ldr	r0, [sp, #12]
 800c888:	b021      	add	sp, #132	@ 0x84
 800c88a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c88e:	200b      	movs	r0, #11
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop

0800c894 <rclc_publisher_init_default>:
 800c894:	b368      	cbz	r0, 800c8f2 <rclc_publisher_init_default+0x5e>
 800c896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c89a:	460d      	mov	r5, r1
 800c89c:	b0a0      	sub	sp, #128	@ 0x80
 800c89e:	b321      	cbz	r1, 800c8ea <rclc_publisher_init_default+0x56>
 800c8a0:	4616      	mov	r6, r2
 800c8a2:	b312      	cbz	r2, 800c8ea <rclc_publisher_init_default+0x56>
 800c8a4:	461f      	mov	r7, r3
 800c8a6:	b303      	cbz	r3, 800c8ea <rclc_publisher_init_default+0x56>
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	f7ff f841 	bl	800b930 <rcl_get_zero_initialized_publisher>
 800c8ae:	f10d 0810 	add.w	r8, sp, #16
 800c8b2:	6020      	str	r0, [r4, #0]
 800c8b4:	4640      	mov	r0, r8
 800c8b6:	f7ff f8d7 	bl	800ba68 <rcl_publisher_get_default_options>
 800c8ba:	490f      	ldr	r1, [pc, #60]	@ (800c8f8 <rclc_publisher_init_default+0x64>)
 800c8bc:	2250      	movs	r2, #80	@ 0x50
 800c8be:	4640      	mov	r0, r8
 800c8c0:	f00b f85f 	bl	8017982 <memcpy>
 800c8c4:	f8cd 8000 	str.w	r8, [sp]
 800c8c8:	463b      	mov	r3, r7
 800c8ca:	4632      	mov	r2, r6
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f7ff f834 	bl	800b93c <rcl_publisher_init>
 800c8d4:	b910      	cbnz	r0, 800c8dc <rclc_publisher_init_default+0x48>
 800c8d6:	b020      	add	sp, #128	@ 0x80
 800c8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8dc:	9003      	str	r0, [sp, #12]
 800c8de:	f000 f8a7 	bl	800ca30 <rcutils_reset_error>
 800c8e2:	9803      	ldr	r0, [sp, #12]
 800c8e4:	b020      	add	sp, #128	@ 0x80
 800c8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ea:	200b      	movs	r0, #11
 800c8ec:	b020      	add	sp, #128	@ 0x80
 800c8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f2:	200b      	movs	r0, #11
 800c8f4:	4770      	bx	lr
 800c8f6:	bf00      	nop
 800c8f8:	08018b38 	.word	0x08018b38

0800c8fc <rclc_subscription_init_default>:
 800c8fc:	b368      	cbz	r0, 800c95a <rclc_subscription_init_default+0x5e>
 800c8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c902:	460d      	mov	r5, r1
 800c904:	b0a0      	sub	sp, #128	@ 0x80
 800c906:	b321      	cbz	r1, 800c952 <rclc_subscription_init_default+0x56>
 800c908:	4616      	mov	r6, r2
 800c90a:	b312      	cbz	r2, 800c952 <rclc_subscription_init_default+0x56>
 800c90c:	461f      	mov	r7, r3
 800c90e:	b303      	cbz	r3, 800c952 <rclc_subscription_init_default+0x56>
 800c910:	4604      	mov	r4, r0
 800c912:	f004 fc4f 	bl	80111b4 <rcl_get_zero_initialized_subscription>
 800c916:	f10d 0810 	add.w	r8, sp, #16
 800c91a:	6020      	str	r0, [r4, #0]
 800c91c:	4640      	mov	r0, r8
 800c91e:	f004 fcf7 	bl	8011310 <rcl_subscription_get_default_options>
 800c922:	490f      	ldr	r1, [pc, #60]	@ (800c960 <rclc_subscription_init_default+0x64>)
 800c924:	2250      	movs	r2, #80	@ 0x50
 800c926:	4640      	mov	r0, r8
 800c928:	f00b f82b 	bl	8017982 <memcpy>
 800c92c:	f8cd 8000 	str.w	r8, [sp]
 800c930:	463b      	mov	r3, r7
 800c932:	4632      	mov	r2, r6
 800c934:	4629      	mov	r1, r5
 800c936:	4620      	mov	r0, r4
 800c938:	f004 fc42 	bl	80111c0 <rcl_subscription_init>
 800c93c:	b910      	cbnz	r0, 800c944 <rclc_subscription_init_default+0x48>
 800c93e:	b020      	add	sp, #128	@ 0x80
 800c940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c944:	9003      	str	r0, [sp, #12]
 800c946:	f000 f873 	bl	800ca30 <rcutils_reset_error>
 800c94a:	9803      	ldr	r0, [sp, #12]
 800c94c:	b020      	add	sp, #128	@ 0x80
 800c94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c952:	200b      	movs	r0, #11
 800c954:	b020      	add	sp, #128	@ 0x80
 800c956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c95a:	200b      	movs	r0, #11
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	08018b88 	.word	0x08018b88

0800c964 <__default_zero_allocate>:
 800c964:	f00a bb5a 	b.w	801701c <calloc>

0800c968 <__default_reallocate>:
 800c968:	f00a bce6 	b.w	8017338 <realloc>

0800c96c <__default_deallocate>:
 800c96c:	f00a bbc2 	b.w	80170f4 <free>

0800c970 <__default_allocate>:
 800c970:	f00a bbb8 	b.w	80170e4 <malloc>

0800c974 <rcutils_get_zero_initialized_allocator>:
 800c974:	b510      	push	{r4, lr}
 800c976:	4c05      	ldr	r4, [pc, #20]	@ (800c98c <rcutils_get_zero_initialized_allocator+0x18>)
 800c978:	4686      	mov	lr, r0
 800c97a:	4684      	mov	ip, r0
 800c97c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c97e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	f8cc 3000 	str.w	r3, [ip]
 800c988:	4670      	mov	r0, lr
 800c98a:	bd10      	pop	{r4, pc}
 800c98c:	08018bd8 	.word	0x08018bd8

0800c990 <rcutils_set_default_allocator>:
 800c990:	b1a8      	cbz	r0, 800c9be <rcutils_set_default_allocator+0x2e>
 800c992:	6802      	ldr	r2, [r0, #0]
 800c994:	b1a2      	cbz	r2, 800c9c0 <rcutils_set_default_allocator+0x30>
 800c996:	6841      	ldr	r1, [r0, #4]
 800c998:	b1a1      	cbz	r1, 800c9c4 <rcutils_set_default_allocator+0x34>
 800c99a:	b410      	push	{r4}
 800c99c:	68c4      	ldr	r4, [r0, #12]
 800c99e:	b164      	cbz	r4, 800c9ba <rcutils_set_default_allocator+0x2a>
 800c9a0:	6880      	ldr	r0, [r0, #8]
 800c9a2:	b138      	cbz	r0, 800c9b4 <rcutils_set_default_allocator+0x24>
 800c9a4:	4b08      	ldr	r3, [pc, #32]	@ (800c9c8 <rcutils_set_default_allocator+0x38>)
 800c9a6:	601a      	str	r2, [r3, #0]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800c9ae:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800c9b2:	2001      	movs	r0, #1
 800c9b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9b8:	4770      	bx	lr
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	e7fa      	b.n	800c9b4 <rcutils_set_default_allocator+0x24>
 800c9be:	4770      	bx	lr
 800c9c0:	4610      	mov	r0, r2
 800c9c2:	4770      	bx	lr
 800c9c4:	4608      	mov	r0, r1
 800c9c6:	4770      	bx	lr
 800c9c8:	200001bc 	.word	0x200001bc

0800c9cc <rcutils_get_default_allocator>:
 800c9cc:	b510      	push	{r4, lr}
 800c9ce:	4c05      	ldr	r4, [pc, #20]	@ (800c9e4 <rcutils_get_default_allocator+0x18>)
 800c9d0:	4686      	mov	lr, r0
 800c9d2:	4684      	mov	ip, r0
 800c9d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c9da:	6823      	ldr	r3, [r4, #0]
 800c9dc:	f8cc 3000 	str.w	r3, [ip]
 800c9e0:	4670      	mov	r0, lr
 800c9e2:	bd10      	pop	{r4, pc}
 800c9e4:	200001bc 	.word	0x200001bc

0800c9e8 <rcutils_allocator_is_valid>:
 800c9e8:	b158      	cbz	r0, 800ca02 <rcutils_allocator_is_valid+0x1a>
 800c9ea:	6803      	ldr	r3, [r0, #0]
 800c9ec:	b143      	cbz	r3, 800ca00 <rcutils_allocator_is_valid+0x18>
 800c9ee:	6843      	ldr	r3, [r0, #4]
 800c9f0:	b133      	cbz	r3, 800ca00 <rcutils_allocator_is_valid+0x18>
 800c9f2:	68c3      	ldr	r3, [r0, #12]
 800c9f4:	b123      	cbz	r3, 800ca00 <rcutils_allocator_is_valid+0x18>
 800c9f6:	6880      	ldr	r0, [r0, #8]
 800c9f8:	3800      	subs	r0, #0
 800c9fa:	bf18      	it	ne
 800c9fc:	2001      	movne	r0, #1
 800c9fe:	4770      	bx	lr
 800ca00:	4618      	mov	r0, r3
 800ca02:	4770      	bx	lr

0800ca04 <rcutils_get_error_string>:
 800ca04:	4b06      	ldr	r3, [pc, #24]	@ (800ca20 <rcutils_get_error_string+0x1c>)
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	b13b      	cbz	r3, 800ca1a <rcutils_get_error_string+0x16>
 800ca0a:	4b06      	ldr	r3, [pc, #24]	@ (800ca24 <rcutils_get_error_string+0x20>)
 800ca0c:	781a      	ldrb	r2, [r3, #0]
 800ca0e:	b90a      	cbnz	r2, 800ca14 <rcutils_get_error_string+0x10>
 800ca10:	2201      	movs	r2, #1
 800ca12:	701a      	strb	r2, [r3, #0]
 800ca14:	4b04      	ldr	r3, [pc, #16]	@ (800ca28 <rcutils_get_error_string+0x24>)
 800ca16:	7818      	ldrb	r0, [r3, #0]
 800ca18:	4770      	bx	lr
 800ca1a:	4b04      	ldr	r3, [pc, #16]	@ (800ca2c <rcutils_get_error_string+0x28>)
 800ca1c:	7818      	ldrb	r0, [r3, #0]
 800ca1e:	4770      	bx	lr
 800ca20:	200093e0 	.word	0x200093e0
 800ca24:	200093f9 	.word	0x200093f9
 800ca28:	200093f8 	.word	0x200093f8
 800ca2c:	08018bec 	.word	0x08018bec

0800ca30 <rcutils_reset_error>:
 800ca30:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800ca50 <rcutils_reset_error+0x20>
 800ca34:	4a08      	ldr	r2, [pc, #32]	@ (800ca58 <rcutils_reset_error+0x28>)
 800ca36:	4809      	ldr	r0, [pc, #36]	@ (800ca5c <rcutils_reset_error+0x2c>)
 800ca38:	4909      	ldr	r1, [pc, #36]	@ (800ca60 <rcutils_reset_error+0x30>)
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	8013      	strh	r3, [r2, #0]
 800ca3e:	ed82 7b02 	vstr	d7, [r2, #8]
 800ca42:	4a08      	ldr	r2, [pc, #32]	@ (800ca64 <rcutils_reset_error+0x34>)
 800ca44:	7003      	strb	r3, [r0, #0]
 800ca46:	700b      	strb	r3, [r1, #0]
 800ca48:	7013      	strb	r3, [r2, #0]
 800ca4a:	4770      	bx	lr
 800ca4c:	f3af 8000 	nop.w
	...
 800ca58:	200093e8 	.word	0x200093e8
 800ca5c:	200093f9 	.word	0x200093f9
 800ca60:	200093f8 	.word	0x200093f8
 800ca64:	200093e0 	.word	0x200093e0

0800ca68 <rcutils_system_time_now>:
 800ca68:	b308      	cbz	r0, 800caae <rcutils_system_time_now+0x46>
 800ca6a:	b570      	push	{r4, r5, r6, lr}
 800ca6c:	b084      	sub	sp, #16
 800ca6e:	4604      	mov	r4, r0
 800ca70:	4669      	mov	r1, sp
 800ca72:	2001      	movs	r0, #1
 800ca74:	f7f5 fba4 	bl	80021c0 <clock_gettime>
 800ca78:	e9dd 3500 	ldrd	r3, r5, [sp]
 800ca7c:	2d00      	cmp	r5, #0
 800ca7e:	db13      	blt.n	800caa8 <rcutils_system_time_now+0x40>
 800ca80:	9902      	ldr	r1, [sp, #8]
 800ca82:	2900      	cmp	r1, #0
 800ca84:	db0d      	blt.n	800caa2 <rcutils_system_time_now+0x3a>
 800ca86:	4e0b      	ldr	r6, [pc, #44]	@ (800cab4 <rcutils_system_time_now+0x4c>)
 800ca88:	fba3 3206 	umull	r3, r2, r3, r6
 800ca8c:	185b      	adds	r3, r3, r1
 800ca8e:	fb06 2205 	mla	r2, r6, r5, r2
 800ca92:	f04f 0000 	mov.w	r0, #0
 800ca96:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800ca9a:	e9c4 3200 	strd	r3, r2, [r4]
 800ca9e:	b004      	add	sp, #16
 800caa0:	bd70      	pop	{r4, r5, r6, pc}
 800caa2:	ea53 0205 	orrs.w	r2, r3, r5
 800caa6:	d1ee      	bne.n	800ca86 <rcutils_system_time_now+0x1e>
 800caa8:	2002      	movs	r0, #2
 800caaa:	b004      	add	sp, #16
 800caac:	bd70      	pop	{r4, r5, r6, pc}
 800caae:	200b      	movs	r0, #11
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	3b9aca00 	.word	0x3b9aca00

0800cab8 <rcutils_steady_time_now>:
 800cab8:	b308      	cbz	r0, 800cafe <rcutils_steady_time_now+0x46>
 800caba:	b570      	push	{r4, r5, r6, lr}
 800cabc:	b084      	sub	sp, #16
 800cabe:	4604      	mov	r4, r0
 800cac0:	4669      	mov	r1, sp
 800cac2:	2000      	movs	r0, #0
 800cac4:	f7f5 fb7c 	bl	80021c0 <clock_gettime>
 800cac8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cacc:	2d00      	cmp	r5, #0
 800cace:	db13      	blt.n	800caf8 <rcutils_steady_time_now+0x40>
 800cad0:	9902      	ldr	r1, [sp, #8]
 800cad2:	2900      	cmp	r1, #0
 800cad4:	db0d      	blt.n	800caf2 <rcutils_steady_time_now+0x3a>
 800cad6:	4e0b      	ldr	r6, [pc, #44]	@ (800cb04 <rcutils_steady_time_now+0x4c>)
 800cad8:	fba3 3206 	umull	r3, r2, r3, r6
 800cadc:	185b      	adds	r3, r3, r1
 800cade:	fb06 2205 	mla	r2, r6, r5, r2
 800cae2:	f04f 0000 	mov.w	r0, #0
 800cae6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800caea:	e9c4 3200 	strd	r3, r2, [r4]
 800caee:	b004      	add	sp, #16
 800caf0:	bd70      	pop	{r4, r5, r6, pc}
 800caf2:	ea53 0205 	orrs.w	r2, r3, r5
 800caf6:	d1ee      	bne.n	800cad6 <rcutils_steady_time_now+0x1e>
 800caf8:	2002      	movs	r0, #2
 800cafa:	b004      	add	sp, #16
 800cafc:	bd70      	pop	{r4, r5, r6, pc}
 800cafe:	200b      	movs	r0, #11
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop
 800cb04:	3b9aca00 	.word	0x3b9aca00

0800cb08 <rmw_get_default_publisher_options>:
 800cb08:	2200      	movs	r2, #0
 800cb0a:	6002      	str	r2, [r0, #0]
 800cb0c:	7102      	strb	r2, [r0, #4]
 800cb0e:	4770      	bx	lr

0800cb10 <rmw_uros_set_custom_transport>:
 800cb10:	b470      	push	{r4, r5, r6}
 800cb12:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800cb16:	b162      	cbz	r2, 800cb32 <rmw_uros_set_custom_transport+0x22>
 800cb18:	b15b      	cbz	r3, 800cb32 <rmw_uros_set_custom_transport+0x22>
 800cb1a:	b155      	cbz	r5, 800cb32 <rmw_uros_set_custom_transport+0x22>
 800cb1c:	b14e      	cbz	r6, 800cb32 <rmw_uros_set_custom_transport+0x22>
 800cb1e:	4c06      	ldr	r4, [pc, #24]	@ (800cb38 <rmw_uros_set_custom_transport+0x28>)
 800cb20:	7020      	strb	r0, [r4, #0]
 800cb22:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800cb26:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cb2a:	6166      	str	r6, [r4, #20]
 800cb2c:	2000      	movs	r0, #0
 800cb2e:	bc70      	pop	{r4, r5, r6}
 800cb30:	4770      	bx	lr
 800cb32:	200b      	movs	r0, #11
 800cb34:	bc70      	pop	{r4, r5, r6}
 800cb36:	4770      	bx	lr
 800cb38:	200093fc 	.word	0x200093fc

0800cb3c <flush_session>:
 800cb3c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800cb3e:	f001 bcdf 	b.w	800e500 <uxr_run_session_until_confirm_delivery>
 800cb42:	bf00      	nop

0800cb44 <rmw_publish>:
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d053      	beq.n	800cbf0 <rmw_publish+0xac>
 800cb48:	b570      	push	{r4, r5, r6, lr}
 800cb4a:	460d      	mov	r5, r1
 800cb4c:	b08e      	sub	sp, #56	@ 0x38
 800cb4e:	2900      	cmp	r1, #0
 800cb50:	d04b      	beq.n	800cbea <rmw_publish+0xa6>
 800cb52:	4604      	mov	r4, r0
 800cb54:	6800      	ldr	r0, [r0, #0]
 800cb56:	f000 fced 	bl	800d534 <is_uxrce_rmw_identifier_valid>
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d045      	beq.n	800cbea <rmw_publish+0xa6>
 800cb5e:	6866      	ldr	r6, [r4, #4]
 800cb60:	2e00      	cmp	r6, #0
 800cb62:	d042      	beq.n	800cbea <rmw_publish+0xa6>
 800cb64:	69b4      	ldr	r4, [r6, #24]
 800cb66:	4628      	mov	r0, r5
 800cb68:	6923      	ldr	r3, [r4, #16]
 800cb6a:	4798      	blx	r3
 800cb6c:	69f3      	ldr	r3, [r6, #28]
 800cb6e:	9005      	str	r0, [sp, #20]
 800cb70:	b113      	cbz	r3, 800cb78 <rmw_publish+0x34>
 800cb72:	a805      	add	r0, sp, #20
 800cb74:	4798      	blx	r3
 800cb76:	9805      	ldr	r0, [sp, #20]
 800cb78:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	9000      	str	r0, [sp, #0]
 800cb80:	6972      	ldr	r2, [r6, #20]
 800cb82:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800cb84:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cb88:	ab06      	add	r3, sp, #24
 800cb8a:	f002 faa5 	bl	800f0d8 <uxr_prepare_output_stream>
 800cb8e:	b1d8      	cbz	r0, 800cbc8 <rmw_publish+0x84>
 800cb90:	68a3      	ldr	r3, [r4, #8]
 800cb92:	a906      	add	r1, sp, #24
 800cb94:	4628      	mov	r0, r5
 800cb96:	4798      	blx	r3
 800cb98:	6a33      	ldr	r3, [r6, #32]
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	b10b      	cbz	r3, 800cba2 <rmw_publish+0x5e>
 800cb9e:	a806      	add	r0, sp, #24
 800cba0:	4798      	blx	r3
 800cba2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cbac:	d022      	beq.n	800cbf4 <rmw_publish+0xb0>
 800cbae:	6918      	ldr	r0, [r3, #16]
 800cbb0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800cbb2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cbb6:	f001 fca3 	bl	800e500 <uxr_run_session_until_confirm_delivery>
 800cbba:	4020      	ands	r0, r4
 800cbbc:	b2c4      	uxtb	r4, r0
 800cbbe:	f084 0001 	eor.w	r0, r4, #1
 800cbc2:	b2c0      	uxtb	r0, r0
 800cbc4:	b00e      	add	sp, #56	@ 0x38
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
 800cbc8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cbcc:	6918      	ldr	r0, [r3, #16]
 800cbce:	9b05      	ldr	r3, [sp, #20]
 800cbd0:	9300      	str	r3, [sp, #0]
 800cbd2:	4b0b      	ldr	r3, [pc, #44]	@ (800cc00 <rmw_publish+0xbc>)
 800cbd4:	9301      	str	r3, [sp, #4]
 800cbd6:	9602      	str	r6, [sp, #8]
 800cbd8:	6972      	ldr	r2, [r6, #20]
 800cbda:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800cbdc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cbe0:	ab06      	add	r3, sp, #24
 800cbe2:	f002 faa9 	bl	800f138 <uxr_prepare_output_stream_fragmented>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d1d2      	bne.n	800cb90 <rmw_publish+0x4c>
 800cbea:	2001      	movs	r0, #1
 800cbec:	b00e      	add	sp, #56	@ 0x38
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	2001      	movs	r0, #1
 800cbf2:	4770      	bx	lr
 800cbf4:	6918      	ldr	r0, [r3, #16]
 800cbf6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cbfa:	f001 f8c1 	bl	800dd80 <uxr_flash_output_streams>
 800cbfe:	e7de      	b.n	800cbbe <rmw_publish+0x7a>
 800cc00:	0800cb3d 	.word	0x0800cb3d

0800cc04 <rmw_create_publisher>:
 800cc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc08:	b087      	sub	sp, #28
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	f000 80cc 	beq.w	800cda8 <rmw_create_publisher+0x1a4>
 800cc10:	460e      	mov	r6, r1
 800cc12:	2900      	cmp	r1, #0
 800cc14:	f000 80c8 	beq.w	800cda8 <rmw_create_publisher+0x1a4>
 800cc18:	4604      	mov	r4, r0
 800cc1a:	6800      	ldr	r0, [r0, #0]
 800cc1c:	4615      	mov	r5, r2
 800cc1e:	4698      	mov	r8, r3
 800cc20:	f000 fc88 	bl	800d534 <is_uxrce_rmw_identifier_valid>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	f000 80bf 	beq.w	800cda8 <rmw_create_publisher+0x1a4>
 800cc2a:	2d00      	cmp	r5, #0
 800cc2c:	f000 80bc 	beq.w	800cda8 <rmw_create_publisher+0x1a4>
 800cc30:	782b      	ldrb	r3, [r5, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f000 80b8 	beq.w	800cda8 <rmw_create_publisher+0x1a4>
 800cc38:	f1b8 0f00 	cmp.w	r8, #0
 800cc3c:	f000 80b4 	beq.w	800cda8 <rmw_create_publisher+0x1a4>
 800cc40:	485c      	ldr	r0, [pc, #368]	@ (800cdb4 <rmw_create_publisher+0x1b0>)
 800cc42:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cc46:	f006 febb 	bl	80139c0 <get_memory>
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	f000 80ac 	beq.w	800cda8 <rmw_create_publisher+0x1a4>
 800cc50:	6884      	ldr	r4, [r0, #8]
 800cc52:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800cc56:	f006 ff1b 	bl	8013a90 <rmw_get_implementation_identifier>
 800cc5a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800cc5e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800cc62:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800cc66:	4628      	mov	r0, r5
 800cc68:	f7f3 fac4 	bl	80001f4 <strlen>
 800cc6c:	3001      	adds	r0, #1
 800cc6e:	283c      	cmp	r0, #60	@ 0x3c
 800cc70:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800cc74:	f200 8091 	bhi.w	800cd9a <rmw_create_publisher+0x196>
 800cc78:	4a4f      	ldr	r2, [pc, #316]	@ (800cdb8 <rmw_create_publisher+0x1b4>)
 800cc7a:	462b      	mov	r3, r5
 800cc7c:	213c      	movs	r1, #60	@ 0x3c
 800cc7e:	4650      	mov	r0, sl
 800cc80:	f00a fcdc 	bl	801763c <sniprintf>
 800cc84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cc88:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800cc8a:	4641      	mov	r1, r8
 800cc8c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800cc90:	2250      	movs	r2, #80	@ 0x50
 800cc92:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800cc96:	f00a fe74 	bl	8017982 <memcpy>
 800cc9a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800cc9e:	4947      	ldr	r1, [pc, #284]	@ (800cdbc <rmw_create_publisher+0x1b8>)
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cca6:	bf0c      	ite	eq
 800cca8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800ccac:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800ccb0:	67a3      	str	r3, [r4, #120]	@ 0x78
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ccb8:	4630      	mov	r0, r6
 800ccba:	f000 fc49 	bl	800d550 <get_message_typesupport_handle>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d06b      	beq.n	800cd9a <rmw_create_publisher+0x196>
 800ccc2:	6842      	ldr	r2, [r0, #4]
 800ccc4:	61a2      	str	r2, [r4, #24]
 800ccc6:	2a00      	cmp	r2, #0
 800ccc8:	d067      	beq.n	800cd9a <rmw_create_publisher+0x196>
 800ccca:	4629      	mov	r1, r5
 800cccc:	4643      	mov	r3, r8
 800ccce:	4648      	mov	r0, r9
 800ccd0:	f007 f944 	bl	8013f5c <create_topic>
 800ccd4:	6260      	str	r0, [r4, #36]	@ 0x24
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	d063      	beq.n	800cda2 <rmw_create_publisher+0x19e>
 800ccda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cce2:	2103      	movs	r1, #3
 800cce4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800cce8:	1c42      	adds	r2, r0, #1
 800ccea:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800ccee:	f000 fef9 	bl	800dae4 <uxr_object_id>
 800ccf2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800ccf6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccfa:	6120      	str	r0, [r4, #16]
 800ccfc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800cd00:	6910      	ldr	r0, [r2, #16]
 800cd02:	2506      	movs	r5, #6
 800cd04:	9500      	str	r5, [sp, #0]
 800cd06:	6819      	ldr	r1, [r3, #0]
 800cd08:	6922      	ldr	r2, [r4, #16]
 800cd0a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800cd0e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cd12:	f000 fd99 	bl	800d848 <uxr_buffer_create_publisher_bin>
 800cd16:	4602      	mov	r2, r0
 800cd18:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800cd1c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800cd20:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800cd24:	f000 fb86 	bl	800d434 <run_xrce_session>
 800cd28:	b3b8      	cbz	r0, 800cd9a <rmw_create_publisher+0x196>
 800cd2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd32:	2105      	movs	r1, #5
 800cd34:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800cd38:	1c42      	adds	r2, r0, #1
 800cd3a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800cd3e:	f000 fed1 	bl	800dae4 <uxr_object_id>
 800cd42:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cd46:	6160      	str	r0, [r4, #20]
 800cd48:	691e      	ldr	r6, [r3, #16]
 800cd4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd4e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800cd52:	f10d 0a10 	add.w	sl, sp, #16
 800cd56:	4641      	mov	r1, r8
 800cd58:	4650      	mov	r0, sl
 800cd5a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800cd5e:	f000 fb85 	bl	800d46c <convert_qos_profile>
 800cd62:	9503      	str	r5, [sp, #12]
 800cd64:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800cd68:	9001      	str	r0, [sp, #4]
 800cd6a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800cd6e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800cd72:	9300      	str	r3, [sp, #0]
 800cd74:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800cd78:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800cd7c:	f8d8 1000 	ldr.w	r1, [r8]
 800cd80:	4630      	mov	r0, r6
 800cd82:	f000 fdc1 	bl	800d908 <uxr_buffer_create_datawriter_bin>
 800cd86:	4602      	mov	r2, r0
 800cd88:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800cd8c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800cd90:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800cd94:	f000 fb4e 	bl	800d434 <run_xrce_session>
 800cd98:	b938      	cbnz	r0, 800cdaa <rmw_create_publisher+0x1a6>
 800cd9a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cd9c:	b108      	cbz	r0, 800cda2 <rmw_create_publisher+0x19e>
 800cd9e:	f000 fa47 	bl	800d230 <rmw_uxrce_fini_topic_memory>
 800cda2:	4638      	mov	r0, r7
 800cda4:	f000 f9ec 	bl	800d180 <rmw_uxrce_fini_publisher_memory>
 800cda8:	2700      	movs	r7, #0
 800cdaa:	4638      	mov	r0, r7
 800cdac:	b007      	add	sp, #28
 800cdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb2:	bf00      	nop
 800cdb4:	2000dcf4 	.word	0x2000dcf4
 800cdb8:	08018c00 	.word	0x08018c00
 800cdbc:	0801898c 	.word	0x0801898c

0800cdc0 <rmw_publisher_get_actual_qos>:
 800cdc0:	b150      	cbz	r0, 800cdd8 <rmw_publisher_get_actual_qos+0x18>
 800cdc2:	b508      	push	{r3, lr}
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	b149      	cbz	r1, 800cddc <rmw_publisher_get_actual_qos+0x1c>
 800cdc8:	6841      	ldr	r1, [r0, #4]
 800cdca:	2250      	movs	r2, #80	@ 0x50
 800cdcc:	3128      	adds	r1, #40	@ 0x28
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f00a fdd7 	bl	8017982 <memcpy>
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	bd08      	pop	{r3, pc}
 800cdd8:	200b      	movs	r0, #11
 800cdda:	4770      	bx	lr
 800cddc:	200b      	movs	r0, #11
 800cdde:	bd08      	pop	{r3, pc}

0800cde0 <rmw_destroy_publisher>:
 800cde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde2:	b128      	cbz	r0, 800cdf0 <rmw_destroy_publisher+0x10>
 800cde4:	4604      	mov	r4, r0
 800cde6:	6800      	ldr	r0, [r0, #0]
 800cde8:	460d      	mov	r5, r1
 800cdea:	f000 fba3 	bl	800d534 <is_uxrce_rmw_identifier_valid>
 800cdee:	b910      	cbnz	r0, 800cdf6 <rmw_destroy_publisher+0x16>
 800cdf0:	2401      	movs	r4, #1
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdf6:	6863      	ldr	r3, [r4, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d0f9      	beq.n	800cdf0 <rmw_destroy_publisher+0x10>
 800cdfc:	2d00      	cmp	r5, #0
 800cdfe:	d0f7      	beq.n	800cdf0 <rmw_destroy_publisher+0x10>
 800ce00:	6828      	ldr	r0, [r5, #0]
 800ce02:	f000 fb97 	bl	800d534 <is_uxrce_rmw_identifier_valid>
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d0f2      	beq.n	800cdf0 <rmw_destroy_publisher+0x10>
 800ce0a:	686c      	ldr	r4, [r5, #4]
 800ce0c:	2c00      	cmp	r4, #0
 800ce0e:	d0ef      	beq.n	800cdf0 <rmw_destroy_publisher+0x10>
 800ce10:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ce12:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800ce16:	f007 f8f1 	bl	8013ffc <destroy_topic>
 800ce1a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ce1e:	6962      	ldr	r2, [r4, #20]
 800ce20:	6918      	ldr	r0, [r3, #16]
 800ce22:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ce26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ce2a:	6819      	ldr	r1, [r3, #0]
 800ce2c:	f000 fc58 	bl	800d6e0 <uxr_buffer_delete_entity>
 800ce30:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ce34:	6922      	ldr	r2, [r4, #16]
 800ce36:	691b      	ldr	r3, [r3, #16]
 800ce38:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	6809      	ldr	r1, [r1, #0]
 800ce40:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ce44:	f000 fc4c 	bl	800d6e0 <uxr_buffer_delete_entity>
 800ce48:	693e      	ldr	r6, [r7, #16]
 800ce4a:	4622      	mov	r2, r4
 800ce4c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ce50:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ce54:	4604      	mov	r4, r0
 800ce56:	4630      	mov	r0, r6
 800ce58:	f000 faec 	bl	800d434 <run_xrce_session>
 800ce5c:	693e      	ldr	r6, [r7, #16]
 800ce5e:	4622      	mov	r2, r4
 800ce60:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ce64:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ce68:	4604      	mov	r4, r0
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	f000 fae2 	bl	800d434 <run_xrce_session>
 800ce70:	b12c      	cbz	r4, 800ce7e <rmw_destroy_publisher+0x9e>
 800ce72:	b120      	cbz	r0, 800ce7e <rmw_destroy_publisher+0x9e>
 800ce74:	2400      	movs	r4, #0
 800ce76:	4628      	mov	r0, r5
 800ce78:	f000 f982 	bl	800d180 <rmw_uxrce_fini_publisher_memory>
 800ce7c:	e7b9      	b.n	800cdf2 <rmw_destroy_publisher+0x12>
 800ce7e:	2402      	movs	r4, #2
 800ce80:	e7f9      	b.n	800ce76 <rmw_destroy_publisher+0x96>
 800ce82:	bf00      	nop

0800ce84 <rmw_uxrce_init_service_memory>:
 800ce84:	b1e2      	cbz	r2, 800cec0 <rmw_uxrce_init_service_memory+0x3c>
 800ce86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce8a:	7b05      	ldrb	r5, [r0, #12]
 800ce8c:	4606      	mov	r6, r0
 800ce8e:	b9ad      	cbnz	r5, 800cebc <rmw_uxrce_init_service_memory+0x38>
 800ce90:	23c8      	movs	r3, #200	@ 0xc8
 800ce92:	e9c0 5500 	strd	r5, r5, [r0]
 800ce96:	6083      	str	r3, [r0, #8]
 800ce98:	f240 1301 	movw	r3, #257	@ 0x101
 800ce9c:	4617      	mov	r7, r2
 800ce9e:	8183      	strh	r3, [r0, #12]
 800cea0:	460c      	mov	r4, r1
 800cea2:	46a8      	mov	r8, r5
 800cea4:	4621      	mov	r1, r4
 800cea6:	4630      	mov	r0, r6
 800cea8:	3501      	adds	r5, #1
 800ceaa:	f006 fd99 	bl	80139e0 <put_memory>
 800ceae:	42af      	cmp	r7, r5
 800ceb0:	60a4      	str	r4, [r4, #8]
 800ceb2:	f884 800c 	strb.w	r8, [r4, #12]
 800ceb6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ceba:	d1f3      	bne.n	800cea4 <rmw_uxrce_init_service_memory+0x20>
 800cebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop

0800cec4 <rmw_uxrce_init_client_memory>:
 800cec4:	b1e2      	cbz	r2, 800cf00 <rmw_uxrce_init_client_memory+0x3c>
 800cec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceca:	7b05      	ldrb	r5, [r0, #12]
 800cecc:	4606      	mov	r6, r0
 800cece:	b9ad      	cbnz	r5, 800cefc <rmw_uxrce_init_client_memory+0x38>
 800ced0:	23c8      	movs	r3, #200	@ 0xc8
 800ced2:	e9c0 5500 	strd	r5, r5, [r0]
 800ced6:	6083      	str	r3, [r0, #8]
 800ced8:	f240 1301 	movw	r3, #257	@ 0x101
 800cedc:	4617      	mov	r7, r2
 800cede:	8183      	strh	r3, [r0, #12]
 800cee0:	460c      	mov	r4, r1
 800cee2:	46a8      	mov	r8, r5
 800cee4:	4621      	mov	r1, r4
 800cee6:	4630      	mov	r0, r6
 800cee8:	3501      	adds	r5, #1
 800ceea:	f006 fd79 	bl	80139e0 <put_memory>
 800ceee:	42af      	cmp	r7, r5
 800cef0:	60a4      	str	r4, [r4, #8]
 800cef2:	f884 800c 	strb.w	r8, [r4, #12]
 800cef6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800cefa:	d1f3      	bne.n	800cee4 <rmw_uxrce_init_client_memory+0x20>
 800cefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop

0800cf04 <rmw_uxrce_init_publisher_memory>:
 800cf04:	b1e2      	cbz	r2, 800cf40 <rmw_uxrce_init_publisher_memory+0x3c>
 800cf06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0a:	7b05      	ldrb	r5, [r0, #12]
 800cf0c:	4606      	mov	r6, r0
 800cf0e:	b9ad      	cbnz	r5, 800cf3c <rmw_uxrce_init_publisher_memory+0x38>
 800cf10:	23d8      	movs	r3, #216	@ 0xd8
 800cf12:	e9c0 5500 	strd	r5, r5, [r0]
 800cf16:	6083      	str	r3, [r0, #8]
 800cf18:	f240 1301 	movw	r3, #257	@ 0x101
 800cf1c:	4617      	mov	r7, r2
 800cf1e:	8183      	strh	r3, [r0, #12]
 800cf20:	460c      	mov	r4, r1
 800cf22:	46a8      	mov	r8, r5
 800cf24:	4621      	mov	r1, r4
 800cf26:	4630      	mov	r0, r6
 800cf28:	3501      	adds	r5, #1
 800cf2a:	f006 fd59 	bl	80139e0 <put_memory>
 800cf2e:	42af      	cmp	r7, r5
 800cf30:	60a4      	str	r4, [r4, #8]
 800cf32:	f884 800c 	strb.w	r8, [r4, #12]
 800cf36:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800cf3a:	d1f3      	bne.n	800cf24 <rmw_uxrce_init_publisher_memory+0x20>
 800cf3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop

0800cf44 <rmw_uxrce_init_subscription_memory>:
 800cf44:	b1e2      	cbz	r2, 800cf80 <rmw_uxrce_init_subscription_memory+0x3c>
 800cf46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf4a:	7b05      	ldrb	r5, [r0, #12]
 800cf4c:	4606      	mov	r6, r0
 800cf4e:	b9ad      	cbnz	r5, 800cf7c <rmw_uxrce_init_subscription_memory+0x38>
 800cf50:	23d8      	movs	r3, #216	@ 0xd8
 800cf52:	e9c0 5500 	strd	r5, r5, [r0]
 800cf56:	6083      	str	r3, [r0, #8]
 800cf58:	f240 1301 	movw	r3, #257	@ 0x101
 800cf5c:	4617      	mov	r7, r2
 800cf5e:	8183      	strh	r3, [r0, #12]
 800cf60:	460c      	mov	r4, r1
 800cf62:	46a8      	mov	r8, r5
 800cf64:	4621      	mov	r1, r4
 800cf66:	4630      	mov	r0, r6
 800cf68:	3501      	adds	r5, #1
 800cf6a:	f006 fd39 	bl	80139e0 <put_memory>
 800cf6e:	42af      	cmp	r7, r5
 800cf70:	60a4      	str	r4, [r4, #8]
 800cf72:	f884 800c 	strb.w	r8, [r4, #12]
 800cf76:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800cf7a:	d1f3      	bne.n	800cf64 <rmw_uxrce_init_subscription_memory+0x20>
 800cf7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop

0800cf84 <rmw_uxrce_init_node_memory>:
 800cf84:	b1e2      	cbz	r2, 800cfc0 <rmw_uxrce_init_node_memory+0x3c>
 800cf86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf8a:	7b05      	ldrb	r5, [r0, #12]
 800cf8c:	4606      	mov	r6, r0
 800cf8e:	b9ad      	cbnz	r5, 800cfbc <rmw_uxrce_init_node_memory+0x38>
 800cf90:	23a4      	movs	r3, #164	@ 0xa4
 800cf92:	e9c0 5500 	strd	r5, r5, [r0]
 800cf96:	6083      	str	r3, [r0, #8]
 800cf98:	f240 1301 	movw	r3, #257	@ 0x101
 800cf9c:	4617      	mov	r7, r2
 800cf9e:	8183      	strh	r3, [r0, #12]
 800cfa0:	460c      	mov	r4, r1
 800cfa2:	46a8      	mov	r8, r5
 800cfa4:	4621      	mov	r1, r4
 800cfa6:	4630      	mov	r0, r6
 800cfa8:	3501      	adds	r5, #1
 800cfaa:	f006 fd19 	bl	80139e0 <put_memory>
 800cfae:	42af      	cmp	r7, r5
 800cfb0:	60a4      	str	r4, [r4, #8]
 800cfb2:	f884 800c 	strb.w	r8, [r4, #12]
 800cfb6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800cfba:	d1f3      	bne.n	800cfa4 <rmw_uxrce_init_node_memory+0x20>
 800cfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfc0:	4770      	bx	lr
 800cfc2:	bf00      	nop

0800cfc4 <rmw_uxrce_init_session_memory>:
 800cfc4:	b1ea      	cbz	r2, 800d002 <rmw_uxrce_init_session_memory+0x3e>
 800cfc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfca:	7b05      	ldrb	r5, [r0, #12]
 800cfcc:	4606      	mov	r6, r0
 800cfce:	b9b5      	cbnz	r5, 800cffe <rmw_uxrce_init_session_memory+0x3a>
 800cfd0:	e9c0 5500 	strd	r5, r5, [r0]
 800cfd4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800cfd8:	f240 1301 	movw	r3, #257	@ 0x101
 800cfdc:	4617      	mov	r7, r2
 800cfde:	f8c0 8008 	str.w	r8, [r0, #8]
 800cfe2:	460c      	mov	r4, r1
 800cfe4:	8183      	strh	r3, [r0, #12]
 800cfe6:	46a9      	mov	r9, r5
 800cfe8:	4621      	mov	r1, r4
 800cfea:	4630      	mov	r0, r6
 800cfec:	3501      	adds	r5, #1
 800cfee:	f006 fcf7 	bl	80139e0 <put_memory>
 800cff2:	42af      	cmp	r7, r5
 800cff4:	60a4      	str	r4, [r4, #8]
 800cff6:	f884 900c 	strb.w	r9, [r4, #12]
 800cffa:	4444      	add	r4, r8
 800cffc:	d1f4      	bne.n	800cfe8 <rmw_uxrce_init_session_memory+0x24>
 800cffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d002:	4770      	bx	lr

0800d004 <rmw_uxrce_init_topic_memory>:
 800d004:	b1e2      	cbz	r2, 800d040 <rmw_uxrce_init_topic_memory+0x3c>
 800d006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d00a:	7b05      	ldrb	r5, [r0, #12]
 800d00c:	4606      	mov	r6, r0
 800d00e:	b9ad      	cbnz	r5, 800d03c <rmw_uxrce_init_topic_memory+0x38>
 800d010:	231c      	movs	r3, #28
 800d012:	e9c0 5500 	strd	r5, r5, [r0]
 800d016:	6083      	str	r3, [r0, #8]
 800d018:	f240 1301 	movw	r3, #257	@ 0x101
 800d01c:	4617      	mov	r7, r2
 800d01e:	8183      	strh	r3, [r0, #12]
 800d020:	460c      	mov	r4, r1
 800d022:	46a8      	mov	r8, r5
 800d024:	4621      	mov	r1, r4
 800d026:	4630      	mov	r0, r6
 800d028:	3501      	adds	r5, #1
 800d02a:	f006 fcd9 	bl	80139e0 <put_memory>
 800d02e:	42af      	cmp	r7, r5
 800d030:	60a4      	str	r4, [r4, #8]
 800d032:	f884 800c 	strb.w	r8, [r4, #12]
 800d036:	f104 041c 	add.w	r4, r4, #28
 800d03a:	d1f3      	bne.n	800d024 <rmw_uxrce_init_topic_memory+0x20>
 800d03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop

0800d044 <rmw_uxrce_init_static_input_buffer_memory>:
 800d044:	b1ea      	cbz	r2, 800d082 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800d046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d04a:	7b05      	ldrb	r5, [r0, #12]
 800d04c:	4606      	mov	r6, r0
 800d04e:	b9b5      	cbnz	r5, 800d07e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800d050:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800d054:	e9c0 5500 	strd	r5, r5, [r0]
 800d058:	6083      	str	r3, [r0, #8]
 800d05a:	f240 1301 	movw	r3, #257	@ 0x101
 800d05e:	4617      	mov	r7, r2
 800d060:	8183      	strh	r3, [r0, #12]
 800d062:	460c      	mov	r4, r1
 800d064:	46a8      	mov	r8, r5
 800d066:	4621      	mov	r1, r4
 800d068:	4630      	mov	r0, r6
 800d06a:	3501      	adds	r5, #1
 800d06c:	f006 fcb8 	bl	80139e0 <put_memory>
 800d070:	42af      	cmp	r7, r5
 800d072:	60a4      	str	r4, [r4, #8]
 800d074:	f884 800c 	strb.w	r8, [r4, #12]
 800d078:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800d07c:	d1f3      	bne.n	800d066 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800d07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d082:	4770      	bx	lr

0800d084 <rmw_uxrce_init_init_options_impl_memory>:
 800d084:	b1e2      	cbz	r2, 800d0c0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800d086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d08a:	7b05      	ldrb	r5, [r0, #12]
 800d08c:	4606      	mov	r6, r0
 800d08e:	b9ad      	cbnz	r5, 800d0bc <rmw_uxrce_init_init_options_impl_memory+0x38>
 800d090:	232c      	movs	r3, #44	@ 0x2c
 800d092:	e9c0 5500 	strd	r5, r5, [r0]
 800d096:	6083      	str	r3, [r0, #8]
 800d098:	f240 1301 	movw	r3, #257	@ 0x101
 800d09c:	4617      	mov	r7, r2
 800d09e:	8183      	strh	r3, [r0, #12]
 800d0a0:	460c      	mov	r4, r1
 800d0a2:	46a8      	mov	r8, r5
 800d0a4:	4621      	mov	r1, r4
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	3501      	adds	r5, #1
 800d0aa:	f006 fc99 	bl	80139e0 <put_memory>
 800d0ae:	42af      	cmp	r7, r5
 800d0b0:	60a4      	str	r4, [r4, #8]
 800d0b2:	f884 800c 	strb.w	r8, [r4, #12]
 800d0b6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800d0ba:	d1f3      	bne.n	800d0a4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800d0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop

0800d0c4 <rmw_uxrce_init_wait_set_memory>:
 800d0c4:	b1e2      	cbz	r2, 800d100 <rmw_uxrce_init_wait_set_memory+0x3c>
 800d0c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ca:	7b05      	ldrb	r5, [r0, #12]
 800d0cc:	4606      	mov	r6, r0
 800d0ce:	b9ad      	cbnz	r5, 800d0fc <rmw_uxrce_init_wait_set_memory+0x38>
 800d0d0:	231c      	movs	r3, #28
 800d0d2:	e9c0 5500 	strd	r5, r5, [r0]
 800d0d6:	6083      	str	r3, [r0, #8]
 800d0d8:	f240 1301 	movw	r3, #257	@ 0x101
 800d0dc:	4617      	mov	r7, r2
 800d0de:	8183      	strh	r3, [r0, #12]
 800d0e0:	460c      	mov	r4, r1
 800d0e2:	46a8      	mov	r8, r5
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	3501      	adds	r5, #1
 800d0ea:	f006 fc79 	bl	80139e0 <put_memory>
 800d0ee:	42af      	cmp	r7, r5
 800d0f0:	60a4      	str	r4, [r4, #8]
 800d0f2:	f884 800c 	strb.w	r8, [r4, #12]
 800d0f6:	f104 041c 	add.w	r4, r4, #28
 800d0fa:	d1f3      	bne.n	800d0e4 <rmw_uxrce_init_wait_set_memory+0x20>
 800d0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop

0800d104 <rmw_uxrce_init_guard_condition_memory>:
 800d104:	b1e2      	cbz	r2, 800d140 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800d106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d10a:	7b05      	ldrb	r5, [r0, #12]
 800d10c:	4606      	mov	r6, r0
 800d10e:	b9ad      	cbnz	r5, 800d13c <rmw_uxrce_init_guard_condition_memory+0x38>
 800d110:	2320      	movs	r3, #32
 800d112:	e9c0 5500 	strd	r5, r5, [r0]
 800d116:	6083      	str	r3, [r0, #8]
 800d118:	f240 1301 	movw	r3, #257	@ 0x101
 800d11c:	4617      	mov	r7, r2
 800d11e:	8183      	strh	r3, [r0, #12]
 800d120:	460c      	mov	r4, r1
 800d122:	46a8      	mov	r8, r5
 800d124:	4621      	mov	r1, r4
 800d126:	4630      	mov	r0, r6
 800d128:	3501      	adds	r5, #1
 800d12a:	f006 fc59 	bl	80139e0 <put_memory>
 800d12e:	42af      	cmp	r7, r5
 800d130:	60a4      	str	r4, [r4, #8]
 800d132:	f884 800c 	strb.w	r8, [r4, #12]
 800d136:	f104 0420 	add.w	r4, r4, #32
 800d13a:	d1f3      	bne.n	800d124 <rmw_uxrce_init_guard_condition_memory+0x20>
 800d13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d140:	4770      	bx	lr
 800d142:	bf00      	nop

0800d144 <rmw_uxrce_fini_session_memory>:
 800d144:	4601      	mov	r1, r0
 800d146:	4801      	ldr	r0, [pc, #4]	@ (800d14c <rmw_uxrce_fini_session_memory+0x8>)
 800d148:	f006 bc4a 	b.w	80139e0 <put_memory>
 800d14c:	2000dd14 	.word	0x2000dd14

0800d150 <rmw_uxrce_fini_node_memory>:
 800d150:	b538      	push	{r3, r4, r5, lr}
 800d152:	4604      	mov	r4, r0
 800d154:	6800      	ldr	r0, [r0, #0]
 800d156:	b128      	cbz	r0, 800d164 <rmw_uxrce_fini_node_memory+0x14>
 800d158:	4b07      	ldr	r3, [pc, #28]	@ (800d178 <rmw_uxrce_fini_node_memory+0x28>)
 800d15a:	6819      	ldr	r1, [r3, #0]
 800d15c:	f7f3 f840 	bl	80001e0 <strcmp>
 800d160:	b940      	cbnz	r0, 800d174 <rmw_uxrce_fini_node_memory+0x24>
 800d162:	6020      	str	r0, [r4, #0]
 800d164:	6861      	ldr	r1, [r4, #4]
 800d166:	b129      	cbz	r1, 800d174 <rmw_uxrce_fini_node_memory+0x24>
 800d168:	2500      	movs	r5, #0
 800d16a:	4804      	ldr	r0, [pc, #16]	@ (800d17c <rmw_uxrce_fini_node_memory+0x2c>)
 800d16c:	610d      	str	r5, [r1, #16]
 800d16e:	f006 fc37 	bl	80139e0 <put_memory>
 800d172:	6065      	str	r5, [r4, #4]
 800d174:	bd38      	pop	{r3, r4, r5, pc}
 800d176:	bf00      	nop
 800d178:	08019314 	.word	0x08019314
 800d17c:	2000dce4 	.word	0x2000dce4

0800d180 <rmw_uxrce_fini_publisher_memory>:
 800d180:	b510      	push	{r4, lr}
 800d182:	4604      	mov	r4, r0
 800d184:	6800      	ldr	r0, [r0, #0]
 800d186:	b128      	cbz	r0, 800d194 <rmw_uxrce_fini_publisher_memory+0x14>
 800d188:	4b06      	ldr	r3, [pc, #24]	@ (800d1a4 <rmw_uxrce_fini_publisher_memory+0x24>)
 800d18a:	6819      	ldr	r1, [r3, #0]
 800d18c:	f7f3 f828 	bl	80001e0 <strcmp>
 800d190:	b938      	cbnz	r0, 800d1a2 <rmw_uxrce_fini_publisher_memory+0x22>
 800d192:	6020      	str	r0, [r4, #0]
 800d194:	6861      	ldr	r1, [r4, #4]
 800d196:	b121      	cbz	r1, 800d1a2 <rmw_uxrce_fini_publisher_memory+0x22>
 800d198:	4803      	ldr	r0, [pc, #12]	@ (800d1a8 <rmw_uxrce_fini_publisher_memory+0x28>)
 800d19a:	f006 fc21 	bl	80139e0 <put_memory>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	6063      	str	r3, [r4, #4]
 800d1a2:	bd10      	pop	{r4, pc}
 800d1a4:	08019314 	.word	0x08019314
 800d1a8:	2000dcf4 	.word	0x2000dcf4

0800d1ac <rmw_uxrce_fini_subscription_memory>:
 800d1ac:	b510      	push	{r4, lr}
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	6800      	ldr	r0, [r0, #0]
 800d1b2:	b128      	cbz	r0, 800d1c0 <rmw_uxrce_fini_subscription_memory+0x14>
 800d1b4:	4b06      	ldr	r3, [pc, #24]	@ (800d1d0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800d1b6:	6819      	ldr	r1, [r3, #0]
 800d1b8:	f7f3 f812 	bl	80001e0 <strcmp>
 800d1bc:	b938      	cbnz	r0, 800d1ce <rmw_uxrce_fini_subscription_memory+0x22>
 800d1be:	6020      	str	r0, [r4, #0]
 800d1c0:	6861      	ldr	r1, [r4, #4]
 800d1c2:	b121      	cbz	r1, 800d1ce <rmw_uxrce_fini_subscription_memory+0x22>
 800d1c4:	4803      	ldr	r0, [pc, #12]	@ (800d1d4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800d1c6:	f006 fc0b 	bl	80139e0 <put_memory>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	6063      	str	r3, [r4, #4]
 800d1ce:	bd10      	pop	{r4, pc}
 800d1d0:	08019314 	.word	0x08019314
 800d1d4:	2000dd34 	.word	0x2000dd34

0800d1d8 <rmw_uxrce_fini_service_memory>:
 800d1d8:	b510      	push	{r4, lr}
 800d1da:	4604      	mov	r4, r0
 800d1dc:	6800      	ldr	r0, [r0, #0]
 800d1de:	b128      	cbz	r0, 800d1ec <rmw_uxrce_fini_service_memory+0x14>
 800d1e0:	4b06      	ldr	r3, [pc, #24]	@ (800d1fc <rmw_uxrce_fini_service_memory+0x24>)
 800d1e2:	6819      	ldr	r1, [r3, #0]
 800d1e4:	f7f2 fffc 	bl	80001e0 <strcmp>
 800d1e8:	b938      	cbnz	r0, 800d1fa <rmw_uxrce_fini_service_memory+0x22>
 800d1ea:	6020      	str	r0, [r4, #0]
 800d1ec:	6861      	ldr	r1, [r4, #4]
 800d1ee:	b121      	cbz	r1, 800d1fa <rmw_uxrce_fini_service_memory+0x22>
 800d1f0:	4803      	ldr	r0, [pc, #12]	@ (800d200 <rmw_uxrce_fini_service_memory+0x28>)
 800d1f2:	f006 fbf5 	bl	80139e0 <put_memory>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	6063      	str	r3, [r4, #4]
 800d1fa:	bd10      	pop	{r4, pc}
 800d1fc:	08019314 	.word	0x08019314
 800d200:	2000dd04 	.word	0x2000dd04

0800d204 <rmw_uxrce_fini_client_memory>:
 800d204:	b510      	push	{r4, lr}
 800d206:	4604      	mov	r4, r0
 800d208:	6800      	ldr	r0, [r0, #0]
 800d20a:	b128      	cbz	r0, 800d218 <rmw_uxrce_fini_client_memory+0x14>
 800d20c:	4b06      	ldr	r3, [pc, #24]	@ (800d228 <rmw_uxrce_fini_client_memory+0x24>)
 800d20e:	6819      	ldr	r1, [r3, #0]
 800d210:	f7f2 ffe6 	bl	80001e0 <strcmp>
 800d214:	b938      	cbnz	r0, 800d226 <rmw_uxrce_fini_client_memory+0x22>
 800d216:	6020      	str	r0, [r4, #0]
 800d218:	6861      	ldr	r1, [r4, #4]
 800d21a:	b121      	cbz	r1, 800d226 <rmw_uxrce_fini_client_memory+0x22>
 800d21c:	4803      	ldr	r0, [pc, #12]	@ (800d22c <rmw_uxrce_fini_client_memory+0x28>)
 800d21e:	f006 fbdf 	bl	80139e0 <put_memory>
 800d222:	2300      	movs	r3, #0
 800d224:	6063      	str	r3, [r4, #4]
 800d226:	bd10      	pop	{r4, pc}
 800d228:	08019314 	.word	0x08019314
 800d22c:	20009418 	.word	0x20009418

0800d230 <rmw_uxrce_fini_topic_memory>:
 800d230:	b510      	push	{r4, lr}
 800d232:	4604      	mov	r4, r0
 800d234:	4621      	mov	r1, r4
 800d236:	4803      	ldr	r0, [pc, #12]	@ (800d244 <rmw_uxrce_fini_topic_memory+0x14>)
 800d238:	f006 fbd2 	bl	80139e0 <put_memory>
 800d23c:	2300      	movs	r3, #0
 800d23e:	61a3      	str	r3, [r4, #24]
 800d240:	bd10      	pop	{r4, pc}
 800d242:	bf00      	nop
 800d244:	2000dd44 	.word	0x2000dd44

0800d248 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800d248:	b082      	sub	sp, #8
 800d24a:	b530      	push	{r4, r5, lr}
 800d24c:	4925      	ldr	r1, [pc, #148]	@ (800d2e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d24e:	680d      	ldr	r5, [r1, #0]
 800d250:	ac03      	add	r4, sp, #12
 800d252:	e884 000c 	stmia.w	r4, {r2, r3}
 800d256:	461c      	mov	r4, r3
 800d258:	2d00      	cmp	r5, #0
 800d25a:	d041      	beq.n	800d2e0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800d25c:	462b      	mov	r3, r5
 800d25e:	2100      	movs	r1, #0
 800d260:	689a      	ldr	r2, [r3, #8]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800d268:	4290      	cmp	r0, r2
 800d26a:	bf08      	it	eq
 800d26c:	3101      	addeq	r1, #1
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d1f6      	bne.n	800d260 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800d272:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d276:	2b02      	cmp	r3, #2
 800d278:	d029      	beq.n	800d2ce <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d27a:	d907      	bls.n	800d28c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d27c:	2b03      	cmp	r3, #3
 800d27e:	d005      	beq.n	800d28c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d280:	2100      	movs	r1, #0
 800d282:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d286:	4608      	mov	r0, r1
 800d288:	b002      	add	sp, #8
 800d28a:	4770      	bx	lr
 800d28c:	b314      	cbz	r4, 800d2d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d28e:	428c      	cmp	r4, r1
 800d290:	d820      	bhi.n	800d2d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d292:	2d00      	cmp	r5, #0
 800d294:	d0f4      	beq.n	800d280 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d296:	2100      	movs	r1, #0
 800d298:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800d29c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800d2a0:	e002      	b.n	800d2a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800d2a2:	686d      	ldr	r5, [r5, #4]
 800d2a4:	2d00      	cmp	r5, #0
 800d2a6:	d0ec      	beq.n	800d282 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800d2a8:	68ab      	ldr	r3, [r5, #8]
 800d2aa:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800d2ae:	4290      	cmp	r0, r2
 800d2b0:	d1f7      	bne.n	800d2a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d2b2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800d2b6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800d2ba:	4562      	cmp	r2, ip
 800d2bc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800d2c0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800d2c4:	daed      	bge.n	800d2a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d2c6:	4694      	mov	ip, r2
 800d2c8:	461c      	mov	r4, r3
 800d2ca:	4629      	mov	r1, r5
 800d2cc:	e7e9      	b.n	800d2a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d2ce:	b10c      	cbz	r4, 800d2d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d2d0:	428c      	cmp	r4, r1
 800d2d2:	d9d5      	bls.n	800d280 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d2d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2d8:	4802      	ldr	r0, [pc, #8]	@ (800d2e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d2da:	b002      	add	sp, #8
 800d2dc:	f006 bb70 	b.w	80139c0 <get_memory>
 800d2e0:	4629      	mov	r1, r5
 800d2e2:	e7c6      	b.n	800d272 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800d2e4:	2000dd24 	.word	0x2000dd24

0800d2e8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800d2e8:	4b11      	ldr	r3, [pc, #68]	@ (800d330 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	b530      	push	{r4, r5, lr}
 800d2ee:	b1e3      	cbz	r3, 800d32a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800d2f0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800d2f4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800d2f8:	2400      	movs	r4, #0
 800d2fa:	e001      	b.n	800d300 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	b193      	cbz	r3, 800d326 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800d300:	689a      	ldr	r2, [r3, #8]
 800d302:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800d306:	4288      	cmp	r0, r1
 800d308:	d1f8      	bne.n	800d2fc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d30a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800d30e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800d312:	4571      	cmp	r1, lr
 800d314:	eb72 050c 	sbcs.w	r5, r2, ip
 800d318:	daf0      	bge.n	800d2fc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d31a:	461c      	mov	r4, r3
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	468e      	mov	lr, r1
 800d320:	4694      	mov	ip, r2
 800d322:	2b00      	cmp	r3, #0
 800d324:	d1ec      	bne.n	800d300 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d326:	4620      	mov	r0, r4
 800d328:	bd30      	pop	{r4, r5, pc}
 800d32a:	461c      	mov	r4, r3
 800d32c:	4620      	mov	r0, r4
 800d32e:	bd30      	pop	{r4, r5, pc}
 800d330:	2000dd24 	.word	0x2000dd24
 800d334:	00000000 	.word	0x00000000

0800d338 <rmw_uxrce_clean_expired_static_input_buffer>:
 800d338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33c:	4b3c      	ldr	r3, [pc, #240]	@ (800d430 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d33e:	ed2d 8b06 	vpush	{d8-d10}
 800d342:	681f      	ldr	r7, [r3, #0]
 800d344:	b08d      	sub	sp, #52	@ 0x34
 800d346:	f007 fc79 	bl	8014c3c <rmw_uros_epoch_nanos>
 800d34a:	2f00      	cmp	r7, #0
 800d34c:	d05d      	beq.n	800d40a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d34e:	46b8      	mov	r8, r7
 800d350:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800d418 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800d354:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d358:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d35c:	2b04      	cmp	r3, #4
 800d35e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800d420 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800d362:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800d428 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800d366:	4681      	mov	r9, r0
 800d368:	468a      	mov	sl, r1
 800d36a:	ac04      	add	r4, sp, #16
 800d36c:	d03f      	beq.n	800d3ee <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d36e:	2b05      	cmp	r3, #5
 800d370:	d044      	beq.n	800d3fc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800d372:	2b03      	cmp	r3, #3
 800d374:	d03b      	beq.n	800d3ee <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d376:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d37a:	ed8d ab06 	vstr	d10, [sp, #24]
 800d37e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800d382:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800d386:	ab08      	add	r3, sp, #32
 800d388:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d38a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d38e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d392:	f006 f949 	bl	8013628 <rmw_time_equal>
 800d396:	b118      	cbz	r0, 800d3a0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800d398:	ed8d 9b04 	vstr	d9, [sp, #16]
 800d39c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d3a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d3a4:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800d3a8:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800d3ac:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800d3b0:	f006 f98e 	bl	80136d0 <rmw_time_total_nsec>
 800d3b4:	1830      	adds	r0, r6, r0
 800d3b6:	eb47 0101 	adc.w	r1, r7, r1
 800d3ba:	4548      	cmp	r0, r9
 800d3bc:	eb71 030a 	sbcs.w	r3, r1, sl
 800d3c0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800d3c4:	db05      	blt.n	800d3d2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800d3c6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800d3ca:	4591      	cmp	r9, r2
 800d3cc:	eb7a 0303 	sbcs.w	r3, sl, r3
 800d3d0:	da03      	bge.n	800d3da <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800d3d2:	4817      	ldr	r0, [pc, #92]	@ (800d430 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d3d4:	4641      	mov	r1, r8
 800d3d6:	f006 fb03 	bl	80139e0 <put_memory>
 800d3da:	f1bb 0f00 	cmp.w	fp, #0
 800d3de:	d014      	beq.n	800d40a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d3e0:	46d8      	mov	r8, fp
 800d3e2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d3e6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d3ea:	2b04      	cmp	r3, #4
 800d3ec:	d1bf      	bne.n	800d36e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800d3ee:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d3f2:	3340      	adds	r3, #64	@ 0x40
 800d3f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d3f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d3fa:	e7c0      	b.n	800d37e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d3fc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d400:	3348      	adds	r3, #72	@ 0x48
 800d402:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d404:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d408:	e7b9      	b.n	800d37e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d40a:	b00d      	add	sp, #52	@ 0x34
 800d40c:	ecbd 8b06 	vpop	{d8-d10}
 800d410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d414:	f3af 8000 	nop.w
	...
 800d420:	00000001 	.word	0x00000001
 800d424:	00000000 	.word	0x00000000
 800d428:	0000001e 	.word	0x0000001e
 800d42c:	00000000 	.word	0x00000000
 800d430:	2000dd24 	.word	0x2000dd24

0800d434 <run_xrce_session>:
 800d434:	b510      	push	{r4, lr}
 800d436:	788c      	ldrb	r4, [r1, #2]
 800d438:	b086      	sub	sp, #24
 800d43a:	2c01      	cmp	r4, #1
 800d43c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800d440:	d00c      	beq.n	800d45c <run_xrce_session+0x28>
 800d442:	4619      	mov	r1, r3
 800d444:	2301      	movs	r3, #1
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	f10d 020e 	add.w	r2, sp, #14
 800d44c:	f10d 0317 	add.w	r3, sp, #23
 800d450:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d454:	f001 f87a 	bl	800e54c <uxr_run_session_until_all_status>
 800d458:	b006      	add	sp, #24
 800d45a:	bd10      	pop	{r4, pc}
 800d45c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d460:	f000 fc8e 	bl	800dd80 <uxr_flash_output_streams>
 800d464:	4620      	mov	r0, r4
 800d466:	b006      	add	sp, #24
 800d468:	bd10      	pop	{r4, pc}
 800d46a:	bf00      	nop

0800d46c <convert_qos_profile>:
 800d46c:	7a4a      	ldrb	r2, [r1, #9]
 800d46e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800d472:	2a02      	cmp	r2, #2
 800d474:	bf18      	it	ne
 800d476:	2200      	movne	r2, #0
 800d478:	7002      	strb	r2, [r0, #0]
 800d47a:	780a      	ldrb	r2, [r1, #0]
 800d47c:	8889      	ldrh	r1, [r1, #4]
 800d47e:	8081      	strh	r1, [r0, #4]
 800d480:	f1ac 0c02 	sub.w	ip, ip, #2
 800d484:	f1a2 0202 	sub.w	r2, r2, #2
 800d488:	fabc fc8c 	clz	ip, ip
 800d48c:	fab2 f282 	clz	r2, r2
 800d490:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800d494:	0952      	lsrs	r2, r2, #5
 800d496:	f880 c001 	strb.w	ip, [r0, #1]
 800d49a:	7082      	strb	r2, [r0, #2]
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop

0800d4a0 <generate_type_name>:
 800d4a0:	b530      	push	{r4, r5, lr}
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	700b      	strb	r3, [r1, #0]
 800d4a6:	6803      	ldr	r3, [r0, #0]
 800d4a8:	b087      	sub	sp, #28
 800d4aa:	4614      	mov	r4, r2
 800d4ac:	b1d3      	cbz	r3, 800d4e4 <generate_type_name+0x44>
 800d4ae:	4a0f      	ldr	r2, [pc, #60]	@ (800d4ec <generate_type_name+0x4c>)
 800d4b0:	4615      	mov	r5, r2
 800d4b2:	9203      	str	r2, [sp, #12]
 800d4b4:	9500      	str	r5, [sp, #0]
 800d4b6:	6842      	ldr	r2, [r0, #4]
 800d4b8:	480d      	ldr	r0, [pc, #52]	@ (800d4f0 <generate_type_name+0x50>)
 800d4ba:	9001      	str	r0, [sp, #4]
 800d4bc:	4608      	mov	r0, r1
 800d4be:	490d      	ldr	r1, [pc, #52]	@ (800d4f4 <generate_type_name+0x54>)
 800d4c0:	9204      	str	r2, [sp, #16]
 800d4c2:	9105      	str	r1, [sp, #20]
 800d4c4:	9102      	str	r1, [sp, #8]
 800d4c6:	4a0c      	ldr	r2, [pc, #48]	@ (800d4f8 <generate_type_name+0x58>)
 800d4c8:	4621      	mov	r1, r4
 800d4ca:	f00a f8b7 	bl	801763c <sniprintf>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	db05      	blt.n	800d4de <generate_type_name+0x3e>
 800d4d2:	4284      	cmp	r4, r0
 800d4d4:	bfd4      	ite	le
 800d4d6:	2000      	movle	r0, #0
 800d4d8:	2001      	movgt	r0, #1
 800d4da:	b007      	add	sp, #28
 800d4dc:	bd30      	pop	{r4, r5, pc}
 800d4de:	2000      	movs	r0, #0
 800d4e0:	b007      	add	sp, #28
 800d4e2:	bd30      	pop	{r4, r5, pc}
 800d4e4:	4b05      	ldr	r3, [pc, #20]	@ (800d4fc <generate_type_name+0x5c>)
 800d4e6:	4a01      	ldr	r2, [pc, #4]	@ (800d4ec <generate_type_name+0x4c>)
 800d4e8:	461d      	mov	r5, r3
 800d4ea:	e7e2      	b.n	800d4b2 <generate_type_name+0x12>
 800d4ec:	08018bf0 	.word	0x08018bf0
 800d4f0:	08018c08 	.word	0x08018c08
 800d4f4:	08018c04 	.word	0x08018c04
 800d4f8:	08018bf4 	.word	0x08018bf4
 800d4fc:	080190ec 	.word	0x080190ec

0800d500 <generate_topic_name>:
 800d500:	b510      	push	{r4, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	4614      	mov	r4, r2
 800d506:	9000      	str	r0, [sp, #0]
 800d508:	4b08      	ldr	r3, [pc, #32]	@ (800d52c <generate_topic_name+0x2c>)
 800d50a:	4a09      	ldr	r2, [pc, #36]	@ (800d530 <generate_topic_name+0x30>)
 800d50c:	4608      	mov	r0, r1
 800d50e:	4621      	mov	r1, r4
 800d510:	f00a f894 	bl	801763c <sniprintf>
 800d514:	2800      	cmp	r0, #0
 800d516:	db05      	blt.n	800d524 <generate_topic_name+0x24>
 800d518:	4284      	cmp	r4, r0
 800d51a:	bfd4      	ite	le
 800d51c:	2000      	movle	r0, #0
 800d51e:	2001      	movgt	r0, #1
 800d520:	b002      	add	sp, #8
 800d522:	bd10      	pop	{r4, pc}
 800d524:	2000      	movs	r0, #0
 800d526:	b002      	add	sp, #8
 800d528:	bd10      	pop	{r4, pc}
 800d52a:	bf00      	nop
 800d52c:	08018c14 	.word	0x08018c14
 800d530:	08018c0c 	.word	0x08018c0c

0800d534 <is_uxrce_rmw_identifier_valid>:
 800d534:	b510      	push	{r4, lr}
 800d536:	4604      	mov	r4, r0
 800d538:	b140      	cbz	r0, 800d54c <is_uxrce_rmw_identifier_valid+0x18>
 800d53a:	f006 faa9 	bl	8013a90 <rmw_get_implementation_identifier>
 800d53e:	4601      	mov	r1, r0
 800d540:	4620      	mov	r0, r4
 800d542:	f7f2 fe4d 	bl	80001e0 <strcmp>
 800d546:	fab0 f080 	clz	r0, r0
 800d54a:	0940      	lsrs	r0, r0, #5
 800d54c:	bd10      	pop	{r4, pc}
 800d54e:	bf00      	nop

0800d550 <get_message_typesupport_handle>:
 800d550:	6883      	ldr	r3, [r0, #8]
 800d552:	4718      	bx	r3

0800d554 <get_message_typesupport_handle_function>:
 800d554:	b510      	push	{r4, lr}
 800d556:	4604      	mov	r4, r0
 800d558:	6800      	ldr	r0, [r0, #0]
 800d55a:	f7f2 fe41 	bl	80001e0 <strcmp>
 800d55e:	2800      	cmp	r0, #0
 800d560:	bf0c      	ite	eq
 800d562:	4620      	moveq	r0, r4
 800d564:	2000      	movne	r0, #0
 800d566:	bd10      	pop	{r4, pc}

0800d568 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800d568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d56c:	6805      	ldr	r5, [r0, #0]
 800d56e:	4604      	mov	r4, r0
 800d570:	4628      	mov	r0, r5
 800d572:	460e      	mov	r6, r1
 800d574:	f7f2 fe34 	bl	80001e0 <strcmp>
 800d578:	b1c8      	cbz	r0, 800d5ae <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800d57a:	4b11      	ldr	r3, [pc, #68]	@ (800d5c0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	429d      	cmp	r5, r3
 800d580:	d112      	bne.n	800d5a8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d582:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800d586:	f8d8 4000 	ldr.w	r4, [r8]
 800d58a:	b16c      	cbz	r4, 800d5a8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d58c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d590:	2700      	movs	r7, #0
 800d592:	3d04      	subs	r5, #4
 800d594:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800d598:	4631      	mov	r1, r6
 800d59a:	f7f2 fe21 	bl	80001e0 <strcmp>
 800d59e:	00bb      	lsls	r3, r7, #2
 800d5a0:	b140      	cbz	r0, 800d5b4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800d5a2:	3701      	adds	r7, #1
 800d5a4:	42bc      	cmp	r4, r7
 800d5a6:	d1f5      	bne.n	800d594 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d5b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5bc:	58d3      	ldr	r3, [r2, r3]
 800d5be:	4718      	bx	r3
 800d5c0:	200001d0 	.word	0x200001d0

0800d5c4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800d5c4:	4b04      	ldr	r3, [pc, #16]	@ (800d5d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	b10a      	cbz	r2, 800d5ce <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0xa>
 800d5ca:	4803      	ldr	r0, [pc, #12]	@ (800d5d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800d5cc:	4770      	bx	lr
 800d5ce:	4a03      	ldr	r2, [pc, #12]	@ (800d5dc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x18>)
 800d5d0:	4801      	ldr	r0, [pc, #4]	@ (800d5d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800d5d2:	6812      	ldr	r2, [r2, #0]
 800d5d4:	601a      	str	r2, [r3, #0]
 800d5d6:	4770      	bx	lr
 800d5d8:	200001e0 	.word	0x200001e0
 800d5dc:	200001d0 	.word	0x200001d0

0800d5e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800d5e0:	4a02      	ldr	r2, [pc, #8]	@ (800d5ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0xc>)
 800d5e2:	4b03      	ldr	r3, [pc, #12]	@ (800d5f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16+0x10>)
 800d5e4:	6812      	ldr	r2, [r2, #0]
 800d5e6:	601a      	str	r2, [r3, #0]
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	200001d0 	.word	0x200001d0
 800d5f0:	200001e0 	.word	0x200001e0

0800d5f4 <std_msgs__msg__Int16__rosidl_typesupport_introspection_c__Int16_init_function>:
 800d5f4:	f007 bb30 	b.w	8014c58 <std_msgs__msg__Int16__init>

0800d5f8 <std_msgs__msg__Int16__rosidl_typesupport_introspection_c__Int16_fini_function>:
 800d5f8:	f007 bb32 	b.w	8014c60 <std_msgs__msg__Int16__fini>

0800d5fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800d5fc:	4b04      	ldr	r3, [pc, #16]	@ (800d610 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	b10a      	cbz	r2, 800d606 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0xa>
 800d602:	4803      	ldr	r0, [pc, #12]	@ (800d610 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800d604:	4770      	bx	lr
 800d606:	4a03      	ldr	r2, [pc, #12]	@ (800d614 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x18>)
 800d608:	4801      	ldr	r0, [pc, #4]	@ (800d610 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int16+0x14>)
 800d60a:	6812      	ldr	r2, [r2, #0]
 800d60c:	601a      	str	r2, [r3, #0]
 800d60e:	4770      	bx	lr
 800d610:	20000228 	.word	0x20000228
 800d614:	200001d4 	.word	0x200001d4

0800d618 <_Int16__max_serialized_size>:
 800d618:	b508      	push	{r3, lr}
 800d61a:	2102      	movs	r1, #2
 800d61c:	2000      	movs	r0, #0
 800d61e:	f7fe f91b 	bl	800b858 <ucdr_alignment>
 800d622:	3002      	adds	r0, #2
 800d624:	bd08      	pop	{r3, pc}
 800d626:	bf00      	nop

0800d628 <_Int16__cdr_deserialize>:
 800d628:	b109      	cbz	r1, 800d62e <_Int16__cdr_deserialize+0x6>
 800d62a:	f7fd bd8b 	b.w	800b144 <ucdr_deserialize_int16_t>
 800d62e:	4608      	mov	r0, r1
 800d630:	4770      	bx	lr
 800d632:	bf00      	nop

0800d634 <get_serialized_size_std_msgs__msg__Int16>:
 800d634:	b138      	cbz	r0, 800d646 <get_serialized_size_std_msgs__msg__Int16+0x12>
 800d636:	b508      	push	{r3, lr}
 800d638:	460b      	mov	r3, r1
 800d63a:	4618      	mov	r0, r3
 800d63c:	2102      	movs	r1, #2
 800d63e:	f7fe f90b 	bl	800b858 <ucdr_alignment>
 800d642:	3002      	adds	r0, #2
 800d644:	bd08      	pop	{r3, pc}
 800d646:	4770      	bx	lr

0800d648 <_Int16__cdr_serialize>:
 800d648:	460a      	mov	r2, r1
 800d64a:	b120      	cbz	r0, 800d656 <_Int16__cdr_serialize+0xe>
 800d64c:	f9b0 1000 	ldrsh.w	r1, [r0]
 800d650:	4610      	mov	r0, r2
 800d652:	f7fd bcf7 	b.w	800b044 <ucdr_serialize_int16_t>
 800d656:	4770      	bx	lr

0800d658 <_Int16__get_serialized_size>:
 800d658:	b130      	cbz	r0, 800d668 <_Int16__get_serialized_size+0x10>
 800d65a:	b508      	push	{r3, lr}
 800d65c:	2102      	movs	r1, #2
 800d65e:	2000      	movs	r0, #0
 800d660:	f7fe f8fa 	bl	800b858 <ucdr_alignment>
 800d664:	3002      	adds	r0, #2
 800d666:	bd08      	pop	{r3, pc}
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop

0800d66c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int16>:
 800d66c:	4800      	ldr	r0, [pc, #0]	@ (800d670 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int16+0x4>)
 800d66e:	4770      	bx	lr
 800d670:	20000234 	.word	0x20000234

0800d674 <geometry_msgs__msg__Twist__init>:
 800d674:	b570      	push	{r4, r5, r6, lr}
 800d676:	4605      	mov	r5, r0
 800d678:	b1a8      	cbz	r0, 800d6a6 <geometry_msgs__msg__Twist__init+0x32>
 800d67a:	f000 f82b 	bl	800d6d4 <geometry_msgs__msg__Vector3__init>
 800d67e:	4604      	mov	r4, r0
 800d680:	b140      	cbz	r0, 800d694 <geometry_msgs__msg__Twist__init+0x20>
 800d682:	f105 0618 	add.w	r6, r5, #24
 800d686:	4630      	mov	r0, r6
 800d688:	f000 f824 	bl	800d6d4 <geometry_msgs__msg__Vector3__init>
 800d68c:	4604      	mov	r4, r0
 800d68e:	b168      	cbz	r0, 800d6ac <geometry_msgs__msg__Twist__init+0x38>
 800d690:	4620      	mov	r0, r4
 800d692:	bd70      	pop	{r4, r5, r6, pc}
 800d694:	4628      	mov	r0, r5
 800d696:	f000 f821 	bl	800d6dc <geometry_msgs__msg__Vector3__fini>
 800d69a:	f105 0018 	add.w	r0, r5, #24
 800d69e:	f000 f81d 	bl	800d6dc <geometry_msgs__msg__Vector3__fini>
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	bd70      	pop	{r4, r5, r6, pc}
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	bd70      	pop	{r4, r5, r6, pc}
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	f000 f815 	bl	800d6dc <geometry_msgs__msg__Vector3__fini>
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	f000 f812 	bl	800d6dc <geometry_msgs__msg__Vector3__fini>
 800d6b8:	e7ea      	b.n	800d690 <geometry_msgs__msg__Twist__init+0x1c>
 800d6ba:	bf00      	nop

0800d6bc <geometry_msgs__msg__Twist__fini>:
 800d6bc:	b148      	cbz	r0, 800d6d2 <geometry_msgs__msg__Twist__fini+0x16>
 800d6be:	b510      	push	{r4, lr}
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	f000 f80b 	bl	800d6dc <geometry_msgs__msg__Vector3__fini>
 800d6c6:	f104 0018 	add.w	r0, r4, #24
 800d6ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6ce:	f000 b805 	b.w	800d6dc <geometry_msgs__msg__Vector3__fini>
 800d6d2:	4770      	bx	lr

0800d6d4 <geometry_msgs__msg__Vector3__init>:
 800d6d4:	3800      	subs	r0, #0
 800d6d6:	bf18      	it	ne
 800d6d8:	2001      	movne	r0, #1
 800d6da:	4770      	bx	lr

0800d6dc <geometry_msgs__msg__Vector3__fini>:
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop

0800d6e0 <uxr_buffer_delete_entity>:
 800d6e0:	b510      	push	{r4, lr}
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	b08e      	sub	sp, #56	@ 0x38
 800d6e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d6ea:	2303      	movs	r3, #3
 800d6ec:	9300      	str	r3, [sp, #0]
 800d6ee:	2204      	movs	r2, #4
 800d6f0:	ab06      	add	r3, sp, #24
 800d6f2:	4604      	mov	r4, r0
 800d6f4:	9103      	str	r1, [sp, #12]
 800d6f6:	f001 f951 	bl	800e99c <uxr_prepare_stream_to_write_submessage>
 800d6fa:	b918      	cbnz	r0, 800d704 <uxr_buffer_delete_entity+0x24>
 800d6fc:	4604      	mov	r4, r0
 800d6fe:	4620      	mov	r0, r4
 800d700:	b00e      	add	sp, #56	@ 0x38
 800d702:	bd10      	pop	{r4, pc}
 800d704:	9902      	ldr	r1, [sp, #8]
 800d706:	aa05      	add	r2, sp, #20
 800d708:	4620      	mov	r0, r4
 800d70a:	f001 fa7d 	bl	800ec08 <uxr_init_base_object_request>
 800d70e:	a905      	add	r1, sp, #20
 800d710:	4604      	mov	r4, r0
 800d712:	a806      	add	r0, sp, #24
 800d714:	f002 fcce 	bl	80100b4 <uxr_serialize_DELETE_Payload>
 800d718:	4620      	mov	r0, r4
 800d71a:	b00e      	add	sp, #56	@ 0x38
 800d71c:	bd10      	pop	{r4, pc}
 800d71e:	bf00      	nop

0800d720 <uxr_common_create_entity>:
 800d720:	b510      	push	{r4, lr}
 800d722:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d726:	b08c      	sub	sp, #48	@ 0x30
 800d728:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d72c:	f1bc 0f01 	cmp.w	ip, #1
 800d730:	bf0c      	ite	eq
 800d732:	f003 0201 	andeq.w	r2, r3, #1
 800d736:	2200      	movne	r2, #0
 800d738:	330e      	adds	r3, #14
 800d73a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800d73e:	9101      	str	r1, [sp, #4]
 800d740:	441a      	add	r2, r3
 800d742:	2301      	movs	r3, #1
 800d744:	9300      	str	r3, [sp, #0]
 800d746:	9903      	ldr	r1, [sp, #12]
 800d748:	ab04      	add	r3, sp, #16
 800d74a:	b292      	uxth	r2, r2
 800d74c:	4604      	mov	r4, r0
 800d74e:	f001 f925 	bl	800e99c <uxr_prepare_stream_to_write_submessage>
 800d752:	b918      	cbnz	r0, 800d75c <uxr_common_create_entity+0x3c>
 800d754:	4604      	mov	r4, r0
 800d756:	4620      	mov	r0, r4
 800d758:	b00c      	add	sp, #48	@ 0x30
 800d75a:	bd10      	pop	{r4, pc}
 800d75c:	9902      	ldr	r1, [sp, #8]
 800d75e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d760:	4620      	mov	r0, r4
 800d762:	f001 fa51 	bl	800ec08 <uxr_init_base_object_request>
 800d766:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d768:	4604      	mov	r4, r0
 800d76a:	a804      	add	r0, sp, #16
 800d76c:	f002 fbfe 	bl	800ff6c <uxr_serialize_CREATE_Payload>
 800d770:	4620      	mov	r0, r4
 800d772:	b00c      	add	sp, #48	@ 0x30
 800d774:	bd10      	pop	{r4, pc}
 800d776:	bf00      	nop

0800d778 <uxr_buffer_create_participant_bin>:
 800d778:	b570      	push	{r4, r5, r6, lr}
 800d77a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800d77e:	ac11      	add	r4, sp, #68	@ 0x44
 800d780:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800d784:	2303      	movs	r3, #3
 800d786:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d78a:	7223      	strb	r3, [r4, #8]
 800d78c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800d78e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800d792:	2201      	movs	r2, #1
 800d794:	2100      	movs	r1, #0
 800d796:	4605      	mov	r5, r0
 800d798:	7122      	strb	r2, [r4, #4]
 800d79a:	f88d 1014 	strb.w	r1, [sp, #20]
 800d79e:	b1cb      	cbz	r3, 800d7d4 <uxr_buffer_create_participant_bin+0x5c>
 800d7a0:	f88d 201c 	strb.w	r2, [sp, #28]
 800d7a4:	9308      	str	r3, [sp, #32]
 800d7a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d7aa:	a915      	add	r1, sp, #84	@ 0x54
 800d7ac:	a809      	add	r0, sp, #36	@ 0x24
 800d7ae:	f7fe f84f 	bl	800b850 <ucdr_init_buffer>
 800d7b2:	a905      	add	r1, sp, #20
 800d7b4:	a809      	add	r0, sp, #36	@ 0x24
 800d7b6:	f001 ffbb 	bl	800f730 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d7ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7bc:	9600      	str	r6, [sp, #0]
 800d7be:	9401      	str	r4, [sp, #4]
 800d7c0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d7c4:	60e3      	str	r3, [r4, #12]
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	f7ff ffa9 	bl	800d720 <uxr_common_create_entity>
 800d7ce:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800d7d2:	bd70      	pop	{r4, r5, r6, pc}
 800d7d4:	f88d 301c 	strb.w	r3, [sp, #28]
 800d7d8:	e7e5      	b.n	800d7a6 <uxr_buffer_create_participant_bin+0x2e>
 800d7da:	bf00      	nop

0800d7dc <uxr_buffer_create_topic_bin>:
 800d7dc:	b570      	push	{r4, r5, r6, lr}
 800d7de:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800d7e2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d7e6:	9105      	str	r1, [sp, #20]
 800d7e8:	4605      	mov	r5, r0
 800d7ea:	a997      	add	r1, sp, #604	@ 0x25c
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	2302      	movs	r3, #2
 800d7f0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800d7f4:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800d7f8:	f000 f996 	bl	800db28 <uxr_object_id_to_raw>
 800d7fc:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800d7fe:	9306      	str	r3, [sp, #24]
 800d800:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800d802:	930a      	str	r3, [sp, #40]	@ 0x28
 800d804:	2303      	movs	r3, #3
 800d806:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d80a:	2301      	movs	r3, #1
 800d80c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d810:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800d814:	a917      	add	r1, sp, #92	@ 0x5c
 800d816:	2300      	movs	r3, #0
 800d818:	a80b      	add	r0, sp, #44	@ 0x2c
 800d81a:	f88d 301c 	strb.w	r3, [sp, #28]
 800d81e:	f7fe f817 	bl	800b850 <ucdr_init_buffer>
 800d822:	a906      	add	r1, sp, #24
 800d824:	a80b      	add	r0, sp, #44	@ 0x2c
 800d826:	f001 ffa5 	bl	800f774 <uxr_serialize_OBJK_Topic_Binary>
 800d82a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d82c:	9316      	str	r3, [sp, #88]	@ 0x58
 800d82e:	ac13      	add	r4, sp, #76	@ 0x4c
 800d830:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d834:	9600      	str	r6, [sp, #0]
 800d836:	9401      	str	r4, [sp, #4]
 800d838:	b29b      	uxth	r3, r3
 800d83a:	4628      	mov	r0, r5
 800d83c:	f7ff ff70 	bl	800d720 <uxr_common_create_entity>
 800d840:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800d844:	bd70      	pop	{r4, r5, r6, pc}
 800d846:	bf00      	nop

0800d848 <uxr_buffer_create_publisher_bin>:
 800d848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d84a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800d84e:	4605      	mov	r5, r0
 800d850:	9105      	str	r1, [sp, #20]
 800d852:	4618      	mov	r0, r3
 800d854:	2603      	movs	r6, #3
 800d856:	a992      	add	r1, sp, #584	@ 0x248
 800d858:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d85c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800d860:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800d864:	f000 f960 	bl	800db28 <uxr_object_id_to_raw>
 800d868:	2300      	movs	r3, #0
 800d86a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d86e:	a912      	add	r1, sp, #72	@ 0x48
 800d870:	a806      	add	r0, sp, #24
 800d872:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d876:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d87a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800d87e:	f7fd ffe7 	bl	800b850 <ucdr_init_buffer>
 800d882:	a993      	add	r1, sp, #588	@ 0x24c
 800d884:	a806      	add	r0, sp, #24
 800d886:	f002 f829 	bl	800f8dc <uxr_serialize_OBJK_Publisher_Binary>
 800d88a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d88c:	9311      	str	r3, [sp, #68]	@ 0x44
 800d88e:	ac0e      	add	r4, sp, #56	@ 0x38
 800d890:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d894:	9700      	str	r7, [sp, #0]
 800d896:	9401      	str	r4, [sp, #4]
 800d898:	b29b      	uxth	r3, r3
 800d89a:	4628      	mov	r0, r5
 800d89c:	f7ff ff40 	bl	800d720 <uxr_common_create_entity>
 800d8a0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800d8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8a6:	bf00      	nop

0800d8a8 <uxr_buffer_create_subscriber_bin>:
 800d8a8:	b570      	push	{r4, r5, r6, lr}
 800d8aa:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800d8ae:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d8b2:	9105      	str	r1, [sp, #20]
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	a992      	add	r1, sp, #584	@ 0x248
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	2304      	movs	r3, #4
 800d8bc:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800d8c0:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800d8c4:	f000 f930 	bl	800db28 <uxr_object_id_to_raw>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8ce:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d8d2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d8d6:	a912      	add	r1, sp, #72	@ 0x48
 800d8d8:	2303      	movs	r3, #3
 800d8da:	a806      	add	r0, sp, #24
 800d8dc:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800d8e0:	f7fd ffb6 	bl	800b850 <ucdr_init_buffer>
 800d8e4:	a993      	add	r1, sp, #588	@ 0x24c
 800d8e6:	a806      	add	r0, sp, #24
 800d8e8:	f002 f8a8 	bl	800fa3c <uxr_serialize_OBJK_Subscriber_Binary>
 800d8ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8ee:	9311      	str	r3, [sp, #68]	@ 0x44
 800d8f0:	ac0e      	add	r4, sp, #56	@ 0x38
 800d8f2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d8f6:	9600      	str	r6, [sp, #0]
 800d8f8:	9401      	str	r4, [sp, #4]
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	f7ff ff0f 	bl	800d720 <uxr_common_create_entity>
 800d902:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800d906:	bd70      	pop	{r4, r5, r6, pc}

0800d908 <uxr_buffer_create_datawriter_bin>:
 800d908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d90c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800d910:	ac1d      	add	r4, sp, #116	@ 0x74
 800d912:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d916:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800d91a:	9105      	str	r1, [sp, #20]
 800d91c:	4606      	mov	r6, r0
 800d91e:	a9a1      	add	r1, sp, #644	@ 0x284
 800d920:	4618      	mov	r0, r3
 800d922:	2305      	movs	r3, #5
 800d924:	7123      	strb	r3, [r4, #4]
 800d926:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800d92a:	2703      	movs	r7, #3
 800d92c:	f000 f8fc 	bl	800db28 <uxr_object_id_to_raw>
 800d930:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800d932:	7227      	strb	r7, [r4, #8]
 800d934:	a90e      	add	r1, sp, #56	@ 0x38
 800d936:	f000 f8f7 	bl	800db28 <uxr_object_id_to_raw>
 800d93a:	2300      	movs	r3, #0
 800d93c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800d940:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800d944:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800d948:	3d00      	subs	r5, #0
 800d94a:	bf18      	it	ne
 800d94c:	2501      	movne	r5, #1
 800d94e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800d952:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800d956:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d95a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d95e:	2301      	movs	r3, #1
 800d960:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800d964:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800d968:	bb8a      	cbnz	r2, 800d9ce <uxr_buffer_create_datawriter_bin+0xc6>
 800d96a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d96e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800d972:	f04f 0c13 	mov.w	ip, #19
 800d976:	250b      	movs	r5, #11
 800d978:	2221      	movs	r2, #33	@ 0x21
 800d97a:	2111      	movs	r1, #17
 800d97c:	2009      	movs	r0, #9
 800d97e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800d982:	b923      	cbnz	r3, 800d98e <uxr_buffer_create_datawriter_bin+0x86>
 800d984:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800d988:	4672      	mov	r2, lr
 800d98a:	4661      	mov	r1, ip
 800d98c:	4628      	mov	r0, r5
 800d98e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800d992:	2b01      	cmp	r3, #1
 800d994:	d025      	beq.n	800d9e2 <uxr_buffer_create_datawriter_bin+0xda>
 800d996:	2b03      	cmp	r3, #3
 800d998:	d029      	beq.n	800d9ee <uxr_buffer_create_datawriter_bin+0xe6>
 800d99a:	b32b      	cbz	r3, 800d9e8 <uxr_buffer_create_datawriter_bin+0xe0>
 800d99c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d9a0:	a921      	add	r1, sp, #132	@ 0x84
 800d9a2:	a806      	add	r0, sp, #24
 800d9a4:	f7fd ff54 	bl	800b850 <ucdr_init_buffer>
 800d9a8:	a90e      	add	r1, sp, #56	@ 0x38
 800d9aa:	a806      	add	r0, sp, #24
 800d9ac:	f002 f8f8 	bl	800fba0 <uxr_serialize_OBJK_DataWriter_Binary>
 800d9b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9b2:	f8cd 8000 	str.w	r8, [sp]
 800d9b6:	9401      	str	r4, [sp, #4]
 800d9b8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d9bc:	60e3      	str	r3, [r4, #12]
 800d9be:	4630      	mov	r0, r6
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	f7ff fead 	bl	800d720 <uxr_common_create_entity>
 800d9c6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800d9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ce:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800d9d2:	f04f 0c12 	mov.w	ip, #18
 800d9d6:	250a      	movs	r5, #10
 800d9d8:	2220      	movs	r2, #32
 800d9da:	2110      	movs	r1, #16
 800d9dc:	2008      	movs	r0, #8
 800d9de:	2702      	movs	r7, #2
 800d9e0:	e7cd      	b.n	800d97e <uxr_buffer_create_datawriter_bin+0x76>
 800d9e2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800d9e6:	e7d9      	b.n	800d99c <uxr_buffer_create_datawriter_bin+0x94>
 800d9e8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800d9ec:	e7d6      	b.n	800d99c <uxr_buffer_create_datawriter_bin+0x94>
 800d9ee:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d9f2:	e7d3      	b.n	800d99c <uxr_buffer_create_datawriter_bin+0x94>

0800d9f4 <uxr_buffer_create_datareader_bin>:
 800d9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9f8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d9fc:	ac1f      	add	r4, sp, #124	@ 0x7c
 800d9fe:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800da02:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800da06:	9105      	str	r1, [sp, #20]
 800da08:	4606      	mov	r6, r0
 800da0a:	a9a3      	add	r1, sp, #652	@ 0x28c
 800da0c:	4618      	mov	r0, r3
 800da0e:	2306      	movs	r3, #6
 800da10:	7123      	strb	r3, [r4, #4]
 800da12:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800da16:	2703      	movs	r7, #3
 800da18:	f000 f886 	bl	800db28 <uxr_object_id_to_raw>
 800da1c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800da1e:	7227      	strb	r7, [r4, #8]
 800da20:	a90e      	add	r1, sp, #56	@ 0x38
 800da22:	f000 f881 	bl	800db28 <uxr_object_id_to_raw>
 800da26:	2300      	movs	r3, #0
 800da28:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800da2c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800da30:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800da34:	3d00      	subs	r5, #0
 800da36:	bf18      	it	ne
 800da38:	2501      	movne	r5, #1
 800da3a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800da3e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800da42:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800da46:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800da4a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800da4e:	2301      	movs	r3, #1
 800da50:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800da54:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800da58:	bb8a      	cbnz	r2, 800dabe <uxr_buffer_create_datareader_bin+0xca>
 800da5a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800da5e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800da62:	f04f 0c13 	mov.w	ip, #19
 800da66:	250b      	movs	r5, #11
 800da68:	2221      	movs	r2, #33	@ 0x21
 800da6a:	2111      	movs	r1, #17
 800da6c:	2009      	movs	r0, #9
 800da6e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800da72:	b923      	cbnz	r3, 800da7e <uxr_buffer_create_datareader_bin+0x8a>
 800da74:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800da78:	4672      	mov	r2, lr
 800da7a:	4661      	mov	r1, ip
 800da7c:	4628      	mov	r0, r5
 800da7e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800da82:	2b01      	cmp	r3, #1
 800da84:	d025      	beq.n	800dad2 <uxr_buffer_create_datareader_bin+0xde>
 800da86:	2b03      	cmp	r3, #3
 800da88:	d029      	beq.n	800dade <uxr_buffer_create_datareader_bin+0xea>
 800da8a:	b32b      	cbz	r3, 800dad8 <uxr_buffer_create_datareader_bin+0xe4>
 800da8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da90:	a923      	add	r1, sp, #140	@ 0x8c
 800da92:	a806      	add	r0, sp, #24
 800da94:	f7fd fedc 	bl	800b850 <ucdr_init_buffer>
 800da98:	a90e      	add	r1, sp, #56	@ 0x38
 800da9a:	a806      	add	r0, sp, #24
 800da9c:	f002 f844 	bl	800fb28 <uxr_serialize_OBJK_DataReader_Binary>
 800daa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800daa2:	f8cd 8000 	str.w	r8, [sp]
 800daa6:	9401      	str	r4, [sp, #4]
 800daa8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800daac:	60e3      	str	r3, [r4, #12]
 800daae:	4630      	mov	r0, r6
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	f7ff fe35 	bl	800d720 <uxr_common_create_entity>
 800dab6:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800daba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dabe:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800dac2:	f04f 0c12 	mov.w	ip, #18
 800dac6:	250a      	movs	r5, #10
 800dac8:	2220      	movs	r2, #32
 800daca:	2110      	movs	r1, #16
 800dacc:	2008      	movs	r0, #8
 800dace:	2702      	movs	r7, #2
 800dad0:	e7cd      	b.n	800da6e <uxr_buffer_create_datareader_bin+0x7a>
 800dad2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800dad6:	e7d9      	b.n	800da8c <uxr_buffer_create_datareader_bin+0x98>
 800dad8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800dadc:	e7d6      	b.n	800da8c <uxr_buffer_create_datareader_bin+0x98>
 800dade:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800dae2:	e7d3      	b.n	800da8c <uxr_buffer_create_datareader_bin+0x98>

0800dae4 <uxr_object_id>:
 800dae4:	b082      	sub	sp, #8
 800dae6:	2300      	movs	r3, #0
 800dae8:	f88d 1006 	strb.w	r1, [sp, #6]
 800daec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800daf0:	f360 030f 	bfi	r3, r0, #0, #16
 800daf4:	f362 431f 	bfi	r3, r2, #16, #16
 800daf8:	4618      	mov	r0, r3
 800dafa:	b002      	add	sp, #8
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop

0800db00 <uxr_object_id_from_raw>:
 800db00:	7843      	ldrb	r3, [r0, #1]
 800db02:	7801      	ldrb	r1, [r0, #0]
 800db04:	b082      	sub	sp, #8
 800db06:	f003 020f 	and.w	r2, r3, #15
 800db0a:	f88d 2006 	strb.w	r2, [sp, #6]
 800db0e:	091b      	lsrs	r3, r3, #4
 800db10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800db14:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800db18:	2000      	movs	r0, #0
 800db1a:	f363 000f 	bfi	r0, r3, #0, #16
 800db1e:	f362 401f 	bfi	r0, r2, #16, #16
 800db22:	b002      	add	sp, #8
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop

0800db28 <uxr_object_id_to_raw>:
 800db28:	4602      	mov	r2, r0
 800db2a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800db2e:	b082      	sub	sp, #8
 800db30:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800db34:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800db38:	f881 c000 	strb.w	ip, [r1]
 800db3c:	7048      	strb	r0, [r1, #1]
 800db3e:	b002      	add	sp, #8
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop

0800db44 <on_get_fragmentation_info>:
 800db44:	b500      	push	{lr}
 800db46:	b08b      	sub	sp, #44	@ 0x2c
 800db48:	4601      	mov	r1, r0
 800db4a:	2204      	movs	r2, #4
 800db4c:	a802      	add	r0, sp, #8
 800db4e:	f7fd fe7f 	bl	800b850 <ucdr_init_buffer>
 800db52:	f10d 0305 	add.w	r3, sp, #5
 800db56:	f10d 0206 	add.w	r2, sp, #6
 800db5a:	a901      	add	r1, sp, #4
 800db5c:	a802      	add	r0, sp, #8
 800db5e:	f001 f9d5 	bl	800ef0c <uxr_read_submessage_header>
 800db62:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800db66:	2b0d      	cmp	r3, #13
 800db68:	d003      	beq.n	800db72 <on_get_fragmentation_info+0x2e>
 800db6a:	2000      	movs	r0, #0
 800db6c:	b00b      	add	sp, #44	@ 0x2c
 800db6e:	f85d fb04 	ldr.w	pc, [sp], #4
 800db72:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800db76:	f013 0f02 	tst.w	r3, #2
 800db7a:	bf14      	ite	ne
 800db7c:	2002      	movne	r0, #2
 800db7e:	2001      	moveq	r0, #1
 800db80:	b00b      	add	sp, #44	@ 0x2c
 800db82:	f85d fb04 	ldr.w	pc, [sp], #4
 800db86:	bf00      	nop

0800db88 <read_submessage_get_info>:
 800db88:	b570      	push	{r4, r5, r6, lr}
 800db8a:	2500      	movs	r5, #0
 800db8c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800db90:	4604      	mov	r4, r0
 800db92:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800db96:	460e      	mov	r6, r1
 800db98:	a810      	add	r0, sp, #64	@ 0x40
 800db9a:	4629      	mov	r1, r5
 800db9c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800dba0:	f009 fe26 	bl	80177f0 <memset>
 800dba4:	a903      	add	r1, sp, #12
 800dba6:	4630      	mov	r0, r6
 800dba8:	f002 fa70 	bl	801008c <uxr_deserialize_GET_INFO_Payload>
 800dbac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800dbb0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	f001 f81f 	bl	800ebf8 <uxr_session_header_offset>
 800dbba:	462b      	mov	r3, r5
 800dbbc:	9000      	str	r0, [sp, #0]
 800dbbe:	220c      	movs	r2, #12
 800dbc0:	a905      	add	r1, sp, #20
 800dbc2:	a808      	add	r0, sp, #32
 800dbc4:	f7fd fe32 	bl	800b82c <ucdr_init_buffer_origin_offset>
 800dbc8:	a910      	add	r1, sp, #64	@ 0x40
 800dbca:	a808      	add	r0, sp, #32
 800dbcc:	f002 fad0 	bl	8010170 <uxr_serialize_INFO_Payload>
 800dbd0:	9b08      	ldr	r3, [sp, #32]
 800dbd2:	462a      	mov	r2, r5
 800dbd4:	4629      	mov	r1, r5
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	f000 ffb8 	bl	800eb4c <uxr_stamp_session_header>
 800dbdc:	a808      	add	r0, sp, #32
 800dbde:	f7fd fe63 	bl	800b8a8 <ucdr_buffer_length>
 800dbe2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	a905      	add	r1, sp, #20
 800dbe8:	e9d3 0400 	ldrd	r0, r4, [r3]
 800dbec:	47a0      	blx	r4
 800dbee:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800dbf2:	bd70      	pop	{r4, r5, r6, pc}

0800dbf4 <write_submessage_acknack.isra.0>:
 800dbf4:	b570      	push	{r4, r5, r6, lr}
 800dbf6:	b092      	sub	sp, #72	@ 0x48
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	460e      	mov	r6, r1
 800dbfc:	4614      	mov	r4, r2
 800dbfe:	f000 fffb 	bl	800ebf8 <uxr_session_header_offset>
 800dc02:	a905      	add	r1, sp, #20
 800dc04:	9000      	str	r0, [sp, #0]
 800dc06:	2300      	movs	r3, #0
 800dc08:	a80a      	add	r0, sp, #40	@ 0x28
 800dc0a:	2211      	movs	r2, #17
 800dc0c:	f7fd fe0e 	bl	800b82c <ucdr_init_buffer_origin_offset>
 800dc10:	2218      	movs	r2, #24
 800dc12:	fb02 5404 	mla	r4, r2, r4, r5
 800dc16:	2300      	movs	r3, #0
 800dc18:	2205      	movs	r2, #5
 800dc1a:	3450      	adds	r4, #80	@ 0x50
 800dc1c:	210a      	movs	r1, #10
 800dc1e:	a80a      	add	r0, sp, #40	@ 0x28
 800dc20:	f001 f95a 	bl	800eed8 <uxr_buffer_submessage_header>
 800dc24:	a903      	add	r1, sp, #12
 800dc26:	4620      	mov	r0, r4
 800dc28:	f007 fc1c 	bl	8015464 <uxr_compute_acknack>
 800dc2c:	ba40      	rev16	r0, r0
 800dc2e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800dc32:	a903      	add	r1, sp, #12
 800dc34:	a80a      	add	r0, sp, #40	@ 0x28
 800dc36:	f88d 6010 	strb.w	r6, [sp, #16]
 800dc3a:	f002 fb09 	bl	8010250 <uxr_serialize_ACKNACK_Payload>
 800dc3e:	2200      	movs	r2, #0
 800dc40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc42:	4611      	mov	r1, r2
 800dc44:	4628      	mov	r0, r5
 800dc46:	f000 ff81 	bl	800eb4c <uxr_stamp_session_header>
 800dc4a:	a80a      	add	r0, sp, #40	@ 0x28
 800dc4c:	f7fd fe2c 	bl	800b8a8 <ucdr_buffer_length>
 800dc50:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800dc52:	4602      	mov	r2, r0
 800dc54:	a905      	add	r1, sp, #20
 800dc56:	e9d3 0400 	ldrd	r0, r4, [r3]
 800dc5a:	47a0      	blx	r4
 800dc5c:	b012      	add	sp, #72	@ 0x48
 800dc5e:	bd70      	pop	{r4, r5, r6, pc}

0800dc60 <uxr_init_session>:
 800dc60:	b510      	push	{r4, lr}
 800dc62:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800dc98 <uxr_init_session+0x38>
 800dc66:	2300      	movs	r3, #0
 800dc68:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800dc6c:	4604      	mov	r4, r0
 800dc6e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800dc72:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800dc76:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800dc7a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800dc7e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800dc82:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800dc86:	2181      	movs	r1, #129	@ 0x81
 800dc88:	f000 fecc 	bl	800ea24 <uxr_init_session_info>
 800dc8c:	f104 0008 	add.w	r0, r4, #8
 800dc90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc94:	f001 b83c 	b.w	800ed10 <uxr_init_stream_storage>
	...

0800dca0 <uxr_set_status_callback>:
 800dca0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop

0800dca8 <uxr_set_topic_callback>:
 800dca8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800dcac:	4770      	bx	lr
 800dcae:	bf00      	nop

0800dcb0 <uxr_set_request_callback>:
 800dcb0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800dcb4:	4770      	bx	lr
 800dcb6:	bf00      	nop

0800dcb8 <uxr_set_reply_callback>:
 800dcb8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop

0800dcc0 <uxr_create_output_best_effort_stream>:
 800dcc0:	b510      	push	{r4, lr}
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	e9cd 2100 	strd	r2, r1, [sp]
 800dcc8:	4604      	mov	r4, r0
 800dcca:	f000 ff95 	bl	800ebf8 <uxr_session_header_offset>
 800dcce:	e9dd 2100 	ldrd	r2, r1, [sp]
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	f104 0008 	add.w	r0, r4, #8
 800dcd8:	b004      	add	sp, #16
 800dcda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcde:	f001 b861 	b.w	800eda4 <uxr_add_output_best_effort_buffer>
 800dce2:	bf00      	nop

0800dce4 <uxr_create_output_reliable_stream>:
 800dce4:	b510      	push	{r4, lr}
 800dce6:	b088      	sub	sp, #32
 800dce8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800dcec:	4604      	mov	r4, r0
 800dcee:	9303      	str	r3, [sp, #12]
 800dcf0:	f000 ff82 	bl	800ebf8 <uxr_session_header_offset>
 800dcf4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800dcf8:	9000      	str	r0, [sp, #0]
 800dcfa:	9905      	ldr	r1, [sp, #20]
 800dcfc:	f104 0008 	add.w	r0, r4, #8
 800dd00:	f001 f864 	bl	800edcc <uxr_add_output_reliable_buffer>
 800dd04:	2200      	movs	r2, #0
 800dd06:	b2c3      	uxtb	r3, r0
 800dd08:	f363 0207 	bfi	r2, r3, #0, #8
 800dd0c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800dd10:	f363 220f 	bfi	r2, r3, #8, #8
 800dd14:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800dd18:	f363 4217 	bfi	r2, r3, #16, #8
 800dd1c:	0e03      	lsrs	r3, r0, #24
 800dd1e:	f363 621f 	bfi	r2, r3, #24, #8
 800dd22:	4610      	mov	r0, r2
 800dd24:	b008      	add	sp, #32
 800dd26:	bd10      	pop	{r4, pc}

0800dd28 <uxr_create_input_best_effort_stream>:
 800dd28:	b082      	sub	sp, #8
 800dd2a:	3008      	adds	r0, #8
 800dd2c:	b002      	add	sp, #8
 800dd2e:	f001 b867 	b.w	800ee00 <uxr_add_input_best_effort_buffer>
 800dd32:	bf00      	nop

0800dd34 <uxr_create_input_reliable_stream>:
 800dd34:	b510      	push	{r4, lr}
 800dd36:	b084      	sub	sp, #16
 800dd38:	4c0b      	ldr	r4, [pc, #44]	@ (800dd68 <uxr_create_input_reliable_stream+0x34>)
 800dd3a:	9400      	str	r4, [sp, #0]
 800dd3c:	3008      	adds	r0, #8
 800dd3e:	f001 f875 	bl	800ee2c <uxr_add_input_reliable_buffer>
 800dd42:	2200      	movs	r2, #0
 800dd44:	b2c3      	uxtb	r3, r0
 800dd46:	f363 0207 	bfi	r2, r3, #0, #8
 800dd4a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800dd4e:	f363 220f 	bfi	r2, r3, #8, #8
 800dd52:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800dd56:	f363 4217 	bfi	r2, r3, #16, #8
 800dd5a:	0e03      	lsrs	r3, r0, #24
 800dd5c:	f363 621f 	bfi	r2, r3, #24, #8
 800dd60:	4610      	mov	r0, r2
 800dd62:	b004      	add	sp, #16
 800dd64:	bd10      	pop	{r4, pc}
 800dd66:	bf00      	nop
 800dd68:	0800db45 	.word	0x0800db45

0800dd6c <uxr_epoch_nanos>:
 800dd6c:	b510      	push	{r4, lr}
 800dd6e:	4604      	mov	r4, r0
 800dd70:	f001 f912 	bl	800ef98 <uxr_nanos>
 800dd74:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800dd78:	1ac0      	subs	r0, r0, r3
 800dd7a:	eb61 0102 	sbc.w	r1, r1, r2
 800dd7e:	bd10      	pop	{r4, pc}

0800dd80 <uxr_flash_output_streams>:
 800dd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd84:	7e03      	ldrb	r3, [r0, #24]
 800dd86:	b084      	sub	sp, #16
 800dd88:	4604      	mov	r4, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d035      	beq.n	800ddfa <uxr_flash_output_streams+0x7a>
 800dd8e:	f04f 0900 	mov.w	r9, #0
 800dd92:	4648      	mov	r0, r9
 800dd94:	f10d 0802 	add.w	r8, sp, #2
 800dd98:	af03      	add	r7, sp, #12
 800dd9a:	ae02      	add	r6, sp, #8
 800dd9c:	e006      	b.n	800ddac <uxr_flash_output_streams+0x2c>
 800dd9e:	7e23      	ldrb	r3, [r4, #24]
 800dda0:	f109 0901 	add.w	r9, r9, #1
 800dda4:	fa5f f089 	uxtb.w	r0, r9
 800dda8:	4283      	cmp	r3, r0
 800ddaa:	d926      	bls.n	800ddfa <uxr_flash_output_streams+0x7a>
 800ddac:	2201      	movs	r2, #1
 800ddae:	4611      	mov	r1, r2
 800ddb0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ddb4:	f000 ff58 	bl	800ec68 <uxr_stream_id>
 800ddb8:	3508      	adds	r5, #8
 800ddba:	4684      	mov	ip, r0
 800ddbc:	4643      	mov	r3, r8
 800ddbe:	463a      	mov	r2, r7
 800ddc0:	4631      	mov	r1, r6
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	f8cd c004 	str.w	ip, [sp, #4]
 800ddc8:	f007 fbd2 	bl	8015570 <uxr_prepare_best_effort_buffer_to_send>
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	d0e6      	beq.n	800dd9e <uxr_flash_output_streams+0x1e>
 800ddd0:	9b02      	ldr	r3, [sp, #8]
 800ddd2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ddd6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ddda:	4620      	mov	r0, r4
 800dddc:	f000 feb6 	bl	800eb4c <uxr_stamp_session_header>
 800dde0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dde2:	9a03      	ldr	r2, [sp, #12]
 800dde4:	685d      	ldr	r5, [r3, #4]
 800dde6:	6818      	ldr	r0, [r3, #0]
 800dde8:	9902      	ldr	r1, [sp, #8]
 800ddea:	47a8      	blx	r5
 800ddec:	f109 0901 	add.w	r9, r9, #1
 800ddf0:	7e23      	ldrb	r3, [r4, #24]
 800ddf2:	fa5f f089 	uxtb.w	r0, r9
 800ddf6:	4283      	cmp	r3, r0
 800ddf8:	d8d8      	bhi.n	800ddac <uxr_flash_output_streams+0x2c>
 800ddfa:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ddfe:	b38b      	cbz	r3, 800de64 <uxr_flash_output_streams+0xe4>
 800de00:	f04f 0900 	mov.w	r9, #0
 800de04:	f10d 0802 	add.w	r8, sp, #2
 800de08:	af03      	add	r7, sp, #12
 800de0a:	ae02      	add	r6, sp, #8
 800de0c:	4648      	mov	r0, r9
 800de0e:	2201      	movs	r2, #1
 800de10:	2102      	movs	r1, #2
 800de12:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800de16:	f000 ff27 	bl	800ec68 <uxr_stream_id>
 800de1a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800de1e:	3520      	adds	r5, #32
 800de20:	9001      	str	r0, [sp, #4]
 800de22:	e00d      	b.n	800de40 <uxr_flash_output_streams+0xc0>
 800de24:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800de28:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800de2c:	9b02      	ldr	r3, [sp, #8]
 800de2e:	f000 fe8d 	bl	800eb4c <uxr_stamp_session_header>
 800de32:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800de34:	9a03      	ldr	r2, [sp, #12]
 800de36:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800de3a:	9902      	ldr	r1, [sp, #8]
 800de3c:	6818      	ldr	r0, [r3, #0]
 800de3e:	47d0      	blx	sl
 800de40:	4643      	mov	r3, r8
 800de42:	463a      	mov	r2, r7
 800de44:	4631      	mov	r1, r6
 800de46:	4628      	mov	r0, r5
 800de48:	f007 fdb0 	bl	80159ac <uxr_prepare_next_reliable_buffer_to_send>
 800de4c:	4603      	mov	r3, r0
 800de4e:	4620      	mov	r0, r4
 800de50:	2b00      	cmp	r3, #0
 800de52:	d1e7      	bne.n	800de24 <uxr_flash_output_streams+0xa4>
 800de54:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800de58:	f109 0901 	add.w	r9, r9, #1
 800de5c:	fa5f f089 	uxtb.w	r0, r9
 800de60:	4283      	cmp	r3, r0
 800de62:	d8d4      	bhi.n	800de0e <uxr_flash_output_streams+0x8e>
 800de64:	b004      	add	sp, #16
 800de66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de6a:	bf00      	nop

0800de6c <read_submessage_info>:
 800de6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de70:	460d      	mov	r5, r1
 800de72:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800de76:	4669      	mov	r1, sp
 800de78:	4607      	mov	r7, r0
 800de7a:	4628      	mov	r0, r5
 800de7c:	f002 f814 	bl	800fea8 <uxr_deserialize_BaseObjectReply>
 800de80:	a902      	add	r1, sp, #8
 800de82:	4604      	mov	r4, r0
 800de84:	4628      	mov	r0, r5
 800de86:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800de8a:	f7fc fb87 	bl	800a59c <ucdr_deserialize_bool>
 800de8e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800de92:	4004      	ands	r4, r0
 800de94:	b2e4      	uxtb	r4, r4
 800de96:	b95b      	cbnz	r3, 800deb0 <read_submessage_info+0x44>
 800de98:	a987      	add	r1, sp, #540	@ 0x21c
 800de9a:	4628      	mov	r0, r5
 800de9c:	f7fc fb7e 	bl	800a59c <ucdr_deserialize_bool>
 800dea0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800dea4:	4606      	mov	r6, r0
 800dea6:	b94b      	cbnz	r3, 800debc <read_submessage_info+0x50>
 800dea8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800deac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deb0:	a903      	add	r1, sp, #12
 800deb2:	4628      	mov	r0, r5
 800deb4:	f001 fea0 	bl	800fbf8 <uxr_deserialize_ObjectVariant>
 800deb8:	4004      	ands	r4, r0
 800deba:	e7ed      	b.n	800de98 <read_submessage_info+0x2c>
 800debc:	a988      	add	r1, sp, #544	@ 0x220
 800debe:	4628      	mov	r0, r5
 800dec0:	f7fc fb9a 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 800dec4:	4234      	tst	r4, r6
 800dec6:	d0ef      	beq.n	800dea8 <read_submessage_info+0x3c>
 800dec8:	2800      	cmp	r0, #0
 800deca:	d0ed      	beq.n	800dea8 <read_submessage_info+0x3c>
 800decc:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800ded0:	2b0d      	cmp	r3, #13
 800ded2:	d1e9      	bne.n	800dea8 <read_submessage_info+0x3c>
 800ded4:	a98a      	add	r1, sp, #552	@ 0x228
 800ded6:	4628      	mov	r0, r5
 800ded8:	f7fd f934 	bl	800b144 <ucdr_deserialize_int16_t>
 800dedc:	b140      	cbz	r0, 800def0 <read_submessage_info+0x84>
 800dede:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	dd07      	ble.n	800def6 <read_submessage_info+0x8a>
 800dee6:	f1b8 0f00 	cmp.w	r8, #0
 800deea:	bf14      	ite	ne
 800deec:	2001      	movne	r0, #1
 800deee:	2002      	moveq	r0, #2
 800def0:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800def4:	e7d8      	b.n	800dea8 <read_submessage_info+0x3c>
 800def6:	2000      	movs	r0, #0
 800def8:	e7fa      	b.n	800def0 <read_submessage_info+0x84>
 800defa:	bf00      	nop

0800defc <read_submessage_list>:
 800defc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df00:	b097      	sub	sp, #92	@ 0x5c
 800df02:	4ec1      	ldr	r6, [pc, #772]	@ (800e208 <read_submessage_list+0x30c>)
 800df04:	9209      	str	r2, [sp, #36]	@ 0x24
 800df06:	4604      	mov	r4, r0
 800df08:	460d      	mov	r5, r1
 800df0a:	f04f 0801 	mov.w	r8, #1
 800df0e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800df12:	aa0c      	add	r2, sp, #48	@ 0x30
 800df14:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800df18:	4628      	mov	r0, r5
 800df1a:	f000 fff7 	bl	800ef0c <uxr_read_submessage_header>
 800df1e:	2800      	cmp	r0, #0
 800df20:	f000 813e 	beq.w	800e1a0 <read_submessage_list+0x2a4>
 800df24:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800df28:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800df2c:	3b02      	subs	r3, #2
 800df2e:	2b0d      	cmp	r3, #13
 800df30:	d8ed      	bhi.n	800df0e <read_submessage_list+0x12>
 800df32:	a101      	add	r1, pc, #4	@ (adr r1, 800df38 <read_submessage_list+0x3c>)
 800df34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df38:	0800e197 	.word	0x0800e197
 800df3c:	0800df0f 	.word	0x0800df0f
 800df40:	0800e187 	.word	0x0800e187
 800df44:	0800e125 	.word	0x0800e125
 800df48:	0800e11b 	.word	0x0800e11b
 800df4c:	0800df0f 	.word	0x0800df0f
 800df50:	0800df0f 	.word	0x0800df0f
 800df54:	0800e07b 	.word	0x0800e07b
 800df58:	0800e00b 	.word	0x0800e00b
 800df5c:	0800dfcb 	.word	0x0800dfcb
 800df60:	0800df0f 	.word	0x0800df0f
 800df64:	0800df0f 	.word	0x0800df0f
 800df68:	0800df0f 	.word	0x0800df0f
 800df6c:	0800df71 	.word	0x0800df71
 800df70:	a910      	add	r1, sp, #64	@ 0x40
 800df72:	4628      	mov	r0, r5
 800df74:	f002 f9bc 	bl	80102f0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800df78:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800df7c:	f1b9 0f00 	cmp.w	r9, #0
 800df80:	f000 8116 	beq.w	800e1b0 <read_submessage_list+0x2b4>
 800df84:	f001 f808 	bl	800ef98 <uxr_nanos>
 800df88:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800df8a:	4602      	mov	r2, r0
 800df8c:	460b      	mov	r3, r1
 800df8e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800df90:	2100      	movs	r1, #0
 800df92:	468c      	mov	ip, r1
 800df94:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800df98:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800df9c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800df9e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800dfa0:	468c      	mov	ip, r1
 800dfa2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800dfa6:	46e2      	mov	sl, ip
 800dfa8:	46bc      	mov	ip, r7
 800dfaa:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800dfae:	fbc0 7106 	smlal	r7, r1, r0, r6
 800dfb2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800dfb6:	e9cd 7100 	strd	r7, r1, [sp]
 800dfba:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800dfbe:	9106      	str	r1, [sp, #24]
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	47c8      	blx	r9
 800dfc4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800dfc8:	e7a1      	b.n	800df0e <read_submessage_list+0x12>
 800dfca:	a910      	add	r1, sp, #64	@ 0x40
 800dfcc:	4628      	mov	r0, r5
 800dfce:	f002 f97d 	bl	80102cc <uxr_deserialize_HEARTBEAT_Payload>
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800dfd8:	f000 fe70 	bl	800ecbc <uxr_stream_id_from_raw>
 800dfdc:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800dfe0:	900f      	str	r0, [sp, #60]	@ 0x3c
 800dfe2:	4639      	mov	r1, r7
 800dfe4:	f104 0008 	add.w	r0, r4, #8
 800dfe8:	f000 ff56 	bl	800ee98 <uxr_get_input_reliable_stream>
 800dfec:	2800      	cmp	r0, #0
 800dfee:	d08e      	beq.n	800df0e <read_submessage_list+0x12>
 800dff0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800dff4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800dff8:	f007 fa28 	bl	801544c <uxr_process_heartbeat>
 800dffc:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800e000:	463a      	mov	r2, r7
 800e002:	4620      	mov	r0, r4
 800e004:	f7ff fdf6 	bl	800dbf4 <write_submessage_acknack.isra.0>
 800e008:	e781      	b.n	800df0e <read_submessage_list+0x12>
 800e00a:	a910      	add	r1, sp, #64	@ 0x40
 800e00c:	4628      	mov	r0, r5
 800e00e:	f002 f935 	bl	801027c <uxr_deserialize_ACKNACK_Payload>
 800e012:	2100      	movs	r1, #0
 800e014:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e018:	f000 fe50 	bl	800ecbc <uxr_stream_id_from_raw>
 800e01c:	900d      	str	r0, [sp, #52]	@ 0x34
 800e01e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800e022:	f104 0008 	add.w	r0, r4, #8
 800e026:	f000 ff23 	bl	800ee70 <uxr_get_output_reliable_stream>
 800e02a:	4607      	mov	r7, r0
 800e02c:	2800      	cmp	r0, #0
 800e02e:	f43f af6e 	beq.w	800df0e <read_submessage_list+0x12>
 800e032:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800e036:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800e03a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e03e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800e042:	b289      	uxth	r1, r1
 800e044:	f007 fd5c 	bl	8015b00 <uxr_process_acknack>
 800e048:	4638      	mov	r0, r7
 800e04a:	f007 fd19 	bl	8015a80 <uxr_begin_output_nack_buffer_it>
 800e04e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800e052:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800e056:	e006      	b.n	800e066 <read_submessage_list+0x16a>
 800e058:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e05a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e05c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800e060:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e062:	6818      	ldr	r0, [r3, #0]
 800e064:	47c8      	blx	r9
 800e066:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800e06a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800e06c:	4651      	mov	r1, sl
 800e06e:	4638      	mov	r0, r7
 800e070:	f007 fd08 	bl	8015a84 <uxr_next_reliable_nack_buffer_to_send>
 800e074:	2800      	cmp	r0, #0
 800e076:	d1ef      	bne.n	800e058 <read_submessage_list+0x15c>
 800e078:	e749      	b.n	800df0e <read_submessage_list+0x12>
 800e07a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800e07e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800e082:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800e086:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800e08a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800e08e:	4651      	mov	r1, sl
 800e090:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e094:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800e098:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800e09c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800e0a0:	4628      	mov	r0, r5
 800e0a2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800e0a6:	f001 fe49 	bl	800fd3c <uxr_deserialize_BaseObjectRequest>
 800e0aa:	4650      	mov	r0, sl
 800e0ac:	a90f      	add	r1, sp, #60	@ 0x3c
 800e0ae:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800e0b2:	f000 fdc7 	bl	800ec44 <uxr_parse_base_object_request>
 800e0b6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800e0ba:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e0bc:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800e0c0:	9110      	str	r1, [sp, #64]	@ 0x40
 800e0c2:	3f04      	subs	r7, #4
 800e0c4:	f009 090e 	and.w	r9, r9, #14
 800e0c8:	b2bf      	uxth	r7, r7
 800e0ca:	f1bb 0f00 	cmp.w	fp, #0
 800e0ce:	d006      	beq.n	800e0de <read_submessage_list+0x1e2>
 800e0d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e0d4:	9300      	str	r3, [sp, #0]
 800e0d6:	4652      	mov	r2, sl
 800e0d8:	2300      	movs	r3, #0
 800e0da:	4620      	mov	r0, r4
 800e0dc:	47d8      	blx	fp
 800e0de:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800e0e0:	b16a      	cbz	r2, 800e0fe <read_submessage_list+0x202>
 800e0e2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e0e4:	2100      	movs	r1, #0
 800e0e6:	3802      	subs	r0, #2
 800e0e8:	e002      	b.n	800e0f0 <read_submessage_list+0x1f4>
 800e0ea:	3101      	adds	r1, #1
 800e0ec:	4291      	cmp	r1, r2
 800e0ee:	d006      	beq.n	800e0fe <read_submessage_list+0x202>
 800e0f0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e0f4:	4553      	cmp	r3, sl
 800e0f6:	d1f8      	bne.n	800e0ea <read_submessage_list+0x1ee>
 800e0f8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	545a      	strb	r2, [r3, r1]
 800e0fe:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800e102:	9102      	str	r1, [sp, #8]
 800e104:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e106:	9101      	str	r1, [sp, #4]
 800e108:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e10a:	9100      	str	r1, [sp, #0]
 800e10c:	464b      	mov	r3, r9
 800e10e:	463a      	mov	r2, r7
 800e110:	4629      	mov	r1, r5
 800e112:	4620      	mov	r0, r4
 800e114:	f007 fdb2 	bl	8015c7c <read_submessage_format>
 800e118:	e6f9      	b.n	800df0e <read_submessage_list+0x12>
 800e11a:	4629      	mov	r1, r5
 800e11c:	4620      	mov	r0, r4
 800e11e:	f7ff fea5 	bl	800de6c <read_submessage_info>
 800e122:	e6f4      	b.n	800df0e <read_submessage_list+0x12>
 800e124:	2a00      	cmp	r2, #0
 800e126:	d03e      	beq.n	800e1a6 <read_submessage_list+0x2aa>
 800e128:	a910      	add	r1, sp, #64	@ 0x40
 800e12a:	4628      	mov	r0, r5
 800e12c:	f002 f802 	bl	8010134 <uxr_deserialize_STATUS_Payload>
 800e130:	a90e      	add	r1, sp, #56	@ 0x38
 800e132:	aa0d      	add	r2, sp, #52	@ 0x34
 800e134:	a810      	add	r0, sp, #64	@ 0x40
 800e136:	f000 fd85 	bl	800ec44 <uxr_parse_base_object_request>
 800e13a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800e13e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e140:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800e144:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800e148:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e14a:	f1ba 0f00 	cmp.w	sl, #0
 800e14e:	d006      	beq.n	800e15e <read_submessage_list+0x262>
 800e150:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	463a      	mov	r2, r7
 800e158:	464b      	mov	r3, r9
 800e15a:	4620      	mov	r0, r4
 800e15c:	47d0      	blx	sl
 800e15e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800e160:	2a00      	cmp	r2, #0
 800e162:	f43f aed4 	beq.w	800df0e <read_submessage_list+0x12>
 800e166:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e168:	2100      	movs	r1, #0
 800e16a:	3802      	subs	r0, #2
 800e16c:	e003      	b.n	800e176 <read_submessage_list+0x27a>
 800e16e:	3101      	adds	r1, #1
 800e170:	4291      	cmp	r1, r2
 800e172:	f43f aecc 	beq.w	800df0e <read_submessage_list+0x12>
 800e176:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e17a:	42bb      	cmp	r3, r7
 800e17c:	d1f7      	bne.n	800e16e <read_submessage_list+0x272>
 800e17e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e180:	f803 9001 	strb.w	r9, [r3, r1]
 800e184:	e6c3      	b.n	800df0e <read_submessage_list+0x12>
 800e186:	2a00      	cmp	r2, #0
 800e188:	f47f aec1 	bne.w	800df0e <read_submessage_list+0x12>
 800e18c:	4629      	mov	r1, r5
 800e18e:	4620      	mov	r0, r4
 800e190:	f000 fc9e 	bl	800ead0 <uxr_read_create_session_status>
 800e194:	e6bb      	b.n	800df0e <read_submessage_list+0x12>
 800e196:	4629      	mov	r1, r5
 800e198:	4620      	mov	r0, r4
 800e19a:	f7ff fcf5 	bl	800db88 <read_submessage_get_info>
 800e19e:	e6b6      	b.n	800df0e <read_submessage_list+0x12>
 800e1a0:	b017      	add	sp, #92	@ 0x5c
 800e1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1a6:	4629      	mov	r1, r5
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f000 fc9d 	bl	800eae8 <uxr_read_delete_session_status>
 800e1ae:	e6ae      	b.n	800df0e <read_submessage_list+0x12>
 800e1b0:	f000 fef2 	bl	800ef98 <uxr_nanos>
 800e1b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e1b6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e1b8:	464f      	mov	r7, r9
 800e1ba:	fbc3 2706 	smlal	r2, r7, r3, r6
 800e1be:	1812      	adds	r2, r2, r0
 800e1c0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e1c2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800e1c4:	eb47 0101 	adc.w	r1, r7, r1
 800e1c8:	464f      	mov	r7, r9
 800e1ca:	fbc3 0706 	smlal	r0, r7, r3, r6
 800e1ce:	463b      	mov	r3, r7
 800e1d0:	4684      	mov	ip, r0
 800e1d2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800e1d6:	fbc7 0906 	smlal	r0, r9, r7, r6
 800e1da:	eb1c 0c00 	adds.w	ip, ip, r0
 800e1de:	464f      	mov	r7, r9
 800e1e0:	eb43 0307 	adc.w	r3, r3, r7
 800e1e4:	ebb2 0c0c 	subs.w	ip, r2, ip
 800e1e8:	eb61 0303 	sbc.w	r3, r1, r3
 800e1ec:	0fda      	lsrs	r2, r3, #31
 800e1ee:	eb12 020c 	adds.w	r2, r2, ip
 800e1f2:	f143 0300 	adc.w	r3, r3, #0
 800e1f6:	0852      	lsrs	r2, r2, #1
 800e1f8:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800e1fc:	105b      	asrs	r3, r3, #1
 800e1fe:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800e202:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800e206:	e6dd      	b.n	800dfc4 <read_submessage_list+0xc8>
 800e208:	3b9aca00 	.word	0x3b9aca00

0800e20c <listen_message_reliably>:
 800e20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e210:	1e0b      	subs	r3, r1, #0
 800e212:	b09d      	sub	sp, #116	@ 0x74
 800e214:	bfb8      	it	lt
 800e216:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800e21a:	4680      	mov	r8, r0
 800e21c:	9305      	str	r3, [sp, #20]
 800e21e:	f000 fea1 	bl	800ef64 <uxr_millis>
 800e222:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800e226:	4681      	mov	r9, r0
 800e228:	2a00      	cmp	r2, #0
 800e22a:	f000 80a1 	beq.w	800e370 <listen_message_reliably+0x164>
 800e22e:	2600      	movs	r6, #0
 800e230:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e234:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e238:	9303      	str	r3, [sp, #12]
 800e23a:	4630      	mov	r0, r6
 800e23c:	460f      	mov	r7, r1
 800e23e:	e00f      	b.n	800e260 <listen_message_reliably+0x54>
 800e240:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e244:	9903      	ldr	r1, [sp, #12]
 800e246:	455a      	cmp	r2, fp
 800e248:	f106 0601 	add.w	r6, r6, #1
 800e24c:	eb73 0101 	sbcs.w	r1, r3, r1
 800e250:	b2f0      	uxtb	r0, r6
 800e252:	da01      	bge.n	800e258 <listen_message_reliably+0x4c>
 800e254:	4693      	mov	fp, r2
 800e256:	9303      	str	r3, [sp, #12]
 800e258:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e25c:	4283      	cmp	r3, r0
 800e25e:	d960      	bls.n	800e322 <listen_message_reliably+0x116>
 800e260:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800e264:	2102      	movs	r1, #2
 800e266:	2201      	movs	r2, #1
 800e268:	f000 fcfe 	bl	800ec68 <uxr_stream_id>
 800e26c:	00e4      	lsls	r4, r4, #3
 800e26e:	f104 0520 	add.w	r5, r4, #32
 800e272:	4445      	add	r5, r8
 800e274:	4601      	mov	r1, r0
 800e276:	463b      	mov	r3, r7
 800e278:	464a      	mov	r2, r9
 800e27a:	4628      	mov	r0, r5
 800e27c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e27e:	f007 fbd5 	bl	8015a2c <uxr_update_output_stream_heartbeat_timestamp>
 800e282:	eb08 0304 	add.w	r3, r8, r4
 800e286:	2800      	cmp	r0, #0
 800e288:	d0da      	beq.n	800e240 <listen_message_reliably+0x34>
 800e28a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e28e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800e292:	9304      	str	r3, [sp, #16]
 800e294:	4640      	mov	r0, r8
 800e296:	f000 fcaf 	bl	800ebf8 <uxr_session_header_offset>
 800e29a:	3501      	adds	r5, #1
 800e29c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800e2a0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e2a4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	2211      	movs	r2, #17
 800e2ac:	9000      	str	r0, [sp, #0]
 800e2ae:	a90c      	add	r1, sp, #48	@ 0x30
 800e2b0:	4650      	mov	r0, sl
 800e2b2:	f7fd fabb 	bl	800b82c <ucdr_init_buffer_origin_offset>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	2205      	movs	r2, #5
 800e2ba:	210b      	movs	r1, #11
 800e2bc:	4650      	mov	r0, sl
 800e2be:	f000 fe0b 	bl	800eed8 <uxr_buffer_submessage_header>
 800e2c2:	8968      	ldrh	r0, [r5, #10]
 800e2c4:	2101      	movs	r1, #1
 800e2c6:	f007 fda3 	bl	8015e10 <uxr_seq_num_add>
 800e2ca:	892b      	ldrh	r3, [r5, #8]
 800e2cc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	9b04      	ldr	r3, [sp, #16]
 800e2d4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800e2d8:	a90a      	add	r1, sp, #40	@ 0x28
 800e2da:	4650      	mov	r0, sl
 800e2dc:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800e2e0:	f001 ffe0 	bl	80102a4 <uxr_serialize_HEARTBEAT_Payload>
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	4611      	mov	r1, r2
 800e2e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e2ea:	4640      	mov	r0, r8
 800e2ec:	f000 fc2e 	bl	800eb4c <uxr_stamp_session_header>
 800e2f0:	4650      	mov	r0, sl
 800e2f2:	f7fd fad9 	bl	800b8a8 <ucdr_buffer_length>
 800e2f6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	a90c      	add	r1, sp, #48	@ 0x30
 800e2fe:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e302:	4444      	add	r4, r8
 800e304:	47a8      	blx	r5
 800e306:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800e30a:	9903      	ldr	r1, [sp, #12]
 800e30c:	455a      	cmp	r2, fp
 800e30e:	f106 0601 	add.w	r6, r6, #1
 800e312:	eb73 0101 	sbcs.w	r1, r3, r1
 800e316:	b2f0      	uxtb	r0, r6
 800e318:	db9c      	blt.n	800e254 <listen_message_reliably+0x48>
 800e31a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e31e:	4283      	cmp	r3, r0
 800e320:	d89e      	bhi.n	800e260 <listen_message_reliably+0x54>
 800e322:	9a03      	ldr	r2, [sp, #12]
 800e324:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e328:	429a      	cmp	r2, r3
 800e32a:	bf08      	it	eq
 800e32c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800e330:	d01e      	beq.n	800e370 <listen_message_reliably+0x164>
 800e332:	ebab 0309 	sub.w	r3, fp, r9
 800e336:	9905      	ldr	r1, [sp, #20]
 800e338:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	bf08      	it	eq
 800e340:	2301      	moveq	r3, #1
 800e342:	4299      	cmp	r1, r3
 800e344:	bfa8      	it	ge
 800e346:	4619      	movge	r1, r3
 800e348:	6894      	ldr	r4, [r2, #8]
 800e34a:	6810      	ldr	r0, [r2, #0]
 800e34c:	4689      	mov	r9, r1
 800e34e:	460b      	mov	r3, r1
 800e350:	aa08      	add	r2, sp, #32
 800e352:	a907      	add	r1, sp, #28
 800e354:	47a0      	blx	r4
 800e356:	b968      	cbnz	r0, 800e374 <listen_message_reliably+0x168>
 800e358:	9b05      	ldr	r3, [sp, #20]
 800e35a:	eba3 0309 	sub.w	r3, r3, r9
 800e35e:	2b00      	cmp	r3, #0
 800e360:	9305      	str	r3, [sp, #20]
 800e362:	f73f af5c 	bgt.w	800e21e <listen_message_reliably+0x12>
 800e366:	4604      	mov	r4, r0
 800e368:	4620      	mov	r0, r4
 800e36a:	b01d      	add	sp, #116	@ 0x74
 800e36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e370:	9b05      	ldr	r3, [sp, #20]
 800e372:	e7e0      	b.n	800e336 <listen_message_reliably+0x12a>
 800e374:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e378:	4604      	mov	r4, r0
 800e37a:	a80c      	add	r0, sp, #48	@ 0x30
 800e37c:	f7fd fa68 	bl	800b850 <ucdr_init_buffer>
 800e380:	2500      	movs	r5, #0
 800e382:	f10d 031a 	add.w	r3, sp, #26
 800e386:	aa06      	add	r2, sp, #24
 800e388:	a90c      	add	r1, sp, #48	@ 0x30
 800e38a:	4640      	mov	r0, r8
 800e38c:	f88d 5018 	strb.w	r5, [sp, #24]
 800e390:	f000 fbf0 	bl	800eb74 <uxr_read_session_header>
 800e394:	b918      	cbnz	r0, 800e39e <listen_message_reliably+0x192>
 800e396:	4620      	mov	r0, r4
 800e398:	b01d      	add	sp, #116	@ 0x74
 800e39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e39e:	4629      	mov	r1, r5
 800e3a0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e3a4:	f000 fc8a 	bl	800ecbc <uxr_stream_id_from_raw>
 800e3a8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800e3ac:	2d01      	cmp	r5, #1
 800e3ae:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e3b2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800e3b6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e3ba:	d04b      	beq.n	800e454 <listen_message_reliably+0x248>
 800e3bc:	2d02      	cmp	r5, #2
 800e3be:	d00f      	beq.n	800e3e0 <listen_message_reliably+0x1d4>
 800e3c0:	2d00      	cmp	r5, #0
 800e3c2:	d1e8      	bne.n	800e396 <listen_message_reliably+0x18a>
 800e3c4:	4629      	mov	r1, r5
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	f000 fc78 	bl	800ecbc <uxr_stream_id_from_raw>
 800e3cc:	a90c      	add	r1, sp, #48	@ 0x30
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	4640      	mov	r0, r8
 800e3d2:	920a      	str	r2, [sp, #40]	@ 0x28
 800e3d4:	f7ff fd92 	bl	800defc <read_submessage_list>
 800e3d8:	4620      	mov	r0, r4
 800e3da:	b01d      	add	sp, #116	@ 0x74
 800e3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3e0:	4631      	mov	r1, r6
 800e3e2:	f108 0008 	add.w	r0, r8, #8
 800e3e6:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800e3ea:	f000 fd55 	bl	800ee98 <uxr_get_input_reliable_stream>
 800e3ee:	4607      	mov	r7, r0
 800e3f0:	b338      	cbz	r0, 800e442 <listen_message_reliably+0x236>
 800e3f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3f4:	9203      	str	r2, [sp, #12]
 800e3f6:	a80c      	add	r0, sp, #48	@ 0x30
 800e3f8:	f7fd fa5a 	bl	800b8b0 <ucdr_buffer_remaining>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	f10d 0019 	add.w	r0, sp, #25
 800e402:	9000      	str	r0, [sp, #0]
 800e404:	9a03      	ldr	r2, [sp, #12]
 800e406:	4651      	mov	r1, sl
 800e408:	4638      	mov	r0, r7
 800e40a:	f006 ff25 	bl	8015258 <uxr_receive_reliable_message>
 800e40e:	b1c0      	cbz	r0, 800e442 <listen_message_reliably+0x236>
 800e410:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e414:	b393      	cbz	r3, 800e47c <listen_message_reliably+0x270>
 800e416:	ad14      	add	r5, sp, #80	@ 0x50
 800e418:	f04f 0a02 	mov.w	sl, #2
 800e41c:	e00a      	b.n	800e434 <listen_message_reliably+0x228>
 800e41e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800e422:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800e426:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800e42a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e42c:	4629      	mov	r1, r5
 800e42e:	4640      	mov	r0, r8
 800e430:	f7ff fd64 	bl	800defc <read_submessage_list>
 800e434:	2204      	movs	r2, #4
 800e436:	4629      	mov	r1, r5
 800e438:	4638      	mov	r0, r7
 800e43a:	f006 ff8d 	bl	8015358 <uxr_next_input_reliable_buffer_available>
 800e43e:	2800      	cmp	r0, #0
 800e440:	d1ed      	bne.n	800e41e <listen_message_reliably+0x212>
 800e442:	4640      	mov	r0, r8
 800e444:	4632      	mov	r2, r6
 800e446:	4649      	mov	r1, r9
 800e448:	f7ff fbd4 	bl	800dbf4 <write_submessage_acknack.isra.0>
 800e44c:	4620      	mov	r0, r4
 800e44e:	b01d      	add	sp, #116	@ 0x74
 800e450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e454:	4631      	mov	r1, r6
 800e456:	f108 0008 	add.w	r0, r8, #8
 800e45a:	f000 fd13 	bl	800ee84 <uxr_get_input_best_effort_stream>
 800e45e:	2800      	cmp	r0, #0
 800e460:	d099      	beq.n	800e396 <listen_message_reliably+0x18a>
 800e462:	4651      	mov	r1, sl
 800e464:	f006 fe64 	bl	8015130 <uxr_receive_best_effort_message>
 800e468:	2800      	cmp	r0, #0
 800e46a:	d094      	beq.n	800e396 <listen_message_reliably+0x18a>
 800e46c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e470:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e472:	a90c      	add	r1, sp, #48	@ 0x30
 800e474:	4640      	mov	r0, r8
 800e476:	f7ff fd41 	bl	800defc <read_submessage_list>
 800e47a:	e78c      	b.n	800e396 <listen_message_reliably+0x18a>
 800e47c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e480:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e482:	a90c      	add	r1, sp, #48	@ 0x30
 800e484:	4640      	mov	r0, r8
 800e486:	f7ff fd39 	bl	800defc <read_submessage_list>
 800e48a:	e7c4      	b.n	800e416 <listen_message_reliably+0x20a>

0800e48c <uxr_run_session_timeout>:
 800e48c:	b570      	push	{r4, r5, r6, lr}
 800e48e:	4604      	mov	r4, r0
 800e490:	460d      	mov	r5, r1
 800e492:	f000 fd67 	bl	800ef64 <uxr_millis>
 800e496:	4606      	mov	r6, r0
 800e498:	4620      	mov	r0, r4
 800e49a:	f7ff fc71 	bl	800dd80 <uxr_flash_output_streams>
 800e49e:	4629      	mov	r1, r5
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f7ff feb3 	bl	800e20c <listen_message_reliably>
 800e4a6:	f000 fd5d 	bl	800ef64 <uxr_millis>
 800e4aa:	1b83      	subs	r3, r0, r6
 800e4ac:	1ae9      	subs	r1, r5, r3
 800e4ae:	2900      	cmp	r1, #0
 800e4b0:	dcf6      	bgt.n	800e4a0 <uxr_run_session_timeout+0x14>
 800e4b2:	f104 0008 	add.w	r0, r4, #8
 800e4b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4ba:	f000 bcf7 	b.w	800eeac <uxr_output_streams_confirmed>
 800e4be:	bf00      	nop

0800e4c0 <uxr_run_session_until_data>:
 800e4c0:	b570      	push	{r4, r5, r6, lr}
 800e4c2:	4604      	mov	r4, r0
 800e4c4:	460d      	mov	r5, r1
 800e4c6:	f000 fd4d 	bl	800ef64 <uxr_millis>
 800e4ca:	4606      	mov	r6, r0
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	f7ff fc57 	bl	800dd80 <uxr_flash_output_streams>
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800e4d8:	4629      	mov	r1, r5
 800e4da:	e005      	b.n	800e4e8 <uxr_run_session_until_data+0x28>
 800e4dc:	f000 fd42 	bl	800ef64 <uxr_millis>
 800e4e0:	1b83      	subs	r3, r0, r6
 800e4e2:	1ae9      	subs	r1, r5, r3
 800e4e4:	2900      	cmp	r1, #0
 800e4e6:	dd07      	ble.n	800e4f8 <uxr_run_session_until_data+0x38>
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	f7ff fe8f 	bl	800e20c <listen_message_reliably>
 800e4ee:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	d0f2      	beq.n	800e4dc <uxr_run_session_until_data+0x1c>
 800e4f6:	bd70      	pop	{r4, r5, r6, pc}
 800e4f8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e4fc:	bd70      	pop	{r4, r5, r6, pc}
 800e4fe:	bf00      	nop

0800e500 <uxr_run_session_until_confirm_delivery>:
 800e500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e504:	4606      	mov	r6, r0
 800e506:	460d      	mov	r5, r1
 800e508:	f000 fd2c 	bl	800ef64 <uxr_millis>
 800e50c:	4607      	mov	r7, r0
 800e50e:	4630      	mov	r0, r6
 800e510:	f7ff fc36 	bl	800dd80 <uxr_flash_output_streams>
 800e514:	2d00      	cmp	r5, #0
 800e516:	f106 0808 	add.w	r8, r6, #8
 800e51a:	bfa8      	it	ge
 800e51c:	462c      	movge	r4, r5
 800e51e:	da07      	bge.n	800e530 <uxr_run_session_until_confirm_delivery+0x30>
 800e520:	e00e      	b.n	800e540 <uxr_run_session_until_confirm_delivery+0x40>
 800e522:	f7ff fe73 	bl	800e20c <listen_message_reliably>
 800e526:	f000 fd1d 	bl	800ef64 <uxr_millis>
 800e52a:	1bc3      	subs	r3, r0, r7
 800e52c:	1aec      	subs	r4, r5, r3
 800e52e:	d407      	bmi.n	800e540 <uxr_run_session_until_confirm_delivery+0x40>
 800e530:	4640      	mov	r0, r8
 800e532:	f000 fcbb 	bl	800eeac <uxr_output_streams_confirmed>
 800e536:	4603      	mov	r3, r0
 800e538:	4621      	mov	r1, r4
 800e53a:	4630      	mov	r0, r6
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d0f0      	beq.n	800e522 <uxr_run_session_until_confirm_delivery+0x22>
 800e540:	4640      	mov	r0, r8
 800e542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e546:	f000 bcb1 	b.w	800eeac <uxr_output_streams_confirmed>
 800e54a:	bf00      	nop

0800e54c <uxr_run_session_until_all_status>:
 800e54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e550:	9c08      	ldr	r4, [sp, #32]
 800e552:	4606      	mov	r6, r0
 800e554:	460f      	mov	r7, r1
 800e556:	4691      	mov	r9, r2
 800e558:	461d      	mov	r5, r3
 800e55a:	f7ff fc11 	bl	800dd80 <uxr_flash_output_streams>
 800e55e:	b124      	cbz	r4, 800e56a <uxr_run_session_until_all_status+0x1e>
 800e560:	4622      	mov	r2, r4
 800e562:	21ff      	movs	r1, #255	@ 0xff
 800e564:	4628      	mov	r0, r5
 800e566:	f009 f943 	bl	80177f0 <memset>
 800e56a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800e56e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e570:	f000 fcf8 	bl	800ef64 <uxr_millis>
 800e574:	3d01      	subs	r5, #1
 800e576:	f1a9 0902 	sub.w	r9, r9, #2
 800e57a:	4680      	mov	r8, r0
 800e57c:	4639      	mov	r1, r7
 800e57e:	4630      	mov	r0, r6
 800e580:	f7ff fe44 	bl	800e20c <listen_message_reliably>
 800e584:	f000 fcee 	bl	800ef64 <uxr_millis>
 800e588:	eba0 0008 	sub.w	r0, r0, r8
 800e58c:	1a39      	subs	r1, r7, r0
 800e58e:	b344      	cbz	r4, 800e5e2 <uxr_run_session_until_all_status+0x96>
 800e590:	4628      	mov	r0, r5
 800e592:	46ac      	mov	ip, r5
 800e594:	2301      	movs	r3, #1
 800e596:	e002      	b.n	800e59e <uxr_run_session_until_all_status+0x52>
 800e598:	42a3      	cmp	r3, r4
 800e59a:	d20d      	bcs.n	800e5b8 <uxr_run_session_until_all_status+0x6c>
 800e59c:	3301      	adds	r3, #1
 800e59e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800e5a2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800e5a6:	d1f7      	bne.n	800e598 <uxr_run_session_until_all_status+0x4c>
 800e5a8:	42a3      	cmp	r3, r4
 800e5aa:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800e5ae:	d213      	bcs.n	800e5d8 <uxr_run_session_until_all_status+0x8c>
 800e5b0:	2a00      	cmp	r2, #0
 800e5b2:	d0f3      	beq.n	800e59c <uxr_run_session_until_all_status+0x50>
 800e5b4:	2900      	cmp	r1, #0
 800e5b6:	dce2      	bgt.n	800e57e <uxr_run_session_until_all_status+0x32>
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800e5bc:	442c      	add	r4, r5
 800e5be:	e001      	b.n	800e5c4 <uxr_run_session_until_all_status+0x78>
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d812      	bhi.n	800e5ea <uxr_run_session_until_all_status+0x9e>
 800e5c4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e5c8:	4284      	cmp	r4, r0
 800e5ca:	d1f9      	bne.n	800e5c0 <uxr_run_session_until_all_status+0x74>
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	bf8c      	ite	hi
 800e5d0:	2000      	movhi	r0, #0
 800e5d2:	2001      	movls	r0, #1
 800e5d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5d8:	2900      	cmp	r1, #0
 800e5da:	dded      	ble.n	800e5b8 <uxr_run_session_until_all_status+0x6c>
 800e5dc:	2a00      	cmp	r2, #0
 800e5de:	d1ce      	bne.n	800e57e <uxr_run_session_until_all_status+0x32>
 800e5e0:	e7ea      	b.n	800e5b8 <uxr_run_session_until_all_status+0x6c>
 800e5e2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e5e4:	2001      	movs	r0, #1
 800e5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5ea:	2000      	movs	r0, #0
 800e5ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e5f0 <wait_session_status>:
 800e5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	4604      	mov	r4, r0
 800e5f6:	b09d      	sub	sp, #116	@ 0x74
 800e5f8:	20ff      	movs	r0, #255	@ 0xff
 800e5fa:	7160      	strb	r0, [r4, #5]
 800e5fc:	9303      	str	r3, [sp, #12]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	f000 80b6 	beq.w	800e770 <wait_session_status+0x180>
 800e604:	468a      	mov	sl, r1
 800e606:	4691      	mov	r9, r2
 800e608:	f04f 0b00 	mov.w	fp, #0
 800e60c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e60e:	464a      	mov	r2, r9
 800e610:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e614:	4651      	mov	r1, sl
 800e616:	47a8      	blx	r5
 800e618:	f000 fca4 	bl	800ef64 <uxr_millis>
 800e61c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e620:	4605      	mov	r5, r0
 800e622:	e009      	b.n	800e638 <wait_session_status+0x48>
 800e624:	f000 fc9e 	bl	800ef64 <uxr_millis>
 800e628:	1b40      	subs	r0, r0, r5
 800e62a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e62e:	2b00      	cmp	r3, #0
 800e630:	dd40      	ble.n	800e6b4 <wait_session_status+0xc4>
 800e632:	7960      	ldrb	r0, [r4, #5]
 800e634:	28ff      	cmp	r0, #255	@ 0xff
 800e636:	d145      	bne.n	800e6c4 <wait_session_status+0xd4>
 800e638:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e63a:	a908      	add	r1, sp, #32
 800e63c:	6896      	ldr	r6, [r2, #8]
 800e63e:	6810      	ldr	r0, [r2, #0]
 800e640:	aa09      	add	r2, sp, #36	@ 0x24
 800e642:	47b0      	blx	r6
 800e644:	2800      	cmp	r0, #0
 800e646:	d0ed      	beq.n	800e624 <wait_session_status+0x34>
 800e648:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e64c:	a80c      	add	r0, sp, #48	@ 0x30
 800e64e:	f7fd f8ff 	bl	800b850 <ucdr_init_buffer>
 800e652:	2600      	movs	r6, #0
 800e654:	f10d 031e 	add.w	r3, sp, #30
 800e658:	aa07      	add	r2, sp, #28
 800e65a:	a90c      	add	r1, sp, #48	@ 0x30
 800e65c:	4620      	mov	r0, r4
 800e65e:	f88d 601c 	strb.w	r6, [sp, #28]
 800e662:	f000 fa87 	bl	800eb74 <uxr_read_session_header>
 800e666:	2800      	cmp	r0, #0
 800e668:	d0dc      	beq.n	800e624 <wait_session_status+0x34>
 800e66a:	4631      	mov	r1, r6
 800e66c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800e670:	f000 fb24 	bl	800ecbc <uxr_stream_id_from_raw>
 800e674:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800e678:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800e67c:	9302      	str	r3, [sp, #8]
 800e67e:	2f01      	cmp	r7, #1
 800e680:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800e684:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e688:	d05c      	beq.n	800e744 <wait_session_status+0x154>
 800e68a:	2f02      	cmp	r7, #2
 800e68c:	d020      	beq.n	800e6d0 <wait_session_status+0xe0>
 800e68e:	2f00      	cmp	r7, #0
 800e690:	d1c8      	bne.n	800e624 <wait_session_status+0x34>
 800e692:	4639      	mov	r1, r7
 800e694:	4638      	mov	r0, r7
 800e696:	f000 fb11 	bl	800ecbc <uxr_stream_id_from_raw>
 800e69a:	a90c      	add	r1, sp, #48	@ 0x30
 800e69c:	4602      	mov	r2, r0
 800e69e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	f7ff fc2b 	bl	800defc <read_submessage_list>
 800e6a6:	f000 fc5d 	bl	800ef64 <uxr_millis>
 800e6aa:	1b40      	subs	r0, r0, r5
 800e6ac:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	dcbe      	bgt.n	800e632 <wait_session_status+0x42>
 800e6b4:	9b03      	ldr	r3, [sp, #12]
 800e6b6:	7960      	ldrb	r0, [r4, #5]
 800e6b8:	f10b 0b01 	add.w	fp, fp, #1
 800e6bc:	455b      	cmp	r3, fp
 800e6be:	d001      	beq.n	800e6c4 <wait_session_status+0xd4>
 800e6c0:	28ff      	cmp	r0, #255	@ 0xff
 800e6c2:	d0a3      	beq.n	800e60c <wait_session_status+0x1c>
 800e6c4:	38ff      	subs	r0, #255	@ 0xff
 800e6c6:	bf18      	it	ne
 800e6c8:	2001      	movne	r0, #1
 800e6ca:	b01d      	add	sp, #116	@ 0x74
 800e6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800e6d4:	9304      	str	r3, [sp, #16]
 800e6d6:	4631      	mov	r1, r6
 800e6d8:	f104 0008 	add.w	r0, r4, #8
 800e6dc:	f000 fbdc 	bl	800ee98 <uxr_get_input_reliable_stream>
 800e6e0:	4680      	mov	r8, r0
 800e6e2:	b348      	cbz	r0, 800e738 <wait_session_status+0x148>
 800e6e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6e6:	9205      	str	r2, [sp, #20]
 800e6e8:	a80c      	add	r0, sp, #48	@ 0x30
 800e6ea:	f7fd f8e1 	bl	800b8b0 <ucdr_buffer_remaining>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	f10d 001d 	add.w	r0, sp, #29
 800e6f4:	9000      	str	r0, [sp, #0]
 800e6f6:	9a05      	ldr	r2, [sp, #20]
 800e6f8:	9902      	ldr	r1, [sp, #8]
 800e6fa:	4640      	mov	r0, r8
 800e6fc:	f006 fdac 	bl	8015258 <uxr_receive_reliable_message>
 800e700:	b1d0      	cbz	r0, 800e738 <wait_session_status+0x148>
 800e702:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d03a      	beq.n	800e780 <wait_session_status+0x190>
 800e70a:	9f04      	ldr	r7, [sp, #16]
 800e70c:	e00a      	b.n	800e724 <wait_session_status+0x134>
 800e70e:	f04f 0302 	mov.w	r3, #2
 800e712:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800e716:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800e71a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800e71e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e720:	f7ff fbec 	bl	800defc <read_submessage_list>
 800e724:	a914      	add	r1, sp, #80	@ 0x50
 800e726:	2204      	movs	r2, #4
 800e728:	4640      	mov	r0, r8
 800e72a:	f006 fe15 	bl	8015358 <uxr_next_input_reliable_buffer_available>
 800e72e:	4603      	mov	r3, r0
 800e730:	a914      	add	r1, sp, #80	@ 0x50
 800e732:	4620      	mov	r0, r4
 800e734:	2b00      	cmp	r3, #0
 800e736:	d1ea      	bne.n	800e70e <wait_session_status+0x11e>
 800e738:	9904      	ldr	r1, [sp, #16]
 800e73a:	4632      	mov	r2, r6
 800e73c:	4620      	mov	r0, r4
 800e73e:	f7ff fa59 	bl	800dbf4 <write_submessage_acknack.isra.0>
 800e742:	e76f      	b.n	800e624 <wait_session_status+0x34>
 800e744:	4631      	mov	r1, r6
 800e746:	f104 0008 	add.w	r0, r4, #8
 800e74a:	f000 fb9b 	bl	800ee84 <uxr_get_input_best_effort_stream>
 800e74e:	2800      	cmp	r0, #0
 800e750:	f43f af68 	beq.w	800e624 <wait_session_status+0x34>
 800e754:	9902      	ldr	r1, [sp, #8]
 800e756:	f006 fceb 	bl	8015130 <uxr_receive_best_effort_message>
 800e75a:	2800      	cmp	r0, #0
 800e75c:	f43f af62 	beq.w	800e624 <wait_session_status+0x34>
 800e760:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e764:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e766:	a90c      	add	r1, sp, #48	@ 0x30
 800e768:	4620      	mov	r0, r4
 800e76a:	f7ff fbc7 	bl	800defc <read_submessage_list>
 800e76e:	e759      	b.n	800e624 <wait_session_status+0x34>
 800e770:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e772:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e776:	47a0      	blx	r4
 800e778:	2001      	movs	r0, #1
 800e77a:	b01d      	add	sp, #116	@ 0x74
 800e77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e780:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e784:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e786:	a90c      	add	r1, sp, #48	@ 0x30
 800e788:	4620      	mov	r0, r4
 800e78a:	f7ff fbb7 	bl	800defc <read_submessage_list>
 800e78e:	e7bc      	b.n	800e70a <wait_session_status+0x11a>

0800e790 <uxr_delete_session_retries>:
 800e790:	b530      	push	{r4, r5, lr}
 800e792:	b08f      	sub	sp, #60	@ 0x3c
 800e794:	4604      	mov	r4, r0
 800e796:	460d      	mov	r5, r1
 800e798:	f000 fa2e 	bl	800ebf8 <uxr_session_header_offset>
 800e79c:	2300      	movs	r3, #0
 800e79e:	2210      	movs	r2, #16
 800e7a0:	9000      	str	r0, [sp, #0]
 800e7a2:	a902      	add	r1, sp, #8
 800e7a4:	a806      	add	r0, sp, #24
 800e7a6:	f7fd f841 	bl	800b82c <ucdr_init_buffer_origin_offset>
 800e7aa:	a906      	add	r1, sp, #24
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	f000 f973 	bl	800ea98 <uxr_buffer_delete_session>
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	4611      	mov	r1, r2
 800e7b6:	9b06      	ldr	r3, [sp, #24]
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	f000 f9c7 	bl	800eb4c <uxr_stamp_session_header>
 800e7be:	a806      	add	r0, sp, #24
 800e7c0:	f7fd f872 	bl	800b8a8 <ucdr_buffer_length>
 800e7c4:	462b      	mov	r3, r5
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	a902      	add	r1, sp, #8
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	f7ff ff10 	bl	800e5f0 <wait_session_status>
 800e7d0:	b118      	cbz	r0, 800e7da <uxr_delete_session_retries+0x4a>
 800e7d2:	7960      	ldrb	r0, [r4, #5]
 800e7d4:	fab0 f080 	clz	r0, r0
 800e7d8:	0940      	lsrs	r0, r0, #5
 800e7da:	b00f      	add	sp, #60	@ 0x3c
 800e7dc:	bd30      	pop	{r4, r5, pc}
 800e7de:	bf00      	nop

0800e7e0 <uxr_create_session>:
 800e7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e4:	f100 0b08 	add.w	fp, r0, #8
 800e7e8:	b0ab      	sub	sp, #172	@ 0xac
 800e7ea:	4604      	mov	r4, r0
 800e7ec:	4658      	mov	r0, fp
 800e7ee:	f000 fa99 	bl	800ed24 <uxr_reset_stream_storage>
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	f000 fa00 	bl	800ebf8 <uxr_session_header_offset>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	9000      	str	r0, [sp, #0]
 800e7fc:	221c      	movs	r2, #28
 800e7fe:	a90b      	add	r1, sp, #44	@ 0x2c
 800e800:	a812      	add	r0, sp, #72	@ 0x48
 800e802:	f7fd f813 	bl	800b82c <ucdr_init_buffer_origin_offset>
 800e806:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e808:	8a1a      	ldrh	r2, [r3, #16]
 800e80a:	3a04      	subs	r2, #4
 800e80c:	b292      	uxth	r2, r2
 800e80e:	a912      	add	r1, sp, #72	@ 0x48
 800e810:	4620      	mov	r0, r4
 800e812:	f000 f917 	bl	800ea44 <uxr_buffer_create_session>
 800e816:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e818:	4620      	mov	r0, r4
 800e81a:	f000 f983 	bl	800eb24 <uxr_stamp_create_session_header>
 800e81e:	a812      	add	r0, sp, #72	@ 0x48
 800e820:	f7fd f842 	bl	800b8a8 <ucdr_buffer_length>
 800e824:	23ff      	movs	r3, #255	@ 0xff
 800e826:	7163      	strb	r3, [r4, #5]
 800e828:	230a      	movs	r3, #10
 800e82a:	46da      	mov	sl, fp
 800e82c:	9303      	str	r3, [sp, #12]
 800e82e:	4683      	mov	fp, r0
 800e830:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e832:	465a      	mov	r2, fp
 800e834:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e838:	a90b      	add	r1, sp, #44	@ 0x2c
 800e83a:	47a8      	blx	r5
 800e83c:	f000 fb92 	bl	800ef64 <uxr_millis>
 800e840:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e844:	4605      	mov	r5, r0
 800e846:	e009      	b.n	800e85c <uxr_create_session+0x7c>
 800e848:	f000 fb8c 	bl	800ef64 <uxr_millis>
 800e84c:	1b40      	subs	r0, r0, r5
 800e84e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e852:	2b00      	cmp	r3, #0
 800e854:	7962      	ldrb	r2, [r4, #5]
 800e856:	dd38      	ble.n	800e8ca <uxr_create_session+0xea>
 800e858:	2aff      	cmp	r2, #255	@ 0xff
 800e85a:	d13c      	bne.n	800e8d6 <uxr_create_session+0xf6>
 800e85c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e85e:	a907      	add	r1, sp, #28
 800e860:	6896      	ldr	r6, [r2, #8]
 800e862:	6810      	ldr	r0, [r2, #0]
 800e864:	aa08      	add	r2, sp, #32
 800e866:	47b0      	blx	r6
 800e868:	2800      	cmp	r0, #0
 800e86a:	d0ed      	beq.n	800e848 <uxr_create_session+0x68>
 800e86c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e870:	a81a      	add	r0, sp, #104	@ 0x68
 800e872:	f7fc ffed 	bl	800b850 <ucdr_init_buffer>
 800e876:	2600      	movs	r6, #0
 800e878:	f10d 031a 	add.w	r3, sp, #26
 800e87c:	aa06      	add	r2, sp, #24
 800e87e:	a91a      	add	r1, sp, #104	@ 0x68
 800e880:	4620      	mov	r0, r4
 800e882:	f88d 6018 	strb.w	r6, [sp, #24]
 800e886:	f000 f975 	bl	800eb74 <uxr_read_session_header>
 800e88a:	2800      	cmp	r0, #0
 800e88c:	d0dc      	beq.n	800e848 <uxr_create_session+0x68>
 800e88e:	4631      	mov	r1, r6
 800e890:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e894:	f000 fa12 	bl	800ecbc <uxr_stream_id_from_raw>
 800e898:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800e89c:	2e01      	cmp	r6, #1
 800e89e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e8a2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800e8a6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e8aa:	d053      	beq.n	800e954 <uxr_create_session+0x174>
 800e8ac:	2e02      	cmp	r6, #2
 800e8ae:	d018      	beq.n	800e8e2 <uxr_create_session+0x102>
 800e8b0:	2e00      	cmp	r6, #0
 800e8b2:	d1c9      	bne.n	800e848 <uxr_create_session+0x68>
 800e8b4:	4631      	mov	r1, r6
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	f000 fa00 	bl	800ecbc <uxr_stream_id_from_raw>
 800e8bc:	a91a      	add	r1, sp, #104	@ 0x68
 800e8be:	4602      	mov	r2, r0
 800e8c0:	900a      	str	r0, [sp, #40]	@ 0x28
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	f7ff fb1a 	bl	800defc <read_submessage_list>
 800e8c8:	e7be      	b.n	800e848 <uxr_create_session+0x68>
 800e8ca:	9b03      	ldr	r3, [sp, #12]
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	9303      	str	r3, [sp, #12]
 800e8d0:	d001      	beq.n	800e8d6 <uxr_create_session+0xf6>
 800e8d2:	2aff      	cmp	r2, #255	@ 0xff
 800e8d4:	d0ac      	beq.n	800e830 <uxr_create_session+0x50>
 800e8d6:	2a00      	cmp	r2, #0
 800e8d8:	d051      	beq.n	800e97e <uxr_create_session+0x19e>
 800e8da:	2000      	movs	r0, #0
 800e8dc:	b02b      	add	sp, #172	@ 0xac
 800e8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e8e6:	9304      	str	r3, [sp, #16]
 800e8e8:	4639      	mov	r1, r7
 800e8ea:	4650      	mov	r0, sl
 800e8ec:	f000 fad4 	bl	800ee98 <uxr_get_input_reliable_stream>
 800e8f0:	4680      	mov	r8, r0
 800e8f2:	b348      	cbz	r0, 800e948 <uxr_create_session+0x168>
 800e8f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e8f6:	9205      	str	r2, [sp, #20]
 800e8f8:	a81a      	add	r0, sp, #104	@ 0x68
 800e8fa:	f7fc ffd9 	bl	800b8b0 <ucdr_buffer_remaining>
 800e8fe:	4603      	mov	r3, r0
 800e900:	f10d 0019 	add.w	r0, sp, #25
 800e904:	9000      	str	r0, [sp, #0]
 800e906:	9a05      	ldr	r2, [sp, #20]
 800e908:	4649      	mov	r1, r9
 800e90a:	4640      	mov	r0, r8
 800e90c:	f006 fca4 	bl	8015258 <uxr_receive_reliable_message>
 800e910:	b1d0      	cbz	r0, 800e948 <uxr_create_session+0x168>
 800e912:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d038      	beq.n	800e98c <uxr_create_session+0x1ac>
 800e91a:	9e04      	ldr	r6, [sp, #16]
 800e91c:	e00a      	b.n	800e934 <uxr_create_session+0x154>
 800e91e:	f04f 0302 	mov.w	r3, #2
 800e922:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800e926:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800e92a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e92e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e930:	f7ff fae4 	bl	800defc <read_submessage_list>
 800e934:	a922      	add	r1, sp, #136	@ 0x88
 800e936:	2204      	movs	r2, #4
 800e938:	4640      	mov	r0, r8
 800e93a:	f006 fd0d 	bl	8015358 <uxr_next_input_reliable_buffer_available>
 800e93e:	4603      	mov	r3, r0
 800e940:	a922      	add	r1, sp, #136	@ 0x88
 800e942:	4620      	mov	r0, r4
 800e944:	2b00      	cmp	r3, #0
 800e946:	d1ea      	bne.n	800e91e <uxr_create_session+0x13e>
 800e948:	9904      	ldr	r1, [sp, #16]
 800e94a:	463a      	mov	r2, r7
 800e94c:	4620      	mov	r0, r4
 800e94e:	f7ff f951 	bl	800dbf4 <write_submessage_acknack.isra.0>
 800e952:	e779      	b.n	800e848 <uxr_create_session+0x68>
 800e954:	4639      	mov	r1, r7
 800e956:	4650      	mov	r0, sl
 800e958:	f000 fa94 	bl	800ee84 <uxr_get_input_best_effort_stream>
 800e95c:	2800      	cmp	r0, #0
 800e95e:	f43f af73 	beq.w	800e848 <uxr_create_session+0x68>
 800e962:	4649      	mov	r1, r9
 800e964:	f006 fbe4 	bl	8015130 <uxr_receive_best_effort_message>
 800e968:	2800      	cmp	r0, #0
 800e96a:	f43f af6d 	beq.w	800e848 <uxr_create_session+0x68>
 800e96e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e972:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e974:	a91a      	add	r1, sp, #104	@ 0x68
 800e976:	4620      	mov	r0, r4
 800e978:	f7ff fac0 	bl	800defc <read_submessage_list>
 800e97c:	e764      	b.n	800e848 <uxr_create_session+0x68>
 800e97e:	4650      	mov	r0, sl
 800e980:	f000 f9d0 	bl	800ed24 <uxr_reset_stream_storage>
 800e984:	2001      	movs	r0, #1
 800e986:	b02b      	add	sp, #172	@ 0xac
 800e988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e98c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e990:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e992:	a91a      	add	r1, sp, #104	@ 0x68
 800e994:	4620      	mov	r0, r4
 800e996:	f7ff fab1 	bl	800defc <read_submessage_list>
 800e99a:	e7be      	b.n	800e91a <uxr_create_session+0x13a>

0800e99c <uxr_prepare_stream_to_write_submessage>:
 800e99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9a0:	b082      	sub	sp, #8
 800e9a2:	4682      	mov	sl, r0
 800e9a4:	4610      	mov	r0, r2
 800e9a6:	4615      	mov	r5, r2
 800e9a8:	461e      	mov	r6, r3
 800e9aa:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800e9ae:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800e9b2:	9101      	str	r1, [sp, #4]
 800e9b4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e9b8:	f000 face 	bl	800ef58 <uxr_submessage_padding>
 800e9bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e9c0:	f105 0904 	add.w	r9, r5, #4
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	4481      	add	r9, r0
 800e9c8:	d01d      	beq.n	800ea06 <uxr_prepare_stream_to_write_submessage+0x6a>
 800e9ca:	2b02      	cmp	r3, #2
 800e9cc:	d116      	bne.n	800e9fc <uxr_prepare_stream_to_write_submessage+0x60>
 800e9ce:	4621      	mov	r1, r4
 800e9d0:	f10a 0008 	add.w	r0, sl, #8
 800e9d4:	f000 fa4c 	bl	800ee70 <uxr_get_output_reliable_stream>
 800e9d8:	4604      	mov	r4, r0
 800e9da:	b158      	cbz	r0, 800e9f4 <uxr_prepare_stream_to_write_submessage+0x58>
 800e9dc:	4649      	mov	r1, r9
 800e9de:	4632      	mov	r2, r6
 800e9e0:	f006 fe76 	bl	80156d0 <uxr_prepare_reliable_buffer_to_write>
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	b12c      	cbz	r4, 800e9f4 <uxr_prepare_stream_to_write_submessage+0x58>
 800e9e8:	4643      	mov	r3, r8
 800e9ea:	b2aa      	uxth	r2, r5
 800e9ec:	4639      	mov	r1, r7
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	f000 fa72 	bl	800eed8 <uxr_buffer_submessage_header>
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	b002      	add	sp, #8
 800e9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9fc:	2400      	movs	r4, #0
 800e9fe:	4620      	mov	r0, r4
 800ea00:	b002      	add	sp, #8
 800ea02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea06:	4621      	mov	r1, r4
 800ea08:	f10a 0008 	add.w	r0, sl, #8
 800ea0c:	f000 fa28 	bl	800ee60 <uxr_get_output_best_effort_stream>
 800ea10:	4604      	mov	r4, r0
 800ea12:	2800      	cmp	r0, #0
 800ea14:	d0ee      	beq.n	800e9f4 <uxr_prepare_stream_to_write_submessage+0x58>
 800ea16:	4649      	mov	r1, r9
 800ea18:	4632      	mov	r2, r6
 800ea1a:	f006 fd89 	bl	8015530 <uxr_prepare_best_effort_buffer_to_write>
 800ea1e:	4604      	mov	r4, r0
 800ea20:	e7e1      	b.n	800e9e6 <uxr_prepare_stream_to_write_submessage+0x4a>
 800ea22:	bf00      	nop

0800ea24 <uxr_init_session_info>:
 800ea24:	0e13      	lsrs	r3, r2, #24
 800ea26:	7043      	strb	r3, [r0, #1]
 800ea28:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800ea2c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800ea30:	7001      	strb	r1, [r0, #0]
 800ea32:	70c3      	strb	r3, [r0, #3]
 800ea34:	2109      	movs	r1, #9
 800ea36:	23ff      	movs	r3, #255	@ 0xff
 800ea38:	f880 c002 	strb.w	ip, [r0, #2]
 800ea3c:	7102      	strb	r2, [r0, #4]
 800ea3e:	80c1      	strh	r1, [r0, #6]
 800ea40:	7143      	strb	r3, [r0, #5]
 800ea42:	4770      	bx	lr

0800ea44 <uxr_buffer_create_session>:
 800ea44:	b530      	push	{r4, r5, lr}
 800ea46:	b089      	sub	sp, #36	@ 0x24
 800ea48:	2300      	movs	r3, #0
 800ea4a:	4d12      	ldr	r5, [pc, #72]	@ (800ea94 <uxr_buffer_create_session+0x50>)
 800ea4c:	9307      	str	r3, [sp, #28]
 800ea4e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800ea52:	2201      	movs	r2, #1
 800ea54:	9301      	str	r3, [sp, #4]
 800ea56:	80c2      	strh	r2, [r0, #6]
 800ea58:	f88d 2004 	strb.w	r2, [sp, #4]
 800ea5c:	682a      	ldr	r2, [r5, #0]
 800ea5e:	9200      	str	r2, [sp, #0]
 800ea60:	88aa      	ldrh	r2, [r5, #4]
 800ea62:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ea66:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800ea6a:	9202      	str	r2, [sp, #8]
 800ea6c:	460c      	mov	r4, r1
 800ea6e:	7802      	ldrb	r2, [r0, #0]
 800ea70:	9303      	str	r3, [sp, #12]
 800ea72:	4619      	mov	r1, r3
 800ea74:	f88d 200c 	strb.w	r2, [sp, #12]
 800ea78:	4620      	mov	r0, r4
 800ea7a:	2210      	movs	r2, #16
 800ea7c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800ea80:	9306      	str	r3, [sp, #24]
 800ea82:	f000 fa29 	bl	800eed8 <uxr_buffer_submessage_header>
 800ea86:	4669      	mov	r1, sp
 800ea88:	4620      	mov	r0, r4
 800ea8a:	f001 fa6d 	bl	800ff68 <uxr_serialize_CREATE_CLIENT_Payload>
 800ea8e:	b009      	add	sp, #36	@ 0x24
 800ea90:	bd30      	pop	{r4, r5, pc}
 800ea92:	bf00      	nop
 800ea94:	080187f8 	.word	0x080187f8

0800ea98 <uxr_buffer_delete_session>:
 800ea98:	b510      	push	{r4, lr}
 800ea9a:	4b0c      	ldr	r3, [pc, #48]	@ (800eacc <uxr_buffer_delete_session+0x34>)
 800ea9c:	b082      	sub	sp, #8
 800ea9e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800eaa2:	f8ad c006 	strh.w	ip, [sp, #6]
 800eaa6:	460c      	mov	r4, r1
 800eaa8:	2202      	movs	r2, #2
 800eaaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eaae:	80c2      	strh	r2, [r0, #6]
 800eab0:	f8ad 3004 	strh.w	r3, [sp, #4]
 800eab4:	2204      	movs	r2, #4
 800eab6:	2300      	movs	r3, #0
 800eab8:	2103      	movs	r1, #3
 800eaba:	4620      	mov	r0, r4
 800eabc:	f000 fa0c 	bl	800eed8 <uxr_buffer_submessage_header>
 800eac0:	a901      	add	r1, sp, #4
 800eac2:	4620      	mov	r0, r4
 800eac4:	f001 faf6 	bl	80100b4 <uxr_serialize_DELETE_Payload>
 800eac8:	b002      	add	sp, #8
 800eaca:	bd10      	pop	{r4, pc}
 800eacc:	080187f8 	.word	0x080187f8

0800ead0 <uxr_read_create_session_status>:
 800ead0:	b510      	push	{r4, lr}
 800ead2:	b088      	sub	sp, #32
 800ead4:	4604      	mov	r4, r0
 800ead6:	4608      	mov	r0, r1
 800ead8:	a901      	add	r1, sp, #4
 800eada:	f001 fafb 	bl	80100d4 <uxr_deserialize_STATUS_AGENT_Payload>
 800eade:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eae2:	7163      	strb	r3, [r4, #5]
 800eae4:	b008      	add	sp, #32
 800eae6:	bd10      	pop	{r4, pc}

0800eae8 <uxr_read_delete_session_status>:
 800eae8:	b510      	push	{r4, lr}
 800eaea:	4604      	mov	r4, r0
 800eaec:	b084      	sub	sp, #16
 800eaee:	4608      	mov	r0, r1
 800eaf0:	a902      	add	r1, sp, #8
 800eaf2:	f001 fb1f 	bl	8010134 <uxr_deserialize_STATUS_Payload>
 800eaf6:	88e3      	ldrh	r3, [r4, #6]
 800eaf8:	2b02      	cmp	r3, #2
 800eafa:	d001      	beq.n	800eb00 <uxr_read_delete_session_status+0x18>
 800eafc:	b004      	add	sp, #16
 800eafe:	bd10      	pop	{r4, pc}
 800eb00:	f10d 000a 	add.w	r0, sp, #10
 800eb04:	f7fe fffc 	bl	800db00 <uxr_object_id_from_raw>
 800eb08:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800eb0c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800eb10:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800eb14:	b29b      	uxth	r3, r3
 800eb16:	2b02      	cmp	r3, #2
 800eb18:	bf04      	itt	eq
 800eb1a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800eb1e:	7163      	strbeq	r3, [r4, #5]
 800eb20:	b004      	add	sp, #16
 800eb22:	bd10      	pop	{r4, pc}

0800eb24 <uxr_stamp_create_session_header>:
 800eb24:	b510      	push	{r4, lr}
 800eb26:	2208      	movs	r2, #8
 800eb28:	b08a      	sub	sp, #40	@ 0x28
 800eb2a:	4604      	mov	r4, r0
 800eb2c:	eb0d 0002 	add.w	r0, sp, r2
 800eb30:	f7fc fe8e 	bl	800b850 <ucdr_init_buffer>
 800eb34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb38:	9400      	str	r4, [sp, #0]
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800eb42:	a802      	add	r0, sp, #8
 800eb44:	f000 fbc2 	bl	800f2cc <uxr_serialize_message_header>
 800eb48:	b00a      	add	sp, #40	@ 0x28
 800eb4a:	bd10      	pop	{r4, pc}

0800eb4c <uxr_stamp_session_header>:
 800eb4c:	b530      	push	{r4, r5, lr}
 800eb4e:	b08d      	sub	sp, #52	@ 0x34
 800eb50:	4604      	mov	r4, r0
 800eb52:	460d      	mov	r5, r1
 800eb54:	9203      	str	r2, [sp, #12]
 800eb56:	4619      	mov	r1, r3
 800eb58:	a804      	add	r0, sp, #16
 800eb5a:	2208      	movs	r2, #8
 800eb5c:	f7fc fe78 	bl	800b850 <ucdr_init_buffer>
 800eb60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb64:	9b03      	ldr	r3, [sp, #12]
 800eb66:	9400      	str	r4, [sp, #0]
 800eb68:	462a      	mov	r2, r5
 800eb6a:	a804      	add	r0, sp, #16
 800eb6c:	f000 fbae 	bl	800f2cc <uxr_serialize_message_header>
 800eb70:	b00d      	add	sp, #52	@ 0x34
 800eb72:	bd30      	pop	{r4, r5, pc}

0800eb74 <uxr_read_session_header>:
 800eb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb78:	4607      	mov	r7, r0
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	4608      	mov	r0, r1
 800eb7e:	460c      	mov	r4, r1
 800eb80:	4615      	mov	r5, r2
 800eb82:	461e      	mov	r6, r3
 800eb84:	f7fc fe94 	bl	800b8b0 <ucdr_buffer_remaining>
 800eb88:	2808      	cmp	r0, #8
 800eb8a:	d803      	bhi.n	800eb94 <uxr_read_session_header+0x20>
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	b004      	add	sp, #16
 800eb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb94:	f10d 080c 	add.w	r8, sp, #12
 800eb98:	4633      	mov	r3, r6
 800eb9a:	462a      	mov	r2, r5
 800eb9c:	f8cd 8000 	str.w	r8, [sp]
 800eba0:	4620      	mov	r0, r4
 800eba2:	f10d 010b 	add.w	r1, sp, #11
 800eba6:	f000 fbaf 	bl	800f308 <uxr_deserialize_message_header>
 800ebaa:	783a      	ldrb	r2, [r7, #0]
 800ebac:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d1eb      	bne.n	800eb8c <uxr_read_session_header+0x18>
 800ebb4:	061b      	lsls	r3, r3, #24
 800ebb6:	d41c      	bmi.n	800ebf2 <uxr_read_session_header+0x7e>
 800ebb8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ebbc:	787b      	ldrb	r3, [r7, #1]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d003      	beq.n	800ebca <uxr_read_session_header+0x56>
 800ebc2:	2001      	movs	r0, #1
 800ebc4:	f080 0001 	eor.w	r0, r0, #1
 800ebc8:	e7e1      	b.n	800eb8e <uxr_read_session_header+0x1a>
 800ebca:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800ebce:	78bb      	ldrb	r3, [r7, #2]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	f107 0102 	add.w	r1, r7, #2
 800ebd6:	d1f4      	bne.n	800ebc2 <uxr_read_session_header+0x4e>
 800ebd8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ebdc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d1ee      	bne.n	800ebc2 <uxr_read_session_header+0x4e>
 800ebe4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ebe8:	784b      	ldrb	r3, [r1, #1]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d1e9      	bne.n	800ebc2 <uxr_read_session_header+0x4e>
 800ebee:	2000      	movs	r0, #0
 800ebf0:	e7e8      	b.n	800ebc4 <uxr_read_session_header+0x50>
 800ebf2:	2001      	movs	r0, #1
 800ebf4:	e7cb      	b.n	800eb8e <uxr_read_session_header+0x1a>
 800ebf6:	bf00      	nop

0800ebf8 <uxr_session_header_offset>:
 800ebf8:	f990 3000 	ldrsb.w	r3, [r0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	bfac      	ite	ge
 800ec00:	2008      	movge	r0, #8
 800ec02:	2004      	movlt	r0, #4
 800ec04:	4770      	bx	lr
 800ec06:	bf00      	nop

0800ec08 <uxr_init_base_object_request>:
 800ec08:	b510      	push	{r4, lr}
 800ec0a:	88c3      	ldrh	r3, [r0, #6]
 800ec0c:	b082      	sub	sp, #8
 800ec0e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800ec12:	9101      	str	r1, [sp, #4]
 800ec14:	f1a3 010a 	sub.w	r1, r3, #10
 800ec18:	b289      	uxth	r1, r1
 800ec1a:	42a1      	cmp	r1, r4
 800ec1c:	d80e      	bhi.n	800ec3c <uxr_init_base_object_request+0x34>
 800ec1e:	3301      	adds	r3, #1
 800ec20:	b29c      	uxth	r4, r3
 800ec22:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ec26:	b2db      	uxtb	r3, r3
 800ec28:	80c4      	strh	r4, [r0, #6]
 800ec2a:	9801      	ldr	r0, [sp, #4]
 800ec2c:	7011      	strb	r1, [r2, #0]
 800ec2e:	7053      	strb	r3, [r2, #1]
 800ec30:	1c91      	adds	r1, r2, #2
 800ec32:	f7fe ff79 	bl	800db28 <uxr_object_id_to_raw>
 800ec36:	4620      	mov	r0, r4
 800ec38:	b002      	add	sp, #8
 800ec3a:	bd10      	pop	{r4, pc}
 800ec3c:	230a      	movs	r3, #10
 800ec3e:	2100      	movs	r1, #0
 800ec40:	461c      	mov	r4, r3
 800ec42:	e7f1      	b.n	800ec28 <uxr_init_base_object_request+0x20>

0800ec44 <uxr_parse_base_object_request>:
 800ec44:	b570      	push	{r4, r5, r6, lr}
 800ec46:	4604      	mov	r4, r0
 800ec48:	3002      	adds	r0, #2
 800ec4a:	460d      	mov	r5, r1
 800ec4c:	4616      	mov	r6, r2
 800ec4e:	f7fe ff57 	bl	800db00 <uxr_object_id_from_raw>
 800ec52:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800ec56:	8028      	strh	r0, [r5, #0]
 800ec58:	806b      	strh	r3, [r5, #2]
 800ec5a:	7822      	ldrb	r2, [r4, #0]
 800ec5c:	7863      	ldrb	r3, [r4, #1]
 800ec5e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ec62:	8033      	strh	r3, [r6, #0]
 800ec64:	bd70      	pop	{r4, r5, r6, pc}
 800ec66:	bf00      	nop

0800ec68 <uxr_stream_id>:
 800ec68:	2901      	cmp	r1, #1
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	d01d      	beq.n	800ecaa <uxr_stream_id+0x42>
 800ec6e:	2902      	cmp	r1, #2
 800ec70:	f04f 0c00 	mov.w	ip, #0
 800ec74:	d01e      	beq.n	800ecb4 <uxr_stream_id+0x4c>
 800ec76:	2300      	movs	r3, #0
 800ec78:	f36c 0307 	bfi	r3, ip, #0, #8
 800ec7c:	f360 230f 	bfi	r3, r0, #8, #8
 800ec80:	f361 4317 	bfi	r3, r1, #16, #8
 800ec84:	f362 631f 	bfi	r3, r2, #24, #8
 800ec88:	b2da      	uxtb	r2, r3
 800ec8a:	2000      	movs	r0, #0
 800ec8c:	f362 0007 	bfi	r0, r2, #0, #8
 800ec90:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ec94:	f362 200f 	bfi	r0, r2, #8, #8
 800ec98:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ec9c:	f362 4017 	bfi	r0, r2, #16, #8
 800eca0:	0e1b      	lsrs	r3, r3, #24
 800eca2:	f363 601f 	bfi	r0, r3, #24, #8
 800eca6:	b002      	add	sp, #8
 800eca8:	4770      	bx	lr
 800ecaa:	f100 0c01 	add.w	ip, r0, #1
 800ecae:	fa5f fc8c 	uxtb.w	ip, ip
 800ecb2:	e7e0      	b.n	800ec76 <uxr_stream_id+0xe>
 800ecb4:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800ecb8:	e7dd      	b.n	800ec76 <uxr_stream_id+0xe>
 800ecba:	bf00      	nop

0800ecbc <uxr_stream_id_from_raw>:
 800ecbc:	b082      	sub	sp, #8
 800ecbe:	b130      	cbz	r0, 800ecce <uxr_stream_id_from_raw+0x12>
 800ecc0:	0603      	lsls	r3, r0, #24
 800ecc2:	d420      	bmi.n	800ed06 <uxr_stream_id_from_raw+0x4a>
 800ecc4:	1e42      	subs	r2, r0, #1
 800ecc6:	b2d2      	uxtb	r2, r2
 800ecc8:	f04f 0c01 	mov.w	ip, #1
 800eccc:	e001      	b.n	800ecd2 <uxr_stream_id_from_raw+0x16>
 800ecce:	4684      	mov	ip, r0
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	f360 0307 	bfi	r3, r0, #0, #8
 800ecd8:	f362 230f 	bfi	r3, r2, #8, #8
 800ecdc:	f36c 4317 	bfi	r3, ip, #16, #8
 800ece0:	f361 631f 	bfi	r3, r1, #24, #8
 800ece4:	b2da      	uxtb	r2, r3
 800ece6:	2000      	movs	r0, #0
 800ece8:	f362 0007 	bfi	r0, r2, #0, #8
 800ecec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ecf0:	f362 200f 	bfi	r0, r2, #8, #8
 800ecf4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ecf8:	f362 4017 	bfi	r0, r2, #16, #8
 800ecfc:	0e1b      	lsrs	r3, r3, #24
 800ecfe:	f363 601f 	bfi	r0, r3, #24, #8
 800ed02:	b002      	add	sp, #8
 800ed04:	4770      	bx	lr
 800ed06:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800ed0a:	f04f 0c02 	mov.w	ip, #2
 800ed0e:	e7e0      	b.n	800ecd2 <uxr_stream_id_from_raw+0x16>

0800ed10 <uxr_init_stream_storage>:
 800ed10:	2300      	movs	r3, #0
 800ed12:	7403      	strb	r3, [r0, #16]
 800ed14:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800ed18:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800ed1c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800ed20:	4770      	bx	lr
 800ed22:	bf00      	nop

0800ed24 <uxr_reset_stream_storage>:
 800ed24:	b570      	push	{r4, r5, r6, lr}
 800ed26:	7c03      	ldrb	r3, [r0, #16]
 800ed28:	4604      	mov	r4, r0
 800ed2a:	b153      	cbz	r3, 800ed42 <uxr_reset_stream_storage+0x1e>
 800ed2c:	4606      	mov	r6, r0
 800ed2e:	2500      	movs	r5, #0
 800ed30:	4630      	mov	r0, r6
 800ed32:	f006 fbf7 	bl	8015524 <uxr_reset_output_best_effort_stream>
 800ed36:	7c23      	ldrb	r3, [r4, #16]
 800ed38:	3501      	adds	r5, #1
 800ed3a:	42ab      	cmp	r3, r5
 800ed3c:	f106 0610 	add.w	r6, r6, #16
 800ed40:	d8f6      	bhi.n	800ed30 <uxr_reset_stream_storage+0xc>
 800ed42:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ed46:	b163      	cbz	r3, 800ed62 <uxr_reset_stream_storage+0x3e>
 800ed48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed4c:	2500      	movs	r5, #0
 800ed4e:	4630      	mov	r0, r6
 800ed50:	f006 f9ea 	bl	8015128 <uxr_reset_input_best_effort_stream>
 800ed54:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ed58:	3501      	adds	r5, #1
 800ed5a:	42ab      	cmp	r3, r5
 800ed5c:	f106 0602 	add.w	r6, r6, #2
 800ed60:	d8f5      	bhi.n	800ed4e <uxr_reset_stream_storage+0x2a>
 800ed62:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ed66:	b163      	cbz	r3, 800ed82 <uxr_reset_stream_storage+0x5e>
 800ed68:	f104 0618 	add.w	r6, r4, #24
 800ed6c:	2500      	movs	r5, #0
 800ed6e:	4630      	mov	r0, r6
 800ed70:	f006 fc84 	bl	801567c <uxr_reset_output_reliable_stream>
 800ed74:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ed78:	3501      	adds	r5, #1
 800ed7a:	42ab      	cmp	r3, r5
 800ed7c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800ed80:	d8f5      	bhi.n	800ed6e <uxr_reset_stream_storage+0x4a>
 800ed82:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ed86:	b163      	cbz	r3, 800eda2 <uxr_reset_stream_storage+0x7e>
 800ed88:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800ed8c:	2500      	movs	r5, #0
 800ed8e:	4630      	mov	r0, r6
 800ed90:	f006 fa3e 	bl	8015210 <uxr_reset_input_reliable_stream>
 800ed94:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ed98:	3501      	adds	r5, #1
 800ed9a:	42ab      	cmp	r3, r5
 800ed9c:	f106 0618 	add.w	r6, r6, #24
 800eda0:	d8f5      	bhi.n	800ed8e <uxr_reset_stream_storage+0x6a>
 800eda2:	bd70      	pop	{r4, r5, r6, pc}

0800eda4 <uxr_add_output_best_effort_buffer>:
 800eda4:	b510      	push	{r4, lr}
 800eda6:	7c04      	ldrb	r4, [r0, #16]
 800eda8:	f104 0c01 	add.w	ip, r4, #1
 800edac:	b082      	sub	sp, #8
 800edae:	f880 c010 	strb.w	ip, [r0, #16]
 800edb2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800edb6:	f006 fbab 	bl	8015510 <uxr_init_output_best_effort_stream>
 800edba:	2201      	movs	r2, #1
 800edbc:	4611      	mov	r1, r2
 800edbe:	4620      	mov	r0, r4
 800edc0:	b002      	add	sp, #8
 800edc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edc6:	f7ff bf4f 	b.w	800ec68 <uxr_stream_id>
 800edca:	bf00      	nop

0800edcc <uxr_add_output_reliable_buffer>:
 800edcc:	b510      	push	{r4, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	4684      	mov	ip, r0
 800edd2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800edd6:	9000      	str	r0, [sp, #0]
 800edd8:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800eddc:	2028      	movs	r0, #40	@ 0x28
 800edde:	fb00 c004 	mla	r0, r0, r4, ip
 800ede2:	f104 0e01 	add.w	lr, r4, #1
 800ede6:	3018      	adds	r0, #24
 800ede8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800edec:	f006 fc0e 	bl	801560c <uxr_init_output_reliable_stream>
 800edf0:	2201      	movs	r2, #1
 800edf2:	2102      	movs	r1, #2
 800edf4:	4620      	mov	r0, r4
 800edf6:	b004      	add	sp, #16
 800edf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edfc:	f7ff bf34 	b.w	800ec68 <uxr_stream_id>

0800ee00 <uxr_add_input_best_effort_buffer>:
 800ee00:	b510      	push	{r4, lr}
 800ee02:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800ee06:	4603      	mov	r3, r0
 800ee08:	1c62      	adds	r2, r4, #1
 800ee0a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800ee0e:	b082      	sub	sp, #8
 800ee10:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ee14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ee18:	f006 f982 	bl	8015120 <uxr_init_input_best_effort_stream>
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	2101      	movs	r1, #1
 800ee20:	4620      	mov	r0, r4
 800ee22:	b002      	add	sp, #8
 800ee24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee28:	f7ff bf1e 	b.w	800ec68 <uxr_stream_id>

0800ee2c <uxr_add_input_reliable_buffer>:
 800ee2c:	b510      	push	{r4, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	4684      	mov	ip, r0
 800ee32:	9806      	ldr	r0, [sp, #24]
 800ee34:	9000      	str	r0, [sp, #0]
 800ee36:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800ee3a:	2018      	movs	r0, #24
 800ee3c:	fb00 c004 	mla	r0, r0, r4, ip
 800ee40:	f104 0e01 	add.w	lr, r4, #1
 800ee44:	3048      	adds	r0, #72	@ 0x48
 800ee46:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800ee4a:	f006 f9b5 	bl	80151b8 <uxr_init_input_reliable_stream>
 800ee4e:	2200      	movs	r2, #0
 800ee50:	2102      	movs	r1, #2
 800ee52:	4620      	mov	r0, r4
 800ee54:	b004      	add	sp, #16
 800ee56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee5a:	f7ff bf05 	b.w	800ec68 <uxr_stream_id>
 800ee5e:	bf00      	nop

0800ee60 <uxr_get_output_best_effort_stream>:
 800ee60:	7c03      	ldrb	r3, [r0, #16]
 800ee62:	428b      	cmp	r3, r1
 800ee64:	bf8c      	ite	hi
 800ee66:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800ee6a:	2000      	movls	r0, #0
 800ee6c:	4770      	bx	lr
 800ee6e:	bf00      	nop

0800ee70 <uxr_get_output_reliable_stream>:
 800ee70:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ee74:	428b      	cmp	r3, r1
 800ee76:	bf83      	ittte	hi
 800ee78:	2328      	movhi	r3, #40	@ 0x28
 800ee7a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ee7e:	3018      	addhi	r0, #24
 800ee80:	2000      	movls	r0, #0
 800ee82:	4770      	bx	lr

0800ee84 <uxr_get_input_best_effort_stream>:
 800ee84:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ee88:	428b      	cmp	r3, r1
 800ee8a:	bf86      	itte	hi
 800ee8c:	3121      	addhi	r1, #33	@ 0x21
 800ee8e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800ee92:	2000      	movls	r0, #0
 800ee94:	4770      	bx	lr
 800ee96:	bf00      	nop

0800ee98 <uxr_get_input_reliable_stream>:
 800ee98:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800ee9c:	428b      	cmp	r3, r1
 800ee9e:	bf83      	ittte	hi
 800eea0:	2318      	movhi	r3, #24
 800eea2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800eea6:	3048      	addhi	r0, #72	@ 0x48
 800eea8:	2000      	movls	r0, #0
 800eeaa:	4770      	bx	lr

0800eeac <uxr_output_streams_confirmed>:
 800eeac:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800eeb0:	b183      	cbz	r3, 800eed4 <uxr_output_streams_confirmed+0x28>
 800eeb2:	b570      	push	{r4, r5, r6, lr}
 800eeb4:	4606      	mov	r6, r0
 800eeb6:	f100 0518 	add.w	r5, r0, #24
 800eeba:	2400      	movs	r4, #0
 800eebc:	e001      	b.n	800eec2 <uxr_output_streams_confirmed+0x16>
 800eebe:	3528      	adds	r5, #40	@ 0x28
 800eec0:	b138      	cbz	r0, 800eed2 <uxr_output_streams_confirmed+0x26>
 800eec2:	4628      	mov	r0, r5
 800eec4:	f006 fe4a 	bl	8015b5c <uxr_is_output_up_to_date>
 800eec8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800eecc:	3401      	adds	r4, #1
 800eece:	42a3      	cmp	r3, r4
 800eed0:	d8f5      	bhi.n	800eebe <uxr_output_streams_confirmed+0x12>
 800eed2:	bd70      	pop	{r4, r5, r6, pc}
 800eed4:	2001      	movs	r0, #1
 800eed6:	4770      	bx	lr

0800eed8 <uxr_buffer_submessage_header>:
 800eed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeda:	4604      	mov	r4, r0
 800eedc:	460e      	mov	r6, r1
 800eede:	2104      	movs	r1, #4
 800eee0:	4615      	mov	r5, r2
 800eee2:	461f      	mov	r7, r3
 800eee4:	f7fc fcce 	bl	800b884 <ucdr_align_to>
 800eee8:	2301      	movs	r3, #1
 800eeea:	ea47 0203 	orr.w	r2, r7, r3
 800eeee:	4631      	mov	r1, r6
 800eef0:	7523      	strb	r3, [r4, #20]
 800eef2:	4620      	mov	r0, r4
 800eef4:	462b      	mov	r3, r5
 800eef6:	f000 fa27 	bl	800f348 <uxr_serialize_submessage_header>
 800eefa:	4620      	mov	r0, r4
 800eefc:	f7fc fcd8 	bl	800b8b0 <ucdr_buffer_remaining>
 800ef00:	42a8      	cmp	r0, r5
 800ef02:	bf34      	ite	cc
 800ef04:	2000      	movcc	r0, #0
 800ef06:	2001      	movcs	r0, #1
 800ef08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef0a:	bf00      	nop

0800ef0c <uxr_read_submessage_header>:
 800ef0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef10:	4604      	mov	r4, r0
 800ef12:	460d      	mov	r5, r1
 800ef14:	2104      	movs	r1, #4
 800ef16:	4616      	mov	r6, r2
 800ef18:	4698      	mov	r8, r3
 800ef1a:	f7fc fcb3 	bl	800b884 <ucdr_align_to>
 800ef1e:	4620      	mov	r0, r4
 800ef20:	f7fc fcc6 	bl	800b8b0 <ucdr_buffer_remaining>
 800ef24:	2803      	cmp	r0, #3
 800ef26:	bf8c      	ite	hi
 800ef28:	2701      	movhi	r7, #1
 800ef2a:	2700      	movls	r7, #0
 800ef2c:	d802      	bhi.n	800ef34 <uxr_read_submessage_header+0x28>
 800ef2e:	4638      	mov	r0, r7
 800ef30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef34:	4633      	mov	r3, r6
 800ef36:	4642      	mov	r2, r8
 800ef38:	4620      	mov	r0, r4
 800ef3a:	4629      	mov	r1, r5
 800ef3c:	f000 fa18 	bl	800f370 <uxr_deserialize_submessage_header>
 800ef40:	f898 3000 	ldrb.w	r3, [r8]
 800ef44:	f003 0201 	and.w	r2, r3, #1
 800ef48:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800ef4c:	f888 3000 	strb.w	r3, [r8]
 800ef50:	7522      	strb	r2, [r4, #20]
 800ef52:	4638      	mov	r0, r7
 800ef54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ef58 <uxr_submessage_padding>:
 800ef58:	f010 0003 	ands.w	r0, r0, #3
 800ef5c:	bf18      	it	ne
 800ef5e:	f1c0 0004 	rsbne	r0, r0, #4
 800ef62:	4770      	bx	lr

0800ef64 <uxr_millis>:
 800ef64:	b510      	push	{r4, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	4669      	mov	r1, sp
 800ef6a:	2001      	movs	r0, #1
 800ef6c:	f7f3 f928 	bl	80021c0 <clock_gettime>
 800ef70:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800ef74:	4906      	ldr	r1, [pc, #24]	@ (800ef90 <uxr_millis+0x2c>)
 800ef76:	fba0 0301 	umull	r0, r3, r0, r1
 800ef7a:	1900      	adds	r0, r0, r4
 800ef7c:	fb01 3102 	mla	r1, r1, r2, r3
 800ef80:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800ef84:	4a03      	ldr	r2, [pc, #12]	@ (800ef94 <uxr_millis+0x30>)
 800ef86:	2300      	movs	r3, #0
 800ef88:	f7f1 fe30 	bl	8000bec <__aeabi_ldivmod>
 800ef8c:	b004      	add	sp, #16
 800ef8e:	bd10      	pop	{r4, pc}
 800ef90:	3b9aca00 	.word	0x3b9aca00
 800ef94:	000f4240 	.word	0x000f4240

0800ef98 <uxr_nanos>:
 800ef98:	b510      	push	{r4, lr}
 800ef9a:	b084      	sub	sp, #16
 800ef9c:	4669      	mov	r1, sp
 800ef9e:	2001      	movs	r0, #1
 800efa0:	f7f3 f90e 	bl	80021c0 <clock_gettime>
 800efa4:	4a06      	ldr	r2, [pc, #24]	@ (800efc0 <uxr_nanos+0x28>)
 800efa6:	9800      	ldr	r0, [sp, #0]
 800efa8:	9902      	ldr	r1, [sp, #8]
 800efaa:	9c01      	ldr	r4, [sp, #4]
 800efac:	fba0 0302 	umull	r0, r3, r0, r2
 800efb0:	1840      	adds	r0, r0, r1
 800efb2:	fb02 3304 	mla	r3, r2, r4, r3
 800efb6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800efba:	b004      	add	sp, #16
 800efbc:	bd10      	pop	{r4, pc}
 800efbe:	bf00      	nop
 800efc0:	3b9aca00 	.word	0x3b9aca00

0800efc4 <on_full_output_buffer_fragmented>:
 800efc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc8:	460c      	mov	r4, r1
 800efca:	b08a      	sub	sp, #40	@ 0x28
 800efcc:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800efd0:	4606      	mov	r6, r0
 800efd2:	f104 0008 	add.w	r0, r4, #8
 800efd6:	f7ff ff4b 	bl	800ee70 <uxr_get_output_reliable_stream>
 800efda:	4605      	mov	r5, r0
 800efdc:	f006 fdc8 	bl	8015b70 <get_available_free_slots>
 800efe0:	b968      	cbnz	r0, 800effe <on_full_output_buffer_fragmented+0x3a>
 800efe2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800efe6:	4620      	mov	r0, r4
 800efe8:	4798      	blx	r3
 800efea:	b918      	cbnz	r0, 800eff4 <on_full_output_buffer_fragmented+0x30>
 800efec:	2001      	movs	r0, #1
 800efee:	b00a      	add	sp, #40	@ 0x28
 800eff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eff4:	4628      	mov	r0, r5
 800eff6:	f006 fdbb 	bl	8015b70 <get_available_free_slots>
 800effa:	2800      	cmp	r0, #0
 800effc:	d0f6      	beq.n	800efec <on_full_output_buffer_fragmented+0x28>
 800effe:	8929      	ldrh	r1, [r5, #8]
 800f000:	89eb      	ldrh	r3, [r5, #14]
 800f002:	7b28      	ldrb	r0, [r5, #12]
 800f004:	686a      	ldr	r2, [r5, #4]
 800f006:	fbb2 f8f1 	udiv	r8, r2, r1
 800f00a:	fbb3 f2f1 	udiv	r2, r3, r1
 800f00e:	fb01 3112 	mls	r1, r1, r2, r3
 800f012:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800f016:	b289      	uxth	r1, r1
 800f018:	fb08 f101 	mul.w	r1, r8, r1
 800f01c:	30fc      	adds	r0, #252	@ 0xfc
 800f01e:	f1a8 0804 	sub.w	r8, r8, #4
 800f022:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800f026:	4440      	add	r0, r8
 800f028:	b287      	uxth	r7, r0
 800f02a:	1bdb      	subs	r3, r3, r7
 800f02c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800f030:	682b      	ldr	r3, [r5, #0]
 800f032:	3104      	adds	r1, #4
 800f034:	4419      	add	r1, r3
 800f036:	4642      	mov	r2, r8
 800f038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f03c:	9300      	str	r3, [sp, #0]
 800f03e:	a802      	add	r0, sp, #8
 800f040:	2300      	movs	r3, #0
 800f042:	f7fc fbf3 	bl	800b82c <ucdr_init_buffer_origin_offset>
 800f046:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800f04a:	f102 0308 	add.w	r3, r2, #8
 800f04e:	4543      	cmp	r3, r8
 800f050:	d928      	bls.n	800f0a4 <on_full_output_buffer_fragmented+0xe0>
 800f052:	463a      	mov	r2, r7
 800f054:	2300      	movs	r3, #0
 800f056:	210d      	movs	r1, #13
 800f058:	a802      	add	r0, sp, #8
 800f05a:	f7ff ff3d 	bl	800eed8 <uxr_buffer_submessage_header>
 800f05e:	8929      	ldrh	r1, [r5, #8]
 800f060:	89eb      	ldrh	r3, [r5, #14]
 800f062:	fbb3 f2f1 	udiv	r2, r3, r1
 800f066:	fb01 3312 	mls	r3, r1, r2, r3
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	686a      	ldr	r2, [r5, #4]
 800f06e:	fbb2 f2f1 	udiv	r2, r2, r1
 800f072:	fb02 f303 	mul.w	r3, r2, r3
 800f076:	682a      	ldr	r2, [r5, #0]
 800f078:	f842 8003 	str.w	r8, [r2, r3]
 800f07c:	89e8      	ldrh	r0, [r5, #14]
 800f07e:	2101      	movs	r1, #1
 800f080:	f006 fec6 	bl	8015e10 <uxr_seq_num_add>
 800f084:	9904      	ldr	r1, [sp, #16]
 800f086:	9a03      	ldr	r2, [sp, #12]
 800f088:	81e8      	strh	r0, [r5, #14]
 800f08a:	1a52      	subs	r2, r2, r1
 800f08c:	4630      	mov	r0, r6
 800f08e:	f7fc fbdf 	bl	800b850 <ucdr_init_buffer>
 800f092:	4630      	mov	r0, r6
 800f094:	490f      	ldr	r1, [pc, #60]	@ (800f0d4 <on_full_output_buffer_fragmented+0x110>)
 800f096:	4622      	mov	r2, r4
 800f098:	f7fc fbae 	bl	800b7f8 <ucdr_set_on_full_buffer_callback>
 800f09c:	2000      	movs	r0, #0
 800f09e:	b00a      	add	sp, #40	@ 0x28
 800f0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a4:	b292      	uxth	r2, r2
 800f0a6:	2302      	movs	r3, #2
 800f0a8:	210d      	movs	r1, #13
 800f0aa:	a802      	add	r0, sp, #8
 800f0ac:	f7ff ff14 	bl	800eed8 <uxr_buffer_submessage_header>
 800f0b0:	8928      	ldrh	r0, [r5, #8]
 800f0b2:	89eb      	ldrh	r3, [r5, #14]
 800f0b4:	fbb3 f1f0 	udiv	r1, r3, r0
 800f0b8:	fb00 3311 	mls	r3, r0, r1, r3
 800f0bc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800f0c0:	6869      	ldr	r1, [r5, #4]
 800f0c2:	fbb1 f1f0 	udiv	r1, r1, r0
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	fb01 f303 	mul.w	r3, r1, r3
 800f0cc:	6829      	ldr	r1, [r5, #0]
 800f0ce:	3208      	adds	r2, #8
 800f0d0:	50ca      	str	r2, [r1, r3]
 800f0d2:	e7d3      	b.n	800f07c <on_full_output_buffer_fragmented+0xb8>
 800f0d4:	0800efc5 	.word	0x0800efc5

0800f0d8 <uxr_prepare_output_stream>:
 800f0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0da:	b087      	sub	sp, #28
 800f0dc:	2707      	movs	r7, #7
 800f0de:	9202      	str	r2, [sp, #8]
 800f0e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f0e2:	9103      	str	r1, [sp, #12]
 800f0e4:	2500      	movs	r5, #0
 800f0e6:	3204      	adds	r2, #4
 800f0e8:	e9cd 7500 	strd	r7, r5, [sp]
 800f0ec:	461c      	mov	r4, r3
 800f0ee:	4606      	mov	r6, r0
 800f0f0:	f7ff fc54 	bl	800e99c <uxr_prepare_stream_to_write_submessage>
 800f0f4:	f080 0201 	eor.w	r2, r0, #1
 800f0f8:	b2d2      	uxtb	r2, r2
 800f0fa:	75a2      	strb	r2, [r4, #22]
 800f0fc:	b112      	cbz	r2, 800f104 <uxr_prepare_output_stream+0x2c>
 800f0fe:	4628      	mov	r0, r5
 800f100:	b007      	add	sp, #28
 800f102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f104:	aa05      	add	r2, sp, #20
 800f106:	9902      	ldr	r1, [sp, #8]
 800f108:	4630      	mov	r0, r6
 800f10a:	f7ff fd7d 	bl	800ec08 <uxr_init_base_object_request>
 800f10e:	a905      	add	r1, sp, #20
 800f110:	4605      	mov	r5, r0
 800f112:	4620      	mov	r0, r4
 800f114:	f001 f88c 	bl	8010230 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f118:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800f11c:	69a6      	ldr	r6, [r4, #24]
 800f11e:	69e7      	ldr	r7, [r4, #28]
 800f120:	1a52      	subs	r2, r2, r1
 800f122:	4620      	mov	r0, r4
 800f124:	f7fc fb94 	bl	800b850 <ucdr_init_buffer>
 800f128:	4620      	mov	r0, r4
 800f12a:	463a      	mov	r2, r7
 800f12c:	4631      	mov	r1, r6
 800f12e:	f7fc fb63 	bl	800b7f8 <ucdr_set_on_full_buffer_callback>
 800f132:	4628      	mov	r0, r5
 800f134:	b007      	add	sp, #28
 800f136:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f138 <uxr_prepare_output_stream_fragmented>:
 800f138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f13c:	b091      	sub	sp, #68	@ 0x44
 800f13e:	4605      	mov	r5, r0
 800f140:	9105      	str	r1, [sp, #20]
 800f142:	3008      	adds	r0, #8
 800f144:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f148:	461e      	mov	r6, r3
 800f14a:	9204      	str	r2, [sp, #16]
 800f14c:	f7ff fe90 	bl	800ee70 <uxr_get_output_reliable_stream>
 800f150:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f154:	2b01      	cmp	r3, #1
 800f156:	f000 8091 	beq.w	800f27c <uxr_prepare_output_stream_fragmented+0x144>
 800f15a:	4604      	mov	r4, r0
 800f15c:	2800      	cmp	r0, #0
 800f15e:	f000 808d 	beq.w	800f27c <uxr_prepare_output_stream_fragmented+0x144>
 800f162:	f006 fd05 	bl	8015b70 <get_available_free_slots>
 800f166:	2800      	cmp	r0, #0
 800f168:	f000 8083 	beq.w	800f272 <uxr_prepare_output_stream_fragmented+0x13a>
 800f16c:	8922      	ldrh	r2, [r4, #8]
 800f16e:	89e7      	ldrh	r7, [r4, #14]
 800f170:	fbb7 f9f2 	udiv	r9, r7, r2
 800f174:	fb02 7919 	mls	r9, r2, r9, r7
 800f178:	fa1f f989 	uxth.w	r9, r9
 800f17c:	6863      	ldr	r3, [r4, #4]
 800f17e:	fbb3 f2f2 	udiv	r2, r3, r2
 800f182:	6823      	ldr	r3, [r4, #0]
 800f184:	9203      	str	r2, [sp, #12]
 800f186:	fb02 f909 	mul.w	r9, r2, r9
 800f18a:	f109 0904 	add.w	r9, r9, #4
 800f18e:	4499      	add	r9, r3
 800f190:	7b23      	ldrb	r3, [r4, #12]
 800f192:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f196:	4543      	cmp	r3, r8
 800f198:	f1a2 0b04 	sub.w	fp, r2, #4
 800f19c:	d37a      	bcc.n	800f294 <uxr_prepare_output_stream_fragmented+0x15c>
 800f19e:	f1ab 0a04 	sub.w	sl, fp, #4
 800f1a2:	ebaa 0a03 	sub.w	sl, sl, r3
 800f1a6:	465a      	mov	r2, fp
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	4649      	mov	r1, r9
 800f1ac:	a808      	add	r0, sp, #32
 800f1ae:	f8cd 8000 	str.w	r8, [sp]
 800f1b2:	f7fc fb3b 	bl	800b82c <ucdr_init_buffer_origin_offset>
 800f1b6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f1b8:	fa1f fa8a 	uxth.w	sl, sl
 800f1bc:	4652      	mov	r2, sl
 800f1be:	f103 0a08 	add.w	sl, r3, #8
 800f1c2:	45da      	cmp	sl, fp
 800f1c4:	bf34      	ite	cc
 800f1c6:	2302      	movcc	r3, #2
 800f1c8:	2300      	movcs	r3, #0
 800f1ca:	210d      	movs	r1, #13
 800f1cc:	a808      	add	r0, sp, #32
 800f1ce:	f7ff fe83 	bl	800eed8 <uxr_buffer_submessage_header>
 800f1d2:	8921      	ldrh	r1, [r4, #8]
 800f1d4:	fbb7 f2f1 	udiv	r2, r7, r1
 800f1d8:	fb01 7212 	mls	r2, r1, r2, r7
 800f1dc:	b292      	uxth	r2, r2
 800f1de:	6863      	ldr	r3, [r4, #4]
 800f1e0:	fbb3 f3f1 	udiv	r3, r3, r1
 800f1e4:	fb02 f303 	mul.w	r3, r2, r3
 800f1e8:	6822      	ldr	r2, [r4, #0]
 800f1ea:	4638      	mov	r0, r7
 800f1ec:	f842 b003 	str.w	fp, [r2, r3]
 800f1f0:	2101      	movs	r1, #1
 800f1f2:	f006 fe0d 	bl	8015e10 <uxr_seq_num_add>
 800f1f6:	9b03      	ldr	r3, [sp, #12]
 800f1f8:	f108 0104 	add.w	r1, r8, #4
 800f1fc:	f1a3 0208 	sub.w	r2, r3, #8
 800f200:	eba2 0208 	sub.w	r2, r2, r8
 800f204:	4449      	add	r1, r9
 800f206:	4607      	mov	r7, r0
 800f208:	4630      	mov	r0, r6
 800f20a:	f7fc fb21 	bl	800b850 <ucdr_init_buffer>
 800f20e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f210:	81e7      	strh	r7, [r4, #14]
 800f212:	1d1a      	adds	r2, r3, #4
 800f214:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800f218:	bf28      	it	cs
 800f21a:	2200      	movcs	r2, #0
 800f21c:	2300      	movs	r3, #0
 800f21e:	b292      	uxth	r2, r2
 800f220:	2107      	movs	r1, #7
 800f222:	4630      	mov	r0, r6
 800f224:	f7ff fe58 	bl	800eed8 <uxr_buffer_submessage_header>
 800f228:	9904      	ldr	r1, [sp, #16]
 800f22a:	aa07      	add	r2, sp, #28
 800f22c:	4628      	mov	r0, r5
 800f22e:	f7ff fceb 	bl	800ec08 <uxr_init_base_object_request>
 800f232:	4604      	mov	r4, r0
 800f234:	b318      	cbz	r0, 800f27e <uxr_prepare_output_stream_fragmented+0x146>
 800f236:	a907      	add	r1, sp, #28
 800f238:	4630      	mov	r0, r6
 800f23a:	f000 fff9 	bl	8010230 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f23e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800f242:	4630      	mov	r0, r6
 800f244:	1a52      	subs	r2, r2, r1
 800f246:	f7fc fb03 	bl	800b850 <ucdr_init_buffer>
 800f24a:	9b05      	ldr	r3, [sp, #20]
 800f24c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800f250:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f252:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800f256:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800f258:	491b      	ldr	r1, [pc, #108]	@ (800f2c8 <uxr_prepare_output_stream_fragmented+0x190>)
 800f25a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800f25e:	4630      	mov	r0, r6
 800f260:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800f264:	462a      	mov	r2, r5
 800f266:	f7fc fac7 	bl	800b7f8 <ucdr_set_on_full_buffer_callback>
 800f26a:	4620      	mov	r0, r4
 800f26c:	b011      	add	sp, #68	@ 0x44
 800f26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f272:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800f274:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f276:	4628      	mov	r0, r5
 800f278:	4798      	blx	r3
 800f27a:	b920      	cbnz	r0, 800f286 <uxr_prepare_output_stream_fragmented+0x14e>
 800f27c:	2400      	movs	r4, #0
 800f27e:	4620      	mov	r0, r4
 800f280:	b011      	add	sp, #68	@ 0x44
 800f282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f286:	4620      	mov	r0, r4
 800f288:	f006 fc72 	bl	8015b70 <get_available_free_slots>
 800f28c:	2800      	cmp	r0, #0
 800f28e:	f47f af6d 	bne.w	800f16c <uxr_prepare_output_stream_fragmented+0x34>
 800f292:	e7f3      	b.n	800f27c <uxr_prepare_output_stream_fragmented+0x144>
 800f294:	4638      	mov	r0, r7
 800f296:	2101      	movs	r1, #1
 800f298:	f006 fdba 	bl	8015e10 <uxr_seq_num_add>
 800f29c:	8921      	ldrh	r1, [r4, #8]
 800f29e:	fbb0 f2f1 	udiv	r2, r0, r1
 800f2a2:	fb01 0912 	mls	r9, r1, r2, r0
 800f2a6:	fa1f f289 	uxth.w	r2, r9
 800f2aa:	6863      	ldr	r3, [r4, #4]
 800f2ac:	fbb3 f9f1 	udiv	r9, r3, r1
 800f2b0:	6823      	ldr	r3, [r4, #0]
 800f2b2:	fb02 f909 	mul.w	r9, r2, r9
 800f2b6:	f109 0904 	add.w	r9, r9, #4
 800f2ba:	4499      	add	r9, r3
 800f2bc:	4607      	mov	r7, r0
 800f2be:	7b23      	ldrb	r3, [r4, #12]
 800f2c0:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f2c4:	e76b      	b.n	800f19e <uxr_prepare_output_stream_fragmented+0x66>
 800f2c6:	bf00      	nop
 800f2c8:	0800efc5 	.word	0x0800efc5

0800f2cc <uxr_serialize_message_header>:
 800f2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2ce:	b083      	sub	sp, #12
 800f2d0:	4616      	mov	r6, r2
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	9301      	str	r3, [sp, #4]
 800f2d6:	460d      	mov	r5, r1
 800f2d8:	9f08      	ldr	r7, [sp, #32]
 800f2da:	f7fb f977 	bl	800a5cc <ucdr_serialize_uint8_t>
 800f2de:	4631      	mov	r1, r6
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	f7fb f973 	bl	800a5cc <ucdr_serialize_uint8_t>
 800f2e6:	9a01      	ldr	r2, [sp, #4]
 800f2e8:	2101      	movs	r1, #1
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	f7fb fa1a 	bl	800a724 <ucdr_serialize_endian_uint16_t>
 800f2f0:	062b      	lsls	r3, r5, #24
 800f2f2:	d501      	bpl.n	800f2f8 <uxr_serialize_message_header+0x2c>
 800f2f4:	b003      	add	sp, #12
 800f2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2f8:	2204      	movs	r2, #4
 800f2fa:	4639      	mov	r1, r7
 800f2fc:	4620      	mov	r0, r4
 800f2fe:	b003      	add	sp, #12
 800f300:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f304:	f005 bd12 	b.w	8014d2c <ucdr_serialize_array_uint8_t>

0800f308 <uxr_deserialize_message_header>:
 800f308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f30a:	b083      	sub	sp, #12
 800f30c:	4616      	mov	r6, r2
 800f30e:	4604      	mov	r4, r0
 800f310:	9301      	str	r3, [sp, #4]
 800f312:	460d      	mov	r5, r1
 800f314:	9f08      	ldr	r7, [sp, #32]
 800f316:	f7fb f96f 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 800f31a:	4631      	mov	r1, r6
 800f31c:	4620      	mov	r0, r4
 800f31e:	f7fb f96b 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 800f322:	9a01      	ldr	r2, [sp, #4]
 800f324:	2101      	movs	r1, #1
 800f326:	4620      	mov	r0, r4
 800f328:	f7fb faf0 	bl	800a90c <ucdr_deserialize_endian_uint16_t>
 800f32c:	f995 3000 	ldrsb.w	r3, [r5]
 800f330:	2b00      	cmp	r3, #0
 800f332:	da01      	bge.n	800f338 <uxr_deserialize_message_header+0x30>
 800f334:	b003      	add	sp, #12
 800f336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f338:	2204      	movs	r2, #4
 800f33a:	4639      	mov	r1, r7
 800f33c:	4620      	mov	r0, r4
 800f33e:	b003      	add	sp, #12
 800f340:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f344:	f005 bd56 	b.w	8014df4 <ucdr_deserialize_array_uint8_t>

0800f348 <uxr_serialize_submessage_header>:
 800f348:	b530      	push	{r4, r5, lr}
 800f34a:	b083      	sub	sp, #12
 800f34c:	4615      	mov	r5, r2
 800f34e:	4604      	mov	r4, r0
 800f350:	9301      	str	r3, [sp, #4]
 800f352:	f7fb f93b 	bl	800a5cc <ucdr_serialize_uint8_t>
 800f356:	4629      	mov	r1, r5
 800f358:	4620      	mov	r0, r4
 800f35a:	f7fb f937 	bl	800a5cc <ucdr_serialize_uint8_t>
 800f35e:	9a01      	ldr	r2, [sp, #4]
 800f360:	2101      	movs	r1, #1
 800f362:	4620      	mov	r0, r4
 800f364:	b003      	add	sp, #12
 800f366:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f36a:	f7fb b9db 	b.w	800a724 <ucdr_serialize_endian_uint16_t>
 800f36e:	bf00      	nop

0800f370 <uxr_deserialize_submessage_header>:
 800f370:	b530      	push	{r4, r5, lr}
 800f372:	b083      	sub	sp, #12
 800f374:	4615      	mov	r5, r2
 800f376:	4604      	mov	r4, r0
 800f378:	9301      	str	r3, [sp, #4]
 800f37a:	f7fb f93d 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 800f37e:	4629      	mov	r1, r5
 800f380:	4620      	mov	r0, r4
 800f382:	f7fb f939 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 800f386:	9a01      	ldr	r2, [sp, #4]
 800f388:	2101      	movs	r1, #1
 800f38a:	4620      	mov	r0, r4
 800f38c:	b003      	add	sp, #12
 800f38e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f392:	f7fb babb 	b.w	800a90c <ucdr_deserialize_endian_uint16_t>
 800f396:	bf00      	nop

0800f398 <uxr_serialize_CLIENT_Representation>:
 800f398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f39c:	2204      	movs	r2, #4
 800f39e:	460e      	mov	r6, r1
 800f3a0:	4605      	mov	r5, r0
 800f3a2:	f005 fcc3 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800f3a6:	2202      	movs	r2, #2
 800f3a8:	4607      	mov	r7, r0
 800f3aa:	1d31      	adds	r1, r6, #4
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	f005 fcbd 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800f3b2:	4038      	ands	r0, r7
 800f3b4:	2202      	movs	r2, #2
 800f3b6:	1db1      	adds	r1, r6, #6
 800f3b8:	b2c7      	uxtb	r7, r0
 800f3ba:	4628      	mov	r0, r5
 800f3bc:	f005 fcb6 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800f3c0:	2204      	movs	r2, #4
 800f3c2:	4007      	ands	r7, r0
 800f3c4:	f106 0108 	add.w	r1, r6, #8
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	f005 fcaf 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800f3ce:	7b31      	ldrb	r1, [r6, #12]
 800f3d0:	4007      	ands	r7, r0
 800f3d2:	4628      	mov	r0, r5
 800f3d4:	f7fb f8fa 	bl	800a5cc <ucdr_serialize_uint8_t>
 800f3d8:	7b71      	ldrb	r1, [r6, #13]
 800f3da:	4007      	ands	r7, r0
 800f3dc:	4628      	mov	r0, r5
 800f3de:	f7fb f8c7 	bl	800a570 <ucdr_serialize_bool>
 800f3e2:	7b73      	ldrb	r3, [r6, #13]
 800f3e4:	ea07 0800 	and.w	r8, r7, r0
 800f3e8:	b93b      	cbnz	r3, 800f3fa <uxr_serialize_CLIENT_Representation+0x62>
 800f3ea:	8bb1      	ldrh	r1, [r6, #28]
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	f7fb f919 	bl	800a624 <ucdr_serialize_uint16_t>
 800f3f2:	ea08 0000 	and.w	r0, r8, r0
 800f3f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3fa:	6931      	ldr	r1, [r6, #16]
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	f7fb fafb 	bl	800a9f8 <ucdr_serialize_uint32_t>
 800f402:	6933      	ldr	r3, [r6, #16]
 800f404:	b1e3      	cbz	r3, 800f440 <uxr_serialize_CLIENT_Representation+0xa8>
 800f406:	b1c0      	cbz	r0, 800f43a <uxr_serialize_CLIENT_Representation+0xa2>
 800f408:	4637      	mov	r7, r6
 800f40a:	f04f 0900 	mov.w	r9, #0
 800f40e:	e001      	b.n	800f414 <uxr_serialize_CLIENT_Representation+0x7c>
 800f410:	3708      	adds	r7, #8
 800f412:	b194      	cbz	r4, 800f43a <uxr_serialize_CLIENT_Representation+0xa2>
 800f414:	6979      	ldr	r1, [r7, #20]
 800f416:	4628      	mov	r0, r5
 800f418:	f005 fda8 	bl	8014f6c <ucdr_serialize_string>
 800f41c:	69b9      	ldr	r1, [r7, #24]
 800f41e:	4604      	mov	r4, r0
 800f420:	4628      	mov	r0, r5
 800f422:	f005 fda3 	bl	8014f6c <ucdr_serialize_string>
 800f426:	6933      	ldr	r3, [r6, #16]
 800f428:	f109 0901 	add.w	r9, r9, #1
 800f42c:	4004      	ands	r4, r0
 800f42e:	4599      	cmp	r9, r3
 800f430:	b2e4      	uxtb	r4, r4
 800f432:	d3ed      	bcc.n	800f410 <uxr_serialize_CLIENT_Representation+0x78>
 800f434:	ea08 0804 	and.w	r8, r8, r4
 800f438:	e7d7      	b.n	800f3ea <uxr_serialize_CLIENT_Representation+0x52>
 800f43a:	f04f 0800 	mov.w	r8, #0
 800f43e:	e7d4      	b.n	800f3ea <uxr_serialize_CLIENT_Representation+0x52>
 800f440:	ea08 0800 	and.w	r8, r8, r0
 800f444:	e7d1      	b.n	800f3ea <uxr_serialize_CLIENT_Representation+0x52>
 800f446:	bf00      	nop

0800f448 <uxr_deserialize_CLIENT_Representation>:
 800f448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f44c:	2204      	movs	r2, #4
 800f44e:	460c      	mov	r4, r1
 800f450:	4605      	mov	r5, r0
 800f452:	f005 fccf 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 800f456:	2202      	movs	r2, #2
 800f458:	4607      	mov	r7, r0
 800f45a:	1d21      	adds	r1, r4, #4
 800f45c:	4628      	mov	r0, r5
 800f45e:	f005 fcc9 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 800f462:	4038      	ands	r0, r7
 800f464:	2202      	movs	r2, #2
 800f466:	1da1      	adds	r1, r4, #6
 800f468:	b2c6      	uxtb	r6, r0
 800f46a:	4628      	mov	r0, r5
 800f46c:	f005 fcc2 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 800f470:	2204      	movs	r2, #4
 800f472:	4006      	ands	r6, r0
 800f474:	f104 0108 	add.w	r1, r4, #8
 800f478:	4628      	mov	r0, r5
 800f47a:	f005 fcbb 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 800f47e:	f104 010c 	add.w	r1, r4, #12
 800f482:	4006      	ands	r6, r0
 800f484:	4628      	mov	r0, r5
 800f486:	f7fb f8b7 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 800f48a:	f104 010d 	add.w	r1, r4, #13
 800f48e:	ea06 0700 	and.w	r7, r6, r0
 800f492:	4628      	mov	r0, r5
 800f494:	f7fb f882 	bl	800a59c <ucdr_deserialize_bool>
 800f498:	7b63      	ldrb	r3, [r4, #13]
 800f49a:	4007      	ands	r7, r0
 800f49c:	b93b      	cbnz	r3, 800f4ae <uxr_deserialize_CLIENT_Representation+0x66>
 800f49e:	f104 011c 	add.w	r1, r4, #28
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	f7fb f9be 	bl	800a824 <ucdr_deserialize_uint16_t>
 800f4a8:	4038      	ands	r0, r7
 800f4aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ae:	f104 0110 	add.w	r1, r4, #16
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	f7fb fbd0 	bl	800ac58 <ucdr_deserialize_uint32_t>
 800f4b8:	6923      	ldr	r3, [r4, #16]
 800f4ba:	2b01      	cmp	r3, #1
 800f4bc:	d903      	bls.n	800f4c6 <uxr_deserialize_CLIENT_Representation+0x7e>
 800f4be:	2301      	movs	r3, #1
 800f4c0:	75ab      	strb	r3, [r5, #22]
 800f4c2:	2700      	movs	r7, #0
 800f4c4:	e7eb      	b.n	800f49e <uxr_deserialize_CLIENT_Representation+0x56>
 800f4c6:	b30b      	cbz	r3, 800f50c <uxr_deserialize_CLIENT_Representation+0xc4>
 800f4c8:	2800      	cmp	r0, #0
 800f4ca:	d0fa      	beq.n	800f4c2 <uxr_deserialize_CLIENT_Representation+0x7a>
 800f4cc:	46a0      	mov	r8, r4
 800f4ce:	f04f 0900 	mov.w	r9, #0
 800f4d2:	e001      	b.n	800f4d8 <uxr_deserialize_CLIENT_Representation+0x90>
 800f4d4:	2e00      	cmp	r6, #0
 800f4d6:	d0f4      	beq.n	800f4c2 <uxr_deserialize_CLIENT_Representation+0x7a>
 800f4d8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f4dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	f005 fd53 	bl	8014f8c <ucdr_deserialize_string>
 800f4e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f4ea:	4606      	mov	r6, r0
 800f4ec:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	f005 fd4b 	bl	8014f8c <ucdr_deserialize_string>
 800f4f6:	6923      	ldr	r3, [r4, #16]
 800f4f8:	f109 0901 	add.w	r9, r9, #1
 800f4fc:	4006      	ands	r6, r0
 800f4fe:	4599      	cmp	r9, r3
 800f500:	f108 0808 	add.w	r8, r8, #8
 800f504:	b2f6      	uxtb	r6, r6
 800f506:	d3e5      	bcc.n	800f4d4 <uxr_deserialize_CLIENT_Representation+0x8c>
 800f508:	4037      	ands	r7, r6
 800f50a:	e7c8      	b.n	800f49e <uxr_deserialize_CLIENT_Representation+0x56>
 800f50c:	4007      	ands	r7, r0
 800f50e:	e7c6      	b.n	800f49e <uxr_deserialize_CLIENT_Representation+0x56>

0800f510 <uxr_serialize_AGENT_Representation>:
 800f510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f514:	2204      	movs	r2, #4
 800f516:	460f      	mov	r7, r1
 800f518:	4605      	mov	r5, r0
 800f51a:	f005 fc07 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800f51e:	2202      	movs	r2, #2
 800f520:	4604      	mov	r4, r0
 800f522:	1d39      	adds	r1, r7, #4
 800f524:	4628      	mov	r0, r5
 800f526:	f005 fc01 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800f52a:	4020      	ands	r0, r4
 800f52c:	2202      	movs	r2, #2
 800f52e:	1db9      	adds	r1, r7, #6
 800f530:	b2c4      	uxtb	r4, r0
 800f532:	4628      	mov	r0, r5
 800f534:	f005 fbfa 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800f538:	7a39      	ldrb	r1, [r7, #8]
 800f53a:	4004      	ands	r4, r0
 800f53c:	4628      	mov	r0, r5
 800f53e:	f7fb f817 	bl	800a570 <ucdr_serialize_bool>
 800f542:	7a3b      	ldrb	r3, [r7, #8]
 800f544:	ea00 0804 	and.w	r8, r0, r4
 800f548:	b913      	cbnz	r3, 800f550 <uxr_serialize_AGENT_Representation+0x40>
 800f54a:	4640      	mov	r0, r8
 800f54c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f550:	68f9      	ldr	r1, [r7, #12]
 800f552:	4628      	mov	r0, r5
 800f554:	f7fb fa50 	bl	800a9f8 <ucdr_serialize_uint32_t>
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	b303      	cbz	r3, 800f59e <uxr_serialize_AGENT_Representation+0x8e>
 800f55c:	b1d0      	cbz	r0, 800f594 <uxr_serialize_AGENT_Representation+0x84>
 800f55e:	463e      	mov	r6, r7
 800f560:	f04f 0900 	mov.w	r9, #0
 800f564:	e001      	b.n	800f56a <uxr_serialize_AGENT_Representation+0x5a>
 800f566:	3608      	adds	r6, #8
 800f568:	b1a4      	cbz	r4, 800f594 <uxr_serialize_AGENT_Representation+0x84>
 800f56a:	6931      	ldr	r1, [r6, #16]
 800f56c:	4628      	mov	r0, r5
 800f56e:	f005 fcfd 	bl	8014f6c <ucdr_serialize_string>
 800f572:	6971      	ldr	r1, [r6, #20]
 800f574:	4604      	mov	r4, r0
 800f576:	4628      	mov	r0, r5
 800f578:	f005 fcf8 	bl	8014f6c <ucdr_serialize_string>
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f109 0901 	add.w	r9, r9, #1
 800f582:	4004      	ands	r4, r0
 800f584:	4599      	cmp	r9, r3
 800f586:	b2e4      	uxtb	r4, r4
 800f588:	d3ed      	bcc.n	800f566 <uxr_serialize_AGENT_Representation+0x56>
 800f58a:	ea08 0804 	and.w	r8, r8, r4
 800f58e:	4640      	mov	r0, r8
 800f590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f594:	f04f 0800 	mov.w	r8, #0
 800f598:	4640      	mov	r0, r8
 800f59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f59e:	ea08 0800 	and.w	r8, r8, r0
 800f5a2:	e7d2      	b.n	800f54a <uxr_serialize_AGENT_Representation+0x3a>

0800f5a4 <uxr_serialize_DATAWRITER_Representation>:
 800f5a4:	b570      	push	{r4, r5, r6, lr}
 800f5a6:	460d      	mov	r5, r1
 800f5a8:	7809      	ldrb	r1, [r1, #0]
 800f5aa:	4606      	mov	r6, r0
 800f5ac:	f7fb f80e 	bl	800a5cc <ucdr_serialize_uint8_t>
 800f5b0:	4604      	mov	r4, r0
 800f5b2:	b130      	cbz	r0, 800f5c2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f5b4:	782b      	ldrb	r3, [r5, #0]
 800f5b6:	2b02      	cmp	r3, #2
 800f5b8:	d00c      	beq.n	800f5d4 <uxr_serialize_DATAWRITER_Representation+0x30>
 800f5ba:	2b03      	cmp	r3, #3
 800f5bc:	d010      	beq.n	800f5e0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d008      	beq.n	800f5d4 <uxr_serialize_DATAWRITER_Representation+0x30>
 800f5c2:	2202      	movs	r2, #2
 800f5c4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f5c8:	4630      	mov	r0, r6
 800f5ca:	f005 fbaf 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800f5ce:	4020      	ands	r0, r4
 800f5d0:	b2c0      	uxtb	r0, r0
 800f5d2:	bd70      	pop	{r4, r5, r6, pc}
 800f5d4:	6869      	ldr	r1, [r5, #4]
 800f5d6:	4630      	mov	r0, r6
 800f5d8:	f005 fcc8 	bl	8014f6c <ucdr_serialize_string>
 800f5dc:	4604      	mov	r4, r0
 800f5de:	e7f0      	b.n	800f5c2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	4630      	mov	r0, r6
 800f5e4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800f5e8:	3104      	adds	r1, #4
 800f5ea:	f005 fc93 	bl	8014f14 <ucdr_serialize_sequence_uint8_t>
 800f5ee:	4604      	mov	r4, r0
 800f5f0:	e7e7      	b.n	800f5c2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f5f2:	bf00      	nop

0800f5f4 <uxr_serialize_ObjectVariant.part.0>:
 800f5f4:	b570      	push	{r4, r5, r6, lr}
 800f5f6:	780b      	ldrb	r3, [r1, #0]
 800f5f8:	3b01      	subs	r3, #1
 800f5fa:	460c      	mov	r4, r1
 800f5fc:	4605      	mov	r5, r0
 800f5fe:	2b0d      	cmp	r3, #13
 800f600:	d854      	bhi.n	800f6ac <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f602:	e8df f003 	tbb	[pc, r3]
 800f606:	0730      	.short	0x0730
 800f608:	07071b1b 	.word	0x07071b1b
 800f60c:	0c530707 	.word	0x0c530707
 800f610:	494e0c0c 	.word	0x494e0c0c
 800f614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f618:	3104      	adds	r1, #4
 800f61a:	f7ff bfc3 	b.w	800f5a4 <uxr_serialize_DATAWRITER_Representation>
 800f61e:	7909      	ldrb	r1, [r1, #4]
 800f620:	f7fa ffd4 	bl	800a5cc <ucdr_serialize_uint8_t>
 800f624:	b1e8      	cbz	r0, 800f662 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800f626:	7923      	ldrb	r3, [r4, #4]
 800f628:	2b01      	cmp	r3, #1
 800f62a:	d001      	beq.n	800f630 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800f62c:	2b02      	cmp	r3, #2
 800f62e:	d13d      	bne.n	800f6ac <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f630:	68a1      	ldr	r1, [r4, #8]
 800f632:	4628      	mov	r0, r5
 800f634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f638:	f005 bc98 	b.w	8014f6c <ucdr_serialize_string>
 800f63c:	7909      	ldrb	r1, [r1, #4]
 800f63e:	f7fa ffc5 	bl	800a5cc <ucdr_serialize_uint8_t>
 800f642:	4606      	mov	r6, r0
 800f644:	b120      	cbz	r0, 800f650 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f646:	7923      	ldrb	r3, [r4, #4]
 800f648:	2b02      	cmp	r3, #2
 800f64a:	d039      	beq.n	800f6c0 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800f64c:	2b03      	cmp	r3, #3
 800f64e:	d02f      	beq.n	800f6b0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800f650:	2202      	movs	r2, #2
 800f652:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800f656:	4628      	mov	r0, r5
 800f658:	f005 fb68 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800f65c:	4030      	ands	r0, r6
 800f65e:	b2c0      	uxtb	r0, r0
 800f660:	bd70      	pop	{r4, r5, r6, pc}
 800f662:	2000      	movs	r0, #0
 800f664:	bd70      	pop	{r4, r5, r6, pc}
 800f666:	7909      	ldrb	r1, [r1, #4]
 800f668:	f7fa ffb0 	bl	800a5cc <ucdr_serialize_uint8_t>
 800f66c:	4606      	mov	r6, r0
 800f66e:	b158      	cbz	r0, 800f688 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f670:	7923      	ldrb	r3, [r4, #4]
 800f672:	2b02      	cmp	r3, #2
 800f674:	d003      	beq.n	800f67e <uxr_serialize_ObjectVariant.part.0+0x8a>
 800f676:	2b03      	cmp	r3, #3
 800f678:	d028      	beq.n	800f6cc <uxr_serialize_ObjectVariant.part.0+0xd8>
 800f67a:	2b01      	cmp	r3, #1
 800f67c:	d104      	bne.n	800f688 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f67e:	68a1      	ldr	r1, [r4, #8]
 800f680:	4628      	mov	r0, r5
 800f682:	f005 fc73 	bl	8014f6c <ucdr_serialize_string>
 800f686:	4606      	mov	r6, r0
 800f688:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800f68c:	4628      	mov	r0, r5
 800f68e:	f7fb fcd9 	bl	800b044 <ucdr_serialize_int16_t>
 800f692:	4030      	ands	r0, r6
 800f694:	b2c0      	uxtb	r0, r0
 800f696:	bd70      	pop	{r4, r5, r6, pc}
 800f698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f69c:	3104      	adds	r1, #4
 800f69e:	f7ff be7b 	b.w	800f398 <uxr_serialize_CLIENT_Representation>
 800f6a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f6a6:	3104      	adds	r1, #4
 800f6a8:	f7ff bf32 	b.w	800f510 <uxr_serialize_AGENT_Representation>
 800f6ac:	2001      	movs	r0, #1
 800f6ae:	bd70      	pop	{r4, r5, r6, pc}
 800f6b0:	68a2      	ldr	r2, [r4, #8]
 800f6b2:	f104 010c 	add.w	r1, r4, #12
 800f6b6:	4628      	mov	r0, r5
 800f6b8:	f005 fc2c 	bl	8014f14 <ucdr_serialize_sequence_uint8_t>
 800f6bc:	4606      	mov	r6, r0
 800f6be:	e7c7      	b.n	800f650 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f6c0:	68a1      	ldr	r1, [r4, #8]
 800f6c2:	4628      	mov	r0, r5
 800f6c4:	f005 fc52 	bl	8014f6c <ucdr_serialize_string>
 800f6c8:	4606      	mov	r6, r0
 800f6ca:	e7c1      	b.n	800f650 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f6cc:	68a2      	ldr	r2, [r4, #8]
 800f6ce:	f104 010c 	add.w	r1, r4, #12
 800f6d2:	4628      	mov	r0, r5
 800f6d4:	f005 fc1e 	bl	8014f14 <ucdr_serialize_sequence_uint8_t>
 800f6d8:	4606      	mov	r6, r0
 800f6da:	e7d5      	b.n	800f688 <uxr_serialize_ObjectVariant.part.0+0x94>

0800f6dc <uxr_deserialize_DATAWRITER_Representation>:
 800f6dc:	b570      	push	{r4, r5, r6, lr}
 800f6de:	4606      	mov	r6, r0
 800f6e0:	460d      	mov	r5, r1
 800f6e2:	f7fa ff89 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 800f6e6:	4604      	mov	r4, r0
 800f6e8:	b130      	cbz	r0, 800f6f8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f6ea:	782b      	ldrb	r3, [r5, #0]
 800f6ec:	2b02      	cmp	r3, #2
 800f6ee:	d00c      	beq.n	800f70a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f6f0:	2b03      	cmp	r3, #3
 800f6f2:	d012      	beq.n	800f71a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	d008      	beq.n	800f70a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f6f8:	2202      	movs	r2, #2
 800f6fa:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f6fe:	4630      	mov	r0, r6
 800f700:	f005 fb78 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 800f704:	4020      	ands	r0, r4
 800f706:	b2c0      	uxtb	r0, r0
 800f708:	bd70      	pop	{r4, r5, r6, pc}
 800f70a:	6869      	ldr	r1, [r5, #4]
 800f70c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f710:	4630      	mov	r0, r6
 800f712:	f005 fc3b 	bl	8014f8c <ucdr_deserialize_string>
 800f716:	4604      	mov	r4, r0
 800f718:	e7ee      	b.n	800f6f8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f71a:	1d2b      	adds	r3, r5, #4
 800f71c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f720:	f105 0108 	add.w	r1, r5, #8
 800f724:	4630      	mov	r0, r6
 800f726:	f005 fc07 	bl	8014f38 <ucdr_deserialize_sequence_uint8_t>
 800f72a:	4604      	mov	r4, r0
 800f72c:	e7e4      	b.n	800f6f8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f72e:	bf00      	nop

0800f730 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800f730:	b570      	push	{r4, r5, r6, lr}
 800f732:	460d      	mov	r5, r1
 800f734:	7809      	ldrb	r1, [r1, #0]
 800f736:	4606      	mov	r6, r0
 800f738:	f7fa ff1a 	bl	800a570 <ucdr_serialize_bool>
 800f73c:	782b      	ldrb	r3, [r5, #0]
 800f73e:	4604      	mov	r4, r0
 800f740:	b94b      	cbnz	r3, 800f756 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800f742:	7a29      	ldrb	r1, [r5, #8]
 800f744:	4630      	mov	r0, r6
 800f746:	f7fa ff13 	bl	800a570 <ucdr_serialize_bool>
 800f74a:	7a2b      	ldrb	r3, [r5, #8]
 800f74c:	4004      	ands	r4, r0
 800f74e:	b2e4      	uxtb	r4, r4
 800f750:	b943      	cbnz	r3, 800f764 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800f752:	4620      	mov	r0, r4
 800f754:	bd70      	pop	{r4, r5, r6, pc}
 800f756:	6869      	ldr	r1, [r5, #4]
 800f758:	4630      	mov	r0, r6
 800f75a:	f005 fc07 	bl	8014f6c <ucdr_serialize_string>
 800f75e:	4004      	ands	r4, r0
 800f760:	b2e4      	uxtb	r4, r4
 800f762:	e7ee      	b.n	800f742 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800f764:	68e9      	ldr	r1, [r5, #12]
 800f766:	4630      	mov	r0, r6
 800f768:	f005 fc00 	bl	8014f6c <ucdr_serialize_string>
 800f76c:	4004      	ands	r4, r0
 800f76e:	4620      	mov	r0, r4
 800f770:	bd70      	pop	{r4, r5, r6, pc}
 800f772:	bf00      	nop

0800f774 <uxr_serialize_OBJK_Topic_Binary>:
 800f774:	b570      	push	{r4, r5, r6, lr}
 800f776:	460d      	mov	r5, r1
 800f778:	6809      	ldr	r1, [r1, #0]
 800f77a:	4606      	mov	r6, r0
 800f77c:	f005 fbf6 	bl	8014f6c <ucdr_serialize_string>
 800f780:	7929      	ldrb	r1, [r5, #4]
 800f782:	4604      	mov	r4, r0
 800f784:	4630      	mov	r0, r6
 800f786:	f7fa fef3 	bl	800a570 <ucdr_serialize_bool>
 800f78a:	792b      	ldrb	r3, [r5, #4]
 800f78c:	4004      	ands	r4, r0
 800f78e:	b2e4      	uxtb	r4, r4
 800f790:	b943      	cbnz	r3, 800f7a4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800f792:	7b29      	ldrb	r1, [r5, #12]
 800f794:	4630      	mov	r0, r6
 800f796:	f7fa feeb 	bl	800a570 <ucdr_serialize_bool>
 800f79a:	7b2b      	ldrb	r3, [r5, #12]
 800f79c:	4004      	ands	r4, r0
 800f79e:	b93b      	cbnz	r3, 800f7b0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	bd70      	pop	{r4, r5, r6, pc}
 800f7a4:	68a9      	ldr	r1, [r5, #8]
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	f005 fbe0 	bl	8014f6c <ucdr_serialize_string>
 800f7ac:	4004      	ands	r4, r0
 800f7ae:	e7f0      	b.n	800f792 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800f7b0:	6929      	ldr	r1, [r5, #16]
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	f005 fbda 	bl	8014f6c <ucdr_serialize_string>
 800f7b8:	4004      	ands	r4, r0
 800f7ba:	b2e4      	uxtb	r4, r4
 800f7bc:	4620      	mov	r0, r4
 800f7be:	bd70      	pop	{r4, r5, r6, pc}

0800f7c0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800f7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7c4:	460c      	mov	r4, r1
 800f7c6:	7809      	ldrb	r1, [r1, #0]
 800f7c8:	4606      	mov	r6, r0
 800f7ca:	f7fa fed1 	bl	800a570 <ucdr_serialize_bool>
 800f7ce:	7823      	ldrb	r3, [r4, #0]
 800f7d0:	4605      	mov	r5, r0
 800f7d2:	b96b      	cbnz	r3, 800f7f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800f7d4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f7d8:	4630      	mov	r0, r6
 800f7da:	f7fa fec9 	bl	800a570 <ucdr_serialize_bool>
 800f7de:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f7e2:	4005      	ands	r5, r0
 800f7e4:	b2ed      	uxtb	r5, r5
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d169      	bne.n	800f8be <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7f0:	6861      	ldr	r1, [r4, #4]
 800f7f2:	4630      	mov	r0, r6
 800f7f4:	f7fb f900 	bl	800a9f8 <ucdr_serialize_uint32_t>
 800f7f8:	6863      	ldr	r3, [r4, #4]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d06b      	beq.n	800f8d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800f7fe:	2800      	cmp	r0, #0
 800f800:	d067      	beq.n	800f8d2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f802:	68a1      	ldr	r1, [r4, #8]
 800f804:	4630      	mov	r0, r6
 800f806:	f005 fbb1 	bl	8014f6c <ucdr_serialize_string>
 800f80a:	6863      	ldr	r3, [r4, #4]
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d953      	bls.n	800f8b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f810:	2800      	cmp	r0, #0
 800f812:	d05e      	beq.n	800f8d2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f814:	68e1      	ldr	r1, [r4, #12]
 800f816:	4630      	mov	r0, r6
 800f818:	f005 fba8 	bl	8014f6c <ucdr_serialize_string>
 800f81c:	6863      	ldr	r3, [r4, #4]
 800f81e:	2b02      	cmp	r3, #2
 800f820:	d94a      	bls.n	800f8b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f822:	2800      	cmp	r0, #0
 800f824:	d055      	beq.n	800f8d2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f826:	6921      	ldr	r1, [r4, #16]
 800f828:	4630      	mov	r0, r6
 800f82a:	f005 fb9f 	bl	8014f6c <ucdr_serialize_string>
 800f82e:	6863      	ldr	r3, [r4, #4]
 800f830:	2b03      	cmp	r3, #3
 800f832:	d941      	bls.n	800f8b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f834:	2800      	cmp	r0, #0
 800f836:	d04c      	beq.n	800f8d2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f838:	6961      	ldr	r1, [r4, #20]
 800f83a:	4630      	mov	r0, r6
 800f83c:	f005 fb96 	bl	8014f6c <ucdr_serialize_string>
 800f840:	6863      	ldr	r3, [r4, #4]
 800f842:	2b04      	cmp	r3, #4
 800f844:	d938      	bls.n	800f8b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f846:	2800      	cmp	r0, #0
 800f848:	d043      	beq.n	800f8d2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f84a:	69a1      	ldr	r1, [r4, #24]
 800f84c:	4630      	mov	r0, r6
 800f84e:	f005 fb8d 	bl	8014f6c <ucdr_serialize_string>
 800f852:	6863      	ldr	r3, [r4, #4]
 800f854:	2b05      	cmp	r3, #5
 800f856:	d92f      	bls.n	800f8b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f858:	2800      	cmp	r0, #0
 800f85a:	d03a      	beq.n	800f8d2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f85c:	69e1      	ldr	r1, [r4, #28]
 800f85e:	4630      	mov	r0, r6
 800f860:	f005 fb84 	bl	8014f6c <ucdr_serialize_string>
 800f864:	6863      	ldr	r3, [r4, #4]
 800f866:	2b06      	cmp	r3, #6
 800f868:	d926      	bls.n	800f8b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f86a:	b390      	cbz	r0, 800f8d2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f86c:	6a21      	ldr	r1, [r4, #32]
 800f86e:	4630      	mov	r0, r6
 800f870:	f005 fb7c 	bl	8014f6c <ucdr_serialize_string>
 800f874:	6863      	ldr	r3, [r4, #4]
 800f876:	2b07      	cmp	r3, #7
 800f878:	d91e      	bls.n	800f8b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f87a:	b350      	cbz	r0, 800f8d2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f87c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f87e:	4630      	mov	r0, r6
 800f880:	f005 fb74 	bl	8014f6c <ucdr_serialize_string>
 800f884:	6863      	ldr	r3, [r4, #4]
 800f886:	2b08      	cmp	r3, #8
 800f888:	d916      	bls.n	800f8b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f88a:	b310      	cbz	r0, 800f8d2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f88c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f88e:	4630      	mov	r0, r6
 800f890:	f005 fb6c 	bl	8014f6c <ucdr_serialize_string>
 800f894:	6863      	ldr	r3, [r4, #4]
 800f896:	2b09      	cmp	r3, #9
 800f898:	d90e      	bls.n	800f8b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f89a:	b1d0      	cbz	r0, 800f8d2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f89c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800f8a0:	2709      	movs	r7, #9
 800f8a2:	e000      	b.n	800f8a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800f8a4:	b1a8      	cbz	r0, 800f8d2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f8a6:	f858 1b04 	ldr.w	r1, [r8], #4
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	f005 fb5e 	bl	8014f6c <ucdr_serialize_string>
 800f8b0:	6862      	ldr	r2, [r4, #4]
 800f8b2:	3701      	adds	r7, #1
 800f8b4:	4297      	cmp	r7, r2
 800f8b6:	d3f5      	bcc.n	800f8a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800f8b8:	4005      	ands	r5, r0
 800f8ba:	b2ed      	uxtb	r5, r5
 800f8bc:	e78a      	b.n	800f7d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f8be:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f8c0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f8c4:	4630      	mov	r0, r6
 800f8c6:	f005 fb25 	bl	8014f14 <ucdr_serialize_sequence_uint8_t>
 800f8ca:	4005      	ands	r5, r0
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8d2:	2500      	movs	r5, #0
 800f8d4:	e77e      	b.n	800f7d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f8d6:	4028      	ands	r0, r5
 800f8d8:	b2c5      	uxtb	r5, r0
 800f8da:	e77b      	b.n	800f7d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800f8dc <uxr_serialize_OBJK_Publisher_Binary>:
 800f8dc:	b570      	push	{r4, r5, r6, lr}
 800f8de:	460d      	mov	r5, r1
 800f8e0:	7809      	ldrb	r1, [r1, #0]
 800f8e2:	4606      	mov	r6, r0
 800f8e4:	f7fa fe44 	bl	800a570 <ucdr_serialize_bool>
 800f8e8:	782b      	ldrb	r3, [r5, #0]
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	b94b      	cbnz	r3, 800f902 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800f8ee:	7a29      	ldrb	r1, [r5, #8]
 800f8f0:	4630      	mov	r0, r6
 800f8f2:	f7fa fe3d 	bl	800a570 <ucdr_serialize_bool>
 800f8f6:	7a2b      	ldrb	r3, [r5, #8]
 800f8f8:	4004      	ands	r4, r0
 800f8fa:	b2e4      	uxtb	r4, r4
 800f8fc:	b943      	cbnz	r3, 800f910 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800f8fe:	4620      	mov	r0, r4
 800f900:	bd70      	pop	{r4, r5, r6, pc}
 800f902:	6869      	ldr	r1, [r5, #4]
 800f904:	4630      	mov	r0, r6
 800f906:	f005 fb31 	bl	8014f6c <ucdr_serialize_string>
 800f90a:	4004      	ands	r4, r0
 800f90c:	b2e4      	uxtb	r4, r4
 800f90e:	e7ee      	b.n	800f8ee <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800f910:	f105 010c 	add.w	r1, r5, #12
 800f914:	4630      	mov	r0, r6
 800f916:	f7ff ff53 	bl	800f7c0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800f91a:	4004      	ands	r4, r0
 800f91c:	4620      	mov	r0, r4
 800f91e:	bd70      	pop	{r4, r5, r6, pc}

0800f920 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800f920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f924:	460c      	mov	r4, r1
 800f926:	7809      	ldrb	r1, [r1, #0]
 800f928:	4606      	mov	r6, r0
 800f92a:	f7fa fe21 	bl	800a570 <ucdr_serialize_bool>
 800f92e:	7823      	ldrb	r3, [r4, #0]
 800f930:	4605      	mov	r5, r0
 800f932:	b96b      	cbnz	r3, 800f950 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800f934:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f938:	4630      	mov	r0, r6
 800f93a:	f7fa fe19 	bl	800a570 <ucdr_serialize_bool>
 800f93e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f942:	4005      	ands	r5, r0
 800f944:	b2ed      	uxtb	r5, r5
 800f946:	2b00      	cmp	r3, #0
 800f948:	d169      	bne.n	800fa1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800f94a:	4628      	mov	r0, r5
 800f94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f950:	6861      	ldr	r1, [r4, #4]
 800f952:	4630      	mov	r0, r6
 800f954:	f7fb f850 	bl	800a9f8 <ucdr_serialize_uint32_t>
 800f958:	6863      	ldr	r3, [r4, #4]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d06b      	beq.n	800fa36 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800f95e:	2800      	cmp	r0, #0
 800f960:	d067      	beq.n	800fa32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f962:	68a1      	ldr	r1, [r4, #8]
 800f964:	4630      	mov	r0, r6
 800f966:	f005 fb01 	bl	8014f6c <ucdr_serialize_string>
 800f96a:	6863      	ldr	r3, [r4, #4]
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d953      	bls.n	800fa18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f970:	2800      	cmp	r0, #0
 800f972:	d05e      	beq.n	800fa32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f974:	68e1      	ldr	r1, [r4, #12]
 800f976:	4630      	mov	r0, r6
 800f978:	f005 faf8 	bl	8014f6c <ucdr_serialize_string>
 800f97c:	6863      	ldr	r3, [r4, #4]
 800f97e:	2b02      	cmp	r3, #2
 800f980:	d94a      	bls.n	800fa18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f982:	2800      	cmp	r0, #0
 800f984:	d055      	beq.n	800fa32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f986:	6921      	ldr	r1, [r4, #16]
 800f988:	4630      	mov	r0, r6
 800f98a:	f005 faef 	bl	8014f6c <ucdr_serialize_string>
 800f98e:	6863      	ldr	r3, [r4, #4]
 800f990:	2b03      	cmp	r3, #3
 800f992:	d941      	bls.n	800fa18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f994:	2800      	cmp	r0, #0
 800f996:	d04c      	beq.n	800fa32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f998:	6961      	ldr	r1, [r4, #20]
 800f99a:	4630      	mov	r0, r6
 800f99c:	f005 fae6 	bl	8014f6c <ucdr_serialize_string>
 800f9a0:	6863      	ldr	r3, [r4, #4]
 800f9a2:	2b04      	cmp	r3, #4
 800f9a4:	d938      	bls.n	800fa18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	d043      	beq.n	800fa32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f9aa:	69a1      	ldr	r1, [r4, #24]
 800f9ac:	4630      	mov	r0, r6
 800f9ae:	f005 fadd 	bl	8014f6c <ucdr_serialize_string>
 800f9b2:	6863      	ldr	r3, [r4, #4]
 800f9b4:	2b05      	cmp	r3, #5
 800f9b6:	d92f      	bls.n	800fa18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	d03a      	beq.n	800fa32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f9bc:	69e1      	ldr	r1, [r4, #28]
 800f9be:	4630      	mov	r0, r6
 800f9c0:	f005 fad4 	bl	8014f6c <ucdr_serialize_string>
 800f9c4:	6863      	ldr	r3, [r4, #4]
 800f9c6:	2b06      	cmp	r3, #6
 800f9c8:	d926      	bls.n	800fa18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f9ca:	b390      	cbz	r0, 800fa32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f9cc:	6a21      	ldr	r1, [r4, #32]
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	f005 facc 	bl	8014f6c <ucdr_serialize_string>
 800f9d4:	6863      	ldr	r3, [r4, #4]
 800f9d6:	2b07      	cmp	r3, #7
 800f9d8:	d91e      	bls.n	800fa18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f9da:	b350      	cbz	r0, 800fa32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f9dc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f9de:	4630      	mov	r0, r6
 800f9e0:	f005 fac4 	bl	8014f6c <ucdr_serialize_string>
 800f9e4:	6863      	ldr	r3, [r4, #4]
 800f9e6:	2b08      	cmp	r3, #8
 800f9e8:	d916      	bls.n	800fa18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f9ea:	b310      	cbz	r0, 800fa32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f9ec:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	f005 fabc 	bl	8014f6c <ucdr_serialize_string>
 800f9f4:	6863      	ldr	r3, [r4, #4]
 800f9f6:	2b09      	cmp	r3, #9
 800f9f8:	d90e      	bls.n	800fa18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f9fa:	b1d0      	cbz	r0, 800fa32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f9fc:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800fa00:	2709      	movs	r7, #9
 800fa02:	e000      	b.n	800fa06 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800fa04:	b1a8      	cbz	r0, 800fa32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fa06:	f858 1b04 	ldr.w	r1, [r8], #4
 800fa0a:	4630      	mov	r0, r6
 800fa0c:	f005 faae 	bl	8014f6c <ucdr_serialize_string>
 800fa10:	6862      	ldr	r2, [r4, #4]
 800fa12:	3701      	adds	r7, #1
 800fa14:	4297      	cmp	r7, r2
 800fa16:	d3f5      	bcc.n	800fa04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800fa18:	4005      	ands	r5, r0
 800fa1a:	b2ed      	uxtb	r5, r5
 800fa1c:	e78a      	b.n	800f934 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800fa1e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fa20:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800fa24:	4630      	mov	r0, r6
 800fa26:	f005 fa75 	bl	8014f14 <ucdr_serialize_sequence_uint8_t>
 800fa2a:	4005      	ands	r5, r0
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa32:	2500      	movs	r5, #0
 800fa34:	e77e      	b.n	800f934 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800fa36:	4028      	ands	r0, r5
 800fa38:	b2c5      	uxtb	r5, r0
 800fa3a:	e77b      	b.n	800f934 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800fa3c <uxr_serialize_OBJK_Subscriber_Binary>:
 800fa3c:	b570      	push	{r4, r5, r6, lr}
 800fa3e:	460d      	mov	r5, r1
 800fa40:	7809      	ldrb	r1, [r1, #0]
 800fa42:	4606      	mov	r6, r0
 800fa44:	f7fa fd94 	bl	800a570 <ucdr_serialize_bool>
 800fa48:	782b      	ldrb	r3, [r5, #0]
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	b94b      	cbnz	r3, 800fa62 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800fa4e:	7a29      	ldrb	r1, [r5, #8]
 800fa50:	4630      	mov	r0, r6
 800fa52:	f7fa fd8d 	bl	800a570 <ucdr_serialize_bool>
 800fa56:	7a2b      	ldrb	r3, [r5, #8]
 800fa58:	4004      	ands	r4, r0
 800fa5a:	b2e4      	uxtb	r4, r4
 800fa5c:	b943      	cbnz	r3, 800fa70 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800fa5e:	4620      	mov	r0, r4
 800fa60:	bd70      	pop	{r4, r5, r6, pc}
 800fa62:	6869      	ldr	r1, [r5, #4]
 800fa64:	4630      	mov	r0, r6
 800fa66:	f005 fa81 	bl	8014f6c <ucdr_serialize_string>
 800fa6a:	4004      	ands	r4, r0
 800fa6c:	b2e4      	uxtb	r4, r4
 800fa6e:	e7ee      	b.n	800fa4e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800fa70:	f105 010c 	add.w	r1, r5, #12
 800fa74:	4630      	mov	r0, r6
 800fa76:	f7ff ff53 	bl	800f920 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800fa7a:	4004      	ands	r4, r0
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	bd70      	pop	{r4, r5, r6, pc}

0800fa80 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800fa80:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800fa84:	4688      	mov	r8, r1
 800fa86:	8809      	ldrh	r1, [r1, #0]
 800fa88:	4681      	mov	r9, r0
 800fa8a:	f7fa fdcb 	bl	800a624 <ucdr_serialize_uint16_t>
 800fa8e:	f898 1002 	ldrb.w	r1, [r8, #2]
 800fa92:	4606      	mov	r6, r0
 800fa94:	4648      	mov	r0, r9
 800fa96:	f7fa fd6b 	bl	800a570 <ucdr_serialize_bool>
 800fa9a:	f898 3002 	ldrb.w	r3, [r8, #2]
 800fa9e:	4006      	ands	r6, r0
 800faa0:	b2f5      	uxtb	r5, r6
 800faa2:	b9eb      	cbnz	r3, 800fae0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800faa4:	f898 1006 	ldrb.w	r1, [r8, #6]
 800faa8:	4648      	mov	r0, r9
 800faaa:	f7fa fd61 	bl	800a570 <ucdr_serialize_bool>
 800faae:	f898 3006 	ldrb.w	r3, [r8, #6]
 800fab2:	4005      	ands	r5, r0
 800fab4:	bb7b      	cbnz	r3, 800fb16 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800fab6:	f898 100c 	ldrb.w	r1, [r8, #12]
 800faba:	4648      	mov	r0, r9
 800fabc:	f7fa fd58 	bl	800a570 <ucdr_serialize_bool>
 800fac0:	f898 300c 	ldrb.w	r3, [r8, #12]
 800fac4:	4005      	ands	r5, r0
 800fac6:	b9f3      	cbnz	r3, 800fb06 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800fac8:	f898 1014 	ldrb.w	r1, [r8, #20]
 800facc:	4648      	mov	r0, r9
 800face:	f7fa fd4f 	bl	800a570 <ucdr_serialize_bool>
 800fad2:	f898 3014 	ldrb.w	r3, [r8, #20]
 800fad6:	4005      	ands	r5, r0
 800fad8:	b94b      	cbnz	r3, 800faee <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800fada:	4628      	mov	r0, r5
 800fadc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800fae0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800fae4:	4648      	mov	r0, r9
 800fae6:	f7fa fd9d 	bl	800a624 <ucdr_serialize_uint16_t>
 800faea:	4005      	ands	r5, r0
 800faec:	e7da      	b.n	800faa4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800faee:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800faf2:	f108 011c 	add.w	r1, r8, #28
 800faf6:	4648      	mov	r0, r9
 800faf8:	f005 fa0c 	bl	8014f14 <ucdr_serialize_sequence_uint8_t>
 800fafc:	4028      	ands	r0, r5
 800fafe:	b2c5      	uxtb	r5, r0
 800fb00:	4628      	mov	r0, r5
 800fb02:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800fb06:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fb0a:	4648      	mov	r0, r9
 800fb0c:	f7fa ff74 	bl	800a9f8 <ucdr_serialize_uint32_t>
 800fb10:	4028      	ands	r0, r5
 800fb12:	b2c5      	uxtb	r5, r0
 800fb14:	e7d8      	b.n	800fac8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800fb16:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800fb1a:	4648      	mov	r0, r9
 800fb1c:	f7fa ff6c 	bl	800a9f8 <ucdr_serialize_uint32_t>
 800fb20:	4028      	ands	r0, r5
 800fb22:	b2c5      	uxtb	r5, r0
 800fb24:	e7c7      	b.n	800fab6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800fb26:	bf00      	nop

0800fb28 <uxr_serialize_OBJK_DataReader_Binary>:
 800fb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb2a:	2202      	movs	r2, #2
 800fb2c:	460c      	mov	r4, r1
 800fb2e:	4606      	mov	r6, r0
 800fb30:	f005 f8fc 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800fb34:	78a1      	ldrb	r1, [r4, #2]
 800fb36:	4605      	mov	r5, r0
 800fb38:	4630      	mov	r0, r6
 800fb3a:	f7fa fd19 	bl	800a570 <ucdr_serialize_bool>
 800fb3e:	78a3      	ldrb	r3, [r4, #2]
 800fb40:	4005      	ands	r5, r0
 800fb42:	b2ed      	uxtb	r5, r5
 800fb44:	b90b      	cbnz	r3, 800fb4a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800fb46:	4628      	mov	r0, r5
 800fb48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb4a:	f104 0108 	add.w	r1, r4, #8
 800fb4e:	4630      	mov	r0, r6
 800fb50:	f7ff ff96 	bl	800fa80 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800fb54:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fb58:	4607      	mov	r7, r0
 800fb5a:	4630      	mov	r0, r6
 800fb5c:	f7fa fd08 	bl	800a570 <ucdr_serialize_bool>
 800fb60:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fb64:	4038      	ands	r0, r7
 800fb66:	b2c7      	uxtb	r7, r0
 800fb68:	b95b      	cbnz	r3, 800fb82 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800fb6a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800fb6e:	4630      	mov	r0, r6
 800fb70:	f7fa fcfe 	bl	800a570 <ucdr_serialize_bool>
 800fb74:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800fb78:	4007      	ands	r7, r0
 800fb7a:	b94b      	cbnz	r3, 800fb90 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800fb7c:	403d      	ands	r5, r7
 800fb7e:	4628      	mov	r0, r5
 800fb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb82:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800fb86:	4630      	mov	r0, r6
 800fb88:	f7fb f98c 	bl	800aea4 <ucdr_serialize_uint64_t>
 800fb8c:	4007      	ands	r7, r0
 800fb8e:	e7ec      	b.n	800fb6a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800fb90:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800fb92:	4630      	mov	r0, r6
 800fb94:	f005 f9ea 	bl	8014f6c <ucdr_serialize_string>
 800fb98:	4007      	ands	r7, r0
 800fb9a:	b2ff      	uxtb	r7, r7
 800fb9c:	e7ee      	b.n	800fb7c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800fb9e:	bf00      	nop

0800fba0 <uxr_serialize_OBJK_DataWriter_Binary>:
 800fba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fba2:	2202      	movs	r2, #2
 800fba4:	460d      	mov	r5, r1
 800fba6:	4606      	mov	r6, r0
 800fba8:	f005 f8c0 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800fbac:	78a9      	ldrb	r1, [r5, #2]
 800fbae:	4604      	mov	r4, r0
 800fbb0:	4630      	mov	r0, r6
 800fbb2:	f7fa fcdd 	bl	800a570 <ucdr_serialize_bool>
 800fbb6:	78ab      	ldrb	r3, [r5, #2]
 800fbb8:	4004      	ands	r4, r0
 800fbba:	b2e4      	uxtb	r4, r4
 800fbbc:	b90b      	cbnz	r3, 800fbc2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbc2:	f105 0108 	add.w	r1, r5, #8
 800fbc6:	4630      	mov	r0, r6
 800fbc8:	f7ff ff5a 	bl	800fa80 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800fbcc:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800fbd0:	4607      	mov	r7, r0
 800fbd2:	4630      	mov	r0, r6
 800fbd4:	f7fa fccc 	bl	800a570 <ucdr_serialize_bool>
 800fbd8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800fbdc:	4038      	ands	r0, r7
 800fbde:	b2c7      	uxtb	r7, r0
 800fbe0:	b913      	cbnz	r3, 800fbe8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800fbe2:	403c      	ands	r4, r7
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbe8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800fbec:	4630      	mov	r0, r6
 800fbee:	f7fb f959 	bl	800aea4 <ucdr_serialize_uint64_t>
 800fbf2:	4007      	ands	r7, r0
 800fbf4:	e7f5      	b.n	800fbe2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800fbf6:	bf00      	nop

0800fbf8 <uxr_deserialize_ObjectVariant>:
 800fbf8:	b570      	push	{r4, r5, r6, lr}
 800fbfa:	4605      	mov	r5, r0
 800fbfc:	460e      	mov	r6, r1
 800fbfe:	f7fa fcfb 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 800fc02:	b168      	cbz	r0, 800fc20 <uxr_deserialize_ObjectVariant+0x28>
 800fc04:	7833      	ldrb	r3, [r6, #0]
 800fc06:	3b01      	subs	r3, #1
 800fc08:	4604      	mov	r4, r0
 800fc0a:	2b0d      	cmp	r3, #13
 800fc0c:	d809      	bhi.n	800fc22 <uxr_deserialize_ObjectVariant+0x2a>
 800fc0e:	e8df f003 	tbb	[pc, r3]
 800fc12:	0a41      	.short	0x0a41
 800fc14:	0a0a2323 	.word	0x0a0a2323
 800fc18:	10080a0a 	.word	0x10080a0a
 800fc1c:	565c1010 	.word	0x565c1010
 800fc20:	2400      	movs	r4, #0
 800fc22:	4620      	mov	r0, r4
 800fc24:	bd70      	pop	{r4, r5, r6, pc}
 800fc26:	1d31      	adds	r1, r6, #4
 800fc28:	4628      	mov	r0, r5
 800fc2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc2e:	f7ff bd55 	b.w	800f6dc <uxr_deserialize_DATAWRITER_Representation>
 800fc32:	1d31      	adds	r1, r6, #4
 800fc34:	4628      	mov	r0, r5
 800fc36:	f7fa fcdf 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 800fc3a:	2800      	cmp	r0, #0
 800fc3c:	d0f0      	beq.n	800fc20 <uxr_deserialize_ObjectVariant+0x28>
 800fc3e:	7933      	ldrb	r3, [r6, #4]
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	d001      	beq.n	800fc48 <uxr_deserialize_ObjectVariant+0x50>
 800fc44:	2b02      	cmp	r3, #2
 800fc46:	d1ec      	bne.n	800fc22 <uxr_deserialize_ObjectVariant+0x2a>
 800fc48:	68b1      	ldr	r1, [r6, #8]
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc54:	f005 b99a 	b.w	8014f8c <ucdr_deserialize_string>
 800fc58:	1d31      	adds	r1, r6, #4
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	f7fa fccc 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 800fc60:	4604      	mov	r4, r0
 800fc62:	b170      	cbz	r0, 800fc82 <uxr_deserialize_ObjectVariant+0x8a>
 800fc64:	7933      	ldrb	r3, [r6, #4]
 800fc66:	2b02      	cmp	r3, #2
 800fc68:	d04c      	beq.n	800fd04 <uxr_deserialize_ObjectVariant+0x10c>
 800fc6a:	2b03      	cmp	r3, #3
 800fc6c:	d109      	bne.n	800fc82 <uxr_deserialize_ObjectVariant+0x8a>
 800fc6e:	f106 0308 	add.w	r3, r6, #8
 800fc72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc76:	f106 010c 	add.w	r1, r6, #12
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	f005 f95c 	bl	8014f38 <ucdr_deserialize_sequence_uint8_t>
 800fc80:	4604      	mov	r4, r0
 800fc82:	2202      	movs	r2, #2
 800fc84:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800fc88:	4628      	mov	r0, r5
 800fc8a:	f005 f8b3 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 800fc8e:	4020      	ands	r0, r4
 800fc90:	b2c4      	uxtb	r4, r0
 800fc92:	e7c6      	b.n	800fc22 <uxr_deserialize_ObjectVariant+0x2a>
 800fc94:	1d31      	adds	r1, r6, #4
 800fc96:	4628      	mov	r0, r5
 800fc98:	f7fa fcae 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 800fc9c:	4604      	mov	r4, r0
 800fc9e:	b130      	cbz	r0, 800fcae <uxr_deserialize_ObjectVariant+0xb6>
 800fca0:	7933      	ldrb	r3, [r6, #4]
 800fca2:	2b02      	cmp	r3, #2
 800fca4:	d036      	beq.n	800fd14 <uxr_deserialize_ObjectVariant+0x11c>
 800fca6:	2b03      	cmp	r3, #3
 800fca8:	d03c      	beq.n	800fd24 <uxr_deserialize_ObjectVariant+0x12c>
 800fcaa:	2b01      	cmp	r3, #1
 800fcac:	d032      	beq.n	800fd14 <uxr_deserialize_ObjectVariant+0x11c>
 800fcae:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800fcb2:	4628      	mov	r0, r5
 800fcb4:	f7fb fa46 	bl	800b144 <ucdr_deserialize_int16_t>
 800fcb8:	4020      	ands	r0, r4
 800fcba:	b2c4      	uxtb	r4, r0
 800fcbc:	e7b1      	b.n	800fc22 <uxr_deserialize_ObjectVariant+0x2a>
 800fcbe:	1d31      	adds	r1, r6, #4
 800fcc0:	4628      	mov	r0, r5
 800fcc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcc6:	f7ff bbbf 	b.w	800f448 <uxr_deserialize_CLIENT_Representation>
 800fcca:	2204      	movs	r2, #4
 800fccc:	18b1      	adds	r1, r6, r2
 800fcce:	4628      	mov	r0, r5
 800fcd0:	f005 f890 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 800fcd4:	2202      	movs	r2, #2
 800fcd6:	f106 0108 	add.w	r1, r6, #8
 800fcda:	4604      	mov	r4, r0
 800fcdc:	4628      	mov	r0, r5
 800fcde:	f005 f889 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 800fce2:	2202      	movs	r2, #2
 800fce4:	4004      	ands	r4, r0
 800fce6:	f106 010a 	add.w	r1, r6, #10
 800fcea:	4628      	mov	r0, r5
 800fcec:	f005 f882 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 800fcf0:	b2e4      	uxtb	r4, r4
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	f106 010c 	add.w	r1, r6, #12
 800fcf8:	4628      	mov	r0, r5
 800fcfa:	401c      	ands	r4, r3
 800fcfc:	f7fa fc4e 	bl	800a59c <ucdr_deserialize_bool>
 800fd00:	4004      	ands	r4, r0
 800fd02:	e78e      	b.n	800fc22 <uxr_deserialize_ObjectVariant+0x2a>
 800fd04:	68b1      	ldr	r1, [r6, #8]
 800fd06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	f005 f93e 	bl	8014f8c <ucdr_deserialize_string>
 800fd10:	4604      	mov	r4, r0
 800fd12:	e7b6      	b.n	800fc82 <uxr_deserialize_ObjectVariant+0x8a>
 800fd14:	68b1      	ldr	r1, [r6, #8]
 800fd16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	f005 f936 	bl	8014f8c <ucdr_deserialize_string>
 800fd20:	4604      	mov	r4, r0
 800fd22:	e7c4      	b.n	800fcae <uxr_deserialize_ObjectVariant+0xb6>
 800fd24:	f106 0308 	add.w	r3, r6, #8
 800fd28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd2c:	f106 010c 	add.w	r1, r6, #12
 800fd30:	4628      	mov	r0, r5
 800fd32:	f005 f901 	bl	8014f38 <ucdr_deserialize_sequence_uint8_t>
 800fd36:	4604      	mov	r4, r0
 800fd38:	e7b9      	b.n	800fcae <uxr_deserialize_ObjectVariant+0xb6>
 800fd3a:	bf00      	nop

0800fd3c <uxr_deserialize_BaseObjectRequest>:
 800fd3c:	b570      	push	{r4, r5, r6, lr}
 800fd3e:	2202      	movs	r2, #2
 800fd40:	4605      	mov	r5, r0
 800fd42:	460e      	mov	r6, r1
 800fd44:	f005 f856 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 800fd48:	2202      	movs	r2, #2
 800fd4a:	4604      	mov	r4, r0
 800fd4c:	18b1      	adds	r1, r6, r2
 800fd4e:	4628      	mov	r0, r5
 800fd50:	f005 f850 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 800fd54:	4020      	ands	r0, r4
 800fd56:	b2c0      	uxtb	r0, r0
 800fd58:	bd70      	pop	{r4, r5, r6, pc}
 800fd5a:	bf00      	nop

0800fd5c <uxr_serialize_ActivityInfoVariant>:
 800fd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd60:	460d      	mov	r5, r1
 800fd62:	7809      	ldrb	r1, [r1, #0]
 800fd64:	4607      	mov	r7, r0
 800fd66:	f7fa fc31 	bl	800a5cc <ucdr_serialize_uint8_t>
 800fd6a:	4681      	mov	r9, r0
 800fd6c:	b138      	cbz	r0, 800fd7e <uxr_serialize_ActivityInfoVariant+0x22>
 800fd6e:	782b      	ldrb	r3, [r5, #0]
 800fd70:	2b06      	cmp	r3, #6
 800fd72:	f000 8082 	beq.w	800fe7a <uxr_serialize_ActivityInfoVariant+0x11e>
 800fd76:	2b0d      	cmp	r3, #13
 800fd78:	d016      	beq.n	800fda8 <uxr_serialize_ActivityInfoVariant+0x4c>
 800fd7a:	2b05      	cmp	r3, #5
 800fd7c:	d002      	beq.n	800fd84 <uxr_serialize_ActivityInfoVariant+0x28>
 800fd7e:	4648      	mov	r0, r9
 800fd80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd84:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fd88:	4638      	mov	r0, r7
 800fd8a:	f7fb f95b 	bl	800b044 <ucdr_serialize_int16_t>
 800fd8e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800fd92:	4681      	mov	r9, r0
 800fd94:	4638      	mov	r0, r7
 800fd96:	f7fb f885 	bl	800aea4 <ucdr_serialize_uint64_t>
 800fd9a:	ea09 0000 	and.w	r0, r9, r0
 800fd9e:	fa5f f980 	uxtb.w	r9, r0
 800fda2:	4648      	mov	r0, r9
 800fda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fda8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fdac:	4638      	mov	r0, r7
 800fdae:	f7fb f949 	bl	800b044 <ucdr_serialize_int16_t>
 800fdb2:	68e9      	ldr	r1, [r5, #12]
 800fdb4:	4681      	mov	r9, r0
 800fdb6:	4638      	mov	r0, r7
 800fdb8:	f7fa fe1e 	bl	800a9f8 <ucdr_serialize_uint32_t>
 800fdbc:	68eb      	ldr	r3, [r5, #12]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d0eb      	beq.n	800fd9a <uxr_serialize_ActivityInfoVariant+0x3e>
 800fdc2:	b320      	cbz	r0, 800fe0e <uxr_serialize_ActivityInfoVariant+0xb2>
 800fdc4:	f105 080c 	add.w	r8, r5, #12
 800fdc8:	2600      	movs	r6, #0
 800fdca:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800fdce:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800fdd2:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800fdd6:	4638      	mov	r0, r7
 800fdd8:	f7fa fbf8 	bl	800a5cc <ucdr_serialize_uint8_t>
 800fddc:	2800      	cmp	r0, #0
 800fdde:	d053      	beq.n	800fe88 <uxr_serialize_ActivityInfoVariant+0x12c>
 800fde0:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800fde4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800fde8:	0074      	lsls	r4, r6, #1
 800fdea:	00c9      	lsls	r1, r1, #3
 800fdec:	2b03      	cmp	r3, #3
 800fdee:	d854      	bhi.n	800fe9a <uxr_serialize_ActivityInfoVariant+0x13e>
 800fdf0:	e8df f003 	tbb	[pc, r3]
 800fdf4:	02102132 	.word	0x02102132
 800fdf8:	4441      	add	r1, r8
 800fdfa:	4638      	mov	r0, r7
 800fdfc:	6889      	ldr	r1, [r1, #8]
 800fdfe:	f005 f8b5 	bl	8014f6c <ucdr_serialize_string>
 800fe02:	68ea      	ldr	r2, [r5, #12]
 800fe04:	3601      	adds	r6, #1
 800fe06:	4296      	cmp	r6, r2
 800fe08:	d242      	bcs.n	800fe90 <uxr_serialize_ActivityInfoVariant+0x134>
 800fe0a:	2800      	cmp	r0, #0
 800fe0c:	d1dd      	bne.n	800fdca <uxr_serialize_ActivityInfoVariant+0x6e>
 800fe0e:	f04f 0900 	mov.w	r9, #0
 800fe12:	e7b4      	b.n	800fd7e <uxr_serialize_ActivityInfoVariant+0x22>
 800fe14:	3108      	adds	r1, #8
 800fe16:	4441      	add	r1, r8
 800fe18:	2210      	movs	r2, #16
 800fe1a:	4638      	mov	r0, r7
 800fe1c:	f004 ff86 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800fe20:	4434      	add	r4, r6
 800fe22:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fe26:	4604      	mov	r4, r0
 800fe28:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800fe2a:	4638      	mov	r0, r7
 800fe2c:	f7fa fde4 	bl	800a9f8 <ucdr_serialize_uint32_t>
 800fe30:	4020      	ands	r0, r4
 800fe32:	b2c0      	uxtb	r0, r0
 800fe34:	e7e5      	b.n	800fe02 <uxr_serialize_ActivityInfoVariant+0xa6>
 800fe36:	3108      	adds	r1, #8
 800fe38:	4441      	add	r1, r8
 800fe3a:	2204      	movs	r2, #4
 800fe3c:	4638      	mov	r0, r7
 800fe3e:	f004 ff75 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800fe42:	4434      	add	r4, r6
 800fe44:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fe48:	4604      	mov	r4, r0
 800fe4a:	8b19      	ldrh	r1, [r3, #24]
 800fe4c:	4638      	mov	r0, r7
 800fe4e:	f7fa fbe9 	bl	800a624 <ucdr_serialize_uint16_t>
 800fe52:	4020      	ands	r0, r4
 800fe54:	b2c0      	uxtb	r0, r0
 800fe56:	e7d4      	b.n	800fe02 <uxr_serialize_ActivityInfoVariant+0xa6>
 800fe58:	3108      	adds	r1, #8
 800fe5a:	4441      	add	r1, r8
 800fe5c:	2202      	movs	r2, #2
 800fe5e:	4638      	mov	r0, r7
 800fe60:	f004 ff64 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800fe64:	4434      	add	r4, r6
 800fe66:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	7d99      	ldrb	r1, [r3, #22]
 800fe6e:	4638      	mov	r0, r7
 800fe70:	f7fa fbac 	bl	800a5cc <ucdr_serialize_uint8_t>
 800fe74:	4020      	ands	r0, r4
 800fe76:	b2c0      	uxtb	r0, r0
 800fe78:	e7c3      	b.n	800fe02 <uxr_serialize_ActivityInfoVariant+0xa6>
 800fe7a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fe7e:	4638      	mov	r0, r7
 800fe80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe84:	f7fb b8de 	b.w	800b044 <ucdr_serialize_int16_t>
 800fe88:	68ea      	ldr	r2, [r5, #12]
 800fe8a:	3601      	adds	r6, #1
 800fe8c:	42b2      	cmp	r2, r6
 800fe8e:	d8be      	bhi.n	800fe0e <uxr_serialize_ActivityInfoVariant+0xb2>
 800fe90:	ea09 0900 	and.w	r9, r9, r0
 800fe94:	fa5f f989 	uxtb.w	r9, r9
 800fe98:	e771      	b.n	800fd7e <uxr_serialize_ActivityInfoVariant+0x22>
 800fe9a:	68eb      	ldr	r3, [r5, #12]
 800fe9c:	3601      	adds	r6, #1
 800fe9e:	429e      	cmp	r6, r3
 800fea0:	f10a 0a18 	add.w	sl, sl, #24
 800fea4:	d395      	bcc.n	800fdd2 <uxr_serialize_ActivityInfoVariant+0x76>
 800fea6:	e76a      	b.n	800fd7e <uxr_serialize_ActivityInfoVariant+0x22>

0800fea8 <uxr_deserialize_BaseObjectReply>:
 800fea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feac:	2202      	movs	r2, #2
 800feae:	4606      	mov	r6, r0
 800feb0:	460f      	mov	r7, r1
 800feb2:	f004 ff9f 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 800feb6:	2202      	movs	r2, #2
 800feb8:	18b9      	adds	r1, r7, r2
 800feba:	4605      	mov	r5, r0
 800febc:	4630      	mov	r0, r6
 800febe:	f004 ff99 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 800fec2:	1d39      	adds	r1, r7, #4
 800fec4:	4680      	mov	r8, r0
 800fec6:	4630      	mov	r0, r6
 800fec8:	f7fa fb96 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 800fecc:	1d79      	adds	r1, r7, #5
 800fece:	4604      	mov	r4, r0
 800fed0:	4630      	mov	r0, r6
 800fed2:	f7fa fb91 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 800fed6:	ea05 0508 	and.w	r5, r5, r8
 800feda:	402c      	ands	r4, r5
 800fedc:	4020      	ands	r0, r4
 800fede:	b2c0      	uxtb	r0, r0
 800fee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fee4 <uxr_serialize_ReadSpecification>:
 800fee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fee8:	460e      	mov	r6, r1
 800feea:	7809      	ldrb	r1, [r1, #0]
 800feec:	4607      	mov	r7, r0
 800feee:	f7fa fb6d 	bl	800a5cc <ucdr_serialize_uint8_t>
 800fef2:	7871      	ldrb	r1, [r6, #1]
 800fef4:	4604      	mov	r4, r0
 800fef6:	4638      	mov	r0, r7
 800fef8:	f7fa fb68 	bl	800a5cc <ucdr_serialize_uint8_t>
 800fefc:	78b1      	ldrb	r1, [r6, #2]
 800fefe:	4004      	ands	r4, r0
 800ff00:	4638      	mov	r0, r7
 800ff02:	f7fa fb35 	bl	800a570 <ucdr_serialize_bool>
 800ff06:	78b3      	ldrb	r3, [r6, #2]
 800ff08:	b2e4      	uxtb	r4, r4
 800ff0a:	4004      	ands	r4, r0
 800ff0c:	b94b      	cbnz	r3, 800ff22 <uxr_serialize_ReadSpecification+0x3e>
 800ff0e:	7a31      	ldrb	r1, [r6, #8]
 800ff10:	4638      	mov	r0, r7
 800ff12:	f7fa fb2d 	bl	800a570 <ucdr_serialize_bool>
 800ff16:	7a33      	ldrb	r3, [r6, #8]
 800ff18:	4004      	ands	r4, r0
 800ff1a:	b943      	cbnz	r3, 800ff2e <uxr_serialize_ReadSpecification+0x4a>
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff22:	6871      	ldr	r1, [r6, #4]
 800ff24:	4638      	mov	r0, r7
 800ff26:	f005 f821 	bl	8014f6c <ucdr_serialize_string>
 800ff2a:	4004      	ands	r4, r0
 800ff2c:	e7ef      	b.n	800ff0e <uxr_serialize_ReadSpecification+0x2a>
 800ff2e:	8971      	ldrh	r1, [r6, #10]
 800ff30:	4638      	mov	r0, r7
 800ff32:	f7fa fb77 	bl	800a624 <ucdr_serialize_uint16_t>
 800ff36:	89b1      	ldrh	r1, [r6, #12]
 800ff38:	4605      	mov	r5, r0
 800ff3a:	4638      	mov	r0, r7
 800ff3c:	f7fa fb72 	bl	800a624 <ucdr_serialize_uint16_t>
 800ff40:	89f1      	ldrh	r1, [r6, #14]
 800ff42:	4005      	ands	r5, r0
 800ff44:	4638      	mov	r0, r7
 800ff46:	f7fa fb6d 	bl	800a624 <ucdr_serialize_uint16_t>
 800ff4a:	8a31      	ldrh	r1, [r6, #16]
 800ff4c:	4680      	mov	r8, r0
 800ff4e:	4638      	mov	r0, r7
 800ff50:	f7fa fb68 	bl	800a624 <ucdr_serialize_uint16_t>
 800ff54:	b2ed      	uxtb	r5, r5
 800ff56:	4025      	ands	r5, r4
 800ff58:	ea08 0505 	and.w	r5, r8, r5
 800ff5c:	ea00 0405 	and.w	r4, r0, r5
 800ff60:	4620      	mov	r0, r4
 800ff62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff66:	bf00      	nop

0800ff68 <uxr_serialize_CREATE_CLIENT_Payload>:
 800ff68:	f7ff ba16 	b.w	800f398 <uxr_serialize_CLIENT_Representation>

0800ff6c <uxr_serialize_CREATE_Payload>:
 800ff6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff6e:	2202      	movs	r2, #2
 800ff70:	4607      	mov	r7, r0
 800ff72:	460e      	mov	r6, r1
 800ff74:	f004 feda 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800ff78:	2202      	movs	r2, #2
 800ff7a:	18b1      	adds	r1, r6, r2
 800ff7c:	4605      	mov	r5, r0
 800ff7e:	4638      	mov	r0, r7
 800ff80:	f004 fed4 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 800ff84:	7931      	ldrb	r1, [r6, #4]
 800ff86:	4604      	mov	r4, r0
 800ff88:	4638      	mov	r0, r7
 800ff8a:	f7fa fb1f 	bl	800a5cc <ucdr_serialize_uint8_t>
 800ff8e:	b170      	cbz	r0, 800ffae <uxr_serialize_CREATE_Payload+0x42>
 800ff90:	7933      	ldrb	r3, [r6, #4]
 800ff92:	402c      	ands	r4, r5
 800ff94:	3b01      	subs	r3, #1
 800ff96:	b2e4      	uxtb	r4, r4
 800ff98:	2b0d      	cmp	r3, #13
 800ff9a:	d809      	bhi.n	800ffb0 <uxr_serialize_CREATE_Payload+0x44>
 800ff9c:	e8df f003 	tbb	[pc, r3]
 800ffa0:	23230a4c 	.word	0x23230a4c
 800ffa4:	0a0a0a0a 	.word	0x0a0a0a0a
 800ffa8:	12121208 	.word	0x12121208
 800ffac:	3e45      	.short	0x3e45
 800ffae:	2400      	movs	r4, #0
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffb4:	f106 0108 	add.w	r1, r6, #8
 800ffb8:	4638      	mov	r0, r7
 800ffba:	f7ff faf3 	bl	800f5a4 <uxr_serialize_DATAWRITER_Representation>
 800ffbe:	4004      	ands	r4, r0
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffc4:	7a31      	ldrb	r1, [r6, #8]
 800ffc6:	4638      	mov	r0, r7
 800ffc8:	f7fa fb00 	bl	800a5cc <ucdr_serialize_uint8_t>
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	d0ee      	beq.n	800ffae <uxr_serialize_CREATE_Payload+0x42>
 800ffd0:	7a33      	ldrb	r3, [r6, #8]
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d001      	beq.n	800ffda <uxr_serialize_CREATE_Payload+0x6e>
 800ffd6:	2b02      	cmp	r3, #2
 800ffd8:	d1ea      	bne.n	800ffb0 <uxr_serialize_CREATE_Payload+0x44>
 800ffda:	68f1      	ldr	r1, [r6, #12]
 800ffdc:	4638      	mov	r0, r7
 800ffde:	f004 ffc5 	bl	8014f6c <ucdr_serialize_string>
 800ffe2:	4004      	ands	r4, r0
 800ffe4:	e7e4      	b.n	800ffb0 <uxr_serialize_CREATE_Payload+0x44>
 800ffe6:	7a31      	ldrb	r1, [r6, #8]
 800ffe8:	4638      	mov	r0, r7
 800ffea:	f7fa faef 	bl	800a5cc <ucdr_serialize_uint8_t>
 800ffee:	4605      	mov	r5, r0
 800fff0:	b158      	cbz	r0, 801000a <uxr_serialize_CREATE_Payload+0x9e>
 800fff2:	7a33      	ldrb	r3, [r6, #8]
 800fff4:	2b02      	cmp	r3, #2
 800fff6:	d034      	beq.n	8010062 <uxr_serialize_CREATE_Payload+0xf6>
 800fff8:	2b03      	cmp	r3, #3
 800fffa:	d106      	bne.n	801000a <uxr_serialize_CREATE_Payload+0x9e>
 800fffc:	68f2      	ldr	r2, [r6, #12]
 800fffe:	f106 0110 	add.w	r1, r6, #16
 8010002:	4638      	mov	r0, r7
 8010004:	f004 ff86 	bl	8014f14 <ucdr_serialize_sequence_uint8_t>
 8010008:	4605      	mov	r5, r0
 801000a:	2202      	movs	r2, #2
 801000c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8010010:	4638      	mov	r0, r7
 8010012:	f004 fe8b 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 8010016:	4028      	ands	r0, r5
 8010018:	4004      	ands	r4, r0
 801001a:	e7c9      	b.n	800ffb0 <uxr_serialize_CREATE_Payload+0x44>
 801001c:	f106 0108 	add.w	r1, r6, #8
 8010020:	4638      	mov	r0, r7
 8010022:	f7ff f9b9 	bl	800f398 <uxr_serialize_CLIENT_Representation>
 8010026:	4004      	ands	r4, r0
 8010028:	e7c2      	b.n	800ffb0 <uxr_serialize_CREATE_Payload+0x44>
 801002a:	f106 0108 	add.w	r1, r6, #8
 801002e:	4638      	mov	r0, r7
 8010030:	f7ff fa6e 	bl	800f510 <uxr_serialize_AGENT_Representation>
 8010034:	4004      	ands	r4, r0
 8010036:	e7bb      	b.n	800ffb0 <uxr_serialize_CREATE_Payload+0x44>
 8010038:	7a31      	ldrb	r1, [r6, #8]
 801003a:	4638      	mov	r0, r7
 801003c:	f7fa fac6 	bl	800a5cc <ucdr_serialize_uint8_t>
 8010040:	4605      	mov	r5, r0
 8010042:	b130      	cbz	r0, 8010052 <uxr_serialize_CREATE_Payload+0xe6>
 8010044:	7a33      	ldrb	r3, [r6, #8]
 8010046:	2b02      	cmp	r3, #2
 8010048:	d011      	beq.n	801006e <uxr_serialize_CREATE_Payload+0x102>
 801004a:	2b03      	cmp	r3, #3
 801004c:	d015      	beq.n	801007a <uxr_serialize_CREATE_Payload+0x10e>
 801004e:	2b01      	cmp	r3, #1
 8010050:	d00d      	beq.n	801006e <uxr_serialize_CREATE_Payload+0x102>
 8010052:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8010056:	4638      	mov	r0, r7
 8010058:	f7fa fff4 	bl	800b044 <ucdr_serialize_int16_t>
 801005c:	4028      	ands	r0, r5
 801005e:	4004      	ands	r4, r0
 8010060:	e7a6      	b.n	800ffb0 <uxr_serialize_CREATE_Payload+0x44>
 8010062:	68f1      	ldr	r1, [r6, #12]
 8010064:	4638      	mov	r0, r7
 8010066:	f004 ff81 	bl	8014f6c <ucdr_serialize_string>
 801006a:	4605      	mov	r5, r0
 801006c:	e7cd      	b.n	801000a <uxr_serialize_CREATE_Payload+0x9e>
 801006e:	68f1      	ldr	r1, [r6, #12]
 8010070:	4638      	mov	r0, r7
 8010072:	f004 ff7b 	bl	8014f6c <ucdr_serialize_string>
 8010076:	4605      	mov	r5, r0
 8010078:	e7eb      	b.n	8010052 <uxr_serialize_CREATE_Payload+0xe6>
 801007a:	68f2      	ldr	r2, [r6, #12]
 801007c:	f106 0110 	add.w	r1, r6, #16
 8010080:	4638      	mov	r0, r7
 8010082:	f004 ff47 	bl	8014f14 <ucdr_serialize_sequence_uint8_t>
 8010086:	4605      	mov	r5, r0
 8010088:	e7e3      	b.n	8010052 <uxr_serialize_CREATE_Payload+0xe6>
 801008a:	bf00      	nop

0801008c <uxr_deserialize_GET_INFO_Payload>:
 801008c:	b570      	push	{r4, r5, r6, lr}
 801008e:	2202      	movs	r2, #2
 8010090:	4605      	mov	r5, r0
 8010092:	460e      	mov	r6, r1
 8010094:	f004 feae 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 8010098:	2202      	movs	r2, #2
 801009a:	18b1      	adds	r1, r6, r2
 801009c:	4604      	mov	r4, r0
 801009e:	4628      	mov	r0, r5
 80100a0:	f004 fea8 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 80100a4:	1d31      	adds	r1, r6, #4
 80100a6:	4004      	ands	r4, r0
 80100a8:	4628      	mov	r0, r5
 80100aa:	f7fa fdd5 	bl	800ac58 <ucdr_deserialize_uint32_t>
 80100ae:	b2e4      	uxtb	r4, r4
 80100b0:	4020      	ands	r0, r4
 80100b2:	bd70      	pop	{r4, r5, r6, pc}

080100b4 <uxr_serialize_DELETE_Payload>:
 80100b4:	b570      	push	{r4, r5, r6, lr}
 80100b6:	2202      	movs	r2, #2
 80100b8:	4605      	mov	r5, r0
 80100ba:	460e      	mov	r6, r1
 80100bc:	f004 fe36 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 80100c0:	2202      	movs	r2, #2
 80100c2:	4604      	mov	r4, r0
 80100c4:	18b1      	adds	r1, r6, r2
 80100c6:	4628      	mov	r0, r5
 80100c8:	f004 fe30 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 80100cc:	4020      	ands	r0, r4
 80100ce:	b2c0      	uxtb	r0, r0
 80100d0:	bd70      	pop	{r4, r5, r6, pc}
 80100d2:	bf00      	nop

080100d4 <uxr_deserialize_STATUS_AGENT_Payload>:
 80100d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d8:	4605      	mov	r5, r0
 80100da:	460e      	mov	r6, r1
 80100dc:	f7fa fa8c 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 80100e0:	1c71      	adds	r1, r6, #1
 80100e2:	4604      	mov	r4, r0
 80100e4:	4628      	mov	r0, r5
 80100e6:	f7fa fa87 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 80100ea:	2204      	movs	r2, #4
 80100ec:	18b1      	adds	r1, r6, r2
 80100ee:	4680      	mov	r8, r0
 80100f0:	4628      	mov	r0, r5
 80100f2:	f004 fe7f 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 80100f6:	f106 0108 	add.w	r1, r6, #8
 80100fa:	4607      	mov	r7, r0
 80100fc:	2202      	movs	r2, #2
 80100fe:	4628      	mov	r0, r5
 8010100:	f004 fe78 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 8010104:	ea04 0308 	and.w	r3, r4, r8
 8010108:	b2db      	uxtb	r3, r3
 801010a:	ea03 0407 	and.w	r4, r3, r7
 801010e:	2202      	movs	r2, #2
 8010110:	4607      	mov	r7, r0
 8010112:	f106 010a 	add.w	r1, r6, #10
 8010116:	4628      	mov	r0, r5
 8010118:	f004 fe6c 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 801011c:	f106 010c 	add.w	r1, r6, #12
 8010120:	4603      	mov	r3, r0
 8010122:	4628      	mov	r0, r5
 8010124:	461d      	mov	r5, r3
 8010126:	f7fa fa39 	bl	800a59c <ucdr_deserialize_bool>
 801012a:	403c      	ands	r4, r7
 801012c:	4025      	ands	r5, r4
 801012e:	4028      	ands	r0, r5
 8010130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010134 <uxr_deserialize_STATUS_Payload>:
 8010134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010138:	2202      	movs	r2, #2
 801013a:	4606      	mov	r6, r0
 801013c:	460f      	mov	r7, r1
 801013e:	f004 fe59 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 8010142:	2202      	movs	r2, #2
 8010144:	18b9      	adds	r1, r7, r2
 8010146:	4605      	mov	r5, r0
 8010148:	4630      	mov	r0, r6
 801014a:	f004 fe53 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 801014e:	1d39      	adds	r1, r7, #4
 8010150:	4680      	mov	r8, r0
 8010152:	4630      	mov	r0, r6
 8010154:	f7fa fa50 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 8010158:	1d79      	adds	r1, r7, #5
 801015a:	4604      	mov	r4, r0
 801015c:	4630      	mov	r0, r6
 801015e:	f7fa fa4b 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 8010162:	ea05 0508 	and.w	r5, r5, r8
 8010166:	402c      	ands	r4, r5
 8010168:	4020      	ands	r0, r4
 801016a:	b2c0      	uxtb	r0, r0
 801016c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010170 <uxr_serialize_INFO_Payload>:
 8010170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010174:	2202      	movs	r2, #2
 8010176:	460c      	mov	r4, r1
 8010178:	4605      	mov	r5, r0
 801017a:	f004 fdd7 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 801017e:	2202      	movs	r2, #2
 8010180:	18a1      	adds	r1, r4, r2
 8010182:	4680      	mov	r8, r0
 8010184:	4628      	mov	r0, r5
 8010186:	f004 fdd1 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 801018a:	7921      	ldrb	r1, [r4, #4]
 801018c:	4607      	mov	r7, r0
 801018e:	4628      	mov	r0, r5
 8010190:	f7fa fa1c 	bl	800a5cc <ucdr_serialize_uint8_t>
 8010194:	7961      	ldrb	r1, [r4, #5]
 8010196:	4606      	mov	r6, r0
 8010198:	4628      	mov	r0, r5
 801019a:	f7fa fa17 	bl	800a5cc <ucdr_serialize_uint8_t>
 801019e:	ea08 0807 	and.w	r8, r8, r7
 80101a2:	ea06 0608 	and.w	r6, r6, r8
 80101a6:	4006      	ands	r6, r0
 80101a8:	7a21      	ldrb	r1, [r4, #8]
 80101aa:	4628      	mov	r0, r5
 80101ac:	f7fa f9e0 	bl	800a570 <ucdr_serialize_bool>
 80101b0:	7a23      	ldrb	r3, [r4, #8]
 80101b2:	b2f7      	uxtb	r7, r6
 80101b4:	4606      	mov	r6, r0
 80101b6:	b96b      	cbnz	r3, 80101d4 <uxr_serialize_INFO_Payload+0x64>
 80101b8:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80101bc:	4628      	mov	r0, r5
 80101be:	f7fa f9d7 	bl	800a570 <ucdr_serialize_bool>
 80101c2:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80101c6:	4030      	ands	r0, r6
 80101c8:	b2c6      	uxtb	r6, r0
 80101ca:	b983      	cbnz	r3, 80101ee <uxr_serialize_INFO_Payload+0x7e>
 80101cc:	ea06 0007 	and.w	r0, r6, r7
 80101d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101d4:	7b21      	ldrb	r1, [r4, #12]
 80101d6:	4628      	mov	r0, r5
 80101d8:	f7fa f9f8 	bl	800a5cc <ucdr_serialize_uint8_t>
 80101dc:	b188      	cbz	r0, 8010202 <uxr_serialize_INFO_Payload+0x92>
 80101de:	f104 010c 	add.w	r1, r4, #12
 80101e2:	4628      	mov	r0, r5
 80101e4:	f7ff fa06 	bl	800f5f4 <uxr_serialize_ObjectVariant.part.0>
 80101e8:	4030      	ands	r0, r6
 80101ea:	b2c6      	uxtb	r6, r0
 80101ec:	e7e4      	b.n	80101b8 <uxr_serialize_INFO_Payload+0x48>
 80101ee:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80101f2:	4628      	mov	r0, r5
 80101f4:	f7ff fdb2 	bl	800fd5c <uxr_serialize_ActivityInfoVariant>
 80101f8:	4006      	ands	r6, r0
 80101fa:	ea06 0007 	and.w	r0, r6, r7
 80101fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010202:	4606      	mov	r6, r0
 8010204:	e7d8      	b.n	80101b8 <uxr_serialize_INFO_Payload+0x48>
 8010206:	bf00      	nop

08010208 <uxr_serialize_READ_DATA_Payload>:
 8010208:	b570      	push	{r4, r5, r6, lr}
 801020a:	2202      	movs	r2, #2
 801020c:	4605      	mov	r5, r0
 801020e:	460e      	mov	r6, r1
 8010210:	f004 fd8c 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 8010214:	2202      	movs	r2, #2
 8010216:	18b1      	adds	r1, r6, r2
 8010218:	4604      	mov	r4, r0
 801021a:	4628      	mov	r0, r5
 801021c:	f004 fd86 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 8010220:	1d31      	adds	r1, r6, #4
 8010222:	4004      	ands	r4, r0
 8010224:	4628      	mov	r0, r5
 8010226:	f7ff fe5d 	bl	800fee4 <uxr_serialize_ReadSpecification>
 801022a:	b2e4      	uxtb	r4, r4
 801022c:	4020      	ands	r0, r4
 801022e:	bd70      	pop	{r4, r5, r6, pc}

08010230 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010230:	b570      	push	{r4, r5, r6, lr}
 8010232:	2202      	movs	r2, #2
 8010234:	4605      	mov	r5, r0
 8010236:	460e      	mov	r6, r1
 8010238:	f004 fd78 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 801023c:	2202      	movs	r2, #2
 801023e:	4604      	mov	r4, r0
 8010240:	18b1      	adds	r1, r6, r2
 8010242:	4628      	mov	r0, r5
 8010244:	f004 fd72 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 8010248:	4020      	ands	r0, r4
 801024a:	b2c0      	uxtb	r0, r0
 801024c:	bd70      	pop	{r4, r5, r6, pc}
 801024e:	bf00      	nop

08010250 <uxr_serialize_ACKNACK_Payload>:
 8010250:	b570      	push	{r4, r5, r6, lr}
 8010252:	460c      	mov	r4, r1
 8010254:	460e      	mov	r6, r1
 8010256:	f834 1b02 	ldrh.w	r1, [r4], #2
 801025a:	4605      	mov	r5, r0
 801025c:	f7fa f9e2 	bl	800a624 <ucdr_serialize_uint16_t>
 8010260:	2202      	movs	r2, #2
 8010262:	4621      	mov	r1, r4
 8010264:	4604      	mov	r4, r0
 8010266:	4628      	mov	r0, r5
 8010268:	f004 fd60 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 801026c:	7931      	ldrb	r1, [r6, #4]
 801026e:	4004      	ands	r4, r0
 8010270:	4628      	mov	r0, r5
 8010272:	f7fa f9ab 	bl	800a5cc <ucdr_serialize_uint8_t>
 8010276:	b2e4      	uxtb	r4, r4
 8010278:	4020      	ands	r0, r4
 801027a:	bd70      	pop	{r4, r5, r6, pc}

0801027c <uxr_deserialize_ACKNACK_Payload>:
 801027c:	b570      	push	{r4, r5, r6, lr}
 801027e:	4605      	mov	r5, r0
 8010280:	460e      	mov	r6, r1
 8010282:	f7fa facf 	bl	800a824 <ucdr_deserialize_uint16_t>
 8010286:	2202      	movs	r2, #2
 8010288:	18b1      	adds	r1, r6, r2
 801028a:	4604      	mov	r4, r0
 801028c:	4628      	mov	r0, r5
 801028e:	f004 fdb1 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 8010292:	1d31      	adds	r1, r6, #4
 8010294:	4004      	ands	r4, r0
 8010296:	4628      	mov	r0, r5
 8010298:	f7fa f9ae 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 801029c:	b2e4      	uxtb	r4, r4
 801029e:	4020      	ands	r0, r4
 80102a0:	bd70      	pop	{r4, r5, r6, pc}
 80102a2:	bf00      	nop

080102a4 <uxr_serialize_HEARTBEAT_Payload>:
 80102a4:	b570      	push	{r4, r5, r6, lr}
 80102a6:	460d      	mov	r5, r1
 80102a8:	8809      	ldrh	r1, [r1, #0]
 80102aa:	4606      	mov	r6, r0
 80102ac:	f7fa f9ba 	bl	800a624 <ucdr_serialize_uint16_t>
 80102b0:	8869      	ldrh	r1, [r5, #2]
 80102b2:	4604      	mov	r4, r0
 80102b4:	4630      	mov	r0, r6
 80102b6:	f7fa f9b5 	bl	800a624 <ucdr_serialize_uint16_t>
 80102ba:	7929      	ldrb	r1, [r5, #4]
 80102bc:	4004      	ands	r4, r0
 80102be:	4630      	mov	r0, r6
 80102c0:	f7fa f984 	bl	800a5cc <ucdr_serialize_uint8_t>
 80102c4:	b2e4      	uxtb	r4, r4
 80102c6:	4020      	ands	r0, r4
 80102c8:	bd70      	pop	{r4, r5, r6, pc}
 80102ca:	bf00      	nop

080102cc <uxr_deserialize_HEARTBEAT_Payload>:
 80102cc:	b570      	push	{r4, r5, r6, lr}
 80102ce:	4605      	mov	r5, r0
 80102d0:	460e      	mov	r6, r1
 80102d2:	f7fa faa7 	bl	800a824 <ucdr_deserialize_uint16_t>
 80102d6:	1cb1      	adds	r1, r6, #2
 80102d8:	4604      	mov	r4, r0
 80102da:	4628      	mov	r0, r5
 80102dc:	f7fa faa2 	bl	800a824 <ucdr_deserialize_uint16_t>
 80102e0:	1d31      	adds	r1, r6, #4
 80102e2:	4004      	ands	r4, r0
 80102e4:	4628      	mov	r0, r5
 80102e6:	f7fa f987 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 80102ea:	b2e4      	uxtb	r4, r4
 80102ec:	4020      	ands	r0, r4
 80102ee:	bd70      	pop	{r4, r5, r6, pc}

080102f0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80102f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102f4:	4605      	mov	r5, r0
 80102f6:	460e      	mov	r6, r1
 80102f8:	f7fb f830 	bl	800b35c <ucdr_deserialize_int32_t>
 80102fc:	1d31      	adds	r1, r6, #4
 80102fe:	4607      	mov	r7, r0
 8010300:	4628      	mov	r0, r5
 8010302:	f7fa fca9 	bl	800ac58 <ucdr_deserialize_uint32_t>
 8010306:	f106 0108 	add.w	r1, r6, #8
 801030a:	4680      	mov	r8, r0
 801030c:	4628      	mov	r0, r5
 801030e:	f7fb f825 	bl	800b35c <ucdr_deserialize_int32_t>
 8010312:	f106 010c 	add.w	r1, r6, #12
 8010316:	4604      	mov	r4, r0
 8010318:	4628      	mov	r0, r5
 801031a:	f7fa fc9d 	bl	800ac58 <ucdr_deserialize_uint32_t>
 801031e:	ea07 0708 	and.w	r7, r7, r8
 8010322:	403c      	ands	r4, r7
 8010324:	f106 0110 	add.w	r1, r6, #16
 8010328:	4004      	ands	r4, r0
 801032a:	4628      	mov	r0, r5
 801032c:	f7fb f816 	bl	800b35c <ucdr_deserialize_int32_t>
 8010330:	f106 0114 	add.w	r1, r6, #20
 8010334:	4607      	mov	r7, r0
 8010336:	4628      	mov	r0, r5
 8010338:	f7fa fc8e 	bl	800ac58 <ucdr_deserialize_uint32_t>
 801033c:	b2e4      	uxtb	r4, r4
 801033e:	403c      	ands	r4, r7
 8010340:	4020      	ands	r0, r4
 8010342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010346:	bf00      	nop

08010348 <uxr_serialize_SampleIdentity>:
 8010348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801034c:	220c      	movs	r2, #12
 801034e:	4604      	mov	r4, r0
 8010350:	460d      	mov	r5, r1
 8010352:	f004 fceb 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 8010356:	2203      	movs	r2, #3
 8010358:	f105 010c 	add.w	r1, r5, #12
 801035c:	4607      	mov	r7, r0
 801035e:	4620      	mov	r0, r4
 8010360:	f004 fce4 	bl	8014d2c <ucdr_serialize_array_uint8_t>
 8010364:	7be9      	ldrb	r1, [r5, #15]
 8010366:	4680      	mov	r8, r0
 8010368:	4620      	mov	r0, r4
 801036a:	f7fa f92f 	bl	800a5cc <ucdr_serialize_uint8_t>
 801036e:	6929      	ldr	r1, [r5, #16]
 8010370:	4606      	mov	r6, r0
 8010372:	4620      	mov	r0, r4
 8010374:	f7fa ff5a 	bl	800b22c <ucdr_serialize_int32_t>
 8010378:	6969      	ldr	r1, [r5, #20]
 801037a:	4603      	mov	r3, r0
 801037c:	4620      	mov	r0, r4
 801037e:	ea07 0708 	and.w	r7, r7, r8
 8010382:	461c      	mov	r4, r3
 8010384:	f7fa fb38 	bl	800a9f8 <ucdr_serialize_uint32_t>
 8010388:	403e      	ands	r6, r7
 801038a:	4034      	ands	r4, r6
 801038c:	4020      	ands	r0, r4
 801038e:	b2c0      	uxtb	r0, r0
 8010390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010394 <uxr_deserialize_SampleIdentity>:
 8010394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010398:	220c      	movs	r2, #12
 801039a:	4604      	mov	r4, r0
 801039c:	460d      	mov	r5, r1
 801039e:	f004 fd29 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 80103a2:	2203      	movs	r2, #3
 80103a4:	f105 010c 	add.w	r1, r5, #12
 80103a8:	4607      	mov	r7, r0
 80103aa:	4620      	mov	r0, r4
 80103ac:	f004 fd22 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 80103b0:	f105 010f 	add.w	r1, r5, #15
 80103b4:	4680      	mov	r8, r0
 80103b6:	4620      	mov	r0, r4
 80103b8:	f7fa f91e 	bl	800a5f8 <ucdr_deserialize_uint8_t>
 80103bc:	f105 0110 	add.w	r1, r5, #16
 80103c0:	4606      	mov	r6, r0
 80103c2:	4620      	mov	r0, r4
 80103c4:	f7fa ffca 	bl	800b35c <ucdr_deserialize_int32_t>
 80103c8:	f105 0114 	add.w	r1, r5, #20
 80103cc:	4603      	mov	r3, r0
 80103ce:	4620      	mov	r0, r4
 80103d0:	ea07 0708 	and.w	r7, r7, r8
 80103d4:	461c      	mov	r4, r3
 80103d6:	f7fa fc3f 	bl	800ac58 <ucdr_deserialize_uint32_t>
 80103da:	403e      	ands	r6, r7
 80103dc:	4034      	ands	r4, r6
 80103de:	4020      	ands	r0, r4
 80103e0:	b2c0      	uxtb	r0, r0
 80103e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103e6:	bf00      	nop

080103e8 <rcl_client_get_rmw_handle>:
 80103e8:	b118      	cbz	r0, 80103f2 <rcl_client_get_rmw_handle+0xa>
 80103ea:	6800      	ldr	r0, [r0, #0]
 80103ec:	b108      	cbz	r0, 80103f2 <rcl_client_get_rmw_handle+0xa>
 80103ee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80103f2:	4770      	bx	lr

080103f4 <rcl_send_request>:
 80103f4:	b570      	push	{r4, r5, r6, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	b1e8      	cbz	r0, 8010436 <rcl_send_request+0x42>
 80103fa:	4604      	mov	r4, r0
 80103fc:	6800      	ldr	r0, [r0, #0]
 80103fe:	b1d0      	cbz	r0, 8010436 <rcl_send_request+0x42>
 8010400:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8010404:	b1bb      	cbz	r3, 8010436 <rcl_send_request+0x42>
 8010406:	460e      	mov	r6, r1
 8010408:	b1d1      	cbz	r1, 8010440 <rcl_send_request+0x4c>
 801040a:	4615      	mov	r5, r2
 801040c:	b1c2      	cbz	r2, 8010440 <rcl_send_request+0x4c>
 801040e:	2105      	movs	r1, #5
 8010410:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010414:	f002 fd74 	bl	8012f00 <__atomic_load_8>
 8010418:	6823      	ldr	r3, [r4, #0]
 801041a:	e9c5 0100 	strd	r0, r1, [r5]
 801041e:	462a      	mov	r2, r5
 8010420:	4631      	mov	r1, r6
 8010422:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010426:	f003 ff1f 	bl	8014268 <rmw_send_request>
 801042a:	4606      	mov	r6, r0
 801042c:	b160      	cbz	r0, 8010448 <rcl_send_request+0x54>
 801042e:	2601      	movs	r6, #1
 8010430:	4630      	mov	r0, r6
 8010432:	b002      	add	sp, #8
 8010434:	bd70      	pop	{r4, r5, r6, pc}
 8010436:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801043a:	4630      	mov	r0, r6
 801043c:	b002      	add	sp, #8
 801043e:	bd70      	pop	{r4, r5, r6, pc}
 8010440:	260b      	movs	r6, #11
 8010442:	4630      	mov	r0, r6
 8010444:	b002      	add	sp, #8
 8010446:	bd70      	pop	{r4, r5, r6, pc}
 8010448:	6820      	ldr	r0, [r4, #0]
 801044a:	2105      	movs	r1, #5
 801044c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010450:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010454:	9100      	str	r1, [sp, #0]
 8010456:	f002 fdbf 	bl	8012fd8 <__atomic_exchange_8>
 801045a:	4630      	mov	r0, r6
 801045c:	b002      	add	sp, #8
 801045e:	bd70      	pop	{r4, r5, r6, pc}

08010460 <rcl_take_response>:
 8010460:	b570      	push	{r4, r5, r6, lr}
 8010462:	468e      	mov	lr, r1
 8010464:	460c      	mov	r4, r1
 8010466:	4616      	mov	r6, r2
 8010468:	4605      	mov	r5, r0
 801046a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801046e:	b08c      	sub	sp, #48	@ 0x30
 8010470:	f10d 0c18 	add.w	ip, sp, #24
 8010474:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010478:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801047c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010480:	b35d      	cbz	r5, 80104da <rcl_take_response+0x7a>
 8010482:	682b      	ldr	r3, [r5, #0]
 8010484:	b34b      	cbz	r3, 80104da <rcl_take_response+0x7a>
 8010486:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801048a:	b330      	cbz	r0, 80104da <rcl_take_response+0x7a>
 801048c:	b346      	cbz	r6, 80104e0 <rcl_take_response+0x80>
 801048e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80104e8 <rcl_take_response+0x88>
 8010492:	2300      	movs	r3, #0
 8010494:	f88d 3007 	strb.w	r3, [sp, #7]
 8010498:	4632      	mov	r2, r6
 801049a:	f10d 0307 	add.w	r3, sp, #7
 801049e:	a902      	add	r1, sp, #8
 80104a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80104a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80104a8:	f003 ffe6 	bl	8014478 <rmw_take_response>
 80104ac:	4605      	mov	r5, r0
 80104ae:	b9c8      	cbnz	r0, 80104e4 <rcl_take_response+0x84>
 80104b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80104b4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80104b8:	2a00      	cmp	r2, #0
 80104ba:	bf08      	it	eq
 80104bc:	461d      	moveq	r5, r3
 80104be:	f10d 0e18 	add.w	lr, sp, #24
 80104c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80104c6:	46a4      	mov	ip, r4
 80104c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80104cc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80104d0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80104d4:	4628      	mov	r0, r5
 80104d6:	b00c      	add	sp, #48	@ 0x30
 80104d8:	bd70      	pop	{r4, r5, r6, pc}
 80104da:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80104de:	e7ee      	b.n	80104be <rcl_take_response+0x5e>
 80104e0:	250b      	movs	r5, #11
 80104e2:	e7ec      	b.n	80104be <rcl_take_response+0x5e>
 80104e4:	2501      	movs	r5, #1
 80104e6:	e7ea      	b.n	80104be <rcl_take_response+0x5e>
	...

080104f0 <rcl_client_is_valid>:
 80104f0:	b130      	cbz	r0, 8010500 <rcl_client_is_valid+0x10>
 80104f2:	6800      	ldr	r0, [r0, #0]
 80104f4:	b120      	cbz	r0, 8010500 <rcl_client_is_valid+0x10>
 80104f6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80104fa:	3800      	subs	r0, #0
 80104fc:	bf18      	it	ne
 80104fe:	2001      	movne	r0, #1
 8010500:	4770      	bx	lr
 8010502:	bf00      	nop

08010504 <rcl_convert_rmw_ret_to_rcl_ret>:
 8010504:	280b      	cmp	r0, #11
 8010506:	dc0d      	bgt.n	8010524 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010508:	2800      	cmp	r0, #0
 801050a:	db09      	blt.n	8010520 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801050c:	280b      	cmp	r0, #11
 801050e:	d807      	bhi.n	8010520 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010510:	e8df f000 	tbb	[pc, r0]
 8010514:	07060607 	.word	0x07060607
 8010518:	06060606 	.word	0x06060606
 801051c:	07070606 	.word	0x07070606
 8010520:	2001      	movs	r0, #1
 8010522:	4770      	bx	lr
 8010524:	28cb      	cmp	r0, #203	@ 0xcb
 8010526:	bf18      	it	ne
 8010528:	2001      	movne	r0, #1
 801052a:	4770      	bx	lr

0801052c <rcl_get_zero_initialized_context>:
 801052c:	4a03      	ldr	r2, [pc, #12]	@ (801053c <rcl_get_zero_initialized_context+0x10>)
 801052e:	4603      	mov	r3, r0
 8010530:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010534:	e883 0003 	stmia.w	r3, {r0, r1}
 8010538:	4618      	mov	r0, r3
 801053a:	4770      	bx	lr
 801053c:	08018d5c 	.word	0x08018d5c

08010540 <rcl_context_is_valid>:
 8010540:	b118      	cbz	r0, 801054a <rcl_context_is_valid+0xa>
 8010542:	6840      	ldr	r0, [r0, #4]
 8010544:	3800      	subs	r0, #0
 8010546:	bf18      	it	ne
 8010548:	2001      	movne	r0, #1
 801054a:	4770      	bx	lr

0801054c <__cleanup_context>:
 801054c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010550:	4606      	mov	r6, r0
 8010552:	6800      	ldr	r0, [r0, #0]
 8010554:	2300      	movs	r3, #0
 8010556:	6073      	str	r3, [r6, #4]
 8010558:	2800      	cmp	r0, #0
 801055a:	d049      	beq.n	80105f0 <__cleanup_context+0xa4>
 801055c:	6947      	ldr	r7, [r0, #20]
 801055e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8010562:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8010566:	b137      	cbz	r7, 8010576 <__cleanup_context+0x2a>
 8010568:	3014      	adds	r0, #20
 801056a:	f000 f9bb 	bl	80108e4 <rcl_init_options_fini>
 801056e:	4607      	mov	r7, r0
 8010570:	2800      	cmp	r0, #0
 8010572:	d144      	bne.n	80105fe <__cleanup_context+0xb2>
 8010574:	6830      	ldr	r0, [r6, #0]
 8010576:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010578:	b143      	cbz	r3, 801058c <__cleanup_context+0x40>
 801057a:	3028      	adds	r0, #40	@ 0x28
 801057c:	f003 fcbc 	bl	8013ef8 <rmw_context_fini>
 8010580:	b118      	cbz	r0, 801058a <__cleanup_context+0x3e>
 8010582:	2f00      	cmp	r7, #0
 8010584:	d03e      	beq.n	8010604 <__cleanup_context+0xb8>
 8010586:	f7fc fa53 	bl	800ca30 <rcutils_reset_error>
 801058a:	6830      	ldr	r0, [r6, #0]
 801058c:	6a03      	ldr	r3, [r0, #32]
 801058e:	b1db      	cbz	r3, 80105c8 <__cleanup_context+0x7c>
 8010590:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8010594:	2a01      	cmp	r2, #1
 8010596:	f17c 0100 	sbcs.w	r1, ip, #0
 801059a:	db11      	blt.n	80105c0 <__cleanup_context+0x74>
 801059c:	2400      	movs	r4, #0
 801059e:	4625      	mov	r5, r4
 80105a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80105a4:	4649      	mov	r1, r9
 80105a6:	b1b8      	cbz	r0, 80105d8 <__cleanup_context+0x8c>
 80105a8:	47c0      	blx	r8
 80105aa:	6833      	ldr	r3, [r6, #0]
 80105ac:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80105b0:	3401      	adds	r4, #1
 80105b2:	f145 0500 	adc.w	r5, r5, #0
 80105b6:	4294      	cmp	r4, r2
 80105b8:	eb75 010c 	sbcs.w	r1, r5, ip
 80105bc:	6a1b      	ldr	r3, [r3, #32]
 80105be:	dbef      	blt.n	80105a0 <__cleanup_context+0x54>
 80105c0:	4618      	mov	r0, r3
 80105c2:	4649      	mov	r1, r9
 80105c4:	47c0      	blx	r8
 80105c6:	6830      	ldr	r0, [r6, #0]
 80105c8:	4649      	mov	r1, r9
 80105ca:	47c0      	blx	r8
 80105cc:	2300      	movs	r3, #0
 80105ce:	e9c6 3300 	strd	r3, r3, [r6]
 80105d2:	4638      	mov	r0, r7
 80105d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105d8:	3401      	adds	r4, #1
 80105da:	f145 0500 	adc.w	r5, r5, #0
 80105de:	4294      	cmp	r4, r2
 80105e0:	eb75 010c 	sbcs.w	r1, r5, ip
 80105e4:	dbdc      	blt.n	80105a0 <__cleanup_context+0x54>
 80105e6:	4618      	mov	r0, r3
 80105e8:	4649      	mov	r1, r9
 80105ea:	47c0      	blx	r8
 80105ec:	6830      	ldr	r0, [r6, #0]
 80105ee:	e7eb      	b.n	80105c8 <__cleanup_context+0x7c>
 80105f0:	4607      	mov	r7, r0
 80105f2:	2300      	movs	r3, #0
 80105f4:	e9c6 3300 	strd	r3, r3, [r6]
 80105f8:	4638      	mov	r0, r7
 80105fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105fe:	f7fc fa17 	bl	800ca30 <rcutils_reset_error>
 8010602:	e7b7      	b.n	8010574 <__cleanup_context+0x28>
 8010604:	f7ff ff7e 	bl	8010504 <rcl_convert_rmw_ret_to_rcl_ret>
 8010608:	4607      	mov	r7, r0
 801060a:	e7bc      	b.n	8010586 <__cleanup_context+0x3a>

0801060c <rcl_init>:
 801060c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010610:	1e05      	subs	r5, r0, #0
 8010612:	b09e      	sub	sp, #120	@ 0x78
 8010614:	460e      	mov	r6, r1
 8010616:	4690      	mov	r8, r2
 8010618:	461f      	mov	r7, r3
 801061a:	f340 809c 	ble.w	8010756 <rcl_init+0x14a>
 801061e:	2900      	cmp	r1, #0
 8010620:	f000 809c 	beq.w	801075c <rcl_init+0x150>
 8010624:	f1a1 0e04 	sub.w	lr, r1, #4
 8010628:	f04f 0c00 	mov.w	ip, #0
 801062c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8010630:	f10c 0c01 	add.w	ip, ip, #1
 8010634:	2c00      	cmp	r4, #0
 8010636:	f000 8091 	beq.w	801075c <rcl_init+0x150>
 801063a:	4565      	cmp	r5, ip
 801063c:	d1f6      	bne.n	801062c <rcl_init+0x20>
 801063e:	f1b8 0f00 	cmp.w	r8, #0
 8010642:	f000 808b 	beq.w	801075c <rcl_init+0x150>
 8010646:	f8d8 4000 	ldr.w	r4, [r8]
 801064a:	2c00      	cmp	r4, #0
 801064c:	f000 8086 	beq.w	801075c <rcl_init+0x150>
 8010650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010652:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8010656:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801065a:	6823      	ldr	r3, [r4, #0]
 801065c:	f8cc 3000 	str.w	r3, [ip]
 8010660:	a819      	add	r0, sp, #100	@ 0x64
 8010662:	f7fc f9c1 	bl	800c9e8 <rcutils_allocator_is_valid>
 8010666:	2800      	cmp	r0, #0
 8010668:	d078      	beq.n	801075c <rcl_init+0x150>
 801066a:	2f00      	cmp	r7, #0
 801066c:	d076      	beq.n	801075c <rcl_init+0x150>
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d178      	bne.n	8010766 <rcl_init+0x15a>
 8010674:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8010678:	2178      	movs	r1, #120	@ 0x78
 801067a:	2001      	movs	r0, #1
 801067c:	4798      	blx	r3
 801067e:	4604      	mov	r4, r0
 8010680:	6038      	str	r0, [r7, #0]
 8010682:	2800      	cmp	r0, #0
 8010684:	f000 80b6 	beq.w	80107f4 <rcl_init+0x1e8>
 8010688:	a802      	add	r0, sp, #8
 801068a:	f002 ff89 	bl	80135a0 <rmw_get_zero_initialized_context>
 801068e:	a902      	add	r1, sp, #8
 8010690:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010694:	2250      	movs	r2, #80	@ 0x50
 8010696:	ac19      	add	r4, sp, #100	@ 0x64
 8010698:	f007 f973 	bl	8017982 <memcpy>
 801069c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801069e:	f8d7 e000 	ldr.w	lr, [r7]
 80106a2:	46f4      	mov	ip, lr
 80106a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80106a8:	6823      	ldr	r3, [r4, #0]
 80106aa:	f8cc 3000 	str.w	r3, [ip]
 80106ae:	f10e 0114 	add.w	r1, lr, #20
 80106b2:	4640      	mov	r0, r8
 80106b4:	f000 f940 	bl	8010938 <rcl_init_options_copy>
 80106b8:	4604      	mov	r4, r0
 80106ba:	2800      	cmp	r0, #0
 80106bc:	d144      	bne.n	8010748 <rcl_init+0x13c>
 80106be:	f8d7 9000 	ldr.w	r9, [r7]
 80106c2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80106c6:	f8c9 0020 	str.w	r0, [r9, #32]
 80106ca:	f8c9 5018 	str.w	r5, [r9, #24]
 80106ce:	f8c9 801c 	str.w	r8, [r9, #28]
 80106d2:	2d00      	cmp	r5, #0
 80106d4:	d04e      	beq.n	8010774 <rcl_init+0x168>
 80106d6:	2e00      	cmp	r6, #0
 80106d8:	d04c      	beq.n	8010774 <rcl_init+0x168>
 80106da:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80106de:	2104      	movs	r1, #4
 80106e0:	4628      	mov	r0, r5
 80106e2:	4798      	blx	r3
 80106e4:	f8c9 0020 	str.w	r0, [r9, #32]
 80106e8:	f8d7 9000 	ldr.w	r9, [r7]
 80106ec:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80106f0:	46ca      	mov	sl, r9
 80106f2:	b343      	cbz	r3, 8010746 <rcl_init+0x13a>
 80106f4:	2d01      	cmp	r5, #1
 80106f6:	f178 0300 	sbcs.w	r3, r8, #0
 80106fa:	db3b      	blt.n	8010774 <rcl_init+0x168>
 80106fc:	2400      	movs	r4, #0
 80106fe:	3e04      	subs	r6, #4
 8010700:	46a1      	mov	r9, r4
 8010702:	e00b      	b.n	801071c <rcl_init+0x110>
 8010704:	6831      	ldr	r1, [r6, #0]
 8010706:	f007 f93c 	bl	8017982 <memcpy>
 801070a:	3401      	adds	r4, #1
 801070c:	f149 0900 	adc.w	r9, r9, #0
 8010710:	45c8      	cmp	r8, r9
 8010712:	bf08      	it	eq
 8010714:	42a5      	cmpeq	r5, r4
 8010716:	d02b      	beq.n	8010770 <rcl_init+0x164>
 8010718:	f8d7 a000 	ldr.w	sl, [r7]
 801071c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8010720:	f7ef fd68 	bl	80001f4 <strlen>
 8010724:	1c42      	adds	r2, r0, #1
 8010726:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010728:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801072a:	f8da a020 	ldr.w	sl, [sl, #32]
 801072e:	9201      	str	r2, [sp, #4]
 8010730:	4610      	mov	r0, r2
 8010732:	4798      	blx	r3
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801073a:	6a1b      	ldr	r3, [r3, #32]
 801073c:	9a01      	ldr	r2, [sp, #4]
 801073e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010742:	2800      	cmp	r0, #0
 8010744:	d1de      	bne.n	8010704 <rcl_init+0xf8>
 8010746:	240a      	movs	r4, #10
 8010748:	4638      	mov	r0, r7
 801074a:	f7ff feff 	bl	801054c <__cleanup_context>
 801074e:	4620      	mov	r0, r4
 8010750:	b01e      	add	sp, #120	@ 0x78
 8010752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010756:	2900      	cmp	r1, #0
 8010758:	f43f af71 	beq.w	801063e <rcl_init+0x32>
 801075c:	240b      	movs	r4, #11
 801075e:	4620      	mov	r0, r4
 8010760:	b01e      	add	sp, #120	@ 0x78
 8010762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010766:	2464      	movs	r4, #100	@ 0x64
 8010768:	4620      	mov	r0, r4
 801076a:	b01e      	add	sp, #120	@ 0x78
 801076c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010770:	f8d7 9000 	ldr.w	r9, [r7]
 8010774:	4926      	ldr	r1, [pc, #152]	@ (8010810 <rcl_init+0x204>)
 8010776:	680b      	ldr	r3, [r1, #0]
 8010778:	3301      	adds	r3, #1
 801077a:	d036      	beq.n	80107ea <rcl_init+0x1de>
 801077c:	600b      	str	r3, [r1, #0]
 801077e:	461a      	mov	r2, r3
 8010780:	2400      	movs	r4, #0
 8010782:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8010786:	607b      	str	r3, [r7, #4]
 8010788:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801078a:	3301      	adds	r3, #1
 801078c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8010790:	d034      	beq.n	80107fc <rcl_init+0x1f0>
 8010792:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8010796:	b93b      	cbnz	r3, 80107a8 <rcl_init+0x19c>
 8010798:	3030      	adds	r0, #48	@ 0x30
 801079a:	f000 f939 	bl	8010a10 <rcl_get_localhost_only>
 801079e:	4604      	mov	r4, r0
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d1d1      	bne.n	8010748 <rcl_init+0x13c>
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	6958      	ldr	r0, [r3, #20]
 80107a8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80107aa:	aa18      	add	r2, sp, #96	@ 0x60
 80107ac:	a917      	add	r1, sp, #92	@ 0x5c
 80107ae:	f001 f841 	bl	8011834 <rcl_validate_enclave_name>
 80107b2:	4604      	mov	r4, r0
 80107b4:	2800      	cmp	r0, #0
 80107b6:	d1c7      	bne.n	8010748 <rcl_init+0x13c>
 80107b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80107ba:	b9eb      	cbnz	r3, 80107f8 <rcl_init+0x1ec>
 80107bc:	6839      	ldr	r1, [r7, #0]
 80107be:	694b      	ldr	r3, [r1, #20]
 80107c0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80107c2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80107c6:	f000 fc3d 	bl	8011044 <rcl_get_security_options_from_environment>
 80107ca:	4604      	mov	r4, r0
 80107cc:	2800      	cmp	r0, #0
 80107ce:	d1bb      	bne.n	8010748 <rcl_init+0x13c>
 80107d0:	6839      	ldr	r1, [r7, #0]
 80107d2:	6948      	ldr	r0, [r1, #20]
 80107d4:	3128      	adds	r1, #40	@ 0x28
 80107d6:	3018      	adds	r0, #24
 80107d8:	f003 fa58 	bl	8013c8c <rmw_init>
 80107dc:	4604      	mov	r4, r0
 80107de:	2800      	cmp	r0, #0
 80107e0:	d0bd      	beq.n	801075e <rcl_init+0x152>
 80107e2:	f7ff fe8f 	bl	8010504 <rcl_convert_rmw_ret_to_rcl_ret>
 80107e6:	4604      	mov	r4, r0
 80107e8:	e7ae      	b.n	8010748 <rcl_init+0x13c>
 80107ea:	2201      	movs	r2, #1
 80107ec:	461c      	mov	r4, r3
 80107ee:	600a      	str	r2, [r1, #0]
 80107f0:	4613      	mov	r3, r2
 80107f2:	e7c6      	b.n	8010782 <rcl_init+0x176>
 80107f4:	240a      	movs	r4, #10
 80107f6:	e7b2      	b.n	801075e <rcl_init+0x152>
 80107f8:	2401      	movs	r4, #1
 80107fa:	e7a5      	b.n	8010748 <rcl_init+0x13c>
 80107fc:	3024      	adds	r0, #36	@ 0x24
 80107fe:	f005 ffb9 	bl	8016774 <rcl_get_default_domain_id>
 8010802:	4604      	mov	r4, r0
 8010804:	2800      	cmp	r0, #0
 8010806:	d19f      	bne.n	8010748 <rcl_init+0x13c>
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	6958      	ldr	r0, [r3, #20]
 801080c:	e7c1      	b.n	8010792 <rcl_init+0x186>
 801080e:	bf00      	nop
 8010810:	2000dd64 	.word	0x2000dd64

08010814 <rcl_get_zero_initialized_init_options>:
 8010814:	2000      	movs	r0, #0
 8010816:	4770      	bx	lr

08010818 <rcl_init_options_init>:
 8010818:	b084      	sub	sp, #16
 801081a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801081c:	b097      	sub	sp, #92	@ 0x5c
 801081e:	ae1d      	add	r6, sp, #116	@ 0x74
 8010820:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8010824:	2800      	cmp	r0, #0
 8010826:	d058      	beq.n	80108da <rcl_init_options_init+0xc2>
 8010828:	6803      	ldr	r3, [r0, #0]
 801082a:	4605      	mov	r5, r0
 801082c:	b133      	cbz	r3, 801083c <rcl_init_options_init+0x24>
 801082e:	2464      	movs	r4, #100	@ 0x64
 8010830:	4620      	mov	r0, r4
 8010832:	b017      	add	sp, #92	@ 0x5c
 8010834:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010838:	b004      	add	sp, #16
 801083a:	4770      	bx	lr
 801083c:	4630      	mov	r0, r6
 801083e:	f7fc f8d3 	bl	800c9e8 <rcutils_allocator_is_valid>
 8010842:	2800      	cmp	r0, #0
 8010844:	d049      	beq.n	80108da <rcl_init_options_init+0xc2>
 8010846:	46b4      	mov	ip, r6
 8010848:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801084c:	ac11      	add	r4, sp, #68	@ 0x44
 801084e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010850:	f8dc 3000 	ldr.w	r3, [ip]
 8010854:	6023      	str	r3, [r4, #0]
 8010856:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8010858:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801085a:	2050      	movs	r0, #80	@ 0x50
 801085c:	4798      	blx	r3
 801085e:	4604      	mov	r4, r0
 8010860:	6028      	str	r0, [r5, #0]
 8010862:	2800      	cmp	r0, #0
 8010864:	d03b      	beq.n	80108de <rcl_init_options_init+0xc6>
 8010866:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801086a:	4686      	mov	lr, r0
 801086c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010870:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010874:	f8dc 3000 	ldr.w	r3, [ip]
 8010878:	f8ce 3000 	str.w	r3, [lr]
 801087c:	a802      	add	r0, sp, #8
 801087e:	f002 fe9f 	bl	80135c0 <rmw_get_zero_initialized_init_options>
 8010882:	f10d 0e08 	add.w	lr, sp, #8
 8010886:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801088a:	f104 0c18 	add.w	ip, r4, #24
 801088e:	682f      	ldr	r7, [r5, #0]
 8010890:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010894:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010898:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801089c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80108a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80108a4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80108a8:	ac20      	add	r4, sp, #128	@ 0x80
 80108aa:	e88c 0003 	stmia.w	ip, {r0, r1}
 80108ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80108b2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80108b6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80108ba:	f107 0018 	add.w	r0, r7, #24
 80108be:	f003 f8ed 	bl	8013a9c <rmw_init_options_init>
 80108c2:	4604      	mov	r4, r0
 80108c4:	2800      	cmp	r0, #0
 80108c6:	d0b3      	beq.n	8010830 <rcl_init_options_init+0x18>
 80108c8:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80108ca:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80108cc:	6828      	ldr	r0, [r5, #0]
 80108ce:	4798      	blx	r3
 80108d0:	4620      	mov	r0, r4
 80108d2:	f7ff fe17 	bl	8010504 <rcl_convert_rmw_ret_to_rcl_ret>
 80108d6:	4604      	mov	r4, r0
 80108d8:	e7aa      	b.n	8010830 <rcl_init_options_init+0x18>
 80108da:	240b      	movs	r4, #11
 80108dc:	e7a8      	b.n	8010830 <rcl_init_options_init+0x18>
 80108de:	240a      	movs	r4, #10
 80108e0:	e7a6      	b.n	8010830 <rcl_init_options_init+0x18>
 80108e2:	bf00      	nop

080108e4 <rcl_init_options_fini>:
 80108e4:	b530      	push	{r4, r5, lr}
 80108e6:	b087      	sub	sp, #28
 80108e8:	b1f0      	cbz	r0, 8010928 <rcl_init_options_fini+0x44>
 80108ea:	6803      	ldr	r3, [r0, #0]
 80108ec:	4604      	mov	r4, r0
 80108ee:	b1db      	cbz	r3, 8010928 <rcl_init_options_fini+0x44>
 80108f0:	469c      	mov	ip, r3
 80108f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80108f6:	f10d 0e04 	add.w	lr, sp, #4
 80108fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80108fe:	f8dc 3000 	ldr.w	r3, [ip]
 8010902:	f8ce 3000 	str.w	r3, [lr]
 8010906:	a801      	add	r0, sp, #4
 8010908:	f7fc f86e 	bl	800c9e8 <rcutils_allocator_is_valid>
 801090c:	b160      	cbz	r0, 8010928 <rcl_init_options_fini+0x44>
 801090e:	6820      	ldr	r0, [r4, #0]
 8010910:	3018      	adds	r0, #24
 8010912:	f003 f973 	bl	8013bfc <rmw_init_options_fini>
 8010916:	4605      	mov	r5, r0
 8010918:	b950      	cbnz	r0, 8010930 <rcl_init_options_fini+0x4c>
 801091a:	6820      	ldr	r0, [r4, #0]
 801091c:	9b02      	ldr	r3, [sp, #8]
 801091e:	9905      	ldr	r1, [sp, #20]
 8010920:	4798      	blx	r3
 8010922:	4628      	mov	r0, r5
 8010924:	b007      	add	sp, #28
 8010926:	bd30      	pop	{r4, r5, pc}
 8010928:	250b      	movs	r5, #11
 801092a:	4628      	mov	r0, r5
 801092c:	b007      	add	sp, #28
 801092e:	bd30      	pop	{r4, r5, pc}
 8010930:	f7ff fde8 	bl	8010504 <rcl_convert_rmw_ret_to_rcl_ret>
 8010934:	4605      	mov	r5, r0
 8010936:	e7f8      	b.n	801092a <rcl_init_options_fini+0x46>

08010938 <rcl_init_options_copy>:
 8010938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801093c:	b094      	sub	sp, #80	@ 0x50
 801093e:	2800      	cmp	r0, #0
 8010940:	d058      	beq.n	80109f4 <rcl_init_options_copy+0xbc>
 8010942:	4604      	mov	r4, r0
 8010944:	6800      	ldr	r0, [r0, #0]
 8010946:	2800      	cmp	r0, #0
 8010948:	d054      	beq.n	80109f4 <rcl_init_options_copy+0xbc>
 801094a:	460e      	mov	r6, r1
 801094c:	f7fc f84c 	bl	800c9e8 <rcutils_allocator_is_valid>
 8010950:	2800      	cmp	r0, #0
 8010952:	d04f      	beq.n	80109f4 <rcl_init_options_copy+0xbc>
 8010954:	2e00      	cmp	r6, #0
 8010956:	d04d      	beq.n	80109f4 <rcl_init_options_copy+0xbc>
 8010958:	6833      	ldr	r3, [r6, #0]
 801095a:	b123      	cbz	r3, 8010966 <rcl_init_options_copy+0x2e>
 801095c:	2464      	movs	r4, #100	@ 0x64
 801095e:	4620      	mov	r0, r4
 8010960:	b014      	add	sp, #80	@ 0x50
 8010962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010966:	6827      	ldr	r7, [r4, #0]
 8010968:	46bc      	mov	ip, r7
 801096a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801096e:	ad0f      	add	r5, sp, #60	@ 0x3c
 8010970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010972:	f8dc 3000 	ldr.w	r3, [ip]
 8010976:	f8d7 8000 	ldr.w	r8, [r7]
 801097a:	602b      	str	r3, [r5, #0]
 801097c:	4619      	mov	r1, r3
 801097e:	2050      	movs	r0, #80	@ 0x50
 8010980:	47c0      	blx	r8
 8010982:	4605      	mov	r5, r0
 8010984:	6030      	str	r0, [r6, #0]
 8010986:	b3d0      	cbz	r0, 80109fe <rcl_init_options_copy+0xc6>
 8010988:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801098c:	4686      	mov	lr, r0
 801098e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010992:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010996:	f8dc 3000 	ldr.w	r3, [ip]
 801099a:	f8ce 3000 	str.w	r3, [lr]
 801099e:	4668      	mov	r0, sp
 80109a0:	f002 fe0e 	bl	80135c0 <rmw_get_zero_initialized_init_options>
 80109a4:	46ee      	mov	lr, sp
 80109a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80109aa:	f105 0c18 	add.w	ip, r5, #24
 80109ae:	6824      	ldr	r4, [r4, #0]
 80109b0:	6835      	ldr	r5, [r6, #0]
 80109b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80109b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80109ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80109be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80109c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80109c6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80109ca:	e88c 0003 	stmia.w	ip, {r0, r1}
 80109ce:	f104 0018 	add.w	r0, r4, #24
 80109d2:	f105 0118 	add.w	r1, r5, #24
 80109d6:	f003 f8c9 	bl	8013b6c <rmw_init_options_copy>
 80109da:	4604      	mov	r4, r0
 80109dc:	2800      	cmp	r0, #0
 80109de:	d0be      	beq.n	801095e <rcl_init_options_copy+0x26>
 80109e0:	f7fc f810 	bl	800ca04 <rcutils_get_error_string>
 80109e4:	f7fc f824 	bl	800ca30 <rcutils_reset_error>
 80109e8:	4630      	mov	r0, r6
 80109ea:	f7ff ff7b 	bl	80108e4 <rcl_init_options_fini>
 80109ee:	b140      	cbz	r0, 8010a02 <rcl_init_options_copy+0xca>
 80109f0:	4604      	mov	r4, r0
 80109f2:	e7b4      	b.n	801095e <rcl_init_options_copy+0x26>
 80109f4:	240b      	movs	r4, #11
 80109f6:	4620      	mov	r0, r4
 80109f8:	b014      	add	sp, #80	@ 0x50
 80109fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109fe:	240a      	movs	r4, #10
 8010a00:	e7ad      	b.n	801095e <rcl_init_options_copy+0x26>
 8010a02:	4620      	mov	r0, r4
 8010a04:	b014      	add	sp, #80	@ 0x50
 8010a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a0a:	f7ff bd7b 	b.w	8010504 <rcl_convert_rmw_ret_to_rcl_ret>
 8010a0e:	bf00      	nop

08010a10 <rcl_get_localhost_only>:
 8010a10:	b510      	push	{r4, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	2300      	movs	r3, #0
 8010a16:	9301      	str	r3, [sp, #4]
 8010a18:	b1b8      	cbz	r0, 8010a4a <rcl_get_localhost_only+0x3a>
 8010a1a:	4604      	mov	r4, r0
 8010a1c:	a901      	add	r1, sp, #4
 8010a1e:	480c      	ldr	r0, [pc, #48]	@ (8010a50 <rcl_get_localhost_only+0x40>)
 8010a20:	f002 fb12 	bl	8013048 <rcutils_get_env>
 8010a24:	b110      	cbz	r0, 8010a2c <rcl_get_localhost_only+0x1c>
 8010a26:	2001      	movs	r0, #1
 8010a28:	b002      	add	sp, #8
 8010a2a:	bd10      	pop	{r4, pc}
 8010a2c:	9b01      	ldr	r3, [sp, #4]
 8010a2e:	b113      	cbz	r3, 8010a36 <rcl_get_localhost_only+0x26>
 8010a30:	781a      	ldrb	r2, [r3, #0]
 8010a32:	2a31      	cmp	r2, #49	@ 0x31
 8010a34:	d004      	beq.n	8010a40 <rcl_get_localhost_only+0x30>
 8010a36:	2302      	movs	r3, #2
 8010a38:	2000      	movs	r0, #0
 8010a3a:	7023      	strb	r3, [r4, #0]
 8010a3c:	b002      	add	sp, #8
 8010a3e:	bd10      	pop	{r4, pc}
 8010a40:	785b      	ldrb	r3, [r3, #1]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d1f7      	bne.n	8010a36 <rcl_get_localhost_only+0x26>
 8010a46:	2301      	movs	r3, #1
 8010a48:	e7f6      	b.n	8010a38 <rcl_get_localhost_only+0x28>
 8010a4a:	200b      	movs	r0, #11
 8010a4c:	b002      	add	sp, #8
 8010a4e:	bd10      	pop	{r4, pc}
 8010a50:	08018d64 	.word	0x08018d64

08010a54 <rcl_get_zero_initialized_node>:
 8010a54:	4a03      	ldr	r2, [pc, #12]	@ (8010a64 <rcl_get_zero_initialized_node+0x10>)
 8010a56:	4603      	mov	r3, r0
 8010a58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010a60:	4618      	mov	r0, r3
 8010a62:	4770      	bx	lr
 8010a64:	08018d8c 	.word	0x08018d8c

08010a68 <rcl_node_init>:
 8010a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a6c:	b0a9      	sub	sp, #164	@ 0xa4
 8010a6e:	4604      	mov	r4, r0
 8010a70:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8010a74:	a823      	add	r0, sp, #140	@ 0x8c
 8010a76:	460e      	mov	r6, r1
 8010a78:	4615      	mov	r5, r2
 8010a7a:	461f      	mov	r7, r3
 8010a7c:	f006 f8a2 	bl	8016bc4 <rcl_guard_condition_get_default_options>
 8010a80:	f1b8 0f00 	cmp.w	r8, #0
 8010a84:	f000 80e6 	beq.w	8010c54 <rcl_node_init+0x1ec>
 8010a88:	4640      	mov	r0, r8
 8010a8a:	f7fb ffad 	bl	800c9e8 <rcutils_allocator_is_valid>
 8010a8e:	2800      	cmp	r0, #0
 8010a90:	f000 80e0 	beq.w	8010c54 <rcl_node_init+0x1ec>
 8010a94:	2e00      	cmp	r6, #0
 8010a96:	f000 80dd 	beq.w	8010c54 <rcl_node_init+0x1ec>
 8010a9a:	2d00      	cmp	r5, #0
 8010a9c:	f000 80da 	beq.w	8010c54 <rcl_node_init+0x1ec>
 8010aa0:	2c00      	cmp	r4, #0
 8010aa2:	f000 80d7 	beq.w	8010c54 <rcl_node_init+0x1ec>
 8010aa6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010aaa:	f1b9 0f00 	cmp.w	r9, #0
 8010aae:	f040 80fd 	bne.w	8010cac <rcl_node_init+0x244>
 8010ab2:	2f00      	cmp	r7, #0
 8010ab4:	f000 80ce 	beq.w	8010c54 <rcl_node_init+0x1ec>
 8010ab8:	4638      	mov	r0, r7
 8010aba:	f7ff fd41 	bl	8010540 <rcl_context_is_valid>
 8010abe:	4682      	mov	sl, r0
 8010ac0:	2800      	cmp	r0, #0
 8010ac2:	f000 80cd 	beq.w	8010c60 <rcl_node_init+0x1f8>
 8010ac6:	464a      	mov	r2, r9
 8010ac8:	a922      	add	r1, sp, #136	@ 0x88
 8010aca:	4630      	mov	r0, r6
 8010acc:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8010ad0:	f002 ff18 	bl	8013904 <rmw_validate_node_name>
 8010ad4:	4681      	mov	r9, r0
 8010ad6:	2800      	cmp	r0, #0
 8010ad8:	f040 80be 	bne.w	8010c58 <rcl_node_init+0x1f0>
 8010adc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8010ade:	2800      	cmp	r0, #0
 8010ae0:	f040 80f0 	bne.w	8010cc4 <rcl_node_init+0x25c>
 8010ae4:	4628      	mov	r0, r5
 8010ae6:	f7ef fb85 	bl	80001f4 <strlen>
 8010aea:	2800      	cmp	r0, #0
 8010aec:	f040 80bb 	bne.w	8010c66 <rcl_node_init+0x1fe>
 8010af0:	4d7c      	ldr	r5, [pc, #496]	@ (8010ce4 <rcl_node_init+0x27c>)
 8010af2:	a922      	add	r1, sp, #136	@ 0x88
 8010af4:	2200      	movs	r2, #0
 8010af6:	4628      	mov	r0, r5
 8010af8:	f002 fee6 	bl	80138c8 <rmw_validate_namespace>
 8010afc:	4681      	mov	r9, r0
 8010afe:	2800      	cmp	r0, #0
 8010b00:	f040 80aa 	bne.w	8010c58 <rcl_node_init+0x1f0>
 8010b04:	4682      	mov	sl, r0
 8010b06:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8010b08:	2800      	cmp	r0, #0
 8010b0a:	f040 80e0 	bne.w	8010cce <rcl_node_init+0x266>
 8010b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8010b12:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010b16:	2078      	movs	r0, #120	@ 0x78
 8010b18:	4798      	blx	r3
 8010b1a:	4681      	mov	r9, r0
 8010b1c:	6060      	str	r0, [r4, #4]
 8010b1e:	2800      	cmp	r0, #0
 8010b20:	f000 80ca 	beq.w	8010cb8 <rcl_node_init+0x250>
 8010b24:	2200      	movs	r2, #0
 8010b26:	2300      	movs	r3, #0
 8010b28:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8010b2c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8010b30:	a808      	add	r0, sp, #32
 8010b32:	f000 f907 	bl	8010d44 <rcl_node_get_default_options>
 8010b36:	a908      	add	r1, sp, #32
 8010b38:	4648      	mov	r0, r9
 8010b3a:	2268      	movs	r2, #104	@ 0x68
 8010b3c:	f006 ff21 	bl	8017982 <memcpy>
 8010b40:	6861      	ldr	r1, [r4, #4]
 8010b42:	6027      	str	r7, [r4, #0]
 8010b44:	4640      	mov	r0, r8
 8010b46:	f000 f90b 	bl	8010d60 <rcl_node_options_copy>
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	d158      	bne.n	8010c00 <rcl_node_init+0x198>
 8010b4e:	4628      	mov	r0, r5
 8010b50:	f7ef fb50 	bl	80001f4 <strlen>
 8010b54:	4428      	add	r0, r5
 8010b56:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8010b5a:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8010b5e:	2b2f      	cmp	r3, #47	@ 0x2f
 8010b60:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010b64:	9300      	str	r3, [sp, #0]
 8010b66:	bf0c      	ite	eq
 8010b68:	4b5f      	ldreq	r3, [pc, #380]	@ (8010ce8 <rcl_node_init+0x280>)
 8010b6a:	4b60      	ldrne	r3, [pc, #384]	@ (8010cec <rcl_node_init+0x284>)
 8010b6c:	9302      	str	r3, [sp, #8]
 8010b6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010b72:	9301      	str	r3, [sp, #4]
 8010b74:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8010b78:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010b7c:	f002 fa8c 	bl	8013098 <rcutils_format_string_limit>
 8010b80:	6823      	ldr	r3, [r4, #0]
 8010b82:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8010b86:	6818      	ldr	r0, [r3, #0]
 8010b88:	4631      	mov	r1, r6
 8010b8a:	3028      	adds	r0, #40	@ 0x28
 8010b8c:	462a      	mov	r2, r5
 8010b8e:	6866      	ldr	r6, [r4, #4]
 8010b90:	f003 fad0 	bl	8014134 <rmw_create_node>
 8010b94:	6863      	ldr	r3, [r4, #4]
 8010b96:	66b0      	str	r0, [r6, #104]	@ 0x68
 8010b98:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8010b9a:	2800      	cmp	r0, #0
 8010b9c:	d032      	beq.n	8010c04 <rcl_node_init+0x19c>
 8010b9e:	f003 fb5d 	bl	801425c <rmw_node_get_graph_guard_condition>
 8010ba2:	4681      	mov	r9, r0
 8010ba4:	b360      	cbz	r0, 8010c00 <rcl_node_init+0x198>
 8010ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8010baa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010bae:	6866      	ldr	r6, [r4, #4]
 8010bb0:	2008      	movs	r0, #8
 8010bb2:	4798      	blx	r3
 8010bb4:	6863      	ldr	r3, [r4, #4]
 8010bb6:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8010bb8:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8010bbc:	f1bb 0f00 	cmp.w	fp, #0
 8010bc0:	d020      	beq.n	8010c04 <rcl_node_init+0x19c>
 8010bc2:	a806      	add	r0, sp, #24
 8010bc4:	f005 ff6e 	bl	8016aa4 <rcl_get_zero_initialized_guard_condition>
 8010bc8:	a806      	add	r0, sp, #24
 8010bca:	c803      	ldmia	r0, {r0, r1}
 8010bcc:	6863      	ldr	r3, [r4, #4]
 8010bce:	46c4      	mov	ip, r8
 8010bd0:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8010bd4:	e88b 0003 	stmia.w	fp, {r0, r1}
 8010bd8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010bdc:	ae23      	add	r6, sp, #140	@ 0x8c
 8010bde:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010be0:	f8dc 3000 	ldr.w	r3, [ip]
 8010be4:	6033      	str	r3, [r6, #0]
 8010be6:	ab28      	add	r3, sp, #160	@ 0xa0
 8010be8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8010bec:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010bf0:	4649      	mov	r1, r9
 8010bf2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010bf4:	463a      	mov	r2, r7
 8010bf6:	4670      	mov	r0, lr
 8010bf8:	f005 ff5e 	bl	8016ab8 <rcl_guard_condition_init_from_rmw>
 8010bfc:	4681      	mov	r9, r0
 8010bfe:	b328      	cbz	r0, 8010c4c <rcl_node_init+0x1e4>
 8010c00:	6863      	ldr	r3, [r4, #4]
 8010c02:	b1f3      	cbz	r3, 8010c42 <rcl_node_init+0x1da>
 8010c04:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010c06:	b128      	cbz	r0, 8010c14 <rcl_node_init+0x1ac>
 8010c08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010c0c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010c10:	4798      	blx	r3
 8010c12:	6863      	ldr	r3, [r4, #4]
 8010c14:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8010c16:	b110      	cbz	r0, 8010c1e <rcl_node_init+0x1b6>
 8010c18:	f003 faa4 	bl	8014164 <rmw_destroy_node>
 8010c1c:	6863      	ldr	r3, [r4, #4]
 8010c1e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8010c20:	b148      	cbz	r0, 8010c36 <rcl_node_init+0x1ce>
 8010c22:	f005 ffa9 	bl	8016b78 <rcl_guard_condition_fini>
 8010c26:	6863      	ldr	r3, [r4, #4]
 8010c28:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010c2c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8010c2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010c32:	4798      	blx	r3
 8010c34:	6863      	ldr	r3, [r4, #4]
 8010c36:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010c40:	4798      	blx	r3
 8010c42:	2300      	movs	r3, #0
 8010c44:	e9c4 3300 	strd	r3, r3, [r4]
 8010c48:	f04f 0901 	mov.w	r9, #1
 8010c4c:	f1ba 0f00 	cmp.w	sl, #0
 8010c50:	d125      	bne.n	8010c9e <rcl_node_init+0x236>
 8010c52:	e001      	b.n	8010c58 <rcl_node_init+0x1f0>
 8010c54:	f04f 090b 	mov.w	r9, #11
 8010c58:	4648      	mov	r0, r9
 8010c5a:	b029      	add	sp, #164	@ 0xa4
 8010c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c60:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8010c64:	e7f8      	b.n	8010c58 <rcl_node_init+0x1f0>
 8010c66:	782b      	ldrb	r3, [r5, #0]
 8010c68:	2b2f      	cmp	r3, #47	@ 0x2f
 8010c6a:	f43f af42 	beq.w	8010af2 <rcl_node_init+0x8a>
 8010c6e:	9503      	str	r5, [sp, #12]
 8010c70:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010c74:	9300      	str	r3, [sp, #0]
 8010c76:	4b1e      	ldr	r3, [pc, #120]	@ (8010cf0 <rcl_node_init+0x288>)
 8010c78:	9302      	str	r3, [sp, #8]
 8010c7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010c7e:	9301      	str	r3, [sp, #4]
 8010c80:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8010c84:	f002 fa08 	bl	8013098 <rcutils_format_string_limit>
 8010c88:	4605      	mov	r5, r0
 8010c8a:	b340      	cbz	r0, 8010cde <rcl_node_init+0x276>
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	a922      	add	r1, sp, #136	@ 0x88
 8010c90:	9222      	str	r2, [sp, #136]	@ 0x88
 8010c92:	f002 fe19 	bl	80138c8 <rmw_validate_namespace>
 8010c96:	4681      	mov	r9, r0
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	f43f af34 	beq.w	8010b06 <rcl_node_init+0x9e>
 8010c9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010ca2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	4798      	blx	r3
 8010caa:	e7d5      	b.n	8010c58 <rcl_node_init+0x1f0>
 8010cac:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8010cb0:	4648      	mov	r0, r9
 8010cb2:	b029      	add	sp, #164	@ 0xa4
 8010cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cb8:	f04f 090a 	mov.w	r9, #10
 8010cbc:	f1ba 0f00 	cmp.w	sl, #0
 8010cc0:	d1ed      	bne.n	8010c9e <rcl_node_init+0x236>
 8010cc2:	e7c9      	b.n	8010c58 <rcl_node_init+0x1f0>
 8010cc4:	f002 fe70 	bl	80139a8 <rmw_node_name_validation_result_string>
 8010cc8:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8010ccc:	e7c4      	b.n	8010c58 <rcl_node_init+0x1f0>
 8010cce:	f002 fe0d 	bl	80138ec <rmw_namespace_validation_result_string>
 8010cd2:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8010cd6:	f1ba 0f00 	cmp.w	sl, #0
 8010cda:	d1e0      	bne.n	8010c9e <rcl_node_init+0x236>
 8010cdc:	e7bc      	b.n	8010c58 <rcl_node_init+0x1f0>
 8010cde:	f04f 090a 	mov.w	r9, #10
 8010ce2:	e7b9      	b.n	8010c58 <rcl_node_init+0x1f0>
 8010ce4:	08018d7c 	.word	0x08018d7c
 8010ce8:	08018c0c 	.word	0x08018c0c
 8010cec:	08018d84 	.word	0x08018d84
 8010cf0:	08018d80 	.word	0x08018d80

08010cf4 <rcl_node_is_valid>:
 8010cf4:	b130      	cbz	r0, 8010d04 <rcl_node_is_valid+0x10>
 8010cf6:	6843      	ldr	r3, [r0, #4]
 8010cf8:	b123      	cbz	r3, 8010d04 <rcl_node_is_valid+0x10>
 8010cfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010cfc:	b113      	cbz	r3, 8010d04 <rcl_node_is_valid+0x10>
 8010cfe:	6800      	ldr	r0, [r0, #0]
 8010d00:	f7ff bc1e 	b.w	8010540 <rcl_context_is_valid>
 8010d04:	2000      	movs	r0, #0
 8010d06:	4770      	bx	lr

08010d08 <rcl_node_get_name>:
 8010d08:	b120      	cbz	r0, 8010d14 <rcl_node_get_name+0xc>
 8010d0a:	6840      	ldr	r0, [r0, #4]
 8010d0c:	b110      	cbz	r0, 8010d14 <rcl_node_get_name+0xc>
 8010d0e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010d10:	b100      	cbz	r0, 8010d14 <rcl_node_get_name+0xc>
 8010d12:	6880      	ldr	r0, [r0, #8]
 8010d14:	4770      	bx	lr
 8010d16:	bf00      	nop

08010d18 <rcl_node_get_namespace>:
 8010d18:	b120      	cbz	r0, 8010d24 <rcl_node_get_namespace+0xc>
 8010d1a:	6840      	ldr	r0, [r0, #4]
 8010d1c:	b110      	cbz	r0, 8010d24 <rcl_node_get_namespace+0xc>
 8010d1e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010d20:	b100      	cbz	r0, 8010d24 <rcl_node_get_namespace+0xc>
 8010d22:	68c0      	ldr	r0, [r0, #12]
 8010d24:	4770      	bx	lr
 8010d26:	bf00      	nop

08010d28 <rcl_node_get_options>:
 8010d28:	b128      	cbz	r0, 8010d36 <rcl_node_get_options+0xe>
 8010d2a:	6840      	ldr	r0, [r0, #4]
 8010d2c:	b118      	cbz	r0, 8010d36 <rcl_node_get_options+0xe>
 8010d2e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	bf08      	it	eq
 8010d34:	2000      	moveq	r0, #0
 8010d36:	4770      	bx	lr

08010d38 <rcl_node_get_rmw_handle>:
 8010d38:	b110      	cbz	r0, 8010d40 <rcl_node_get_rmw_handle+0x8>
 8010d3a:	6840      	ldr	r0, [r0, #4]
 8010d3c:	b100      	cbz	r0, 8010d40 <rcl_node_get_rmw_handle+0x8>
 8010d3e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010d40:	4770      	bx	lr
 8010d42:	bf00      	nop

08010d44 <rcl_node_get_default_options>:
 8010d44:	b510      	push	{r4, lr}
 8010d46:	2268      	movs	r2, #104	@ 0x68
 8010d48:	4604      	mov	r4, r0
 8010d4a:	2100      	movs	r1, #0
 8010d4c:	f006 fd50 	bl	80177f0 <memset>
 8010d50:	4620      	mov	r0, r4
 8010d52:	f7fb fe3b 	bl	800c9cc <rcutils_get_default_allocator>
 8010d56:	2301      	movs	r3, #1
 8010d58:	7523      	strb	r3, [r4, #20]
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	bd10      	pop	{r4, pc}
 8010d5e:	bf00      	nop

08010d60 <rcl_node_options_copy>:
 8010d60:	b1d0      	cbz	r0, 8010d98 <rcl_node_options_copy+0x38>
 8010d62:	b570      	push	{r4, r5, r6, lr}
 8010d64:	460c      	mov	r4, r1
 8010d66:	b1a9      	cbz	r1, 8010d94 <rcl_node_options_copy+0x34>
 8010d68:	4288      	cmp	r0, r1
 8010d6a:	4684      	mov	ip, r0
 8010d6c:	d012      	beq.n	8010d94 <rcl_node_options_copy+0x34>
 8010d6e:	4605      	mov	r5, r0
 8010d70:	8a86      	ldrh	r6, [r0, #20]
 8010d72:	468e      	mov	lr, r1
 8010d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d76:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010d7a:	682b      	ldr	r3, [r5, #0]
 8010d7c:	f8ce 3000 	str.w	r3, [lr]
 8010d80:	f10c 0118 	add.w	r1, ip, #24
 8010d84:	2250      	movs	r2, #80	@ 0x50
 8010d86:	82a6      	strh	r6, [r4, #20]
 8010d88:	f104 0018 	add.w	r0, r4, #24
 8010d8c:	f006 fdf9 	bl	8017982 <memcpy>
 8010d90:	2000      	movs	r0, #0
 8010d92:	bd70      	pop	{r4, r5, r6, pc}
 8010d94:	200b      	movs	r0, #11
 8010d96:	bd70      	pop	{r4, r5, r6, pc}
 8010d98:	200b      	movs	r0, #11
 8010d9a:	4770      	bx	lr

08010d9c <rcl_node_resolve_name>:
 8010d9c:	b082      	sub	sp, #8
 8010d9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da2:	b091      	sub	sp, #68	@ 0x44
 8010da4:	ac1a      	add	r4, sp, #104	@ 0x68
 8010da6:	e884 000c 	stmia.w	r4, {r2, r3}
 8010daa:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8010dae:	2800      	cmp	r0, #0
 8010db0:	d03b      	beq.n	8010e2a <rcl_node_resolve_name+0x8e>
 8010db2:	460c      	mov	r4, r1
 8010db4:	4605      	mov	r5, r0
 8010db6:	f7ff ffb7 	bl	8010d28 <rcl_node_get_options>
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	d037      	beq.n	8010e2e <rcl_node_resolve_name+0x92>
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	f7ff ffa2 	bl	8010d08 <rcl_node_get_name>
 8010dc4:	4606      	mov	r6, r0
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f7ff ffa6 	bl	8010d18 <rcl_node_get_namespace>
 8010dcc:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8010dd0:	4681      	mov	r9, r0
 8010dd2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010dd6:	ad0b      	add	r5, sp, #44	@ 0x2c
 8010dd8:	46ac      	mov	ip, r5
 8010dda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010dde:	f8de 3000 	ldr.w	r3, [lr]
 8010de2:	f8cc 3000 	str.w	r3, [ip]
 8010de6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010de8:	b1fb      	cbz	r3, 8010e2a <rcl_node_resolve_name+0x8e>
 8010dea:	468a      	mov	sl, r1
 8010dec:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8010df0:	f002 faaa 	bl	8013348 <rcutils_get_zero_initialized_string_map>
 8010df4:	ab10      	add	r3, sp, #64	@ 0x40
 8010df6:	9008      	str	r0, [sp, #32]
 8010df8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010dfc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010e00:	2100      	movs	r1, #0
 8010e02:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010e06:	a808      	add	r0, sp, #32
 8010e08:	f002 fb16 	bl	8013438 <rcutils_string_map_init>
 8010e0c:	4607      	mov	r7, r0
 8010e0e:	b180      	cbz	r0, 8010e32 <rcl_node_resolve_name+0x96>
 8010e10:	f7fb fdf8 	bl	800ca04 <rcutils_get_error_string>
 8010e14:	f7fb fe0c 	bl	800ca30 <rcutils_reset_error>
 8010e18:	2f0a      	cmp	r7, #10
 8010e1a:	bf18      	it	ne
 8010e1c:	2701      	movne	r7, #1
 8010e1e:	4638      	mov	r0, r7
 8010e20:	b011      	add	sp, #68	@ 0x44
 8010e22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e26:	b002      	add	sp, #8
 8010e28:	4770      	bx	lr
 8010e2a:	270b      	movs	r7, #11
 8010e2c:	e7f7      	b.n	8010e1e <rcl_node_resolve_name+0x82>
 8010e2e:	2701      	movs	r7, #1
 8010e30:	e7f5      	b.n	8010e1e <rcl_node_resolve_name+0x82>
 8010e32:	9009      	str	r0, [sp, #36]	@ 0x24
 8010e34:	9007      	str	r0, [sp, #28]
 8010e36:	a808      	add	r0, sp, #32
 8010e38:	f005 fe2e 	bl	8016a98 <rcl_get_default_topic_name_substitutions>
 8010e3c:	4607      	mov	r7, r0
 8010e3e:	b1a8      	cbz	r0, 8010e6c <rcl_node_resolve_name+0xd0>
 8010e40:	280a      	cmp	r0, #10
 8010e42:	9c07      	ldr	r4, [sp, #28]
 8010e44:	d000      	beq.n	8010e48 <rcl_node_resolve_name+0xac>
 8010e46:	2701      	movs	r7, #1
 8010e48:	a808      	add	r0, sp, #32
 8010e4a:	f002 fb35 	bl	80134b8 <rcutils_string_map_fini>
 8010e4e:	2800      	cmp	r0, #0
 8010e50:	d13d      	bne.n	8010ece <rcl_node_resolve_name+0x132>
 8010e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e54:	4659      	mov	r1, fp
 8010e56:	47d0      	blx	sl
 8010e58:	4659      	mov	r1, fp
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	47d0      	blx	sl
 8010e5e:	f1b8 0f00 	cmp.w	r8, #0
 8010e62:	d0dc      	beq.n	8010e1e <rcl_node_resolve_name+0x82>
 8010e64:	2f67      	cmp	r7, #103	@ 0x67
 8010e66:	bf08      	it	eq
 8010e68:	2768      	moveq	r7, #104	@ 0x68
 8010e6a:	e7d8      	b.n	8010e1e <rcl_node_resolve_name+0x82>
 8010e6c:	ab09      	add	r3, sp, #36	@ 0x24
 8010e6e:	9305      	str	r3, [sp, #20]
 8010e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e72:	46ec      	mov	ip, sp
 8010e74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e78:	682b      	ldr	r3, [r5, #0]
 8010e7a:	f8cc 3000 	str.w	r3, [ip]
 8010e7e:	464a      	mov	r2, r9
 8010e80:	4631      	mov	r1, r6
 8010e82:	4620      	mov	r0, r4
 8010e84:	ab08      	add	r3, sp, #32
 8010e86:	f005 fca9 	bl	80167dc <rcl_expand_topic_name>
 8010e8a:	4607      	mov	r7, r0
 8010e8c:	b9b8      	cbnz	r0, 8010ebe <rcl_node_resolve_name+0x122>
 8010e8e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010e90:	9009      	str	r0, [sp, #36]	@ 0x24
 8010e92:	4602      	mov	r2, r0
 8010e94:	a90a      	add	r1, sp, #40	@ 0x28
 8010e96:	4620      	mov	r0, r4
 8010e98:	f002 fc52 	bl	8013740 <rmw_validate_full_topic_name>
 8010e9c:	b988      	cbnz	r0, 8010ec2 <rcl_node_resolve_name+0x126>
 8010e9e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010ea0:	b9d5      	cbnz	r5, 8010ed8 <rcl_node_resolve_name+0x13c>
 8010ea2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010ea4:	a808      	add	r0, sp, #32
 8010ea6:	601c      	str	r4, [r3, #0]
 8010ea8:	f002 fb06 	bl	80134b8 <rcutils_string_map_fini>
 8010eac:	4607      	mov	r7, r0
 8010eae:	b1a8      	cbz	r0, 8010edc <rcl_node_resolve_name+0x140>
 8010eb0:	f7fb fda8 	bl	800ca04 <rcutils_get_error_string>
 8010eb4:	462c      	mov	r4, r5
 8010eb6:	f7fb fdbb 	bl	800ca30 <rcutils_reset_error>
 8010eba:	2701      	movs	r7, #1
 8010ebc:	e7c9      	b.n	8010e52 <rcl_node_resolve_name+0xb6>
 8010ebe:	9c07      	ldr	r4, [sp, #28]
 8010ec0:	e7c2      	b.n	8010e48 <rcl_node_resolve_name+0xac>
 8010ec2:	f7fb fd9f 	bl	800ca04 <rcutils_get_error_string>
 8010ec6:	2701      	movs	r7, #1
 8010ec8:	f7fb fdb2 	bl	800ca30 <rcutils_reset_error>
 8010ecc:	e7bc      	b.n	8010e48 <rcl_node_resolve_name+0xac>
 8010ece:	f7fb fd99 	bl	800ca04 <rcutils_get_error_string>
 8010ed2:	f7fb fdad 	bl	800ca30 <rcutils_reset_error>
 8010ed6:	e7bc      	b.n	8010e52 <rcl_node_resolve_name+0xb6>
 8010ed8:	2767      	movs	r7, #103	@ 0x67
 8010eda:	e7b5      	b.n	8010e48 <rcl_node_resolve_name+0xac>
 8010edc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ede:	4659      	mov	r1, fp
 8010ee0:	47d0      	blx	sl
 8010ee2:	4659      	mov	r1, fp
 8010ee4:	4638      	mov	r0, r7
 8010ee6:	47d0      	blx	sl
 8010ee8:	e799      	b.n	8010e1e <rcl_node_resolve_name+0x82>
 8010eea:	bf00      	nop

08010eec <exact_match_lookup>:
 8010eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eee:	f102 0708 	add.w	r7, r2, #8
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	4614      	mov	r4, r2
 8010ef6:	4606      	mov	r6, r0
 8010ef8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010efc:	b085      	sub	sp, #20
 8010efe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010f02:	4618      	mov	r0, r3
 8010f04:	4919      	ldr	r1, [pc, #100]	@ (8010f6c <exact_match_lookup+0x80>)
 8010f06:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010f0a:	f002 f8b7 	bl	801307c <rcutils_join_path>
 8010f0e:	7833      	ldrb	r3, [r6, #0]
 8010f10:	2b2f      	cmp	r3, #47	@ 0x2f
 8010f12:	4605      	mov	r5, r0
 8010f14:	d023      	beq.n	8010f5e <exact_match_lookup+0x72>
 8010f16:	f104 030c 	add.w	r3, r4, #12
 8010f1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010f1e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010f22:	1c70      	adds	r0, r6, #1
 8010f24:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010f28:	f002 f8ae 	bl	8013088 <rcutils_to_native_path>
 8010f2c:	4606      	mov	r6, r0
 8010f2e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010f32:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010f36:	4631      	mov	r1, r6
 8010f38:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010f3c:	4628      	mov	r0, r5
 8010f3e:	f002 f89d 	bl	801307c <rcutils_join_path>
 8010f42:	6862      	ldr	r2, [r4, #4]
 8010f44:	6921      	ldr	r1, [r4, #16]
 8010f46:	4603      	mov	r3, r0
 8010f48:	4630      	mov	r0, r6
 8010f4a:	461e      	mov	r6, r3
 8010f4c:	4790      	blx	r2
 8010f4e:	4628      	mov	r0, r5
 8010f50:	6863      	ldr	r3, [r4, #4]
 8010f52:	6921      	ldr	r1, [r4, #16]
 8010f54:	4798      	blx	r3
 8010f56:	4635      	mov	r5, r6
 8010f58:	4628      	mov	r0, r5
 8010f5a:	b005      	add	sp, #20
 8010f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f5e:	7873      	ldrb	r3, [r6, #1]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d1d8      	bne.n	8010f16 <exact_match_lookup+0x2a>
 8010f64:	4628      	mov	r0, r5
 8010f66:	b005      	add	sp, #20
 8010f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f6a:	bf00      	nop
 8010f6c:	08018dd0 	.word	0x08018dd0

08010f70 <rcl_get_secure_root>:
 8010f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f74:	b085      	sub	sp, #20
 8010f76:	b168      	cbz	r0, 8010f94 <rcl_get_secure_root+0x24>
 8010f78:	4607      	mov	r7, r0
 8010f7a:	4608      	mov	r0, r1
 8010f7c:	460c      	mov	r4, r1
 8010f7e:	f7fb fd33 	bl	800c9e8 <rcutils_allocator_is_valid>
 8010f82:	b138      	cbz	r0, 8010f94 <rcl_get_secure_root+0x24>
 8010f84:	2300      	movs	r3, #0
 8010f86:	482d      	ldr	r0, [pc, #180]	@ (801103c <rcl_get_secure_root+0xcc>)
 8010f88:	9303      	str	r3, [sp, #12]
 8010f8a:	a903      	add	r1, sp, #12
 8010f8c:	f002 f85c 	bl	8013048 <rcutils_get_env>
 8010f90:	4605      	mov	r5, r0
 8010f92:	b120      	cbz	r0, 8010f9e <rcl_get_secure_root+0x2e>
 8010f94:	2500      	movs	r5, #0
 8010f96:	4628      	mov	r0, r5
 8010f98:	b005      	add	sp, #20
 8010f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f9e:	9b03      	ldr	r3, [sp, #12]
 8010fa0:	781a      	ldrb	r2, [r3, #0]
 8010fa2:	2a00      	cmp	r2, #0
 8010fa4:	d0f6      	beq.n	8010f94 <rcl_get_secure_root+0x24>
 8010fa6:	f104 090c 	add.w	r9, r4, #12
 8010faa:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010fae:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010fb8:	f002 f988 	bl	80132cc <rcutils_strdup>
 8010fbc:	4680      	mov	r8, r0
 8010fbe:	2800      	cmp	r0, #0
 8010fc0:	d0e8      	beq.n	8010f94 <rcl_get_secure_root+0x24>
 8010fc2:	481f      	ldr	r0, [pc, #124]	@ (8011040 <rcl_get_secure_root+0xd0>)
 8010fc4:	9503      	str	r5, [sp, #12]
 8010fc6:	a903      	add	r1, sp, #12
 8010fc8:	f002 f83e 	bl	8013048 <rcutils_get_env>
 8010fcc:	b160      	cbz	r0, 8010fe8 <rcl_get_secure_root+0x78>
 8010fce:	2600      	movs	r6, #0
 8010fd0:	6863      	ldr	r3, [r4, #4]
 8010fd2:	6921      	ldr	r1, [r4, #16]
 8010fd4:	4630      	mov	r0, r6
 8010fd6:	4798      	blx	r3
 8010fd8:	4640      	mov	r0, r8
 8010fda:	6863      	ldr	r3, [r4, #4]
 8010fdc:	6921      	ldr	r1, [r4, #16]
 8010fde:	4798      	blx	r3
 8010fe0:	4628      	mov	r0, r5
 8010fe2:	b005      	add	sp, #20
 8010fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fe8:	9b03      	ldr	r3, [sp, #12]
 8010fea:	781e      	ldrb	r6, [r3, #0]
 8010fec:	b1f6      	cbz	r6, 801102c <rcl_get_secure_root+0xbc>
 8010fee:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010ff2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010ffc:	f002 f966 	bl	80132cc <rcutils_strdup>
 8011000:	4606      	mov	r6, r0
 8011002:	2800      	cmp	r0, #0
 8011004:	d0e3      	beq.n	8010fce <rcl_get_secure_root+0x5e>
 8011006:	4622      	mov	r2, r4
 8011008:	4641      	mov	r1, r8
 801100a:	f7ff ff6f 	bl	8010eec <exact_match_lookup>
 801100e:	4605      	mov	r5, r0
 8011010:	2d00      	cmp	r5, #0
 8011012:	d0dd      	beq.n	8010fd0 <rcl_get_secure_root+0x60>
 8011014:	4628      	mov	r0, r5
 8011016:	f002 f82f 	bl	8013078 <rcutils_is_directory>
 801101a:	4603      	mov	r3, r0
 801101c:	2800      	cmp	r0, #0
 801101e:	d1d7      	bne.n	8010fd0 <rcl_get_secure_root+0x60>
 8011020:	4628      	mov	r0, r5
 8011022:	6921      	ldr	r1, [r4, #16]
 8011024:	461d      	mov	r5, r3
 8011026:	6863      	ldr	r3, [r4, #4]
 8011028:	4798      	blx	r3
 801102a:	e7d1      	b.n	8010fd0 <rcl_get_secure_root+0x60>
 801102c:	4622      	mov	r2, r4
 801102e:	4638      	mov	r0, r7
 8011030:	4641      	mov	r1, r8
 8011032:	f7ff ff5b 	bl	8010eec <exact_match_lookup>
 8011036:	4605      	mov	r5, r0
 8011038:	e7ea      	b.n	8011010 <rcl_get_secure_root+0xa0>
 801103a:	bf00      	nop
 801103c:	08018ddc 	.word	0x08018ddc
 8011040:	08018df4 	.word	0x08018df4

08011044 <rcl_get_security_options_from_environment>:
 8011044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011048:	b082      	sub	sp, #8
 801104a:	2300      	movs	r3, #0
 801104c:	4606      	mov	r6, r0
 801104e:	460f      	mov	r7, r1
 8011050:	4820      	ldr	r0, [pc, #128]	@ (80110d4 <rcl_get_security_options_from_environment+0x90>)
 8011052:	9301      	str	r3, [sp, #4]
 8011054:	a901      	add	r1, sp, #4
 8011056:	4690      	mov	r8, r2
 8011058:	f001 fff6 	bl	8013048 <rcutils_get_env>
 801105c:	b120      	cbz	r0, 8011068 <rcl_get_security_options_from_environment+0x24>
 801105e:	2501      	movs	r5, #1
 8011060:	4628      	mov	r0, r5
 8011062:	b002      	add	sp, #8
 8011064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011068:	491b      	ldr	r1, [pc, #108]	@ (80110d8 <rcl_get_security_options_from_environment+0x94>)
 801106a:	4604      	mov	r4, r0
 801106c:	9801      	ldr	r0, [sp, #4]
 801106e:	f7ef f8b7 	bl	80001e0 <strcmp>
 8011072:	4605      	mov	r5, r0
 8011074:	b9e8      	cbnz	r0, 80110b2 <rcl_get_security_options_from_environment+0x6e>
 8011076:	9001      	str	r0, [sp, #4]
 8011078:	f1b8 0f00 	cmp.w	r8, #0
 801107c:	d020      	beq.n	80110c0 <rcl_get_security_options_from_environment+0x7c>
 801107e:	4817      	ldr	r0, [pc, #92]	@ (80110dc <rcl_get_security_options_from_environment+0x98>)
 8011080:	a901      	add	r1, sp, #4
 8011082:	f001 ffe1 	bl	8013048 <rcutils_get_env>
 8011086:	2800      	cmp	r0, #0
 8011088:	d1e9      	bne.n	801105e <rcl_get_security_options_from_environment+0x1a>
 801108a:	4915      	ldr	r1, [pc, #84]	@ (80110e0 <rcl_get_security_options_from_environment+0x9c>)
 801108c:	9801      	ldr	r0, [sp, #4]
 801108e:	f7ef f8a7 	bl	80001e0 <strcmp>
 8011092:	fab0 f080 	clz	r0, r0
 8011096:	0940      	lsrs	r0, r0, #5
 8011098:	f888 0000 	strb.w	r0, [r8]
 801109c:	4639      	mov	r1, r7
 801109e:	4630      	mov	r0, r6
 80110a0:	f7ff ff66 	bl	8010f70 <rcl_get_secure_root>
 80110a4:	b170      	cbz	r0, 80110c4 <rcl_get_security_options_from_environment+0x80>
 80110a6:	f8c8 0004 	str.w	r0, [r8, #4]
 80110aa:	4628      	mov	r0, r5
 80110ac:	b002      	add	sp, #8
 80110ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110b2:	4625      	mov	r5, r4
 80110b4:	4628      	mov	r0, r5
 80110b6:	f888 4000 	strb.w	r4, [r8]
 80110ba:	b002      	add	sp, #8
 80110bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110c0:	250b      	movs	r5, #11
 80110c2:	e7cd      	b.n	8011060 <rcl_get_security_options_from_environment+0x1c>
 80110c4:	f898 5000 	ldrb.w	r5, [r8]
 80110c8:	f1a5 0501 	sub.w	r5, r5, #1
 80110cc:	fab5 f585 	clz	r5, r5
 80110d0:	096d      	lsrs	r5, r5, #5
 80110d2:	e7c5      	b.n	8011060 <rcl_get_security_options_from_environment+0x1c>
 80110d4:	08018d94 	.word	0x08018d94
 80110d8:	08018da8 	.word	0x08018da8
 80110dc:	08018db0 	.word	0x08018db0
 80110e0:	08018dc8 	.word	0x08018dc8

080110e4 <rcl_service_get_rmw_handle>:
 80110e4:	b118      	cbz	r0, 80110ee <rcl_service_get_rmw_handle+0xa>
 80110e6:	6800      	ldr	r0, [r0, #0]
 80110e8:	b108      	cbz	r0, 80110ee <rcl_service_get_rmw_handle+0xa>
 80110ea:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80110ee:	4770      	bx	lr

080110f0 <rcl_take_request>:
 80110f0:	b570      	push	{r4, r5, r6, lr}
 80110f2:	468e      	mov	lr, r1
 80110f4:	460c      	mov	r4, r1
 80110f6:	4616      	mov	r6, r2
 80110f8:	4605      	mov	r5, r0
 80110fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110fe:	b08c      	sub	sp, #48	@ 0x30
 8011100:	f10d 0c18 	add.w	ip, sp, #24
 8011104:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011108:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801110c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011110:	b30d      	cbz	r5, 8011156 <rcl_take_request+0x66>
 8011112:	682b      	ldr	r3, [r5, #0]
 8011114:	b1fb      	cbz	r3, 8011156 <rcl_take_request+0x66>
 8011116:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801111a:	b1e0      	cbz	r0, 8011156 <rcl_take_request+0x66>
 801111c:	b336      	cbz	r6, 801116c <rcl_take_request+0x7c>
 801111e:	2300      	movs	r3, #0
 8011120:	f88d 3007 	strb.w	r3, [sp, #7]
 8011124:	4632      	mov	r2, r6
 8011126:	f10d 0307 	add.w	r3, sp, #7
 801112a:	a902      	add	r1, sp, #8
 801112c:	f003 f8ea 	bl	8014304 <rmw_take_request>
 8011130:	4605      	mov	r5, r0
 8011132:	b198      	cbz	r0, 801115c <rcl_take_request+0x6c>
 8011134:	280a      	cmp	r0, #10
 8011136:	bf18      	it	ne
 8011138:	2501      	movne	r5, #1
 801113a:	f10d 0e18 	add.w	lr, sp, #24
 801113e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011142:	46a4      	mov	ip, r4
 8011144:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011148:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801114c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011150:	4628      	mov	r0, r5
 8011152:	b00c      	add	sp, #48	@ 0x30
 8011154:	bd70      	pop	{r4, r5, r6, pc}
 8011156:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801115a:	e7ee      	b.n	801113a <rcl_take_request+0x4a>
 801115c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011160:	f240 2359 	movw	r3, #601	@ 0x259
 8011164:	2a00      	cmp	r2, #0
 8011166:	bf08      	it	eq
 8011168:	461d      	moveq	r5, r3
 801116a:	e7e6      	b.n	801113a <rcl_take_request+0x4a>
 801116c:	250b      	movs	r5, #11
 801116e:	e7e4      	b.n	801113a <rcl_take_request+0x4a>

08011170 <rcl_send_response>:
 8011170:	b170      	cbz	r0, 8011190 <rcl_send_response+0x20>
 8011172:	6800      	ldr	r0, [r0, #0]
 8011174:	b160      	cbz	r0, 8011190 <rcl_send_response+0x20>
 8011176:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801117a:	b148      	cbz	r0, 8011190 <rcl_send_response+0x20>
 801117c:	b159      	cbz	r1, 8011196 <rcl_send_response+0x26>
 801117e:	b510      	push	{r4, lr}
 8011180:	b15a      	cbz	r2, 801119a <rcl_send_response+0x2a>
 8011182:	f003 f91d 	bl	80143c0 <rmw_send_response>
 8011186:	b110      	cbz	r0, 801118e <rcl_send_response+0x1e>
 8011188:	2802      	cmp	r0, #2
 801118a:	bf18      	it	ne
 801118c:	2001      	movne	r0, #1
 801118e:	bd10      	pop	{r4, pc}
 8011190:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8011194:	4770      	bx	lr
 8011196:	200b      	movs	r0, #11
 8011198:	4770      	bx	lr
 801119a:	200b      	movs	r0, #11
 801119c:	bd10      	pop	{r4, pc}
 801119e:	bf00      	nop

080111a0 <rcl_service_is_valid>:
 80111a0:	b130      	cbz	r0, 80111b0 <rcl_service_is_valid+0x10>
 80111a2:	6800      	ldr	r0, [r0, #0]
 80111a4:	b120      	cbz	r0, 80111b0 <rcl_service_is_valid+0x10>
 80111a6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80111aa:	3800      	subs	r0, #0
 80111ac:	bf18      	it	ne
 80111ae:	2001      	movne	r0, #1
 80111b0:	4770      	bx	lr
 80111b2:	bf00      	nop

080111b4 <rcl_get_zero_initialized_subscription>:
 80111b4:	4b01      	ldr	r3, [pc, #4]	@ (80111bc <rcl_get_zero_initialized_subscription+0x8>)
 80111b6:	6818      	ldr	r0, [r3, #0]
 80111b8:	4770      	bx	lr
 80111ba:	bf00      	nop
 80111bc:	08018e14 	.word	0x08018e14

080111c0 <rcl_subscription_init>:
 80111c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111c4:	b089      	sub	sp, #36	@ 0x24
 80111c6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80111c8:	b1d6      	cbz	r6, 8011200 <rcl_subscription_init+0x40>
 80111ca:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 80111ce:	4604      	mov	r4, r0
 80111d0:	4648      	mov	r0, r9
 80111d2:	460d      	mov	r5, r1
 80111d4:	4690      	mov	r8, r2
 80111d6:	461f      	mov	r7, r3
 80111d8:	f7fb fc06 	bl	800c9e8 <rcutils_allocator_is_valid>
 80111dc:	b180      	cbz	r0, 8011200 <rcl_subscription_init+0x40>
 80111de:	b17c      	cbz	r4, 8011200 <rcl_subscription_init+0x40>
 80111e0:	4628      	mov	r0, r5
 80111e2:	f7ff fd87 	bl	8010cf4 <rcl_node_is_valid>
 80111e6:	2800      	cmp	r0, #0
 80111e8:	d054      	beq.n	8011294 <rcl_subscription_init+0xd4>
 80111ea:	f1b8 0f00 	cmp.w	r8, #0
 80111ee:	d007      	beq.n	8011200 <rcl_subscription_init+0x40>
 80111f0:	b137      	cbz	r7, 8011200 <rcl_subscription_init+0x40>
 80111f2:	6823      	ldr	r3, [r4, #0]
 80111f4:	b14b      	cbz	r3, 801120a <rcl_subscription_init+0x4a>
 80111f6:	2764      	movs	r7, #100	@ 0x64
 80111f8:	4638      	mov	r0, r7
 80111fa:	b009      	add	sp, #36	@ 0x24
 80111fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011200:	270b      	movs	r7, #11
 8011202:	4638      	mov	r0, r7
 8011204:	b009      	add	sp, #36	@ 0x24
 8011206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801120a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801120e:	aa07      	add	r2, sp, #28
 8011210:	9205      	str	r2, [sp, #20]
 8011212:	9307      	str	r3, [sp, #28]
 8011214:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8011218:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801121c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011220:	4639      	mov	r1, r7
 8011222:	e899 000c 	ldmia.w	r9, {r2, r3}
 8011226:	4628      	mov	r0, r5
 8011228:	f7ff fdb8 	bl	8010d9c <rcl_node_resolve_name>
 801122c:	4607      	mov	r7, r0
 801122e:	2800      	cmp	r0, #0
 8011230:	d15f      	bne.n	80112f2 <rcl_subscription_init+0x132>
 8011232:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8011236:	21c8      	movs	r1, #200	@ 0xc8
 8011238:	2001      	movs	r0, #1
 801123a:	4798      	blx	r3
 801123c:	6020      	str	r0, [r4, #0]
 801123e:	2800      	cmp	r0, #0
 8011240:	d05d      	beq.n	80112fe <rcl_subscription_init+0x13e>
 8011242:	4628      	mov	r0, r5
 8011244:	f7ff fd78 	bl	8010d38 <rcl_node_get_rmw_handle>
 8011248:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 801124c:	9300      	str	r3, [sp, #0]
 801124e:	9a07      	ldr	r2, [sp, #28]
 8011250:	6827      	ldr	r7, [r4, #0]
 8011252:	4641      	mov	r1, r8
 8011254:	4633      	mov	r3, r6
 8011256:	f003 f99d 	bl	8014594 <rmw_create_subscription>
 801125a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 801125e:	6827      	ldr	r7, [r4, #0]
 8011260:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8011264:	b348      	cbz	r0, 80112ba <rcl_subscription_init+0xfa>
 8011266:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 801126a:	f003 fa75 	bl	8014758 <rmw_subscription_get_actual_qos>
 801126e:	4607      	mov	r7, r0
 8011270:	b9a8      	cbnz	r0, 801129e <rcl_subscription_init+0xde>
 8011272:	6820      	ldr	r0, [r4, #0]
 8011274:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8011278:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801127c:	2270      	movs	r2, #112	@ 0x70
 801127e:	4631      	mov	r1, r6
 8011280:	f006 fb7f 	bl	8017982 <memcpy>
 8011284:	9807      	ldr	r0, [sp, #28]
 8011286:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8011288:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801128a:	4798      	blx	r3
 801128c:	4638      	mov	r0, r7
 801128e:	b009      	add	sp, #36	@ 0x24
 8011290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011294:	27c8      	movs	r7, #200	@ 0xc8
 8011296:	4638      	mov	r0, r7
 8011298:	b009      	add	sp, #36	@ 0x24
 801129a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801129e:	6827      	ldr	r7, [r4, #0]
 80112a0:	b32f      	cbz	r7, 80112ee <rcl_subscription_init+0x12e>
 80112a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80112a6:	b14b      	cbz	r3, 80112bc <rcl_subscription_init+0xfc>
 80112a8:	4628      	mov	r0, r5
 80112aa:	f7ff fd45 	bl	8010d38 <rcl_node_get_rmw_handle>
 80112ae:	6823      	ldr	r3, [r4, #0]
 80112b0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80112b4:	f003 fa60 	bl	8014778 <rmw_destroy_subscription>
 80112b8:	6827      	ldr	r7, [r4, #0]
 80112ba:	b197      	cbz	r7, 80112e2 <rcl_subscription_init+0x122>
 80112bc:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80112c0:	4628      	mov	r0, r5
 80112c2:	f7fb fb91 	bl	800c9e8 <rcutils_allocator_is_valid>
 80112c6:	b158      	cbz	r0, 80112e0 <rcl_subscription_init+0x120>
 80112c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80112ca:	b148      	cbz	r0, 80112e0 <rcl_subscription_init+0x120>
 80112cc:	4629      	mov	r1, r5
 80112ce:	f002 f98b 	bl	80135e8 <rmw_subscription_content_filter_options_fini>
 80112d2:	4605      	mov	r5, r0
 80112d4:	b9b8      	cbnz	r0, 8011306 <rcl_subscription_init+0x146>
 80112d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80112d8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80112da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80112dc:	4798      	blx	r3
 80112de:	66fd      	str	r5, [r7, #108]	@ 0x6c
 80112e0:	6827      	ldr	r7, [r4, #0]
 80112e2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80112e4:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80112e6:	4638      	mov	r0, r7
 80112e8:	4798      	blx	r3
 80112ea:	2300      	movs	r3, #0
 80112ec:	6023      	str	r3, [r4, #0]
 80112ee:	2701      	movs	r7, #1
 80112f0:	e7c8      	b.n	8011284 <rcl_subscription_init+0xc4>
 80112f2:	2867      	cmp	r0, #103	@ 0x67
 80112f4:	d0c6      	beq.n	8011284 <rcl_subscription_init+0xc4>
 80112f6:	2869      	cmp	r0, #105	@ 0x69
 80112f8:	d003      	beq.n	8011302 <rcl_subscription_init+0x142>
 80112fa:	280a      	cmp	r0, #10
 80112fc:	d1f7      	bne.n	80112ee <rcl_subscription_init+0x12e>
 80112fe:	270a      	movs	r7, #10
 8011300:	e7c0      	b.n	8011284 <rcl_subscription_init+0xc4>
 8011302:	2767      	movs	r7, #103	@ 0x67
 8011304:	e7be      	b.n	8011284 <rcl_subscription_init+0xc4>
 8011306:	f7ff f8fd 	bl	8010504 <rcl_convert_rmw_ret_to_rcl_ret>
 801130a:	6827      	ldr	r7, [r4, #0]
 801130c:	e7e9      	b.n	80112e2 <rcl_subscription_init+0x122>
 801130e:	bf00      	nop

08011310 <rcl_subscription_get_default_options>:
 8011310:	b570      	push	{r4, r5, r6, lr}
 8011312:	4d14      	ldr	r5, [pc, #80]	@ (8011364 <rcl_subscription_get_default_options+0x54>)
 8011314:	4914      	ldr	r1, [pc, #80]	@ (8011368 <rcl_subscription_get_default_options+0x58>)
 8011316:	b08a      	sub	sp, #40	@ 0x28
 8011318:	4604      	mov	r4, r0
 801131a:	2250      	movs	r2, #80	@ 0x50
 801131c:	4628      	mov	r0, r5
 801131e:	f006 fb30 	bl	8017982 <memcpy>
 8011322:	a804      	add	r0, sp, #16
 8011324:	f7fb fb52 	bl	800c9cc <rcutils_get_default_allocator>
 8011328:	f10d 0c10 	add.w	ip, sp, #16
 801132c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011330:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8011334:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011338:	466e      	mov	r6, sp
 801133a:	f8dc 3000 	ldr.w	r3, [ip]
 801133e:	f8ce 3000 	str.w	r3, [lr]
 8011342:	4630      	mov	r0, r6
 8011344:	f002 f96a 	bl	801361c <rmw_get_default_subscription_options>
 8011348:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801134c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8011350:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011354:	2270      	movs	r2, #112	@ 0x70
 8011356:	4629      	mov	r1, r5
 8011358:	4620      	mov	r0, r4
 801135a:	f006 fb12 	bl	8017982 <memcpy>
 801135e:	4620      	mov	r0, r4
 8011360:	b00a      	add	sp, #40	@ 0x28
 8011362:	bd70      	pop	{r4, r5, r6, pc}
 8011364:	2000dd68 	.word	0x2000dd68
 8011368:	08018e18 	.word	0x08018e18

0801136c <rcl_take>:
 801136c:	2800      	cmp	r0, #0
 801136e:	d04a      	beq.n	8011406 <rcl_take+0x9a>
 8011370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011374:	4604      	mov	r4, r0
 8011376:	6800      	ldr	r0, [r0, #0]
 8011378:	b0a4      	sub	sp, #144	@ 0x90
 801137a:	2800      	cmp	r0, #0
 801137c:	d03b      	beq.n	80113f6 <rcl_take+0x8a>
 801137e:	461f      	mov	r7, r3
 8011380:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8011384:	2b00      	cmp	r3, #0
 8011386:	d036      	beq.n	80113f6 <rcl_take+0x8a>
 8011388:	460e      	mov	r6, r1
 801138a:	2900      	cmp	r1, #0
 801138c:	d039      	beq.n	8011402 <rcl_take+0x96>
 801138e:	4615      	mov	r5, r2
 8011390:	2a00      	cmp	r2, #0
 8011392:	d03c      	beq.n	801140e <rcl_take+0xa2>
 8011394:	a802      	add	r0, sp, #8
 8011396:	f002 f9cb 	bl	8013730 <rmw_get_zero_initialized_message_info>
 801139a:	f10d 0c08 	add.w	ip, sp, #8
 801139e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80113a2:	46ae      	mov	lr, r5
 80113a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80113a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80113ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80113b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80113b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80113b8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80113bc:	f04f 0800 	mov.w	r8, #0
 80113c0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80113c4:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 80113c8:	6822      	ldr	r2, [r4, #0]
 80113ca:	462b      	mov	r3, r5
 80113cc:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 80113d0:	9700      	str	r7, [sp, #0]
 80113d2:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80113d6:	4631      	mov	r1, r6
 80113d8:	f003 fa2e 	bl	8014838 <rmw_take_with_info>
 80113dc:	4603      	mov	r3, r0
 80113de:	b9c0      	cbnz	r0, 8011412 <rcl_take+0xa6>
 80113e0:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 80113e4:	f240 1291 	movw	r2, #401	@ 0x191
 80113e8:	2900      	cmp	r1, #0
 80113ea:	bf08      	it	eq
 80113ec:	4613      	moveq	r3, r2
 80113ee:	4618      	mov	r0, r3
 80113f0:	b024      	add	sp, #144	@ 0x90
 80113f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113f6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80113fa:	4618      	mov	r0, r3
 80113fc:	b024      	add	sp, #144	@ 0x90
 80113fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011402:	230b      	movs	r3, #11
 8011404:	e7f3      	b.n	80113ee <rcl_take+0x82>
 8011406:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801140a:	4618      	mov	r0, r3
 801140c:	4770      	bx	lr
 801140e:	ad14      	add	r5, sp, #80	@ 0x50
 8011410:	e7c0      	b.n	8011394 <rcl_take+0x28>
 8011412:	f7ff f877 	bl	8010504 <rcl_convert_rmw_ret_to_rcl_ret>
 8011416:	4603      	mov	r3, r0
 8011418:	e7e9      	b.n	80113ee <rcl_take+0x82>
 801141a:	bf00      	nop

0801141c <rcl_subscription_get_rmw_handle>:
 801141c:	b118      	cbz	r0, 8011426 <rcl_subscription_get_rmw_handle+0xa>
 801141e:	6800      	ldr	r0, [r0, #0]
 8011420:	b108      	cbz	r0, 8011426 <rcl_subscription_get_rmw_handle+0xa>
 8011422:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8011426:	4770      	bx	lr

08011428 <rcl_subscription_is_valid>:
 8011428:	b130      	cbz	r0, 8011438 <rcl_subscription_is_valid+0x10>
 801142a:	6800      	ldr	r0, [r0, #0]
 801142c:	b120      	cbz	r0, 8011438 <rcl_subscription_is_valid+0x10>
 801142e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8011432:	3800      	subs	r0, #0
 8011434:	bf18      	it	ne
 8011436:	2001      	movne	r0, #1
 8011438:	4770      	bx	lr
 801143a:	bf00      	nop

0801143c <rcl_get_system_time>:
 801143c:	4608      	mov	r0, r1
 801143e:	f7fb bb13 	b.w	800ca68 <rcutils_system_time_now>
 8011442:	bf00      	nop

08011444 <rcl_get_steady_time>:
 8011444:	4608      	mov	r0, r1
 8011446:	f7fb bb37 	b.w	800cab8 <rcutils_steady_time_now>
 801144a:	bf00      	nop

0801144c <rcl_get_ros_time>:
 801144c:	7a03      	ldrb	r3, [r0, #8]
 801144e:	b510      	push	{r4, lr}
 8011450:	460c      	mov	r4, r1
 8011452:	b133      	cbz	r3, 8011462 <rcl_get_ros_time+0x16>
 8011454:	2105      	movs	r1, #5
 8011456:	f001 fd53 	bl	8012f00 <__atomic_load_8>
 801145a:	e9c4 0100 	strd	r0, r1, [r4]
 801145e:	2000      	movs	r0, #0
 8011460:	bd10      	pop	{r4, pc}
 8011462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011466:	4608      	mov	r0, r1
 8011468:	f7fb bafe 	b.w	800ca68 <rcutils_system_time_now>

0801146c <rcl_clock_init>:
 801146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801146e:	4605      	mov	r5, r0
 8011470:	4610      	mov	r0, r2
 8011472:	4614      	mov	r4, r2
 8011474:	460e      	mov	r6, r1
 8011476:	f7fb fab7 	bl	800c9e8 <rcutils_allocator_is_valid>
 801147a:	b128      	cbz	r0, 8011488 <rcl_clock_init+0x1c>
 801147c:	2d03      	cmp	r5, #3
 801147e:	d803      	bhi.n	8011488 <rcl_clock_init+0x1c>
 8011480:	e8df f005 	tbb	[pc, r5]
 8011484:	06532e1d 	.word	0x06532e1d
 8011488:	f04f 0c0b 	mov.w	ip, #11
 801148c:	4660      	mov	r0, ip
 801148e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011490:	2e00      	cmp	r6, #0
 8011492:	d0f9      	beq.n	8011488 <rcl_clock_init+0x1c>
 8011494:	2c00      	cmp	r4, #0
 8011496:	d0f7      	beq.n	8011488 <rcl_clock_init+0x1c>
 8011498:	2300      	movs	r3, #0
 801149a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801149e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8011554 <rcl_clock_init+0xe8>
 80114a2:	6133      	str	r3, [r6, #16]
 80114a4:	f106 0514 	add.w	r5, r6, #20
 80114a8:	469c      	mov	ip, r3
 80114aa:	2703      	movs	r7, #3
 80114ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80114ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80114b0:	6823      	ldr	r3, [r4, #0]
 80114b2:	602b      	str	r3, [r5, #0]
 80114b4:	7037      	strb	r7, [r6, #0]
 80114b6:	f8c6 e00c 	str.w	lr, [r6, #12]
 80114ba:	4660      	mov	r0, ip
 80114bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114be:	2e00      	cmp	r6, #0
 80114c0:	d0e2      	beq.n	8011488 <rcl_clock_init+0x1c>
 80114c2:	2300      	movs	r3, #0
 80114c4:	7033      	strb	r3, [r6, #0]
 80114c6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80114ca:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80114ce:	469c      	mov	ip, r3
 80114d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80114d2:	f106 0514 	add.w	r5, r6, #20
 80114d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80114d8:	6823      	ldr	r3, [r4, #0]
 80114da:	602b      	str	r3, [r5, #0]
 80114dc:	4660      	mov	r0, ip
 80114de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114e0:	2e00      	cmp	r6, #0
 80114e2:	d0d1      	beq.n	8011488 <rcl_clock_init+0x1c>
 80114e4:	2c00      	cmp	r4, #0
 80114e6:	d0cf      	beq.n	8011488 <rcl_clock_init+0x1c>
 80114e8:	2700      	movs	r7, #0
 80114ea:	7037      	strb	r7, [r6, #0]
 80114ec:	46a4      	mov	ip, r4
 80114ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80114f2:	f106 0514 	add.w	r5, r6, #20
 80114f6:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80114fa:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80114fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011500:	f8dc 3000 	ldr.w	r3, [ip]
 8011504:	602b      	str	r3, [r5, #0]
 8011506:	6921      	ldr	r1, [r4, #16]
 8011508:	6823      	ldr	r3, [r4, #0]
 801150a:	2010      	movs	r0, #16
 801150c:	4798      	blx	r3
 801150e:	6130      	str	r0, [r6, #16]
 8011510:	b1d0      	cbz	r0, 8011548 <rcl_clock_init+0xdc>
 8011512:	2200      	movs	r2, #0
 8011514:	2300      	movs	r3, #0
 8011516:	e9c0 2300 	strd	r2, r3, [r0]
 801151a:	2301      	movs	r3, #1
 801151c:	7207      	strb	r7, [r0, #8]
 801151e:	4a0c      	ldr	r2, [pc, #48]	@ (8011550 <rcl_clock_init+0xe4>)
 8011520:	7033      	strb	r3, [r6, #0]
 8011522:	46bc      	mov	ip, r7
 8011524:	60f2      	str	r2, [r6, #12]
 8011526:	4660      	mov	r0, ip
 8011528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801152a:	2e00      	cmp	r6, #0
 801152c:	d0ac      	beq.n	8011488 <rcl_clock_init+0x1c>
 801152e:	2c00      	cmp	r4, #0
 8011530:	d0aa      	beq.n	8011488 <rcl_clock_init+0x1c>
 8011532:	2300      	movs	r3, #0
 8011534:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011538:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8011558 <rcl_clock_init+0xec>
 801153c:	6133      	str	r3, [r6, #16]
 801153e:	f106 0514 	add.w	r5, r6, #20
 8011542:	469c      	mov	ip, r3
 8011544:	2702      	movs	r7, #2
 8011546:	e7b1      	b.n	80114ac <rcl_clock_init+0x40>
 8011548:	f04f 0c0a 	mov.w	ip, #10
 801154c:	e79e      	b.n	801148c <rcl_clock_init+0x20>
 801154e:	bf00      	nop
 8011550:	0801144d 	.word	0x0801144d
 8011554:	08011445 	.word	0x08011445
 8011558:	0801143d 	.word	0x0801143d

0801155c <rcl_clock_get_now>:
 801155c:	b140      	cbz	r0, 8011570 <rcl_clock_get_now+0x14>
 801155e:	b139      	cbz	r1, 8011570 <rcl_clock_get_now+0x14>
 8011560:	7803      	ldrb	r3, [r0, #0]
 8011562:	b11b      	cbz	r3, 801156c <rcl_clock_get_now+0x10>
 8011564:	68c3      	ldr	r3, [r0, #12]
 8011566:	b10b      	cbz	r3, 801156c <rcl_clock_get_now+0x10>
 8011568:	6900      	ldr	r0, [r0, #16]
 801156a:	4718      	bx	r3
 801156c:	2001      	movs	r0, #1
 801156e:	4770      	bx	lr
 8011570:	200b      	movs	r0, #11
 8011572:	4770      	bx	lr

08011574 <rcl_timer_call>:
 8011574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011578:	b087      	sub	sp, #28
 801157a:	2800      	cmp	r0, #0
 801157c:	d06d      	beq.n	801165a <rcl_timer_call+0xe6>
 801157e:	6803      	ldr	r3, [r0, #0]
 8011580:	4604      	mov	r4, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d063      	beq.n	801164e <rcl_timer_call+0xda>
 8011586:	f3bf 8f5b 	dmb	ish
 801158a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801158e:	f3bf 8f5b 	dmb	ish
 8011592:	2b00      	cmp	r3, #0
 8011594:	d150      	bne.n	8011638 <rcl_timer_call+0xc4>
 8011596:	6803      	ldr	r3, [r0, #0]
 8011598:	a904      	add	r1, sp, #16
 801159a:	6818      	ldr	r0, [r3, #0]
 801159c:	f7ff ffde 	bl	801155c <rcl_clock_get_now>
 80115a0:	4605      	mov	r5, r0
 80115a2:	2800      	cmp	r0, #0
 80115a4:	d14a      	bne.n	801163c <rcl_timer_call+0xc8>
 80115a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	db4a      	blt.n	8011644 <rcl_timer_call+0xd0>
 80115ae:	6820      	ldr	r0, [r4, #0]
 80115b0:	f04f 0a05 	mov.w	sl, #5
 80115b4:	f8cd a000 	str.w	sl, [sp]
 80115b8:	3020      	adds	r0, #32
 80115ba:	f001 fd0d 	bl	8012fd8 <__atomic_exchange_8>
 80115be:	6823      	ldr	r3, [r4, #0]
 80115c0:	f3bf 8f5b 	dmb	ish
 80115c4:	4680      	mov	r8, r0
 80115c6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80115ca:	f3bf 8f5b 	dmb	ish
 80115ce:	6820      	ldr	r0, [r4, #0]
 80115d0:	4689      	mov	r9, r1
 80115d2:	3028      	adds	r0, #40	@ 0x28
 80115d4:	4651      	mov	r1, sl
 80115d6:	f001 fc93 	bl	8012f00 <__atomic_load_8>
 80115da:	4606      	mov	r6, r0
 80115dc:	6820      	ldr	r0, [r4, #0]
 80115de:	460f      	mov	r7, r1
 80115e0:	3018      	adds	r0, #24
 80115e2:	4651      	mov	r1, sl
 80115e4:	f001 fc8c 	bl	8012f00 <__atomic_load_8>
 80115e8:	1836      	adds	r6, r6, r0
 80115ea:	4602      	mov	r2, r0
 80115ec:	4682      	mov	sl, r0
 80115ee:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80115f2:	eb47 0701 	adc.w	r7, r7, r1
 80115f6:	4286      	cmp	r6, r0
 80115f8:	460b      	mov	r3, r1
 80115fa:	eb77 010c 	sbcs.w	r1, r7, ip
 80115fe:	da04      	bge.n	801160a <rcl_timer_call+0x96>
 8011600:	ea53 0102 	orrs.w	r1, r3, r2
 8011604:	d12e      	bne.n	8011664 <rcl_timer_call+0xf0>
 8011606:	4606      	mov	r6, r0
 8011608:	4667      	mov	r7, ip
 801160a:	6820      	ldr	r0, [r4, #0]
 801160c:	2105      	movs	r1, #5
 801160e:	4632      	mov	r2, r6
 8011610:	463b      	mov	r3, r7
 8011612:	3028      	adds	r0, #40	@ 0x28
 8011614:	9100      	str	r1, [sp, #0]
 8011616:	f001 fca9 	bl	8012f6c <__atomic_store_8>
 801161a:	f1bb 0f00 	cmp.w	fp, #0
 801161e:	d00d      	beq.n	801163c <rcl_timer_call+0xc8>
 8011620:	9a04      	ldr	r2, [sp, #16]
 8011622:	9b05      	ldr	r3, [sp, #20]
 8011624:	ebb2 0208 	subs.w	r2, r2, r8
 8011628:	4620      	mov	r0, r4
 801162a:	eb63 0309 	sbc.w	r3, r3, r9
 801162e:	47d8      	blx	fp
 8011630:	4628      	mov	r0, r5
 8011632:	b007      	add	sp, #28
 8011634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011638:	f240 3521 	movw	r5, #801	@ 0x321
 801163c:	4628      	mov	r0, r5
 801163e:	b007      	add	sp, #28
 8011640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011644:	2501      	movs	r5, #1
 8011646:	4628      	mov	r0, r5
 8011648:	b007      	add	sp, #28
 801164a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801164e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8011652:	4628      	mov	r0, r5
 8011654:	b007      	add	sp, #28
 8011656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801165a:	250b      	movs	r5, #11
 801165c:	4628      	mov	r0, r5
 801165e:	b007      	add	sp, #28
 8011660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011664:	1b80      	subs	r0, r0, r6
 8011666:	eb6c 0107 	sbc.w	r1, ip, r7
 801166a:	3801      	subs	r0, #1
 801166c:	f161 0100 	sbc.w	r1, r1, #0
 8011670:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011674:	f7ef faba 	bl	8000bec <__aeabi_ldivmod>
 8011678:	9b02      	ldr	r3, [sp, #8]
 801167a:	3001      	adds	r0, #1
 801167c:	f141 0100 	adc.w	r1, r1, #0
 8011680:	fb00 f303 	mul.w	r3, r0, r3
 8011684:	fb01 330a 	mla	r3, r1, sl, r3
 8011688:	fba0 0a0a 	umull	r0, sl, r0, sl
 801168c:	1986      	adds	r6, r0, r6
 801168e:	4453      	add	r3, sl
 8011690:	eb43 0707 	adc.w	r7, r3, r7
 8011694:	e7b9      	b.n	801160a <rcl_timer_call+0x96>
 8011696:	bf00      	nop

08011698 <rcl_timer_is_ready>:
 8011698:	b570      	push	{r4, r5, r6, lr}
 801169a:	b082      	sub	sp, #8
 801169c:	b378      	cbz	r0, 80116fe <rcl_timer_is_ready+0x66>
 801169e:	6803      	ldr	r3, [r0, #0]
 80116a0:	4604      	mov	r4, r0
 80116a2:	b383      	cbz	r3, 8011706 <rcl_timer_is_ready+0x6e>
 80116a4:	460d      	mov	r5, r1
 80116a6:	b351      	cbz	r1, 80116fe <rcl_timer_is_ready+0x66>
 80116a8:	f3bf 8f5b 	dmb	ish
 80116ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80116b0:	f3bf 8f5b 	dmb	ish
 80116b4:	b953      	cbnz	r3, 80116cc <rcl_timer_is_ready+0x34>
 80116b6:	6803      	ldr	r3, [r0, #0]
 80116b8:	4669      	mov	r1, sp
 80116ba:	6818      	ldr	r0, [r3, #0]
 80116bc:	f7ff ff4e 	bl	801155c <rcl_clock_get_now>
 80116c0:	4606      	mov	r6, r0
 80116c2:	b140      	cbz	r0, 80116d6 <rcl_timer_is_ready+0x3e>
 80116c4:	f240 3321 	movw	r3, #801	@ 0x321
 80116c8:	4298      	cmp	r0, r3
 80116ca:	d101      	bne.n	80116d0 <rcl_timer_is_ready+0x38>
 80116cc:	2600      	movs	r6, #0
 80116ce:	702e      	strb	r6, [r5, #0]
 80116d0:	4630      	mov	r0, r6
 80116d2:	b002      	add	sp, #8
 80116d4:	bd70      	pop	{r4, r5, r6, pc}
 80116d6:	6820      	ldr	r0, [r4, #0]
 80116d8:	2105      	movs	r1, #5
 80116da:	3028      	adds	r0, #40	@ 0x28
 80116dc:	f001 fc10 	bl	8012f00 <__atomic_load_8>
 80116e0:	9b00      	ldr	r3, [sp, #0]
 80116e2:	1ac0      	subs	r0, r0, r3
 80116e4:	9b01      	ldr	r3, [sp, #4]
 80116e6:	eb61 0103 	sbc.w	r1, r1, r3
 80116ea:	2801      	cmp	r0, #1
 80116ec:	f171 0300 	sbcs.w	r3, r1, #0
 80116f0:	bfb4      	ite	lt
 80116f2:	2301      	movlt	r3, #1
 80116f4:	2300      	movge	r3, #0
 80116f6:	4630      	mov	r0, r6
 80116f8:	702b      	strb	r3, [r5, #0]
 80116fa:	b002      	add	sp, #8
 80116fc:	bd70      	pop	{r4, r5, r6, pc}
 80116fe:	260b      	movs	r6, #11
 8011700:	4630      	mov	r0, r6
 8011702:	b002      	add	sp, #8
 8011704:	bd70      	pop	{r4, r5, r6, pc}
 8011706:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801170a:	e7e1      	b.n	80116d0 <rcl_timer_is_ready+0x38>

0801170c <rcl_timer_get_time_until_next_call>:
 801170c:	b570      	push	{r4, r5, r6, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	b330      	cbz	r0, 8011760 <rcl_timer_get_time_until_next_call+0x54>
 8011712:	6803      	ldr	r3, [r0, #0]
 8011714:	4604      	mov	r4, r0
 8011716:	b33b      	cbz	r3, 8011768 <rcl_timer_get_time_until_next_call+0x5c>
 8011718:	460d      	mov	r5, r1
 801171a:	b309      	cbz	r1, 8011760 <rcl_timer_get_time_until_next_call+0x54>
 801171c:	f3bf 8f5b 	dmb	ish
 8011720:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011724:	f3bf 8f5b 	dmb	ish
 8011728:	b9ab      	cbnz	r3, 8011756 <rcl_timer_get_time_until_next_call+0x4a>
 801172a:	6803      	ldr	r3, [r0, #0]
 801172c:	4669      	mov	r1, sp
 801172e:	6818      	ldr	r0, [r3, #0]
 8011730:	f7ff ff14 	bl	801155c <rcl_clock_get_now>
 8011734:	4606      	mov	r6, r0
 8011736:	b958      	cbnz	r0, 8011750 <rcl_timer_get_time_until_next_call+0x44>
 8011738:	6820      	ldr	r0, [r4, #0]
 801173a:	2105      	movs	r1, #5
 801173c:	3028      	adds	r0, #40	@ 0x28
 801173e:	f001 fbdf 	bl	8012f00 <__atomic_load_8>
 8011742:	9b00      	ldr	r3, [sp, #0]
 8011744:	1ac0      	subs	r0, r0, r3
 8011746:	9b01      	ldr	r3, [sp, #4]
 8011748:	6028      	str	r0, [r5, #0]
 801174a:	eb61 0103 	sbc.w	r1, r1, r3
 801174e:	6069      	str	r1, [r5, #4]
 8011750:	4630      	mov	r0, r6
 8011752:	b002      	add	sp, #8
 8011754:	bd70      	pop	{r4, r5, r6, pc}
 8011756:	f240 3621 	movw	r6, #801	@ 0x321
 801175a:	4630      	mov	r0, r6
 801175c:	b002      	add	sp, #8
 801175e:	bd70      	pop	{r4, r5, r6, pc}
 8011760:	260b      	movs	r6, #11
 8011762:	4630      	mov	r0, r6
 8011764:	b002      	add	sp, #8
 8011766:	bd70      	pop	{r4, r5, r6, pc}
 8011768:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801176c:	e7f0      	b.n	8011750 <rcl_timer_get_time_until_next_call+0x44>
 801176e:	bf00      	nop

08011770 <rcl_timer_get_guard_condition>:
 8011770:	b130      	cbz	r0, 8011780 <rcl_timer_get_guard_condition+0x10>
 8011772:	6800      	ldr	r0, [r0, #0]
 8011774:	b120      	cbz	r0, 8011780 <rcl_timer_get_guard_condition+0x10>
 8011776:	68c3      	ldr	r3, [r0, #12]
 8011778:	b10b      	cbz	r3, 801177e <rcl_timer_get_guard_condition+0xe>
 801177a:	3008      	adds	r0, #8
 801177c:	4770      	bx	lr
 801177e:	4618      	mov	r0, r3
 8011780:	4770      	bx	lr
 8011782:	bf00      	nop

08011784 <rcl_validate_enclave_name_with_size>:
 8011784:	b378      	cbz	r0, 80117e6 <rcl_validate_enclave_name_with_size+0x62>
 8011786:	b570      	push	{r4, r5, r6, lr}
 8011788:	4615      	mov	r5, r2
 801178a:	b0c2      	sub	sp, #264	@ 0x108
 801178c:	b302      	cbz	r2, 80117d0 <rcl_validate_enclave_name_with_size+0x4c>
 801178e:	461e      	mov	r6, r3
 8011790:	466a      	mov	r2, sp
 8011792:	ab01      	add	r3, sp, #4
 8011794:	460c      	mov	r4, r1
 8011796:	f002 f849 	bl	801382c <rmw_validate_namespace_with_size>
 801179a:	4684      	mov	ip, r0
 801179c:	b9e8      	cbnz	r0, 80117da <rcl_validate_enclave_name_with_size+0x56>
 801179e:	9b00      	ldr	r3, [sp, #0]
 80117a0:	b923      	cbnz	r3, 80117ac <rcl_validate_enclave_name_with_size+0x28>
 80117a2:	2300      	movs	r3, #0
 80117a4:	602b      	str	r3, [r5, #0]
 80117a6:	4660      	mov	r0, ip
 80117a8:	b042      	add	sp, #264	@ 0x108
 80117aa:	bd70      	pop	{r4, r5, r6, pc}
 80117ac:	2b07      	cmp	r3, #7
 80117ae:	d007      	beq.n	80117c0 <rcl_validate_enclave_name_with_size+0x3c>
 80117b0:	1e5a      	subs	r2, r3, #1
 80117b2:	2a05      	cmp	r2, #5
 80117b4:	d833      	bhi.n	801181e <rcl_validate_enclave_name_with_size+0x9a>
 80117b6:	e8df f002 	tbb	[pc, r2]
 80117ba:	2c2f      	.short	0x2c2f
 80117bc:	1a232629 	.word	0x1a232629
 80117c0:	2cff      	cmp	r4, #255	@ 0xff
 80117c2:	d9ee      	bls.n	80117a2 <rcl_validate_enclave_name_with_size+0x1e>
 80117c4:	602b      	str	r3, [r5, #0]
 80117c6:	2e00      	cmp	r6, #0
 80117c8:	d0ed      	beq.n	80117a6 <rcl_validate_enclave_name_with_size+0x22>
 80117ca:	23fe      	movs	r3, #254	@ 0xfe
 80117cc:	6033      	str	r3, [r6, #0]
 80117ce:	e7ea      	b.n	80117a6 <rcl_validate_enclave_name_with_size+0x22>
 80117d0:	f04f 0c0b 	mov.w	ip, #11
 80117d4:	4660      	mov	r0, ip
 80117d6:	b042      	add	sp, #264	@ 0x108
 80117d8:	bd70      	pop	{r4, r5, r6, pc}
 80117da:	f7fe fe93 	bl	8010504 <rcl_convert_rmw_ret_to_rcl_ret>
 80117de:	4684      	mov	ip, r0
 80117e0:	4660      	mov	r0, ip
 80117e2:	b042      	add	sp, #264	@ 0x108
 80117e4:	bd70      	pop	{r4, r5, r6, pc}
 80117e6:	f04f 0c0b 	mov.w	ip, #11
 80117ea:	4660      	mov	r0, ip
 80117ec:	4770      	bx	lr
 80117ee:	2306      	movs	r3, #6
 80117f0:	602b      	str	r3, [r5, #0]
 80117f2:	2e00      	cmp	r6, #0
 80117f4:	d0d7      	beq.n	80117a6 <rcl_validate_enclave_name_with_size+0x22>
 80117f6:	9b01      	ldr	r3, [sp, #4]
 80117f8:	6033      	str	r3, [r6, #0]
 80117fa:	4660      	mov	r0, ip
 80117fc:	b042      	add	sp, #264	@ 0x108
 80117fe:	bd70      	pop	{r4, r5, r6, pc}
 8011800:	2305      	movs	r3, #5
 8011802:	602b      	str	r3, [r5, #0]
 8011804:	e7f5      	b.n	80117f2 <rcl_validate_enclave_name_with_size+0x6e>
 8011806:	2304      	movs	r3, #4
 8011808:	602b      	str	r3, [r5, #0]
 801180a:	e7f2      	b.n	80117f2 <rcl_validate_enclave_name_with_size+0x6e>
 801180c:	2303      	movs	r3, #3
 801180e:	602b      	str	r3, [r5, #0]
 8011810:	e7ef      	b.n	80117f2 <rcl_validate_enclave_name_with_size+0x6e>
 8011812:	2302      	movs	r3, #2
 8011814:	602b      	str	r3, [r5, #0]
 8011816:	e7ec      	b.n	80117f2 <rcl_validate_enclave_name_with_size+0x6e>
 8011818:	2301      	movs	r3, #1
 801181a:	602b      	str	r3, [r5, #0]
 801181c:	e7e9      	b.n	80117f2 <rcl_validate_enclave_name_with_size+0x6e>
 801181e:	4a04      	ldr	r2, [pc, #16]	@ (8011830 <rcl_validate_enclave_name_with_size+0xac>)
 8011820:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011824:	a802      	add	r0, sp, #8
 8011826:	f001 fd25 	bl	8013274 <rcutils_snprintf>
 801182a:	f04f 0c01 	mov.w	ip, #1
 801182e:	e7ba      	b.n	80117a6 <rcl_validate_enclave_name_with_size+0x22>
 8011830:	08018e68 	.word	0x08018e68

08011834 <rcl_validate_enclave_name>:
 8011834:	b168      	cbz	r0, 8011852 <rcl_validate_enclave_name+0x1e>
 8011836:	b570      	push	{r4, r5, r6, lr}
 8011838:	460d      	mov	r5, r1
 801183a:	4616      	mov	r6, r2
 801183c:	4604      	mov	r4, r0
 801183e:	f7ee fcd9 	bl	80001f4 <strlen>
 8011842:	4633      	mov	r3, r6
 8011844:	4601      	mov	r1, r0
 8011846:	462a      	mov	r2, r5
 8011848:	4620      	mov	r0, r4
 801184a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801184e:	f7ff bf99 	b.w	8011784 <rcl_validate_enclave_name_with_size>
 8011852:	200b      	movs	r0, #11
 8011854:	4770      	bx	lr
 8011856:	bf00      	nop

08011858 <rcl_get_zero_initialized_wait_set>:
 8011858:	b510      	push	{r4, lr}
 801185a:	4c08      	ldr	r4, [pc, #32]	@ (801187c <rcl_get_zero_initialized_wait_set+0x24>)
 801185c:	4686      	mov	lr, r0
 801185e:	4684      	mov	ip, r0
 8011860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011862:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011868:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801186c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801186e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011872:	6823      	ldr	r3, [r4, #0]
 8011874:	f8cc 3000 	str.w	r3, [ip]
 8011878:	4670      	mov	r0, lr
 801187a:	bd10      	pop	{r4, pc}
 801187c:	08018ec8 	.word	0x08018ec8

08011880 <rcl_wait_set_is_valid>:
 8011880:	b118      	cbz	r0, 801188a <rcl_wait_set_is_valid+0xa>
 8011882:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8011884:	3800      	subs	r0, #0
 8011886:	bf18      	it	ne
 8011888:	2001      	movne	r0, #1
 801188a:	4770      	bx	lr

0801188c <rcl_wait_set_fini>:
 801188c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011890:	b082      	sub	sp, #8
 8011892:	2800      	cmp	r0, #0
 8011894:	f000 8095 	beq.w	80119c2 <rcl_wait_set_fini+0x136>
 8011898:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801189a:	4604      	mov	r4, r0
 801189c:	2e00      	cmp	r6, #0
 801189e:	f000 808c 	beq.w	80119ba <rcl_wait_set_fini+0x12e>
 80118a2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80118a4:	f003 f9b6 	bl	8014c14 <rmw_destroy_wait_set>
 80118a8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80118aa:	1e06      	subs	r6, r0, #0
 80118ac:	bf18      	it	ne
 80118ae:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80118b2:	2d00      	cmp	r5, #0
 80118b4:	f000 8081 	beq.w	80119ba <rcl_wait_set_fini+0x12e>
 80118b8:	6820      	ldr	r0, [r4, #0]
 80118ba:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80118be:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80118c0:	2700      	movs	r7, #0
 80118c2:	6067      	str	r7, [r4, #4]
 80118c4:	602f      	str	r7, [r5, #0]
 80118c6:	b120      	cbz	r0, 80118d2 <rcl_wait_set_fini+0x46>
 80118c8:	9101      	str	r1, [sp, #4]
 80118ca:	47c0      	blx	r8
 80118cc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80118ce:	9901      	ldr	r1, [sp, #4]
 80118d0:	6027      	str	r7, [r4, #0]
 80118d2:	68a8      	ldr	r0, [r5, #8]
 80118d4:	b120      	cbz	r0, 80118e0 <rcl_wait_set_fini+0x54>
 80118d6:	47c0      	blx	r8
 80118d8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80118da:	2300      	movs	r3, #0
 80118dc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80118e0:	68a0      	ldr	r0, [r4, #8]
 80118e2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80118e4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80118e6:	f04f 0800 	mov.w	r8, #0
 80118ea:	f8c4 800c 	str.w	r8, [r4, #12]
 80118ee:	f8c5 800c 	str.w	r8, [r5, #12]
 80118f2:	b128      	cbz	r0, 8011900 <rcl_wait_set_fini+0x74>
 80118f4:	47b8      	blx	r7
 80118f6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80118f8:	f8c4 8008 	str.w	r8, [r4, #8]
 80118fc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80118fe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011900:	6968      	ldr	r0, [r5, #20]
 8011902:	f04f 0800 	mov.w	r8, #0
 8011906:	f8c5 8010 	str.w	r8, [r5, #16]
 801190a:	b128      	cbz	r0, 8011918 <rcl_wait_set_fini+0x8c>
 801190c:	47b8      	blx	r7
 801190e:	f8c5 8014 	str.w	r8, [r5, #20]
 8011912:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011914:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011916:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011918:	6920      	ldr	r0, [r4, #16]
 801191a:	f04f 0800 	mov.w	r8, #0
 801191e:	f8c4 8014 	str.w	r8, [r4, #20]
 8011922:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8011926:	b128      	cbz	r0, 8011934 <rcl_wait_set_fini+0xa8>
 8011928:	47b8      	blx	r7
 801192a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801192c:	f8c4 8010 	str.w	r8, [r4, #16]
 8011930:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011932:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011934:	69a0      	ldr	r0, [r4, #24]
 8011936:	f04f 0800 	mov.w	r8, #0
 801193a:	f8c4 801c 	str.w	r8, [r4, #28]
 801193e:	f8c5 8018 	str.w	r8, [r5, #24]
 8011942:	b128      	cbz	r0, 8011950 <rcl_wait_set_fini+0xc4>
 8011944:	9101      	str	r1, [sp, #4]
 8011946:	47b8      	blx	r7
 8011948:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801194a:	9901      	ldr	r1, [sp, #4]
 801194c:	f8c4 8018 	str.w	r8, [r4, #24]
 8011950:	6a28      	ldr	r0, [r5, #32]
 8011952:	b120      	cbz	r0, 801195e <rcl_wait_set_fini+0xd2>
 8011954:	47b8      	blx	r7
 8011956:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011958:	2300      	movs	r3, #0
 801195a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801195e:	6a20      	ldr	r0, [r4, #32]
 8011960:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011964:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011966:	2700      	movs	r7, #0
 8011968:	6267      	str	r7, [r4, #36]	@ 0x24
 801196a:	626f      	str	r7, [r5, #36]	@ 0x24
 801196c:	b120      	cbz	r0, 8011978 <rcl_wait_set_fini+0xec>
 801196e:	9101      	str	r1, [sp, #4]
 8011970:	47c0      	blx	r8
 8011972:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011974:	9901      	ldr	r1, [sp, #4]
 8011976:	6227      	str	r7, [r4, #32]
 8011978:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801197a:	b120      	cbz	r0, 8011986 <rcl_wait_set_fini+0xfa>
 801197c:	47c0      	blx	r8
 801197e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011980:	2300      	movs	r3, #0
 8011982:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8011986:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011988:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801198c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801198e:	2700      	movs	r7, #0
 8011990:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8011992:	632f      	str	r7, [r5, #48]	@ 0x30
 8011994:	b120      	cbz	r0, 80119a0 <rcl_wait_set_fini+0x114>
 8011996:	9101      	str	r1, [sp, #4]
 8011998:	47c0      	blx	r8
 801199a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801199c:	9901      	ldr	r1, [sp, #4]
 801199e:	62a7      	str	r7, [r4, #40]	@ 0x28
 80119a0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80119a2:	b120      	cbz	r0, 80119ae <rcl_wait_set_fini+0x122>
 80119a4:	47c0      	blx	r8
 80119a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80119a8:	2300      	movs	r3, #0
 80119aa:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80119ae:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80119b0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80119b2:	4628      	mov	r0, r5
 80119b4:	4798      	blx	r3
 80119b6:	2300      	movs	r3, #0
 80119b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80119ba:	4630      	mov	r0, r6
 80119bc:	b002      	add	sp, #8
 80119be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119c2:	260b      	movs	r6, #11
 80119c4:	4630      	mov	r0, r6
 80119c6:	b002      	add	sp, #8
 80119c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119cc <rcl_wait_set_add_subscription>:
 80119cc:	b318      	cbz	r0, 8011a16 <rcl_wait_set_add_subscription+0x4a>
 80119ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80119d0:	b570      	push	{r4, r5, r6, lr}
 80119d2:	4604      	mov	r4, r0
 80119d4:	b30b      	cbz	r3, 8011a1a <rcl_wait_set_add_subscription+0x4e>
 80119d6:	b319      	cbz	r1, 8011a20 <rcl_wait_set_add_subscription+0x54>
 80119d8:	681d      	ldr	r5, [r3, #0]
 80119da:	6840      	ldr	r0, [r0, #4]
 80119dc:	4285      	cmp	r5, r0
 80119de:	d217      	bcs.n	8011a10 <rcl_wait_set_add_subscription+0x44>
 80119e0:	6820      	ldr	r0, [r4, #0]
 80119e2:	1c6e      	adds	r6, r5, #1
 80119e4:	601e      	str	r6, [r3, #0]
 80119e6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80119ea:	b102      	cbz	r2, 80119ee <rcl_wait_set_add_subscription+0x22>
 80119ec:	6015      	str	r5, [r2, #0]
 80119ee:	4608      	mov	r0, r1
 80119f0:	f7ff fd14 	bl	801141c <rcl_subscription_get_rmw_handle>
 80119f4:	b150      	cbz	r0, 8011a0c <rcl_wait_set_add_subscription+0x40>
 80119f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119f8:	6842      	ldr	r2, [r0, #4]
 80119fa:	689b      	ldr	r3, [r3, #8]
 80119fc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a00:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011a02:	6853      	ldr	r3, [r2, #4]
 8011a04:	3301      	adds	r3, #1
 8011a06:	2000      	movs	r0, #0
 8011a08:	6053      	str	r3, [r2, #4]
 8011a0a:	bd70      	pop	{r4, r5, r6, pc}
 8011a0c:	2001      	movs	r0, #1
 8011a0e:	bd70      	pop	{r4, r5, r6, pc}
 8011a10:	f240 3086 	movw	r0, #902	@ 0x386
 8011a14:	bd70      	pop	{r4, r5, r6, pc}
 8011a16:	200b      	movs	r0, #11
 8011a18:	4770      	bx	lr
 8011a1a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011a1e:	bd70      	pop	{r4, r5, r6, pc}
 8011a20:	200b      	movs	r0, #11
 8011a22:	bd70      	pop	{r4, r5, r6, pc}

08011a24 <rcl_wait_set_clear>:
 8011a24:	2800      	cmp	r0, #0
 8011a26:	d073      	beq.n	8011b10 <rcl_wait_set_clear+0xec>
 8011a28:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011a2a:	b510      	push	{r4, lr}
 8011a2c:	4604      	mov	r4, r0
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d070      	beq.n	8011b14 <rcl_wait_set_clear+0xf0>
 8011a32:	6800      	ldr	r0, [r0, #0]
 8011a34:	b138      	cbz	r0, 8011a46 <rcl_wait_set_clear+0x22>
 8011a36:	6862      	ldr	r2, [r4, #4]
 8011a38:	2100      	movs	r1, #0
 8011a3a:	0092      	lsls	r2, r2, #2
 8011a3c:	f005 fed8 	bl	80177f0 <memset>
 8011a40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a42:	2200      	movs	r2, #0
 8011a44:	601a      	str	r2, [r3, #0]
 8011a46:	68a0      	ldr	r0, [r4, #8]
 8011a48:	b138      	cbz	r0, 8011a5a <rcl_wait_set_clear+0x36>
 8011a4a:	68e2      	ldr	r2, [r4, #12]
 8011a4c:	2100      	movs	r1, #0
 8011a4e:	0092      	lsls	r2, r2, #2
 8011a50:	f005 fece 	bl	80177f0 <memset>
 8011a54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a56:	2200      	movs	r2, #0
 8011a58:	60da      	str	r2, [r3, #12]
 8011a5a:	69a0      	ldr	r0, [r4, #24]
 8011a5c:	b138      	cbz	r0, 8011a6e <rcl_wait_set_clear+0x4a>
 8011a5e:	69e2      	ldr	r2, [r4, #28]
 8011a60:	2100      	movs	r1, #0
 8011a62:	0092      	lsls	r2, r2, #2
 8011a64:	f005 fec4 	bl	80177f0 <memset>
 8011a68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	619a      	str	r2, [r3, #24]
 8011a6e:	6a20      	ldr	r0, [r4, #32]
 8011a70:	b138      	cbz	r0, 8011a82 <rcl_wait_set_clear+0x5e>
 8011a72:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011a74:	2100      	movs	r1, #0
 8011a76:	0092      	lsls	r2, r2, #2
 8011a78:	f005 feba 	bl	80177f0 <memset>
 8011a7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a7e:	2200      	movs	r2, #0
 8011a80:	625a      	str	r2, [r3, #36]	@ 0x24
 8011a82:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011a84:	b138      	cbz	r0, 8011a96 <rcl_wait_set_clear+0x72>
 8011a86:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011a88:	2100      	movs	r1, #0
 8011a8a:	0092      	lsls	r2, r2, #2
 8011a8c:	f005 feb0 	bl	80177f0 <memset>
 8011a90:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a92:	2200      	movs	r2, #0
 8011a94:	631a      	str	r2, [r3, #48]	@ 0x30
 8011a96:	6920      	ldr	r0, [r4, #16]
 8011a98:	b138      	cbz	r0, 8011aaa <rcl_wait_set_clear+0x86>
 8011a9a:	6962      	ldr	r2, [r4, #20]
 8011a9c:	2100      	movs	r1, #0
 8011a9e:	0092      	lsls	r2, r2, #2
 8011aa0:	f005 fea6 	bl	80177f0 <memset>
 8011aa4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	641a      	str	r2, [r3, #64]	@ 0x40
 8011aaa:	6898      	ldr	r0, [r3, #8]
 8011aac:	b138      	cbz	r0, 8011abe <rcl_wait_set_clear+0x9a>
 8011aae:	685a      	ldr	r2, [r3, #4]
 8011ab0:	2100      	movs	r1, #0
 8011ab2:	0092      	lsls	r2, r2, #2
 8011ab4:	f005 fe9c 	bl	80177f0 <memset>
 8011ab8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011aba:	2200      	movs	r2, #0
 8011abc:	605a      	str	r2, [r3, #4]
 8011abe:	6958      	ldr	r0, [r3, #20]
 8011ac0:	b138      	cbz	r0, 8011ad2 <rcl_wait_set_clear+0xae>
 8011ac2:	691a      	ldr	r2, [r3, #16]
 8011ac4:	2100      	movs	r1, #0
 8011ac6:	0092      	lsls	r2, r2, #2
 8011ac8:	f005 fe92 	bl	80177f0 <memset>
 8011acc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011ace:	2200      	movs	r2, #0
 8011ad0:	611a      	str	r2, [r3, #16]
 8011ad2:	6a18      	ldr	r0, [r3, #32]
 8011ad4:	b138      	cbz	r0, 8011ae6 <rcl_wait_set_clear+0xc2>
 8011ad6:	69da      	ldr	r2, [r3, #28]
 8011ad8:	2100      	movs	r1, #0
 8011ada:	0092      	lsls	r2, r2, #2
 8011adc:	f005 fe88 	bl	80177f0 <memset>
 8011ae0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	61da      	str	r2, [r3, #28]
 8011ae6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8011ae8:	b138      	cbz	r0, 8011afa <rcl_wait_set_clear+0xd6>
 8011aea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011aec:	2100      	movs	r1, #0
 8011aee:	0092      	lsls	r2, r2, #2
 8011af0:	f005 fe7e 	bl	80177f0 <memset>
 8011af4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011af6:	2200      	movs	r2, #0
 8011af8:	629a      	str	r2, [r3, #40]	@ 0x28
 8011afa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011afc:	b138      	cbz	r0, 8011b0e <rcl_wait_set_clear+0xea>
 8011afe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b00:	2100      	movs	r1, #0
 8011b02:	0092      	lsls	r2, r2, #2
 8011b04:	f005 fe74 	bl	80177f0 <memset>
 8011b08:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011b0a:	2000      	movs	r0, #0
 8011b0c:	6358      	str	r0, [r3, #52]	@ 0x34
 8011b0e:	bd10      	pop	{r4, pc}
 8011b10:	200b      	movs	r0, #11
 8011b12:	4770      	bx	lr
 8011b14:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011b18:	bd10      	pop	{r4, pc}
 8011b1a:	bf00      	nop

08011b1c <rcl_wait_set_resize>:
 8011b1c:	2800      	cmp	r0, #0
 8011b1e:	f000 8185 	beq.w	8011e2c <rcl_wait_set_resize+0x310>
 8011b22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b26:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8011b28:	b083      	sub	sp, #12
 8011b2a:	4605      	mov	r5, r0
 8011b2c:	2c00      	cmp	r4, #0
 8011b2e:	f000 817f 	beq.w	8011e30 <rcl_wait_set_resize+0x314>
 8011b32:	f04f 0900 	mov.w	r9, #0
 8011b36:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8011b3a:	461f      	mov	r7, r3
 8011b3c:	4688      	mov	r8, r1
 8011b3e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8011b42:	4616      	mov	r6, r2
 8011b44:	f8c0 9004 	str.w	r9, [r0, #4]
 8011b48:	f8c4 9000 	str.w	r9, [r4]
 8011b4c:	2900      	cmp	r1, #0
 8011b4e:	f000 80bd 	beq.w	8011ccc <rcl_wait_set_resize+0x1b0>
 8011b52:	008c      	lsls	r4, r1, #2
 8011b54:	6800      	ldr	r0, [r0, #0]
 8011b56:	9301      	str	r3, [sp, #4]
 8011b58:	4652      	mov	r2, sl
 8011b5a:	4621      	mov	r1, r4
 8011b5c:	4798      	blx	r3
 8011b5e:	9b01      	ldr	r3, [sp, #4]
 8011b60:	6028      	str	r0, [r5, #0]
 8011b62:	2800      	cmp	r0, #0
 8011b64:	f000 80cb 	beq.w	8011cfe <rcl_wait_set_resize+0x1e2>
 8011b68:	4622      	mov	r2, r4
 8011b6a:	4649      	mov	r1, r9
 8011b6c:	9301      	str	r3, [sp, #4]
 8011b6e:	f005 fe3f 	bl	80177f0 <memset>
 8011b72:	f8c5 8004 	str.w	r8, [r5, #4]
 8011b76:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8011b7a:	9b01      	ldr	r3, [sp, #4]
 8011b7c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8011b80:	f8c8 9004 	str.w	r9, [r8, #4]
 8011b84:	4652      	mov	r2, sl
 8011b86:	4621      	mov	r1, r4
 8011b88:	4798      	blx	r3
 8011b8a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011b8c:	f8c8 0008 	str.w	r0, [r8, #8]
 8011b90:	689b      	ldr	r3, [r3, #8]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	f000 80ac 	beq.w	8011cf0 <rcl_wait_set_resize+0x1d4>
 8011b98:	4622      	mov	r2, r4
 8011b9a:	4649      	mov	r1, r9
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f005 fe27 	bl	80177f0 <memset>
 8011ba2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011ba4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011ba8:	f04f 0800 	mov.w	r8, #0
 8011bac:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8011bb0:	f8c5 800c 	str.w	r8, [r5, #12]
 8011bb4:	f8c4 800c 	str.w	r8, [r4, #12]
 8011bb8:	2e00      	cmp	r6, #0
 8011bba:	f040 80a4 	bne.w	8011d06 <rcl_wait_set_resize+0x1ea>
 8011bbe:	68a8      	ldr	r0, [r5, #8]
 8011bc0:	b128      	cbz	r0, 8011bce <rcl_wait_set_resize+0xb2>
 8011bc2:	4649      	mov	r1, r9
 8011bc4:	4790      	blx	r2
 8011bc6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011bc8:	60ae      	str	r6, [r5, #8]
 8011bca:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011bce:	f04f 0800 	mov.w	r8, #0
 8011bd2:	19f6      	adds	r6, r6, r7
 8011bd4:	f8c4 8010 	str.w	r8, [r4, #16]
 8011bd8:	f040 80ac 	bne.w	8011d34 <rcl_wait_set_resize+0x218>
 8011bdc:	6960      	ldr	r0, [r4, #20]
 8011bde:	b130      	cbz	r0, 8011bee <rcl_wait_set_resize+0xd2>
 8011be0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8011be2:	4649      	mov	r1, r9
 8011be4:	4798      	blx	r3
 8011be6:	6166      	str	r6, [r4, #20]
 8011be8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011bea:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011bee:	2600      	movs	r6, #0
 8011bf0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011bf4:	616e      	str	r6, [r5, #20]
 8011bf6:	6426      	str	r6, [r4, #64]	@ 0x40
 8011bf8:	2f00      	cmp	r7, #0
 8011bfa:	f040 80ad 	bne.w	8011d58 <rcl_wait_set_resize+0x23c>
 8011bfe:	6928      	ldr	r0, [r5, #16]
 8011c00:	b138      	cbz	r0, 8011c12 <rcl_wait_set_resize+0xf6>
 8011c02:	4649      	mov	r1, r9
 8011c04:	47d0      	blx	sl
 8011c06:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011c08:	612f      	str	r7, [r5, #16]
 8011c0a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011c0e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011c12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c14:	2600      	movs	r6, #0
 8011c16:	61ee      	str	r6, [r5, #28]
 8011c18:	61a6      	str	r6, [r4, #24]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	f040 80af 	bne.w	8011d7e <rcl_wait_set_resize+0x262>
 8011c20:	69a8      	ldr	r0, [r5, #24]
 8011c22:	b120      	cbz	r0, 8011c2e <rcl_wait_set_resize+0x112>
 8011c24:	4649      	mov	r1, r9
 8011c26:	47d0      	blx	sl
 8011c28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c2a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011c2c:	61ab      	str	r3, [r5, #24]
 8011c2e:	6a20      	ldr	r0, [r4, #32]
 8011c30:	b128      	cbz	r0, 8011c3e <rcl_wait_set_resize+0x122>
 8011c32:	4649      	mov	r1, r9
 8011c34:	47d0      	blx	sl
 8011c36:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011c38:	2300      	movs	r3, #0
 8011c3a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011c3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c40:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011c42:	2600      	movs	r6, #0
 8011c44:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8011c48:	626e      	str	r6, [r5, #36]	@ 0x24
 8011c4a:	6266      	str	r6, [r4, #36]	@ 0x24
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	f000 80b6 	beq.w	8011dbe <rcl_wait_set_resize+0x2a2>
 8011c52:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8011c56:	6a28      	ldr	r0, [r5, #32]
 8011c58:	463a      	mov	r2, r7
 8011c5a:	4651      	mov	r1, sl
 8011c5c:	47c8      	blx	r9
 8011c5e:	6228      	str	r0, [r5, #32]
 8011c60:	2800      	cmp	r0, #0
 8011c62:	d04c      	beq.n	8011cfe <rcl_wait_set_resize+0x1e2>
 8011c64:	4652      	mov	r2, sl
 8011c66:	4631      	mov	r1, r6
 8011c68:	f005 fdc2 	bl	80177f0 <memset>
 8011c6c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011c6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c70:	626b      	str	r3, [r5, #36]	@ 0x24
 8011c72:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011c74:	62a6      	str	r6, [r4, #40]	@ 0x28
 8011c76:	463a      	mov	r2, r7
 8011c78:	4651      	mov	r1, sl
 8011c7a:	47c8      	blx	r9
 8011c7c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011c7e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8011c80:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8011c82:	2c00      	cmp	r4, #0
 8011c84:	f000 80f0 	beq.w	8011e68 <rcl_wait_set_resize+0x34c>
 8011c88:	4620      	mov	r0, r4
 8011c8a:	4652      	mov	r2, sl
 8011c8c:	4631      	mov	r1, r6
 8011c8e:	f005 fdaf 	bl	80177f0 <memset>
 8011c92:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011c94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c96:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011c98:	2600      	movs	r6, #0
 8011c9a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8011c9e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8011ca0:	6326      	str	r6, [r4, #48]	@ 0x30
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	f040 809d 	bne.w	8011de2 <rcl_wait_set_resize+0x2c6>
 8011ca8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011caa:	b120      	cbz	r0, 8011cb6 <rcl_wait_set_resize+0x19a>
 8011cac:	4639      	mov	r1, r7
 8011cae:	47c0      	blx	r8
 8011cb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011cb2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011cb4:	62ab      	str	r3, [r5, #40]	@ 0x28
 8011cb6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8011cb8:	b310      	cbz	r0, 8011d00 <rcl_wait_set_resize+0x1e4>
 8011cba:	4639      	mov	r1, r7
 8011cbc:	47c0      	blx	r8
 8011cbe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011cc0:	2000      	movs	r0, #0
 8011cc2:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8011cc6:	b003      	add	sp, #12
 8011cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ccc:	6800      	ldr	r0, [r0, #0]
 8011cce:	b120      	cbz	r0, 8011cda <rcl_wait_set_resize+0x1be>
 8011cd0:	4651      	mov	r1, sl
 8011cd2:	47d8      	blx	fp
 8011cd4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011cd6:	f8c5 8000 	str.w	r8, [r5]
 8011cda:	68a0      	ldr	r0, [r4, #8]
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	f43f af61 	beq.w	8011ba4 <rcl_wait_set_resize+0x88>
 8011ce2:	4651      	mov	r1, sl
 8011ce4:	47d8      	blx	fp
 8011ce6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011ce8:	2300      	movs	r3, #0
 8011cea:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8011cee:	e759      	b.n	8011ba4 <rcl_wait_set_resize+0x88>
 8011cf0:	6828      	ldr	r0, [r5, #0]
 8011cf2:	9301      	str	r3, [sp, #4]
 8011cf4:	4651      	mov	r1, sl
 8011cf6:	47d8      	blx	fp
 8011cf8:	9b01      	ldr	r3, [sp, #4]
 8011cfa:	e9c5 3300 	strd	r3, r3, [r5]
 8011cfe:	200a      	movs	r0, #10
 8011d00:	b003      	add	sp, #12
 8011d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d06:	00b4      	lsls	r4, r6, #2
 8011d08:	68a8      	ldr	r0, [r5, #8]
 8011d0a:	464a      	mov	r2, r9
 8011d0c:	4621      	mov	r1, r4
 8011d0e:	4798      	blx	r3
 8011d10:	60a8      	str	r0, [r5, #8]
 8011d12:	2800      	cmp	r0, #0
 8011d14:	d0f3      	beq.n	8011cfe <rcl_wait_set_resize+0x1e2>
 8011d16:	4622      	mov	r2, r4
 8011d18:	4641      	mov	r1, r8
 8011d1a:	f005 fd69 	bl	80177f0 <memset>
 8011d1e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011d20:	60ee      	str	r6, [r5, #12]
 8011d22:	f04f 0800 	mov.w	r8, #0
 8011d26:	19f6      	adds	r6, r6, r7
 8011d28:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011d2c:	f8c4 8010 	str.w	r8, [r4, #16]
 8011d30:	f43f af54 	beq.w	8011bdc <rcl_wait_set_resize+0xc0>
 8011d34:	00b6      	lsls	r6, r6, #2
 8011d36:	464a      	mov	r2, r9
 8011d38:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8011d3a:	6960      	ldr	r0, [r4, #20]
 8011d3c:	4631      	mov	r1, r6
 8011d3e:	4798      	blx	r3
 8011d40:	4681      	mov	r9, r0
 8011d42:	6160      	str	r0, [r4, #20]
 8011d44:	2800      	cmp	r0, #0
 8011d46:	d076      	beq.n	8011e36 <rcl_wait_set_resize+0x31a>
 8011d48:	4632      	mov	r2, r6
 8011d4a:	4641      	mov	r1, r8
 8011d4c:	f005 fd50 	bl	80177f0 <memset>
 8011d50:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011d52:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011d56:	e74a      	b.n	8011bee <rcl_wait_set_resize+0xd2>
 8011d58:	00bc      	lsls	r4, r7, #2
 8011d5a:	6928      	ldr	r0, [r5, #16]
 8011d5c:	464a      	mov	r2, r9
 8011d5e:	4621      	mov	r1, r4
 8011d60:	47c0      	blx	r8
 8011d62:	6128      	str	r0, [r5, #16]
 8011d64:	2800      	cmp	r0, #0
 8011d66:	d0ca      	beq.n	8011cfe <rcl_wait_set_resize+0x1e2>
 8011d68:	4622      	mov	r2, r4
 8011d6a:	4631      	mov	r1, r6
 8011d6c:	f005 fd40 	bl	80177f0 <memset>
 8011d70:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011d72:	616f      	str	r7, [r5, #20]
 8011d74:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011d78:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011d7c:	e749      	b.n	8011c12 <rcl_wait_set_resize+0xf6>
 8011d7e:	009c      	lsls	r4, r3, #2
 8011d80:	69a8      	ldr	r0, [r5, #24]
 8011d82:	464a      	mov	r2, r9
 8011d84:	4621      	mov	r1, r4
 8011d86:	47c0      	blx	r8
 8011d88:	61a8      	str	r0, [r5, #24]
 8011d8a:	2800      	cmp	r0, #0
 8011d8c:	d0b7      	beq.n	8011cfe <rcl_wait_set_resize+0x1e2>
 8011d8e:	4622      	mov	r2, r4
 8011d90:	4631      	mov	r1, r6
 8011d92:	f005 fd2d 	bl	80177f0 <memset>
 8011d96:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8011d98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d9a:	61eb      	str	r3, [r5, #28]
 8011d9c:	6a38      	ldr	r0, [r7, #32]
 8011d9e:	61fe      	str	r6, [r7, #28]
 8011da0:	464a      	mov	r2, r9
 8011da2:	4621      	mov	r1, r4
 8011da4:	47c0      	blx	r8
 8011da6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011da8:	6238      	str	r0, [r7, #32]
 8011daa:	6a1f      	ldr	r7, [r3, #32]
 8011dac:	2f00      	cmp	r7, #0
 8011dae:	d054      	beq.n	8011e5a <rcl_wait_set_resize+0x33e>
 8011db0:	4622      	mov	r2, r4
 8011db2:	4631      	mov	r1, r6
 8011db4:	4638      	mov	r0, r7
 8011db6:	f005 fd1b 	bl	80177f0 <memset>
 8011dba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011dbc:	e73f      	b.n	8011c3e <rcl_wait_set_resize+0x122>
 8011dbe:	6a28      	ldr	r0, [r5, #32]
 8011dc0:	b120      	cbz	r0, 8011dcc <rcl_wait_set_resize+0x2b0>
 8011dc2:	4639      	mov	r1, r7
 8011dc4:	47c0      	blx	r8
 8011dc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011dc8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011dca:	622b      	str	r3, [r5, #32]
 8011dcc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011dce:	2800      	cmp	r0, #0
 8011dd0:	f43f af60 	beq.w	8011c94 <rcl_wait_set_resize+0x178>
 8011dd4:	4639      	mov	r1, r7
 8011dd6:	47c0      	blx	r8
 8011dd8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011dda:	2300      	movs	r3, #0
 8011ddc:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8011de0:	e758      	b.n	8011c94 <rcl_wait_set_resize+0x178>
 8011de2:	009c      	lsls	r4, r3, #2
 8011de4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011de6:	463a      	mov	r2, r7
 8011de8:	4621      	mov	r1, r4
 8011dea:	47c8      	blx	r9
 8011dec:	62a8      	str	r0, [r5, #40]	@ 0x28
 8011dee:	2800      	cmp	r0, #0
 8011df0:	d085      	beq.n	8011cfe <rcl_wait_set_resize+0x1e2>
 8011df2:	4622      	mov	r2, r4
 8011df4:	4631      	mov	r1, r6
 8011df6:	f005 fcfb 	bl	80177f0 <memset>
 8011dfa:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8011dfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e00:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8011e02:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8011e06:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8011e0a:	463a      	mov	r2, r7
 8011e0c:	4621      	mov	r1, r4
 8011e0e:	47c8      	blx	r9
 8011e10:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011e12:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8011e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e18:	b36b      	cbz	r3, 8011e76 <rcl_wait_set_resize+0x35a>
 8011e1a:	4622      	mov	r2, r4
 8011e1c:	4631      	mov	r1, r6
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f005 fce6 	bl	80177f0 <memset>
 8011e24:	4630      	mov	r0, r6
 8011e26:	b003      	add	sp, #12
 8011e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e2c:	200b      	movs	r0, #11
 8011e2e:	4770      	bx	lr
 8011e30:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011e34:	e764      	b.n	8011d00 <rcl_wait_set_resize+0x1e4>
 8011e36:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011e38:	68a8      	ldr	r0, [r5, #8]
 8011e3a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011e3e:	4798      	blx	r3
 8011e40:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011e42:	6928      	ldr	r0, [r5, #16]
 8011e44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011e46:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011e48:	f8c5 900c 	str.w	r9, [r5, #12]
 8011e4c:	f8c5 9008 	str.w	r9, [r5, #8]
 8011e50:	4790      	blx	r2
 8011e52:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8011e56:	200a      	movs	r0, #10
 8011e58:	e752      	b.n	8011d00 <rcl_wait_set_resize+0x1e4>
 8011e5a:	69a8      	ldr	r0, [r5, #24]
 8011e5c:	4649      	mov	r1, r9
 8011e5e:	47d0      	blx	sl
 8011e60:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8011e64:	200a      	movs	r0, #10
 8011e66:	e74b      	b.n	8011d00 <rcl_wait_set_resize+0x1e4>
 8011e68:	6a28      	ldr	r0, [r5, #32]
 8011e6a:	4639      	mov	r1, r7
 8011e6c:	47c0      	blx	r8
 8011e6e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8011e72:	200a      	movs	r0, #10
 8011e74:	e744      	b.n	8011d00 <rcl_wait_set_resize+0x1e4>
 8011e76:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011e78:	9301      	str	r3, [sp, #4]
 8011e7a:	4639      	mov	r1, r7
 8011e7c:	47c0      	blx	r8
 8011e7e:	9b01      	ldr	r3, [sp, #4]
 8011e80:	200a      	movs	r0, #10
 8011e82:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8011e86:	e73b      	b.n	8011d00 <rcl_wait_set_resize+0x1e4>

08011e88 <rcl_wait_set_init>:
 8011e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e8c:	b084      	sub	sp, #16
 8011e8e:	4604      	mov	r4, r0
 8011e90:	a810      	add	r0, sp, #64	@ 0x40
 8011e92:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8011e96:	460f      	mov	r7, r1
 8011e98:	4690      	mov	r8, r2
 8011e9a:	4699      	mov	r9, r3
 8011e9c:	f7fa fda4 	bl	800c9e8 <rcutils_allocator_is_valid>
 8011ea0:	2800      	cmp	r0, #0
 8011ea2:	d06b      	beq.n	8011f7c <rcl_wait_set_init+0xf4>
 8011ea4:	2c00      	cmp	r4, #0
 8011ea6:	d069      	beq.n	8011f7c <rcl_wait_set_init+0xf4>
 8011ea8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011eaa:	b125      	cbz	r5, 8011eb6 <rcl_wait_set_init+0x2e>
 8011eac:	2564      	movs	r5, #100	@ 0x64
 8011eae:	4628      	mov	r0, r5
 8011eb0:	b004      	add	sp, #16
 8011eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eb6:	f1ba 0f00 	cmp.w	sl, #0
 8011eba:	d05f      	beq.n	8011f7c <rcl_wait_set_init+0xf4>
 8011ebc:	4650      	mov	r0, sl
 8011ebe:	f7fe fb3f 	bl	8010540 <rcl_context_is_valid>
 8011ec2:	2800      	cmp	r0, #0
 8011ec4:	d067      	beq.n	8011f96 <rcl_wait_set_init+0x10e>
 8011ec6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011ec8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8011eca:	205c      	movs	r0, #92	@ 0x5c
 8011ecc:	4798      	blx	r3
 8011ece:	6320      	str	r0, [r4, #48]	@ 0x30
 8011ed0:	2800      	cmp	r0, #0
 8011ed2:	d062      	beq.n	8011f9a <rcl_wait_set_init+0x112>
 8011ed4:	4629      	mov	r1, r5
 8011ed6:	225c      	movs	r2, #92	@ 0x5c
 8011ed8:	f005 fc8a 	bl	80177f0 <memset>
 8011edc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8011ee0:	eb03 0e02 	add.w	lr, r3, r2
 8011ee4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ee6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8011ee8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011eec:	449e      	add	lr, r3
 8011eee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ef2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8011ef6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8011efa:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8011efe:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8011f02:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8011f06:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8011f0a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8011f0e:	f8da a000 	ldr.w	sl, [sl]
 8011f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011f14:	44c6      	add	lr, r8
 8011f16:	f8dc 3000 	ldr.w	r3, [ip]
 8011f1a:	602b      	str	r3, [r5, #0]
 8011f1c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8011f20:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8011f24:	f002 fe6c 	bl	8014c00 <rmw_create_wait_set>
 8011f28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011f2a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8011f2c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011f2e:	b350      	cbz	r0, 8011f86 <rcl_wait_set_init+0xfe>
 8011f30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f32:	9302      	str	r3, [sp, #8]
 8011f34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011f36:	9301      	str	r3, [sp, #4]
 8011f38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f3a:	9300      	str	r3, [sp, #0]
 8011f3c:	4642      	mov	r2, r8
 8011f3e:	464b      	mov	r3, r9
 8011f40:	4639      	mov	r1, r7
 8011f42:	4620      	mov	r0, r4
 8011f44:	f7ff fdea 	bl	8011b1c <rcl_wait_set_resize>
 8011f48:	4605      	mov	r5, r0
 8011f4a:	2800      	cmp	r0, #0
 8011f4c:	d0af      	beq.n	8011eae <rcl_wait_set_init+0x26>
 8011f4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011f50:	bb2b      	cbnz	r3, 8011f9e <rcl_wait_set_init+0x116>
 8011f52:	2600      	movs	r6, #0
 8011f54:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8011f58:	9600      	str	r6, [sp, #0]
 8011f5a:	4633      	mov	r3, r6
 8011f5c:	4632      	mov	r2, r6
 8011f5e:	4631      	mov	r1, r6
 8011f60:	4620      	mov	r0, r4
 8011f62:	f7ff fddb 	bl	8011b1c <rcl_wait_set_resize>
 8011f66:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	d0a0      	beq.n	8011eae <rcl_wait_set_init+0x26>
 8011f6c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8011f6e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8011f70:	4798      	blx	r3
 8011f72:	4628      	mov	r0, r5
 8011f74:	6326      	str	r6, [r4, #48]	@ 0x30
 8011f76:	b004      	add	sp, #16
 8011f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f7c:	250b      	movs	r5, #11
 8011f7e:	4628      	mov	r0, r5
 8011f80:	b004      	add	sp, #16
 8011f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f86:	2501      	movs	r5, #1
 8011f88:	f002 fe44 	bl	8014c14 <rmw_destroy_wait_set>
 8011f8c:	2800      	cmp	r0, #0
 8011f8e:	bf18      	it	ne
 8011f90:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8011f94:	e7dd      	b.n	8011f52 <rcl_wait_set_init+0xca>
 8011f96:	2565      	movs	r5, #101	@ 0x65
 8011f98:	e789      	b.n	8011eae <rcl_wait_set_init+0x26>
 8011f9a:	250a      	movs	r5, #10
 8011f9c:	e787      	b.n	8011eae <rcl_wait_set_init+0x26>
 8011f9e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011fa0:	e7f2      	b.n	8011f88 <rcl_wait_set_init+0x100>
 8011fa2:	bf00      	nop

08011fa4 <rcl_wait_set_add_guard_condition>:
 8011fa4:	b318      	cbz	r0, 8011fee <rcl_wait_set_add_guard_condition+0x4a>
 8011fa6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011fa8:	b570      	push	{r4, r5, r6, lr}
 8011faa:	4604      	mov	r4, r0
 8011fac:	b30b      	cbz	r3, 8011ff2 <rcl_wait_set_add_guard_condition+0x4e>
 8011fae:	b319      	cbz	r1, 8011ff8 <rcl_wait_set_add_guard_condition+0x54>
 8011fb0:	68dd      	ldr	r5, [r3, #12]
 8011fb2:	68c0      	ldr	r0, [r0, #12]
 8011fb4:	4285      	cmp	r5, r0
 8011fb6:	d217      	bcs.n	8011fe8 <rcl_wait_set_add_guard_condition+0x44>
 8011fb8:	68a0      	ldr	r0, [r4, #8]
 8011fba:	1c6e      	adds	r6, r5, #1
 8011fbc:	60de      	str	r6, [r3, #12]
 8011fbe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011fc2:	b102      	cbz	r2, 8011fc6 <rcl_wait_set_add_guard_condition+0x22>
 8011fc4:	6015      	str	r5, [r2, #0]
 8011fc6:	4608      	mov	r0, r1
 8011fc8:	f004 fe18 	bl	8016bfc <rcl_guard_condition_get_rmw_handle>
 8011fcc:	b150      	cbz	r0, 8011fe4 <rcl_wait_set_add_guard_condition+0x40>
 8011fce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011fd0:	6842      	ldr	r2, [r0, #4]
 8011fd2:	695b      	ldr	r3, [r3, #20]
 8011fd4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011fd8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011fda:	6913      	ldr	r3, [r2, #16]
 8011fdc:	3301      	adds	r3, #1
 8011fde:	2000      	movs	r0, #0
 8011fe0:	6113      	str	r3, [r2, #16]
 8011fe2:	bd70      	pop	{r4, r5, r6, pc}
 8011fe4:	2001      	movs	r0, #1
 8011fe6:	bd70      	pop	{r4, r5, r6, pc}
 8011fe8:	f240 3086 	movw	r0, #902	@ 0x386
 8011fec:	bd70      	pop	{r4, r5, r6, pc}
 8011fee:	200b      	movs	r0, #11
 8011ff0:	4770      	bx	lr
 8011ff2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011ff6:	bd70      	pop	{r4, r5, r6, pc}
 8011ff8:	200b      	movs	r0, #11
 8011ffa:	bd70      	pop	{r4, r5, r6, pc}

08011ffc <rcl_wait_set_add_timer>:
 8011ffc:	b328      	cbz	r0, 801204a <rcl_wait_set_add_timer+0x4e>
 8011ffe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012000:	b570      	push	{r4, r5, r6, lr}
 8012002:	4604      	mov	r4, r0
 8012004:	b31b      	cbz	r3, 801204e <rcl_wait_set_add_timer+0x52>
 8012006:	b329      	cbz	r1, 8012054 <rcl_wait_set_add_timer+0x58>
 8012008:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801200a:	6965      	ldr	r5, [r4, #20]
 801200c:	42a8      	cmp	r0, r5
 801200e:	d219      	bcs.n	8012044 <rcl_wait_set_add_timer+0x48>
 8012010:	6925      	ldr	r5, [r4, #16]
 8012012:	1c46      	adds	r6, r0, #1
 8012014:	641e      	str	r6, [r3, #64]	@ 0x40
 8012016:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801201a:	b102      	cbz	r2, 801201e <rcl_wait_set_add_timer+0x22>
 801201c:	6010      	str	r0, [r2, #0]
 801201e:	4608      	mov	r0, r1
 8012020:	f7ff fba6 	bl	8011770 <rcl_timer_get_guard_condition>
 8012024:	b168      	cbz	r0, 8012042 <rcl_wait_set_add_timer+0x46>
 8012026:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012028:	68e3      	ldr	r3, [r4, #12]
 801202a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801202c:	3b01      	subs	r3, #1
 801202e:	441d      	add	r5, r3
 8012030:	f004 fde4 	bl	8016bfc <rcl_guard_condition_get_rmw_handle>
 8012034:	b180      	cbz	r0, 8012058 <rcl_wait_set_add_timer+0x5c>
 8012036:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012038:	6842      	ldr	r2, [r0, #4]
 801203a:	695b      	ldr	r3, [r3, #20]
 801203c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012040:	2000      	movs	r0, #0
 8012042:	bd70      	pop	{r4, r5, r6, pc}
 8012044:	f240 3086 	movw	r0, #902	@ 0x386
 8012048:	bd70      	pop	{r4, r5, r6, pc}
 801204a:	200b      	movs	r0, #11
 801204c:	4770      	bx	lr
 801204e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012052:	bd70      	pop	{r4, r5, r6, pc}
 8012054:	200b      	movs	r0, #11
 8012056:	bd70      	pop	{r4, r5, r6, pc}
 8012058:	2001      	movs	r0, #1
 801205a:	bd70      	pop	{r4, r5, r6, pc}

0801205c <rcl_wait_set_add_client>:
 801205c:	b318      	cbz	r0, 80120a6 <rcl_wait_set_add_client+0x4a>
 801205e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012060:	b570      	push	{r4, r5, r6, lr}
 8012062:	4604      	mov	r4, r0
 8012064:	b30b      	cbz	r3, 80120aa <rcl_wait_set_add_client+0x4e>
 8012066:	b319      	cbz	r1, 80120b0 <rcl_wait_set_add_client+0x54>
 8012068:	699d      	ldr	r5, [r3, #24]
 801206a:	69c0      	ldr	r0, [r0, #28]
 801206c:	4285      	cmp	r5, r0
 801206e:	d217      	bcs.n	80120a0 <rcl_wait_set_add_client+0x44>
 8012070:	69a0      	ldr	r0, [r4, #24]
 8012072:	1c6e      	adds	r6, r5, #1
 8012074:	619e      	str	r6, [r3, #24]
 8012076:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801207a:	b102      	cbz	r2, 801207e <rcl_wait_set_add_client+0x22>
 801207c:	6015      	str	r5, [r2, #0]
 801207e:	4608      	mov	r0, r1
 8012080:	f7fe f9b2 	bl	80103e8 <rcl_client_get_rmw_handle>
 8012084:	b150      	cbz	r0, 801209c <rcl_wait_set_add_client+0x40>
 8012086:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012088:	6842      	ldr	r2, [r0, #4]
 801208a:	6a1b      	ldr	r3, [r3, #32]
 801208c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012090:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012092:	69d3      	ldr	r3, [r2, #28]
 8012094:	3301      	adds	r3, #1
 8012096:	2000      	movs	r0, #0
 8012098:	61d3      	str	r3, [r2, #28]
 801209a:	bd70      	pop	{r4, r5, r6, pc}
 801209c:	2001      	movs	r0, #1
 801209e:	bd70      	pop	{r4, r5, r6, pc}
 80120a0:	f240 3086 	movw	r0, #902	@ 0x386
 80120a4:	bd70      	pop	{r4, r5, r6, pc}
 80120a6:	200b      	movs	r0, #11
 80120a8:	4770      	bx	lr
 80120aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80120ae:	bd70      	pop	{r4, r5, r6, pc}
 80120b0:	200b      	movs	r0, #11
 80120b2:	bd70      	pop	{r4, r5, r6, pc}

080120b4 <rcl_wait_set_add_service>:
 80120b4:	b318      	cbz	r0, 80120fe <rcl_wait_set_add_service+0x4a>
 80120b6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80120b8:	b570      	push	{r4, r5, r6, lr}
 80120ba:	4604      	mov	r4, r0
 80120bc:	b30b      	cbz	r3, 8012102 <rcl_wait_set_add_service+0x4e>
 80120be:	b319      	cbz	r1, 8012108 <rcl_wait_set_add_service+0x54>
 80120c0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80120c2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80120c4:	4285      	cmp	r5, r0
 80120c6:	d217      	bcs.n	80120f8 <rcl_wait_set_add_service+0x44>
 80120c8:	6a20      	ldr	r0, [r4, #32]
 80120ca:	1c6e      	adds	r6, r5, #1
 80120cc:	625e      	str	r6, [r3, #36]	@ 0x24
 80120ce:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80120d2:	b102      	cbz	r2, 80120d6 <rcl_wait_set_add_service+0x22>
 80120d4:	6015      	str	r5, [r2, #0]
 80120d6:	4608      	mov	r0, r1
 80120d8:	f7ff f804 	bl	80110e4 <rcl_service_get_rmw_handle>
 80120dc:	b150      	cbz	r0, 80120f4 <rcl_wait_set_add_service+0x40>
 80120de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80120e0:	6842      	ldr	r2, [r0, #4]
 80120e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120e4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80120e8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80120ea:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80120ec:	3301      	adds	r3, #1
 80120ee:	2000      	movs	r0, #0
 80120f0:	6293      	str	r3, [r2, #40]	@ 0x28
 80120f2:	bd70      	pop	{r4, r5, r6, pc}
 80120f4:	2001      	movs	r0, #1
 80120f6:	bd70      	pop	{r4, r5, r6, pc}
 80120f8:	f240 3086 	movw	r0, #902	@ 0x386
 80120fc:	bd70      	pop	{r4, r5, r6, pc}
 80120fe:	200b      	movs	r0, #11
 8012100:	4770      	bx	lr
 8012102:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012106:	bd70      	pop	{r4, r5, r6, pc}
 8012108:	200b      	movs	r0, #11
 801210a:	bd70      	pop	{r4, r5, r6, pc}
 801210c:	0000      	movs	r0, r0
	...

08012110 <rcl_wait>:
 8012110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012114:	ed2d 8b02 	vpush	{d8}
 8012118:	b08d      	sub	sp, #52	@ 0x34
 801211a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801211e:	2800      	cmp	r0, #0
 8012120:	f000 8143 	beq.w	80123aa <rcl_wait+0x29a>
 8012124:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8012126:	4605      	mov	r5, r0
 8012128:	2e00      	cmp	r6, #0
 801212a:	f000 8112 	beq.w	8012352 <rcl_wait+0x242>
 801212e:	6843      	ldr	r3, [r0, #4]
 8012130:	b983      	cbnz	r3, 8012154 <rcl_wait+0x44>
 8012132:	68eb      	ldr	r3, [r5, #12]
 8012134:	b973      	cbnz	r3, 8012154 <rcl_wait+0x44>
 8012136:	696b      	ldr	r3, [r5, #20]
 8012138:	b963      	cbnz	r3, 8012154 <rcl_wait+0x44>
 801213a:	69eb      	ldr	r3, [r5, #28]
 801213c:	b953      	cbnz	r3, 8012154 <rcl_wait+0x44>
 801213e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8012140:	b943      	cbnz	r3, 8012154 <rcl_wait+0x44>
 8012142:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8012144:	b933      	cbnz	r3, 8012154 <rcl_wait+0x44>
 8012146:	f240 3085 	movw	r0, #901	@ 0x385
 801214a:	b00d      	add	sp, #52	@ 0x34
 801214c:	ecbd 8b02 	vpop	{d8}
 8012150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012154:	9b04      	ldr	r3, [sp, #16]
 8012156:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8012158:	2b01      	cmp	r3, #1
 801215a:	9b05      	ldr	r3, [sp, #20]
 801215c:	f173 0300 	sbcs.w	r3, r3, #0
 8012160:	f2c0 80f0 	blt.w	8012344 <rcl_wait+0x234>
 8012164:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8012168:	4643      	mov	r3, r8
 801216a:	2a00      	cmp	r2, #0
 801216c:	f000 8133 	beq.w	80123d6 <rcl_wait+0x2c6>
 8012170:	2400      	movs	r4, #0
 8012172:	4613      	mov	r3, r2
 8012174:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80123e8 <rcl_wait+0x2d8>
 8012178:	46a2      	mov	sl, r4
 801217a:	46a3      	mov	fp, r4
 801217c:	f240 3921 	movw	r9, #801	@ 0x321
 8012180:	4632      	mov	r2, r6
 8012182:	e014      	b.n	80121ae <rcl_wait+0x9e>
 8012184:	2800      	cmp	r0, #0
 8012186:	d1e0      	bne.n	801214a <rcl_wait+0x3a>
 8012188:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801218c:	4542      	cmp	r2, r8
 801218e:	eb73 0107 	sbcs.w	r1, r3, r7
 8012192:	da03      	bge.n	801219c <rcl_wait+0x8c>
 8012194:	4690      	mov	r8, r2
 8012196:	461f      	mov	r7, r3
 8012198:	f04f 0b01 	mov.w	fp, #1
 801219c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801219e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80121a0:	3401      	adds	r4, #1
 80121a2:	f14a 0a00 	adc.w	sl, sl, #0
 80121a6:	429c      	cmp	r4, r3
 80121a8:	f17a 0100 	sbcs.w	r1, sl, #0
 80121ac:	d228      	bcs.n	8012200 <rcl_wait+0xf0>
 80121ae:	6928      	ldr	r0, [r5, #16]
 80121b0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80121b4:	a908      	add	r1, sp, #32
 80121b6:	00a6      	lsls	r6, r4, #2
 80121b8:	2800      	cmp	r0, #0
 80121ba:	d0f1      	beq.n	80121a0 <rcl_wait+0x90>
 80121bc:	68eb      	ldr	r3, [r5, #12]
 80121be:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80121c2:	4423      	add	r3, r4
 80121c4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80121c8:	f1be 0f00 	cmp.w	lr, #0
 80121cc:	d006      	beq.n	80121dc <rcl_wait+0xcc>
 80121ce:	6913      	ldr	r3, [r2, #16]
 80121d0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80121d4:	3301      	adds	r3, #1
 80121d6:	6113      	str	r3, [r2, #16]
 80121d8:	692b      	ldr	r3, [r5, #16]
 80121da:	5998      	ldr	r0, [r3, r6]
 80121dc:	ed8d 8b08 	vstr	d8, [sp, #32]
 80121e0:	f7ff fa94 	bl	801170c <rcl_timer_get_time_until_next_call>
 80121e4:	4548      	cmp	r0, r9
 80121e6:	d1cd      	bne.n	8012184 <rcl_wait+0x74>
 80121e8:	692b      	ldr	r3, [r5, #16]
 80121ea:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80121ec:	2100      	movs	r1, #0
 80121ee:	5199      	str	r1, [r3, r6]
 80121f0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80121f2:	3401      	adds	r4, #1
 80121f4:	f14a 0a00 	adc.w	sl, sl, #0
 80121f8:	429c      	cmp	r4, r3
 80121fa:	f17a 0100 	sbcs.w	r1, sl, #0
 80121fe:	d3d6      	bcc.n	80121ae <rcl_wait+0x9e>
 8012200:	4616      	mov	r6, r2
 8012202:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8012206:	4313      	orrs	r3, r2
 8012208:	46d9      	mov	r9, fp
 801220a:	f040 80a9 	bne.w	8012360 <rcl_wait+0x250>
 801220e:	2300      	movs	r3, #0
 8012210:	2200      	movs	r2, #0
 8012212:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012216:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801221a:	ab08      	add	r3, sp, #32
 801221c:	9302      	str	r3, [sp, #8]
 801221e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8012220:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8012224:	e9cd 3200 	strd	r3, r2, [sp]
 8012228:	f106 0110 	add.w	r1, r6, #16
 801222c:	f106 031c 	add.w	r3, r6, #28
 8012230:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8012234:	1d30      	adds	r0, r6, #4
 8012236:	f002 fb6b 	bl	8014910 <rmw_wait>
 801223a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801223c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801223e:	4680      	mov	r8, r0
 8012240:	b1ca      	cbz	r2, 8012276 <rcl_wait+0x166>
 8012242:	2400      	movs	r4, #0
 8012244:	4627      	mov	r7, r4
 8012246:	692a      	ldr	r2, [r5, #16]
 8012248:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801224c:	f10d 011f 	add.w	r1, sp, #31
 8012250:	00a6      	lsls	r6, r4, #2
 8012252:	b160      	cbz	r0, 801226e <rcl_wait+0x15e>
 8012254:	f88d 701f 	strb.w	r7, [sp, #31]
 8012258:	f7ff fa1e 	bl	8011698 <rcl_timer_is_ready>
 801225c:	2800      	cmp	r0, #0
 801225e:	f47f af74 	bne.w	801214a <rcl_wait+0x3a>
 8012262:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012266:	b90b      	cbnz	r3, 801226c <rcl_wait+0x15c>
 8012268:	692a      	ldr	r2, [r5, #16]
 801226a:	5193      	str	r3, [r2, r6]
 801226c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801226e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012270:	3401      	adds	r4, #1
 8012272:	42a2      	cmp	r2, r4
 8012274:	d8e7      	bhi.n	8012246 <rcl_wait+0x136>
 8012276:	f038 0002 	bics.w	r0, r8, #2
 801227a:	f040 8090 	bne.w	801239e <rcl_wait+0x28e>
 801227e:	686e      	ldr	r6, [r5, #4]
 8012280:	4602      	mov	r2, r0
 8012282:	b91e      	cbnz	r6, 801228c <rcl_wait+0x17c>
 8012284:	e00d      	b.n	80122a2 <rcl_wait+0x192>
 8012286:	3201      	adds	r2, #1
 8012288:	42b2      	cmp	r2, r6
 801228a:	d00a      	beq.n	80122a2 <rcl_wait+0x192>
 801228c:	6899      	ldr	r1, [r3, #8]
 801228e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012292:	2900      	cmp	r1, #0
 8012294:	d1f7      	bne.n	8012286 <rcl_wait+0x176>
 8012296:	682c      	ldr	r4, [r5, #0]
 8012298:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801229c:	3201      	adds	r2, #1
 801229e:	42b2      	cmp	r2, r6
 80122a0:	d1f4      	bne.n	801228c <rcl_wait+0x17c>
 80122a2:	68ee      	ldr	r6, [r5, #12]
 80122a4:	2200      	movs	r2, #0
 80122a6:	b91e      	cbnz	r6, 80122b0 <rcl_wait+0x1a0>
 80122a8:	e00d      	b.n	80122c6 <rcl_wait+0x1b6>
 80122aa:	3201      	adds	r2, #1
 80122ac:	42b2      	cmp	r2, r6
 80122ae:	d00a      	beq.n	80122c6 <rcl_wait+0x1b6>
 80122b0:	6959      	ldr	r1, [r3, #20]
 80122b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80122b6:	2900      	cmp	r1, #0
 80122b8:	d1f7      	bne.n	80122aa <rcl_wait+0x19a>
 80122ba:	68ac      	ldr	r4, [r5, #8]
 80122bc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80122c0:	3201      	adds	r2, #1
 80122c2:	42b2      	cmp	r2, r6
 80122c4:	d1f4      	bne.n	80122b0 <rcl_wait+0x1a0>
 80122c6:	69ee      	ldr	r6, [r5, #28]
 80122c8:	2200      	movs	r2, #0
 80122ca:	b91e      	cbnz	r6, 80122d4 <rcl_wait+0x1c4>
 80122cc:	e00d      	b.n	80122ea <rcl_wait+0x1da>
 80122ce:	3201      	adds	r2, #1
 80122d0:	42b2      	cmp	r2, r6
 80122d2:	d00a      	beq.n	80122ea <rcl_wait+0x1da>
 80122d4:	6a19      	ldr	r1, [r3, #32]
 80122d6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80122da:	2900      	cmp	r1, #0
 80122dc:	d1f7      	bne.n	80122ce <rcl_wait+0x1be>
 80122de:	69ac      	ldr	r4, [r5, #24]
 80122e0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80122e4:	3201      	adds	r2, #1
 80122e6:	42b2      	cmp	r2, r6
 80122e8:	d1f4      	bne.n	80122d4 <rcl_wait+0x1c4>
 80122ea:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80122ec:	2200      	movs	r2, #0
 80122ee:	b91e      	cbnz	r6, 80122f8 <rcl_wait+0x1e8>
 80122f0:	e00d      	b.n	801230e <rcl_wait+0x1fe>
 80122f2:	3201      	adds	r2, #1
 80122f4:	4296      	cmp	r6, r2
 80122f6:	d00a      	beq.n	801230e <rcl_wait+0x1fe>
 80122f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80122fa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80122fe:	2900      	cmp	r1, #0
 8012300:	d1f7      	bne.n	80122f2 <rcl_wait+0x1e2>
 8012302:	6a2c      	ldr	r4, [r5, #32]
 8012304:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012308:	3201      	adds	r2, #1
 801230a:	4296      	cmp	r6, r2
 801230c:	d1f4      	bne.n	80122f8 <rcl_wait+0x1e8>
 801230e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8012310:	2200      	movs	r2, #0
 8012312:	b91e      	cbnz	r6, 801231c <rcl_wait+0x20c>
 8012314:	e00d      	b.n	8012332 <rcl_wait+0x222>
 8012316:	3201      	adds	r2, #1
 8012318:	42b2      	cmp	r2, r6
 801231a:	d00a      	beq.n	8012332 <rcl_wait+0x222>
 801231c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801231e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012322:	2900      	cmp	r1, #0
 8012324:	d1f7      	bne.n	8012316 <rcl_wait+0x206>
 8012326:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8012328:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801232c:	3201      	adds	r2, #1
 801232e:	42b2      	cmp	r2, r6
 8012330:	d1f4      	bne.n	801231c <rcl_wait+0x20c>
 8012332:	f1b8 0f02 	cmp.w	r8, #2
 8012336:	f47f af08 	bne.w	801214a <rcl_wait+0x3a>
 801233a:	464b      	mov	r3, r9
 801233c:	2b00      	cmp	r3, #0
 801233e:	bf08      	it	eq
 8012340:	2002      	moveq	r0, #2
 8012342:	e702      	b.n	801214a <rcl_wait+0x3a>
 8012344:	2a00      	cmp	r2, #0
 8012346:	d03a      	beq.n	80123be <rcl_wait+0x2ae>
 8012348:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801234c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8012350:	e70e      	b.n	8012170 <rcl_wait+0x60>
 8012352:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012356:	b00d      	add	sp, #52	@ 0x34
 8012358:	ecbd 8b02 	vpop	{d8}
 801235c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012360:	9b04      	ldr	r3, [sp, #16]
 8012362:	2b01      	cmp	r3, #1
 8012364:	9b05      	ldr	r3, [sp, #20]
 8012366:	f173 0300 	sbcs.w	r3, r3, #0
 801236a:	db24      	blt.n	80123b6 <rcl_wait+0x2a6>
 801236c:	2f00      	cmp	r7, #0
 801236e:	bfbc      	itt	lt
 8012370:	f04f 0800 	movlt.w	r8, #0
 8012374:	4647      	movlt	r7, r8
 8012376:	a31e      	add	r3, pc, #120	@ (adr r3, 80123f0 <rcl_wait+0x2e0>)
 8012378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801237c:	4640      	mov	r0, r8
 801237e:	4639      	mov	r1, r7
 8012380:	f7ee fc34 	bl	8000bec <__aeabi_ldivmod>
 8012384:	a31a      	add	r3, pc, #104	@ (adr r3, 80123f0 <rcl_wait+0x2e0>)
 8012386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801238a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801238e:	4640      	mov	r0, r8
 8012390:	4639      	mov	r1, r7
 8012392:	f7ee fc2b 	bl	8000bec <__aeabi_ldivmod>
 8012396:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801239a:	ab08      	add	r3, sp, #32
 801239c:	e73e      	b.n	801221c <rcl_wait+0x10c>
 801239e:	2001      	movs	r0, #1
 80123a0:	b00d      	add	sp, #52	@ 0x34
 80123a2:	ecbd 8b02 	vpop	{d8}
 80123a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123aa:	200b      	movs	r0, #11
 80123ac:	b00d      	add	sp, #52	@ 0x34
 80123ae:	ecbd 8b02 	vpop	{d8}
 80123b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b6:	465b      	mov	r3, fp
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d1d7      	bne.n	801236c <rcl_wait+0x25c>
 80123bc:	e72e      	b.n	801221c <rcl_wait+0x10c>
 80123be:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80123c2:	430b      	orrs	r3, r1
 80123c4:	bf08      	it	eq
 80123c6:	4691      	moveq	r9, r2
 80123c8:	f43f af21 	beq.w	801220e <rcl_wait+0xfe>
 80123cc:	9b04      	ldr	r3, [sp, #16]
 80123ce:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80123d2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	9b05      	ldr	r3, [sp, #20]
 80123da:	f173 0300 	sbcs.w	r3, r3, #0
 80123de:	f04f 0300 	mov.w	r3, #0
 80123e2:	4699      	mov	r9, r3
 80123e4:	dac2      	bge.n	801236c <rcl_wait+0x25c>
 80123e6:	e719      	b.n	801221c <rcl_wait+0x10c>
 80123e8:	ffffffff 	.word	0xffffffff
 80123ec:	7fffffff 	.word	0x7fffffff
 80123f0:	3b9aca00 	.word	0x3b9aca00
 80123f4:	00000000 	.word	0x00000000

080123f8 <rcl_action_take_goal_response>:
 80123f8:	2800      	cmp	r0, #0
 80123fa:	d039      	beq.n	8012470 <rcl_action_take_goal_response+0x78>
 80123fc:	b570      	push	{r4, r5, r6, lr}
 80123fe:	4604      	mov	r4, r0
 8012400:	6800      	ldr	r0, [r0, #0]
 8012402:	b380      	cbz	r0, 8012466 <rcl_action_take_goal_response+0x6e>
 8012404:	460d      	mov	r5, r1
 8012406:	4616      	mov	r6, r2
 8012408:	f7fe f872 	bl	80104f0 <rcl_client_is_valid>
 801240c:	b330      	cbz	r0, 801245c <rcl_action_take_goal_response+0x64>
 801240e:	6820      	ldr	r0, [r4, #0]
 8012410:	3004      	adds	r0, #4
 8012412:	f7fe f86d 	bl	80104f0 <rcl_client_is_valid>
 8012416:	b308      	cbz	r0, 801245c <rcl_action_take_goal_response+0x64>
 8012418:	6820      	ldr	r0, [r4, #0]
 801241a:	3008      	adds	r0, #8
 801241c:	f7fe f868 	bl	80104f0 <rcl_client_is_valid>
 8012420:	b1e0      	cbz	r0, 801245c <rcl_action_take_goal_response+0x64>
 8012422:	6820      	ldr	r0, [r4, #0]
 8012424:	300c      	adds	r0, #12
 8012426:	f7fe ffff 	bl	8011428 <rcl_subscription_is_valid>
 801242a:	b1b8      	cbz	r0, 801245c <rcl_action_take_goal_response+0x64>
 801242c:	6820      	ldr	r0, [r4, #0]
 801242e:	3010      	adds	r0, #16
 8012430:	f7fe fffa 	bl	8011428 <rcl_subscription_is_valid>
 8012434:	b190      	cbz	r0, 801245c <rcl_action_take_goal_response+0x64>
 8012436:	b1cd      	cbz	r5, 801246c <rcl_action_take_goal_response+0x74>
 8012438:	b1c6      	cbz	r6, 801246c <rcl_action_take_goal_response+0x74>
 801243a:	6820      	ldr	r0, [r4, #0]
 801243c:	4632      	mov	r2, r6
 801243e:	4629      	mov	r1, r5
 8012440:	f7fe f80e 	bl	8010460 <rcl_take_response>
 8012444:	b148      	cbz	r0, 801245a <rcl_action_take_goal_response+0x62>
 8012446:	280a      	cmp	r0, #10
 8012448:	d007      	beq.n	801245a <rcl_action_take_goal_response+0x62>
 801244a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801244e:	f640 0337 	movw	r3, #2103	@ 0x837
 8012452:	4290      	cmp	r0, r2
 8012454:	bf0c      	ite	eq
 8012456:	4618      	moveq	r0, r3
 8012458:	2001      	movne	r0, #1
 801245a:	bd70      	pop	{r4, r5, r6, pc}
 801245c:	f7fa fae8 	bl	800ca30 <rcutils_reset_error>
 8012460:	f640 0036 	movw	r0, #2102	@ 0x836
 8012464:	bd70      	pop	{r4, r5, r6, pc}
 8012466:	f640 0036 	movw	r0, #2102	@ 0x836
 801246a:	bd70      	pop	{r4, r5, r6, pc}
 801246c:	200b      	movs	r0, #11
 801246e:	bd70      	pop	{r4, r5, r6, pc}
 8012470:	f640 0036 	movw	r0, #2102	@ 0x836
 8012474:	4770      	bx	lr
 8012476:	bf00      	nop

08012478 <rcl_action_send_result_request>:
 8012478:	b390      	cbz	r0, 80124e0 <rcl_action_send_result_request+0x68>
 801247a:	b570      	push	{r4, r5, r6, lr}
 801247c:	4604      	mov	r4, r0
 801247e:	6800      	ldr	r0, [r0, #0]
 8012480:	b348      	cbz	r0, 80124d6 <rcl_action_send_result_request+0x5e>
 8012482:	460d      	mov	r5, r1
 8012484:	4616      	mov	r6, r2
 8012486:	f7fe f833 	bl	80104f0 <rcl_client_is_valid>
 801248a:	b1f8      	cbz	r0, 80124cc <rcl_action_send_result_request+0x54>
 801248c:	6820      	ldr	r0, [r4, #0]
 801248e:	3004      	adds	r0, #4
 8012490:	f7fe f82e 	bl	80104f0 <rcl_client_is_valid>
 8012494:	b1d0      	cbz	r0, 80124cc <rcl_action_send_result_request+0x54>
 8012496:	6820      	ldr	r0, [r4, #0]
 8012498:	3008      	adds	r0, #8
 801249a:	f7fe f829 	bl	80104f0 <rcl_client_is_valid>
 801249e:	b1a8      	cbz	r0, 80124cc <rcl_action_send_result_request+0x54>
 80124a0:	6820      	ldr	r0, [r4, #0]
 80124a2:	300c      	adds	r0, #12
 80124a4:	f7fe ffc0 	bl	8011428 <rcl_subscription_is_valid>
 80124a8:	b180      	cbz	r0, 80124cc <rcl_action_send_result_request+0x54>
 80124aa:	6820      	ldr	r0, [r4, #0]
 80124ac:	3010      	adds	r0, #16
 80124ae:	f7fe ffbb 	bl	8011428 <rcl_subscription_is_valid>
 80124b2:	b158      	cbz	r0, 80124cc <rcl_action_send_result_request+0x54>
 80124b4:	b195      	cbz	r5, 80124dc <rcl_action_send_result_request+0x64>
 80124b6:	b18e      	cbz	r6, 80124dc <rcl_action_send_result_request+0x64>
 80124b8:	6820      	ldr	r0, [r4, #0]
 80124ba:	4632      	mov	r2, r6
 80124bc:	4629      	mov	r1, r5
 80124be:	3008      	adds	r0, #8
 80124c0:	f7fd ff98 	bl	80103f4 <rcl_send_request>
 80124c4:	3800      	subs	r0, #0
 80124c6:	bf18      	it	ne
 80124c8:	2001      	movne	r0, #1
 80124ca:	bd70      	pop	{r4, r5, r6, pc}
 80124cc:	f7fa fab0 	bl	800ca30 <rcutils_reset_error>
 80124d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80124d4:	bd70      	pop	{r4, r5, r6, pc}
 80124d6:	f640 0036 	movw	r0, #2102	@ 0x836
 80124da:	bd70      	pop	{r4, r5, r6, pc}
 80124dc:	200b      	movs	r0, #11
 80124de:	bd70      	pop	{r4, r5, r6, pc}
 80124e0:	f640 0036 	movw	r0, #2102	@ 0x836
 80124e4:	4770      	bx	lr
 80124e6:	bf00      	nop

080124e8 <rcl_action_take_result_response>:
 80124e8:	2800      	cmp	r0, #0
 80124ea:	d03a      	beq.n	8012562 <rcl_action_take_result_response+0x7a>
 80124ec:	b570      	push	{r4, r5, r6, lr}
 80124ee:	4604      	mov	r4, r0
 80124f0:	6800      	ldr	r0, [r0, #0]
 80124f2:	b388      	cbz	r0, 8012558 <rcl_action_take_result_response+0x70>
 80124f4:	460d      	mov	r5, r1
 80124f6:	4616      	mov	r6, r2
 80124f8:	f7fd fffa 	bl	80104f0 <rcl_client_is_valid>
 80124fc:	b338      	cbz	r0, 801254e <rcl_action_take_result_response+0x66>
 80124fe:	6820      	ldr	r0, [r4, #0]
 8012500:	3004      	adds	r0, #4
 8012502:	f7fd fff5 	bl	80104f0 <rcl_client_is_valid>
 8012506:	b310      	cbz	r0, 801254e <rcl_action_take_result_response+0x66>
 8012508:	6820      	ldr	r0, [r4, #0]
 801250a:	3008      	adds	r0, #8
 801250c:	f7fd fff0 	bl	80104f0 <rcl_client_is_valid>
 8012510:	b1e8      	cbz	r0, 801254e <rcl_action_take_result_response+0x66>
 8012512:	6820      	ldr	r0, [r4, #0]
 8012514:	300c      	adds	r0, #12
 8012516:	f7fe ff87 	bl	8011428 <rcl_subscription_is_valid>
 801251a:	b1c0      	cbz	r0, 801254e <rcl_action_take_result_response+0x66>
 801251c:	6820      	ldr	r0, [r4, #0]
 801251e:	3010      	adds	r0, #16
 8012520:	f7fe ff82 	bl	8011428 <rcl_subscription_is_valid>
 8012524:	b198      	cbz	r0, 801254e <rcl_action_take_result_response+0x66>
 8012526:	b1d5      	cbz	r5, 801255e <rcl_action_take_result_response+0x76>
 8012528:	b1ce      	cbz	r6, 801255e <rcl_action_take_result_response+0x76>
 801252a:	6820      	ldr	r0, [r4, #0]
 801252c:	4632      	mov	r2, r6
 801252e:	4629      	mov	r1, r5
 8012530:	3008      	adds	r0, #8
 8012532:	f7fd ff95 	bl	8010460 <rcl_take_response>
 8012536:	b148      	cbz	r0, 801254c <rcl_action_take_result_response+0x64>
 8012538:	280a      	cmp	r0, #10
 801253a:	d007      	beq.n	801254c <rcl_action_take_result_response+0x64>
 801253c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012540:	f640 0337 	movw	r3, #2103	@ 0x837
 8012544:	4290      	cmp	r0, r2
 8012546:	bf0c      	ite	eq
 8012548:	4618      	moveq	r0, r3
 801254a:	2001      	movne	r0, #1
 801254c:	bd70      	pop	{r4, r5, r6, pc}
 801254e:	f7fa fa6f 	bl	800ca30 <rcutils_reset_error>
 8012552:	f640 0036 	movw	r0, #2102	@ 0x836
 8012556:	bd70      	pop	{r4, r5, r6, pc}
 8012558:	f640 0036 	movw	r0, #2102	@ 0x836
 801255c:	bd70      	pop	{r4, r5, r6, pc}
 801255e:	200b      	movs	r0, #11
 8012560:	bd70      	pop	{r4, r5, r6, pc}
 8012562:	f640 0036 	movw	r0, #2102	@ 0x836
 8012566:	4770      	bx	lr

08012568 <rcl_action_take_cancel_response>:
 8012568:	2800      	cmp	r0, #0
 801256a:	d03a      	beq.n	80125e2 <rcl_action_take_cancel_response+0x7a>
 801256c:	b570      	push	{r4, r5, r6, lr}
 801256e:	4604      	mov	r4, r0
 8012570:	6800      	ldr	r0, [r0, #0]
 8012572:	b388      	cbz	r0, 80125d8 <rcl_action_take_cancel_response+0x70>
 8012574:	460d      	mov	r5, r1
 8012576:	4616      	mov	r6, r2
 8012578:	f7fd ffba 	bl	80104f0 <rcl_client_is_valid>
 801257c:	b338      	cbz	r0, 80125ce <rcl_action_take_cancel_response+0x66>
 801257e:	6820      	ldr	r0, [r4, #0]
 8012580:	3004      	adds	r0, #4
 8012582:	f7fd ffb5 	bl	80104f0 <rcl_client_is_valid>
 8012586:	b310      	cbz	r0, 80125ce <rcl_action_take_cancel_response+0x66>
 8012588:	6820      	ldr	r0, [r4, #0]
 801258a:	3008      	adds	r0, #8
 801258c:	f7fd ffb0 	bl	80104f0 <rcl_client_is_valid>
 8012590:	b1e8      	cbz	r0, 80125ce <rcl_action_take_cancel_response+0x66>
 8012592:	6820      	ldr	r0, [r4, #0]
 8012594:	300c      	adds	r0, #12
 8012596:	f7fe ff47 	bl	8011428 <rcl_subscription_is_valid>
 801259a:	b1c0      	cbz	r0, 80125ce <rcl_action_take_cancel_response+0x66>
 801259c:	6820      	ldr	r0, [r4, #0]
 801259e:	3010      	adds	r0, #16
 80125a0:	f7fe ff42 	bl	8011428 <rcl_subscription_is_valid>
 80125a4:	b198      	cbz	r0, 80125ce <rcl_action_take_cancel_response+0x66>
 80125a6:	b1d5      	cbz	r5, 80125de <rcl_action_take_cancel_response+0x76>
 80125a8:	b1ce      	cbz	r6, 80125de <rcl_action_take_cancel_response+0x76>
 80125aa:	6820      	ldr	r0, [r4, #0]
 80125ac:	4632      	mov	r2, r6
 80125ae:	4629      	mov	r1, r5
 80125b0:	3004      	adds	r0, #4
 80125b2:	f7fd ff55 	bl	8010460 <rcl_take_response>
 80125b6:	b148      	cbz	r0, 80125cc <rcl_action_take_cancel_response+0x64>
 80125b8:	280a      	cmp	r0, #10
 80125ba:	d007      	beq.n	80125cc <rcl_action_take_cancel_response+0x64>
 80125bc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80125c0:	f640 0337 	movw	r3, #2103	@ 0x837
 80125c4:	4290      	cmp	r0, r2
 80125c6:	bf0c      	ite	eq
 80125c8:	4618      	moveq	r0, r3
 80125ca:	2001      	movne	r0, #1
 80125cc:	bd70      	pop	{r4, r5, r6, pc}
 80125ce:	f7fa fa2f 	bl	800ca30 <rcutils_reset_error>
 80125d2:	f640 0036 	movw	r0, #2102	@ 0x836
 80125d6:	bd70      	pop	{r4, r5, r6, pc}
 80125d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80125dc:	bd70      	pop	{r4, r5, r6, pc}
 80125de:	200b      	movs	r0, #11
 80125e0:	bd70      	pop	{r4, r5, r6, pc}
 80125e2:	f640 0036 	movw	r0, #2102	@ 0x836
 80125e6:	4770      	bx	lr

080125e8 <rcl_action_take_feedback>:
 80125e8:	2800      	cmp	r0, #0
 80125ea:	d038      	beq.n	801265e <rcl_action_take_feedback+0x76>
 80125ec:	b530      	push	{r4, r5, lr}
 80125ee:	4604      	mov	r4, r0
 80125f0:	6800      	ldr	r0, [r0, #0]
 80125f2:	b091      	sub	sp, #68	@ 0x44
 80125f4:	b378      	cbz	r0, 8012656 <rcl_action_take_feedback+0x6e>
 80125f6:	460d      	mov	r5, r1
 80125f8:	f7fd ff7a 	bl	80104f0 <rcl_client_is_valid>
 80125fc:	b328      	cbz	r0, 801264a <rcl_action_take_feedback+0x62>
 80125fe:	6820      	ldr	r0, [r4, #0]
 8012600:	3004      	adds	r0, #4
 8012602:	f7fd ff75 	bl	80104f0 <rcl_client_is_valid>
 8012606:	b300      	cbz	r0, 801264a <rcl_action_take_feedback+0x62>
 8012608:	6820      	ldr	r0, [r4, #0]
 801260a:	3008      	adds	r0, #8
 801260c:	f7fd ff70 	bl	80104f0 <rcl_client_is_valid>
 8012610:	b1d8      	cbz	r0, 801264a <rcl_action_take_feedback+0x62>
 8012612:	6820      	ldr	r0, [r4, #0]
 8012614:	300c      	adds	r0, #12
 8012616:	f7fe ff07 	bl	8011428 <rcl_subscription_is_valid>
 801261a:	b1b0      	cbz	r0, 801264a <rcl_action_take_feedback+0x62>
 801261c:	6820      	ldr	r0, [r4, #0]
 801261e:	3010      	adds	r0, #16
 8012620:	f7fe ff02 	bl	8011428 <rcl_subscription_is_valid>
 8012624:	b188      	cbz	r0, 801264a <rcl_action_take_feedback+0x62>
 8012626:	b1ed      	cbz	r5, 8012664 <rcl_action_take_feedback+0x7c>
 8012628:	6820      	ldr	r0, [r4, #0]
 801262a:	2300      	movs	r3, #0
 801262c:	466a      	mov	r2, sp
 801262e:	4629      	mov	r1, r5
 8012630:	300c      	adds	r0, #12
 8012632:	f7fe fe9b 	bl	801136c <rcl_take>
 8012636:	b160      	cbz	r0, 8012652 <rcl_action_take_feedback+0x6a>
 8012638:	f240 1391 	movw	r3, #401	@ 0x191
 801263c:	4298      	cmp	r0, r3
 801263e:	d014      	beq.n	801266a <rcl_action_take_feedback+0x82>
 8012640:	280a      	cmp	r0, #10
 8012642:	bf18      	it	ne
 8012644:	2001      	movne	r0, #1
 8012646:	b011      	add	sp, #68	@ 0x44
 8012648:	bd30      	pop	{r4, r5, pc}
 801264a:	f7fa f9f1 	bl	800ca30 <rcutils_reset_error>
 801264e:	f640 0036 	movw	r0, #2102	@ 0x836
 8012652:	b011      	add	sp, #68	@ 0x44
 8012654:	bd30      	pop	{r4, r5, pc}
 8012656:	f640 0036 	movw	r0, #2102	@ 0x836
 801265a:	b011      	add	sp, #68	@ 0x44
 801265c:	bd30      	pop	{r4, r5, pc}
 801265e:	f640 0036 	movw	r0, #2102	@ 0x836
 8012662:	4770      	bx	lr
 8012664:	200b      	movs	r0, #11
 8012666:	b011      	add	sp, #68	@ 0x44
 8012668:	bd30      	pop	{r4, r5, pc}
 801266a:	f640 0037 	movw	r0, #2103	@ 0x837
 801266e:	e7f0      	b.n	8012652 <rcl_action_take_feedback+0x6a>

08012670 <rcl_action_wait_set_add_action_client>:
 8012670:	2800      	cmp	r0, #0
 8012672:	d048      	beq.n	8012706 <rcl_action_wait_set_add_action_client+0x96>
 8012674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012676:	460c      	mov	r4, r1
 8012678:	2900      	cmp	r1, #0
 801267a:	d03c      	beq.n	80126f6 <rcl_action_wait_set_add_action_client+0x86>
 801267c:	4605      	mov	r5, r0
 801267e:	6808      	ldr	r0, [r1, #0]
 8012680:	2800      	cmp	r0, #0
 8012682:	d038      	beq.n	80126f6 <rcl_action_wait_set_add_action_client+0x86>
 8012684:	4617      	mov	r7, r2
 8012686:	461e      	mov	r6, r3
 8012688:	f7fd ff32 	bl	80104f0 <rcl_client_is_valid>
 801268c:	b3b0      	cbz	r0, 80126fc <rcl_action_wait_set_add_action_client+0x8c>
 801268e:	6820      	ldr	r0, [r4, #0]
 8012690:	3004      	adds	r0, #4
 8012692:	f7fd ff2d 	bl	80104f0 <rcl_client_is_valid>
 8012696:	b388      	cbz	r0, 80126fc <rcl_action_wait_set_add_action_client+0x8c>
 8012698:	6820      	ldr	r0, [r4, #0]
 801269a:	3008      	adds	r0, #8
 801269c:	f7fd ff28 	bl	80104f0 <rcl_client_is_valid>
 80126a0:	b360      	cbz	r0, 80126fc <rcl_action_wait_set_add_action_client+0x8c>
 80126a2:	6820      	ldr	r0, [r4, #0]
 80126a4:	300c      	adds	r0, #12
 80126a6:	f7fe febf 	bl	8011428 <rcl_subscription_is_valid>
 80126aa:	b338      	cbz	r0, 80126fc <rcl_action_wait_set_add_action_client+0x8c>
 80126ac:	6820      	ldr	r0, [r4, #0]
 80126ae:	3010      	adds	r0, #16
 80126b0:	f7fe feba 	bl	8011428 <rcl_subscription_is_valid>
 80126b4:	b310      	cbz	r0, 80126fc <rcl_action_wait_set_add_action_client+0x8c>
 80126b6:	6821      	ldr	r1, [r4, #0]
 80126b8:	4628      	mov	r0, r5
 80126ba:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80126be:	f7ff fccd 	bl	801205c <rcl_wait_set_add_client>
 80126c2:	b9b8      	cbnz	r0, 80126f4 <rcl_action_wait_set_add_action_client+0x84>
 80126c4:	6821      	ldr	r1, [r4, #0]
 80126c6:	4628      	mov	r0, r5
 80126c8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80126cc:	3104      	adds	r1, #4
 80126ce:	f7ff fcc5 	bl	801205c <rcl_wait_set_add_client>
 80126d2:	b978      	cbnz	r0, 80126f4 <rcl_action_wait_set_add_action_client+0x84>
 80126d4:	6821      	ldr	r1, [r4, #0]
 80126d6:	4628      	mov	r0, r5
 80126d8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80126dc:	3108      	adds	r1, #8
 80126de:	f7ff fcbd 	bl	801205c <rcl_wait_set_add_client>
 80126e2:	b938      	cbnz	r0, 80126f4 <rcl_action_wait_set_add_action_client+0x84>
 80126e4:	6821      	ldr	r1, [r4, #0]
 80126e6:	4628      	mov	r0, r5
 80126e8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80126ec:	310c      	adds	r1, #12
 80126ee:	f7ff f96d 	bl	80119cc <rcl_wait_set_add_subscription>
 80126f2:	b158      	cbz	r0, 801270c <rcl_action_wait_set_add_action_client+0x9c>
 80126f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80126fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126fc:	f7fa f998 	bl	800ca30 <rcutils_reset_error>
 8012700:	f640 0036 	movw	r0, #2102	@ 0x836
 8012704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012706:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801270a:	4770      	bx	lr
 801270c:	6821      	ldr	r1, [r4, #0]
 801270e:	4628      	mov	r0, r5
 8012710:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8012714:	3110      	adds	r1, #16
 8012716:	f7ff f959 	bl	80119cc <rcl_wait_set_add_subscription>
 801271a:	2800      	cmp	r0, #0
 801271c:	d1ea      	bne.n	80126f4 <rcl_action_wait_set_add_action_client+0x84>
 801271e:	b11f      	cbz	r7, 8012728 <rcl_action_wait_set_add_action_client+0xb8>
 8012720:	6823      	ldr	r3, [r4, #0]
 8012722:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8012726:	603b      	str	r3, [r7, #0]
 8012728:	2e00      	cmp	r6, #0
 801272a:	d0e3      	beq.n	80126f4 <rcl_action_wait_set_add_action_client+0x84>
 801272c:	6823      	ldr	r3, [r4, #0]
 801272e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8012732:	6033      	str	r3, [r6, #0]
 8012734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012736:	bf00      	nop

08012738 <rcl_action_client_wait_set_get_entities_ready>:
 8012738:	2800      	cmp	r0, #0
 801273a:	f000 808d 	beq.w	8012858 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801273e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012742:	460c      	mov	r4, r1
 8012744:	2900      	cmp	r1, #0
 8012746:	d077      	beq.n	8012838 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012748:	4605      	mov	r5, r0
 801274a:	6808      	ldr	r0, [r1, #0]
 801274c:	2800      	cmp	r0, #0
 801274e:	d073      	beq.n	8012838 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012750:	4616      	mov	r6, r2
 8012752:	461f      	mov	r7, r3
 8012754:	f7fd fecc 	bl	80104f0 <rcl_client_is_valid>
 8012758:	2800      	cmp	r0, #0
 801275a:	d071      	beq.n	8012840 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801275c:	6820      	ldr	r0, [r4, #0]
 801275e:	3004      	adds	r0, #4
 8012760:	f7fd fec6 	bl	80104f0 <rcl_client_is_valid>
 8012764:	2800      	cmp	r0, #0
 8012766:	d06b      	beq.n	8012840 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012768:	6820      	ldr	r0, [r4, #0]
 801276a:	3008      	adds	r0, #8
 801276c:	f7fd fec0 	bl	80104f0 <rcl_client_is_valid>
 8012770:	2800      	cmp	r0, #0
 8012772:	d065      	beq.n	8012840 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012774:	6820      	ldr	r0, [r4, #0]
 8012776:	300c      	adds	r0, #12
 8012778:	f7fe fe56 	bl	8011428 <rcl_subscription_is_valid>
 801277c:	2800      	cmp	r0, #0
 801277e:	d05f      	beq.n	8012840 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012780:	6820      	ldr	r0, [r4, #0]
 8012782:	3010      	adds	r0, #16
 8012784:	f7fe fe50 	bl	8011428 <rcl_subscription_is_valid>
 8012788:	2800      	cmp	r0, #0
 801278a:	d059      	beq.n	8012840 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801278c:	2e00      	cmp	r6, #0
 801278e:	d060      	beq.n	8012852 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012790:	2f00      	cmp	r7, #0
 8012792:	d05e      	beq.n	8012852 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012794:	9b06      	ldr	r3, [sp, #24]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d05b      	beq.n	8012852 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801279a:	9b07      	ldr	r3, [sp, #28]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d058      	beq.n	8012852 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80127a0:	9b08      	ldr	r3, [sp, #32]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d055      	beq.n	8012852 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80127a6:	6823      	ldr	r3, [r4, #0]
 80127a8:	686a      	ldr	r2, [r5, #4]
 80127aa:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80127ae:	428a      	cmp	r2, r1
 80127b0:	d94c      	bls.n	801284c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80127b2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80127b6:	4282      	cmp	r2, r0
 80127b8:	d948      	bls.n	801284c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80127ba:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80127be:	69ea      	ldr	r2, [r5, #28]
 80127c0:	42a2      	cmp	r2, r4
 80127c2:	d943      	bls.n	801284c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80127c4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80127c8:	4562      	cmp	r2, ip
 80127ca:	d93f      	bls.n	801284c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80127cc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80127d0:	4572      	cmp	r2, lr
 80127d2:	d93b      	bls.n	801284c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80127d4:	69aa      	ldr	r2, [r5, #24]
 80127d6:	682d      	ldr	r5, [r5, #0]
 80127d8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80127dc:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80127e0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80127e4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80127e8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80127ec:	f103 0c0c 	add.w	ip, r3, #12
 80127f0:	eba5 050c 	sub.w	r5, r5, ip
 80127f4:	fab5 f585 	clz	r5, r5
 80127f8:	096d      	lsrs	r5, r5, #5
 80127fa:	7035      	strb	r5, [r6, #0]
 80127fc:	f103 0510 	add.w	r5, r3, #16
 8012800:	1b64      	subs	r4, r4, r5
 8012802:	fab4 f484 	clz	r4, r4
 8012806:	0964      	lsrs	r4, r4, #5
 8012808:	703c      	strb	r4, [r7, #0]
 801280a:	eba3 0008 	sub.w	r0, r3, r8
 801280e:	1d1c      	adds	r4, r3, #4
 8012810:	3308      	adds	r3, #8
 8012812:	1ad3      	subs	r3, r2, r3
 8012814:	fab0 f080 	clz	r0, r0
 8012818:	9a06      	ldr	r2, [sp, #24]
 801281a:	0940      	lsrs	r0, r0, #5
 801281c:	1b09      	subs	r1, r1, r4
 801281e:	7010      	strb	r0, [r2, #0]
 8012820:	fab1 f181 	clz	r1, r1
 8012824:	9a07      	ldr	r2, [sp, #28]
 8012826:	0949      	lsrs	r1, r1, #5
 8012828:	7011      	strb	r1, [r2, #0]
 801282a:	fab3 f383 	clz	r3, r3
 801282e:	9a08      	ldr	r2, [sp, #32]
 8012830:	095b      	lsrs	r3, r3, #5
 8012832:	2000      	movs	r0, #0
 8012834:	7013      	strb	r3, [r2, #0]
 8012836:	e001      	b.n	801283c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8012838:	f640 0036 	movw	r0, #2102	@ 0x836
 801283c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012840:	f7fa f8f6 	bl	800ca30 <rcutils_reset_error>
 8012844:	f640 0036 	movw	r0, #2102	@ 0x836
 8012848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801284c:	2001      	movs	r0, #1
 801284e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012852:	200b      	movs	r0, #11
 8012854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012858:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801285c:	4770      	bx	lr
 801285e:	bf00      	nop

08012860 <rcl_action_take_goal_request>:
 8012860:	2800      	cmp	r0, #0
 8012862:	d039      	beq.n	80128d8 <rcl_action_take_goal_request+0x78>
 8012864:	b570      	push	{r4, r5, r6, lr}
 8012866:	4604      	mov	r4, r0
 8012868:	6800      	ldr	r0, [r0, #0]
 801286a:	b380      	cbz	r0, 80128ce <rcl_action_take_goal_request+0x6e>
 801286c:	460d      	mov	r5, r1
 801286e:	4616      	mov	r6, r2
 8012870:	f7fe fc96 	bl	80111a0 <rcl_service_is_valid>
 8012874:	b330      	cbz	r0, 80128c4 <rcl_action_take_goal_request+0x64>
 8012876:	6820      	ldr	r0, [r4, #0]
 8012878:	3004      	adds	r0, #4
 801287a:	f7fe fc91 	bl	80111a0 <rcl_service_is_valid>
 801287e:	b308      	cbz	r0, 80128c4 <rcl_action_take_goal_request+0x64>
 8012880:	6820      	ldr	r0, [r4, #0]
 8012882:	3008      	adds	r0, #8
 8012884:	f7fe fc8c 	bl	80111a0 <rcl_service_is_valid>
 8012888:	b1e0      	cbz	r0, 80128c4 <rcl_action_take_goal_request+0x64>
 801288a:	6820      	ldr	r0, [r4, #0]
 801288c:	300c      	adds	r0, #12
 801288e:	f7f9 f93d 	bl	800bb0c <rcl_publisher_is_valid>
 8012892:	b1b8      	cbz	r0, 80128c4 <rcl_action_take_goal_request+0x64>
 8012894:	6820      	ldr	r0, [r4, #0]
 8012896:	3010      	adds	r0, #16
 8012898:	f7f9 f938 	bl	800bb0c <rcl_publisher_is_valid>
 801289c:	b190      	cbz	r0, 80128c4 <rcl_action_take_goal_request+0x64>
 801289e:	b1cd      	cbz	r5, 80128d4 <rcl_action_take_goal_request+0x74>
 80128a0:	b1c6      	cbz	r6, 80128d4 <rcl_action_take_goal_request+0x74>
 80128a2:	6820      	ldr	r0, [r4, #0]
 80128a4:	4632      	mov	r2, r6
 80128a6:	4629      	mov	r1, r5
 80128a8:	f7fe fc22 	bl	80110f0 <rcl_take_request>
 80128ac:	b148      	cbz	r0, 80128c2 <rcl_action_take_goal_request+0x62>
 80128ae:	280a      	cmp	r0, #10
 80128b0:	d007      	beq.n	80128c2 <rcl_action_take_goal_request+0x62>
 80128b2:	f240 2259 	movw	r2, #601	@ 0x259
 80128b6:	f640 0399 	movw	r3, #2201	@ 0x899
 80128ba:	4290      	cmp	r0, r2
 80128bc:	bf0c      	ite	eq
 80128be:	4618      	moveq	r0, r3
 80128c0:	2001      	movne	r0, #1
 80128c2:	bd70      	pop	{r4, r5, r6, pc}
 80128c4:	f7fa f8b4 	bl	800ca30 <rcutils_reset_error>
 80128c8:	f640 0098 	movw	r0, #2200	@ 0x898
 80128cc:	bd70      	pop	{r4, r5, r6, pc}
 80128ce:	f640 0098 	movw	r0, #2200	@ 0x898
 80128d2:	bd70      	pop	{r4, r5, r6, pc}
 80128d4:	200b      	movs	r0, #11
 80128d6:	bd70      	pop	{r4, r5, r6, pc}
 80128d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop

080128e0 <rcl_action_send_goal_response>:
 80128e0:	b390      	cbz	r0, 8012948 <rcl_action_send_goal_response+0x68>
 80128e2:	b570      	push	{r4, r5, r6, lr}
 80128e4:	4604      	mov	r4, r0
 80128e6:	6800      	ldr	r0, [r0, #0]
 80128e8:	b348      	cbz	r0, 801293e <rcl_action_send_goal_response+0x5e>
 80128ea:	460d      	mov	r5, r1
 80128ec:	4616      	mov	r6, r2
 80128ee:	f7fe fc57 	bl	80111a0 <rcl_service_is_valid>
 80128f2:	b1f8      	cbz	r0, 8012934 <rcl_action_send_goal_response+0x54>
 80128f4:	6820      	ldr	r0, [r4, #0]
 80128f6:	3004      	adds	r0, #4
 80128f8:	f7fe fc52 	bl	80111a0 <rcl_service_is_valid>
 80128fc:	b1d0      	cbz	r0, 8012934 <rcl_action_send_goal_response+0x54>
 80128fe:	6820      	ldr	r0, [r4, #0]
 8012900:	3008      	adds	r0, #8
 8012902:	f7fe fc4d 	bl	80111a0 <rcl_service_is_valid>
 8012906:	b1a8      	cbz	r0, 8012934 <rcl_action_send_goal_response+0x54>
 8012908:	6820      	ldr	r0, [r4, #0]
 801290a:	300c      	adds	r0, #12
 801290c:	f7f9 f8fe 	bl	800bb0c <rcl_publisher_is_valid>
 8012910:	b180      	cbz	r0, 8012934 <rcl_action_send_goal_response+0x54>
 8012912:	6820      	ldr	r0, [r4, #0]
 8012914:	3010      	adds	r0, #16
 8012916:	f7f9 f8f9 	bl	800bb0c <rcl_publisher_is_valid>
 801291a:	b158      	cbz	r0, 8012934 <rcl_action_send_goal_response+0x54>
 801291c:	b195      	cbz	r5, 8012944 <rcl_action_send_goal_response+0x64>
 801291e:	b18e      	cbz	r6, 8012944 <rcl_action_send_goal_response+0x64>
 8012920:	6820      	ldr	r0, [r4, #0]
 8012922:	4632      	mov	r2, r6
 8012924:	4629      	mov	r1, r5
 8012926:	f7fe fc23 	bl	8011170 <rcl_send_response>
 801292a:	b110      	cbz	r0, 8012932 <rcl_action_send_goal_response+0x52>
 801292c:	2802      	cmp	r0, #2
 801292e:	bf18      	it	ne
 8012930:	2001      	movne	r0, #1
 8012932:	bd70      	pop	{r4, r5, r6, pc}
 8012934:	f7fa f87c 	bl	800ca30 <rcutils_reset_error>
 8012938:	f640 0098 	movw	r0, #2200	@ 0x898
 801293c:	bd70      	pop	{r4, r5, r6, pc}
 801293e:	f640 0098 	movw	r0, #2200	@ 0x898
 8012942:	bd70      	pop	{r4, r5, r6, pc}
 8012944:	200b      	movs	r0, #11
 8012946:	bd70      	pop	{r4, r5, r6, pc}
 8012948:	f640 0098 	movw	r0, #2200	@ 0x898
 801294c:	4770      	bx	lr
 801294e:	bf00      	nop

08012950 <rcl_action_take_result_request>:
 8012950:	2800      	cmp	r0, #0
 8012952:	d03a      	beq.n	80129ca <rcl_action_take_result_request+0x7a>
 8012954:	b570      	push	{r4, r5, r6, lr}
 8012956:	4604      	mov	r4, r0
 8012958:	6800      	ldr	r0, [r0, #0]
 801295a:	b388      	cbz	r0, 80129c0 <rcl_action_take_result_request+0x70>
 801295c:	460d      	mov	r5, r1
 801295e:	4616      	mov	r6, r2
 8012960:	f7fe fc1e 	bl	80111a0 <rcl_service_is_valid>
 8012964:	b338      	cbz	r0, 80129b6 <rcl_action_take_result_request+0x66>
 8012966:	6820      	ldr	r0, [r4, #0]
 8012968:	3004      	adds	r0, #4
 801296a:	f7fe fc19 	bl	80111a0 <rcl_service_is_valid>
 801296e:	b310      	cbz	r0, 80129b6 <rcl_action_take_result_request+0x66>
 8012970:	6820      	ldr	r0, [r4, #0]
 8012972:	3008      	adds	r0, #8
 8012974:	f7fe fc14 	bl	80111a0 <rcl_service_is_valid>
 8012978:	b1e8      	cbz	r0, 80129b6 <rcl_action_take_result_request+0x66>
 801297a:	6820      	ldr	r0, [r4, #0]
 801297c:	300c      	adds	r0, #12
 801297e:	f7f9 f8c5 	bl	800bb0c <rcl_publisher_is_valid>
 8012982:	b1c0      	cbz	r0, 80129b6 <rcl_action_take_result_request+0x66>
 8012984:	6820      	ldr	r0, [r4, #0]
 8012986:	3010      	adds	r0, #16
 8012988:	f7f9 f8c0 	bl	800bb0c <rcl_publisher_is_valid>
 801298c:	b198      	cbz	r0, 80129b6 <rcl_action_take_result_request+0x66>
 801298e:	b1d5      	cbz	r5, 80129c6 <rcl_action_take_result_request+0x76>
 8012990:	b1ce      	cbz	r6, 80129c6 <rcl_action_take_result_request+0x76>
 8012992:	6820      	ldr	r0, [r4, #0]
 8012994:	4632      	mov	r2, r6
 8012996:	4629      	mov	r1, r5
 8012998:	3008      	adds	r0, #8
 801299a:	f7fe fba9 	bl	80110f0 <rcl_take_request>
 801299e:	b148      	cbz	r0, 80129b4 <rcl_action_take_result_request+0x64>
 80129a0:	280a      	cmp	r0, #10
 80129a2:	d007      	beq.n	80129b4 <rcl_action_take_result_request+0x64>
 80129a4:	f240 2259 	movw	r2, #601	@ 0x259
 80129a8:	f640 0399 	movw	r3, #2201	@ 0x899
 80129ac:	4290      	cmp	r0, r2
 80129ae:	bf0c      	ite	eq
 80129b0:	4618      	moveq	r0, r3
 80129b2:	2001      	movne	r0, #1
 80129b4:	bd70      	pop	{r4, r5, r6, pc}
 80129b6:	f7fa f83b 	bl	800ca30 <rcutils_reset_error>
 80129ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80129be:	bd70      	pop	{r4, r5, r6, pc}
 80129c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80129c4:	bd70      	pop	{r4, r5, r6, pc}
 80129c6:	200b      	movs	r0, #11
 80129c8:	bd70      	pop	{r4, r5, r6, pc}
 80129ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80129ce:	4770      	bx	lr

080129d0 <rcl_action_take_cancel_request>:
 80129d0:	2800      	cmp	r0, #0
 80129d2:	d03a      	beq.n	8012a4a <rcl_action_take_cancel_request+0x7a>
 80129d4:	b570      	push	{r4, r5, r6, lr}
 80129d6:	4604      	mov	r4, r0
 80129d8:	6800      	ldr	r0, [r0, #0]
 80129da:	b388      	cbz	r0, 8012a40 <rcl_action_take_cancel_request+0x70>
 80129dc:	460d      	mov	r5, r1
 80129de:	4616      	mov	r6, r2
 80129e0:	f7fe fbde 	bl	80111a0 <rcl_service_is_valid>
 80129e4:	b338      	cbz	r0, 8012a36 <rcl_action_take_cancel_request+0x66>
 80129e6:	6820      	ldr	r0, [r4, #0]
 80129e8:	3004      	adds	r0, #4
 80129ea:	f7fe fbd9 	bl	80111a0 <rcl_service_is_valid>
 80129ee:	b310      	cbz	r0, 8012a36 <rcl_action_take_cancel_request+0x66>
 80129f0:	6820      	ldr	r0, [r4, #0]
 80129f2:	3008      	adds	r0, #8
 80129f4:	f7fe fbd4 	bl	80111a0 <rcl_service_is_valid>
 80129f8:	b1e8      	cbz	r0, 8012a36 <rcl_action_take_cancel_request+0x66>
 80129fa:	6820      	ldr	r0, [r4, #0]
 80129fc:	300c      	adds	r0, #12
 80129fe:	f7f9 f885 	bl	800bb0c <rcl_publisher_is_valid>
 8012a02:	b1c0      	cbz	r0, 8012a36 <rcl_action_take_cancel_request+0x66>
 8012a04:	6820      	ldr	r0, [r4, #0]
 8012a06:	3010      	adds	r0, #16
 8012a08:	f7f9 f880 	bl	800bb0c <rcl_publisher_is_valid>
 8012a0c:	b198      	cbz	r0, 8012a36 <rcl_action_take_cancel_request+0x66>
 8012a0e:	b1d5      	cbz	r5, 8012a46 <rcl_action_take_cancel_request+0x76>
 8012a10:	b1ce      	cbz	r6, 8012a46 <rcl_action_take_cancel_request+0x76>
 8012a12:	6820      	ldr	r0, [r4, #0]
 8012a14:	4632      	mov	r2, r6
 8012a16:	4629      	mov	r1, r5
 8012a18:	3004      	adds	r0, #4
 8012a1a:	f7fe fb69 	bl	80110f0 <rcl_take_request>
 8012a1e:	b148      	cbz	r0, 8012a34 <rcl_action_take_cancel_request+0x64>
 8012a20:	280a      	cmp	r0, #10
 8012a22:	d007      	beq.n	8012a34 <rcl_action_take_cancel_request+0x64>
 8012a24:	f240 2259 	movw	r2, #601	@ 0x259
 8012a28:	f640 0399 	movw	r3, #2201	@ 0x899
 8012a2c:	4290      	cmp	r0, r2
 8012a2e:	bf0c      	ite	eq
 8012a30:	4618      	moveq	r0, r3
 8012a32:	2001      	movne	r0, #1
 8012a34:	bd70      	pop	{r4, r5, r6, pc}
 8012a36:	f7f9 fffb 	bl	800ca30 <rcutils_reset_error>
 8012a3a:	f640 0098 	movw	r0, #2200	@ 0x898
 8012a3e:	bd70      	pop	{r4, r5, r6, pc}
 8012a40:	f640 0098 	movw	r0, #2200	@ 0x898
 8012a44:	bd70      	pop	{r4, r5, r6, pc}
 8012a46:	200b      	movs	r0, #11
 8012a48:	bd70      	pop	{r4, r5, r6, pc}
 8012a4a:	f640 0098 	movw	r0, #2200	@ 0x898
 8012a4e:	4770      	bx	lr

08012a50 <rcl_action_send_cancel_response>:
 8012a50:	b398      	cbz	r0, 8012aba <rcl_action_send_cancel_response+0x6a>
 8012a52:	b570      	push	{r4, r5, r6, lr}
 8012a54:	4604      	mov	r4, r0
 8012a56:	6800      	ldr	r0, [r0, #0]
 8012a58:	b350      	cbz	r0, 8012ab0 <rcl_action_send_cancel_response+0x60>
 8012a5a:	460d      	mov	r5, r1
 8012a5c:	4616      	mov	r6, r2
 8012a5e:	f7fe fb9f 	bl	80111a0 <rcl_service_is_valid>
 8012a62:	b300      	cbz	r0, 8012aa6 <rcl_action_send_cancel_response+0x56>
 8012a64:	6820      	ldr	r0, [r4, #0]
 8012a66:	3004      	adds	r0, #4
 8012a68:	f7fe fb9a 	bl	80111a0 <rcl_service_is_valid>
 8012a6c:	b1d8      	cbz	r0, 8012aa6 <rcl_action_send_cancel_response+0x56>
 8012a6e:	6820      	ldr	r0, [r4, #0]
 8012a70:	3008      	adds	r0, #8
 8012a72:	f7fe fb95 	bl	80111a0 <rcl_service_is_valid>
 8012a76:	b1b0      	cbz	r0, 8012aa6 <rcl_action_send_cancel_response+0x56>
 8012a78:	6820      	ldr	r0, [r4, #0]
 8012a7a:	300c      	adds	r0, #12
 8012a7c:	f7f9 f846 	bl	800bb0c <rcl_publisher_is_valid>
 8012a80:	b188      	cbz	r0, 8012aa6 <rcl_action_send_cancel_response+0x56>
 8012a82:	6820      	ldr	r0, [r4, #0]
 8012a84:	3010      	adds	r0, #16
 8012a86:	f7f9 f841 	bl	800bb0c <rcl_publisher_is_valid>
 8012a8a:	b160      	cbz	r0, 8012aa6 <rcl_action_send_cancel_response+0x56>
 8012a8c:	b19d      	cbz	r5, 8012ab6 <rcl_action_send_cancel_response+0x66>
 8012a8e:	b196      	cbz	r6, 8012ab6 <rcl_action_send_cancel_response+0x66>
 8012a90:	6820      	ldr	r0, [r4, #0]
 8012a92:	4632      	mov	r2, r6
 8012a94:	4629      	mov	r1, r5
 8012a96:	3004      	adds	r0, #4
 8012a98:	f7fe fb6a 	bl	8011170 <rcl_send_response>
 8012a9c:	b110      	cbz	r0, 8012aa4 <rcl_action_send_cancel_response+0x54>
 8012a9e:	2802      	cmp	r0, #2
 8012aa0:	bf18      	it	ne
 8012aa2:	2001      	movne	r0, #1
 8012aa4:	bd70      	pop	{r4, r5, r6, pc}
 8012aa6:	f7f9 ffc3 	bl	800ca30 <rcutils_reset_error>
 8012aaa:	f640 0098 	movw	r0, #2200	@ 0x898
 8012aae:	bd70      	pop	{r4, r5, r6, pc}
 8012ab0:	f640 0098 	movw	r0, #2200	@ 0x898
 8012ab4:	bd70      	pop	{r4, r5, r6, pc}
 8012ab6:	200b      	movs	r0, #11
 8012ab8:	bd70      	pop	{r4, r5, r6, pc}
 8012aba:	f640 0098 	movw	r0, #2200	@ 0x898
 8012abe:	4770      	bx	lr

08012ac0 <rcl_action_wait_set_add_action_server>:
 8012ac0:	2800      	cmp	r0, #0
 8012ac2:	d04d      	beq.n	8012b60 <rcl_action_wait_set_add_action_server+0xa0>
 8012ac4:	b570      	push	{r4, r5, r6, lr}
 8012ac6:	460c      	mov	r4, r1
 8012ac8:	b159      	cbz	r1, 8012ae2 <rcl_action_wait_set_add_action_server+0x22>
 8012aca:	4605      	mov	r5, r0
 8012acc:	6808      	ldr	r0, [r1, #0]
 8012ace:	b140      	cbz	r0, 8012ae2 <rcl_action_wait_set_add_action_server+0x22>
 8012ad0:	4616      	mov	r6, r2
 8012ad2:	f7fe fb65 	bl	80111a0 <rcl_service_is_valid>
 8012ad6:	b120      	cbz	r0, 8012ae2 <rcl_action_wait_set_add_action_server+0x22>
 8012ad8:	6820      	ldr	r0, [r4, #0]
 8012ada:	3004      	adds	r0, #4
 8012adc:	f7fe fb60 	bl	80111a0 <rcl_service_is_valid>
 8012ae0:	b910      	cbnz	r0, 8012ae8 <rcl_action_wait_set_add_action_server+0x28>
 8012ae2:	f640 0098 	movw	r0, #2200	@ 0x898
 8012ae6:	bd70      	pop	{r4, r5, r6, pc}
 8012ae8:	6820      	ldr	r0, [r4, #0]
 8012aea:	3008      	adds	r0, #8
 8012aec:	f7fe fb58 	bl	80111a0 <rcl_service_is_valid>
 8012af0:	2800      	cmp	r0, #0
 8012af2:	d0f6      	beq.n	8012ae2 <rcl_action_wait_set_add_action_server+0x22>
 8012af4:	6820      	ldr	r0, [r4, #0]
 8012af6:	300c      	adds	r0, #12
 8012af8:	f7f9 f820 	bl	800bb3c <rcl_publisher_is_valid_except_context>
 8012afc:	2800      	cmp	r0, #0
 8012afe:	d0f0      	beq.n	8012ae2 <rcl_action_wait_set_add_action_server+0x22>
 8012b00:	6820      	ldr	r0, [r4, #0]
 8012b02:	3010      	adds	r0, #16
 8012b04:	f7f9 f81a 	bl	800bb3c <rcl_publisher_is_valid_except_context>
 8012b08:	2800      	cmp	r0, #0
 8012b0a:	d0ea      	beq.n	8012ae2 <rcl_action_wait_set_add_action_server+0x22>
 8012b0c:	6821      	ldr	r1, [r4, #0]
 8012b0e:	4628      	mov	r0, r5
 8012b10:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8012b14:	f7ff face 	bl	80120b4 <rcl_wait_set_add_service>
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	d1e4      	bne.n	8012ae6 <rcl_action_wait_set_add_action_server+0x26>
 8012b1c:	6821      	ldr	r1, [r4, #0]
 8012b1e:	4628      	mov	r0, r5
 8012b20:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8012b24:	3104      	adds	r1, #4
 8012b26:	f7ff fac5 	bl	80120b4 <rcl_wait_set_add_service>
 8012b2a:	2800      	cmp	r0, #0
 8012b2c:	d1db      	bne.n	8012ae6 <rcl_action_wait_set_add_action_server+0x26>
 8012b2e:	6821      	ldr	r1, [r4, #0]
 8012b30:	4628      	mov	r0, r5
 8012b32:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8012b36:	3108      	adds	r1, #8
 8012b38:	f7ff fabc 	bl	80120b4 <rcl_wait_set_add_service>
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	d1d2      	bne.n	8012ae6 <rcl_action_wait_set_add_action_server+0x26>
 8012b40:	6821      	ldr	r1, [r4, #0]
 8012b42:	4628      	mov	r0, r5
 8012b44:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8012b48:	3114      	adds	r1, #20
 8012b4a:	f7ff fa57 	bl	8011ffc <rcl_wait_set_add_timer>
 8012b4e:	2800      	cmp	r0, #0
 8012b50:	d1c9      	bne.n	8012ae6 <rcl_action_wait_set_add_action_server+0x26>
 8012b52:	2e00      	cmp	r6, #0
 8012b54:	d0c7      	beq.n	8012ae6 <rcl_action_wait_set_add_action_server+0x26>
 8012b56:	6823      	ldr	r3, [r4, #0]
 8012b58:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8012b5c:	6033      	str	r3, [r6, #0]
 8012b5e:	bd70      	pop	{r4, r5, r6, pc}
 8012b60:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012b64:	4770      	bx	lr
 8012b66:	bf00      	nop

08012b68 <rcl_action_server_wait_set_get_entities_ready>:
 8012b68:	2800      	cmp	r0, #0
 8012b6a:	d05a      	beq.n	8012c22 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8012b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b6e:	460c      	mov	r4, r1
 8012b70:	b161      	cbz	r1, 8012b8c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012b72:	4605      	mov	r5, r0
 8012b74:	6808      	ldr	r0, [r1, #0]
 8012b76:	b148      	cbz	r0, 8012b8c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012b78:	4616      	mov	r6, r2
 8012b7a:	461f      	mov	r7, r3
 8012b7c:	f7fe fb10 	bl	80111a0 <rcl_service_is_valid>
 8012b80:	b120      	cbz	r0, 8012b8c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012b82:	6820      	ldr	r0, [r4, #0]
 8012b84:	3004      	adds	r0, #4
 8012b86:	f7fe fb0b 	bl	80111a0 <rcl_service_is_valid>
 8012b8a:	b910      	cbnz	r0, 8012b92 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8012b8c:	f640 0098 	movw	r0, #2200	@ 0x898
 8012b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b92:	6820      	ldr	r0, [r4, #0]
 8012b94:	3008      	adds	r0, #8
 8012b96:	f7fe fb03 	bl	80111a0 <rcl_service_is_valid>
 8012b9a:	2800      	cmp	r0, #0
 8012b9c:	d0f6      	beq.n	8012b8c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012b9e:	6820      	ldr	r0, [r4, #0]
 8012ba0:	300c      	adds	r0, #12
 8012ba2:	f7f8 ffcb 	bl	800bb3c <rcl_publisher_is_valid_except_context>
 8012ba6:	2800      	cmp	r0, #0
 8012ba8:	d0f0      	beq.n	8012b8c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012baa:	6820      	ldr	r0, [r4, #0]
 8012bac:	3010      	adds	r0, #16
 8012bae:	f7f8 ffc5 	bl	800bb3c <rcl_publisher_is_valid_except_context>
 8012bb2:	2800      	cmp	r0, #0
 8012bb4:	d0ea      	beq.n	8012b8c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012bb6:	b3be      	cbz	r6, 8012c28 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012bb8:	b3b7      	cbz	r7, 8012c28 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012bba:	9b06      	ldr	r3, [sp, #24]
 8012bbc:	b3a3      	cbz	r3, 8012c28 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012bbe:	9b07      	ldr	r3, [sp, #28]
 8012bc0:	b393      	cbz	r3, 8012c28 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012bc2:	6821      	ldr	r1, [r4, #0]
 8012bc4:	692a      	ldr	r2, [r5, #16]
 8012bc6:	6a2c      	ldr	r4, [r5, #32]
 8012bc8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8012bcc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8012bd0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8012bd4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8012bd8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8012bdc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8012be0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012be4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8012be8:	1a64      	subs	r4, r4, r1
 8012bea:	fab4 f484 	clz	r4, r4
 8012bee:	0964      	lsrs	r4, r4, #5
 8012bf0:	7034      	strb	r4, [r6, #0]
 8012bf2:	1d0c      	adds	r4, r1, #4
 8012bf4:	1b1b      	subs	r3, r3, r4
 8012bf6:	fab3 f383 	clz	r3, r3
 8012bfa:	095b      	lsrs	r3, r3, #5
 8012bfc:	f101 0408 	add.w	r4, r1, #8
 8012c00:	703b      	strb	r3, [r7, #0]
 8012c02:	f101 0314 	add.w	r3, r1, #20
 8012c06:	1b01      	subs	r1, r0, r4
 8012c08:	1ad3      	subs	r3, r2, r3
 8012c0a:	fab1 f181 	clz	r1, r1
 8012c0e:	9a06      	ldr	r2, [sp, #24]
 8012c10:	0949      	lsrs	r1, r1, #5
 8012c12:	7011      	strb	r1, [r2, #0]
 8012c14:	fab3 f383 	clz	r3, r3
 8012c18:	9a07      	ldr	r2, [sp, #28]
 8012c1a:	095b      	lsrs	r3, r3, #5
 8012c1c:	2000      	movs	r0, #0
 8012c1e:	7013      	strb	r3, [r2, #0]
 8012c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c22:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012c26:	4770      	bx	lr
 8012c28:	200b      	movs	r0, #11
 8012c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012c2c <_execute_event_handler>:
 8012c2c:	2002      	movs	r0, #2
 8012c2e:	4770      	bx	lr

08012c30 <_cancel_goal_event_handler>:
 8012c30:	2003      	movs	r0, #3
 8012c32:	4770      	bx	lr

08012c34 <_succeed_event_handler>:
 8012c34:	2004      	movs	r0, #4
 8012c36:	4770      	bx	lr

08012c38 <_abort_event_handler>:
 8012c38:	2006      	movs	r0, #6
 8012c3a:	4770      	bx	lr

08012c3c <_canceled_event_handler>:
 8012c3c:	2005      	movs	r0, #5
 8012c3e:	4770      	bx	lr

08012c40 <rcl_action_transition_goal_state>:
 8012c40:	b2c2      	uxtb	r2, r0
 8012c42:	2a06      	cmp	r2, #6
 8012c44:	d80c      	bhi.n	8012c60 <rcl_action_transition_goal_state+0x20>
 8012c46:	2904      	cmp	r1, #4
 8012c48:	d80a      	bhi.n	8012c60 <rcl_action_transition_goal_state+0x20>
 8012c4a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012c4e:	b410      	push	{r4}
 8012c50:	1853      	adds	r3, r2, r1
 8012c52:	4c06      	ldr	r4, [pc, #24]	@ (8012c6c <rcl_action_transition_goal_state+0x2c>)
 8012c54:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012c58:	b123      	cbz	r3, 8012c64 <rcl_action_transition_goal_state+0x24>
 8012c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c5e:	4718      	bx	r3
 8012c60:	2000      	movs	r0, #0
 8012c62:	4770      	bx	lr
 8012c64:	2000      	movs	r0, #0
 8012c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c6a:	4770      	bx	lr
 8012c6c:	08018efc 	.word	0x08018efc

08012c70 <rcl_action_get_zero_initialized_cancel_response>:
 8012c70:	b510      	push	{r4, lr}
 8012c72:	4c07      	ldr	r4, [pc, #28]	@ (8012c90 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8012c74:	4686      	mov	lr, r0
 8012c76:	4684      	mov	ip, r0
 8012c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012c7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012c80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c84:	6823      	ldr	r3, [r4, #0]
 8012c86:	f8cc 3000 	str.w	r3, [ip]
 8012c8a:	4670      	mov	r0, lr
 8012c8c:	bd10      	pop	{r4, pc}
 8012c8e:	bf00      	nop
 8012c90:	08018f88 	.word	0x08018f88

08012c94 <rclc_action_send_result_request>:
 8012c94:	b1d0      	cbz	r0, 8012ccc <rclc_action_send_result_request+0x38>
 8012c96:	b500      	push	{lr}
 8012c98:	4684      	mov	ip, r0
 8012c9a:	b087      	sub	sp, #28
 8012c9c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8012ca0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8012ca4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8012ca8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8012cac:	f10d 0e08 	add.w	lr, sp, #8
 8012cb0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012cb4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012cb8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8012cbc:	a902      	add	r1, sp, #8
 8012cbe:	3010      	adds	r0, #16
 8012cc0:	f7ff fbda 	bl	8012478 <rcl_action_send_result_request>
 8012cc4:	b920      	cbnz	r0, 8012cd0 <rclc_action_send_result_request+0x3c>
 8012cc6:	b007      	add	sp, #28
 8012cc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ccc:	200b      	movs	r0, #11
 8012cce:	4770      	bx	lr
 8012cd0:	9001      	str	r0, [sp, #4]
 8012cd2:	f7f9 fead 	bl	800ca30 <rcutils_reset_error>
 8012cd6:	9801      	ldr	r0, [sp, #4]
 8012cd8:	b007      	add	sp, #28
 8012cda:	f85d fb04 	ldr.w	pc, [sp], #4
 8012cde:	bf00      	nop

08012ce0 <rclc_action_take_goal_handle>:
 8012ce0:	b160      	cbz	r0, 8012cfc <rclc_action_take_goal_handle+0x1c>
 8012ce2:	6883      	ldr	r3, [r0, #8]
 8012ce4:	b143      	cbz	r3, 8012cf8 <rclc_action_take_goal_handle+0x18>
 8012ce6:	6819      	ldr	r1, [r3, #0]
 8012ce8:	6081      	str	r1, [r0, #8]
 8012cea:	2200      	movs	r2, #0
 8012cec:	721a      	strb	r2, [r3, #8]
 8012cee:	68c1      	ldr	r1, [r0, #12]
 8012cf0:	6019      	str	r1, [r3, #0]
 8012cf2:	621a      	str	r2, [r3, #32]
 8012cf4:	849a      	strh	r2, [r3, #36]	@ 0x24
 8012cf6:	60c3      	str	r3, [r0, #12]
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	4770      	bx	lr
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	e7fb      	b.n	8012cf8 <rclc_action_take_goal_handle+0x18>

08012d00 <rclc_action_remove_used_goal_handle>:
 8012d00:	b180      	cbz	r0, 8012d24 <rclc_action_remove_used_goal_handle+0x24>
 8012d02:	b179      	cbz	r1, 8012d24 <rclc_action_remove_used_goal_handle+0x24>
 8012d04:	68c3      	ldr	r3, [r0, #12]
 8012d06:	4299      	cmp	r1, r3
 8012d08:	d00d      	beq.n	8012d26 <rclc_action_remove_used_goal_handle+0x26>
 8012d0a:	b12b      	cbz	r3, 8012d18 <rclc_action_remove_used_goal_handle+0x18>
 8012d0c:	681a      	ldr	r2, [r3, #0]
 8012d0e:	4291      	cmp	r1, r2
 8012d10:	d003      	beq.n	8012d1a <rclc_action_remove_used_goal_handle+0x1a>
 8012d12:	4613      	mov	r3, r2
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d1f9      	bne.n	8012d0c <rclc_action_remove_used_goal_handle+0xc>
 8012d18:	4770      	bx	lr
 8012d1a:	680a      	ldr	r2, [r1, #0]
 8012d1c:	601a      	str	r2, [r3, #0]
 8012d1e:	6883      	ldr	r3, [r0, #8]
 8012d20:	600b      	str	r3, [r1, #0]
 8012d22:	6081      	str	r1, [r0, #8]
 8012d24:	4770      	bx	lr
 8012d26:	680b      	ldr	r3, [r1, #0]
 8012d28:	60c3      	str	r3, [r0, #12]
 8012d2a:	e7f8      	b.n	8012d1e <rclc_action_remove_used_goal_handle+0x1e>

08012d2c <rclc_action_find_goal_handle_by_uuid>:
 8012d2c:	b538      	push	{r3, r4, r5, lr}
 8012d2e:	b180      	cbz	r0, 8012d52 <rclc_action_find_goal_handle_by_uuid+0x26>
 8012d30:	460d      	mov	r5, r1
 8012d32:	b181      	cbz	r1, 8012d56 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8012d34:	68c4      	ldr	r4, [r0, #12]
 8012d36:	b914      	cbnz	r4, 8012d3e <rclc_action_find_goal_handle_by_uuid+0x12>
 8012d38:	e009      	b.n	8012d4e <rclc_action_find_goal_handle_by_uuid+0x22>
 8012d3a:	6824      	ldr	r4, [r4, #0]
 8012d3c:	b13c      	cbz	r4, 8012d4e <rclc_action_find_goal_handle_by_uuid+0x22>
 8012d3e:	f104 0009 	add.w	r0, r4, #9
 8012d42:	2210      	movs	r2, #16
 8012d44:	4629      	mov	r1, r5
 8012d46:	f004 fd29 	bl	801779c <memcmp>
 8012d4a:	2800      	cmp	r0, #0
 8012d4c:	d1f5      	bne.n	8012d3a <rclc_action_find_goal_handle_by_uuid+0xe>
 8012d4e:	4620      	mov	r0, r4
 8012d50:	bd38      	pop	{r3, r4, r5, pc}
 8012d52:	4604      	mov	r4, r0
 8012d54:	e7fb      	b.n	8012d4e <rclc_action_find_goal_handle_by_uuid+0x22>
 8012d56:	460c      	mov	r4, r1
 8012d58:	e7f9      	b.n	8012d4e <rclc_action_find_goal_handle_by_uuid+0x22>
 8012d5a:	bf00      	nop

08012d5c <rclc_action_find_first_handle_by_status>:
 8012d5c:	b140      	cbz	r0, 8012d70 <rclc_action_find_first_handle_by_status+0x14>
 8012d5e:	68c0      	ldr	r0, [r0, #12]
 8012d60:	b910      	cbnz	r0, 8012d68 <rclc_action_find_first_handle_by_status+0xc>
 8012d62:	e005      	b.n	8012d70 <rclc_action_find_first_handle_by_status+0x14>
 8012d64:	6800      	ldr	r0, [r0, #0]
 8012d66:	b118      	cbz	r0, 8012d70 <rclc_action_find_first_handle_by_status+0x14>
 8012d68:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012d6c:	428b      	cmp	r3, r1
 8012d6e:	d1f9      	bne.n	8012d64 <rclc_action_find_first_handle_by_status+0x8>
 8012d70:	4770      	bx	lr
 8012d72:	bf00      	nop

08012d74 <rclc_action_find_first_terminated_handle>:
 8012d74:	b140      	cbz	r0, 8012d88 <rclc_action_find_first_terminated_handle+0x14>
 8012d76:	68c0      	ldr	r0, [r0, #12]
 8012d78:	b910      	cbnz	r0, 8012d80 <rclc_action_find_first_terminated_handle+0xc>
 8012d7a:	e005      	b.n	8012d88 <rclc_action_find_first_terminated_handle+0x14>
 8012d7c:	6800      	ldr	r0, [r0, #0]
 8012d7e:	b118      	cbz	r0, 8012d88 <rclc_action_find_first_terminated_handle+0x14>
 8012d80:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012d84:	2b03      	cmp	r3, #3
 8012d86:	ddf9      	ble.n	8012d7c <rclc_action_find_first_terminated_handle+0x8>
 8012d88:	4770      	bx	lr
 8012d8a:	bf00      	nop

08012d8c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8012d8c:	b170      	cbz	r0, 8012dac <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012d8e:	68c0      	ldr	r0, [r0, #12]
 8012d90:	b160      	cbz	r0, 8012dac <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012d92:	b410      	push	{r4}
 8012d94:	e001      	b.n	8012d9a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8012d96:	6800      	ldr	r0, [r0, #0]
 8012d98:	b128      	cbz	r0, 8012da6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8012d9a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8012d9e:	4299      	cmp	r1, r3
 8012da0:	bf08      	it	eq
 8012da2:	4294      	cmpeq	r4, r2
 8012da4:	d1f7      	bne.n	8012d96 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8012da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012daa:	4770      	bx	lr
 8012dac:	4770      	bx	lr
 8012dae:	bf00      	nop

08012db0 <rclc_action_find_handle_by_result_request_sequence_number>:
 8012db0:	b170      	cbz	r0, 8012dd0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012db2:	68c0      	ldr	r0, [r0, #12]
 8012db4:	b160      	cbz	r0, 8012dd0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012db6:	b410      	push	{r4}
 8012db8:	e001      	b.n	8012dbe <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8012dba:	6800      	ldr	r0, [r0, #0]
 8012dbc:	b128      	cbz	r0, 8012dca <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8012dbe:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8012dc2:	4299      	cmp	r1, r3
 8012dc4:	bf08      	it	eq
 8012dc6:	4294      	cmpeq	r4, r2
 8012dc8:	d1f7      	bne.n	8012dba <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8012dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012dce:	4770      	bx	lr
 8012dd0:	4770      	bx	lr
 8012dd2:	bf00      	nop

08012dd4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8012dd4:	b170      	cbz	r0, 8012df4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012dd6:	68c0      	ldr	r0, [r0, #12]
 8012dd8:	b160      	cbz	r0, 8012df4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012dda:	b410      	push	{r4}
 8012ddc:	e001      	b.n	8012de2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8012dde:	6800      	ldr	r0, [r0, #0]
 8012de0:	b128      	cbz	r0, 8012dee <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8012de2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8012de6:	4299      	cmp	r1, r3
 8012de8:	bf08      	it	eq
 8012dea:	4294      	cmpeq	r4, r2
 8012dec:	d1f7      	bne.n	8012dde <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8012dee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012df2:	4770      	bx	lr
 8012df4:	4770      	bx	lr
 8012df6:	bf00      	nop

08012df8 <rclc_action_find_first_handle_with_goal_response>:
 8012df8:	b140      	cbz	r0, 8012e0c <rclc_action_find_first_handle_with_goal_response+0x14>
 8012dfa:	68c0      	ldr	r0, [r0, #12]
 8012dfc:	b910      	cbnz	r0, 8012e04 <rclc_action_find_first_handle_with_goal_response+0xc>
 8012dfe:	e005      	b.n	8012e0c <rclc_action_find_first_handle_with_goal_response+0x14>
 8012e00:	6800      	ldr	r0, [r0, #0]
 8012e02:	b118      	cbz	r0, 8012e0c <rclc_action_find_first_handle_with_goal_response+0x14>
 8012e04:	f890 3020 	ldrb.w	r3, [r0, #32]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d0f9      	beq.n	8012e00 <rclc_action_find_first_handle_with_goal_response+0x8>
 8012e0c:	4770      	bx	lr
 8012e0e:	bf00      	nop

08012e10 <rclc_action_find_first_handle_with_result_response>:
 8012e10:	b140      	cbz	r0, 8012e24 <rclc_action_find_first_handle_with_result_response+0x14>
 8012e12:	68c0      	ldr	r0, [r0, #12]
 8012e14:	b910      	cbnz	r0, 8012e1c <rclc_action_find_first_handle_with_result_response+0xc>
 8012e16:	e005      	b.n	8012e24 <rclc_action_find_first_handle_with_result_response+0x14>
 8012e18:	6800      	ldr	r0, [r0, #0]
 8012e1a:	b118      	cbz	r0, 8012e24 <rclc_action_find_first_handle_with_result_response+0x14>
 8012e1c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d0f9      	beq.n	8012e18 <rclc_action_find_first_handle_with_result_response+0x8>
 8012e24:	4770      	bx	lr
 8012e26:	bf00      	nop

08012e28 <rclc_action_server_response_goal_request>:
 8012e28:	b198      	cbz	r0, 8012e52 <rclc_action_server_response_goal_request+0x2a>
 8012e2a:	b510      	push	{r4, lr}
 8012e2c:	6844      	ldr	r4, [r0, #4]
 8012e2e:	b086      	sub	sp, #24
 8012e30:	2200      	movs	r2, #0
 8012e32:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8012e36:	460b      	mov	r3, r1
 8012e38:	9205      	str	r2, [sp, #20]
 8012e3a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8012e3e:	aa03      	add	r2, sp, #12
 8012e40:	f104 0010 	add.w	r0, r4, #16
 8012e44:	f88d 300c 	strb.w	r3, [sp, #12]
 8012e48:	f7ff fd4a 	bl	80128e0 <rcl_action_send_goal_response>
 8012e4c:	b918      	cbnz	r0, 8012e56 <rclc_action_server_response_goal_request+0x2e>
 8012e4e:	b006      	add	sp, #24
 8012e50:	bd10      	pop	{r4, pc}
 8012e52:	200b      	movs	r0, #11
 8012e54:	4770      	bx	lr
 8012e56:	9001      	str	r0, [sp, #4]
 8012e58:	f7f9 fdea 	bl	800ca30 <rcutils_reset_error>
 8012e5c:	9801      	ldr	r0, [sp, #4]
 8012e5e:	b006      	add	sp, #24
 8012e60:	bd10      	pop	{r4, pc}
 8012e62:	bf00      	nop
 8012e64:	0000      	movs	r0, r0
	...

08012e68 <rclc_action_server_goal_cancel_accept>:
 8012e68:	b310      	cbz	r0, 8012eb0 <rclc_action_server_goal_cancel_accept+0x48>
 8012e6a:	b510      	push	{r4, lr}
 8012e6c:	b090      	sub	sp, #64	@ 0x40
 8012e6e:	4604      	mov	r4, r0
 8012e70:	a806      	add	r0, sp, #24
 8012e72:	f7ff fefd 	bl	8012c70 <rcl_action_get_zero_initialized_cancel_response>
 8012e76:	2300      	movs	r3, #0
 8012e78:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8012e7c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012e80:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8012e84:	f88d 3018 	strb.w	r3, [sp, #24]
 8012e88:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8012e8c:	f8cd d01c 	str.w	sp, [sp, #28]
 8012e90:	46ec      	mov	ip, sp
 8012e92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012e96:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8012eb8 <rclc_action_server_goal_cancel_accept+0x50>
 8012e9a:	6860      	ldr	r0, [r4, #4]
 8012e9c:	aa06      	add	r2, sp, #24
 8012e9e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8012ea2:	3010      	adds	r0, #16
 8012ea4:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012ea8:	f7ff fdd2 	bl	8012a50 <rcl_action_send_cancel_response>
 8012eac:	b010      	add	sp, #64	@ 0x40
 8012eae:	bd10      	pop	{r4, pc}
 8012eb0:	200b      	movs	r0, #11
 8012eb2:	4770      	bx	lr
 8012eb4:	f3af 8000 	nop.w
 8012eb8:	00000001 	.word	0x00000001
 8012ebc:	00000001 	.word	0x00000001

08012ec0 <rclc_action_server_goal_cancel_reject>:
 8012ec0:	b082      	sub	sp, #8
 8012ec2:	b530      	push	{r4, r5, lr}
 8012ec4:	b08b      	sub	sp, #44	@ 0x2c
 8012ec6:	ac0e      	add	r4, sp, #56	@ 0x38
 8012ec8:	e884 000c 	stmia.w	r4, {r2, r3}
 8012ecc:	b188      	cbz	r0, 8012ef2 <rclc_action_server_goal_cancel_reject+0x32>
 8012ece:	4604      	mov	r4, r0
 8012ed0:	a801      	add	r0, sp, #4
 8012ed2:	460d      	mov	r5, r1
 8012ed4:	f7ff fecc 	bl	8012c70 <rcl_action_get_zero_initialized_cancel_response>
 8012ed8:	aa01      	add	r2, sp, #4
 8012eda:	a90e      	add	r1, sp, #56	@ 0x38
 8012edc:	f104 0010 	add.w	r0, r4, #16
 8012ee0:	f88d 5004 	strb.w	r5, [sp, #4]
 8012ee4:	f7ff fdb4 	bl	8012a50 <rcl_action_send_cancel_response>
 8012ee8:	b00b      	add	sp, #44	@ 0x2c
 8012eea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012eee:	b002      	add	sp, #8
 8012ef0:	4770      	bx	lr
 8012ef2:	200b      	movs	r0, #11
 8012ef4:	b00b      	add	sp, #44	@ 0x2c
 8012ef6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012efa:	b002      	add	sp, #8
 8012efc:	4770      	bx	lr
 8012efe:	bf00      	nop

08012f00 <__atomic_load_8>:
 8012f00:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012f04:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012f08:	4a15      	ldr	r2, [pc, #84]	@ (8012f60 <__atomic_load_8+0x60>)
 8012f0a:	4b16      	ldr	r3, [pc, #88]	@ (8012f64 <__atomic_load_8+0x64>)
 8012f0c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012f10:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012f14:	fb02 f101 	mul.w	r1, r2, r1
 8012f18:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012f1c:	fba3 2301 	umull	r2, r3, r3, r1
 8012f20:	091b      	lsrs	r3, r3, #4
 8012f22:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012f26:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8012f2a:	b4d0      	push	{r4, r6, r7}
 8012f2c:	4c0e      	ldr	r4, [pc, #56]	@ (8012f68 <__atomic_load_8+0x68>)
 8012f2e:	1ac9      	subs	r1, r1, r3
 8012f30:	1862      	adds	r2, r4, r1
 8012f32:	f04f 0c01 	mov.w	ip, #1
 8012f36:	e8d2 3f4f 	ldrexb	r3, [r2]
 8012f3a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8012f3e:	2e00      	cmp	r6, #0
 8012f40:	d1f9      	bne.n	8012f36 <__atomic_load_8+0x36>
 8012f42:	f3bf 8f5b 	dmb	ish
 8012f46:	b2db      	uxtb	r3, r3
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d1f4      	bne.n	8012f36 <__atomic_load_8+0x36>
 8012f4c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012f50:	f3bf 8f5b 	dmb	ish
 8012f54:	5463      	strb	r3, [r4, r1]
 8012f56:	4630      	mov	r0, r6
 8012f58:	4639      	mov	r1, r7
 8012f5a:	bcd0      	pop	{r4, r6, r7}
 8012f5c:	4770      	bx	lr
 8012f5e:	bf00      	nop
 8012f60:	27d4eb2d 	.word	0x27d4eb2d
 8012f64:	b21642c9 	.word	0xb21642c9
 8012f68:	2000ddd8 	.word	0x2000ddd8

08012f6c <__atomic_store_8>:
 8012f6c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012f70:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012f74:	b570      	push	{r4, r5, r6, lr}
 8012f76:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012f7a:	4c14      	ldr	r4, [pc, #80]	@ (8012fcc <__atomic_store_8+0x60>)
 8012f7c:	4d14      	ldr	r5, [pc, #80]	@ (8012fd0 <__atomic_store_8+0x64>)
 8012f7e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012f82:	fb04 f101 	mul.w	r1, r4, r1
 8012f86:	4c13      	ldr	r4, [pc, #76]	@ (8012fd4 <__atomic_store_8+0x68>)
 8012f88:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012f8c:	fba4 4e01 	umull	r4, lr, r4, r1
 8012f90:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8012f94:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8012f98:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8012f9c:	eba1 0e0e 	sub.w	lr, r1, lr
 8012fa0:	eb05 0c0e 	add.w	ip, r5, lr
 8012fa4:	f04f 0401 	mov.w	r4, #1
 8012fa8:	e8dc 1f4f 	ldrexb	r1, [ip]
 8012fac:	e8cc 4f46 	strexb	r6, r4, [ip]
 8012fb0:	2e00      	cmp	r6, #0
 8012fb2:	d1f9      	bne.n	8012fa8 <__atomic_store_8+0x3c>
 8012fb4:	f3bf 8f5b 	dmb	ish
 8012fb8:	b2c9      	uxtb	r1, r1
 8012fba:	2900      	cmp	r1, #0
 8012fbc:	d1f4      	bne.n	8012fa8 <__atomic_store_8+0x3c>
 8012fbe:	e9c0 2300 	strd	r2, r3, [r0]
 8012fc2:	f3bf 8f5b 	dmb	ish
 8012fc6:	f805 100e 	strb.w	r1, [r5, lr]
 8012fca:	bd70      	pop	{r4, r5, r6, pc}
 8012fcc:	27d4eb2d 	.word	0x27d4eb2d
 8012fd0:	2000ddd8 	.word	0x2000ddd8
 8012fd4:	b21642c9 	.word	0xb21642c9

08012fd8 <__atomic_exchange_8>:
 8012fd8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8012fdc:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8012fe0:	4916      	ldr	r1, [pc, #88]	@ (801303c <__atomic_exchange_8+0x64>)
 8012fe2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8012fe6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8012fea:	fb01 fc0c 	mul.w	ip, r1, ip
 8012fee:	4914      	ldr	r1, [pc, #80]	@ (8013040 <__atomic_exchange_8+0x68>)
 8012ff0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8012ff4:	b570      	push	{r4, r5, r6, lr}
 8012ff6:	4605      	mov	r5, r0
 8012ff8:	fba1 010c 	umull	r0, r1, r1, ip
 8012ffc:	0909      	lsrs	r1, r1, #4
 8012ffe:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8013002:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8013006:	4e0f      	ldr	r6, [pc, #60]	@ (8013044 <__atomic_exchange_8+0x6c>)
 8013008:	ebac 0c01 	sub.w	ip, ip, r1
 801300c:	eb06 010c 	add.w	r1, r6, ip
 8013010:	f04f 0e01 	mov.w	lr, #1
 8013014:	e8d1 4f4f 	ldrexb	r4, [r1]
 8013018:	e8c1 ef40 	strexb	r0, lr, [r1]
 801301c:	2800      	cmp	r0, #0
 801301e:	d1f9      	bne.n	8013014 <__atomic_exchange_8+0x3c>
 8013020:	f3bf 8f5b 	dmb	ish
 8013024:	b2e4      	uxtb	r4, r4
 8013026:	2c00      	cmp	r4, #0
 8013028:	d1f4      	bne.n	8013014 <__atomic_exchange_8+0x3c>
 801302a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801302e:	e9c5 2300 	strd	r2, r3, [r5]
 8013032:	f3bf 8f5b 	dmb	ish
 8013036:	f806 400c 	strb.w	r4, [r6, ip]
 801303a:	bd70      	pop	{r4, r5, r6, pc}
 801303c:	27d4eb2d 	.word	0x27d4eb2d
 8013040:	b21642c9 	.word	0xb21642c9
 8013044:	2000ddd8 	.word	0x2000ddd8

08013048 <rcutils_get_env>:
 8013048:	b168      	cbz	r0, 8013066 <rcutils_get_env+0x1e>
 801304a:	b510      	push	{r4, lr}
 801304c:	460c      	mov	r4, r1
 801304e:	b129      	cbz	r1, 801305c <rcutils_get_env+0x14>
 8013050:	f004 f800 	bl	8017054 <getenv>
 8013054:	b120      	cbz	r0, 8013060 <rcutils_get_env+0x18>
 8013056:	6020      	str	r0, [r4, #0]
 8013058:	2000      	movs	r0, #0
 801305a:	bd10      	pop	{r4, pc}
 801305c:	4803      	ldr	r0, [pc, #12]	@ (801306c <rcutils_get_env+0x24>)
 801305e:	bd10      	pop	{r4, pc}
 8013060:	4b03      	ldr	r3, [pc, #12]	@ (8013070 <rcutils_get_env+0x28>)
 8013062:	6023      	str	r3, [r4, #0]
 8013064:	bd10      	pop	{r4, pc}
 8013066:	4803      	ldr	r0, [pc, #12]	@ (8013074 <rcutils_get_env+0x2c>)
 8013068:	4770      	bx	lr
 801306a:	bf00      	nop
 801306c:	08018fc8 	.word	0x08018fc8
 8013070:	080190ec 	.word	0x080190ec
 8013074:	08018fac 	.word	0x08018fac

08013078 <rcutils_is_directory>:
 8013078:	2000      	movs	r0, #0
 801307a:	4770      	bx	lr

0801307c <rcutils_join_path>:
 801307c:	b082      	sub	sp, #8
 801307e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8013082:	2000      	movs	r0, #0
 8013084:	b002      	add	sp, #8
 8013086:	4770      	bx	lr

08013088 <rcutils_to_native_path>:
 8013088:	b084      	sub	sp, #16
 801308a:	a801      	add	r0, sp, #4
 801308c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8013090:	b004      	add	sp, #16
 8013092:	2000      	movs	r0, #0
 8013094:	4770      	bx	lr
 8013096:	bf00      	nop

08013098 <rcutils_format_string_limit>:
 8013098:	b40f      	push	{r0, r1, r2, r3}
 801309a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801309c:	b083      	sub	sp, #12
 801309e:	ac08      	add	r4, sp, #32
 80130a0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80130a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80130a6:	b34e      	cbz	r6, 80130fc <rcutils_format_string_limit+0x64>
 80130a8:	a808      	add	r0, sp, #32
 80130aa:	f7f9 fc9d 	bl	800c9e8 <rcutils_allocator_is_valid>
 80130ae:	b328      	cbz	r0, 80130fc <rcutils_format_string_limit+0x64>
 80130b0:	2100      	movs	r1, #0
 80130b2:	ab0f      	add	r3, sp, #60	@ 0x3c
 80130b4:	4632      	mov	r2, r6
 80130b6:	4608      	mov	r0, r1
 80130b8:	e9cd 3300 	strd	r3, r3, [sp]
 80130bc:	f000 f8f4 	bl	80132a8 <rcutils_vsnprintf>
 80130c0:	1c43      	adds	r3, r0, #1
 80130c2:	4605      	mov	r5, r0
 80130c4:	d01a      	beq.n	80130fc <rcutils_format_string_limit+0x64>
 80130c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80130c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80130ca:	1c47      	adds	r7, r0, #1
 80130cc:	429f      	cmp	r7, r3
 80130ce:	bf84      	itt	hi
 80130d0:	461f      	movhi	r7, r3
 80130d2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 80130d6:	4638      	mov	r0, r7
 80130d8:	9b08      	ldr	r3, [sp, #32]
 80130da:	4798      	blx	r3
 80130dc:	4604      	mov	r4, r0
 80130de:	b168      	cbz	r0, 80130fc <rcutils_format_string_limit+0x64>
 80130e0:	9b01      	ldr	r3, [sp, #4]
 80130e2:	4632      	mov	r2, r6
 80130e4:	4639      	mov	r1, r7
 80130e6:	f000 f8df 	bl	80132a8 <rcutils_vsnprintf>
 80130ea:	2800      	cmp	r0, #0
 80130ec:	db02      	blt.n	80130f4 <rcutils_format_string_limit+0x5c>
 80130ee:	2300      	movs	r3, #0
 80130f0:	5563      	strb	r3, [r4, r5]
 80130f2:	e004      	b.n	80130fe <rcutils_format_string_limit+0x66>
 80130f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130f6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80130f8:	4620      	mov	r0, r4
 80130fa:	4798      	blx	r3
 80130fc:	2400      	movs	r4, #0
 80130fe:	4620      	mov	r0, r4
 8013100:	b003      	add	sp, #12
 8013102:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013106:	b004      	add	sp, #16
 8013108:	4770      	bx	lr
 801310a:	bf00      	nop

0801310c <rcutils_repl_str>:
 801310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013110:	ed2d 8b02 	vpush	{d8}
 8013114:	b087      	sub	sp, #28
 8013116:	4680      	mov	r8, r0
 8013118:	4608      	mov	r0, r1
 801311a:	f8cd 8004 	str.w	r8, [sp, #4]
 801311e:	ee08 2a10 	vmov	s16, r2
 8013122:	468a      	mov	sl, r1
 8013124:	4699      	mov	r9, r3
 8013126:	f7ed f865 	bl	80001f4 <strlen>
 801312a:	2600      	movs	r6, #0
 801312c:	4647      	mov	r7, r8
 801312e:	9002      	str	r0, [sp, #8]
 8013130:	46b3      	mov	fp, r6
 8013132:	2510      	movs	r5, #16
 8013134:	46b0      	mov	r8, r6
 8013136:	e01d      	b.n	8013174 <rcutils_repl_str+0x68>
 8013138:	f10b 0b01 	add.w	fp, fp, #1
 801313c:	455e      	cmp	r6, fp
 801313e:	d211      	bcs.n	8013164 <rcutils_repl_str+0x58>
 8013140:	442e      	add	r6, r5
 8013142:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013146:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801314a:	00b1      	lsls	r1, r6, #2
 801314c:	4798      	blx	r3
 801314e:	2800      	cmp	r0, #0
 8013150:	f000 8088 	beq.w	8013264 <rcutils_repl_str+0x158>
 8013154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013158:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801315c:	4680      	mov	r8, r0
 801315e:	bf28      	it	cs
 8013160:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8013164:	9a01      	ldr	r2, [sp, #4]
 8013166:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801316a:	1aa2      	subs	r2, r4, r2
 801316c:	f843 2c04 	str.w	r2, [r3, #-4]
 8013170:	9b02      	ldr	r3, [sp, #8]
 8013172:	18e7      	adds	r7, r4, r3
 8013174:	4651      	mov	r1, sl
 8013176:	4638      	mov	r0, r7
 8013178:	f004 fb61 	bl	801783e <strstr>
 801317c:	4604      	mov	r4, r0
 801317e:	4640      	mov	r0, r8
 8013180:	2c00      	cmp	r4, #0
 8013182:	d1d9      	bne.n	8013138 <rcutils_repl_str+0x2c>
 8013184:	46b8      	mov	r8, r7
 8013186:	4607      	mov	r7, r0
 8013188:	4640      	mov	r0, r8
 801318a:	f7ed f833 	bl	80001f4 <strlen>
 801318e:	9b01      	ldr	r3, [sp, #4]
 8013190:	eba8 0303 	sub.w	r3, r8, r3
 8013194:	181c      	adds	r4, r3, r0
 8013196:	9404      	str	r4, [sp, #16]
 8013198:	f1bb 0f00 	cmp.w	fp, #0
 801319c:	d04a      	beq.n	8013234 <rcutils_repl_str+0x128>
 801319e:	ee18 0a10 	vmov	r0, s16
 80131a2:	f7ed f827 	bl	80001f4 <strlen>
 80131a6:	9b02      	ldr	r3, [sp, #8]
 80131a8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80131ac:	1ac3      	subs	r3, r0, r3
 80131ae:	fb0b 4303 	mla	r3, fp, r3, r4
 80131b2:	461a      	mov	r2, r3
 80131b4:	9305      	str	r3, [sp, #20]
 80131b6:	4606      	mov	r6, r0
 80131b8:	f8d9 3000 	ldr.w	r3, [r9]
 80131bc:	1c50      	adds	r0, r2, #1
 80131be:	4798      	blx	r3
 80131c0:	9003      	str	r0, [sp, #12]
 80131c2:	2800      	cmp	r0, #0
 80131c4:	d04f      	beq.n	8013266 <rcutils_repl_str+0x15a>
 80131c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80131ca:	683a      	ldr	r2, [r7, #0]
 80131cc:	4641      	mov	r1, r8
 80131ce:	f004 fbd8 	bl	8017982 <memcpy>
 80131d2:	683d      	ldr	r5, [r7, #0]
 80131d4:	9b03      	ldr	r3, [sp, #12]
 80131d6:	9701      	str	r7, [sp, #4]
 80131d8:	46ba      	mov	sl, r7
 80131da:	441d      	add	r5, r3
 80131dc:	9f02      	ldr	r7, [sp, #8]
 80131de:	f8cd 9008 	str.w	r9, [sp, #8]
 80131e2:	2401      	movs	r4, #1
 80131e4:	46d1      	mov	r9, sl
 80131e6:	ee18 aa10 	vmov	sl, s16
 80131ea:	e00a      	b.n	8013202 <rcutils_repl_str+0xf6>
 80131ec:	f8d9 5000 	ldr.w	r5, [r9]
 80131f0:	1aaa      	subs	r2, r5, r2
 80131f2:	1885      	adds	r5, r0, r2
 80131f4:	f004 fbc5 	bl	8017982 <memcpy>
 80131f8:	45a3      	cmp	fp, r4
 80131fa:	f104 0201 	add.w	r2, r4, #1
 80131fe:	d935      	bls.n	801326c <rcutils_repl_str+0x160>
 8013200:	4614      	mov	r4, r2
 8013202:	4632      	mov	r2, r6
 8013204:	4651      	mov	r1, sl
 8013206:	4628      	mov	r0, r5
 8013208:	f004 fbbb 	bl	8017982 <memcpy>
 801320c:	f859 2b04 	ldr.w	r2, [r9], #4
 8013210:	45a3      	cmp	fp, r4
 8013212:	443a      	add	r2, r7
 8013214:	eb05 0006 	add.w	r0, r5, r6
 8013218:	eb08 0102 	add.w	r1, r8, r2
 801321c:	d1e6      	bne.n	80131ec <rcutils_repl_str+0xe0>
 801321e:	9b04      	ldr	r3, [sp, #16]
 8013220:	1a9a      	subs	r2, r3, r2
 8013222:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8013226:	f004 fbac 	bl	8017982 <memcpy>
 801322a:	9a03      	ldr	r2, [sp, #12]
 801322c:	9905      	ldr	r1, [sp, #20]
 801322e:	2300      	movs	r3, #0
 8013230:	5453      	strb	r3, [r2, r1]
 8013232:	e00b      	b.n	801324c <rcutils_repl_str+0x140>
 8013234:	4620      	mov	r0, r4
 8013236:	f8d9 3000 	ldr.w	r3, [r9]
 801323a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801323e:	3001      	adds	r0, #1
 8013240:	4798      	blx	r3
 8013242:	9003      	str	r0, [sp, #12]
 8013244:	b110      	cbz	r0, 801324c <rcutils_repl_str+0x140>
 8013246:	9901      	ldr	r1, [sp, #4]
 8013248:	f004 fb93 	bl	8017972 <strcpy>
 801324c:	4638      	mov	r0, r7
 801324e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013252:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013256:	4798      	blx	r3
 8013258:	9803      	ldr	r0, [sp, #12]
 801325a:	b007      	add	sp, #28
 801325c:	ecbd 8b02 	vpop	{d8}
 8013260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013264:	4647      	mov	r7, r8
 8013266:	2300      	movs	r3, #0
 8013268:	9303      	str	r3, [sp, #12]
 801326a:	e7ef      	b.n	801324c <rcutils_repl_str+0x140>
 801326c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8013270:	e7db      	b.n	801322a <rcutils_repl_str+0x11e>
 8013272:	bf00      	nop

08013274 <rcutils_snprintf>:
 8013274:	b40c      	push	{r2, r3}
 8013276:	b530      	push	{r4, r5, lr}
 8013278:	b083      	sub	sp, #12
 801327a:	ab06      	add	r3, sp, #24
 801327c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013280:	9301      	str	r3, [sp, #4]
 8013282:	b152      	cbz	r2, 801329a <rcutils_snprintf+0x26>
 8013284:	b138      	cbz	r0, 8013296 <rcutils_snprintf+0x22>
 8013286:	b141      	cbz	r1, 801329a <rcutils_snprintf+0x26>
 8013288:	f004 fa7a 	bl	8017780 <vsniprintf>
 801328c:	b003      	add	sp, #12
 801328e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013292:	b002      	add	sp, #8
 8013294:	4770      	bx	lr
 8013296:	2900      	cmp	r1, #0
 8013298:	d0f6      	beq.n	8013288 <rcutils_snprintf+0x14>
 801329a:	f004 fb3d 	bl	8017918 <__errno>
 801329e:	2316      	movs	r3, #22
 80132a0:	6003      	str	r3, [r0, #0]
 80132a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80132a6:	e7f1      	b.n	801328c <rcutils_snprintf+0x18>

080132a8 <rcutils_vsnprintf>:
 80132a8:	b570      	push	{r4, r5, r6, lr}
 80132aa:	b13a      	cbz	r2, 80132bc <rcutils_vsnprintf+0x14>
 80132ac:	b120      	cbz	r0, 80132b8 <rcutils_vsnprintf+0x10>
 80132ae:	b129      	cbz	r1, 80132bc <rcutils_vsnprintf+0x14>
 80132b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132b4:	f004 ba64 	b.w	8017780 <vsniprintf>
 80132b8:	2900      	cmp	r1, #0
 80132ba:	d0f9      	beq.n	80132b0 <rcutils_vsnprintf+0x8>
 80132bc:	f004 fb2c 	bl	8017918 <__errno>
 80132c0:	2316      	movs	r3, #22
 80132c2:	6003      	str	r3, [r0, #0]
 80132c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80132c8:	bd70      	pop	{r4, r5, r6, pc}
 80132ca:	bf00      	nop

080132cc <rcutils_strdup>:
 80132cc:	b084      	sub	sp, #16
 80132ce:	b570      	push	{r4, r5, r6, lr}
 80132d0:	b082      	sub	sp, #8
 80132d2:	ac07      	add	r4, sp, #28
 80132d4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80132d8:	4605      	mov	r5, r0
 80132da:	b1b0      	cbz	r0, 801330a <rcutils_strdup+0x3e>
 80132dc:	f7ec ff8a 	bl	80001f4 <strlen>
 80132e0:	1c42      	adds	r2, r0, #1
 80132e2:	9b07      	ldr	r3, [sp, #28]
 80132e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80132e6:	9201      	str	r2, [sp, #4]
 80132e8:	4606      	mov	r6, r0
 80132ea:	4610      	mov	r0, r2
 80132ec:	4798      	blx	r3
 80132ee:	4604      	mov	r4, r0
 80132f0:	b128      	cbz	r0, 80132fe <rcutils_strdup+0x32>
 80132f2:	9a01      	ldr	r2, [sp, #4]
 80132f4:	4629      	mov	r1, r5
 80132f6:	f004 fb44 	bl	8017982 <memcpy>
 80132fa:	2300      	movs	r3, #0
 80132fc:	55a3      	strb	r3, [r4, r6]
 80132fe:	4620      	mov	r0, r4
 8013300:	b002      	add	sp, #8
 8013302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013306:	b004      	add	sp, #16
 8013308:	4770      	bx	lr
 801330a:	4604      	mov	r4, r0
 801330c:	e7f7      	b.n	80132fe <rcutils_strdup+0x32>
 801330e:	bf00      	nop

08013310 <rcutils_strndup>:
 8013310:	b082      	sub	sp, #8
 8013312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013314:	ac06      	add	r4, sp, #24
 8013316:	e884 000c 	stmia.w	r4, {r2, r3}
 801331a:	4605      	mov	r5, r0
 801331c:	b188      	cbz	r0, 8013342 <rcutils_strndup+0x32>
 801331e:	1c4f      	adds	r7, r1, #1
 8013320:	460e      	mov	r6, r1
 8013322:	4638      	mov	r0, r7
 8013324:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013326:	4790      	blx	r2
 8013328:	4604      	mov	r4, r0
 801332a:	b128      	cbz	r0, 8013338 <rcutils_strndup+0x28>
 801332c:	463a      	mov	r2, r7
 801332e:	4629      	mov	r1, r5
 8013330:	f004 fb27 	bl	8017982 <memcpy>
 8013334:	2300      	movs	r3, #0
 8013336:	55a3      	strb	r3, [r4, r6]
 8013338:	4620      	mov	r0, r4
 801333a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801333e:	b002      	add	sp, #8
 8013340:	4770      	bx	lr
 8013342:	4604      	mov	r4, r0
 8013344:	e7f8      	b.n	8013338 <rcutils_strndup+0x28>
 8013346:	bf00      	nop

08013348 <rcutils_get_zero_initialized_string_map>:
 8013348:	4b01      	ldr	r3, [pc, #4]	@ (8013350 <rcutils_get_zero_initialized_string_map+0x8>)
 801334a:	2000      	movs	r0, #0
 801334c:	6018      	str	r0, [r3, #0]
 801334e:	4770      	bx	lr
 8013350:	2000ddf0 	.word	0x2000ddf0

08013354 <rcutils_string_map_reserve>:
 8013354:	2800      	cmp	r0, #0
 8013356:	d05f      	beq.n	8013418 <rcutils_string_map_reserve+0xc4>
 8013358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801335c:	460c      	mov	r4, r1
 801335e:	6801      	ldr	r1, [r0, #0]
 8013360:	b082      	sub	sp, #8
 8013362:	4605      	mov	r5, r0
 8013364:	b129      	cbz	r1, 8013372 <rcutils_string_map_reserve+0x1e>
 8013366:	68cb      	ldr	r3, [r1, #12]
 8013368:	42a3      	cmp	r3, r4
 801336a:	d906      	bls.n	801337a <rcutils_string_map_reserve+0x26>
 801336c:	461c      	mov	r4, r3
 801336e:	2900      	cmp	r1, #0
 8013370:	d1f9      	bne.n	8013366 <rcutils_string_map_reserve+0x12>
 8013372:	201f      	movs	r0, #31
 8013374:	b002      	add	sp, #8
 8013376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801337a:	688b      	ldr	r3, [r1, #8]
 801337c:	42a3      	cmp	r3, r4
 801337e:	d047      	beq.n	8013410 <rcutils_string_map_reserve+0xbc>
 8013380:	6a0e      	ldr	r6, [r1, #32]
 8013382:	2c00      	cmp	r4, #0
 8013384:	d034      	beq.n	80133f0 <rcutils_string_map_reserve+0x9c>
 8013386:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801338a:	d243      	bcs.n	8013414 <rcutils_string_map_reserve+0xc0>
 801338c:	00a7      	lsls	r7, r4, #2
 801338e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8013392:	6808      	ldr	r0, [r1, #0]
 8013394:	4632      	mov	r2, r6
 8013396:	4639      	mov	r1, r7
 8013398:	47c0      	blx	r8
 801339a:	2800      	cmp	r0, #0
 801339c:	d03a      	beq.n	8013414 <rcutils_string_map_reserve+0xc0>
 801339e:	682b      	ldr	r3, [r5, #0]
 80133a0:	4632      	mov	r2, r6
 80133a2:	6018      	str	r0, [r3, #0]
 80133a4:	4639      	mov	r1, r7
 80133a6:	6858      	ldr	r0, [r3, #4]
 80133a8:	47c0      	blx	r8
 80133aa:	2800      	cmp	r0, #0
 80133ac:	d032      	beq.n	8013414 <rcutils_string_map_reserve+0xc0>
 80133ae:	682d      	ldr	r5, [r5, #0]
 80133b0:	68ab      	ldr	r3, [r5, #8]
 80133b2:	6068      	str	r0, [r5, #4]
 80133b4:	42a3      	cmp	r3, r4
 80133b6:	d226      	bcs.n	8013406 <rcutils_string_map_reserve+0xb2>
 80133b8:	682a      	ldr	r2, [r5, #0]
 80133ba:	eb00 0c07 	add.w	ip, r0, r7
 80133be:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80133c2:	45e6      	cmp	lr, ip
 80133c4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80133c8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80133cc:	d203      	bcs.n	80133d6 <rcutils_string_map_reserve+0x82>
 80133ce:	eb02 0c07 	add.w	ip, r2, r7
 80133d2:	4566      	cmp	r6, ip
 80133d4:	d322      	bcc.n	801341c <rcutils_string_map_reserve+0xc8>
 80133d6:	1ae3      	subs	r3, r4, r3
 80133d8:	009a      	lsls	r2, r3, #2
 80133da:	4670      	mov	r0, lr
 80133dc:	2100      	movs	r1, #0
 80133de:	9201      	str	r2, [sp, #4]
 80133e0:	f004 fa06 	bl	80177f0 <memset>
 80133e4:	9a01      	ldr	r2, [sp, #4]
 80133e6:	2100      	movs	r1, #0
 80133e8:	4630      	mov	r0, r6
 80133ea:	f004 fa01 	bl	80177f0 <memset>
 80133ee:	e00a      	b.n	8013406 <rcutils_string_map_reserve+0xb2>
 80133f0:	694f      	ldr	r7, [r1, #20]
 80133f2:	6808      	ldr	r0, [r1, #0]
 80133f4:	4631      	mov	r1, r6
 80133f6:	47b8      	blx	r7
 80133f8:	682b      	ldr	r3, [r5, #0]
 80133fa:	4631      	mov	r1, r6
 80133fc:	6858      	ldr	r0, [r3, #4]
 80133fe:	601c      	str	r4, [r3, #0]
 8013400:	47b8      	blx	r7
 8013402:	682d      	ldr	r5, [r5, #0]
 8013404:	606c      	str	r4, [r5, #4]
 8013406:	2000      	movs	r0, #0
 8013408:	60ac      	str	r4, [r5, #8]
 801340a:	b002      	add	sp, #8
 801340c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013410:	2000      	movs	r0, #0
 8013412:	e7af      	b.n	8013374 <rcutils_string_map_reserve+0x20>
 8013414:	200a      	movs	r0, #10
 8013416:	e7ad      	b.n	8013374 <rcutils_string_map_reserve+0x20>
 8013418:	200b      	movs	r0, #11
 801341a:	4770      	bx	lr
 801341c:	1f0b      	subs	r3, r1, #4
 801341e:	4418      	add	r0, r3
 8013420:	4413      	add	r3, r2
 8013422:	3a04      	subs	r2, #4
 8013424:	4417      	add	r7, r2
 8013426:	2200      	movs	r2, #0
 8013428:	f843 2f04 	str.w	r2, [r3, #4]!
 801342c:	42bb      	cmp	r3, r7
 801342e:	f840 2f04 	str.w	r2, [r0, #4]!
 8013432:	d1f9      	bne.n	8013428 <rcutils_string_map_reserve+0xd4>
 8013434:	e7e7      	b.n	8013406 <rcutils_string_map_reserve+0xb2>
 8013436:	bf00      	nop

08013438 <rcutils_string_map_init>:
 8013438:	b082      	sub	sp, #8
 801343a:	b570      	push	{r4, r5, r6, lr}
 801343c:	ac04      	add	r4, sp, #16
 801343e:	e884 000c 	stmia.w	r4, {r2, r3}
 8013442:	b380      	cbz	r0, 80134a6 <rcutils_string_map_init+0x6e>
 8013444:	6806      	ldr	r6, [r0, #0]
 8013446:	4604      	mov	r4, r0
 8013448:	b12e      	cbz	r6, 8013456 <rcutils_string_map_init+0x1e>
 801344a:	251e      	movs	r5, #30
 801344c:	4628      	mov	r0, r5
 801344e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013452:	b002      	add	sp, #8
 8013454:	4770      	bx	lr
 8013456:	a804      	add	r0, sp, #16
 8013458:	460d      	mov	r5, r1
 801345a:	f7f9 fac5 	bl	800c9e8 <rcutils_allocator_is_valid>
 801345e:	b310      	cbz	r0, 80134a6 <rcutils_string_map_init+0x6e>
 8013460:	9b04      	ldr	r3, [sp, #16]
 8013462:	9908      	ldr	r1, [sp, #32]
 8013464:	2024      	movs	r0, #36	@ 0x24
 8013466:	4798      	blx	r3
 8013468:	6020      	str	r0, [r4, #0]
 801346a:	b310      	cbz	r0, 80134b2 <rcutils_string_map_init+0x7a>
 801346c:	f10d 0e10 	add.w	lr, sp, #16
 8013470:	e9c0 6600 	strd	r6, r6, [r0]
 8013474:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8013478:	f100 0c10 	add.w	ip, r0, #16
 801347c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013480:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013484:	f8de 3000 	ldr.w	r3, [lr]
 8013488:	f8cc 3000 	str.w	r3, [ip]
 801348c:	4629      	mov	r1, r5
 801348e:	4620      	mov	r0, r4
 8013490:	f7ff ff60 	bl	8013354 <rcutils_string_map_reserve>
 8013494:	4605      	mov	r5, r0
 8013496:	2800      	cmp	r0, #0
 8013498:	d0d8      	beq.n	801344c <rcutils_string_map_init+0x14>
 801349a:	9b05      	ldr	r3, [sp, #20]
 801349c:	9908      	ldr	r1, [sp, #32]
 801349e:	6820      	ldr	r0, [r4, #0]
 80134a0:	4798      	blx	r3
 80134a2:	6026      	str	r6, [r4, #0]
 80134a4:	e7d2      	b.n	801344c <rcutils_string_map_init+0x14>
 80134a6:	250b      	movs	r5, #11
 80134a8:	4628      	mov	r0, r5
 80134aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134ae:	b002      	add	sp, #8
 80134b0:	4770      	bx	lr
 80134b2:	250a      	movs	r5, #10
 80134b4:	e7ca      	b.n	801344c <rcutils_string_map_init+0x14>
 80134b6:	bf00      	nop

080134b8 <rcutils_string_map_fini>:
 80134b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134bc:	b082      	sub	sp, #8
 80134be:	2800      	cmp	r0, #0
 80134c0:	d03a      	beq.n	8013538 <rcutils_string_map_fini+0x80>
 80134c2:	6804      	ldr	r4, [r0, #0]
 80134c4:	4606      	mov	r6, r0
 80134c6:	2c00      	cmp	r4, #0
 80134c8:	d032      	beq.n	8013530 <rcutils_string_map_fini+0x78>
 80134ca:	68a3      	ldr	r3, [r4, #8]
 80134cc:	b32b      	cbz	r3, 801351a <rcutils_string_map_fini+0x62>
 80134ce:	2500      	movs	r5, #0
 80134d0:	6822      	ldr	r2, [r4, #0]
 80134d2:	462f      	mov	r7, r5
 80134d4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80134d8:	b1e0      	cbz	r0, 8013514 <rcutils_string_map_fini+0x5c>
 80134da:	6a21      	ldr	r1, [r4, #32]
 80134dc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80134e0:	9101      	str	r1, [sp, #4]
 80134e2:	47c0      	blx	r8
 80134e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80134e8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80134ec:	9901      	ldr	r1, [sp, #4]
 80134ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80134f2:	47c0      	blx	r8
 80134f4:	68e3      	ldr	r3, [r4, #12]
 80134f6:	6862      	ldr	r2, [r4, #4]
 80134f8:	3b01      	subs	r3, #1
 80134fa:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80134fe:	60e3      	str	r3, [r4, #12]
 8013500:	6834      	ldr	r4, [r6, #0]
 8013502:	68a3      	ldr	r3, [r4, #8]
 8013504:	3501      	adds	r5, #1
 8013506:	429d      	cmp	r5, r3
 8013508:	d207      	bcs.n	801351a <rcutils_string_map_fini+0x62>
 801350a:	6822      	ldr	r2, [r4, #0]
 801350c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013510:	2800      	cmp	r0, #0
 8013512:	d1e2      	bne.n	80134da <rcutils_string_map_fini+0x22>
 8013514:	3501      	adds	r5, #1
 8013516:	429d      	cmp	r5, r3
 8013518:	d3dc      	bcc.n	80134d4 <rcutils_string_map_fini+0x1c>
 801351a:	2100      	movs	r1, #0
 801351c:	4630      	mov	r0, r6
 801351e:	f7ff ff19 	bl	8013354 <rcutils_string_map_reserve>
 8013522:	4604      	mov	r4, r0
 8013524:	b920      	cbnz	r0, 8013530 <rcutils_string_map_fini+0x78>
 8013526:	6830      	ldr	r0, [r6, #0]
 8013528:	6943      	ldr	r3, [r0, #20]
 801352a:	6a01      	ldr	r1, [r0, #32]
 801352c:	4798      	blx	r3
 801352e:	6034      	str	r4, [r6, #0]
 8013530:	4620      	mov	r0, r4
 8013532:	b002      	add	sp, #8
 8013534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013538:	240b      	movs	r4, #11
 801353a:	4620      	mov	r0, r4
 801353c:	b002      	add	sp, #8
 801353e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013542:	bf00      	nop

08013544 <rcutils_string_map_getn>:
 8013544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013548:	b300      	cbz	r0, 801358c <rcutils_string_map_getn+0x48>
 801354a:	6807      	ldr	r7, [r0, #0]
 801354c:	b1ff      	cbz	r7, 801358e <rcutils_string_map_getn+0x4a>
 801354e:	4688      	mov	r8, r1
 8013550:	b1e1      	cbz	r1, 801358c <rcutils_string_map_getn+0x48>
 8013552:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8013556:	683e      	ldr	r6, [r7, #0]
 8013558:	f1ba 0f00 	cmp.w	sl, #0
 801355c:	d016      	beq.n	801358c <rcutils_string_map_getn+0x48>
 801355e:	4691      	mov	r9, r2
 8013560:	3e04      	subs	r6, #4
 8013562:	2400      	movs	r4, #0
 8013564:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8013568:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801356c:	4628      	mov	r0, r5
 801356e:	3401      	adds	r4, #1
 8013570:	b155      	cbz	r5, 8013588 <rcutils_string_map_getn+0x44>
 8013572:	f7ec fe3f 	bl	80001f4 <strlen>
 8013576:	4548      	cmp	r0, r9
 8013578:	4602      	mov	r2, r0
 801357a:	4629      	mov	r1, r5
 801357c:	bf38      	it	cc
 801357e:	464a      	movcc	r2, r9
 8013580:	4640      	mov	r0, r8
 8013582:	f004 f94a 	bl	801781a <strncmp>
 8013586:	b128      	cbz	r0, 8013594 <rcutils_string_map_getn+0x50>
 8013588:	45a2      	cmp	sl, r4
 801358a:	d1eb      	bne.n	8013564 <rcutils_string_map_getn+0x20>
 801358c:	2700      	movs	r7, #0
 801358e:	4638      	mov	r0, r7
 8013590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f853 700b 	ldr.w	r7, [r3, fp]
 801359a:	4638      	mov	r0, r7
 801359c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080135a0 <rmw_get_zero_initialized_context>:
 80135a0:	b510      	push	{r4, lr}
 80135a2:	4604      	mov	r4, r0
 80135a4:	3010      	adds	r0, #16
 80135a6:	f000 f80b 	bl	80135c0 <rmw_get_zero_initialized_init_options>
 80135aa:	2300      	movs	r3, #0
 80135ac:	2000      	movs	r0, #0
 80135ae:	2100      	movs	r1, #0
 80135b0:	e9c4 0100 	strd	r0, r1, [r4]
 80135b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80135b8:	60a3      	str	r3, [r4, #8]
 80135ba:	4620      	mov	r0, r4
 80135bc:	bd10      	pop	{r4, pc}
 80135be:	bf00      	nop

080135c0 <rmw_get_zero_initialized_init_options>:
 80135c0:	b510      	push	{r4, lr}
 80135c2:	2238      	movs	r2, #56	@ 0x38
 80135c4:	4604      	mov	r4, r0
 80135c6:	2100      	movs	r1, #0
 80135c8:	f004 f912 	bl	80177f0 <memset>
 80135cc:	f104 0010 	add.w	r0, r4, #16
 80135d0:	f000 f806 	bl	80135e0 <rmw_get_default_security_options>
 80135d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80135d8:	60e3      	str	r3, [r4, #12]
 80135da:	4620      	mov	r0, r4
 80135dc:	bd10      	pop	{r4, pc}
 80135de:	bf00      	nop

080135e0 <rmw_get_default_security_options>:
 80135e0:	2200      	movs	r2, #0
 80135e2:	7002      	strb	r2, [r0, #0]
 80135e4:	6042      	str	r2, [r0, #4]
 80135e6:	4770      	bx	lr

080135e8 <rmw_subscription_content_filter_options_fini>:
 80135e8:	b1b0      	cbz	r0, 8013618 <rmw_subscription_content_filter_options_fini+0x30>
 80135ea:	b538      	push	{r3, r4, r5, lr}
 80135ec:	4604      	mov	r4, r0
 80135ee:	4608      	mov	r0, r1
 80135f0:	460d      	mov	r5, r1
 80135f2:	f7f9 f9f9 	bl	800c9e8 <rcutils_allocator_is_valid>
 80135f6:	b168      	cbz	r0, 8013614 <rmw_subscription_content_filter_options_fini+0x2c>
 80135f8:	6820      	ldr	r0, [r4, #0]
 80135fa:	b120      	cbz	r0, 8013606 <rmw_subscription_content_filter_options_fini+0x1e>
 80135fc:	686b      	ldr	r3, [r5, #4]
 80135fe:	6929      	ldr	r1, [r5, #16]
 8013600:	4798      	blx	r3
 8013602:	2300      	movs	r3, #0
 8013604:	6023      	str	r3, [r4, #0]
 8013606:	1d20      	adds	r0, r4, #4
 8013608:	f003 fbd0 	bl	8016dac <rcutils_string_array_fini>
 801360c:	3800      	subs	r0, #0
 801360e:	bf18      	it	ne
 8013610:	2001      	movne	r0, #1
 8013612:	bd38      	pop	{r3, r4, r5, pc}
 8013614:	200b      	movs	r0, #11
 8013616:	bd38      	pop	{r3, r4, r5, pc}
 8013618:	200b      	movs	r0, #11
 801361a:	4770      	bx	lr

0801361c <rmw_get_default_subscription_options>:
 801361c:	2200      	movs	r2, #0
 801361e:	e9c0 2200 	strd	r2, r2, [r0]
 8013622:	6082      	str	r2, [r0, #8]
 8013624:	4770      	bx	lr
 8013626:	bf00      	nop

08013628 <rmw_time_equal>:
 8013628:	b4f0      	push	{r4, r5, r6, r7}
 801362a:	b084      	sub	sp, #16
 801362c:	ac04      	add	r4, sp, #16
 801362e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013632:	4603      	mov	r3, r0
 8013634:	4924      	ldr	r1, [pc, #144]	@ (80136c8 <rmw_time_equal+0xa0>)
 8013636:	9e03      	ldr	r6, [sp, #12]
 8013638:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801363c:	2202      	movs	r2, #2
 801363e:	4299      	cmp	r1, r3
 8013640:	41aa      	sbcs	r2, r5
 8013642:	d330      	bcc.n	80136a6 <rmw_time_equal+0x7e>
 8013644:	4c21      	ldr	r4, [pc, #132]	@ (80136cc <rmw_time_equal+0xa4>)
 8013646:	fba3 3204 	umull	r3, r2, r3, r4
 801364a:	fb04 2205 	mla	r2, r4, r5, r2
 801364e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013652:	43dd      	mvns	r5, r3
 8013654:	1a8c      	subs	r4, r1, r2
 8013656:	4285      	cmp	r5, r0
 8013658:	41b4      	sbcs	r4, r6
 801365a:	d332      	bcc.n	80136c2 <rmw_time_equal+0x9a>
 801365c:	eb10 0c03 	adds.w	ip, r0, r3
 8013660:	eb42 0106 	adc.w	r1, r2, r6
 8013664:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8013668:	4817      	ldr	r0, [pc, #92]	@ (80136c8 <rmw_time_equal+0xa0>)
 801366a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801366c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801366e:	2202      	movs	r2, #2
 8013670:	4298      	cmp	r0, r3
 8013672:	41b2      	sbcs	r2, r6
 8013674:	d31c      	bcc.n	80136b0 <rmw_time_equal+0x88>
 8013676:	4c15      	ldr	r4, [pc, #84]	@ (80136cc <rmw_time_equal+0xa4>)
 8013678:	fba3 3204 	umull	r3, r2, r3, r4
 801367c:	fb04 2206 	mla	r2, r4, r6, r2
 8013680:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8013684:	43de      	mvns	r6, r3
 8013686:	1a84      	subs	r4, r0, r2
 8013688:	42ae      	cmp	r6, r5
 801368a:	41bc      	sbcs	r4, r7
 801368c:	d315      	bcc.n	80136ba <rmw_time_equal+0x92>
 801368e:	195b      	adds	r3, r3, r5
 8013690:	eb42 0207 	adc.w	r2, r2, r7
 8013694:	428a      	cmp	r2, r1
 8013696:	bf08      	it	eq
 8013698:	4563      	cmpeq	r3, ip
 801369a:	bf0c      	ite	eq
 801369c:	2001      	moveq	r0, #1
 801369e:	2000      	movne	r0, #0
 80136a0:	b004      	add	sp, #16
 80136a2:	bcf0      	pop	{r4, r5, r6, r7}
 80136a4:	4770      	bx	lr
 80136a6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80136aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80136ae:	e7d9      	b.n	8013664 <rmw_time_equal+0x3c>
 80136b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80136b4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80136b8:	e7ec      	b.n	8013694 <rmw_time_equal+0x6c>
 80136ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80136be:	4602      	mov	r2, r0
 80136c0:	e7e8      	b.n	8013694 <rmw_time_equal+0x6c>
 80136c2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80136c6:	e7cd      	b.n	8013664 <rmw_time_equal+0x3c>
 80136c8:	25c17d04 	.word	0x25c17d04
 80136cc:	3b9aca00 	.word	0x3b9aca00

080136d0 <rmw_time_total_nsec>:
 80136d0:	b470      	push	{r4, r5, r6}
 80136d2:	b085      	sub	sp, #20
 80136d4:	ac04      	add	r4, sp, #16
 80136d6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80136da:	4603      	mov	r3, r0
 80136dc:	4912      	ldr	r1, [pc, #72]	@ (8013728 <rmw_time_total_nsec+0x58>)
 80136de:	9e03      	ldr	r6, [sp, #12]
 80136e0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80136e4:	2202      	movs	r2, #2
 80136e6:	4299      	cmp	r1, r3
 80136e8:	41aa      	sbcs	r2, r5
 80136ea:	d311      	bcc.n	8013710 <rmw_time_total_nsec+0x40>
 80136ec:	4c0f      	ldr	r4, [pc, #60]	@ (801372c <rmw_time_total_nsec+0x5c>)
 80136ee:	fba3 3204 	umull	r3, r2, r3, r4
 80136f2:	fb04 2205 	mla	r2, r4, r5, r2
 80136f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80136fa:	43dd      	mvns	r5, r3
 80136fc:	1a8c      	subs	r4, r1, r2
 80136fe:	4285      	cmp	r5, r0
 8013700:	41b4      	sbcs	r4, r6
 8013702:	d30c      	bcc.n	801371e <rmw_time_total_nsec+0x4e>
 8013704:	1818      	adds	r0, r3, r0
 8013706:	eb42 0106 	adc.w	r1, r2, r6
 801370a:	b005      	add	sp, #20
 801370c:	bc70      	pop	{r4, r5, r6}
 801370e:	4770      	bx	lr
 8013710:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013714:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013718:	b005      	add	sp, #20
 801371a:	bc70      	pop	{r4, r5, r6}
 801371c:	4770      	bx	lr
 801371e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013722:	b005      	add	sp, #20
 8013724:	bc70      	pop	{r4, r5, r6}
 8013726:	4770      	bx	lr
 8013728:	25c17d04 	.word	0x25c17d04
 801372c:	3b9aca00 	.word	0x3b9aca00

08013730 <rmw_get_zero_initialized_message_info>:
 8013730:	b510      	push	{r4, lr}
 8013732:	2240      	movs	r2, #64	@ 0x40
 8013734:	4604      	mov	r4, r0
 8013736:	2100      	movs	r1, #0
 8013738:	f004 f85a 	bl	80177f0 <memset>
 801373c:	4620      	mov	r0, r4
 801373e:	bd10      	pop	{r4, pc}

08013740 <rmw_validate_full_topic_name>:
 8013740:	2800      	cmp	r0, #0
 8013742:	d057      	beq.n	80137f4 <rmw_validate_full_topic_name+0xb4>
 8013744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013748:	460d      	mov	r5, r1
 801374a:	2900      	cmp	r1, #0
 801374c:	d054      	beq.n	80137f8 <rmw_validate_full_topic_name+0xb8>
 801374e:	4616      	mov	r6, r2
 8013750:	4604      	mov	r4, r0
 8013752:	f7ec fd4f 	bl	80001f4 <strlen>
 8013756:	b148      	cbz	r0, 801376c <rmw_validate_full_topic_name+0x2c>
 8013758:	7823      	ldrb	r3, [r4, #0]
 801375a:	2b2f      	cmp	r3, #47	@ 0x2f
 801375c:	d00d      	beq.n	801377a <rmw_validate_full_topic_name+0x3a>
 801375e:	2302      	movs	r3, #2
 8013760:	602b      	str	r3, [r5, #0]
 8013762:	b13e      	cbz	r6, 8013774 <rmw_validate_full_topic_name+0x34>
 8013764:	2000      	movs	r0, #0
 8013766:	6030      	str	r0, [r6, #0]
 8013768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801376c:	2301      	movs	r3, #1
 801376e:	602b      	str	r3, [r5, #0]
 8013770:	2e00      	cmp	r6, #0
 8013772:	d1f7      	bne.n	8013764 <rmw_validate_full_topic_name+0x24>
 8013774:	2000      	movs	r0, #0
 8013776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801377a:	1e43      	subs	r3, r0, #1
 801377c:	5ce2      	ldrb	r2, [r4, r3]
 801377e:	2a2f      	cmp	r2, #47	@ 0x2f
 8013780:	d03c      	beq.n	80137fc <rmw_validate_full_topic_name+0xbc>
 8013782:	1e63      	subs	r3, r4, #1
 8013784:	eb03 0800 	add.w	r8, r3, r0
 8013788:	f1c4 0e01 	rsb	lr, r4, #1
 801378c:	eb0e 0703 	add.w	r7, lr, r3
 8013790:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8013794:	f021 0220 	bic.w	r2, r1, #32
 8013798:	3a41      	subs	r2, #65	@ 0x41
 801379a:	2a19      	cmp	r2, #25
 801379c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80137a0:	d90b      	bls.n	80137ba <rmw_validate_full_topic_name+0x7a>
 80137a2:	295f      	cmp	r1, #95	@ 0x5f
 80137a4:	d009      	beq.n	80137ba <rmw_validate_full_topic_name+0x7a>
 80137a6:	f1bc 0f0a 	cmp.w	ip, #10
 80137aa:	d906      	bls.n	80137ba <rmw_validate_full_topic_name+0x7a>
 80137ac:	2304      	movs	r3, #4
 80137ae:	602b      	str	r3, [r5, #0]
 80137b0:	2e00      	cmp	r6, #0
 80137b2:	d0df      	beq.n	8013774 <rmw_validate_full_topic_name+0x34>
 80137b4:	6037      	str	r7, [r6, #0]
 80137b6:	2000      	movs	r0, #0
 80137b8:	e7d6      	b.n	8013768 <rmw_validate_full_topic_name+0x28>
 80137ba:	4543      	cmp	r3, r8
 80137bc:	d1e6      	bne.n	801378c <rmw_validate_full_topic_name+0x4c>
 80137be:	4f1a      	ldr	r7, [pc, #104]	@ (8013828 <rmw_validate_full_topic_name+0xe8>)
 80137c0:	2301      	movs	r3, #1
 80137c2:	e004      	b.n	80137ce <rmw_validate_full_topic_name+0x8e>
 80137c4:	4298      	cmp	r0, r3
 80137c6:	f104 0401 	add.w	r4, r4, #1
 80137ca:	d91c      	bls.n	8013806 <rmw_validate_full_topic_name+0xc6>
 80137cc:	4613      	mov	r3, r2
 80137ce:	4298      	cmp	r0, r3
 80137d0:	f103 0201 	add.w	r2, r3, #1
 80137d4:	d0f6      	beq.n	80137c4 <rmw_validate_full_topic_name+0x84>
 80137d6:	7821      	ldrb	r1, [r4, #0]
 80137d8:	292f      	cmp	r1, #47	@ 0x2f
 80137da:	d1f3      	bne.n	80137c4 <rmw_validate_full_topic_name+0x84>
 80137dc:	7861      	ldrb	r1, [r4, #1]
 80137de:	292f      	cmp	r1, #47	@ 0x2f
 80137e0:	d01c      	beq.n	801381c <rmw_validate_full_topic_name+0xdc>
 80137e2:	5dc9      	ldrb	r1, [r1, r7]
 80137e4:	0749      	lsls	r1, r1, #29
 80137e6:	d5ed      	bpl.n	80137c4 <rmw_validate_full_topic_name+0x84>
 80137e8:	2206      	movs	r2, #6
 80137ea:	602a      	str	r2, [r5, #0]
 80137ec:	2e00      	cmp	r6, #0
 80137ee:	d0c1      	beq.n	8013774 <rmw_validate_full_topic_name+0x34>
 80137f0:	6033      	str	r3, [r6, #0]
 80137f2:	e7bf      	b.n	8013774 <rmw_validate_full_topic_name+0x34>
 80137f4:	200b      	movs	r0, #11
 80137f6:	4770      	bx	lr
 80137f8:	200b      	movs	r0, #11
 80137fa:	e7b5      	b.n	8013768 <rmw_validate_full_topic_name+0x28>
 80137fc:	2203      	movs	r2, #3
 80137fe:	602a      	str	r2, [r5, #0]
 8013800:	2e00      	cmp	r6, #0
 8013802:	d1f5      	bne.n	80137f0 <rmw_validate_full_topic_name+0xb0>
 8013804:	e7b6      	b.n	8013774 <rmw_validate_full_topic_name+0x34>
 8013806:	28f7      	cmp	r0, #247	@ 0xf7
 8013808:	d802      	bhi.n	8013810 <rmw_validate_full_topic_name+0xd0>
 801380a:	2000      	movs	r0, #0
 801380c:	6028      	str	r0, [r5, #0]
 801380e:	e7ab      	b.n	8013768 <rmw_validate_full_topic_name+0x28>
 8013810:	2307      	movs	r3, #7
 8013812:	602b      	str	r3, [r5, #0]
 8013814:	2e00      	cmp	r6, #0
 8013816:	d0ad      	beq.n	8013774 <rmw_validate_full_topic_name+0x34>
 8013818:	23f6      	movs	r3, #246	@ 0xf6
 801381a:	e7e9      	b.n	80137f0 <rmw_validate_full_topic_name+0xb0>
 801381c:	2205      	movs	r2, #5
 801381e:	602a      	str	r2, [r5, #0]
 8013820:	2e00      	cmp	r6, #0
 8013822:	d1e5      	bne.n	80137f0 <rmw_validate_full_topic_name+0xb0>
 8013824:	e7a6      	b.n	8013774 <rmw_validate_full_topic_name+0x34>
 8013826:	bf00      	nop
 8013828:	080195c4 	.word	0x080195c4

0801382c <rmw_validate_namespace_with_size>:
 801382c:	b340      	cbz	r0, 8013880 <rmw_validate_namespace_with_size+0x54>
 801382e:	b570      	push	{r4, r5, r6, lr}
 8013830:	4614      	mov	r4, r2
 8013832:	b0c2      	sub	sp, #264	@ 0x108
 8013834:	b332      	cbz	r2, 8013884 <rmw_validate_namespace_with_size+0x58>
 8013836:	2901      	cmp	r1, #1
 8013838:	460d      	mov	r5, r1
 801383a:	461e      	mov	r6, r3
 801383c:	d102      	bne.n	8013844 <rmw_validate_namespace_with_size+0x18>
 801383e:	7803      	ldrb	r3, [r0, #0]
 8013840:	2b2f      	cmp	r3, #47	@ 0x2f
 8013842:	d012      	beq.n	801386a <rmw_validate_namespace_with_size+0x3e>
 8013844:	aa01      	add	r2, sp, #4
 8013846:	4669      	mov	r1, sp
 8013848:	f7ff ff7a 	bl	8013740 <rmw_validate_full_topic_name>
 801384c:	b978      	cbnz	r0, 801386e <rmw_validate_namespace_with_size+0x42>
 801384e:	9b00      	ldr	r3, [sp, #0]
 8013850:	b14b      	cbz	r3, 8013866 <rmw_validate_namespace_with_size+0x3a>
 8013852:	2b07      	cmp	r3, #7
 8013854:	d007      	beq.n	8013866 <rmw_validate_namespace_with_size+0x3a>
 8013856:	1e5a      	subs	r2, r3, #1
 8013858:	2a05      	cmp	r2, #5
 801385a:	d82b      	bhi.n	80138b4 <rmw_validate_namespace_with_size+0x88>
 801385c:	e8df f002 	tbb	[pc, r2]
 8013860:	1e212427 	.word	0x1e212427
 8013864:	141b      	.short	0x141b
 8013866:	2df5      	cmp	r5, #245	@ 0xf5
 8013868:	d803      	bhi.n	8013872 <rmw_validate_namespace_with_size+0x46>
 801386a:	2000      	movs	r0, #0
 801386c:	6020      	str	r0, [r4, #0]
 801386e:	b042      	add	sp, #264	@ 0x108
 8013870:	bd70      	pop	{r4, r5, r6, pc}
 8013872:	2307      	movs	r3, #7
 8013874:	6023      	str	r3, [r4, #0]
 8013876:	2e00      	cmp	r6, #0
 8013878:	d0f9      	beq.n	801386e <rmw_validate_namespace_with_size+0x42>
 801387a:	23f4      	movs	r3, #244	@ 0xf4
 801387c:	6033      	str	r3, [r6, #0]
 801387e:	e7f6      	b.n	801386e <rmw_validate_namespace_with_size+0x42>
 8013880:	200b      	movs	r0, #11
 8013882:	4770      	bx	lr
 8013884:	200b      	movs	r0, #11
 8013886:	e7f2      	b.n	801386e <rmw_validate_namespace_with_size+0x42>
 8013888:	2306      	movs	r3, #6
 801388a:	6023      	str	r3, [r4, #0]
 801388c:	2e00      	cmp	r6, #0
 801388e:	d0ee      	beq.n	801386e <rmw_validate_namespace_with_size+0x42>
 8013890:	9b01      	ldr	r3, [sp, #4]
 8013892:	6033      	str	r3, [r6, #0]
 8013894:	e7eb      	b.n	801386e <rmw_validate_namespace_with_size+0x42>
 8013896:	2305      	movs	r3, #5
 8013898:	6023      	str	r3, [r4, #0]
 801389a:	e7f7      	b.n	801388c <rmw_validate_namespace_with_size+0x60>
 801389c:	2304      	movs	r3, #4
 801389e:	6023      	str	r3, [r4, #0]
 80138a0:	e7f4      	b.n	801388c <rmw_validate_namespace_with_size+0x60>
 80138a2:	2303      	movs	r3, #3
 80138a4:	6023      	str	r3, [r4, #0]
 80138a6:	e7f1      	b.n	801388c <rmw_validate_namespace_with_size+0x60>
 80138a8:	2302      	movs	r3, #2
 80138aa:	6023      	str	r3, [r4, #0]
 80138ac:	e7ee      	b.n	801388c <rmw_validate_namespace_with_size+0x60>
 80138ae:	2301      	movs	r3, #1
 80138b0:	6023      	str	r3, [r4, #0]
 80138b2:	e7eb      	b.n	801388c <rmw_validate_namespace_with_size+0x60>
 80138b4:	4a03      	ldr	r2, [pc, #12]	@ (80138c4 <rmw_validate_namespace_with_size+0x98>)
 80138b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80138ba:	a802      	add	r0, sp, #8
 80138bc:	f7ff fcda 	bl	8013274 <rcutils_snprintf>
 80138c0:	2001      	movs	r0, #1
 80138c2:	e7d4      	b.n	801386e <rmw_validate_namespace_with_size+0x42>
 80138c4:	08018fe4 	.word	0x08018fe4

080138c8 <rmw_validate_namespace>:
 80138c8:	b168      	cbz	r0, 80138e6 <rmw_validate_namespace+0x1e>
 80138ca:	b570      	push	{r4, r5, r6, lr}
 80138cc:	460d      	mov	r5, r1
 80138ce:	4616      	mov	r6, r2
 80138d0:	4604      	mov	r4, r0
 80138d2:	f7ec fc8f 	bl	80001f4 <strlen>
 80138d6:	4633      	mov	r3, r6
 80138d8:	4601      	mov	r1, r0
 80138da:	462a      	mov	r2, r5
 80138dc:	4620      	mov	r0, r4
 80138de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138e2:	f7ff bfa3 	b.w	801382c <rmw_validate_namespace_with_size>
 80138e6:	200b      	movs	r0, #11
 80138e8:	4770      	bx	lr
 80138ea:	bf00      	nop

080138ec <rmw_namespace_validation_result_string>:
 80138ec:	2807      	cmp	r0, #7
 80138ee:	bf9a      	itte	ls
 80138f0:	4b02      	ldrls	r3, [pc, #8]	@ (80138fc <rmw_namespace_validation_result_string+0x10>)
 80138f2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80138f6:	4802      	ldrhi	r0, [pc, #8]	@ (8013900 <rmw_namespace_validation_result_string+0x14>)
 80138f8:	4770      	bx	lr
 80138fa:	bf00      	nop
 80138fc:	080191dc 	.word	0x080191dc
 8013900:	08019034 	.word	0x08019034

08013904 <rmw_validate_node_name>:
 8013904:	2800      	cmp	r0, #0
 8013906:	d03b      	beq.n	8013980 <rmw_validate_node_name+0x7c>
 8013908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801390c:	460d      	mov	r5, r1
 801390e:	2900      	cmp	r1, #0
 8013910:	d038      	beq.n	8013984 <rmw_validate_node_name+0x80>
 8013912:	4616      	mov	r6, r2
 8013914:	4604      	mov	r4, r0
 8013916:	f7ec fc6d 	bl	80001f4 <strlen>
 801391a:	b1e0      	cbz	r0, 8013956 <rmw_validate_node_name+0x52>
 801391c:	1e63      	subs	r3, r4, #1
 801391e:	eb03 0800 	add.w	r8, r3, r0
 8013922:	f1c4 0101 	rsb	r1, r4, #1
 8013926:	18cf      	adds	r7, r1, r3
 8013928:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801392c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8013930:	f02e 0c20 	bic.w	ip, lr, #32
 8013934:	2a09      	cmp	r2, #9
 8013936:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801393a:	d914      	bls.n	8013966 <rmw_validate_node_name+0x62>
 801393c:	f1bc 0f19 	cmp.w	ip, #25
 8013940:	d911      	bls.n	8013966 <rmw_validate_node_name+0x62>
 8013942:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8013946:	d00e      	beq.n	8013966 <rmw_validate_node_name+0x62>
 8013948:	2302      	movs	r3, #2
 801394a:	602b      	str	r3, [r5, #0]
 801394c:	b106      	cbz	r6, 8013950 <rmw_validate_node_name+0x4c>
 801394e:	6037      	str	r7, [r6, #0]
 8013950:	2000      	movs	r0, #0
 8013952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013956:	2301      	movs	r3, #1
 8013958:	602b      	str	r3, [r5, #0]
 801395a:	2e00      	cmp	r6, #0
 801395c:	d0f8      	beq.n	8013950 <rmw_validate_node_name+0x4c>
 801395e:	2000      	movs	r0, #0
 8013960:	6030      	str	r0, [r6, #0]
 8013962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013966:	4543      	cmp	r3, r8
 8013968:	d1dd      	bne.n	8013926 <rmw_validate_node_name+0x22>
 801396a:	7822      	ldrb	r2, [r4, #0]
 801396c:	4b0d      	ldr	r3, [pc, #52]	@ (80139a4 <rmw_validate_node_name+0xa0>)
 801396e:	5cd3      	ldrb	r3, [r2, r3]
 8013970:	f013 0304 	ands.w	r3, r3, #4
 8013974:	d110      	bne.n	8013998 <rmw_validate_node_name+0x94>
 8013976:	28ff      	cmp	r0, #255	@ 0xff
 8013978:	d806      	bhi.n	8013988 <rmw_validate_node_name+0x84>
 801397a:	602b      	str	r3, [r5, #0]
 801397c:	4618      	mov	r0, r3
 801397e:	e7e8      	b.n	8013952 <rmw_validate_node_name+0x4e>
 8013980:	200b      	movs	r0, #11
 8013982:	4770      	bx	lr
 8013984:	200b      	movs	r0, #11
 8013986:	e7e4      	b.n	8013952 <rmw_validate_node_name+0x4e>
 8013988:	2204      	movs	r2, #4
 801398a:	602a      	str	r2, [r5, #0]
 801398c:	2e00      	cmp	r6, #0
 801398e:	d0df      	beq.n	8013950 <rmw_validate_node_name+0x4c>
 8013990:	22fe      	movs	r2, #254	@ 0xfe
 8013992:	6032      	str	r2, [r6, #0]
 8013994:	4618      	mov	r0, r3
 8013996:	e7dc      	b.n	8013952 <rmw_validate_node_name+0x4e>
 8013998:	2303      	movs	r3, #3
 801399a:	602b      	str	r3, [r5, #0]
 801399c:	2e00      	cmp	r6, #0
 801399e:	d1de      	bne.n	801395e <rmw_validate_node_name+0x5a>
 80139a0:	e7d6      	b.n	8013950 <rmw_validate_node_name+0x4c>
 80139a2:	bf00      	nop
 80139a4:	080195c4 	.word	0x080195c4

080139a8 <rmw_node_name_validation_result_string>:
 80139a8:	2804      	cmp	r0, #4
 80139aa:	bf9a      	itte	ls
 80139ac:	4b02      	ldrls	r3, [pc, #8]	@ (80139b8 <rmw_node_name_validation_result_string+0x10>)
 80139ae:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80139b2:	4802      	ldrhi	r0, [pc, #8]	@ (80139bc <rmw_node_name_validation_result_string+0x14>)
 80139b4:	4770      	bx	lr
 80139b6:	bf00      	nop
 80139b8:	080192e8 	.word	0x080192e8
 80139bc:	080191fc 	.word	0x080191fc

080139c0 <get_memory>:
 80139c0:	4603      	mov	r3, r0
 80139c2:	6840      	ldr	r0, [r0, #4]
 80139c4:	b158      	cbz	r0, 80139de <get_memory+0x1e>
 80139c6:	6842      	ldr	r2, [r0, #4]
 80139c8:	605a      	str	r2, [r3, #4]
 80139ca:	b10a      	cbz	r2, 80139d0 <get_memory+0x10>
 80139cc:	2100      	movs	r1, #0
 80139ce:	6011      	str	r1, [r2, #0]
 80139d0:	681a      	ldr	r2, [r3, #0]
 80139d2:	6042      	str	r2, [r0, #4]
 80139d4:	b102      	cbz	r2, 80139d8 <get_memory+0x18>
 80139d6:	6010      	str	r0, [r2, #0]
 80139d8:	2200      	movs	r2, #0
 80139da:	6002      	str	r2, [r0, #0]
 80139dc:	6018      	str	r0, [r3, #0]
 80139de:	4770      	bx	lr

080139e0 <put_memory>:
 80139e0:	680b      	ldr	r3, [r1, #0]
 80139e2:	b10b      	cbz	r3, 80139e8 <put_memory+0x8>
 80139e4:	684a      	ldr	r2, [r1, #4]
 80139e6:	605a      	str	r2, [r3, #4]
 80139e8:	684a      	ldr	r2, [r1, #4]
 80139ea:	b102      	cbz	r2, 80139ee <put_memory+0xe>
 80139ec:	6013      	str	r3, [r2, #0]
 80139ee:	6803      	ldr	r3, [r0, #0]
 80139f0:	428b      	cmp	r3, r1
 80139f2:	6843      	ldr	r3, [r0, #4]
 80139f4:	bf08      	it	eq
 80139f6:	6002      	streq	r2, [r0, #0]
 80139f8:	604b      	str	r3, [r1, #4]
 80139fa:	b103      	cbz	r3, 80139fe <put_memory+0x1e>
 80139fc:	6019      	str	r1, [r3, #0]
 80139fe:	2300      	movs	r3, #0
 8013a00:	600b      	str	r3, [r1, #0]
 8013a02:	6041      	str	r1, [r0, #4]
 8013a04:	4770      	bx	lr
 8013a06:	bf00      	nop

08013a08 <rmw_destroy_client>:
 8013a08:	b570      	push	{r4, r5, r6, lr}
 8013a0a:	b128      	cbz	r0, 8013a18 <rmw_destroy_client+0x10>
 8013a0c:	4604      	mov	r4, r0
 8013a0e:	6800      	ldr	r0, [r0, #0]
 8013a10:	460d      	mov	r5, r1
 8013a12:	f7f9 fd8f 	bl	800d534 <is_uxrce_rmw_identifier_valid>
 8013a16:	b910      	cbnz	r0, 8013a1e <rmw_destroy_client+0x16>
 8013a18:	2401      	movs	r4, #1
 8013a1a:	4620      	mov	r0, r4
 8013a1c:	bd70      	pop	{r4, r5, r6, pc}
 8013a1e:	6863      	ldr	r3, [r4, #4]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d0f9      	beq.n	8013a18 <rmw_destroy_client+0x10>
 8013a24:	2d00      	cmp	r5, #0
 8013a26:	d0f7      	beq.n	8013a18 <rmw_destroy_client+0x10>
 8013a28:	6828      	ldr	r0, [r5, #0]
 8013a2a:	f7f9 fd83 	bl	800d534 <is_uxrce_rmw_identifier_valid>
 8013a2e:	2800      	cmp	r0, #0
 8013a30:	d0f2      	beq.n	8013a18 <rmw_destroy_client+0x10>
 8013a32:	686e      	ldr	r6, [r5, #4]
 8013a34:	2e00      	cmp	r6, #0
 8013a36:	d0ef      	beq.n	8013a18 <rmw_destroy_client+0x10>
 8013a38:	6864      	ldr	r4, [r4, #4]
 8013a3a:	6932      	ldr	r2, [r6, #16]
 8013a3c:	6920      	ldr	r0, [r4, #16]
 8013a3e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013a42:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a46:	6819      	ldr	r1, [r3, #0]
 8013a48:	f002 f8ec 	bl	8015c24 <uxr_buffer_cancel_data>
 8013a4c:	4602      	mov	r2, r0
 8013a4e:	6920      	ldr	r0, [r4, #16]
 8013a50:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013a54:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013a58:	f7f9 fcec 	bl	800d434 <run_xrce_session>
 8013a5c:	6920      	ldr	r0, [r4, #16]
 8013a5e:	6932      	ldr	r2, [r6, #16]
 8013a60:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013a64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a68:	6819      	ldr	r1, [r3, #0]
 8013a6a:	f7f9 fe39 	bl	800d6e0 <uxr_buffer_delete_entity>
 8013a6e:	4602      	mov	r2, r0
 8013a70:	6920      	ldr	r0, [r4, #16]
 8013a72:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013a76:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013a7a:	f7f9 fcdb 	bl	800d434 <run_xrce_session>
 8013a7e:	2800      	cmp	r0, #0
 8013a80:	4628      	mov	r0, r5
 8013a82:	bf14      	ite	ne
 8013a84:	2400      	movne	r4, #0
 8013a86:	2402      	moveq	r4, #2
 8013a88:	f7f9 fbbc 	bl	800d204 <rmw_uxrce_fini_client_memory>
 8013a8c:	e7c5      	b.n	8013a1a <rmw_destroy_client+0x12>
 8013a8e:	bf00      	nop

08013a90 <rmw_get_implementation_identifier>:
 8013a90:	4b01      	ldr	r3, [pc, #4]	@ (8013a98 <rmw_get_implementation_identifier+0x8>)
 8013a92:	6818      	ldr	r0, [r3, #0]
 8013a94:	4770      	bx	lr
 8013a96:	bf00      	nop
 8013a98:	08019314 	.word	0x08019314

08013a9c <rmw_init_options_init>:
 8013a9c:	b084      	sub	sp, #16
 8013a9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013aa0:	b083      	sub	sp, #12
 8013aa2:	ad09      	add	r5, sp, #36	@ 0x24
 8013aa4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8013aa8:	b130      	cbz	r0, 8013ab8 <rmw_init_options_init+0x1c>
 8013aaa:	4604      	mov	r4, r0
 8013aac:	4628      	mov	r0, r5
 8013aae:	f7f8 ff9b 	bl	800c9e8 <rcutils_allocator_is_valid>
 8013ab2:	b108      	cbz	r0, 8013ab8 <rmw_init_options_init+0x1c>
 8013ab4:	68a6      	ldr	r6, [r4, #8]
 8013ab6:	b12e      	cbz	r6, 8013ac4 <rmw_init_options_init+0x28>
 8013ab8:	200b      	movs	r0, #11
 8013aba:	b003      	add	sp, #12
 8013abc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013ac0:	b004      	add	sp, #16
 8013ac2:	4770      	bx	lr
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	e9c4 2300 	strd	r2, r3, [r4]
 8013acc:	4b22      	ldr	r3, [pc, #136]	@ (8013b58 <rmw_init_options_init+0xbc>)
 8013ace:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8013b68 <rmw_init_options_init+0xcc>
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	60a3      	str	r3, [r4, #8]
 8013ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ad8:	f104 0c20 	add.w	ip, r4, #32
 8013adc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ae0:	466f      	mov	r7, sp
 8013ae2:	682b      	ldr	r3, [r5, #0]
 8013ae4:	f8cc 3000 	str.w	r3, [ip]
 8013ae8:	4638      	mov	r0, r7
 8013aea:	f8c4 e01c 	str.w	lr, [r4, #28]
 8013aee:	60e6      	str	r6, [r4, #12]
 8013af0:	f7ff fd76 	bl	80135e0 <rmw_get_default_security_options>
 8013af4:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013af8:	f104 0310 	add.w	r3, r4, #16
 8013afc:	e883 0003 	stmia.w	r3, {r0, r1}
 8013b00:	2203      	movs	r2, #3
 8013b02:	4816      	ldr	r0, [pc, #88]	@ (8013b5c <rmw_init_options_init+0xc0>)
 8013b04:	4916      	ldr	r1, [pc, #88]	@ (8013b60 <rmw_init_options_init+0xc4>)
 8013b06:	7626      	strb	r6, [r4, #24]
 8013b08:	f7f9 fabc 	bl	800d084 <rmw_uxrce_init_init_options_impl_memory>
 8013b0c:	4813      	ldr	r0, [pc, #76]	@ (8013b5c <rmw_init_options_init+0xc0>)
 8013b0e:	f7ff ff57 	bl	80139c0 <get_memory>
 8013b12:	b1f0      	cbz	r0, 8013b52 <rmw_init_options_init+0xb6>
 8013b14:	4a13      	ldr	r2, [pc, #76]	@ (8013b64 <rmw_init_options_init+0xc8>)
 8013b16:	6883      	ldr	r3, [r0, #8]
 8013b18:	6851      	ldr	r1, [r2, #4]
 8013b1a:	7810      	ldrb	r0, [r2, #0]
 8013b1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8013b1e:	7418      	strb	r0, [r3, #16]
 8013b20:	6159      	str	r1, [r3, #20]
 8013b22:	68d1      	ldr	r1, [r2, #12]
 8013b24:	61d9      	str	r1, [r3, #28]
 8013b26:	6911      	ldr	r1, [r2, #16]
 8013b28:	6219      	str	r1, [r3, #32]
 8013b2a:	6951      	ldr	r1, [r2, #20]
 8013b2c:	6892      	ldr	r2, [r2, #8]
 8013b2e:	619a      	str	r2, [r3, #24]
 8013b30:	6259      	str	r1, [r3, #36]	@ 0x24
 8013b32:	f7fb fa31 	bl	800ef98 <uxr_nanos>
 8013b36:	f003 fb93 	bl	8017260 <srand>
 8013b3a:	f003 fbbf 	bl	80172bc <rand>
 8013b3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013b40:	6298      	str	r0, [r3, #40]	@ 0x28
 8013b42:	2800      	cmp	r0, #0
 8013b44:	d0f9      	beq.n	8013b3a <rmw_init_options_init+0x9e>
 8013b46:	2000      	movs	r0, #0
 8013b48:	b003      	add	sp, #12
 8013b4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013b4e:	b004      	add	sp, #16
 8013b50:	4770      	bx	lr
 8013b52:	2001      	movs	r0, #1
 8013b54:	e7b1      	b.n	8013aba <rmw_init_options_init+0x1e>
 8013b56:	bf00      	nop
 8013b58:	08019314 	.word	0x08019314
 8013b5c:	2000dcd4 	.word	0x2000dcd4
 8013b60:	20009570 	.word	0x20009570
 8013b64:	200093fc 	.word	0x200093fc
 8013b68:	08018d7c 	.word	0x08018d7c

08013b6c <rmw_init_options_copy>:
 8013b6c:	b570      	push	{r4, r5, r6, lr}
 8013b6e:	b158      	cbz	r0, 8013b88 <rmw_init_options_copy+0x1c>
 8013b70:	460d      	mov	r5, r1
 8013b72:	b149      	cbz	r1, 8013b88 <rmw_init_options_copy+0x1c>
 8013b74:	4604      	mov	r4, r0
 8013b76:	6880      	ldr	r0, [r0, #8]
 8013b78:	b120      	cbz	r0, 8013b84 <rmw_init_options_copy+0x18>
 8013b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8013bf4 <rmw_init_options_copy+0x88>)
 8013b7c:	6819      	ldr	r1, [r3, #0]
 8013b7e:	f7ec fb2f 	bl	80001e0 <strcmp>
 8013b82:	bb90      	cbnz	r0, 8013bea <rmw_init_options_copy+0x7e>
 8013b84:	68ab      	ldr	r3, [r5, #8]
 8013b86:	b113      	cbz	r3, 8013b8e <rmw_init_options_copy+0x22>
 8013b88:	250b      	movs	r5, #11
 8013b8a:	4628      	mov	r0, r5
 8013b8c:	bd70      	pop	{r4, r5, r6, pc}
 8013b8e:	4623      	mov	r3, r4
 8013b90:	462a      	mov	r2, r5
 8013b92:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8013b96:	f8d3 c000 	ldr.w	ip, [r3]
 8013b9a:	6858      	ldr	r0, [r3, #4]
 8013b9c:	6899      	ldr	r1, [r3, #8]
 8013b9e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8013ba2:	f8c2 e00c 	str.w	lr, [r2, #12]
 8013ba6:	3310      	adds	r3, #16
 8013ba8:	42b3      	cmp	r3, r6
 8013baa:	f8c2 c000 	str.w	ip, [r2]
 8013bae:	6050      	str	r0, [r2, #4]
 8013bb0:	6091      	str	r1, [r2, #8]
 8013bb2:	f102 0210 	add.w	r2, r2, #16
 8013bb6:	d1ee      	bne.n	8013b96 <rmw_init_options_copy+0x2a>
 8013bb8:	6819      	ldr	r1, [r3, #0]
 8013bba:	685b      	ldr	r3, [r3, #4]
 8013bbc:	480e      	ldr	r0, [pc, #56]	@ (8013bf8 <rmw_init_options_copy+0x8c>)
 8013bbe:	6053      	str	r3, [r2, #4]
 8013bc0:	6011      	str	r1, [r2, #0]
 8013bc2:	f7ff fefd 	bl	80139c0 <get_memory>
 8013bc6:	b198      	cbz	r0, 8013bf0 <rmw_init_options_copy+0x84>
 8013bc8:	6883      	ldr	r3, [r0, #8]
 8013bca:	636b      	str	r3, [r5, #52]	@ 0x34
 8013bcc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013bce:	f102 0c10 	add.w	ip, r2, #16
 8013bd2:	f103 0410 	add.w	r4, r3, #16
 8013bd6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013bdc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8013be0:	2500      	movs	r5, #0
 8013be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013be6:	4628      	mov	r0, r5
 8013be8:	bd70      	pop	{r4, r5, r6, pc}
 8013bea:	250c      	movs	r5, #12
 8013bec:	4628      	mov	r0, r5
 8013bee:	bd70      	pop	{r4, r5, r6, pc}
 8013bf0:	2501      	movs	r5, #1
 8013bf2:	e7ca      	b.n	8013b8a <rmw_init_options_copy+0x1e>
 8013bf4:	08019314 	.word	0x08019314
 8013bf8:	2000dcd4 	.word	0x2000dcd4

08013bfc <rmw_init_options_fini>:
 8013bfc:	2800      	cmp	r0, #0
 8013bfe:	d03d      	beq.n	8013c7c <rmw_init_options_fini+0x80>
 8013c00:	b510      	push	{r4, lr}
 8013c02:	4604      	mov	r4, r0
 8013c04:	b08e      	sub	sp, #56	@ 0x38
 8013c06:	3020      	adds	r0, #32
 8013c08:	f7f8 feee 	bl	800c9e8 <rcutils_allocator_is_valid>
 8013c0c:	b360      	cbz	r0, 8013c68 <rmw_init_options_fini+0x6c>
 8013c0e:	68a0      	ldr	r0, [r4, #8]
 8013c10:	b120      	cbz	r0, 8013c1c <rmw_init_options_fini+0x20>
 8013c12:	4b1c      	ldr	r3, [pc, #112]	@ (8013c84 <rmw_init_options_fini+0x88>)
 8013c14:	6819      	ldr	r1, [r3, #0]
 8013c16:	f7ec fae3 	bl	80001e0 <strcmp>
 8013c1a:	bb68      	cbnz	r0, 8013c78 <rmw_init_options_fini+0x7c>
 8013c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8013c88 <rmw_init_options_fini+0x8c>)
 8013c1e:	6819      	ldr	r1, [r3, #0]
 8013c20:	b331      	cbz	r1, 8013c70 <rmw_init_options_fini+0x74>
 8013c22:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013c24:	e001      	b.n	8013c2a <rmw_init_options_fini+0x2e>
 8013c26:	6849      	ldr	r1, [r1, #4]
 8013c28:	b311      	cbz	r1, 8013c70 <rmw_init_options_fini+0x74>
 8013c2a:	688b      	ldr	r3, [r1, #8]
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d1fa      	bne.n	8013c26 <rmw_init_options_fini+0x2a>
 8013c30:	4815      	ldr	r0, [pc, #84]	@ (8013c88 <rmw_init_options_fini+0x8c>)
 8013c32:	f7ff fed5 	bl	80139e0 <put_memory>
 8013c36:	4668      	mov	r0, sp
 8013c38:	f7ff fcc2 	bl	80135c0 <rmw_get_zero_initialized_init_options>
 8013c3c:	46ee      	mov	lr, sp
 8013c3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013c42:	46a4      	mov	ip, r4
 8013c44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013c48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013c4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013c50:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013c54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013c58:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013c5c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013c60:	2300      	movs	r3, #0
 8013c62:	4618      	mov	r0, r3
 8013c64:	b00e      	add	sp, #56	@ 0x38
 8013c66:	bd10      	pop	{r4, pc}
 8013c68:	230b      	movs	r3, #11
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	b00e      	add	sp, #56	@ 0x38
 8013c6e:	bd10      	pop	{r4, pc}
 8013c70:	2301      	movs	r3, #1
 8013c72:	4618      	mov	r0, r3
 8013c74:	b00e      	add	sp, #56	@ 0x38
 8013c76:	bd10      	pop	{r4, pc}
 8013c78:	230c      	movs	r3, #12
 8013c7a:	e7f2      	b.n	8013c62 <rmw_init_options_fini+0x66>
 8013c7c:	230b      	movs	r3, #11
 8013c7e:	4618      	mov	r0, r3
 8013c80:	4770      	bx	lr
 8013c82:	bf00      	nop
 8013c84:	08019314 	.word	0x08019314
 8013c88:	2000dcd4 	.word	0x2000dcd4

08013c8c <rmw_init>:
 8013c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c90:	b083      	sub	sp, #12
 8013c92:	2800      	cmp	r0, #0
 8013c94:	f000 80d3 	beq.w	8013e3e <rmw_init+0x1b2>
 8013c98:	460e      	mov	r6, r1
 8013c9a:	2900      	cmp	r1, #0
 8013c9c:	f000 80cf 	beq.w	8013e3e <rmw_init+0x1b2>
 8013ca0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8013ca2:	4605      	mov	r5, r0
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	f000 80ca 	beq.w	8013e3e <rmw_init+0x1b2>
 8013caa:	4b78      	ldr	r3, [pc, #480]	@ (8013e8c <rmw_init+0x200>)
 8013cac:	6880      	ldr	r0, [r0, #8]
 8013cae:	681f      	ldr	r7, [r3, #0]
 8013cb0:	b128      	cbz	r0, 8013cbe <rmw_init+0x32>
 8013cb2:	4639      	mov	r1, r7
 8013cb4:	f7ec fa94 	bl	80001e0 <strcmp>
 8013cb8:	2800      	cmp	r0, #0
 8013cba:	f040 80ca 	bne.w	8013e52 <rmw_init+0x1c6>
 8013cbe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013cc2:	4c73      	ldr	r4, [pc, #460]	@ (8013e90 <rmw_init+0x204>)
 8013cc4:	4973      	ldr	r1, [pc, #460]	@ (8013e94 <rmw_init+0x208>)
 8013cc6:	4874      	ldr	r0, [pc, #464]	@ (8013e98 <rmw_init+0x20c>)
 8013cc8:	60b7      	str	r7, [r6, #8]
 8013cca:	e9c6 2300 	strd	r2, r3, [r6]
 8013cce:	68eb      	ldr	r3, [r5, #12]
 8013cd0:	64b3      	str	r3, [r6, #72]	@ 0x48
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	f7f9 f976 	bl	800cfc4 <rmw_uxrce_init_session_memory>
 8013cd8:	4620      	mov	r0, r4
 8013cda:	4970      	ldr	r1, [pc, #448]	@ (8013e9c <rmw_init+0x210>)
 8013cdc:	2204      	movs	r2, #4
 8013cde:	f7f9 f9b1 	bl	800d044 <rmw_uxrce_init_static_input_buffer_memory>
 8013ce2:	f04f 0800 	mov.w	r8, #0
 8013ce6:	486c      	ldr	r0, [pc, #432]	@ (8013e98 <rmw_init+0x20c>)
 8013ce8:	f884 800d 	strb.w	r8, [r4, #13]
 8013cec:	f7ff fe68 	bl	80139c0 <get_memory>
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	f000 80a9 	beq.w	8013e48 <rmw_init+0x1bc>
 8013cf6:	6884      	ldr	r4, [r0, #8]
 8013cf8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8013cfa:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8013cfc:	f890 c010 	ldrb.w	ip, [r0, #16]
 8013d00:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8013d04:	9101      	str	r1, [sp, #4]
 8013d06:	6a00      	ldr	r0, [r0, #32]
 8013d08:	9000      	str	r0, [sp, #0]
 8013d0a:	f104 0910 	add.w	r9, r4, #16
 8013d0e:	4661      	mov	r1, ip
 8013d10:	4648      	mov	r0, r9
 8013d12:	f001 f9bf 	bl	8015094 <uxr_set_custom_transport_callbacks>
 8013d16:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8013d1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013d1e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8013d22:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8013d26:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8013d2a:	495d      	ldr	r1, [pc, #372]	@ (8013ea0 <rmw_init+0x214>)
 8013d2c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8013d30:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8013d34:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8013d38:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8013d3c:	4859      	ldr	r0, [pc, #356]	@ (8013ea4 <rmw_init+0x218>)
 8013d3e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8013d42:	2201      	movs	r2, #1
 8013d44:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8013d46:	f7f9 f91d 	bl	800cf84 <rmw_uxrce_init_node_memory>
 8013d4a:	4957      	ldr	r1, [pc, #348]	@ (8013ea8 <rmw_init+0x21c>)
 8013d4c:	4857      	ldr	r0, [pc, #348]	@ (8013eac <rmw_init+0x220>)
 8013d4e:	2205      	movs	r2, #5
 8013d50:	f7f9 f8f8 	bl	800cf44 <rmw_uxrce_init_subscription_memory>
 8013d54:	4956      	ldr	r1, [pc, #344]	@ (8013eb0 <rmw_init+0x224>)
 8013d56:	4857      	ldr	r0, [pc, #348]	@ (8013eb4 <rmw_init+0x228>)
 8013d58:	220a      	movs	r2, #10
 8013d5a:	f7f9 f8d3 	bl	800cf04 <rmw_uxrce_init_publisher_memory>
 8013d5e:	4956      	ldr	r1, [pc, #344]	@ (8013eb8 <rmw_init+0x22c>)
 8013d60:	4856      	ldr	r0, [pc, #344]	@ (8013ebc <rmw_init+0x230>)
 8013d62:	2201      	movs	r2, #1
 8013d64:	f7f9 f88e 	bl	800ce84 <rmw_uxrce_init_service_memory>
 8013d68:	4955      	ldr	r1, [pc, #340]	@ (8013ec0 <rmw_init+0x234>)
 8013d6a:	4856      	ldr	r0, [pc, #344]	@ (8013ec4 <rmw_init+0x238>)
 8013d6c:	2201      	movs	r2, #1
 8013d6e:	f7f9 f8a9 	bl	800cec4 <rmw_uxrce_init_client_memory>
 8013d72:	4955      	ldr	r1, [pc, #340]	@ (8013ec8 <rmw_init+0x23c>)
 8013d74:	4855      	ldr	r0, [pc, #340]	@ (8013ecc <rmw_init+0x240>)
 8013d76:	220f      	movs	r2, #15
 8013d78:	f7f9 f944 	bl	800d004 <rmw_uxrce_init_topic_memory>
 8013d7c:	4954      	ldr	r1, [pc, #336]	@ (8013ed0 <rmw_init+0x244>)
 8013d7e:	4855      	ldr	r0, [pc, #340]	@ (8013ed4 <rmw_init+0x248>)
 8013d80:	2203      	movs	r2, #3
 8013d82:	f7f9 f97f 	bl	800d084 <rmw_uxrce_init_init_options_impl_memory>
 8013d86:	4954      	ldr	r1, [pc, #336]	@ (8013ed8 <rmw_init+0x24c>)
 8013d88:	4854      	ldr	r0, [pc, #336]	@ (8013edc <rmw_init+0x250>)
 8013d8a:	2204      	movs	r2, #4
 8013d8c:	f7f9 f99a 	bl	800d0c4 <rmw_uxrce_init_wait_set_memory>
 8013d90:	4953      	ldr	r1, [pc, #332]	@ (8013ee0 <rmw_init+0x254>)
 8013d92:	4854      	ldr	r0, [pc, #336]	@ (8013ee4 <rmw_init+0x258>)
 8013d94:	2204      	movs	r2, #4
 8013d96:	f7f9 f9b5 	bl	800d104 <rmw_uxrce_init_guard_condition_memory>
 8013d9a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8013d9c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8013d9e:	4642      	mov	r2, r8
 8013da0:	f000 fd9e 	bl	80148e0 <rmw_uxrce_transport_init>
 8013da4:	4607      	mov	r7, r0
 8013da6:	2800      	cmp	r0, #0
 8013da8:	d158      	bne.n	8013e5c <rmw_init+0x1d0>
 8013daa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8013dac:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8013db0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013db2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8013db6:	4628      	mov	r0, r5
 8013db8:	f7f9 ff52 	bl	800dc60 <uxr_init_session>
 8013dbc:	494a      	ldr	r1, [pc, #296]	@ (8013ee8 <rmw_init+0x25c>)
 8013dbe:	4622      	mov	r2, r4
 8013dc0:	4628      	mov	r0, r5
 8013dc2:	f7f9 ff71 	bl	800dca8 <uxr_set_topic_callback>
 8013dc6:	4949      	ldr	r1, [pc, #292]	@ (8013eec <rmw_init+0x260>)
 8013dc8:	463a      	mov	r2, r7
 8013dca:	4628      	mov	r0, r5
 8013dcc:	f7f9 ff68 	bl	800dca0 <uxr_set_status_callback>
 8013dd0:	4947      	ldr	r1, [pc, #284]	@ (8013ef0 <rmw_init+0x264>)
 8013dd2:	463a      	mov	r2, r7
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	f7f9 ff6b 	bl	800dcb0 <uxr_set_request_callback>
 8013dda:	4946      	ldr	r1, [pc, #280]	@ (8013ef4 <rmw_init+0x268>)
 8013ddc:	463a      	mov	r2, r7
 8013dde:	4628      	mov	r0, r5
 8013de0:	f7f9 ff6a 	bl	800dcb8 <uxr_set_reply_callback>
 8013de4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013de8:	2304      	movs	r3, #4
 8013dea:	0092      	lsls	r2, r2, #2
 8013dec:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8013df0:	4628      	mov	r0, r5
 8013df2:	f7f9 ff9f 	bl	800dd34 <uxr_create_input_reliable_stream>
 8013df6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013dfa:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8013dfe:	0092      	lsls	r2, r2, #2
 8013e00:	2304      	movs	r3, #4
 8013e02:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8013e06:	4628      	mov	r0, r5
 8013e08:	f7f9 ff6c 	bl	800dce4 <uxr_create_output_reliable_stream>
 8013e0c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8013e10:	4628      	mov	r0, r5
 8013e12:	f7f9 ff89 	bl	800dd28 <uxr_create_input_best_effort_stream>
 8013e16:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8013e1a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8013e1e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013e22:	3114      	adds	r1, #20
 8013e24:	4628      	mov	r0, r5
 8013e26:	f7f9 ff4b 	bl	800dcc0 <uxr_create_output_best_effort_stream>
 8013e2a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8013e2e:	4628      	mov	r0, r5
 8013e30:	f7fa fcd6 	bl	800e7e0 <uxr_create_session>
 8013e34:	b1f8      	cbz	r0, 8013e76 <rmw_init+0x1ea>
 8013e36:	4638      	mov	r0, r7
 8013e38:	b003      	add	sp, #12
 8013e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e3e:	270b      	movs	r7, #11
 8013e40:	4638      	mov	r0, r7
 8013e42:	b003      	add	sp, #12
 8013e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e48:	2701      	movs	r7, #1
 8013e4a:	4638      	mov	r0, r7
 8013e4c:	b003      	add	sp, #12
 8013e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e52:	270c      	movs	r7, #12
 8013e54:	4638      	mov	r0, r7
 8013e56:	b003      	add	sp, #12
 8013e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e5c:	4648      	mov	r0, r9
 8013e5e:	f001 f95b 	bl	8015118 <uxr_close_custom_transport>
 8013e62:	480d      	ldr	r0, [pc, #52]	@ (8013e98 <rmw_init+0x20c>)
 8013e64:	4621      	mov	r1, r4
 8013e66:	f7ff fdbb 	bl	80139e0 <put_memory>
 8013e6a:	4638      	mov	r0, r7
 8013e6c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8013e70:	b003      	add	sp, #12
 8013e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e76:	4648      	mov	r0, r9
 8013e78:	f001 f94e 	bl	8015118 <uxr_close_custom_transport>
 8013e7c:	4806      	ldr	r0, [pc, #24]	@ (8013e98 <rmw_init+0x20c>)
 8013e7e:	4621      	mov	r1, r4
 8013e80:	f7ff fdae 	bl	80139e0 <put_memory>
 8013e84:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8013e86:	2701      	movs	r7, #1
 8013e88:	e7d5      	b.n	8013e36 <rmw_init+0x1aa>
 8013e8a:	bf00      	nop
 8013e8c:	08019314 	.word	0x08019314
 8013e90:	2000dd24 	.word	0x2000dd24
 8013e94:	20009fd0 	.word	0x20009fd0
 8013e98:	2000dd14 	.word	0x2000dd14
 8013e9c:	2000b578 	.word	0x2000b578
 8013ea0:	200095f4 	.word	0x200095f4
 8013ea4:	2000dce4 	.word	0x2000dce4
 8013ea8:	2000d678 	.word	0x2000d678
 8013eac:	2000dd34 	.word	0x2000dd34
 8013eb0:	20009698 	.word	0x20009698
 8013eb4:	2000dcf4 	.word	0x2000dcf4
 8013eb8:	20009f08 	.word	0x20009f08
 8013ebc:	2000dd04 	.word	0x2000dd04
 8013ec0:	20009428 	.word	0x20009428
 8013ec4:	20009418 	.word	0x20009418
 8013ec8:	2000dab0 	.word	0x2000dab0
 8013ecc:	2000dd44 	.word	0x2000dd44
 8013ed0:	20009570 	.word	0x20009570
 8013ed4:	2000dcd4 	.word	0x2000dcd4
 8013ed8:	2000dc54 	.word	0x2000dc54
 8013edc:	2000dd54 	.word	0x2000dd54
 8013ee0:	200094f0 	.word	0x200094f0
 8013ee4:	2000dcc4 	.word	0x2000dcc4
 8013ee8:	08016e05 	.word	0x08016e05
 8013eec:	08016dfd 	.word	0x08016dfd
 8013ef0:	08016e9d 	.word	0x08016e9d
 8013ef4:	08016f39 	.word	0x08016f39

08013ef8 <rmw_context_fini>:
 8013ef8:	4b17      	ldr	r3, [pc, #92]	@ (8013f58 <rmw_context_fini+0x60>)
 8013efa:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8013efc:	b570      	push	{r4, r5, r6, lr}
 8013efe:	681c      	ldr	r4, [r3, #0]
 8013f00:	4605      	mov	r5, r0
 8013f02:	b334      	cbz	r4, 8013f52 <rmw_context_fini+0x5a>
 8013f04:	2600      	movs	r6, #0
 8013f06:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8013f0a:	6902      	ldr	r2, [r0, #16]
 8013f0c:	428a      	cmp	r2, r1
 8013f0e:	d018      	beq.n	8013f42 <rmw_context_fini+0x4a>
 8013f10:	2c00      	cmp	r4, #0
 8013f12:	d1f8      	bne.n	8013f06 <rmw_context_fini+0xe>
 8013f14:	b189      	cbz	r1, 8013f3a <rmw_context_fini+0x42>
 8013f16:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8013f1a:	789b      	ldrb	r3, [r3, #2]
 8013f1c:	2b01      	cmp	r3, #1
 8013f1e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8013f22:	bf14      	ite	ne
 8013f24:	210a      	movne	r1, #10
 8013f26:	2100      	moveq	r1, #0
 8013f28:	f7fa fc32 	bl	800e790 <uxr_delete_session_retries>
 8013f2c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013f2e:	f7f9 f909 	bl	800d144 <rmw_uxrce_fini_session_memory>
 8013f32:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013f34:	3010      	adds	r0, #16
 8013f36:	f001 f8ef 	bl	8015118 <uxr_close_custom_transport>
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8013f3e:	4630      	mov	r0, r6
 8013f40:	bd70      	pop	{r4, r5, r6, pc}
 8013f42:	3018      	adds	r0, #24
 8013f44:	f000 f90e 	bl	8014164 <rmw_destroy_node>
 8013f48:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8013f4a:	4606      	mov	r6, r0
 8013f4c:	2c00      	cmp	r4, #0
 8013f4e:	d1da      	bne.n	8013f06 <rmw_context_fini+0xe>
 8013f50:	e7e0      	b.n	8013f14 <rmw_context_fini+0x1c>
 8013f52:	4626      	mov	r6, r4
 8013f54:	e7de      	b.n	8013f14 <rmw_context_fini+0x1c>
 8013f56:	bf00      	nop
 8013f58:	2000dce4 	.word	0x2000dce4

08013f5c <create_topic>:
 8013f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f60:	4605      	mov	r5, r0
 8013f62:	b084      	sub	sp, #16
 8013f64:	4822      	ldr	r0, [pc, #136]	@ (8013ff0 <create_topic+0x94>)
 8013f66:	460f      	mov	r7, r1
 8013f68:	4616      	mov	r6, r2
 8013f6a:	f7ff fd29 	bl	80139c0 <get_memory>
 8013f6e:	4604      	mov	r4, r0
 8013f70:	2800      	cmp	r0, #0
 8013f72:	d039      	beq.n	8013fe8 <create_topic+0x8c>
 8013f74:	692b      	ldr	r3, [r5, #16]
 8013f76:	6884      	ldr	r4, [r0, #8]
 8013f78:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8013ff8 <create_topic+0x9c>
 8013f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013f80:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8013f84:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8013f88:	1c42      	adds	r2, r0, #1
 8013f8a:	2102      	movs	r1, #2
 8013f8c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8013f90:	f7f9 fda8 	bl	800dae4 <uxr_object_id>
 8013f94:	223c      	movs	r2, #60	@ 0x3c
 8013f96:	6120      	str	r0, [r4, #16]
 8013f98:	4641      	mov	r1, r8
 8013f9a:	4638      	mov	r0, r7
 8013f9c:	f7f9 fab0 	bl	800d500 <generate_topic_name>
 8013fa0:	b1f0      	cbz	r0, 8013fe0 <create_topic+0x84>
 8013fa2:	4f14      	ldr	r7, [pc, #80]	@ (8013ff4 <create_topic+0x98>)
 8013fa4:	4630      	mov	r0, r6
 8013fa6:	2264      	movs	r2, #100	@ 0x64
 8013fa8:	4639      	mov	r1, r7
 8013faa:	f7f9 fa79 	bl	800d4a0 <generate_type_name>
 8013fae:	b1b8      	cbz	r0, 8013fe0 <create_topic+0x84>
 8013fb0:	6928      	ldr	r0, [r5, #16]
 8013fb2:	2306      	movs	r3, #6
 8013fb4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013fb8:	f8cd 8000 	str.w	r8, [sp]
 8013fbc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8013fc0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013fc4:	6811      	ldr	r1, [r2, #0]
 8013fc6:	696b      	ldr	r3, [r5, #20]
 8013fc8:	6922      	ldr	r2, [r4, #16]
 8013fca:	f7f9 fc07 	bl	800d7dc <uxr_buffer_create_topic_bin>
 8013fce:	4602      	mov	r2, r0
 8013fd0:	6928      	ldr	r0, [r5, #16]
 8013fd2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013fd6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013fda:	f7f9 fa2b 	bl	800d434 <run_xrce_session>
 8013fde:	b918      	cbnz	r0, 8013fe8 <create_topic+0x8c>
 8013fe0:	4620      	mov	r0, r4
 8013fe2:	f7f9 f925 	bl	800d230 <rmw_uxrce_fini_topic_memory>
 8013fe6:	2400      	movs	r4, #0
 8013fe8:	4620      	mov	r0, r4
 8013fea:	b004      	add	sp, #16
 8013fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ff0:	2000dd44 	.word	0x2000dd44
 8013ff4:	2000de30 	.word	0x2000de30
 8013ff8:	2000ddf4 	.word	0x2000ddf4

08013ffc <destroy_topic>:
 8013ffc:	b538      	push	{r3, r4, r5, lr}
 8013ffe:	6985      	ldr	r5, [r0, #24]
 8014000:	b1d5      	cbz	r5, 8014038 <destroy_topic+0x3c>
 8014002:	4604      	mov	r4, r0
 8014004:	6928      	ldr	r0, [r5, #16]
 8014006:	6922      	ldr	r2, [r4, #16]
 8014008:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801400c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014010:	6819      	ldr	r1, [r3, #0]
 8014012:	f7f9 fb65 	bl	800d6e0 <uxr_buffer_delete_entity>
 8014016:	4602      	mov	r2, r0
 8014018:	6928      	ldr	r0, [r5, #16]
 801401a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801401e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014022:	f7f9 fa07 	bl	800d434 <run_xrce_session>
 8014026:	2800      	cmp	r0, #0
 8014028:	4620      	mov	r0, r4
 801402a:	bf14      	ite	ne
 801402c:	2400      	movne	r4, #0
 801402e:	2402      	moveq	r4, #2
 8014030:	f7f9 f8fe 	bl	800d230 <rmw_uxrce_fini_topic_memory>
 8014034:	4620      	mov	r0, r4
 8014036:	bd38      	pop	{r3, r4, r5, pc}
 8014038:	2401      	movs	r4, #1
 801403a:	4620      	mov	r0, r4
 801403c:	bd38      	pop	{r3, r4, r5, pc}
 801403e:	bf00      	nop

08014040 <create_node>:
 8014040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014044:	b083      	sub	sp, #12
 8014046:	2b00      	cmp	r3, #0
 8014048:	d05f      	beq.n	801410a <create_node+0xca>
 801404a:	4606      	mov	r6, r0
 801404c:	4835      	ldr	r0, [pc, #212]	@ (8014124 <create_node+0xe4>)
 801404e:	460f      	mov	r7, r1
 8014050:	4690      	mov	r8, r2
 8014052:	461d      	mov	r5, r3
 8014054:	f7ff fcb4 	bl	80139c0 <get_memory>
 8014058:	2800      	cmp	r0, #0
 801405a:	d056      	beq.n	801410a <create_node+0xca>
 801405c:	6884      	ldr	r4, [r0, #8]
 801405e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014060:	6123      	str	r3, [r4, #16]
 8014062:	f7ff fd15 	bl	8013a90 <rmw_get_implementation_identifier>
 8014066:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801406a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801406e:	f8c4 9020 	str.w	r9, [r4, #32]
 8014072:	4630      	mov	r0, r6
 8014074:	f7ec f8be 	bl	80001f4 <strlen>
 8014078:	1c42      	adds	r2, r0, #1
 801407a:	2a3c      	cmp	r2, #60	@ 0x3c
 801407c:	f104 0518 	add.w	r5, r4, #24
 8014080:	d840      	bhi.n	8014104 <create_node+0xc4>
 8014082:	4648      	mov	r0, r9
 8014084:	4631      	mov	r1, r6
 8014086:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801408a:	f003 fc7a 	bl	8017982 <memcpy>
 801408e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8014092:	4638      	mov	r0, r7
 8014094:	f7ec f8ae 	bl	80001f4 <strlen>
 8014098:	1c42      	adds	r2, r0, #1
 801409a:	2a3c      	cmp	r2, #60	@ 0x3c
 801409c:	d832      	bhi.n	8014104 <create_node+0xc4>
 801409e:	4639      	mov	r1, r7
 80140a0:	4648      	mov	r0, r9
 80140a2:	f003 fc6e 	bl	8017982 <memcpy>
 80140a6:	6923      	ldr	r3, [r4, #16]
 80140a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80140ac:	2101      	movs	r1, #1
 80140ae:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80140b2:	1842      	adds	r2, r0, r1
 80140b4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80140b8:	f7f9 fd14 	bl	800dae4 <uxr_object_id>
 80140bc:	6160      	str	r0, [r4, #20]
 80140be:	783b      	ldrb	r3, [r7, #0]
 80140c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80140c2:	d127      	bne.n	8014114 <create_node+0xd4>
 80140c4:	787b      	ldrb	r3, [r7, #1]
 80140c6:	bb2b      	cbnz	r3, 8014114 <create_node+0xd4>
 80140c8:	4a17      	ldr	r2, [pc, #92]	@ (8014128 <create_node+0xe8>)
 80140ca:	4818      	ldr	r0, [pc, #96]	@ (801412c <create_node+0xec>)
 80140cc:	4633      	mov	r3, r6
 80140ce:	213c      	movs	r1, #60	@ 0x3c
 80140d0:	f003 fab4 	bl	801763c <sniprintf>
 80140d4:	6920      	ldr	r0, [r4, #16]
 80140d6:	4915      	ldr	r1, [pc, #84]	@ (801412c <create_node+0xec>)
 80140d8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80140dc:	9100      	str	r1, [sp, #0]
 80140de:	2106      	movs	r1, #6
 80140e0:	9101      	str	r1, [sp, #4]
 80140e2:	6811      	ldr	r1, [r2, #0]
 80140e4:	6962      	ldr	r2, [r4, #20]
 80140e6:	fa1f f388 	uxth.w	r3, r8
 80140ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80140ee:	f7f9 fb43 	bl	800d778 <uxr_buffer_create_participant_bin>
 80140f2:	4602      	mov	r2, r0
 80140f4:	6920      	ldr	r0, [r4, #16]
 80140f6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80140fa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80140fe:	f7f9 f999 	bl	800d434 <run_xrce_session>
 8014102:	b918      	cbnz	r0, 801410c <create_node+0xcc>
 8014104:	4628      	mov	r0, r5
 8014106:	f7f9 f823 	bl	800d150 <rmw_uxrce_fini_node_memory>
 801410a:	2500      	movs	r5, #0
 801410c:	4628      	mov	r0, r5
 801410e:	b003      	add	sp, #12
 8014110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014114:	4a06      	ldr	r2, [pc, #24]	@ (8014130 <create_node+0xf0>)
 8014116:	9600      	str	r6, [sp, #0]
 8014118:	463b      	mov	r3, r7
 801411a:	213c      	movs	r1, #60	@ 0x3c
 801411c:	4803      	ldr	r0, [pc, #12]	@ (801412c <create_node+0xec>)
 801411e:	f003 fa8d 	bl	801763c <sniprintf>
 8014122:	e7d7      	b.n	80140d4 <create_node+0x94>
 8014124:	2000dce4 	.word	0x2000dce4
 8014128:	08018c00 	.word	0x08018c00
 801412c:	2000de94 	.word	0x2000de94
 8014130:	08018d84 	.word	0x08018d84

08014134 <rmw_create_node>:
 8014134:	b199      	cbz	r1, 801415e <rmw_create_node+0x2a>
 8014136:	780b      	ldrb	r3, [r1, #0]
 8014138:	468c      	mov	ip, r1
 801413a:	b183      	cbz	r3, 801415e <rmw_create_node+0x2a>
 801413c:	b410      	push	{r4}
 801413e:	4614      	mov	r4, r2
 8014140:	b14a      	cbz	r2, 8014156 <rmw_create_node+0x22>
 8014142:	7813      	ldrb	r3, [r2, #0]
 8014144:	b13b      	cbz	r3, 8014156 <rmw_create_node+0x22>
 8014146:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8014148:	4603      	mov	r3, r0
 801414a:	4621      	mov	r1, r4
 801414c:	4660      	mov	r0, ip
 801414e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014152:	f7ff bf75 	b.w	8014040 <create_node>
 8014156:	2000      	movs	r0, #0
 8014158:	f85d 4b04 	ldr.w	r4, [sp], #4
 801415c:	4770      	bx	lr
 801415e:	2000      	movs	r0, #0
 8014160:	4770      	bx	lr
 8014162:	bf00      	nop

08014164 <rmw_destroy_node>:
 8014164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014166:	b328      	cbz	r0, 80141b4 <rmw_destroy_node+0x50>
 8014168:	4607      	mov	r7, r0
 801416a:	6800      	ldr	r0, [r0, #0]
 801416c:	b120      	cbz	r0, 8014178 <rmw_destroy_node+0x14>
 801416e:	4b36      	ldr	r3, [pc, #216]	@ (8014248 <rmw_destroy_node+0xe4>)
 8014170:	6819      	ldr	r1, [r3, #0]
 8014172:	f7ec f835 	bl	80001e0 <strcmp>
 8014176:	b9e8      	cbnz	r0, 80141b4 <rmw_destroy_node+0x50>
 8014178:	687d      	ldr	r5, [r7, #4]
 801417a:	b1dd      	cbz	r5, 80141b4 <rmw_destroy_node+0x50>
 801417c:	4b33      	ldr	r3, [pc, #204]	@ (801424c <rmw_destroy_node+0xe8>)
 801417e:	681c      	ldr	r4, [r3, #0]
 8014180:	2c00      	cmp	r4, #0
 8014182:	d05f      	beq.n	8014244 <rmw_destroy_node+0xe0>
 8014184:	2600      	movs	r6, #0
 8014186:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801418a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801418e:	429d      	cmp	r5, r3
 8014190:	d013      	beq.n	80141ba <rmw_destroy_node+0x56>
 8014192:	2c00      	cmp	r4, #0
 8014194:	d1f7      	bne.n	8014186 <rmw_destroy_node+0x22>
 8014196:	4b2e      	ldr	r3, [pc, #184]	@ (8014250 <rmw_destroy_node+0xec>)
 8014198:	681c      	ldr	r4, [r3, #0]
 801419a:	b1c4      	cbz	r4, 80141ce <rmw_destroy_node+0x6a>
 801419c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80141a0:	6a0b      	ldr	r3, [r1, #32]
 80141a2:	429d      	cmp	r5, r3
 80141a4:	d1f9      	bne.n	801419a <rmw_destroy_node+0x36>
 80141a6:	317c      	adds	r1, #124	@ 0x7c
 80141a8:	4638      	mov	r0, r7
 80141aa:	f000 fae5 	bl	8014778 <rmw_destroy_subscription>
 80141ae:	2801      	cmp	r0, #1
 80141b0:	4606      	mov	r6, r0
 80141b2:	d1f2      	bne.n	801419a <rmw_destroy_node+0x36>
 80141b4:	2601      	movs	r6, #1
 80141b6:	4630      	mov	r0, r6
 80141b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141ba:	3184      	adds	r1, #132	@ 0x84
 80141bc:	4638      	mov	r0, r7
 80141be:	f7f8 fe0f 	bl	800cde0 <rmw_destroy_publisher>
 80141c2:	2801      	cmp	r0, #1
 80141c4:	4606      	mov	r6, r0
 80141c6:	d0f5      	beq.n	80141b4 <rmw_destroy_node+0x50>
 80141c8:	2c00      	cmp	r4, #0
 80141ca:	d1dc      	bne.n	8014186 <rmw_destroy_node+0x22>
 80141cc:	e7e3      	b.n	8014196 <rmw_destroy_node+0x32>
 80141ce:	4b21      	ldr	r3, [pc, #132]	@ (8014254 <rmw_destroy_node+0xf0>)
 80141d0:	681c      	ldr	r4, [r3, #0]
 80141d2:	b16c      	cbz	r4, 80141f0 <rmw_destroy_node+0x8c>
 80141d4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80141d8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80141da:	429d      	cmp	r5, r3
 80141dc:	d1f9      	bne.n	80141d2 <rmw_destroy_node+0x6e>
 80141de:	317c      	adds	r1, #124	@ 0x7c
 80141e0:	4638      	mov	r0, r7
 80141e2:	f000 f993 	bl	801450c <rmw_destroy_service>
 80141e6:	2801      	cmp	r0, #1
 80141e8:	4606      	mov	r6, r0
 80141ea:	d0e3      	beq.n	80141b4 <rmw_destroy_node+0x50>
 80141ec:	2c00      	cmp	r4, #0
 80141ee:	d1f1      	bne.n	80141d4 <rmw_destroy_node+0x70>
 80141f0:	4b19      	ldr	r3, [pc, #100]	@ (8014258 <rmw_destroy_node+0xf4>)
 80141f2:	681c      	ldr	r4, [r3, #0]
 80141f4:	b16c      	cbz	r4, 8014212 <rmw_destroy_node+0xae>
 80141f6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80141fa:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80141fc:	429d      	cmp	r5, r3
 80141fe:	d1f9      	bne.n	80141f4 <rmw_destroy_node+0x90>
 8014200:	317c      	adds	r1, #124	@ 0x7c
 8014202:	4638      	mov	r0, r7
 8014204:	f7ff fc00 	bl	8013a08 <rmw_destroy_client>
 8014208:	2801      	cmp	r0, #1
 801420a:	4606      	mov	r6, r0
 801420c:	d0d2      	beq.n	80141b4 <rmw_destroy_node+0x50>
 801420e:	2c00      	cmp	r4, #0
 8014210:	d1f1      	bne.n	80141f6 <rmw_destroy_node+0x92>
 8014212:	6928      	ldr	r0, [r5, #16]
 8014214:	696a      	ldr	r2, [r5, #20]
 8014216:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801421a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801421e:	6819      	ldr	r1, [r3, #0]
 8014220:	f7f9 fa5e 	bl	800d6e0 <uxr_buffer_delete_entity>
 8014224:	4602      	mov	r2, r0
 8014226:	6928      	ldr	r0, [r5, #16]
 8014228:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801422c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014230:	f7f9 f900 	bl	800d434 <run_xrce_session>
 8014234:	2800      	cmp	r0, #0
 8014236:	bf08      	it	eq
 8014238:	2602      	moveq	r6, #2
 801423a:	4638      	mov	r0, r7
 801423c:	f7f8 ff88 	bl	800d150 <rmw_uxrce_fini_node_memory>
 8014240:	4630      	mov	r0, r6
 8014242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014244:	4626      	mov	r6, r4
 8014246:	e7a6      	b.n	8014196 <rmw_destroy_node+0x32>
 8014248:	08019314 	.word	0x08019314
 801424c:	2000dcf4 	.word	0x2000dcf4
 8014250:	2000dd34 	.word	0x2000dd34
 8014254:	2000dd04 	.word	0x2000dd04
 8014258:	20009418 	.word	0x20009418

0801425c <rmw_node_get_graph_guard_condition>:
 801425c:	6843      	ldr	r3, [r0, #4]
 801425e:	6918      	ldr	r0, [r3, #16]
 8014260:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8014264:	4770      	bx	lr
 8014266:	bf00      	nop

08014268 <rmw_send_request>:
 8014268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801426c:	4604      	mov	r4, r0
 801426e:	6800      	ldr	r0, [r0, #0]
 8014270:	b08b      	sub	sp, #44	@ 0x2c
 8014272:	460e      	mov	r6, r1
 8014274:	4615      	mov	r5, r2
 8014276:	b128      	cbz	r0, 8014284 <rmw_send_request+0x1c>
 8014278:	4b21      	ldr	r3, [pc, #132]	@ (8014300 <rmw_send_request+0x98>)
 801427a:	6819      	ldr	r1, [r3, #0]
 801427c:	f7eb ffb0 	bl	80001e0 <strcmp>
 8014280:	2800      	cmp	r0, #0
 8014282:	d139      	bne.n	80142f8 <rmw_send_request+0x90>
 8014284:	6864      	ldr	r4, [r4, #4]
 8014286:	6963      	ldr	r3, [r4, #20]
 8014288:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801428c:	689b      	ldr	r3, [r3, #8]
 801428e:	4798      	blx	r3
 8014290:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8014294:	4630      	mov	r0, r6
 8014296:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801429a:	4798      	blx	r3
 801429c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80142a0:	9000      	str	r0, [sp, #0]
 80142a2:	6922      	ldr	r2, [r4, #16]
 80142a4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80142a6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80142aa:	ab02      	add	r3, sp, #8
 80142ac:	f7fa ff14 	bl	800f0d8 <uxr_prepare_output_stream>
 80142b0:	2700      	movs	r7, #0
 80142b2:	6028      	str	r0, [r5, #0]
 80142b4:	606f      	str	r7, [r5, #4]
 80142b6:	b198      	cbz	r0, 80142e0 <rmw_send_request+0x78>
 80142b8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80142bc:	a902      	add	r1, sp, #8
 80142be:	4630      	mov	r0, r6
 80142c0:	4798      	blx	r3
 80142c2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80142c6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80142ca:	2b01      	cmp	r3, #1
 80142cc:	d00c      	beq.n	80142e8 <rmw_send_request+0x80>
 80142ce:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80142d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80142d4:	f7fa f914 	bl	800e500 <uxr_run_session_until_confirm_delivery>
 80142d8:	4638      	mov	r0, r7
 80142da:	b00b      	add	sp, #44	@ 0x2c
 80142dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142e0:	2001      	movs	r0, #1
 80142e2:	b00b      	add	sp, #44	@ 0x2c
 80142e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80142ec:	f7f9 fd48 	bl	800dd80 <uxr_flash_output_streams>
 80142f0:	4638      	mov	r0, r7
 80142f2:	b00b      	add	sp, #44	@ 0x2c
 80142f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142f8:	200c      	movs	r0, #12
 80142fa:	b00b      	add	sp, #44	@ 0x2c
 80142fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014300:	08019314 	.word	0x08019314

08014304 <rmw_take_request>:
 8014304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014308:	4605      	mov	r5, r0
 801430a:	6800      	ldr	r0, [r0, #0]
 801430c:	b089      	sub	sp, #36	@ 0x24
 801430e:	460c      	mov	r4, r1
 8014310:	4690      	mov	r8, r2
 8014312:	461e      	mov	r6, r3
 8014314:	b128      	cbz	r0, 8014322 <rmw_take_request+0x1e>
 8014316:	4b28      	ldr	r3, [pc, #160]	@ (80143b8 <rmw_take_request+0xb4>)
 8014318:	6819      	ldr	r1, [r3, #0]
 801431a:	f7eb ff61 	bl	80001e0 <strcmp>
 801431e:	2800      	cmp	r0, #0
 8014320:	d146      	bne.n	80143b0 <rmw_take_request+0xac>
 8014322:	b10e      	cbz	r6, 8014328 <rmw_take_request+0x24>
 8014324:	2300      	movs	r3, #0
 8014326:	7033      	strb	r3, [r6, #0]
 8014328:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801432c:	f7f9 f804 	bl	800d338 <rmw_uxrce_clean_expired_static_input_buffer>
 8014330:	4648      	mov	r0, r9
 8014332:	f7f8 ffd9 	bl	800d2e8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014336:	4607      	mov	r7, r0
 8014338:	b3b0      	cbz	r0, 80143a8 <rmw_take_request+0xa4>
 801433a:	6885      	ldr	r5, [r0, #8]
 801433c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8014340:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8014344:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014348:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801434c:	7423      	strb	r3, [r4, #16]
 801434e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8014352:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8014356:	74e2      	strb	r2, [r4, #19]
 8014358:	f8a4 3011 	strh.w	r3, [r4, #17]
 801435c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8014360:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8014364:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8014368:	61e1      	str	r1, [r4, #28]
 801436a:	6162      	str	r2, [r4, #20]
 801436c:	61a3      	str	r3, [r4, #24]
 801436e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014372:	689b      	ldr	r3, [r3, #8]
 8014374:	4798      	blx	r3
 8014376:	6844      	ldr	r4, [r0, #4]
 8014378:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801437c:	f105 0110 	add.w	r1, r5, #16
 8014380:	4668      	mov	r0, sp
 8014382:	f7f7 fa65 	bl	800b850 <ucdr_init_buffer>
 8014386:	68e3      	ldr	r3, [r4, #12]
 8014388:	4641      	mov	r1, r8
 801438a:	4668      	mov	r0, sp
 801438c:	4798      	blx	r3
 801438e:	4639      	mov	r1, r7
 8014390:	4604      	mov	r4, r0
 8014392:	480a      	ldr	r0, [pc, #40]	@ (80143bc <rmw_take_request+0xb8>)
 8014394:	f7ff fb24 	bl	80139e0 <put_memory>
 8014398:	b106      	cbz	r6, 801439c <rmw_take_request+0x98>
 801439a:	7034      	strb	r4, [r6, #0]
 801439c:	f084 0001 	eor.w	r0, r4, #1
 80143a0:	b2c0      	uxtb	r0, r0
 80143a2:	b009      	add	sp, #36	@ 0x24
 80143a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143a8:	2001      	movs	r0, #1
 80143aa:	b009      	add	sp, #36	@ 0x24
 80143ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143b0:	200c      	movs	r0, #12
 80143b2:	b009      	add	sp, #36	@ 0x24
 80143b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143b8:	08019314 	.word	0x08019314
 80143bc:	2000dd24 	.word	0x2000dd24

080143c0 <rmw_send_response>:
 80143c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143c2:	4605      	mov	r5, r0
 80143c4:	6800      	ldr	r0, [r0, #0]
 80143c6:	b091      	sub	sp, #68	@ 0x44
 80143c8:	460c      	mov	r4, r1
 80143ca:	4616      	mov	r6, r2
 80143cc:	b128      	cbz	r0, 80143da <rmw_send_response+0x1a>
 80143ce:	4b29      	ldr	r3, [pc, #164]	@ (8014474 <rmw_send_response+0xb4>)
 80143d0:	6819      	ldr	r1, [r3, #0]
 80143d2:	f7eb ff05 	bl	80001e0 <strcmp>
 80143d6:	2800      	cmp	r0, #0
 80143d8:	d141      	bne.n	801445e <rmw_send_response+0x9e>
 80143da:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80143de:	9306      	str	r3, [sp, #24]
 80143e0:	4623      	mov	r3, r4
 80143e2:	9207      	str	r2, [sp, #28]
 80143e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143e8:	686d      	ldr	r5, [r5, #4]
 80143ea:	789b      	ldrb	r3, [r3, #2]
 80143ec:	68a1      	ldr	r1, [r4, #8]
 80143ee:	f88d 2017 	strb.w	r2, [sp, #23]
 80143f2:	f88d 3016 	strb.w	r3, [sp, #22]
 80143f6:	68e2      	ldr	r2, [r4, #12]
 80143f8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80143fc:	6860      	ldr	r0, [r4, #4]
 80143fe:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014402:	ab02      	add	r3, sp, #8
 8014404:	c307      	stmia	r3!, {r0, r1, r2}
 8014406:	696b      	ldr	r3, [r5, #20]
 8014408:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801440a:	68db      	ldr	r3, [r3, #12]
 801440c:	4798      	blx	r3
 801440e:	6844      	ldr	r4, [r0, #4]
 8014410:	4630      	mov	r0, r6
 8014412:	6923      	ldr	r3, [r4, #16]
 8014414:	4798      	blx	r3
 8014416:	f100 0318 	add.w	r3, r0, #24
 801441a:	6938      	ldr	r0, [r7, #16]
 801441c:	9300      	str	r3, [sp, #0]
 801441e:	692a      	ldr	r2, [r5, #16]
 8014420:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8014422:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014426:	ab08      	add	r3, sp, #32
 8014428:	f7fa fe56 	bl	800f0d8 <uxr_prepare_output_stream>
 801442c:	b910      	cbnz	r0, 8014434 <rmw_send_response+0x74>
 801442e:	2001      	movs	r0, #1
 8014430:	b011      	add	sp, #68	@ 0x44
 8014432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014434:	a902      	add	r1, sp, #8
 8014436:	a808      	add	r0, sp, #32
 8014438:	f7fb ff86 	bl	8010348 <uxr_serialize_SampleIdentity>
 801443c:	68a3      	ldr	r3, [r4, #8]
 801443e:	a908      	add	r1, sp, #32
 8014440:	4630      	mov	r0, r6
 8014442:	4798      	blx	r3
 8014444:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8014448:	6938      	ldr	r0, [r7, #16]
 801444a:	2b01      	cmp	r3, #1
 801444c:	d00a      	beq.n	8014464 <rmw_send_response+0xa4>
 801444e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8014450:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014454:	f7fa f854 	bl	800e500 <uxr_run_session_until_confirm_delivery>
 8014458:	2000      	movs	r0, #0
 801445a:	b011      	add	sp, #68	@ 0x44
 801445c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801445e:	200c      	movs	r0, #12
 8014460:	b011      	add	sp, #68	@ 0x44
 8014462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014464:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014468:	f7f9 fc8a 	bl	800dd80 <uxr_flash_output_streams>
 801446c:	2000      	movs	r0, #0
 801446e:	b011      	add	sp, #68	@ 0x44
 8014470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014472:	bf00      	nop
 8014474:	08019314 	.word	0x08019314

08014478 <rmw_take_response>:
 8014478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801447c:	4604      	mov	r4, r0
 801447e:	6800      	ldr	r0, [r0, #0]
 8014480:	b088      	sub	sp, #32
 8014482:	4688      	mov	r8, r1
 8014484:	4617      	mov	r7, r2
 8014486:	461d      	mov	r5, r3
 8014488:	b120      	cbz	r0, 8014494 <rmw_take_response+0x1c>
 801448a:	4b1e      	ldr	r3, [pc, #120]	@ (8014504 <rmw_take_response+0x8c>)
 801448c:	6819      	ldr	r1, [r3, #0]
 801448e:	f7eb fea7 	bl	80001e0 <strcmp>
 8014492:	bb78      	cbnz	r0, 80144f4 <rmw_take_response+0x7c>
 8014494:	b10d      	cbz	r5, 801449a <rmw_take_response+0x22>
 8014496:	2300      	movs	r3, #0
 8014498:	702b      	strb	r3, [r5, #0]
 801449a:	6864      	ldr	r4, [r4, #4]
 801449c:	f7f8 ff4c 	bl	800d338 <rmw_uxrce_clean_expired_static_input_buffer>
 80144a0:	4620      	mov	r0, r4
 80144a2:	f7f8 ff21 	bl	800d2e8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80144a6:	4606      	mov	r6, r0
 80144a8:	b340      	cbz	r0, 80144fc <rmw_take_response+0x84>
 80144aa:	6963      	ldr	r3, [r4, #20]
 80144ac:	6884      	ldr	r4, [r0, #8]
 80144ae:	68db      	ldr	r3, [r3, #12]
 80144b0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80144b4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80144b8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80144bc:	4798      	blx	r3
 80144be:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80144c2:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80144c6:	f104 0110 	add.w	r1, r4, #16
 80144ca:	4668      	mov	r0, sp
 80144cc:	f7f7 f9c0 	bl	800b850 <ucdr_init_buffer>
 80144d0:	4639      	mov	r1, r7
 80144d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80144d6:	4668      	mov	r0, sp
 80144d8:	4798      	blx	r3
 80144da:	4631      	mov	r1, r6
 80144dc:	4604      	mov	r4, r0
 80144de:	480a      	ldr	r0, [pc, #40]	@ (8014508 <rmw_take_response+0x90>)
 80144e0:	f7ff fa7e 	bl	80139e0 <put_memory>
 80144e4:	b105      	cbz	r5, 80144e8 <rmw_take_response+0x70>
 80144e6:	702c      	strb	r4, [r5, #0]
 80144e8:	f084 0001 	eor.w	r0, r4, #1
 80144ec:	b2c0      	uxtb	r0, r0
 80144ee:	b008      	add	sp, #32
 80144f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144f4:	200c      	movs	r0, #12
 80144f6:	b008      	add	sp, #32
 80144f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144fc:	2001      	movs	r0, #1
 80144fe:	b008      	add	sp, #32
 8014500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014504:	08019314 	.word	0x08019314
 8014508:	2000dd24 	.word	0x2000dd24

0801450c <rmw_destroy_service>:
 801450c:	b570      	push	{r4, r5, r6, lr}
 801450e:	b128      	cbz	r0, 801451c <rmw_destroy_service+0x10>
 8014510:	4604      	mov	r4, r0
 8014512:	6800      	ldr	r0, [r0, #0]
 8014514:	460d      	mov	r5, r1
 8014516:	f7f9 f80d 	bl	800d534 <is_uxrce_rmw_identifier_valid>
 801451a:	b910      	cbnz	r0, 8014522 <rmw_destroy_service+0x16>
 801451c:	2401      	movs	r4, #1
 801451e:	4620      	mov	r0, r4
 8014520:	bd70      	pop	{r4, r5, r6, pc}
 8014522:	6863      	ldr	r3, [r4, #4]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d0f9      	beq.n	801451c <rmw_destroy_service+0x10>
 8014528:	2d00      	cmp	r5, #0
 801452a:	d0f7      	beq.n	801451c <rmw_destroy_service+0x10>
 801452c:	6828      	ldr	r0, [r5, #0]
 801452e:	f7f9 f801 	bl	800d534 <is_uxrce_rmw_identifier_valid>
 8014532:	2800      	cmp	r0, #0
 8014534:	d0f2      	beq.n	801451c <rmw_destroy_service+0x10>
 8014536:	686e      	ldr	r6, [r5, #4]
 8014538:	2e00      	cmp	r6, #0
 801453a:	d0ef      	beq.n	801451c <rmw_destroy_service+0x10>
 801453c:	6864      	ldr	r4, [r4, #4]
 801453e:	6932      	ldr	r2, [r6, #16]
 8014540:	6920      	ldr	r0, [r4, #16]
 8014542:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014546:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801454a:	6819      	ldr	r1, [r3, #0]
 801454c:	f001 fb6a 	bl	8015c24 <uxr_buffer_cancel_data>
 8014550:	4602      	mov	r2, r0
 8014552:	6920      	ldr	r0, [r4, #16]
 8014554:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014558:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801455c:	f7f8 ff6a 	bl	800d434 <run_xrce_session>
 8014560:	6920      	ldr	r0, [r4, #16]
 8014562:	6932      	ldr	r2, [r6, #16]
 8014564:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014568:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801456c:	6819      	ldr	r1, [r3, #0]
 801456e:	f7f9 f8b7 	bl	800d6e0 <uxr_buffer_delete_entity>
 8014572:	4602      	mov	r2, r0
 8014574:	6920      	ldr	r0, [r4, #16]
 8014576:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801457a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801457e:	f7f8 ff59 	bl	800d434 <run_xrce_session>
 8014582:	2800      	cmp	r0, #0
 8014584:	4628      	mov	r0, r5
 8014586:	bf14      	ite	ne
 8014588:	2400      	movne	r4, #0
 801458a:	2402      	moveq	r4, #2
 801458c:	f7f8 fe24 	bl	800d1d8 <rmw_uxrce_fini_service_memory>
 8014590:	e7c5      	b.n	801451e <rmw_destroy_service+0x12>
 8014592:	bf00      	nop

08014594 <rmw_create_subscription>:
 8014594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014598:	b08d      	sub	sp, #52	@ 0x34
 801459a:	2800      	cmp	r0, #0
 801459c:	f000 80d1 	beq.w	8014742 <rmw_create_subscription+0x1ae>
 80145a0:	460e      	mov	r6, r1
 80145a2:	2900      	cmp	r1, #0
 80145a4:	f000 80cd 	beq.w	8014742 <rmw_create_subscription+0x1ae>
 80145a8:	4604      	mov	r4, r0
 80145aa:	6800      	ldr	r0, [r0, #0]
 80145ac:	4615      	mov	r5, r2
 80145ae:	4698      	mov	r8, r3
 80145b0:	f7f8 ffc0 	bl	800d534 <is_uxrce_rmw_identifier_valid>
 80145b4:	2800      	cmp	r0, #0
 80145b6:	f000 80c4 	beq.w	8014742 <rmw_create_subscription+0x1ae>
 80145ba:	2d00      	cmp	r5, #0
 80145bc:	f000 80c1 	beq.w	8014742 <rmw_create_subscription+0x1ae>
 80145c0:	782b      	ldrb	r3, [r5, #0]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	f000 80bd 	beq.w	8014742 <rmw_create_subscription+0x1ae>
 80145c8:	f1b8 0f00 	cmp.w	r8, #0
 80145cc:	f000 80b9 	beq.w	8014742 <rmw_create_subscription+0x1ae>
 80145d0:	485e      	ldr	r0, [pc, #376]	@ (801474c <rmw_create_subscription+0x1b8>)
 80145d2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80145d6:	f7ff f9f3 	bl	80139c0 <get_memory>
 80145da:	4604      	mov	r4, r0
 80145dc:	2800      	cmp	r0, #0
 80145de:	f000 80b1 	beq.w	8014744 <rmw_create_subscription+0x1b0>
 80145e2:	6887      	ldr	r7, [r0, #8]
 80145e4:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 80145e8:	f7ff fa52 	bl	8013a90 <rmw_get_implementation_identifier>
 80145ec:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 80145f0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80145f2:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 80145f6:	4628      	mov	r0, r5
 80145f8:	f7eb fdfc 	bl	80001f4 <strlen>
 80145fc:	3001      	adds	r0, #1
 80145fe:	283c      	cmp	r0, #60	@ 0x3c
 8014600:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8014604:	f200 8096 	bhi.w	8014734 <rmw_create_subscription+0x1a0>
 8014608:	4a51      	ldr	r2, [pc, #324]	@ (8014750 <rmw_create_subscription+0x1bc>)
 801460a:	462b      	mov	r3, r5
 801460c:	213c      	movs	r1, #60	@ 0x3c
 801460e:	4650      	mov	r0, sl
 8014610:	f003 f814 	bl	801763c <sniprintf>
 8014614:	4641      	mov	r1, r8
 8014616:	f8c7 9020 	str.w	r9, [r7, #32]
 801461a:	2250      	movs	r2, #80	@ 0x50
 801461c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8014620:	f003 f9af 	bl	8017982 <memcpy>
 8014624:	494b      	ldr	r1, [pc, #300]	@ (8014754 <rmw_create_subscription+0x1c0>)
 8014626:	4630      	mov	r0, r6
 8014628:	f7f8 ff92 	bl	800d550 <get_message_typesupport_handle>
 801462c:	2800      	cmp	r0, #0
 801462e:	f000 8081 	beq.w	8014734 <rmw_create_subscription+0x1a0>
 8014632:	6842      	ldr	r2, [r0, #4]
 8014634:	61ba      	str	r2, [r7, #24]
 8014636:	2a00      	cmp	r2, #0
 8014638:	d07c      	beq.n	8014734 <rmw_create_subscription+0x1a0>
 801463a:	4629      	mov	r1, r5
 801463c:	4643      	mov	r3, r8
 801463e:	4648      	mov	r0, r9
 8014640:	f7ff fc8c 	bl	8013f5c <create_topic>
 8014644:	61f8      	str	r0, [r7, #28]
 8014646:	2800      	cmp	r0, #0
 8014648:	d078      	beq.n	801473c <rmw_create_subscription+0x1a8>
 801464a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801464e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014652:	2104      	movs	r1, #4
 8014654:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8014658:	1c42      	adds	r2, r0, #1
 801465a:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801465e:	f7f9 fa41 	bl	800dae4 <uxr_object_id>
 8014662:	6138      	str	r0, [r7, #16]
 8014664:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014668:	2506      	movs	r5, #6
 801466a:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801466e:	9500      	str	r5, [sp, #0]
 8014670:	6819      	ldr	r1, [r3, #0]
 8014672:	693a      	ldr	r2, [r7, #16]
 8014674:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014678:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801467c:	f7f9 f914 	bl	800d8a8 <uxr_buffer_create_subscriber_bin>
 8014680:	4602      	mov	r2, r0
 8014682:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014686:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801468a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801468e:	f7f8 fed1 	bl	800d434 <run_xrce_session>
 8014692:	2800      	cmp	r0, #0
 8014694:	d04e      	beq.n	8014734 <rmw_create_subscription+0x1a0>
 8014696:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801469a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801469e:	4629      	mov	r1, r5
 80146a0:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 80146a4:	1c42      	adds	r2, r0, #1
 80146a6:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 80146aa:	f7f9 fa1b 	bl	800dae4 <uxr_object_id>
 80146ae:	ae08      	add	r6, sp, #32
 80146b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80146b4:	69fb      	ldr	r3, [r7, #28]
 80146b6:	6178      	str	r0, [r7, #20]
 80146b8:	4641      	mov	r1, r8
 80146ba:	4630      	mov	r0, r6
 80146bc:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 80146c0:	9305      	str	r3, [sp, #20]
 80146c2:	f7f8 fed3 	bl	800d46c <convert_qos_profile>
 80146c6:	9503      	str	r5, [sp, #12]
 80146c8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80146cc:	9b05      	ldr	r3, [sp, #20]
 80146ce:	9001      	str	r0, [sp, #4]
 80146d0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80146d4:	691b      	ldr	r3, [r3, #16]
 80146d6:	9300      	str	r3, [sp, #0]
 80146d8:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 80146dc:	f8db 1000 	ldr.w	r1, [fp]
 80146e0:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80146e4:	f7f9 f986 	bl	800d9f4 <uxr_buffer_create_datareader_bin>
 80146e8:	4602      	mov	r2, r0
 80146ea:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80146ee:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80146f2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80146f6:	f7f8 fe9d 	bl	800d434 <run_xrce_session>
 80146fa:	b1d8      	cbz	r0, 8014734 <rmw_create_subscription+0x1a0>
 80146fc:	f898 3008 	ldrb.w	r3, [r8, #8]
 8014700:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014704:	2b02      	cmp	r3, #2
 8014706:	bf0c      	ite	eq
 8014708:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801470c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8014710:	9307      	str	r3, [sp, #28]
 8014712:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8014716:	2200      	movs	r2, #0
 8014718:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 801471c:	ab0a      	add	r3, sp, #40	@ 0x28
 801471e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014722:	9300      	str	r3, [sp, #0]
 8014724:	697a      	ldr	r2, [r7, #20]
 8014726:	9b07      	ldr	r3, [sp, #28]
 8014728:	6809      	ldr	r1, [r1, #0]
 801472a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801472e:	f001 fa3f 	bl	8015bb0 <uxr_buffer_request_data>
 8014732:	e007      	b.n	8014744 <rmw_create_subscription+0x1b0>
 8014734:	69f8      	ldr	r0, [r7, #28]
 8014736:	b108      	cbz	r0, 801473c <rmw_create_subscription+0x1a8>
 8014738:	f7f8 fd7a 	bl	800d230 <rmw_uxrce_fini_topic_memory>
 801473c:	4620      	mov	r0, r4
 801473e:	f7f8 fd35 	bl	800d1ac <rmw_uxrce_fini_subscription_memory>
 8014742:	2400      	movs	r4, #0
 8014744:	4620      	mov	r0, r4
 8014746:	b00d      	add	sp, #52	@ 0x34
 8014748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801474c:	2000dd34 	.word	0x2000dd34
 8014750:	08018c00 	.word	0x08018c00
 8014754:	0801898c 	.word	0x0801898c

08014758 <rmw_subscription_get_actual_qos>:
 8014758:	b150      	cbz	r0, 8014770 <rmw_subscription_get_actual_qos+0x18>
 801475a:	b508      	push	{r3, lr}
 801475c:	460b      	mov	r3, r1
 801475e:	b149      	cbz	r1, 8014774 <rmw_subscription_get_actual_qos+0x1c>
 8014760:	6841      	ldr	r1, [r0, #4]
 8014762:	2250      	movs	r2, #80	@ 0x50
 8014764:	3128      	adds	r1, #40	@ 0x28
 8014766:	4618      	mov	r0, r3
 8014768:	f003 f90b 	bl	8017982 <memcpy>
 801476c:	2000      	movs	r0, #0
 801476e:	bd08      	pop	{r3, pc}
 8014770:	200b      	movs	r0, #11
 8014772:	4770      	bx	lr
 8014774:	200b      	movs	r0, #11
 8014776:	bd08      	pop	{r3, pc}

08014778 <rmw_destroy_subscription>:
 8014778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801477a:	b128      	cbz	r0, 8014788 <rmw_destroy_subscription+0x10>
 801477c:	4604      	mov	r4, r0
 801477e:	6800      	ldr	r0, [r0, #0]
 8014780:	460d      	mov	r5, r1
 8014782:	f7f8 fed7 	bl	800d534 <is_uxrce_rmw_identifier_valid>
 8014786:	b910      	cbnz	r0, 801478e <rmw_destroy_subscription+0x16>
 8014788:	2401      	movs	r4, #1
 801478a:	4620      	mov	r0, r4
 801478c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801478e:	6863      	ldr	r3, [r4, #4]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d0f9      	beq.n	8014788 <rmw_destroy_subscription+0x10>
 8014794:	2d00      	cmp	r5, #0
 8014796:	d0f7      	beq.n	8014788 <rmw_destroy_subscription+0x10>
 8014798:	6828      	ldr	r0, [r5, #0]
 801479a:	f7f8 fecb 	bl	800d534 <is_uxrce_rmw_identifier_valid>
 801479e:	2800      	cmp	r0, #0
 80147a0:	d0f2      	beq.n	8014788 <rmw_destroy_subscription+0x10>
 80147a2:	686c      	ldr	r4, [r5, #4]
 80147a4:	2c00      	cmp	r4, #0
 80147a6:	d0ef      	beq.n	8014788 <rmw_destroy_subscription+0x10>
 80147a8:	6a26      	ldr	r6, [r4, #32]
 80147aa:	6962      	ldr	r2, [r4, #20]
 80147ac:	6930      	ldr	r0, [r6, #16]
 80147ae:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80147b2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80147b6:	6819      	ldr	r1, [r3, #0]
 80147b8:	f001 fa34 	bl	8015c24 <uxr_buffer_cancel_data>
 80147bc:	4602      	mov	r2, r0
 80147be:	6930      	ldr	r0, [r6, #16]
 80147c0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80147c4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80147c8:	f7f8 fe34 	bl	800d434 <run_xrce_session>
 80147cc:	69e0      	ldr	r0, [r4, #28]
 80147ce:	f7ff fc15 	bl	8013ffc <destroy_topic>
 80147d2:	6a23      	ldr	r3, [r4, #32]
 80147d4:	6962      	ldr	r2, [r4, #20]
 80147d6:	6918      	ldr	r0, [r3, #16]
 80147d8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80147dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80147e0:	6819      	ldr	r1, [r3, #0]
 80147e2:	f7f8 ff7d 	bl	800d6e0 <uxr_buffer_delete_entity>
 80147e6:	6a23      	ldr	r3, [r4, #32]
 80147e8:	6922      	ldr	r2, [r4, #16]
 80147ea:	691b      	ldr	r3, [r3, #16]
 80147ec:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80147f0:	4604      	mov	r4, r0
 80147f2:	6809      	ldr	r1, [r1, #0]
 80147f4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80147f8:	f7f8 ff72 	bl	800d6e0 <uxr_buffer_delete_entity>
 80147fc:	6937      	ldr	r7, [r6, #16]
 80147fe:	4622      	mov	r2, r4
 8014800:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8014804:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8014808:	4604      	mov	r4, r0
 801480a:	4638      	mov	r0, r7
 801480c:	f7f8 fe12 	bl	800d434 <run_xrce_session>
 8014810:	6936      	ldr	r6, [r6, #16]
 8014812:	4622      	mov	r2, r4
 8014814:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8014818:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 801481c:	4604      	mov	r4, r0
 801481e:	4630      	mov	r0, r6
 8014820:	f7f8 fe08 	bl	800d434 <run_xrce_session>
 8014824:	b12c      	cbz	r4, 8014832 <rmw_destroy_subscription+0xba>
 8014826:	b120      	cbz	r0, 8014832 <rmw_destroy_subscription+0xba>
 8014828:	2400      	movs	r4, #0
 801482a:	4628      	mov	r0, r5
 801482c:	f7f8 fcbe 	bl	800d1ac <rmw_uxrce_fini_subscription_memory>
 8014830:	e7ab      	b.n	801478a <rmw_destroy_subscription+0x12>
 8014832:	2402      	movs	r4, #2
 8014834:	e7f9      	b.n	801482a <rmw_destroy_subscription+0xb2>
 8014836:	bf00      	nop

08014838 <rmw_take_with_info>:
 8014838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801483a:	4604      	mov	r4, r0
 801483c:	6800      	ldr	r0, [r0, #0]
 801483e:	b089      	sub	sp, #36	@ 0x24
 8014840:	460f      	mov	r7, r1
 8014842:	4615      	mov	r5, r2
 8014844:	b128      	cbz	r0, 8014852 <rmw_take_with_info+0x1a>
 8014846:	4b24      	ldr	r3, [pc, #144]	@ (80148d8 <rmw_take_with_info+0xa0>)
 8014848:	6819      	ldr	r1, [r3, #0]
 801484a:	f7eb fcc9 	bl	80001e0 <strcmp>
 801484e:	2800      	cmp	r0, #0
 8014850:	d13e      	bne.n	80148d0 <rmw_take_with_info+0x98>
 8014852:	b305      	cbz	r5, 8014896 <rmw_take_with_info+0x5e>
 8014854:	6864      	ldr	r4, [r4, #4]
 8014856:	2300      	movs	r3, #0
 8014858:	702b      	strb	r3, [r5, #0]
 801485a:	f7f8 fd6d 	bl	800d338 <rmw_uxrce_clean_expired_static_input_buffer>
 801485e:	4620      	mov	r0, r4
 8014860:	f7f8 fd42 	bl	800d2e8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014864:	4606      	mov	r6, r0
 8014866:	b1f0      	cbz	r0, 80148a6 <rmw_take_with_info+0x6e>
 8014868:	6881      	ldr	r1, [r0, #8]
 801486a:	4668      	mov	r0, sp
 801486c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014870:	3110      	adds	r1, #16
 8014872:	f7f6 ffed 	bl	800b850 <ucdr_init_buffer>
 8014876:	69a3      	ldr	r3, [r4, #24]
 8014878:	4639      	mov	r1, r7
 801487a:	68db      	ldr	r3, [r3, #12]
 801487c:	4668      	mov	r0, sp
 801487e:	4798      	blx	r3
 8014880:	4631      	mov	r1, r6
 8014882:	4604      	mov	r4, r0
 8014884:	4815      	ldr	r0, [pc, #84]	@ (80148dc <rmw_take_with_info+0xa4>)
 8014886:	f7ff f8ab 	bl	80139e0 <put_memory>
 801488a:	702c      	strb	r4, [r5, #0]
 801488c:	f084 0001 	eor.w	r0, r4, #1
 8014890:	b2c0      	uxtb	r0, r0
 8014892:	b009      	add	sp, #36	@ 0x24
 8014894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014896:	6864      	ldr	r4, [r4, #4]
 8014898:	f7f8 fd4e 	bl	800d338 <rmw_uxrce_clean_expired_static_input_buffer>
 801489c:	4620      	mov	r0, r4
 801489e:	f7f8 fd23 	bl	800d2e8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80148a2:	4605      	mov	r5, r0
 80148a4:	b910      	cbnz	r0, 80148ac <rmw_take_with_info+0x74>
 80148a6:	2001      	movs	r0, #1
 80148a8:	b009      	add	sp, #36	@ 0x24
 80148aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148ac:	68a9      	ldr	r1, [r5, #8]
 80148ae:	4668      	mov	r0, sp
 80148b0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80148b4:	3110      	adds	r1, #16
 80148b6:	f7f6 ffcb 	bl	800b850 <ucdr_init_buffer>
 80148ba:	69a3      	ldr	r3, [r4, #24]
 80148bc:	4639      	mov	r1, r7
 80148be:	68db      	ldr	r3, [r3, #12]
 80148c0:	4668      	mov	r0, sp
 80148c2:	4798      	blx	r3
 80148c4:	4629      	mov	r1, r5
 80148c6:	4604      	mov	r4, r0
 80148c8:	4804      	ldr	r0, [pc, #16]	@ (80148dc <rmw_take_with_info+0xa4>)
 80148ca:	f7ff f889 	bl	80139e0 <put_memory>
 80148ce:	e7dd      	b.n	801488c <rmw_take_with_info+0x54>
 80148d0:	200c      	movs	r0, #12
 80148d2:	b009      	add	sp, #36	@ 0x24
 80148d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148d6:	bf00      	nop
 80148d8:	08019314 	.word	0x08019314
 80148dc:	2000dd24 	.word	0x2000dd24

080148e0 <rmw_uxrce_transport_init>:
 80148e0:	b508      	push	{r3, lr}
 80148e2:	b108      	cbz	r0, 80148e8 <rmw_uxrce_transport_init+0x8>
 80148e4:	f100 0210 	add.w	r2, r0, #16
 80148e8:	b139      	cbz	r1, 80148fa <rmw_uxrce_transport_init+0x1a>
 80148ea:	6949      	ldr	r1, [r1, #20]
 80148ec:	4610      	mov	r0, r2
 80148ee:	f000 fbdf 	bl	80150b0 <uxr_init_custom_transport>
 80148f2:	f080 0001 	eor.w	r0, r0, #1
 80148f6:	b2c0      	uxtb	r0, r0
 80148f8:	bd08      	pop	{r3, pc}
 80148fa:	4b04      	ldr	r3, [pc, #16]	@ (801490c <rmw_uxrce_transport_init+0x2c>)
 80148fc:	4610      	mov	r0, r2
 80148fe:	6859      	ldr	r1, [r3, #4]
 8014900:	f000 fbd6 	bl	80150b0 <uxr_init_custom_transport>
 8014904:	f080 0001 	eor.w	r0, r0, #1
 8014908:	b2c0      	uxtb	r0, r0
 801490a:	bd08      	pop	{r3, pc}
 801490c:	200093fc 	.word	0x200093fc

08014910 <rmw_wait>:
 8014910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014914:	b089      	sub	sp, #36	@ 0x24
 8014916:	4605      	mov	r5, r0
 8014918:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801491a:	460e      	mov	r6, r1
 801491c:	4698      	mov	r8, r3
 801491e:	4691      	mov	r9, r2
 8014920:	2a00      	cmp	r2, #0
 8014922:	f000 810a 	beq.w	8014b3a <rmw_wait+0x22a>
 8014926:	b16c      	cbz	r4, 8014944 <rmw_wait+0x34>
 8014928:	4bae      	ldr	r3, [pc, #696]	@ (8014be4 <rmw_wait+0x2d4>)
 801492a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801492c:	af04      	add	r7, sp, #16
 801492e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8014932:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014936:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801493a:	f7fe fe75 	bl	8013628 <rmw_time_equal>
 801493e:	2800      	cmp	r0, #0
 8014940:	f000 8127 	beq.w	8014b92 <rmw_wait+0x282>
 8014944:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014948:	f7f8 fcf6 	bl	800d338 <rmw_uxrce_clean_expired_static_input_buffer>
 801494c:	4ba6      	ldr	r3, [pc, #664]	@ (8014be8 <rmw_wait+0x2d8>)
 801494e:	681c      	ldr	r4, [r3, #0]
 8014950:	b14c      	cbz	r4, 8014966 <rmw_wait+0x56>
 8014952:	4623      	mov	r3, r4
 8014954:	2100      	movs	r1, #0
 8014956:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801495a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801495e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8014962:	2b00      	cmp	r3, #0
 8014964:	d1f7      	bne.n	8014956 <rmw_wait+0x46>
 8014966:	f1b9 0f00 	cmp.w	r9, #0
 801496a:	d011      	beq.n	8014990 <rmw_wait+0x80>
 801496c:	f8d9 1000 	ldr.w	r1, [r9]
 8014970:	b171      	cbz	r1, 8014990 <rmw_wait+0x80>
 8014972:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8014976:	2300      	movs	r3, #0
 8014978:	2001      	movs	r0, #1
 801497a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801497e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014980:	6912      	ldr	r2, [r2, #16]
 8014982:	3301      	adds	r3, #1
 8014984:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014988:	4299      	cmp	r1, r3
 801498a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801498e:	d1f4      	bne.n	801497a <rmw_wait+0x6a>
 8014990:	f1b8 0f00 	cmp.w	r8, #0
 8014994:	d011      	beq.n	80149ba <rmw_wait+0xaa>
 8014996:	f8d8 1000 	ldr.w	r1, [r8]
 801499a:	b171      	cbz	r1, 80149ba <rmw_wait+0xaa>
 801499c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80149a0:	2300      	movs	r3, #0
 80149a2:	2001      	movs	r0, #1
 80149a4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80149a8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80149aa:	6912      	ldr	r2, [r2, #16]
 80149ac:	3301      	adds	r3, #1
 80149ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80149b2:	4299      	cmp	r1, r3
 80149b4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80149b8:	d1f4      	bne.n	80149a4 <rmw_wait+0x94>
 80149ba:	b185      	cbz	r5, 80149de <rmw_wait+0xce>
 80149bc:	6829      	ldr	r1, [r5, #0]
 80149be:	b171      	cbz	r1, 80149de <rmw_wait+0xce>
 80149c0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80149c4:	2300      	movs	r3, #0
 80149c6:	2001      	movs	r0, #1
 80149c8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80149cc:	6a12      	ldr	r2, [r2, #32]
 80149ce:	6912      	ldr	r2, [r2, #16]
 80149d0:	3301      	adds	r3, #1
 80149d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80149d6:	4299      	cmp	r1, r3
 80149d8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80149dc:	d1f4      	bne.n	80149c8 <rmw_wait+0xb8>
 80149de:	b34c      	cbz	r4, 8014a34 <rmw_wait+0x124>
 80149e0:	4622      	mov	r2, r4
 80149e2:	2300      	movs	r3, #0
 80149e4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80149e8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80149ec:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80149f0:	440b      	add	r3, r1
 80149f2:	b2db      	uxtb	r3, r3
 80149f4:	2a00      	cmp	r2, #0
 80149f6:	d1f5      	bne.n	80149e4 <rmw_wait+0xd4>
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	f000 8084 	beq.w	8014b06 <rmw_wait+0x1f6>
 80149fe:	1c7a      	adds	r2, r7, #1
 8014a00:	d00d      	beq.n	8014a1e <rmw_wait+0x10e>
 8014a02:	ee07 7a90 	vmov	s15, r7
 8014a06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014a0a:	ee07 3a90 	vmov	s15, r3
 8014a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014a16:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8014a1a:	ee17 7a90 	vmov	r7, s15
 8014a1e:	68a0      	ldr	r0, [r4, #8]
 8014a20:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8014a24:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	f040 8090 	bne.w	8014b4e <rmw_wait+0x23e>
 8014a2e:	6864      	ldr	r4, [r4, #4]
 8014a30:	2c00      	cmp	r4, #0
 8014a32:	d1f4      	bne.n	8014a1e <rmw_wait+0x10e>
 8014a34:	f1b9 0f00 	cmp.w	r9, #0
 8014a38:	f000 80bc 	beq.w	8014bb4 <rmw_wait+0x2a4>
 8014a3c:	f8d9 7000 	ldr.w	r7, [r9]
 8014a40:	2f00      	cmp	r7, #0
 8014a42:	f000 808e 	beq.w	8014b62 <rmw_wait+0x252>
 8014a46:	2400      	movs	r4, #0
 8014a48:	4627      	mov	r7, r4
 8014a4a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014a4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014a52:	f7f8 fc49 	bl	800d2e8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014a56:	2800      	cmp	r0, #0
 8014a58:	d05f      	beq.n	8014b1a <rmw_wait+0x20a>
 8014a5a:	f8d9 3000 	ldr.w	r3, [r9]
 8014a5e:	3401      	adds	r4, #1
 8014a60:	42a3      	cmp	r3, r4
 8014a62:	f04f 0701 	mov.w	r7, #1
 8014a66:	d8f0      	bhi.n	8014a4a <rmw_wait+0x13a>
 8014a68:	f1b8 0f00 	cmp.w	r8, #0
 8014a6c:	d012      	beq.n	8014a94 <rmw_wait+0x184>
 8014a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8014a72:	b17b      	cbz	r3, 8014a94 <rmw_wait+0x184>
 8014a74:	2400      	movs	r4, #0
 8014a76:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014a7a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014a7e:	f7f8 fc33 	bl	800d2e8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014a82:	2800      	cmp	r0, #0
 8014a84:	d051      	beq.n	8014b2a <rmw_wait+0x21a>
 8014a86:	f8d8 3000 	ldr.w	r3, [r8]
 8014a8a:	3401      	adds	r4, #1
 8014a8c:	42a3      	cmp	r3, r4
 8014a8e:	f04f 0701 	mov.w	r7, #1
 8014a92:	d8f0      	bhi.n	8014a76 <rmw_wait+0x166>
 8014a94:	b1dd      	cbz	r5, 8014ace <rmw_wait+0x1be>
 8014a96:	682b      	ldr	r3, [r5, #0]
 8014a98:	b1cb      	cbz	r3, 8014ace <rmw_wait+0x1be>
 8014a9a:	2400      	movs	r4, #0
 8014a9c:	686b      	ldr	r3, [r5, #4]
 8014a9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014aa2:	f7f8 fc21 	bl	800d2e8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014aa6:	b158      	cbz	r0, 8014ac0 <rmw_wait+0x1b0>
 8014aa8:	682b      	ldr	r3, [r5, #0]
 8014aaa:	3401      	adds	r4, #1
 8014aac:	42a3      	cmp	r3, r4
 8014aae:	d969      	bls.n	8014b84 <rmw_wait+0x274>
 8014ab0:	686b      	ldr	r3, [r5, #4]
 8014ab2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014ab6:	2701      	movs	r7, #1
 8014ab8:	f7f8 fc16 	bl	800d2e8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014abc:	2800      	cmp	r0, #0
 8014abe:	d1f3      	bne.n	8014aa8 <rmw_wait+0x198>
 8014ac0:	e9d5 3200 	ldrd	r3, r2, [r5]
 8014ac4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014ac8:	3401      	adds	r4, #1
 8014aca:	42a3      	cmp	r3, r4
 8014acc:	d8e6      	bhi.n	8014a9c <rmw_wait+0x18c>
 8014ace:	b1a6      	cbz	r6, 8014afa <rmw_wait+0x1ea>
 8014ad0:	6834      	ldr	r4, [r6, #0]
 8014ad2:	b194      	cbz	r4, 8014afa <rmw_wait+0x1ea>
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	461d      	mov	r5, r3
 8014ad8:	e004      	b.n	8014ae4 <rmw_wait+0x1d4>
 8014ada:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8014ade:	3301      	adds	r3, #1
 8014ae0:	42a3      	cmp	r3, r4
 8014ae2:	d00a      	beq.n	8014afa <rmw_wait+0x1ea>
 8014ae4:	6870      	ldr	r0, [r6, #4]
 8014ae6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8014aea:	7c0a      	ldrb	r2, [r1, #16]
 8014aec:	2a00      	cmp	r2, #0
 8014aee:	d0f4      	beq.n	8014ada <rmw_wait+0x1ca>
 8014af0:	3301      	adds	r3, #1
 8014af2:	42a3      	cmp	r3, r4
 8014af4:	740d      	strb	r5, [r1, #16]
 8014af6:	4617      	mov	r7, r2
 8014af8:	d1f4      	bne.n	8014ae4 <rmw_wait+0x1d4>
 8014afa:	2f00      	cmp	r7, #0
 8014afc:	d03e      	beq.n	8014b7c <rmw_wait+0x26c>
 8014afe:	2000      	movs	r0, #0
 8014b00:	b009      	add	sp, #36	@ 0x24
 8014b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b06:	68a0      	ldr	r0, [r4, #8]
 8014b08:	2100      	movs	r1, #0
 8014b0a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014b0e:	f7f9 fcbd 	bl	800e48c <uxr_run_session_timeout>
 8014b12:	6864      	ldr	r4, [r4, #4]
 8014b14:	2c00      	cmp	r4, #0
 8014b16:	d1f6      	bne.n	8014b06 <rmw_wait+0x1f6>
 8014b18:	e78c      	b.n	8014a34 <rmw_wait+0x124>
 8014b1a:	e9d9 3200 	ldrd	r3, r2, [r9]
 8014b1e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014b22:	3401      	adds	r4, #1
 8014b24:	42a3      	cmp	r3, r4
 8014b26:	d890      	bhi.n	8014a4a <rmw_wait+0x13a>
 8014b28:	e79e      	b.n	8014a68 <rmw_wait+0x158>
 8014b2a:	e9d8 3200 	ldrd	r3, r2, [r8]
 8014b2e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014b32:	3401      	adds	r4, #1
 8014b34:	429c      	cmp	r4, r3
 8014b36:	d39e      	bcc.n	8014a76 <rmw_wait+0x166>
 8014b38:	e7ac      	b.n	8014a94 <rmw_wait+0x184>
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	f47f aef3 	bne.w	8014926 <rmw_wait+0x16>
 8014b40:	2800      	cmp	r0, #0
 8014b42:	f47f aef0 	bne.w	8014926 <rmw_wait+0x16>
 8014b46:	2900      	cmp	r1, #0
 8014b48:	f47f aeed 	bne.w	8014926 <rmw_wait+0x16>
 8014b4c:	e7d7      	b.n	8014afe <rmw_wait+0x1ee>
 8014b4e:	4639      	mov	r1, r7
 8014b50:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014b54:	f7f9 fcb4 	bl	800e4c0 <uxr_run_session_until_data>
 8014b58:	6864      	ldr	r4, [r4, #4]
 8014b5a:	2c00      	cmp	r4, #0
 8014b5c:	f47f af5f 	bne.w	8014a1e <rmw_wait+0x10e>
 8014b60:	e768      	b.n	8014a34 <rmw_wait+0x124>
 8014b62:	f1b8 0f00 	cmp.w	r8, #0
 8014b66:	d032      	beq.n	8014bce <rmw_wait+0x2be>
 8014b68:	f8d8 3000 	ldr.w	r3, [r8]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d181      	bne.n	8014a74 <rmw_wait+0x164>
 8014b70:	461f      	mov	r7, r3
 8014b72:	2d00      	cmp	r5, #0
 8014b74:	d18f      	bne.n	8014a96 <rmw_wait+0x186>
 8014b76:	462f      	mov	r7, r5
 8014b78:	2e00      	cmp	r6, #0
 8014b7a:	d1a9      	bne.n	8014ad0 <rmw_wait+0x1c0>
 8014b7c:	2002      	movs	r0, #2
 8014b7e:	b009      	add	sp, #36	@ 0x24
 8014b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b84:	2e00      	cmp	r6, #0
 8014b86:	d0ba      	beq.n	8014afe <rmw_wait+0x1ee>
 8014b88:	6834      	ldr	r4, [r6, #0]
 8014b8a:	2701      	movs	r7, #1
 8014b8c:	2c00      	cmp	r4, #0
 8014b8e:	d1a1      	bne.n	8014ad4 <rmw_wait+0x1c4>
 8014b90:	e7b5      	b.n	8014afe <rmw_wait+0x1ee>
 8014b92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014b96:	f7fe fd9b 	bl	80136d0 <rmw_time_total_nsec>
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	4a13      	ldr	r2, [pc, #76]	@ (8014bec <rmw_wait+0x2dc>)
 8014b9e:	f7ec f875 	bl	8000c8c <__aeabi_uldivmod>
 8014ba2:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8014ba6:	f171 0300 	sbcs.w	r3, r1, #0
 8014baa:	4607      	mov	r7, r0
 8014bac:	bfa8      	it	ge
 8014bae:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8014bb2:	e6c9      	b.n	8014948 <rmw_wait+0x38>
 8014bb4:	f1b8 0f00 	cmp.w	r8, #0
 8014bb8:	d009      	beq.n	8014bce <rmw_wait+0x2be>
 8014bba:	f8d8 3000 	ldr.w	r3, [r8]
 8014bbe:	464f      	mov	r7, r9
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	f47f af57 	bne.w	8014a74 <rmw_wait+0x164>
 8014bc6:	2d00      	cmp	r5, #0
 8014bc8:	f47f af65 	bne.w	8014a96 <rmw_wait+0x186>
 8014bcc:	e7d3      	b.n	8014b76 <rmw_wait+0x266>
 8014bce:	b17d      	cbz	r5, 8014bf0 <rmw_wait+0x2e0>
 8014bd0:	682b      	ldr	r3, [r5, #0]
 8014bd2:	4647      	mov	r7, r8
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	f47f af60 	bne.w	8014a9a <rmw_wait+0x18a>
 8014bda:	2e00      	cmp	r6, #0
 8014bdc:	f47f af78 	bne.w	8014ad0 <rmw_wait+0x1c0>
 8014be0:	e7cc      	b.n	8014b7c <rmw_wait+0x26c>
 8014be2:	bf00      	nop
 8014be4:	08018808 	.word	0x08018808
 8014be8:	2000dd14 	.word	0x2000dd14
 8014bec:	000f4240 	.word	0x000f4240
 8014bf0:	2e00      	cmp	r6, #0
 8014bf2:	d0c3      	beq.n	8014b7c <rmw_wait+0x26c>
 8014bf4:	6834      	ldr	r4, [r6, #0]
 8014bf6:	462f      	mov	r7, r5
 8014bf8:	2c00      	cmp	r4, #0
 8014bfa:	f47f af6b 	bne.w	8014ad4 <rmw_wait+0x1c4>
 8014bfe:	e7bd      	b.n	8014b7c <rmw_wait+0x26c>

08014c00 <rmw_create_wait_set>:
 8014c00:	b508      	push	{r3, lr}
 8014c02:	4803      	ldr	r0, [pc, #12]	@ (8014c10 <rmw_create_wait_set+0x10>)
 8014c04:	f7fe fedc 	bl	80139c0 <get_memory>
 8014c08:	b108      	cbz	r0, 8014c0e <rmw_create_wait_set+0xe>
 8014c0a:	6880      	ldr	r0, [r0, #8]
 8014c0c:	3010      	adds	r0, #16
 8014c0e:	bd08      	pop	{r3, pc}
 8014c10:	2000dd54 	.word	0x2000dd54

08014c14 <rmw_destroy_wait_set>:
 8014c14:	b508      	push	{r3, lr}
 8014c16:	4b08      	ldr	r3, [pc, #32]	@ (8014c38 <rmw_destroy_wait_set+0x24>)
 8014c18:	6819      	ldr	r1, [r3, #0]
 8014c1a:	b911      	cbnz	r1, 8014c22 <rmw_destroy_wait_set+0xe>
 8014c1c:	e00a      	b.n	8014c34 <rmw_destroy_wait_set+0x20>
 8014c1e:	6849      	ldr	r1, [r1, #4]
 8014c20:	b141      	cbz	r1, 8014c34 <rmw_destroy_wait_set+0x20>
 8014c22:	688b      	ldr	r3, [r1, #8]
 8014c24:	3310      	adds	r3, #16
 8014c26:	4298      	cmp	r0, r3
 8014c28:	d1f9      	bne.n	8014c1e <rmw_destroy_wait_set+0xa>
 8014c2a:	4803      	ldr	r0, [pc, #12]	@ (8014c38 <rmw_destroy_wait_set+0x24>)
 8014c2c:	f7fe fed8 	bl	80139e0 <put_memory>
 8014c30:	2000      	movs	r0, #0
 8014c32:	bd08      	pop	{r3, pc}
 8014c34:	2001      	movs	r0, #1
 8014c36:	bd08      	pop	{r3, pc}
 8014c38:	2000dd54 	.word	0x2000dd54

08014c3c <rmw_uros_epoch_nanos>:
 8014c3c:	4b05      	ldr	r3, [pc, #20]	@ (8014c54 <rmw_uros_epoch_nanos+0x18>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	b123      	cbz	r3, 8014c4c <rmw_uros_epoch_nanos+0x10>
 8014c42:	6898      	ldr	r0, [r3, #8]
 8014c44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014c48:	f7f9 b890 	b.w	800dd6c <uxr_epoch_nanos>
 8014c4c:	2000      	movs	r0, #0
 8014c4e:	2100      	movs	r1, #0
 8014c50:	4770      	bx	lr
 8014c52:	bf00      	nop
 8014c54:	2000dd14 	.word	0x2000dd14

08014c58 <std_msgs__msg__Int16__init>:
 8014c58:	3800      	subs	r0, #0
 8014c5a:	bf18      	it	ne
 8014c5c:	2001      	movne	r0, #1
 8014c5e:	4770      	bx	lr

08014c60 <std_msgs__msg__Int16__fini>:
 8014c60:	4770      	bx	lr
 8014c62:	bf00      	nop

08014c64 <ucdr_serialize_endian_array_char>:
 8014c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c68:	4619      	mov	r1, r3
 8014c6a:	461f      	mov	r7, r3
 8014c6c:	4605      	mov	r5, r0
 8014c6e:	4690      	mov	r8, r2
 8014c70:	f7f6 fd9a 	bl	800b7a8 <ucdr_check_buffer_available_for>
 8014c74:	b9e0      	cbnz	r0, 8014cb0 <ucdr_serialize_endian_array_char+0x4c>
 8014c76:	463e      	mov	r6, r7
 8014c78:	e009      	b.n	8014c8e <ucdr_serialize_endian_array_char+0x2a>
 8014c7a:	68a8      	ldr	r0, [r5, #8]
 8014c7c:	f002 fe81 	bl	8017982 <memcpy>
 8014c80:	68ab      	ldr	r3, [r5, #8]
 8014c82:	6928      	ldr	r0, [r5, #16]
 8014c84:	4423      	add	r3, r4
 8014c86:	4420      	add	r0, r4
 8014c88:	1b36      	subs	r6, r6, r4
 8014c8a:	60ab      	str	r3, [r5, #8]
 8014c8c:	6128      	str	r0, [r5, #16]
 8014c8e:	4631      	mov	r1, r6
 8014c90:	2201      	movs	r2, #1
 8014c92:	4628      	mov	r0, r5
 8014c94:	f7f6 fe10 	bl	800b8b8 <ucdr_check_final_buffer_behavior_array>
 8014c98:	1bb9      	subs	r1, r7, r6
 8014c9a:	4441      	add	r1, r8
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	4602      	mov	r2, r0
 8014ca0:	2800      	cmp	r0, #0
 8014ca2:	d1ea      	bne.n	8014c7a <ucdr_serialize_endian_array_char+0x16>
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	7da8      	ldrb	r0, [r5, #22]
 8014ca8:	756b      	strb	r3, [r5, #21]
 8014caa:	4058      	eors	r0, r3
 8014cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cb0:	463a      	mov	r2, r7
 8014cb2:	68a8      	ldr	r0, [r5, #8]
 8014cb4:	4641      	mov	r1, r8
 8014cb6:	f002 fe64 	bl	8017982 <memcpy>
 8014cba:	68aa      	ldr	r2, [r5, #8]
 8014cbc:	692b      	ldr	r3, [r5, #16]
 8014cbe:	443a      	add	r2, r7
 8014cc0:	443b      	add	r3, r7
 8014cc2:	60aa      	str	r2, [r5, #8]
 8014cc4:	612b      	str	r3, [r5, #16]
 8014cc6:	e7ed      	b.n	8014ca4 <ucdr_serialize_endian_array_char+0x40>

08014cc8 <ucdr_deserialize_endian_array_char>:
 8014cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ccc:	4619      	mov	r1, r3
 8014cce:	461f      	mov	r7, r3
 8014cd0:	4605      	mov	r5, r0
 8014cd2:	4690      	mov	r8, r2
 8014cd4:	f7f6 fd68 	bl	800b7a8 <ucdr_check_buffer_available_for>
 8014cd8:	b9e0      	cbnz	r0, 8014d14 <ucdr_deserialize_endian_array_char+0x4c>
 8014cda:	463e      	mov	r6, r7
 8014cdc:	e009      	b.n	8014cf2 <ucdr_deserialize_endian_array_char+0x2a>
 8014cde:	68a9      	ldr	r1, [r5, #8]
 8014ce0:	f002 fe4f 	bl	8017982 <memcpy>
 8014ce4:	68ab      	ldr	r3, [r5, #8]
 8014ce6:	6928      	ldr	r0, [r5, #16]
 8014ce8:	4423      	add	r3, r4
 8014cea:	4420      	add	r0, r4
 8014cec:	1b36      	subs	r6, r6, r4
 8014cee:	60ab      	str	r3, [r5, #8]
 8014cf0:	6128      	str	r0, [r5, #16]
 8014cf2:	2201      	movs	r2, #1
 8014cf4:	4631      	mov	r1, r6
 8014cf6:	4628      	mov	r0, r5
 8014cf8:	f7f6 fdde 	bl	800b8b8 <ucdr_check_final_buffer_behavior_array>
 8014cfc:	4604      	mov	r4, r0
 8014cfe:	1bb8      	subs	r0, r7, r6
 8014d00:	4440      	add	r0, r8
 8014d02:	4622      	mov	r2, r4
 8014d04:	2c00      	cmp	r4, #0
 8014d06:	d1ea      	bne.n	8014cde <ucdr_deserialize_endian_array_char+0x16>
 8014d08:	2301      	movs	r3, #1
 8014d0a:	7da8      	ldrb	r0, [r5, #22]
 8014d0c:	756b      	strb	r3, [r5, #21]
 8014d0e:	4058      	eors	r0, r3
 8014d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d14:	463a      	mov	r2, r7
 8014d16:	68a9      	ldr	r1, [r5, #8]
 8014d18:	4640      	mov	r0, r8
 8014d1a:	f002 fe32 	bl	8017982 <memcpy>
 8014d1e:	68aa      	ldr	r2, [r5, #8]
 8014d20:	692b      	ldr	r3, [r5, #16]
 8014d22:	443a      	add	r2, r7
 8014d24:	443b      	add	r3, r7
 8014d26:	60aa      	str	r2, [r5, #8]
 8014d28:	612b      	str	r3, [r5, #16]
 8014d2a:	e7ed      	b.n	8014d08 <ucdr_deserialize_endian_array_char+0x40>

08014d2c <ucdr_serialize_array_uint8_t>:
 8014d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d30:	4688      	mov	r8, r1
 8014d32:	4611      	mov	r1, r2
 8014d34:	4617      	mov	r7, r2
 8014d36:	4605      	mov	r5, r0
 8014d38:	f7f6 fd36 	bl	800b7a8 <ucdr_check_buffer_available_for>
 8014d3c:	b9e0      	cbnz	r0, 8014d78 <ucdr_serialize_array_uint8_t+0x4c>
 8014d3e:	463e      	mov	r6, r7
 8014d40:	e009      	b.n	8014d56 <ucdr_serialize_array_uint8_t+0x2a>
 8014d42:	68a8      	ldr	r0, [r5, #8]
 8014d44:	f002 fe1d 	bl	8017982 <memcpy>
 8014d48:	68aa      	ldr	r2, [r5, #8]
 8014d4a:	692b      	ldr	r3, [r5, #16]
 8014d4c:	4422      	add	r2, r4
 8014d4e:	4423      	add	r3, r4
 8014d50:	1b36      	subs	r6, r6, r4
 8014d52:	60aa      	str	r2, [r5, #8]
 8014d54:	612b      	str	r3, [r5, #16]
 8014d56:	4631      	mov	r1, r6
 8014d58:	2201      	movs	r2, #1
 8014d5a:	4628      	mov	r0, r5
 8014d5c:	f7f6 fdac 	bl	800b8b8 <ucdr_check_final_buffer_behavior_array>
 8014d60:	1bb9      	subs	r1, r7, r6
 8014d62:	4441      	add	r1, r8
 8014d64:	4604      	mov	r4, r0
 8014d66:	4602      	mov	r2, r0
 8014d68:	2800      	cmp	r0, #0
 8014d6a:	d1ea      	bne.n	8014d42 <ucdr_serialize_array_uint8_t+0x16>
 8014d6c:	2301      	movs	r3, #1
 8014d6e:	7da8      	ldrb	r0, [r5, #22]
 8014d70:	756b      	strb	r3, [r5, #21]
 8014d72:	4058      	eors	r0, r3
 8014d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d78:	463a      	mov	r2, r7
 8014d7a:	68a8      	ldr	r0, [r5, #8]
 8014d7c:	4641      	mov	r1, r8
 8014d7e:	f002 fe00 	bl	8017982 <memcpy>
 8014d82:	68aa      	ldr	r2, [r5, #8]
 8014d84:	692b      	ldr	r3, [r5, #16]
 8014d86:	443a      	add	r2, r7
 8014d88:	443b      	add	r3, r7
 8014d8a:	60aa      	str	r2, [r5, #8]
 8014d8c:	612b      	str	r3, [r5, #16]
 8014d8e:	e7ed      	b.n	8014d6c <ucdr_serialize_array_uint8_t+0x40>

08014d90 <ucdr_serialize_endian_array_uint8_t>:
 8014d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d94:	4619      	mov	r1, r3
 8014d96:	461f      	mov	r7, r3
 8014d98:	4605      	mov	r5, r0
 8014d9a:	4690      	mov	r8, r2
 8014d9c:	f7f6 fd04 	bl	800b7a8 <ucdr_check_buffer_available_for>
 8014da0:	b9e0      	cbnz	r0, 8014ddc <ucdr_serialize_endian_array_uint8_t+0x4c>
 8014da2:	463e      	mov	r6, r7
 8014da4:	e009      	b.n	8014dba <ucdr_serialize_endian_array_uint8_t+0x2a>
 8014da6:	68a8      	ldr	r0, [r5, #8]
 8014da8:	f002 fdeb 	bl	8017982 <memcpy>
 8014dac:	68ab      	ldr	r3, [r5, #8]
 8014dae:	6928      	ldr	r0, [r5, #16]
 8014db0:	4423      	add	r3, r4
 8014db2:	4420      	add	r0, r4
 8014db4:	1b36      	subs	r6, r6, r4
 8014db6:	60ab      	str	r3, [r5, #8]
 8014db8:	6128      	str	r0, [r5, #16]
 8014dba:	4631      	mov	r1, r6
 8014dbc:	2201      	movs	r2, #1
 8014dbe:	4628      	mov	r0, r5
 8014dc0:	f7f6 fd7a 	bl	800b8b8 <ucdr_check_final_buffer_behavior_array>
 8014dc4:	1bb9      	subs	r1, r7, r6
 8014dc6:	4441      	add	r1, r8
 8014dc8:	4604      	mov	r4, r0
 8014dca:	4602      	mov	r2, r0
 8014dcc:	2800      	cmp	r0, #0
 8014dce:	d1ea      	bne.n	8014da6 <ucdr_serialize_endian_array_uint8_t+0x16>
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	7da8      	ldrb	r0, [r5, #22]
 8014dd4:	756b      	strb	r3, [r5, #21]
 8014dd6:	4058      	eors	r0, r3
 8014dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ddc:	463a      	mov	r2, r7
 8014dde:	68a8      	ldr	r0, [r5, #8]
 8014de0:	4641      	mov	r1, r8
 8014de2:	f002 fdce 	bl	8017982 <memcpy>
 8014de6:	68aa      	ldr	r2, [r5, #8]
 8014de8:	692b      	ldr	r3, [r5, #16]
 8014dea:	443a      	add	r2, r7
 8014dec:	443b      	add	r3, r7
 8014dee:	60aa      	str	r2, [r5, #8]
 8014df0:	612b      	str	r3, [r5, #16]
 8014df2:	e7ed      	b.n	8014dd0 <ucdr_serialize_endian_array_uint8_t+0x40>

08014df4 <ucdr_deserialize_array_uint8_t>:
 8014df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014df8:	4688      	mov	r8, r1
 8014dfa:	4611      	mov	r1, r2
 8014dfc:	4617      	mov	r7, r2
 8014dfe:	4605      	mov	r5, r0
 8014e00:	f7f6 fcd2 	bl	800b7a8 <ucdr_check_buffer_available_for>
 8014e04:	b9e0      	cbnz	r0, 8014e40 <ucdr_deserialize_array_uint8_t+0x4c>
 8014e06:	463e      	mov	r6, r7
 8014e08:	e009      	b.n	8014e1e <ucdr_deserialize_array_uint8_t+0x2a>
 8014e0a:	68a9      	ldr	r1, [r5, #8]
 8014e0c:	f002 fdb9 	bl	8017982 <memcpy>
 8014e10:	68aa      	ldr	r2, [r5, #8]
 8014e12:	692b      	ldr	r3, [r5, #16]
 8014e14:	4422      	add	r2, r4
 8014e16:	4423      	add	r3, r4
 8014e18:	1b36      	subs	r6, r6, r4
 8014e1a:	60aa      	str	r2, [r5, #8]
 8014e1c:	612b      	str	r3, [r5, #16]
 8014e1e:	2201      	movs	r2, #1
 8014e20:	4631      	mov	r1, r6
 8014e22:	4628      	mov	r0, r5
 8014e24:	f7f6 fd48 	bl	800b8b8 <ucdr_check_final_buffer_behavior_array>
 8014e28:	4604      	mov	r4, r0
 8014e2a:	1bb8      	subs	r0, r7, r6
 8014e2c:	4440      	add	r0, r8
 8014e2e:	4622      	mov	r2, r4
 8014e30:	2c00      	cmp	r4, #0
 8014e32:	d1ea      	bne.n	8014e0a <ucdr_deserialize_array_uint8_t+0x16>
 8014e34:	2301      	movs	r3, #1
 8014e36:	7da8      	ldrb	r0, [r5, #22]
 8014e38:	756b      	strb	r3, [r5, #21]
 8014e3a:	4058      	eors	r0, r3
 8014e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e40:	463a      	mov	r2, r7
 8014e42:	68a9      	ldr	r1, [r5, #8]
 8014e44:	4640      	mov	r0, r8
 8014e46:	f002 fd9c 	bl	8017982 <memcpy>
 8014e4a:	68aa      	ldr	r2, [r5, #8]
 8014e4c:	692b      	ldr	r3, [r5, #16]
 8014e4e:	443a      	add	r2, r7
 8014e50:	443b      	add	r3, r7
 8014e52:	60aa      	str	r2, [r5, #8]
 8014e54:	612b      	str	r3, [r5, #16]
 8014e56:	e7ed      	b.n	8014e34 <ucdr_deserialize_array_uint8_t+0x40>

08014e58 <ucdr_deserialize_endian_array_uint8_t>:
 8014e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e5c:	4619      	mov	r1, r3
 8014e5e:	461f      	mov	r7, r3
 8014e60:	4605      	mov	r5, r0
 8014e62:	4690      	mov	r8, r2
 8014e64:	f7f6 fca0 	bl	800b7a8 <ucdr_check_buffer_available_for>
 8014e68:	b9e0      	cbnz	r0, 8014ea4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8014e6a:	463e      	mov	r6, r7
 8014e6c:	e009      	b.n	8014e82 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8014e6e:	68a9      	ldr	r1, [r5, #8]
 8014e70:	f002 fd87 	bl	8017982 <memcpy>
 8014e74:	68ab      	ldr	r3, [r5, #8]
 8014e76:	6928      	ldr	r0, [r5, #16]
 8014e78:	4423      	add	r3, r4
 8014e7a:	4420      	add	r0, r4
 8014e7c:	1b36      	subs	r6, r6, r4
 8014e7e:	60ab      	str	r3, [r5, #8]
 8014e80:	6128      	str	r0, [r5, #16]
 8014e82:	2201      	movs	r2, #1
 8014e84:	4631      	mov	r1, r6
 8014e86:	4628      	mov	r0, r5
 8014e88:	f7f6 fd16 	bl	800b8b8 <ucdr_check_final_buffer_behavior_array>
 8014e8c:	4604      	mov	r4, r0
 8014e8e:	1bb8      	subs	r0, r7, r6
 8014e90:	4440      	add	r0, r8
 8014e92:	4622      	mov	r2, r4
 8014e94:	2c00      	cmp	r4, #0
 8014e96:	d1ea      	bne.n	8014e6e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8014e98:	2301      	movs	r3, #1
 8014e9a:	7da8      	ldrb	r0, [r5, #22]
 8014e9c:	756b      	strb	r3, [r5, #21]
 8014e9e:	4058      	eors	r0, r3
 8014ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ea4:	463a      	mov	r2, r7
 8014ea6:	68a9      	ldr	r1, [r5, #8]
 8014ea8:	4640      	mov	r0, r8
 8014eaa:	f002 fd6a 	bl	8017982 <memcpy>
 8014eae:	68aa      	ldr	r2, [r5, #8]
 8014eb0:	692b      	ldr	r3, [r5, #16]
 8014eb2:	443a      	add	r2, r7
 8014eb4:	443b      	add	r3, r7
 8014eb6:	60aa      	str	r2, [r5, #8]
 8014eb8:	612b      	str	r3, [r5, #16]
 8014eba:	e7ed      	b.n	8014e98 <ucdr_deserialize_endian_array_uint8_t+0x40>

08014ebc <ucdr_serialize_sequence_char>:
 8014ebc:	b570      	push	{r4, r5, r6, lr}
 8014ebe:	4615      	mov	r5, r2
 8014ec0:	460e      	mov	r6, r1
 8014ec2:	7d01      	ldrb	r1, [r0, #20]
 8014ec4:	4604      	mov	r4, r0
 8014ec6:	f7f5 fe2f 	bl	800ab28 <ucdr_serialize_endian_uint32_t>
 8014eca:	b90d      	cbnz	r5, 8014ed0 <ucdr_serialize_sequence_char+0x14>
 8014ecc:	2001      	movs	r0, #1
 8014ece:	bd70      	pop	{r4, r5, r6, pc}
 8014ed0:	7d21      	ldrb	r1, [r4, #20]
 8014ed2:	462b      	mov	r3, r5
 8014ed4:	4632      	mov	r2, r6
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014edc:	f7ff bec2 	b.w	8014c64 <ucdr_serialize_endian_array_char>

08014ee0 <ucdr_deserialize_sequence_char>:
 8014ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ee4:	461d      	mov	r5, r3
 8014ee6:	4616      	mov	r6, r2
 8014ee8:	460f      	mov	r7, r1
 8014eea:	461a      	mov	r2, r3
 8014eec:	7d01      	ldrb	r1, [r0, #20]
 8014eee:	4604      	mov	r4, r0
 8014ef0:	f7f5 ff42 	bl	800ad78 <ucdr_deserialize_endian_uint32_t>
 8014ef4:	682b      	ldr	r3, [r5, #0]
 8014ef6:	429e      	cmp	r6, r3
 8014ef8:	bf3c      	itt	cc
 8014efa:	2201      	movcc	r2, #1
 8014efc:	75a2      	strbcc	r2, [r4, #22]
 8014efe:	b913      	cbnz	r3, 8014f06 <ucdr_deserialize_sequence_char+0x26>
 8014f00:	2001      	movs	r0, #1
 8014f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f06:	7d21      	ldrb	r1, [r4, #20]
 8014f08:	463a      	mov	r2, r7
 8014f0a:	4620      	mov	r0, r4
 8014f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f10:	f7ff beda 	b.w	8014cc8 <ucdr_deserialize_endian_array_char>

08014f14 <ucdr_serialize_sequence_uint8_t>:
 8014f14:	b570      	push	{r4, r5, r6, lr}
 8014f16:	4615      	mov	r5, r2
 8014f18:	460e      	mov	r6, r1
 8014f1a:	7d01      	ldrb	r1, [r0, #20]
 8014f1c:	4604      	mov	r4, r0
 8014f1e:	f7f5 fe03 	bl	800ab28 <ucdr_serialize_endian_uint32_t>
 8014f22:	b90d      	cbnz	r5, 8014f28 <ucdr_serialize_sequence_uint8_t+0x14>
 8014f24:	2001      	movs	r0, #1
 8014f26:	bd70      	pop	{r4, r5, r6, pc}
 8014f28:	7d21      	ldrb	r1, [r4, #20]
 8014f2a:	462b      	mov	r3, r5
 8014f2c:	4632      	mov	r2, r6
 8014f2e:	4620      	mov	r0, r4
 8014f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f34:	f7ff bf2c 	b.w	8014d90 <ucdr_serialize_endian_array_uint8_t>

08014f38 <ucdr_deserialize_sequence_uint8_t>:
 8014f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f3c:	461d      	mov	r5, r3
 8014f3e:	4616      	mov	r6, r2
 8014f40:	460f      	mov	r7, r1
 8014f42:	461a      	mov	r2, r3
 8014f44:	7d01      	ldrb	r1, [r0, #20]
 8014f46:	4604      	mov	r4, r0
 8014f48:	f7f5 ff16 	bl	800ad78 <ucdr_deserialize_endian_uint32_t>
 8014f4c:	682b      	ldr	r3, [r5, #0]
 8014f4e:	429e      	cmp	r6, r3
 8014f50:	bf3c      	itt	cc
 8014f52:	2201      	movcc	r2, #1
 8014f54:	75a2      	strbcc	r2, [r4, #22]
 8014f56:	b913      	cbnz	r3, 8014f5e <ucdr_deserialize_sequence_uint8_t+0x26>
 8014f58:	2001      	movs	r0, #1
 8014f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f5e:	7d21      	ldrb	r1, [r4, #20]
 8014f60:	463a      	mov	r2, r7
 8014f62:	4620      	mov	r0, r4
 8014f64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f68:	f7ff bf76 	b.w	8014e58 <ucdr_deserialize_endian_array_uint8_t>

08014f6c <ucdr_serialize_string>:
 8014f6c:	b510      	push	{r4, lr}
 8014f6e:	b082      	sub	sp, #8
 8014f70:	4604      	mov	r4, r0
 8014f72:	4608      	mov	r0, r1
 8014f74:	9101      	str	r1, [sp, #4]
 8014f76:	f7eb f93d 	bl	80001f4 <strlen>
 8014f7a:	9901      	ldr	r1, [sp, #4]
 8014f7c:	1c42      	adds	r2, r0, #1
 8014f7e:	4620      	mov	r0, r4
 8014f80:	b002      	add	sp, #8
 8014f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f86:	f7ff bf99 	b.w	8014ebc <ucdr_serialize_sequence_char>
 8014f8a:	bf00      	nop

08014f8c <ucdr_deserialize_string>:
 8014f8c:	b500      	push	{lr}
 8014f8e:	b083      	sub	sp, #12
 8014f90:	ab01      	add	r3, sp, #4
 8014f92:	f7ff ffa5 	bl	8014ee0 <ucdr_deserialize_sequence_char>
 8014f96:	b003      	add	sp, #12
 8014f98:	f85d fb04 	ldr.w	pc, [sp], #4

08014f9c <get_custom_error>:
 8014f9c:	4b01      	ldr	r3, [pc, #4]	@ (8014fa4 <get_custom_error+0x8>)
 8014f9e:	7818      	ldrb	r0, [r3, #0]
 8014fa0:	4770      	bx	lr
 8014fa2:	bf00      	nop
 8014fa4:	2000ded0 	.word	0x2000ded0

08014fa8 <recv_custom_msg>:
 8014fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fac:	4693      	mov	fp, r2
 8014fae:	b089      	sub	sp, #36	@ 0x24
 8014fb0:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014fb4:	9305      	str	r3, [sp, #20]
 8014fb6:	468a      	mov	sl, r1
 8014fb8:	2100      	movs	r1, #0
 8014fba:	4604      	mov	r4, r0
 8014fbc:	f88d 101e 	strb.w	r1, [sp, #30]
 8014fc0:	b322      	cbz	r2, 801500c <recv_custom_msg+0x64>
 8014fc2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8014fc6:	f10d 081f 	add.w	r8, sp, #31
 8014fca:	af05      	add	r7, sp, #20
 8014fcc:	f10d 061e 	add.w	r6, sp, #30
 8014fd0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8014fd4:	e002      	b.n	8014fdc <recv_custom_msg+0x34>
 8014fd6:	9b05      	ldr	r3, [sp, #20]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	dd0f      	ble.n	8014ffc <recv_custom_msg+0x54>
 8014fdc:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8014fe0:	4623      	mov	r3, r4
 8014fe2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014fe6:	e9cd 5600 	strd	r5, r6, [sp]
 8014fea:	4622      	mov	r2, r4
 8014fec:	4648      	mov	r0, r9
 8014fee:	f001 f92d 	bl	801624c <uxr_read_framed_msg>
 8014ff2:	2800      	cmp	r0, #0
 8014ff4:	d0ef      	beq.n	8014fd6 <recv_custom_msg+0x2e>
 8014ff6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014ffa:	b1b3      	cbz	r3, 801502a <recv_custom_msg+0x82>
 8014ffc:	4b0f      	ldr	r3, [pc, #60]	@ (801503c <recv_custom_msg+0x94>)
 8014ffe:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8015002:	701a      	strb	r2, [r3, #0]
 8015004:	2000      	movs	r0, #0
 8015006:	b009      	add	sp, #36	@ 0x24
 8015008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801500c:	f10d 021f 	add.w	r2, sp, #31
 8015010:	9200      	str	r2, [sp, #0]
 8015012:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8015016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801501a:	4601      	mov	r1, r0
 801501c:	47a8      	blx	r5
 801501e:	2800      	cmp	r0, #0
 8015020:	d0ec      	beq.n	8014ffc <recv_custom_msg+0x54>
 8015022:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d1e8      	bne.n	8014ffc <recv_custom_msg+0x54>
 801502a:	f8cb 0000 	str.w	r0, [fp]
 801502e:	2001      	movs	r0, #1
 8015030:	f8ca 4000 	str.w	r4, [sl]
 8015034:	b009      	add	sp, #36	@ 0x24
 8015036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801503a:	bf00      	nop
 801503c:	2000ded0 	.word	0x2000ded0

08015040 <send_custom_msg>:
 8015040:	b530      	push	{r4, r5, lr}
 8015042:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8015046:	b087      	sub	sp, #28
 8015048:	4615      	mov	r5, r2
 801504a:	b974      	cbnz	r4, 801506a <send_custom_msg+0x2a>
 801504c:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8015050:	f10d 0317 	add.w	r3, sp, #23
 8015054:	47a0      	blx	r4
 8015056:	b108      	cbz	r0, 801505c <send_custom_msg+0x1c>
 8015058:	42a8      	cmp	r0, r5
 801505a:	d015      	beq.n	8015088 <send_custom_msg+0x48>
 801505c:	4b0c      	ldr	r3, [pc, #48]	@ (8015090 <send_custom_msg+0x50>)
 801505e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8015062:	701a      	strb	r2, [r3, #0]
 8015064:	2000      	movs	r0, #0
 8015066:	b007      	add	sp, #28
 8015068:	bd30      	pop	{r4, r5, pc}
 801506a:	460b      	mov	r3, r1
 801506c:	2200      	movs	r2, #0
 801506e:	f10d 0117 	add.w	r1, sp, #23
 8015072:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015076:	4602      	mov	r2, r0
 8015078:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 801507c:	9500      	str	r5, [sp, #0]
 801507e:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8015082:	f000 feeb 	bl	8015e5c <uxr_write_framed_msg>
 8015086:	e7e6      	b.n	8015056 <send_custom_msg+0x16>
 8015088:	2001      	movs	r0, #1
 801508a:	b007      	add	sp, #28
 801508c:	bd30      	pop	{r4, r5, pc}
 801508e:	bf00      	nop
 8015090:	2000ded0 	.word	0x2000ded0

08015094 <uxr_set_custom_transport_callbacks>:
 8015094:	b410      	push	{r4}
 8015096:	9c01      	ldr	r4, [sp, #4]
 8015098:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 801509c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80150a0:	9b02      	ldr	r3, [sp, #8]
 80150a2:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80150a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150aa:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 80150ae:	4770      	bx	lr

080150b0 <uxr_init_custom_transport>:
 80150b0:	b538      	push	{r3, r4, r5, lr}
 80150b2:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80150b6:	b303      	cbz	r3, 80150fa <uxr_init_custom_transport+0x4a>
 80150b8:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80150bc:	4604      	mov	r4, r0
 80150be:	b1e2      	cbz	r2, 80150fa <uxr_init_custom_transport+0x4a>
 80150c0:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80150c4:	b1ca      	cbz	r2, 80150fa <uxr_init_custom_transport+0x4a>
 80150c6:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80150ca:	b1b2      	cbz	r2, 80150fa <uxr_init_custom_transport+0x4a>
 80150cc:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80150d0:	4798      	blx	r3
 80150d2:	4605      	mov	r5, r0
 80150d4:	b188      	cbz	r0, 80150fa <uxr_init_custom_transport+0x4a>
 80150d6:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80150da:	b98b      	cbnz	r3, 8015100 <uxr_init_custom_transport+0x50>
 80150dc:	490b      	ldr	r1, [pc, #44]	@ (801510c <uxr_init_custom_transport+0x5c>)
 80150de:	4b0c      	ldr	r3, [pc, #48]	@ (8015110 <uxr_init_custom_transport+0x60>)
 80150e0:	4a0c      	ldr	r2, [pc, #48]	@ (8015114 <uxr_init_custom_transport+0x64>)
 80150e2:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80150e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80150ea:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80150ee:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80150f2:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80150f6:	4628      	mov	r0, r5
 80150f8:	bd38      	pop	{r3, r4, r5, pc}
 80150fa:	2500      	movs	r5, #0
 80150fc:	4628      	mov	r0, r5
 80150fe:	bd38      	pop	{r3, r4, r5, pc}
 8015100:	2100      	movs	r1, #0
 8015102:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8015106:	f000 fea3 	bl	8015e50 <uxr_init_framing_io>
 801510a:	e7e7      	b.n	80150dc <uxr_init_custom_transport+0x2c>
 801510c:	08015041 	.word	0x08015041
 8015110:	08014fa9 	.word	0x08014fa9
 8015114:	08014f9d 	.word	0x08014f9d

08015118 <uxr_close_custom_transport>:
 8015118:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801511c:	4718      	bx	r3
 801511e:	bf00      	nop

08015120 <uxr_init_input_best_effort_stream>:
 8015120:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015124:	8003      	strh	r3, [r0, #0]
 8015126:	4770      	bx	lr

08015128 <uxr_reset_input_best_effort_stream>:
 8015128:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801512c:	8003      	strh	r3, [r0, #0]
 801512e:	4770      	bx	lr

08015130 <uxr_receive_best_effort_message>:
 8015130:	b538      	push	{r3, r4, r5, lr}
 8015132:	4604      	mov	r4, r0
 8015134:	8800      	ldrh	r0, [r0, #0]
 8015136:	460d      	mov	r5, r1
 8015138:	f000 fe72 	bl	8015e20 <uxr_seq_num_cmp>
 801513c:	4603      	mov	r3, r0
 801513e:	2b00      	cmp	r3, #0
 8015140:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015144:	bfb8      	it	lt
 8015146:	8025      	strhlt	r5, [r4, #0]
 8015148:	bd38      	pop	{r3, r4, r5, pc}
 801514a:	bf00      	nop

0801514c <on_full_input_buffer>:
 801514c:	b570      	push	{r4, r5, r6, lr}
 801514e:	4605      	mov	r5, r0
 8015150:	460c      	mov	r4, r1
 8015152:	682b      	ldr	r3, [r5, #0]
 8015154:	6809      	ldr	r1, [r1, #0]
 8015156:	8920      	ldrh	r0, [r4, #8]
 8015158:	6862      	ldr	r2, [r4, #4]
 801515a:	fbb2 f2f0 	udiv	r2, r2, r0
 801515e:	eba3 0c01 	sub.w	ip, r3, r1
 8015162:	fbbc fcf2 	udiv	ip, ip, r2
 8015166:	f10c 0c01 	add.w	ip, ip, #1
 801516a:	fa1f f38c 	uxth.w	r3, ip
 801516e:	fbb3 f6f0 	udiv	r6, r3, r0
 8015172:	fb00 3316 	mls	r3, r0, r6, r3
 8015176:	b29b      	uxth	r3, r3
 8015178:	fb02 f303 	mul.w	r3, r2, r3
 801517c:	1d18      	adds	r0, r3, #4
 801517e:	4408      	add	r0, r1
 8015180:	7d26      	ldrb	r6, [r4, #20]
 8015182:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015186:	b116      	cbz	r6, 801518e <on_full_input_buffer+0x42>
 8015188:	2600      	movs	r6, #0
 801518a:	f840 6c04 	str.w	r6, [r0, #-4]
 801518e:	2a03      	cmp	r2, #3
 8015190:	d801      	bhi.n	8015196 <on_full_input_buffer+0x4a>
 8015192:	2001      	movs	r0, #1
 8015194:	bd70      	pop	{r4, r5, r6, pc}
 8015196:	3308      	adds	r3, #8
 8015198:	4419      	add	r1, r3
 801519a:	4628      	mov	r0, r5
 801519c:	692b      	ldr	r3, [r5, #16]
 801519e:	3a04      	subs	r2, #4
 80151a0:	f7f6 fb4e 	bl	800b840 <ucdr_init_buffer_origin>
 80151a4:	4628      	mov	r0, r5
 80151a6:	4903      	ldr	r1, [pc, #12]	@ (80151b4 <on_full_input_buffer+0x68>)
 80151a8:	4622      	mov	r2, r4
 80151aa:	f7f6 fb25 	bl	800b7f8 <ucdr_set_on_full_buffer_callback>
 80151ae:	2000      	movs	r0, #0
 80151b0:	bd70      	pop	{r4, r5, r6, pc}
 80151b2:	bf00      	nop
 80151b4:	0801514d 	.word	0x0801514d

080151b8 <uxr_init_input_reliable_stream>:
 80151b8:	b500      	push	{lr}
 80151ba:	e9c0 1200 	strd	r1, r2, [r0]
 80151be:	f04f 0e00 	mov.w	lr, #0
 80151c2:	9a01      	ldr	r2, [sp, #4]
 80151c4:	8103      	strh	r3, [r0, #8]
 80151c6:	6102      	str	r2, [r0, #16]
 80151c8:	f880 e014 	strb.w	lr, [r0, #20]
 80151cc:	b1d3      	cbz	r3, 8015204 <uxr_init_input_reliable_stream+0x4c>
 80151ce:	f8c1 e000 	str.w	lr, [r1]
 80151d2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80151d6:	f1bc 0f01 	cmp.w	ip, #1
 80151da:	d913      	bls.n	8015204 <uxr_init_input_reliable_stream+0x4c>
 80151dc:	2301      	movs	r3, #1
 80151de:	fbb3 f1fc 	udiv	r1, r3, ip
 80151e2:	fb0c 3111 	mls	r1, ip, r1, r3
 80151e6:	b289      	uxth	r1, r1
 80151e8:	6842      	ldr	r2, [r0, #4]
 80151ea:	fbb2 f2fc 	udiv	r2, r2, ip
 80151ee:	fb01 f202 	mul.w	r2, r1, r2
 80151f2:	6801      	ldr	r1, [r0, #0]
 80151f4:	f841 e002 	str.w	lr, [r1, r2]
 80151f8:	3301      	adds	r3, #1
 80151fa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80151fe:	b29b      	uxth	r3, r3
 8015200:	459c      	cmp	ip, r3
 8015202:	d8ec      	bhi.n	80151de <uxr_init_input_reliable_stream+0x26>
 8015204:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015208:	60c3      	str	r3, [r0, #12]
 801520a:	f85d fb04 	ldr.w	pc, [sp], #4
 801520e:	bf00      	nop

08015210 <uxr_reset_input_reliable_stream>:
 8015210:	8901      	ldrh	r1, [r0, #8]
 8015212:	b1e9      	cbz	r1, 8015250 <uxr_reset_input_reliable_stream+0x40>
 8015214:	f04f 0c00 	mov.w	ip, #0
 8015218:	b500      	push	{lr}
 801521a:	4663      	mov	r3, ip
 801521c:	46e6      	mov	lr, ip
 801521e:	fbb3 f2f1 	udiv	r2, r3, r1
 8015222:	fb01 3312 	mls	r3, r1, r2, r3
 8015226:	b29b      	uxth	r3, r3
 8015228:	6842      	ldr	r2, [r0, #4]
 801522a:	fbb2 f2f1 	udiv	r2, r2, r1
 801522e:	fb02 f303 	mul.w	r3, r2, r3
 8015232:	6802      	ldr	r2, [r0, #0]
 8015234:	f842 e003 	str.w	lr, [r2, r3]
 8015238:	f10c 0c01 	add.w	ip, ip, #1
 801523c:	8901      	ldrh	r1, [r0, #8]
 801523e:	fa1f f38c 	uxth.w	r3, ip
 8015242:	4299      	cmp	r1, r3
 8015244:	d8eb      	bhi.n	801521e <uxr_reset_input_reliable_stream+0xe>
 8015246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801524a:	60c3      	str	r3, [r0, #12]
 801524c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015250:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015254:	60c3      	str	r3, [r0, #12]
 8015256:	4770      	bx	lr

08015258 <uxr_receive_reliable_message>:
 8015258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801525c:	4604      	mov	r4, r0
 801525e:	460d      	mov	r5, r1
 8015260:	8901      	ldrh	r1, [r0, #8]
 8015262:	8980      	ldrh	r0, [r0, #12]
 8015264:	4690      	mov	r8, r2
 8015266:	461f      	mov	r7, r3
 8015268:	f000 fdd2 	bl	8015e10 <uxr_seq_num_add>
 801526c:	4629      	mov	r1, r5
 801526e:	4606      	mov	r6, r0
 8015270:	89a0      	ldrh	r0, [r4, #12]
 8015272:	f000 fdd5 	bl	8015e20 <uxr_seq_num_cmp>
 8015276:	2800      	cmp	r0, #0
 8015278:	db0a      	blt.n	8015290 <uxr_receive_reliable_message+0x38>
 801527a:	2600      	movs	r6, #0
 801527c:	89e0      	ldrh	r0, [r4, #14]
 801527e:	4629      	mov	r1, r5
 8015280:	f000 fdce 	bl	8015e20 <uxr_seq_num_cmp>
 8015284:	2800      	cmp	r0, #0
 8015286:	da00      	bge.n	801528a <uxr_receive_reliable_message+0x32>
 8015288:	81e5      	strh	r5, [r4, #14]
 801528a:	4630      	mov	r0, r6
 801528c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015290:	4630      	mov	r0, r6
 8015292:	4629      	mov	r1, r5
 8015294:	f000 fdc4 	bl	8015e20 <uxr_seq_num_cmp>
 8015298:	2800      	cmp	r0, #0
 801529a:	dbee      	blt.n	801527a <uxr_receive_reliable_message+0x22>
 801529c:	6923      	ldr	r3, [r4, #16]
 801529e:	4640      	mov	r0, r8
 80152a0:	4798      	blx	r3
 80152a2:	2101      	movs	r1, #1
 80152a4:	4681      	mov	r9, r0
 80152a6:	89a0      	ldrh	r0, [r4, #12]
 80152a8:	f000 fdb2 	bl	8015e10 <uxr_seq_num_add>
 80152ac:	f1b9 0f00 	cmp.w	r9, #0
 80152b0:	d101      	bne.n	80152b6 <uxr_receive_reliable_message+0x5e>
 80152b2:	4285      	cmp	r5, r0
 80152b4:	d047      	beq.n	8015346 <uxr_receive_reliable_message+0xee>
 80152b6:	8922      	ldrh	r2, [r4, #8]
 80152b8:	fbb5 f0f2 	udiv	r0, r5, r2
 80152bc:	fb02 5010 	mls	r0, r2, r0, r5
 80152c0:	b280      	uxth	r0, r0
 80152c2:	6863      	ldr	r3, [r4, #4]
 80152c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80152c8:	fb00 f303 	mul.w	r3, r0, r3
 80152cc:	6820      	ldr	r0, [r4, #0]
 80152ce:	3304      	adds	r3, #4
 80152d0:	4418      	add	r0, r3
 80152d2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d1cf      	bne.n	801527a <uxr_receive_reliable_message+0x22>
 80152da:	4641      	mov	r1, r8
 80152dc:	463a      	mov	r2, r7
 80152de:	f002 fb50 	bl	8017982 <memcpy>
 80152e2:	8921      	ldrh	r1, [r4, #8]
 80152e4:	fbb5 f2f1 	udiv	r2, r5, r1
 80152e8:	fb01 5212 	mls	r2, r1, r2, r5
 80152ec:	b292      	uxth	r2, r2
 80152ee:	6863      	ldr	r3, [r4, #4]
 80152f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80152f4:	fb02 f303 	mul.w	r3, r2, r3
 80152f8:	6822      	ldr	r2, [r4, #0]
 80152fa:	50d7      	str	r7, [r2, r3]
 80152fc:	9a08      	ldr	r2, [sp, #32]
 80152fe:	2301      	movs	r3, #1
 8015300:	7013      	strb	r3, [r2, #0]
 8015302:	f1b9 0f00 	cmp.w	r9, #0
 8015306:	d0b8      	beq.n	801527a <uxr_receive_reliable_message+0x22>
 8015308:	89a6      	ldrh	r6, [r4, #12]
 801530a:	4630      	mov	r0, r6
 801530c:	2101      	movs	r1, #1
 801530e:	f000 fd7f 	bl	8015e10 <uxr_seq_num_add>
 8015312:	8922      	ldrh	r2, [r4, #8]
 8015314:	6863      	ldr	r3, [r4, #4]
 8015316:	fbb3 f3f2 	udiv	r3, r3, r2
 801531a:	4606      	mov	r6, r0
 801531c:	fbb0 f0f2 	udiv	r0, r0, r2
 8015320:	fb02 6010 	mls	r0, r2, r0, r6
 8015324:	b280      	uxth	r0, r0
 8015326:	fb00 f303 	mul.w	r3, r0, r3
 801532a:	6820      	ldr	r0, [r4, #0]
 801532c:	3304      	adds	r3, #4
 801532e:	4418      	add	r0, r3
 8015330:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d0a0      	beq.n	801527a <uxr_receive_reliable_message+0x22>
 8015338:	6923      	ldr	r3, [r4, #16]
 801533a:	4798      	blx	r3
 801533c:	2802      	cmp	r0, #2
 801533e:	d008      	beq.n	8015352 <uxr_receive_reliable_message+0xfa>
 8015340:	2801      	cmp	r0, #1
 8015342:	d0e2      	beq.n	801530a <uxr_receive_reliable_message+0xb2>
 8015344:	e799      	b.n	801527a <uxr_receive_reliable_message+0x22>
 8015346:	9b08      	ldr	r3, [sp, #32]
 8015348:	81a5      	strh	r5, [r4, #12]
 801534a:	2601      	movs	r6, #1
 801534c:	f883 9000 	strb.w	r9, [r3]
 8015350:	e794      	b.n	801527c <uxr_receive_reliable_message+0x24>
 8015352:	2601      	movs	r6, #1
 8015354:	e792      	b.n	801527c <uxr_receive_reliable_message+0x24>
 8015356:	bf00      	nop

08015358 <uxr_next_input_reliable_buffer_available>:
 8015358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801535c:	4604      	mov	r4, r0
 801535e:	460f      	mov	r7, r1
 8015360:	8980      	ldrh	r0, [r0, #12]
 8015362:	2101      	movs	r1, #1
 8015364:	4690      	mov	r8, r2
 8015366:	f000 fd53 	bl	8015e10 <uxr_seq_num_add>
 801536a:	8922      	ldrh	r2, [r4, #8]
 801536c:	fbb0 f6f2 	udiv	r6, r0, r2
 8015370:	fb02 0616 	mls	r6, r2, r6, r0
 8015374:	b2b6      	uxth	r6, r6
 8015376:	6863      	ldr	r3, [r4, #4]
 8015378:	fbb3 f3f2 	udiv	r3, r3, r2
 801537c:	fb06 f303 	mul.w	r3, r6, r3
 8015380:	6826      	ldr	r6, [r4, #0]
 8015382:	3304      	adds	r3, #4
 8015384:	441e      	add	r6, r3
 8015386:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801538a:	f1b9 0f00 	cmp.w	r9, #0
 801538e:	d023      	beq.n	80153d8 <uxr_next_input_reliable_buffer_available+0x80>
 8015390:	6923      	ldr	r3, [r4, #16]
 8015392:	4605      	mov	r5, r0
 8015394:	4630      	mov	r0, r6
 8015396:	4798      	blx	r3
 8015398:	4682      	mov	sl, r0
 801539a:	b300      	cbz	r0, 80153de <uxr_next_input_reliable_buffer_available+0x86>
 801539c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80153a0:	2101      	movs	r1, #1
 80153a2:	4650      	mov	r0, sl
 80153a4:	f000 fd34 	bl	8015e10 <uxr_seq_num_add>
 80153a8:	8921      	ldrh	r1, [r4, #8]
 80153aa:	fbb0 f2f1 	udiv	r2, r0, r1
 80153ae:	4682      	mov	sl, r0
 80153b0:	fb01 0212 	mls	r2, r1, r2, r0
 80153b4:	e9d4 0300 	ldrd	r0, r3, [r4]
 80153b8:	b292      	uxth	r2, r2
 80153ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80153be:	fb02 f303 	mul.w	r3, r2, r3
 80153c2:	3304      	adds	r3, #4
 80153c4:	4418      	add	r0, r3
 80153c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80153ca:	b12b      	cbz	r3, 80153d8 <uxr_next_input_reliable_buffer_available+0x80>
 80153cc:	6923      	ldr	r3, [r4, #16]
 80153ce:	4798      	blx	r3
 80153d0:	2802      	cmp	r0, #2
 80153d2:	d01b      	beq.n	801540c <uxr_next_input_reliable_buffer_available+0xb4>
 80153d4:	2801      	cmp	r0, #1
 80153d6:	d0e3      	beq.n	80153a0 <uxr_next_input_reliable_buffer_available+0x48>
 80153d8:	2000      	movs	r0, #0
 80153da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153de:	464a      	mov	r2, r9
 80153e0:	4631      	mov	r1, r6
 80153e2:	4638      	mov	r0, r7
 80153e4:	f7f6 fa34 	bl	800b850 <ucdr_init_buffer>
 80153e8:	8921      	ldrh	r1, [r4, #8]
 80153ea:	fbb5 f2f1 	udiv	r2, r5, r1
 80153ee:	fb01 5212 	mls	r2, r1, r2, r5
 80153f2:	b292      	uxth	r2, r2
 80153f4:	6863      	ldr	r3, [r4, #4]
 80153f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80153fa:	fb02 f303 	mul.w	r3, r2, r3
 80153fe:	6822      	ldr	r2, [r4, #0]
 8015400:	f842 a003 	str.w	sl, [r2, r3]
 8015404:	2001      	movs	r0, #1
 8015406:	81a5      	strh	r5, [r4, #12]
 8015408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801540c:	8920      	ldrh	r0, [r4, #8]
 801540e:	fbb5 f3f0 	udiv	r3, r5, r0
 8015412:	fb00 5513 	mls	r5, r0, r3, r5
 8015416:	b2ad      	uxth	r5, r5
 8015418:	6863      	ldr	r3, [r4, #4]
 801541a:	fbb3 f3f0 	udiv	r3, r3, r0
 801541e:	fb03 f505 	mul.w	r5, r3, r5
 8015422:	6823      	ldr	r3, [r4, #0]
 8015424:	2000      	movs	r0, #0
 8015426:	5158      	str	r0, [r3, r5]
 8015428:	eb06 0108 	add.w	r1, r6, r8
 801542c:	eba9 0208 	sub.w	r2, r9, r8
 8015430:	4638      	mov	r0, r7
 8015432:	f7f6 fa0d 	bl	800b850 <ucdr_init_buffer>
 8015436:	4638      	mov	r0, r7
 8015438:	4903      	ldr	r1, [pc, #12]	@ (8015448 <uxr_next_input_reliable_buffer_available+0xf0>)
 801543a:	4622      	mov	r2, r4
 801543c:	f7f6 f9dc 	bl	800b7f8 <ucdr_set_on_full_buffer_callback>
 8015440:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8015444:	2001      	movs	r0, #1
 8015446:	e7c8      	b.n	80153da <uxr_next_input_reliable_buffer_available+0x82>
 8015448:	0801514d 	.word	0x0801514d

0801544c <uxr_process_heartbeat>:
 801544c:	b538      	push	{r3, r4, r5, lr}
 801544e:	4611      	mov	r1, r2
 8015450:	4604      	mov	r4, r0
 8015452:	89c0      	ldrh	r0, [r0, #14]
 8015454:	4615      	mov	r5, r2
 8015456:	f000 fce3 	bl	8015e20 <uxr_seq_num_cmp>
 801545a:	2800      	cmp	r0, #0
 801545c:	bfb8      	it	lt
 801545e:	81e5      	strhlt	r5, [r4, #14]
 8015460:	bd38      	pop	{r3, r4, r5, pc}
 8015462:	bf00      	nop

08015464 <uxr_compute_acknack>:
 8015464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015468:	8903      	ldrh	r3, [r0, #8]
 801546a:	8985      	ldrh	r5, [r0, #12]
 801546c:	4604      	mov	r4, r0
 801546e:	460e      	mov	r6, r1
 8015470:	b1d3      	cbz	r3, 80154a8 <uxr_compute_acknack+0x44>
 8015472:	4628      	mov	r0, r5
 8015474:	2701      	movs	r7, #1
 8015476:	e003      	b.n	8015480 <uxr_compute_acknack+0x1c>
 8015478:	4567      	cmp	r7, ip
 801547a:	d215      	bcs.n	80154a8 <uxr_compute_acknack+0x44>
 801547c:	89a0      	ldrh	r0, [r4, #12]
 801547e:	3701      	adds	r7, #1
 8015480:	b2b9      	uxth	r1, r7
 8015482:	f000 fcc5 	bl	8015e10 <uxr_seq_num_add>
 8015486:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801548a:	fbb0 f3fc 	udiv	r3, r0, ip
 801548e:	fb0c 0313 	mls	r3, ip, r3, r0
 8015492:	b29a      	uxth	r2, r3
 8015494:	e9d4 1300 	ldrd	r1, r3, [r4]
 8015498:	fbb3 f3fc 	udiv	r3, r3, ip
 801549c:	fb02 f303 	mul.w	r3, r2, r3
 80154a0:	58cb      	ldr	r3, [r1, r3]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d1e8      	bne.n	8015478 <uxr_compute_acknack+0x14>
 80154a6:	4605      	mov	r5, r0
 80154a8:	8035      	strh	r5, [r6, #0]
 80154aa:	2101      	movs	r1, #1
 80154ac:	4628      	mov	r0, r5
 80154ae:	89e7      	ldrh	r7, [r4, #14]
 80154b0:	f000 fcb2 	bl	8015e18 <uxr_seq_num_sub>
 80154b4:	4601      	mov	r1, r0
 80154b6:	4638      	mov	r0, r7
 80154b8:	f000 fcae 	bl	8015e18 <uxr_seq_num_sub>
 80154bc:	4605      	mov	r5, r0
 80154be:	b318      	cbz	r0, 8015508 <uxr_compute_acknack+0xa4>
 80154c0:	f04f 0900 	mov.w	r9, #0
 80154c4:	464f      	mov	r7, r9
 80154c6:	f04f 0801 	mov.w	r8, #1
 80154ca:	fa1f f189 	uxth.w	r1, r9
 80154ce:	8830      	ldrh	r0, [r6, #0]
 80154d0:	f000 fc9e 	bl	8015e10 <uxr_seq_num_add>
 80154d4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80154d8:	fbb0 f3fc 	udiv	r3, r0, ip
 80154dc:	e9d4 1200 	ldrd	r1, r2, [r4]
 80154e0:	fb03 001c 	mls	r0, r3, ip, r0
 80154e4:	b283      	uxth	r3, r0
 80154e6:	fbb2 f2fc 	udiv	r2, r2, ip
 80154ea:	fb02 f303 	mul.w	r3, r2, r3
 80154ee:	fa08 f209 	lsl.w	r2, r8, r9
 80154f2:	58cb      	ldr	r3, [r1, r3]
 80154f4:	f109 0901 	add.w	r9, r9, #1
 80154f8:	b90b      	cbnz	r3, 80154fe <uxr_compute_acknack+0x9a>
 80154fa:	4317      	orrs	r7, r2
 80154fc:	b2bf      	uxth	r7, r7
 80154fe:	454d      	cmp	r5, r9
 8015500:	d1e3      	bne.n	80154ca <uxr_compute_acknack+0x66>
 8015502:	4638      	mov	r0, r7
 8015504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015508:	4607      	mov	r7, r0
 801550a:	4638      	mov	r0, r7
 801550c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015510 <uxr_init_output_best_effort_stream>:
 8015510:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8015514:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015518:	6001      	str	r1, [r0, #0]
 801551a:	7303      	strb	r3, [r0, #12]
 801551c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015520:	4770      	bx	lr
 8015522:	bf00      	nop

08015524 <uxr_reset_output_best_effort_stream>:
 8015524:	7b02      	ldrb	r2, [r0, #12]
 8015526:	6042      	str	r2, [r0, #4]
 8015528:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801552c:	81c3      	strh	r3, [r0, #14]
 801552e:	4770      	bx	lr

08015530 <uxr_prepare_best_effort_buffer_to_write>:
 8015530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015532:	4604      	mov	r4, r0
 8015534:	b083      	sub	sp, #12
 8015536:	6840      	ldr	r0, [r0, #4]
 8015538:	460d      	mov	r5, r1
 801553a:	4616      	mov	r6, r2
 801553c:	f7f9 fd0c 	bl	800ef58 <uxr_submessage_padding>
 8015540:	6863      	ldr	r3, [r4, #4]
 8015542:	4418      	add	r0, r3
 8015544:	68a3      	ldr	r3, [r4, #8]
 8015546:	1942      	adds	r2, r0, r5
 8015548:	4293      	cmp	r3, r2
 801554a:	bf2c      	ite	cs
 801554c:	2701      	movcs	r7, #1
 801554e:	2700      	movcc	r7, #0
 8015550:	d202      	bcs.n	8015558 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8015552:	4638      	mov	r0, r7
 8015554:	b003      	add	sp, #12
 8015556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015558:	9000      	str	r0, [sp, #0]
 801555a:	6821      	ldr	r1, [r4, #0]
 801555c:	4630      	mov	r0, r6
 801555e:	2300      	movs	r3, #0
 8015560:	f7f6 f964 	bl	800b82c <ucdr_init_buffer_origin_offset>
 8015564:	6861      	ldr	r1, [r4, #4]
 8015566:	4638      	mov	r0, r7
 8015568:	4429      	add	r1, r5
 801556a:	6061      	str	r1, [r4, #4]
 801556c:	b003      	add	sp, #12
 801556e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015570 <uxr_prepare_best_effort_buffer_to_send>:
 8015570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015574:	4604      	mov	r4, r0
 8015576:	461d      	mov	r5, r3
 8015578:	6840      	ldr	r0, [r0, #4]
 801557a:	7b23      	ldrb	r3, [r4, #12]
 801557c:	4298      	cmp	r0, r3
 801557e:	bf8c      	ite	hi
 8015580:	2601      	movhi	r6, #1
 8015582:	2600      	movls	r6, #0
 8015584:	d802      	bhi.n	801558c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015586:	4630      	mov	r0, r6
 8015588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801558c:	4688      	mov	r8, r1
 801558e:	89e0      	ldrh	r0, [r4, #14]
 8015590:	2101      	movs	r1, #1
 8015592:	4617      	mov	r7, r2
 8015594:	f000 fc3c 	bl	8015e10 <uxr_seq_num_add>
 8015598:	6823      	ldr	r3, [r4, #0]
 801559a:	81e0      	strh	r0, [r4, #14]
 801559c:	8028      	strh	r0, [r5, #0]
 801559e:	f8c8 3000 	str.w	r3, [r8]
 80155a2:	6863      	ldr	r3, [r4, #4]
 80155a4:	603b      	str	r3, [r7, #0]
 80155a6:	7b23      	ldrb	r3, [r4, #12]
 80155a8:	6063      	str	r3, [r4, #4]
 80155aa:	4630      	mov	r0, r6
 80155ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080155b0 <on_full_output_buffer>:
 80155b0:	b538      	push	{r3, r4, r5, lr}
 80155b2:	6802      	ldr	r2, [r0, #0]
 80155b4:	460c      	mov	r4, r1
 80155b6:	6809      	ldr	r1, [r1, #0]
 80155b8:	8923      	ldrh	r3, [r4, #8]
 80155ba:	eba2 0c01 	sub.w	ip, r2, r1
 80155be:	6862      	ldr	r2, [r4, #4]
 80155c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80155c4:	fbbc fcf2 	udiv	ip, ip, r2
 80155c8:	f10c 0c01 	add.w	ip, ip, #1
 80155cc:	fa1f fc8c 	uxth.w	ip, ip
 80155d0:	fbbc fef3 	udiv	lr, ip, r3
 80155d4:	fb03 c31e 	mls	r3, r3, lr, ip
 80155d8:	b29b      	uxth	r3, r3
 80155da:	fb02 f303 	mul.w	r3, r2, r3
 80155de:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80155e2:	58ca      	ldr	r2, [r1, r3]
 80155e4:	4463      	add	r3, ip
 80155e6:	eba2 020c 	sub.w	r2, r2, ip
 80155ea:	3308      	adds	r3, #8
 80155ec:	4605      	mov	r5, r0
 80155ee:	4419      	add	r1, r3
 80155f0:	3a04      	subs	r2, #4
 80155f2:	6903      	ldr	r3, [r0, #16]
 80155f4:	f7f6 f924 	bl	800b840 <ucdr_init_buffer_origin>
 80155f8:	4628      	mov	r0, r5
 80155fa:	4903      	ldr	r1, [pc, #12]	@ (8015608 <on_full_output_buffer+0x58>)
 80155fc:	4622      	mov	r2, r4
 80155fe:	f7f6 f8fb 	bl	800b7f8 <ucdr_set_on_full_buffer_callback>
 8015602:	2000      	movs	r0, #0
 8015604:	bd38      	pop	{r3, r4, r5, pc}
 8015606:	bf00      	nop
 8015608:	080155b1 	.word	0x080155b1

0801560c <uxr_init_output_reliable_stream>:
 801560c:	b410      	push	{r4}
 801560e:	f89d c004 	ldrb.w	ip, [sp, #4]
 8015612:	8103      	strh	r3, [r0, #8]
 8015614:	e9c0 1200 	strd	r1, r2, [r0]
 8015618:	f880 c00c 	strb.w	ip, [r0, #12]
 801561c:	b1d3      	cbz	r3, 8015654 <uxr_init_output_reliable_stream+0x48>
 801561e:	f8c1 c000 	str.w	ip, [r1]
 8015622:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015626:	f1bc 0f01 	cmp.w	ip, #1
 801562a:	d913      	bls.n	8015654 <uxr_init_output_reliable_stream+0x48>
 801562c:	2301      	movs	r3, #1
 801562e:	fbb3 f1fc 	udiv	r1, r3, ip
 8015632:	fb0c 3111 	mls	r1, ip, r1, r3
 8015636:	b289      	uxth	r1, r1
 8015638:	6842      	ldr	r2, [r0, #4]
 801563a:	6804      	ldr	r4, [r0, #0]
 801563c:	fbb2 f2fc 	udiv	r2, r2, ip
 8015640:	fb01 f202 	mul.w	r2, r1, r2
 8015644:	7b01      	ldrb	r1, [r0, #12]
 8015646:	50a1      	str	r1, [r4, r2]
 8015648:	3301      	adds	r3, #1
 801564a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801564e:	b29b      	uxth	r3, r3
 8015650:	459c      	cmp	ip, r3
 8015652:	d8ec      	bhi.n	801562e <uxr_init_output_reliable_stream+0x22>
 8015654:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015658:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801565c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015660:	4905      	ldr	r1, [pc, #20]	@ (8015678 <uxr_init_output_reliable_stream+0x6c>)
 8015662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015666:	f8c0 100e 	str.w	r1, [r0, #14]
 801566a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801566e:	2300      	movs	r3, #0
 8015670:	8242      	strh	r2, [r0, #18]
 8015672:	8403      	strh	r3, [r0, #32]
 8015674:	4770      	bx	lr
 8015676:	bf00      	nop
 8015678:	ffff0000 	.word	0xffff0000

0801567c <uxr_reset_output_reliable_stream>:
 801567c:	8901      	ldrh	r1, [r0, #8]
 801567e:	b1b1      	cbz	r1, 80156ae <uxr_reset_output_reliable_stream+0x32>
 8015680:	f04f 0c00 	mov.w	ip, #0
 8015684:	4663      	mov	r3, ip
 8015686:	fbb3 f2f1 	udiv	r2, r3, r1
 801568a:	fb01 3312 	mls	r3, r1, r2, r3
 801568e:	b29b      	uxth	r3, r3
 8015690:	6842      	ldr	r2, [r0, #4]
 8015692:	fbb2 f2f1 	udiv	r2, r2, r1
 8015696:	6801      	ldr	r1, [r0, #0]
 8015698:	fb02 f303 	mul.w	r3, r2, r3
 801569c:	7b02      	ldrb	r2, [r0, #12]
 801569e:	50ca      	str	r2, [r1, r3]
 80156a0:	f10c 0c01 	add.w	ip, ip, #1
 80156a4:	8901      	ldrh	r1, [r0, #8]
 80156a6:	fa1f f38c 	uxth.w	r3, ip
 80156aa:	4299      	cmp	r1, r3
 80156ac:	d8eb      	bhi.n	8015686 <uxr_reset_output_reliable_stream+0xa>
 80156ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80156b2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80156b6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80156ba:	4904      	ldr	r1, [pc, #16]	@ (80156cc <uxr_reset_output_reliable_stream+0x50>)
 80156bc:	f8c0 100e 	str.w	r1, [r0, #14]
 80156c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80156c4:	2300      	movs	r3, #0
 80156c6:	8242      	strh	r2, [r0, #18]
 80156c8:	8403      	strh	r3, [r0, #32]
 80156ca:	4770      	bx	lr
 80156cc:	ffff0000 	.word	0xffff0000

080156d0 <uxr_prepare_reliable_buffer_to_write>:
 80156d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156d4:	4604      	mov	r4, r0
 80156d6:	b091      	sub	sp, #68	@ 0x44
 80156d8:	8900      	ldrh	r0, [r0, #8]
 80156da:	89e6      	ldrh	r6, [r4, #14]
 80156dc:	6823      	ldr	r3, [r4, #0]
 80156de:	9204      	str	r2, [sp, #16]
 80156e0:	fbb6 f2f0 	udiv	r2, r6, r0
 80156e4:	fb00 6212 	mls	r2, r0, r2, r6
 80156e8:	b292      	uxth	r2, r2
 80156ea:	6865      	ldr	r5, [r4, #4]
 80156ec:	fbb5 f5f0 	udiv	r5, r5, r0
 80156f0:	fb05 3202 	mla	r2, r5, r2, r3
 80156f4:	3204      	adds	r2, #4
 80156f6:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80156fa:	f894 900c 	ldrb.w	r9, [r4, #12]
 80156fe:	9203      	str	r2, [sp, #12]
 8015700:	468b      	mov	fp, r1
 8015702:	1f2f      	subs	r7, r5, #4
 8015704:	2800      	cmp	r0, #0
 8015706:	f000 814c 	beq.w	80159a2 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801570a:	f04f 0c00 	mov.w	ip, #0
 801570e:	46e2      	mov	sl, ip
 8015710:	4661      	mov	r1, ip
 8015712:	fbb1 f2f0 	udiv	r2, r1, r0
 8015716:	fb00 1212 	mls	r2, r0, r2, r1
 801571a:	b292      	uxth	r2, r2
 801571c:	fb05 f202 	mul.w	r2, r5, r2
 8015720:	f10c 0c01 	add.w	ip, ip, #1
 8015724:	589a      	ldr	r2, [r3, r2]
 8015726:	454a      	cmp	r2, r9
 8015728:	bf08      	it	eq
 801572a:	f10a 0a01 	addeq.w	sl, sl, #1
 801572e:	fa1f f18c 	uxth.w	r1, ip
 8015732:	bf08      	it	eq
 8015734:	fa1f fa8a 	uxtheq.w	sl, sl
 8015738:	4281      	cmp	r1, r0
 801573a:	d3ea      	bcc.n	8015712 <uxr_prepare_reliable_buffer_to_write+0x42>
 801573c:	4640      	mov	r0, r8
 801573e:	2104      	movs	r1, #4
 8015740:	f8cd a014 	str.w	sl, [sp, #20]
 8015744:	f7f6 f888 	bl	800b858 <ucdr_alignment>
 8015748:	4480      	add	r8, r0
 801574a:	eb08 020b 	add.w	r2, r8, fp
 801574e:	42ba      	cmp	r2, r7
 8015750:	f240 80cd 	bls.w	80158ee <uxr_prepare_reliable_buffer_to_write+0x21e>
 8015754:	7b22      	ldrb	r2, [r4, #12]
 8015756:	445a      	add	r2, fp
 8015758:	42ba      	cmp	r2, r7
 801575a:	f240 80b5 	bls.w	80158c8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801575e:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8015762:	33fc      	adds	r3, #252	@ 0xfc
 8015764:	b2ba      	uxth	r2, r7
 8015766:	4413      	add	r3, r2
 8015768:	b29b      	uxth	r3, r3
 801576a:	fb0a f903 	mul.w	r9, sl, r3
 801576e:	45d9      	cmp	r9, fp
 8015770:	9305      	str	r3, [sp, #20]
 8015772:	9306      	str	r3, [sp, #24]
 8015774:	f0c0 80b7 	bcc.w	80158e6 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015778:	f108 0304 	add.w	r3, r8, #4
 801577c:	42bb      	cmp	r3, r7
 801577e:	f080 80db 	bcs.w	8015938 <uxr_prepare_reliable_buffer_to_write+0x268>
 8015782:	f1a2 0904 	sub.w	r9, r2, #4
 8015786:	eba9 0908 	sub.w	r9, r9, r8
 801578a:	9b05      	ldr	r3, [sp, #20]
 801578c:	fa1f f989 	uxth.w	r9, r9
 8015790:	ebab 0b09 	sub.w	fp, fp, r9
 8015794:	fbbb f2f3 	udiv	r2, fp, r3
 8015798:	fb03 b312 	mls	r3, r3, r2, fp
 801579c:	2b00      	cmp	r3, #0
 801579e:	f000 80c8 	beq.w	8015932 <uxr_prepare_reliable_buffer_to_write+0x262>
 80157a2:	3201      	adds	r2, #1
 80157a4:	b292      	uxth	r2, r2
 80157a6:	9306      	str	r3, [sp, #24]
 80157a8:	4552      	cmp	r2, sl
 80157aa:	f200 809c 	bhi.w	80158e6 <uxr_prepare_reliable_buffer_to_write+0x216>
 80157ae:	f10d 0b20 	add.w	fp, sp, #32
 80157b2:	2a00      	cmp	r2, #0
 80157b4:	d042      	beq.n	801583c <uxr_prepare_reliable_buffer_to_write+0x16c>
 80157b6:	f8cd 801c 	str.w	r8, [sp, #28]
 80157ba:	f04f 0a00 	mov.w	sl, #0
 80157be:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80157c2:	9505      	str	r5, [sp, #20]
 80157c4:	f10d 0b20 	add.w	fp, sp, #32
 80157c8:	4615      	mov	r5, r2
 80157ca:	e000      	b.n	80157ce <uxr_prepare_reliable_buffer_to_write+0xfe>
 80157cc:	46c1      	mov	r9, r8
 80157ce:	8920      	ldrh	r0, [r4, #8]
 80157d0:	fbb6 f2f0 	udiv	r2, r6, r0
 80157d4:	fb00 6112 	mls	r1, r0, r2, r6
 80157d8:	b28a      	uxth	r2, r1
 80157da:	6863      	ldr	r3, [r4, #4]
 80157dc:	fbb3 f1f0 	udiv	r1, r3, r0
 80157e0:	6823      	ldr	r3, [r4, #0]
 80157e2:	fb02 f101 	mul.w	r1, r2, r1
 80157e6:	3104      	adds	r1, #4
 80157e8:	4419      	add	r1, r3
 80157ea:	4658      	mov	r0, fp
 80157ec:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80157f0:	9200      	str	r2, [sp, #0]
 80157f2:	2300      	movs	r3, #0
 80157f4:	463a      	mov	r2, r7
 80157f6:	f7f6 f819 	bl	800b82c <ucdr_init_buffer_origin_offset>
 80157fa:	464a      	mov	r2, r9
 80157fc:	2300      	movs	r3, #0
 80157fe:	210d      	movs	r1, #13
 8015800:	4658      	mov	r0, fp
 8015802:	f7f9 fb69 	bl	800eed8 <uxr_buffer_submessage_header>
 8015806:	8921      	ldrh	r1, [r4, #8]
 8015808:	fbb6 f2f1 	udiv	r2, r6, r1
 801580c:	fb01 6212 	mls	r2, r1, r2, r6
 8015810:	b292      	uxth	r2, r2
 8015812:	6863      	ldr	r3, [r4, #4]
 8015814:	fbb3 f3f1 	udiv	r3, r3, r1
 8015818:	fb02 f303 	mul.w	r3, r2, r3
 801581c:	6822      	ldr	r2, [r4, #0]
 801581e:	4630      	mov	r0, r6
 8015820:	50d7      	str	r7, [r2, r3]
 8015822:	2101      	movs	r1, #1
 8015824:	f000 faf4 	bl	8015e10 <uxr_seq_num_add>
 8015828:	f10a 0a01 	add.w	sl, sl, #1
 801582c:	fa1f f38a 	uxth.w	r3, sl
 8015830:	429d      	cmp	r5, r3
 8015832:	4606      	mov	r6, r0
 8015834:	d8ca      	bhi.n	80157cc <uxr_prepare_reliable_buffer_to_write+0xfc>
 8015836:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801583a:	9d05      	ldr	r5, [sp, #20]
 801583c:	8920      	ldrh	r0, [r4, #8]
 801583e:	fbb6 f3f0 	udiv	r3, r6, r0
 8015842:	fb00 6313 	mls	r3, r0, r3, r6
 8015846:	b299      	uxth	r1, r3
 8015848:	6863      	ldr	r3, [r4, #4]
 801584a:	fbb3 f3f0 	udiv	r3, r3, r0
 801584e:	fb01 f303 	mul.w	r3, r1, r3
 8015852:	6821      	ldr	r1, [r4, #0]
 8015854:	3304      	adds	r3, #4
 8015856:	4419      	add	r1, r3
 8015858:	463a      	mov	r2, r7
 801585a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801585e:	9000      	str	r0, [sp, #0]
 8015860:	2300      	movs	r3, #0
 8015862:	4658      	mov	r0, fp
 8015864:	f7f5 ffe2 	bl	800b82c <ucdr_init_buffer_origin_offset>
 8015868:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801586c:	4658      	mov	r0, fp
 801586e:	fa1f f289 	uxth.w	r2, r9
 8015872:	2302      	movs	r3, #2
 8015874:	210d      	movs	r1, #13
 8015876:	f7f9 fb2f 	bl	800eed8 <uxr_buffer_submessage_header>
 801587a:	9b03      	ldr	r3, [sp, #12]
 801587c:	8927      	ldrh	r7, [r4, #8]
 801587e:	7b20      	ldrb	r0, [r4, #12]
 8015880:	f108 0104 	add.w	r1, r8, #4
 8015884:	440b      	add	r3, r1
 8015886:	4619      	mov	r1, r3
 8015888:	fbb6 f3f7 	udiv	r3, r6, r7
 801588c:	fb07 6313 	mls	r3, r7, r3, r6
 8015890:	f1a5 0208 	sub.w	r2, r5, #8
 8015894:	b29d      	uxth	r5, r3
 8015896:	3004      	adds	r0, #4
 8015898:	6863      	ldr	r3, [r4, #4]
 801589a:	fbb3 f3f7 	udiv	r3, r3, r7
 801589e:	fb05 f303 	mul.w	r3, r5, r3
 80158a2:	6825      	ldr	r5, [r4, #0]
 80158a4:	4448      	add	r0, r9
 80158a6:	50e8      	str	r0, [r5, r3]
 80158a8:	9d04      	ldr	r5, [sp, #16]
 80158aa:	eba2 0208 	sub.w	r2, r2, r8
 80158ae:	4628      	mov	r0, r5
 80158b0:	f7f5 ffce 	bl	800b850 <ucdr_init_buffer>
 80158b4:	4628      	mov	r0, r5
 80158b6:	493c      	ldr	r1, [pc, #240]	@ (80159a8 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80158b8:	4622      	mov	r2, r4
 80158ba:	f7f5 ff9d 	bl	800b7f8 <ucdr_set_on_full_buffer_callback>
 80158be:	2001      	movs	r0, #1
 80158c0:	81e6      	strh	r6, [r4, #14]
 80158c2:	b011      	add	sp, #68	@ 0x44
 80158c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158c8:	2101      	movs	r1, #1
 80158ca:	89e0      	ldrh	r0, [r4, #14]
 80158cc:	f000 faa0 	bl	8015e10 <uxr_seq_num_add>
 80158d0:	8921      	ldrh	r1, [r4, #8]
 80158d2:	4605      	mov	r5, r0
 80158d4:	8a60      	ldrh	r0, [r4, #18]
 80158d6:	f000 fa9b 	bl	8015e10 <uxr_seq_num_add>
 80158da:	4601      	mov	r1, r0
 80158dc:	4628      	mov	r0, r5
 80158de:	f000 fa9f 	bl	8015e20 <uxr_seq_num_cmp>
 80158e2:	2800      	cmp	r0, #0
 80158e4:	dd42      	ble.n	801596c <uxr_prepare_reliable_buffer_to_write+0x29c>
 80158e6:	2000      	movs	r0, #0
 80158e8:	b011      	add	sp, #68	@ 0x44
 80158ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158ee:	8921      	ldrh	r1, [r4, #8]
 80158f0:	8a60      	ldrh	r0, [r4, #18]
 80158f2:	9205      	str	r2, [sp, #20]
 80158f4:	f000 fa8c 	bl	8015e10 <uxr_seq_num_add>
 80158f8:	4601      	mov	r1, r0
 80158fa:	4630      	mov	r0, r6
 80158fc:	f000 fa90 	bl	8015e20 <uxr_seq_num_cmp>
 8015900:	2800      	cmp	r0, #0
 8015902:	9a05      	ldr	r2, [sp, #20]
 8015904:	dcef      	bgt.n	80158e6 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015906:	8927      	ldrh	r7, [r4, #8]
 8015908:	fbb6 f3f7 	udiv	r3, r6, r7
 801590c:	fb07 6313 	mls	r3, r7, r3, r6
 8015910:	b29d      	uxth	r5, r3
 8015912:	6863      	ldr	r3, [r4, #4]
 8015914:	6824      	ldr	r4, [r4, #0]
 8015916:	fbb3 f3f7 	udiv	r3, r3, r7
 801591a:	fb05 f303 	mul.w	r3, r5, r3
 801591e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8015922:	50e2      	str	r2, [r4, r3]
 8015924:	2300      	movs	r3, #0
 8015926:	f8cd 8000 	str.w	r8, [sp]
 801592a:	f7f5 ff7f 	bl	800b82c <ucdr_init_buffer_origin_offset>
 801592e:	2001      	movs	r0, #1
 8015930:	e7da      	b.n	80158e8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8015932:	b293      	uxth	r3, r2
 8015934:	461a      	mov	r2, r3
 8015936:	e737      	b.n	80157a8 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8015938:	4630      	mov	r0, r6
 801593a:	2101      	movs	r1, #1
 801593c:	9207      	str	r2, [sp, #28]
 801593e:	f000 fa67 	bl	8015e10 <uxr_seq_num_add>
 8015942:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015946:	fbb0 f1fc 	udiv	r1, r0, ip
 801594a:	fb0c 0111 	mls	r1, ip, r1, r0
 801594e:	4606      	mov	r6, r0
 8015950:	b288      	uxth	r0, r1
 8015952:	6863      	ldr	r3, [r4, #4]
 8015954:	fbb3 f1fc 	udiv	r1, r3, ip
 8015958:	6823      	ldr	r3, [r4, #0]
 801595a:	9a07      	ldr	r2, [sp, #28]
 801595c:	fb00 f101 	mul.w	r1, r0, r1
 8015960:	3104      	adds	r1, #4
 8015962:	440b      	add	r3, r1
 8015964:	9303      	str	r3, [sp, #12]
 8015966:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801596a:	e70a      	b.n	8015782 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801596c:	8921      	ldrh	r1, [r4, #8]
 801596e:	fbb5 f3f1 	udiv	r3, r5, r1
 8015972:	fb01 5313 	mls	r3, r1, r3, r5
 8015976:	b29a      	uxth	r2, r3
 8015978:	6863      	ldr	r3, [r4, #4]
 801597a:	fbb3 f3f1 	udiv	r3, r3, r1
 801597e:	6821      	ldr	r1, [r4, #0]
 8015980:	9804      	ldr	r0, [sp, #16]
 8015982:	fb02 f303 	mul.w	r3, r2, r3
 8015986:	3304      	adds	r3, #4
 8015988:	7b22      	ldrb	r2, [r4, #12]
 801598a:	4419      	add	r1, r3
 801598c:	445a      	add	r2, fp
 801598e:	f841 2c04 	str.w	r2, [r1, #-4]
 8015992:	7b23      	ldrb	r3, [r4, #12]
 8015994:	9300      	str	r3, [sp, #0]
 8015996:	2300      	movs	r3, #0
 8015998:	f7f5 ff48 	bl	800b82c <ucdr_init_buffer_origin_offset>
 801599c:	81e5      	strh	r5, [r4, #14]
 801599e:	2001      	movs	r0, #1
 80159a0:	e7a2      	b.n	80158e8 <uxr_prepare_reliable_buffer_to_write+0x218>
 80159a2:	4682      	mov	sl, r0
 80159a4:	e6ca      	b.n	801573c <uxr_prepare_reliable_buffer_to_write+0x6c>
 80159a6:	bf00      	nop
 80159a8:	080155b1 	.word	0x080155b1

080159ac <uxr_prepare_next_reliable_buffer_to_send>:
 80159ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ae:	4604      	mov	r4, r0
 80159b0:	460f      	mov	r7, r1
 80159b2:	8a00      	ldrh	r0, [r0, #16]
 80159b4:	2101      	movs	r1, #1
 80159b6:	4616      	mov	r6, r2
 80159b8:	461d      	mov	r5, r3
 80159ba:	f000 fa29 	bl	8015e10 <uxr_seq_num_add>
 80159be:	8028      	strh	r0, [r5, #0]
 80159c0:	8922      	ldrh	r2, [r4, #8]
 80159c2:	fbb0 f3f2 	udiv	r3, r0, r2
 80159c6:	fb02 0c13 	mls	ip, r2, r3, r0
 80159ca:	fa1f fc8c 	uxth.w	ip, ip
 80159ce:	6863      	ldr	r3, [r4, #4]
 80159d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80159d4:	fb0c fc03 	mul.w	ip, ip, r3
 80159d8:	6823      	ldr	r3, [r4, #0]
 80159da:	89e1      	ldrh	r1, [r4, #14]
 80159dc:	f10c 0c04 	add.w	ip, ip, #4
 80159e0:	4463      	add	r3, ip
 80159e2:	603b      	str	r3, [r7, #0]
 80159e4:	6823      	ldr	r3, [r4, #0]
 80159e6:	449c      	add	ip, r3
 80159e8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80159ec:	6033      	str	r3, [r6, #0]
 80159ee:	f000 fa17 	bl	8015e20 <uxr_seq_num_cmp>
 80159f2:	2800      	cmp	r0, #0
 80159f4:	dd01      	ble.n	80159fa <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80159f6:	2000      	movs	r0, #0
 80159f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159fa:	7b23      	ldrb	r3, [r4, #12]
 80159fc:	6832      	ldr	r2, [r6, #0]
 80159fe:	429a      	cmp	r2, r3
 8015a00:	d9f9      	bls.n	80159f6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015a02:	8a61      	ldrh	r1, [r4, #18]
 8015a04:	8a20      	ldrh	r0, [r4, #16]
 8015a06:	f000 fa07 	bl	8015e18 <uxr_seq_num_sub>
 8015a0a:	8923      	ldrh	r3, [r4, #8]
 8015a0c:	4283      	cmp	r3, r0
 8015a0e:	d0f2      	beq.n	80159f6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015a10:	8828      	ldrh	r0, [r5, #0]
 8015a12:	89e3      	ldrh	r3, [r4, #14]
 8015a14:	8220      	strh	r0, [r4, #16]
 8015a16:	4298      	cmp	r0, r3
 8015a18:	d001      	beq.n	8015a1e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8015a1a:	2001      	movs	r0, #1
 8015a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a1e:	2101      	movs	r1, #1
 8015a20:	f000 f9f6 	bl	8015e10 <uxr_seq_num_add>
 8015a24:	81e0      	strh	r0, [r4, #14]
 8015a26:	2001      	movs	r0, #1
 8015a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a2a:	bf00      	nop

08015a2c <uxr_update_output_stream_heartbeat_timestamp>:
 8015a2c:	b570      	push	{r4, r5, r6, lr}
 8015a2e:	8a01      	ldrh	r1, [r0, #16]
 8015a30:	4604      	mov	r4, r0
 8015a32:	8a40      	ldrh	r0, [r0, #18]
 8015a34:	4615      	mov	r5, r2
 8015a36:	461e      	mov	r6, r3
 8015a38:	f000 f9f2 	bl	8015e20 <uxr_seq_num_cmp>
 8015a3c:	2800      	cmp	r0, #0
 8015a3e:	db07      	blt.n	8015a50 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8015a40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015a44:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015a48:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8015a4c:	2000      	movs	r0, #0
 8015a4e:	bd70      	pop	{r4, r5, r6, pc}
 8015a50:	f894 0020 	ldrb.w	r0, [r4, #32]
 8015a54:	b940      	cbnz	r0, 8015a68 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8015a56:	2301      	movs	r3, #1
 8015a58:	f884 3020 	strb.w	r3, [r4, #32]
 8015a5c:	3564      	adds	r5, #100	@ 0x64
 8015a5e:	f146 0600 	adc.w	r6, r6, #0
 8015a62:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015a66:	bd70      	pop	{r4, r5, r6, pc}
 8015a68:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8015a6c:	4295      	cmp	r5, r2
 8015a6e:	eb76 0303 	sbcs.w	r3, r6, r3
 8015a72:	bfa5      	ittet	ge
 8015a74:	3001      	addge	r0, #1
 8015a76:	f884 0020 	strbge.w	r0, [r4, #32]
 8015a7a:	2000      	movlt	r0, #0
 8015a7c:	2001      	movge	r0, #1
 8015a7e:	e7ed      	b.n	8015a5c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08015a80 <uxr_begin_output_nack_buffer_it>:
 8015a80:	8a40      	ldrh	r0, [r0, #18]
 8015a82:	4770      	bx	lr

08015a84 <uxr_next_reliable_nack_buffer_to_send>:
 8015a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a88:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8015a8c:	b082      	sub	sp, #8
 8015a8e:	f1b8 0f00 	cmp.w	r8, #0
 8015a92:	d011      	beq.n	8015ab8 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8015a94:	4604      	mov	r4, r0
 8015a96:	8818      	ldrh	r0, [r3, #0]
 8015a98:	460e      	mov	r6, r1
 8015a9a:	4617      	mov	r7, r2
 8015a9c:	461d      	mov	r5, r3
 8015a9e:	2101      	movs	r1, #1
 8015aa0:	f000 f9b6 	bl	8015e10 <uxr_seq_num_add>
 8015aa4:	8028      	strh	r0, [r5, #0]
 8015aa6:	8a21      	ldrh	r1, [r4, #16]
 8015aa8:	f000 f9ba 	bl	8015e20 <uxr_seq_num_cmp>
 8015aac:	2800      	cmp	r0, #0
 8015aae:	dd07      	ble.n	8015ac0 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8015ab0:	f04f 0800 	mov.w	r8, #0
 8015ab4:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8015ab8:	4640      	mov	r0, r8
 8015aba:	b002      	add	sp, #8
 8015abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ac0:	8921      	ldrh	r1, [r4, #8]
 8015ac2:	8828      	ldrh	r0, [r5, #0]
 8015ac4:	6823      	ldr	r3, [r4, #0]
 8015ac6:	fbb0 f2f1 	udiv	r2, r0, r1
 8015aca:	fb01 0c12 	mls	ip, r1, r2, r0
 8015ace:	fa1f f28c 	uxth.w	r2, ip
 8015ad2:	9301      	str	r3, [sp, #4]
 8015ad4:	6863      	ldr	r3, [r4, #4]
 8015ad6:	fbb3 fcf1 	udiv	ip, r3, r1
 8015ada:	9b01      	ldr	r3, [sp, #4]
 8015adc:	fb02 fc0c 	mul.w	ip, r2, ip
 8015ae0:	f10c 0c04 	add.w	ip, ip, #4
 8015ae4:	4463      	add	r3, ip
 8015ae6:	6033      	str	r3, [r6, #0]
 8015ae8:	6823      	ldr	r3, [r4, #0]
 8015aea:	4463      	add	r3, ip
 8015aec:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015af0:	603b      	str	r3, [r7, #0]
 8015af2:	7b22      	ldrb	r2, [r4, #12]
 8015af4:	429a      	cmp	r2, r3
 8015af6:	d0d2      	beq.n	8015a9e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8015af8:	4640      	mov	r0, r8
 8015afa:	b002      	add	sp, #8
 8015afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b00 <uxr_process_acknack>:
 8015b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b02:	4604      	mov	r4, r0
 8015b04:	460e      	mov	r6, r1
 8015b06:	4610      	mov	r0, r2
 8015b08:	2101      	movs	r1, #1
 8015b0a:	f000 f985 	bl	8015e18 <uxr_seq_num_sub>
 8015b0e:	8a61      	ldrh	r1, [r4, #18]
 8015b10:	f000 f982 	bl	8015e18 <uxr_seq_num_sub>
 8015b14:	b1c0      	cbz	r0, 8015b48 <uxr_process_acknack+0x48>
 8015b16:	4605      	mov	r5, r0
 8015b18:	2700      	movs	r7, #0
 8015b1a:	2101      	movs	r1, #1
 8015b1c:	8a60      	ldrh	r0, [r4, #18]
 8015b1e:	f000 f977 	bl	8015e10 <uxr_seq_num_add>
 8015b22:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015b26:	fbb0 f1fc 	udiv	r1, r0, ip
 8015b2a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015b2e:	fb0c 0111 	mls	r1, ip, r1, r0
 8015b32:	b289      	uxth	r1, r1
 8015b34:	3701      	adds	r7, #1
 8015b36:	fbb3 f3fc 	udiv	r3, r3, ip
 8015b3a:	fb01 f303 	mul.w	r3, r1, r3
 8015b3e:	42bd      	cmp	r5, r7
 8015b40:	7b21      	ldrb	r1, [r4, #12]
 8015b42:	8260      	strh	r0, [r4, #18]
 8015b44:	50d1      	str	r1, [r2, r3]
 8015b46:	d1e8      	bne.n	8015b1a <uxr_process_acknack+0x1a>
 8015b48:	3e00      	subs	r6, #0
 8015b4a:	f04f 0300 	mov.w	r3, #0
 8015b4e:	bf18      	it	ne
 8015b50:	2601      	movne	r6, #1
 8015b52:	f884 3020 	strb.w	r3, [r4, #32]
 8015b56:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8015b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015b5c <uxr_is_output_up_to_date>:
 8015b5c:	8a01      	ldrh	r1, [r0, #16]
 8015b5e:	8a40      	ldrh	r0, [r0, #18]
 8015b60:	b508      	push	{r3, lr}
 8015b62:	f000 f95d 	bl	8015e20 <uxr_seq_num_cmp>
 8015b66:	fab0 f080 	clz	r0, r0
 8015b6a:	0940      	lsrs	r0, r0, #5
 8015b6c:	bd08      	pop	{r3, pc}
 8015b6e:	bf00      	nop

08015b70 <get_available_free_slots>:
 8015b70:	8902      	ldrh	r2, [r0, #8]
 8015b72:	b1da      	cbz	r2, 8015bac <get_available_free_slots+0x3c>
 8015b74:	b530      	push	{r4, r5, lr}
 8015b76:	2100      	movs	r1, #0
 8015b78:	6843      	ldr	r3, [r0, #4]
 8015b7a:	6805      	ldr	r5, [r0, #0]
 8015b7c:	7b04      	ldrb	r4, [r0, #12]
 8015b7e:	fbb3 fef2 	udiv	lr, r3, r2
 8015b82:	4608      	mov	r0, r1
 8015b84:	460b      	mov	r3, r1
 8015b86:	fbb3 fcf2 	udiv	ip, r3, r2
 8015b8a:	fb02 331c 	mls	r3, r2, ip, r3
 8015b8e:	b29b      	uxth	r3, r3
 8015b90:	fb0e f303 	mul.w	r3, lr, r3
 8015b94:	3101      	adds	r1, #1
 8015b96:	f855 c003 	ldr.w	ip, [r5, r3]
 8015b9a:	4564      	cmp	r4, ip
 8015b9c:	bf08      	it	eq
 8015b9e:	3001      	addeq	r0, #1
 8015ba0:	b28b      	uxth	r3, r1
 8015ba2:	bf08      	it	eq
 8015ba4:	b280      	uxtheq	r0, r0
 8015ba6:	4293      	cmp	r3, r2
 8015ba8:	d3ed      	bcc.n	8015b86 <get_available_free_slots+0x16>
 8015baa:	bd30      	pop	{r4, r5, pc}
 8015bac:	4610      	mov	r0, r2
 8015bae:	4770      	bx	lr

08015bb0 <uxr_buffer_request_data>:
 8015bb0:	b530      	push	{r4, r5, lr}
 8015bb2:	b095      	sub	sp, #84	@ 0x54
 8015bb4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8015bb8:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8015bba:	9303      	str	r3, [sp, #12]
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	2d00      	cmp	r5, #0
 8015bc0:	bf14      	ite	ne
 8015bc2:	2101      	movne	r1, #1
 8015bc4:	4611      	moveq	r1, r2
 8015bc6:	4604      	mov	r4, r0
 8015bc8:	f88d 301c 	strb.w	r3, [sp, #28]
 8015bcc:	f88d 201d 	strb.w	r2, [sp, #29]
 8015bd0:	f88d 201e 	strb.w	r2, [sp, #30]
 8015bd4:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8015bd8:	d021      	beq.n	8015c1e <uxr_buffer_request_data+0x6e>
 8015bda:	682a      	ldr	r2, [r5, #0]
 8015bdc:	686b      	ldr	r3, [r5, #4]
 8015bde:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8015be2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015be6:	2210      	movs	r2, #16
 8015be8:	2308      	movs	r3, #8
 8015bea:	2100      	movs	r1, #0
 8015bec:	e9cd 3100 	strd	r3, r1, [sp]
 8015bf0:	4620      	mov	r0, r4
 8015bf2:	9905      	ldr	r1, [sp, #20]
 8015bf4:	ab0c      	add	r3, sp, #48	@ 0x30
 8015bf6:	f7f8 fed1 	bl	800e99c <uxr_prepare_stream_to_write_submessage>
 8015bfa:	b918      	cbnz	r0, 8015c04 <uxr_buffer_request_data+0x54>
 8015bfc:	4604      	mov	r4, r0
 8015bfe:	4620      	mov	r0, r4
 8015c00:	b015      	add	sp, #84	@ 0x54
 8015c02:	bd30      	pop	{r4, r5, pc}
 8015c04:	9904      	ldr	r1, [sp, #16]
 8015c06:	aa06      	add	r2, sp, #24
 8015c08:	4620      	mov	r0, r4
 8015c0a:	f7f8 fffd 	bl	800ec08 <uxr_init_base_object_request>
 8015c0e:	a906      	add	r1, sp, #24
 8015c10:	4604      	mov	r4, r0
 8015c12:	a80c      	add	r0, sp, #48	@ 0x30
 8015c14:	f7fa faf8 	bl	8010208 <uxr_serialize_READ_DATA_Payload>
 8015c18:	4620      	mov	r0, r4
 8015c1a:	b015      	add	sp, #84	@ 0x54
 8015c1c:	bd30      	pop	{r4, r5, pc}
 8015c1e:	2208      	movs	r2, #8
 8015c20:	e7e2      	b.n	8015be8 <uxr_buffer_request_data+0x38>
 8015c22:	bf00      	nop

08015c24 <uxr_buffer_cancel_data>:
 8015c24:	b510      	push	{r4, lr}
 8015c26:	b094      	sub	sp, #80	@ 0x50
 8015c28:	2300      	movs	r3, #0
 8015c2a:	9202      	str	r2, [sp, #8]
 8015c2c:	9205      	str	r2, [sp, #20]
 8015c2e:	9301      	str	r3, [sp, #4]
 8015c30:	2201      	movs	r2, #1
 8015c32:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015c36:	f88d 301e 	strb.w	r3, [sp, #30]
 8015c3a:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8015c3e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015c42:	2308      	movs	r3, #8
 8015c44:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8015c48:	9300      	str	r3, [sp, #0]
 8015c4a:	2210      	movs	r2, #16
 8015c4c:	ab0c      	add	r3, sp, #48	@ 0x30
 8015c4e:	4604      	mov	r4, r0
 8015c50:	9103      	str	r1, [sp, #12]
 8015c52:	f7f8 fea3 	bl	800e99c <uxr_prepare_stream_to_write_submessage>
 8015c56:	b918      	cbnz	r0, 8015c60 <uxr_buffer_cancel_data+0x3c>
 8015c58:	4604      	mov	r4, r0
 8015c5a:	4620      	mov	r0, r4
 8015c5c:	b014      	add	sp, #80	@ 0x50
 8015c5e:	bd10      	pop	{r4, pc}
 8015c60:	9905      	ldr	r1, [sp, #20]
 8015c62:	aa06      	add	r2, sp, #24
 8015c64:	4620      	mov	r0, r4
 8015c66:	f7f8 ffcf 	bl	800ec08 <uxr_init_base_object_request>
 8015c6a:	a906      	add	r1, sp, #24
 8015c6c:	4604      	mov	r4, r0
 8015c6e:	a80c      	add	r0, sp, #48	@ 0x30
 8015c70:	f7fa faca 	bl	8010208 <uxr_serialize_READ_DATA_Payload>
 8015c74:	4620      	mov	r0, r4
 8015c76:	b014      	add	sp, #80	@ 0x50
 8015c78:	bd10      	pop	{r4, pc}
 8015c7a:	bf00      	nop

08015c7c <read_submessage_format>:
 8015c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c80:	b095      	sub	sp, #84	@ 0x54
 8015c82:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8015c86:	b113      	cbz	r3, 8015c8e <read_submessage_format+0x12>
 8015c88:	b015      	add	sp, #84	@ 0x54
 8015c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c8e:	460c      	mov	r4, r1
 8015c90:	4615      	mov	r5, r2
 8015c92:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8015c96:	4607      	mov	r7, r0
 8015c98:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8015c9a:	9004      	str	r0, [sp, #16]
 8015c9c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8015c9e:	9005      	str	r0, [sp, #20]
 8015ca0:	1a52      	subs	r2, r2, r1
 8015ca2:	a80c      	add	r0, sp, #48	@ 0x30
 8015ca4:	4699      	mov	r9, r3
 8015ca6:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8015caa:	f7f5 fdd1 	bl	800b850 <ucdr_init_buffer>
 8015cae:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015cb2:	a80c      	add	r0, sp, #48	@ 0x30
 8015cb4:	f7f5 fda0 	bl	800b7f8 <ucdr_set_on_full_buffer_callback>
 8015cb8:	69e2      	ldr	r2, [r4, #28]
 8015cba:	b19a      	cbz	r2, 8015ce4 <read_submessage_format+0x68>
 8015cbc:	f1b8 0f07 	cmp.w	r8, #7
 8015cc0:	f882 9014 	strb.w	r9, [r2, #20]
 8015cc4:	d040      	beq.n	8015d48 <read_submessage_format+0xcc>
 8015cc6:	f1b8 0f08 	cmp.w	r8, #8
 8015cca:	d02e      	beq.n	8015d2a <read_submessage_format+0xae>
 8015ccc:	f1b8 0f06 	cmp.w	r8, #6
 8015cd0:	d011      	beq.n	8015cf6 <read_submessage_format+0x7a>
 8015cd2:	2301      	movs	r3, #1
 8015cd4:	7513      	strb	r3, [r2, #20]
 8015cd6:	4629      	mov	r1, r5
 8015cd8:	4620      	mov	r0, r4
 8015cda:	f7f5 fe09 	bl	800b8f0 <ucdr_advance_buffer>
 8015cde:	b015      	add	sp, #84	@ 0x54
 8015ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ce4:	f1b8 0f07 	cmp.w	r8, #7
 8015ce8:	d02e      	beq.n	8015d48 <read_submessage_format+0xcc>
 8015cea:	f1b8 0f08 	cmp.w	r8, #8
 8015cee:	d01c      	beq.n	8015d2a <read_submessage_format+0xae>
 8015cf0:	f1b8 0f06 	cmp.w	r8, #6
 8015cf4:	d1ef      	bne.n	8015cd6 <read_submessage_format+0x5a>
 8015cf6:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8015cfa:	f1b8 0f00 	cmp.w	r8, #0
 8015cfe:	d011      	beq.n	8015d24 <read_submessage_format+0xa8>
 8015d00:	ab0c      	add	r3, sp, #48	@ 0x30
 8015d02:	e9cd 3500 	strd	r3, r5, [sp]
 8015d06:	2306      	movs	r3, #6
 8015d08:	f88d 3016 	strb.w	r3, [sp, #22]
 8015d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015d10:	9302      	str	r3, [sp, #8]
 8015d12:	4632      	mov	r2, r6
 8015d14:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015d18:	4638      	mov	r0, r7
 8015d1a:	47c0      	blx	r8
 8015d1c:	2301      	movs	r3, #1
 8015d1e:	69e2      	ldr	r2, [r4, #28]
 8015d20:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8015d24:	2a00      	cmp	r2, #0
 8015d26:	d1d4      	bne.n	8015cd2 <read_submessage_format+0x56>
 8015d28:	e7d5      	b.n	8015cd6 <read_submessage_format+0x5a>
 8015d2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d0f8      	beq.n	8015d24 <read_submessage_format+0xa8>
 8015d32:	a906      	add	r1, sp, #24
 8015d34:	a80c      	add	r0, sp, #48	@ 0x30
 8015d36:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8015d3a:	f7fa fb2b 	bl	8010394 <uxr_deserialize_SampleIdentity>
 8015d3e:	b9a0      	cbnz	r0, 8015d6a <read_submessage_format+0xee>
 8015d40:	69e2      	ldr	r2, [r4, #28]
 8015d42:	2a00      	cmp	r2, #0
 8015d44:	d1c5      	bne.n	8015cd2 <read_submessage_format+0x56>
 8015d46:	e7c6      	b.n	8015cd6 <read_submessage_format+0x5a>
 8015d48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8015d4c:	b13b      	cbz	r3, 8015d5e <read_submessage_format+0xe2>
 8015d4e:	a906      	add	r1, sp, #24
 8015d50:	a80c      	add	r0, sp, #48	@ 0x30
 8015d52:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8015d56:	f7f9 fff1 	bl	800fd3c <uxr_deserialize_BaseObjectRequest>
 8015d5a:	bb60      	cbnz	r0, 8015db6 <read_submessage_format+0x13a>
 8015d5c:	69e2      	ldr	r2, [r4, #28]
 8015d5e:	68a3      	ldr	r3, [r4, #8]
 8015d60:	442b      	add	r3, r5
 8015d62:	60a3      	str	r3, [r4, #8]
 8015d64:	2a00      	cmp	r2, #0
 8015d66:	d1b4      	bne.n	8015cd2 <read_submessage_format+0x56>
 8015d68:	e7b5      	b.n	8015cd6 <read_submessage_format+0x5a>
 8015d6a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8015d6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015d70:	1a52      	subs	r2, r2, r1
 8015d72:	eba8 0803 	sub.w	r8, r8, r3
 8015d76:	a80c      	add	r0, sp, #48	@ 0x30
 8015d78:	f7f5 fd6a 	bl	800b850 <ucdr_init_buffer>
 8015d7c:	44a8      	add	r8, r5
 8015d7e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015d82:	a80c      	add	r0, sp, #48	@ 0x30
 8015d84:	f7f5 fd38 	bl	800b7f8 <ucdr_set_on_full_buffer_callback>
 8015d88:	fa1f f888 	uxth.w	r8, r8
 8015d8c:	ab0c      	add	r3, sp, #48	@ 0x30
 8015d8e:	9300      	str	r3, [sp, #0]
 8015d90:	f8cd 8004 	str.w	r8, [sp, #4]
 8015d94:	2108      	movs	r1, #8
 8015d96:	f88d 1016 	strb.w	r1, [sp, #22]
 8015d9a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8015d9e:	9102      	str	r1, [sp, #8]
 8015da0:	ab06      	add	r3, sp, #24
 8015da2:	4632      	mov	r2, r6
 8015da4:	9905      	ldr	r1, [sp, #20]
 8015da6:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8015daa:	4638      	mov	r0, r7
 8015dac:	47b0      	blx	r6
 8015dae:	2301      	movs	r3, #1
 8015db0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8015db4:	e7c4      	b.n	8015d40 <read_submessage_format+0xc4>
 8015db6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8015dba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015dbc:	1a52      	subs	r2, r2, r1
 8015dbe:	a80c      	add	r0, sp, #48	@ 0x30
 8015dc0:	eba8 0803 	sub.w	r8, r8, r3
 8015dc4:	f7f5 fd44 	bl	800b850 <ucdr_init_buffer>
 8015dc8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015dcc:	a80c      	add	r0, sp, #48	@ 0x30
 8015dce:	f7f5 fd13 	bl	800b7f8 <ucdr_set_on_full_buffer_callback>
 8015dd2:	ab0c      	add	r3, sp, #48	@ 0x30
 8015dd4:	9300      	str	r3, [sp, #0]
 8015dd6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8015dda:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8015dde:	44a8      	add	r8, r5
 8015de0:	fa1f f888 	uxth.w	r8, r8
 8015de4:	f8cd 8004 	str.w	r8, [sp, #4]
 8015de8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015dec:	2107      	movs	r1, #7
 8015dee:	f88d 1016 	strb.w	r1, [sp, #22]
 8015df2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8015df6:	9102      	str	r1, [sp, #8]
 8015df8:	4632      	mov	r2, r6
 8015dfa:	b29b      	uxth	r3, r3
 8015dfc:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8015e00:	9905      	ldr	r1, [sp, #20]
 8015e02:	4638      	mov	r0, r7
 8015e04:	47b0      	blx	r6
 8015e06:	2301      	movs	r3, #1
 8015e08:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8015e0c:	e7a6      	b.n	8015d5c <read_submessage_format+0xe0>
 8015e0e:	bf00      	nop

08015e10 <uxr_seq_num_add>:
 8015e10:	4408      	add	r0, r1
 8015e12:	b280      	uxth	r0, r0
 8015e14:	4770      	bx	lr
 8015e16:	bf00      	nop

08015e18 <uxr_seq_num_sub>:
 8015e18:	1a40      	subs	r0, r0, r1
 8015e1a:	b280      	uxth	r0, r0
 8015e1c:	4770      	bx	lr
 8015e1e:	bf00      	nop

08015e20 <uxr_seq_num_cmp>:
 8015e20:	4288      	cmp	r0, r1
 8015e22:	d011      	beq.n	8015e48 <uxr_seq_num_cmp+0x28>
 8015e24:	d309      	bcc.n	8015e3a <uxr_seq_num_cmp+0x1a>
 8015e26:	4288      	cmp	r0, r1
 8015e28:	d910      	bls.n	8015e4c <uxr_seq_num_cmp+0x2c>
 8015e2a:	1a40      	subs	r0, r0, r1
 8015e2c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8015e30:	bfd4      	ite	le
 8015e32:	2001      	movle	r0, #1
 8015e34:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8015e38:	4770      	bx	lr
 8015e3a:	1a0b      	subs	r3, r1, r0
 8015e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015e40:	daf1      	bge.n	8015e26 <uxr_seq_num_cmp+0x6>
 8015e42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015e46:	4770      	bx	lr
 8015e48:	2000      	movs	r0, #0
 8015e4a:	4770      	bx	lr
 8015e4c:	2001      	movs	r0, #1
 8015e4e:	4770      	bx	lr

08015e50 <uxr_init_framing_io>:
 8015e50:	2300      	movs	r3, #0
 8015e52:	7041      	strb	r1, [r0, #1]
 8015e54:	7003      	strb	r3, [r0, #0]
 8015e56:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8015e58:	4770      	bx	lr
 8015e5a:	bf00      	nop

08015e5c <uxr_write_framed_msg>:
 8015e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e60:	4617      	mov	r7, r2
 8015e62:	7842      	ldrb	r2, [r0, #1]
 8015e64:	b083      	sub	sp, #12
 8015e66:	460e      	mov	r6, r1
 8015e68:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8015e6c:	469a      	mov	sl, r3
 8015e6e:	2901      	cmp	r1, #1
 8015e70:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8015e74:	4604      	mov	r4, r0
 8015e76:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8015e7a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8015e7e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8015e82:	f240 8137 	bls.w	80160f4 <uxr_write_framed_msg+0x298>
 8015e86:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015e8a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8015e8e:	2901      	cmp	r1, #1
 8015e90:	f04f 0202 	mov.w	r2, #2
 8015e94:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015e98:	f240 808f 	bls.w	8015fba <uxr_write_framed_msg+0x15e>
 8015e9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e9e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8015ea2:	b2dd      	uxtb	r5, r3
 8015ea4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015ea8:	2203      	movs	r2, #3
 8015eaa:	2901      	cmp	r1, #1
 8015eac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015eb0:	f240 809a 	bls.w	8015fe8 <uxr_write_framed_msg+0x18c>
 8015eb4:	18a1      	adds	r1, r4, r2
 8015eb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015eb8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8015ebc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015ec0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015ec4:	3201      	adds	r2, #1
 8015ec6:	2801      	cmp	r0, #1
 8015ec8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015ecc:	f240 80a0 	bls.w	8016010 <uxr_write_framed_msg+0x1b4>
 8015ed0:	18a0      	adds	r0, r4, r2
 8015ed2:	3201      	adds	r2, #1
 8015ed4:	b2d2      	uxtb	r2, r2
 8015ed6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015eda:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	f000 80a9 	beq.w	8016036 <uxr_write_framed_msg+0x1da>
 8015ee4:	f04f 0900 	mov.w	r9, #0
 8015ee8:	46c8      	mov	r8, r9
 8015eea:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015eee:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015ef2:	2901      	cmp	r1, #1
 8015ef4:	f240 80c3 	bls.w	801607e <uxr_write_framed_msg+0x222>
 8015ef8:	2a29      	cmp	r2, #41	@ 0x29
 8015efa:	f200 809f 	bhi.w	801603c <uxr_write_framed_msg+0x1e0>
 8015efe:	18a1      	adds	r1, r4, r2
 8015f00:	3201      	adds	r2, #1
 8015f02:	b2d2      	uxtb	r2, r2
 8015f04:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8015f08:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015f0c:	ea89 0303 	eor.w	r3, r9, r3
 8015f10:	498c      	ldr	r1, [pc, #560]	@ (8016144 <uxr_write_framed_msg+0x2e8>)
 8015f12:	b2db      	uxtb	r3, r3
 8015f14:	f108 0801 	add.w	r8, r8, #1
 8015f18:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015f1c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8015f20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015f22:	4543      	cmp	r3, r8
 8015f24:	d8e1      	bhi.n	8015eea <uxr_write_framed_msg+0x8e>
 8015f26:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015f2a:	fa5f f889 	uxtb.w	r8, r9
 8015f2e:	9301      	str	r3, [sp, #4]
 8015f30:	f04f 0900 	mov.w	r9, #0
 8015f34:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8015f38:	fa5f f18a 	uxtb.w	r1, sl
 8015f3c:	2901      	cmp	r1, #1
 8015f3e:	d921      	bls.n	8015f84 <uxr_write_framed_msg+0x128>
 8015f40:	2a29      	cmp	r2, #41	@ 0x29
 8015f42:	f240 80af 	bls.w	80160a4 <uxr_write_framed_msg+0x248>
 8015f46:	2500      	movs	r5, #0
 8015f48:	e000      	b.n	8015f4c <uxr_write_framed_msg+0xf0>
 8015f4a:	b160      	cbz	r0, 8015f66 <uxr_write_framed_msg+0x10a>
 8015f4c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015f50:	1b52      	subs	r2, r2, r5
 8015f52:	465b      	mov	r3, fp
 8015f54:	4421      	add	r1, r4
 8015f56:	4638      	mov	r0, r7
 8015f58:	47b0      	blx	r6
 8015f5a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015f5e:	4405      	add	r5, r0
 8015f60:	4295      	cmp	r5, r2
 8015f62:	d3f2      	bcc.n	8015f4a <uxr_write_framed_msg+0xee>
 8015f64:	d003      	beq.n	8015f6e <uxr_write_framed_msg+0x112>
 8015f66:	2000      	movs	r0, #0
 8015f68:	b003      	add	sp, #12
 8015f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f6e:	fa5f f18a 	uxtb.w	r1, sl
 8015f72:	f04f 0300 	mov.w	r3, #0
 8015f76:	2901      	cmp	r1, #1
 8015f78:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015f7c:	f04f 0200 	mov.w	r2, #0
 8015f80:	f200 8090 	bhi.w	80160a4 <uxr_write_framed_msg+0x248>
 8015f84:	1c51      	adds	r1, r2, #1
 8015f86:	b2c9      	uxtb	r1, r1
 8015f88:	2929      	cmp	r1, #41	@ 0x29
 8015f8a:	d8dc      	bhi.n	8015f46 <uxr_write_framed_msg+0xea>
 8015f8c:	18a5      	adds	r5, r4, r2
 8015f8e:	4421      	add	r1, r4
 8015f90:	3202      	adds	r2, #2
 8015f92:	f088 0820 	eor.w	r8, r8, #32
 8015f96:	4648      	mov	r0, r9
 8015f98:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8015f9c:	b2d2      	uxtb	r2, r2
 8015f9e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8015fa2:	f04f 0901 	mov.w	r9, #1
 8015fa6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8015faa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015fae:	2800      	cmp	r0, #0
 8015fb0:	f040 8085 	bne.w	80160be <uxr_write_framed_msg+0x262>
 8015fb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015fb8:	e7bc      	b.n	8015f34 <uxr_write_framed_msg+0xd8>
 8015fba:	4611      	mov	r1, r2
 8015fbc:	f04f 0c03 	mov.w	ip, #3
 8015fc0:	2204      	movs	r2, #4
 8015fc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015fc4:	4421      	add	r1, r4
 8015fc6:	b2dd      	uxtb	r5, r3
 8015fc8:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8015fcc:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8015fd0:	44a4      	add	ip, r4
 8015fd2:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015fd6:	f080 0020 	eor.w	r0, r0, #32
 8015fda:	2901      	cmp	r1, #1
 8015fdc:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8015fe0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015fe4:	f63f af66 	bhi.w	8015eb4 <uxr_write_framed_msg+0x58>
 8015fe8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015fea:	18a0      	adds	r0, r4, r2
 8015fec:	f085 0520 	eor.w	r5, r5, #32
 8015ff0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015ff4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015ff8:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8015ffc:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8016000:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8016004:	3202      	adds	r2, #2
 8016006:	2801      	cmp	r0, #1
 8016008:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801600c:	f63f af60 	bhi.w	8015ed0 <uxr_write_framed_msg+0x74>
 8016010:	1c50      	adds	r0, r2, #1
 8016012:	18a5      	adds	r5, r4, r2
 8016014:	fa54 f080 	uxtab	r0, r4, r0
 8016018:	3202      	adds	r2, #2
 801601a:	f081 0120 	eor.w	r1, r1, #32
 801601e:	b2d2      	uxtb	r2, r2
 8016020:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8016024:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8016028:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801602c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016030:	2b00      	cmp	r3, #0
 8016032:	f47f af57 	bne.w	8015ee4 <uxr_write_framed_msg+0x88>
 8016036:	9301      	str	r3, [sp, #4]
 8016038:	4698      	mov	r8, r3
 801603a:	e779      	b.n	8015f30 <uxr_write_framed_msg+0xd4>
 801603c:	2500      	movs	r5, #0
 801603e:	e001      	b.n	8016044 <uxr_write_framed_msg+0x1e8>
 8016040:	2800      	cmp	r0, #0
 8016042:	d090      	beq.n	8015f66 <uxr_write_framed_msg+0x10a>
 8016044:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8016048:	1b52      	subs	r2, r2, r5
 801604a:	465b      	mov	r3, fp
 801604c:	4421      	add	r1, r4
 801604e:	4638      	mov	r0, r7
 8016050:	47b0      	blx	r6
 8016052:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016056:	4405      	add	r5, r0
 8016058:	4295      	cmp	r5, r2
 801605a:	d3f1      	bcc.n	8016040 <uxr_write_framed_msg+0x1e4>
 801605c:	d183      	bne.n	8015f66 <uxr_write_framed_msg+0x10a>
 801605e:	f04f 0300 	mov.w	r3, #0
 8016062:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016066:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016068:	4543      	cmp	r3, r8
 801606a:	d964      	bls.n	8016136 <uxr_write_framed_msg+0x2da>
 801606c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8016070:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8016074:	2901      	cmp	r1, #1
 8016076:	f04f 0200 	mov.w	r2, #0
 801607a:	f63f af3d 	bhi.w	8015ef8 <uxr_write_framed_msg+0x9c>
 801607e:	1c51      	adds	r1, r2, #1
 8016080:	b2c9      	uxtb	r1, r1
 8016082:	2929      	cmp	r1, #41	@ 0x29
 8016084:	d8da      	bhi.n	801603c <uxr_write_framed_msg+0x1e0>
 8016086:	18a0      	adds	r0, r4, r2
 8016088:	4421      	add	r1, r4
 801608a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 801608e:	3202      	adds	r2, #2
 8016090:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8016094:	b2d2      	uxtb	r2, r2
 8016096:	f083 0020 	eor.w	r0, r3, #32
 801609a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801609e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80160a2:	e733      	b.n	8015f0c <uxr_write_framed_msg+0xb0>
 80160a4:	18a1      	adds	r1, r4, r2
 80160a6:	3201      	adds	r2, #1
 80160a8:	4648      	mov	r0, r9
 80160aa:	b2d2      	uxtb	r2, r2
 80160ac:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80160b0:	f04f 0901 	mov.w	r9, #1
 80160b4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80160b8:	2800      	cmp	r0, #0
 80160ba:	f43f af7b 	beq.w	8015fb4 <uxr_write_framed_msg+0x158>
 80160be:	2500      	movs	r5, #0
 80160c0:	e002      	b.n	80160c8 <uxr_write_framed_msg+0x26c>
 80160c2:	2800      	cmp	r0, #0
 80160c4:	f43f af4f 	beq.w	8015f66 <uxr_write_framed_msg+0x10a>
 80160c8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80160cc:	1b52      	subs	r2, r2, r5
 80160ce:	465b      	mov	r3, fp
 80160d0:	4421      	add	r1, r4
 80160d2:	4638      	mov	r0, r7
 80160d4:	47b0      	blx	r6
 80160d6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80160da:	4405      	add	r5, r0
 80160dc:	4295      	cmp	r5, r2
 80160de:	d3f0      	bcc.n	80160c2 <uxr_write_framed_msg+0x266>
 80160e0:	f47f af41 	bne.w	8015f66 <uxr_write_framed_msg+0x10a>
 80160e4:	2300      	movs	r3, #0
 80160e6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80160ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80160ec:	b298      	uxth	r0, r3
 80160ee:	b003      	add	sp, #12
 80160f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160f4:	217d      	movs	r1, #125	@ 0x7d
 80160f6:	f082 0220 	eor.w	r2, r2, #32
 80160fa:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80160fe:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8016102:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8016106:	2901      	cmp	r1, #1
 8016108:	f04f 0203 	mov.w	r2, #3
 801610c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016110:	d804      	bhi.n	801611c <uxr_write_framed_msg+0x2c0>
 8016112:	4611      	mov	r1, r2
 8016114:	f04f 0c04 	mov.w	ip, #4
 8016118:	2205      	movs	r2, #5
 801611a:	e752      	b.n	8015fc2 <uxr_write_framed_msg+0x166>
 801611c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801611e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8016122:	b2dd      	uxtb	r5, r3
 8016124:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8016128:	2204      	movs	r2, #4
 801612a:	2901      	cmp	r1, #1
 801612c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016130:	f63f aec0 	bhi.w	8015eb4 <uxr_write_framed_msg+0x58>
 8016134:	e758      	b.n	8015fe8 <uxr_write_framed_msg+0x18c>
 8016136:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801613a:	fa5f f889 	uxtb.w	r8, r9
 801613e:	9301      	str	r3, [sp, #4]
 8016140:	2200      	movs	r2, #0
 8016142:	e6f5      	b.n	8015f30 <uxr_write_framed_msg+0xd4>
 8016144:	08019318 	.word	0x08019318

08016148 <uxr_framing_read_transport>:
 8016148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801614c:	4604      	mov	r4, r0
 801614e:	b083      	sub	sp, #12
 8016150:	461f      	mov	r7, r3
 8016152:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8016156:	4689      	mov	r9, r1
 8016158:	4692      	mov	sl, r2
 801615a:	f7f8 ff03 	bl	800ef64 <uxr_millis>
 801615e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016162:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8016166:	42b3      	cmp	r3, r6
 8016168:	4680      	mov	r8, r0
 801616a:	d061      	beq.n	8016230 <uxr_framing_read_transport+0xe8>
 801616c:	d81c      	bhi.n	80161a8 <uxr_framing_read_transport+0x60>
 801616e:	1e75      	subs	r5, r6, #1
 8016170:	1aed      	subs	r5, r5, r3
 8016172:	b2ed      	uxtb	r5, r5
 8016174:	2600      	movs	r6, #0
 8016176:	455d      	cmp	r5, fp
 8016178:	d81f      	bhi.n	80161ba <uxr_framing_read_transport+0x72>
 801617a:	19ab      	adds	r3, r5, r6
 801617c:	455b      	cmp	r3, fp
 801617e:	bf84      	itt	hi
 8016180:	ebab 0605 	subhi.w	r6, fp, r5
 8016184:	b2f6      	uxtbhi	r6, r6
 8016186:	b9ed      	cbnz	r5, 80161c4 <uxr_framing_read_transport+0x7c>
 8016188:	f04f 0b00 	mov.w	fp, #0
 801618c:	f7f8 feea 	bl	800ef64 <uxr_millis>
 8016190:	683b      	ldr	r3, [r7, #0]
 8016192:	eba0 0808 	sub.w	r8, r0, r8
 8016196:	eba3 0308 	sub.w	r3, r3, r8
 801619a:	4658      	mov	r0, fp
 801619c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80161a0:	603b      	str	r3, [r7, #0]
 80161a2:	b003      	add	sp, #12
 80161a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a8:	2e00      	cmp	r6, #0
 80161aa:	d049      	beq.n	8016240 <uxr_framing_read_transport+0xf8>
 80161ac:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80161b0:	b2ed      	uxtb	r5, r5
 80161b2:	3e01      	subs	r6, #1
 80161b4:	455d      	cmp	r5, fp
 80161b6:	b2f6      	uxtb	r6, r6
 80161b8:	d9df      	bls.n	801617a <uxr_framing_read_transport+0x32>
 80161ba:	fa5f f58b 	uxtb.w	r5, fp
 80161be:	2600      	movs	r6, #0
 80161c0:	2d00      	cmp	r5, #0
 80161c2:	d0e1      	beq.n	8016188 <uxr_framing_read_transport+0x40>
 80161c4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80161c8:	3102      	adds	r1, #2
 80161ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80161cc:	9300      	str	r3, [sp, #0]
 80161ce:	683b      	ldr	r3, [r7, #0]
 80161d0:	4421      	add	r1, r4
 80161d2:	462a      	mov	r2, r5
 80161d4:	4650      	mov	r0, sl
 80161d6:	47c8      	blx	r9
 80161d8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80161dc:	4a1a      	ldr	r2, [pc, #104]	@ (8016248 <uxr_framing_read_transport+0x100>)
 80161de:	4403      	add	r3, r0
 80161e0:	0859      	lsrs	r1, r3, #1
 80161e2:	fba2 2101 	umull	r2, r1, r2, r1
 80161e6:	0889      	lsrs	r1, r1, #2
 80161e8:	222a      	movs	r2, #42	@ 0x2a
 80161ea:	fb02 3111 	mls	r1, r2, r1, r3
 80161ee:	4683      	mov	fp, r0
 80161f0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80161f4:	2800      	cmp	r0, #0
 80161f6:	d0c7      	beq.n	8016188 <uxr_framing_read_transport+0x40>
 80161f8:	42a8      	cmp	r0, r5
 80161fa:	d1c7      	bne.n	801618c <uxr_framing_read_transport+0x44>
 80161fc:	2e00      	cmp	r6, #0
 80161fe:	d0c5      	beq.n	801618c <uxr_framing_read_transport+0x44>
 8016200:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016202:	9300      	str	r3, [sp, #0]
 8016204:	3102      	adds	r1, #2
 8016206:	4632      	mov	r2, r6
 8016208:	4421      	add	r1, r4
 801620a:	2300      	movs	r3, #0
 801620c:	4650      	mov	r0, sl
 801620e:	47c8      	blx	r9
 8016210:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016214:	4a0c      	ldr	r2, [pc, #48]	@ (8016248 <uxr_framing_read_transport+0x100>)
 8016216:	180b      	adds	r3, r1, r0
 8016218:	0859      	lsrs	r1, r3, #1
 801621a:	fba2 1201 	umull	r1, r2, r2, r1
 801621e:	0892      	lsrs	r2, r2, #2
 8016220:	212a      	movs	r1, #42	@ 0x2a
 8016222:	fb01 3312 	mls	r3, r1, r2, r3
 8016226:	eb00 0b05 	add.w	fp, r0, r5
 801622a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801622e:	e7ad      	b.n	801618c <uxr_framing_read_transport+0x44>
 8016230:	2600      	movs	r6, #0
 8016232:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8016236:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8016238:	d9bf      	bls.n	80161ba <uxr_framing_read_transport+0x72>
 801623a:	2102      	movs	r1, #2
 801623c:	2529      	movs	r5, #41	@ 0x29
 801623e:	e7c4      	b.n	80161ca <uxr_framing_read_transport+0x82>
 8016240:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8016244:	b2ed      	uxtb	r5, r5
 8016246:	e796      	b.n	8016176 <uxr_framing_read_transport+0x2e>
 8016248:	30c30c31 	.word	0x30c30c31

0801624c <uxr_read_framed_msg>:
 801624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016250:	461e      	mov	r6, r3
 8016252:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8016256:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801625a:	429d      	cmp	r5, r3
 801625c:	b083      	sub	sp, #12
 801625e:	4604      	mov	r4, r0
 8016260:	4688      	mov	r8, r1
 8016262:	4691      	mov	r9, r2
 8016264:	f000 8188 	beq.w	8016578 <uxr_read_framed_msg+0x32c>
 8016268:	7823      	ldrb	r3, [r4, #0]
 801626a:	4dc1      	ldr	r5, [pc, #772]	@ (8016570 <uxr_read_framed_msg+0x324>)
 801626c:	4fc1      	ldr	r7, [pc, #772]	@ (8016574 <uxr_read_framed_msg+0x328>)
 801626e:	2b07      	cmp	r3, #7
 8016270:	d8fd      	bhi.n	801626e <uxr_read_framed_msg+0x22>
 8016272:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016276:	0115      	.short	0x0115
 8016278:	00d600f6 	.word	0x00d600f6
 801627c:	009000b9 	.word	0x009000b9
 8016280:	0030004d 	.word	0x0030004d
 8016284:	0008      	.short	0x0008
 8016286:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801628a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801628e:	4299      	cmp	r1, r3
 8016290:	f000 814a 	beq.w	8016528 <uxr_read_framed_msg+0x2dc>
 8016294:	18e2      	adds	r2, r4, r3
 8016296:	7892      	ldrb	r2, [r2, #2]
 8016298:	2a7d      	cmp	r2, #125	@ 0x7d
 801629a:	f000 8199 	beq.w	80165d0 <uxr_read_framed_msg+0x384>
 801629e:	3301      	adds	r3, #1
 80162a0:	0858      	lsrs	r0, r3, #1
 80162a2:	fba5 1000 	umull	r1, r0, r5, r0
 80162a6:	0880      	lsrs	r0, r0, #2
 80162a8:	212a      	movs	r1, #42	@ 0x2a
 80162aa:	fb01 3310 	mls	r3, r1, r0, r3
 80162ae:	2a7e      	cmp	r2, #126	@ 0x7e
 80162b0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80162b4:	f000 8252 	beq.w	801675c <uxr_read_framed_msg+0x510>
 80162b8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80162ba:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80162bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80162c0:	b29b      	uxth	r3, r3
 80162c2:	2200      	movs	r2, #0
 80162c4:	4299      	cmp	r1, r3
 80162c6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80162c8:	7022      	strb	r2, [r4, #0]
 80162ca:	f000 8179 	beq.w	80165c0 <uxr_read_framed_msg+0x374>
 80162ce:	2000      	movs	r0, #0
 80162d0:	b003      	add	sp, #12
 80162d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162d6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80162da:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80162de:	4299      	cmp	r1, r3
 80162e0:	f000 8131 	beq.w	8016546 <uxr_read_framed_msg+0x2fa>
 80162e4:	18e2      	adds	r2, r4, r3
 80162e6:	7890      	ldrb	r0, [r2, #2]
 80162e8:	287d      	cmp	r0, #125	@ 0x7d
 80162ea:	f000 8190 	beq.w	801660e <uxr_read_framed_msg+0x3c2>
 80162ee:	3301      	adds	r3, #1
 80162f0:	085a      	lsrs	r2, r3, #1
 80162f2:	fba5 1202 	umull	r1, r2, r5, r2
 80162f6:	0892      	lsrs	r2, r2, #2
 80162f8:	212a      	movs	r1, #42	@ 0x2a
 80162fa:	fb01 3312 	mls	r3, r1, r2, r3
 80162fe:	287e      	cmp	r0, #126	@ 0x7e
 8016300:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016304:	f000 821a 	beq.w	801673c <uxr_read_framed_msg+0x4f0>
 8016308:	2307      	movs	r3, #7
 801630a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801630c:	7023      	strb	r3, [r4, #0]
 801630e:	e7ae      	b.n	801626e <uxr_read_framed_msg+0x22>
 8016310:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016312:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8016316:	459e      	cmp	lr, r3
 8016318:	d938      	bls.n	801638c <uxr_read_framed_msg+0x140>
 801631a:	ee07 8a90 	vmov	s15, r8
 801631e:	212a      	movs	r1, #42	@ 0x2a
 8016320:	e020      	b.n	8016364 <uxr_read_framed_msg+0x118>
 8016322:	f89b c002 	ldrb.w	ip, [fp, #2]
 8016326:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801632a:	f000 80d4 	beq.w	80164d6 <uxr_read_framed_msg+0x28a>
 801632e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8016332:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016336:	f000 8219 	beq.w	801676c <uxr_read_framed_msg+0x520>
 801633a:	f806 c003 	strb.w	ip, [r6, r3]
 801633e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8016342:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016344:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8016348:	ea8a 000c 	eor.w	r0, sl, ip
 801634c:	b2c0      	uxtb	r0, r0
 801634e:	3301      	adds	r3, #1
 8016350:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8016354:	b29b      	uxth	r3, r3
 8016356:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801635a:	4573      	cmp	r3, lr
 801635c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801635e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8016360:	f080 8120 	bcs.w	80165a4 <uxr_read_framed_msg+0x358>
 8016364:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8016368:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801636c:	f100 0c01 	add.w	ip, r0, #1
 8016370:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016374:	fba5 8202 	umull	r8, r2, r5, r2
 8016378:	0892      	lsrs	r2, r2, #2
 801637a:	4582      	cmp	sl, r0
 801637c:	eb04 0b00 	add.w	fp, r4, r0
 8016380:	fb01 c212 	mls	r2, r1, r2, ip
 8016384:	d1cd      	bne.n	8016322 <uxr_read_framed_msg+0xd6>
 8016386:	ee17 8a90 	vmov	r8, s15
 801638a:	459e      	cmp	lr, r3
 801638c:	f040 8111 	bne.w	80165b2 <uxr_read_framed_msg+0x366>
 8016390:	2306      	movs	r3, #6
 8016392:	7023      	strb	r3, [r4, #0]
 8016394:	e76b      	b.n	801626e <uxr_read_framed_msg+0x22>
 8016396:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801639a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801639e:	4298      	cmp	r0, r3
 80163a0:	f000 80c2 	beq.w	8016528 <uxr_read_framed_msg+0x2dc>
 80163a4:	18e2      	adds	r2, r4, r3
 80163a6:	7891      	ldrb	r1, [r2, #2]
 80163a8:	297d      	cmp	r1, #125	@ 0x7d
 80163aa:	f000 814c 	beq.w	8016646 <uxr_read_framed_msg+0x3fa>
 80163ae:	3301      	adds	r3, #1
 80163b0:	085a      	lsrs	r2, r3, #1
 80163b2:	fba5 0202 	umull	r0, r2, r5, r2
 80163b6:	0892      	lsrs	r2, r2, #2
 80163b8:	202a      	movs	r0, #42	@ 0x2a
 80163ba:	fb00 3312 	mls	r3, r0, r2, r3
 80163be:	297e      	cmp	r1, #126	@ 0x7e
 80163c0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80163c4:	f000 81ca 	beq.w	801675c <uxr_read_framed_msg+0x510>
 80163c8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80163ca:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80163ce:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80163d0:	b29b      	uxth	r3, r3
 80163d2:	2000      	movs	r0, #0
 80163d4:	428b      	cmp	r3, r1
 80163d6:	8623      	strh	r3, [r4, #48]	@ 0x30
 80163d8:	8660      	strh	r0, [r4, #50]	@ 0x32
 80163da:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80163dc:	f240 80df 	bls.w	801659e <uxr_read_framed_msg+0x352>
 80163e0:	7020      	strb	r0, [r4, #0]
 80163e2:	b003      	add	sp, #12
 80163e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163e8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80163ec:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80163f0:	4299      	cmp	r1, r3
 80163f2:	f000 80a8 	beq.w	8016546 <uxr_read_framed_msg+0x2fa>
 80163f6:	18e2      	adds	r2, r4, r3
 80163f8:	7890      	ldrb	r0, [r2, #2]
 80163fa:	287d      	cmp	r0, #125	@ 0x7d
 80163fc:	f000 8164 	beq.w	80166c8 <uxr_read_framed_msg+0x47c>
 8016400:	3301      	adds	r3, #1
 8016402:	085a      	lsrs	r2, r3, #1
 8016404:	fba5 1202 	umull	r1, r2, r5, r2
 8016408:	0892      	lsrs	r2, r2, #2
 801640a:	212a      	movs	r1, #42	@ 0x2a
 801640c:	fb01 3312 	mls	r3, r1, r2, r3
 8016410:	287e      	cmp	r0, #126	@ 0x7e
 8016412:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016416:	f000 8191 	beq.w	801673c <uxr_read_framed_msg+0x4f0>
 801641a:	2304      	movs	r3, #4
 801641c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801641e:	7023      	strb	r3, [r4, #0]
 8016420:	e725      	b.n	801626e <uxr_read_framed_msg+0x22>
 8016422:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016426:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801642a:	4290      	cmp	r0, r2
 801642c:	f000 80b3 	beq.w	8016596 <uxr_read_framed_msg+0x34a>
 8016430:	18a3      	adds	r3, r4, r2
 8016432:	7899      	ldrb	r1, [r3, #2]
 8016434:	297d      	cmp	r1, #125	@ 0x7d
 8016436:	f000 8164 	beq.w	8016702 <uxr_read_framed_msg+0x4b6>
 801643a:	3201      	adds	r2, #1
 801643c:	0850      	lsrs	r0, r2, #1
 801643e:	fba5 3000 	umull	r3, r0, r5, r0
 8016442:	0880      	lsrs	r0, r0, #2
 8016444:	232a      	movs	r3, #42	@ 0x2a
 8016446:	fb03 2210 	mls	r2, r3, r0, r2
 801644a:	297e      	cmp	r1, #126	@ 0x7e
 801644c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016450:	f000 8188 	beq.w	8016764 <uxr_read_framed_msg+0x518>
 8016454:	7863      	ldrb	r3, [r4, #1]
 8016456:	428b      	cmp	r3, r1
 8016458:	bf0c      	ite	eq
 801645a:	2303      	moveq	r3, #3
 801645c:	2300      	movne	r3, #0
 801645e:	7023      	strb	r3, [r4, #0]
 8016460:	e705      	b.n	801626e <uxr_read_framed_msg+0x22>
 8016462:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016466:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801646a:	2200      	movs	r2, #0
 801646c:	4299      	cmp	r1, r3
 801646e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8016472:	d06c      	beq.n	801654e <uxr_read_framed_msg+0x302>
 8016474:	18e2      	adds	r2, r4, r3
 8016476:	7890      	ldrb	r0, [r2, #2]
 8016478:	287d      	cmp	r0, #125	@ 0x7d
 801647a:	f000 8101 	beq.w	8016680 <uxr_read_framed_msg+0x434>
 801647e:	3301      	adds	r3, #1
 8016480:	085a      	lsrs	r2, r3, #1
 8016482:	fba5 1202 	umull	r1, r2, r5, r2
 8016486:	0892      	lsrs	r2, r2, #2
 8016488:	212a      	movs	r1, #42	@ 0x2a
 801648a:	fb01 3312 	mls	r3, r1, r2, r3
 801648e:	287e      	cmp	r0, #126	@ 0x7e
 8016490:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016494:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016498:	d059      	beq.n	801654e <uxr_read_framed_msg+0x302>
 801649a:	2302      	movs	r3, #2
 801649c:	7023      	strb	r3, [r4, #0]
 801649e:	e6e6      	b.n	801626e <uxr_read_framed_msg+0x22>
 80164a0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80164a4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80164a8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80164ac:	1c51      	adds	r1, r2, #1
 80164ae:	084b      	lsrs	r3, r1, #1
 80164b0:	fba5 c303 	umull	ip, r3, r5, r3
 80164b4:	089b      	lsrs	r3, r3, #2
 80164b6:	fb0e 1313 	mls	r3, lr, r3, r1
 80164ba:	4592      	cmp	sl, r2
 80164bc:	eb04 0002 	add.w	r0, r4, r2
 80164c0:	b2da      	uxtb	r2, r3
 80164c2:	f43f af04 	beq.w	80162ce <uxr_read_framed_msg+0x82>
 80164c6:	7883      	ldrb	r3, [r0, #2]
 80164c8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80164cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80164ce:	d1ed      	bne.n	80164ac <uxr_read_framed_msg+0x260>
 80164d0:	2301      	movs	r3, #1
 80164d2:	7023      	strb	r3, [r4, #0]
 80164d4:	e6cb      	b.n	801626e <uxr_read_framed_msg+0x22>
 80164d6:	f100 0c01 	add.w	ip, r0, #1
 80164da:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80164de:	fba5 8202 	umull	r8, r2, r5, r2
 80164e2:	0892      	lsrs	r2, r2, #2
 80164e4:	fb01 c212 	mls	r2, r1, r2, ip
 80164e8:	eb04 0c02 	add.w	ip, r4, r2
 80164ec:	b2d2      	uxtb	r2, r2
 80164ee:	4592      	cmp	sl, r2
 80164f0:	f100 0002 	add.w	r0, r0, #2
 80164f4:	f43f af47 	beq.w	8016386 <uxr_read_framed_msg+0x13a>
 80164f8:	0842      	lsrs	r2, r0, #1
 80164fa:	f89c a002 	ldrb.w	sl, [ip, #2]
 80164fe:	fba5 8202 	umull	r8, r2, r5, r2
 8016502:	0892      	lsrs	r2, r2, #2
 8016504:	fb01 0012 	mls	r0, r1, r2, r0
 8016508:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801650c:	f08a 0c20 	eor.w	ip, sl, #32
 8016510:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8016514:	f47f af11 	bne.w	801633a <uxr_read_framed_msg+0xee>
 8016518:	459e      	cmp	lr, r3
 801651a:	ee17 8a90 	vmov	r8, s15
 801651e:	f43f af37 	beq.w	8016390 <uxr_read_framed_msg+0x144>
 8016522:	2301      	movs	r3, #1
 8016524:	7023      	strb	r3, [r4, #0]
 8016526:	e6a2      	b.n	801626e <uxr_read_framed_msg+0x22>
 8016528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801652a:	9300      	str	r3, [sp, #0]
 801652c:	2301      	movs	r3, #1
 801652e:	9301      	str	r3, [sp, #4]
 8016530:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016532:	464a      	mov	r2, r9
 8016534:	4641      	mov	r1, r8
 8016536:	4620      	mov	r0, r4
 8016538:	f7ff fe06 	bl	8016148 <uxr_framing_read_transport>
 801653c:	2800      	cmp	r0, #0
 801653e:	f43f aec6 	beq.w	80162ce <uxr_read_framed_msg+0x82>
 8016542:	7823      	ldrb	r3, [r4, #0]
 8016544:	e693      	b.n	801626e <uxr_read_framed_msg+0x22>
 8016546:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016548:	9300      	str	r3, [sp, #0]
 801654a:	2302      	movs	r3, #2
 801654c:	e7ef      	b.n	801652e <uxr_read_framed_msg+0x2e2>
 801654e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016550:	9300      	str	r3, [sp, #0]
 8016552:	2304      	movs	r3, #4
 8016554:	9301      	str	r3, [sp, #4]
 8016556:	464a      	mov	r2, r9
 8016558:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801655a:	4641      	mov	r1, r8
 801655c:	4620      	mov	r0, r4
 801655e:	f7ff fdf3 	bl	8016148 <uxr_framing_read_transport>
 8016562:	2800      	cmp	r0, #0
 8016564:	d1ed      	bne.n	8016542 <uxr_read_framed_msg+0x2f6>
 8016566:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801656a:	2b7e      	cmp	r3, #126	@ 0x7e
 801656c:	d0e9      	beq.n	8016542 <uxr_read_framed_msg+0x2f6>
 801656e:	e6ae      	b.n	80162ce <uxr_read_framed_msg+0x82>
 8016570:	30c30c31 	.word	0x30c30c31
 8016574:	08019318 	.word	0x08019318
 8016578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801657a:	9300      	str	r3, [sp, #0]
 801657c:	2305      	movs	r3, #5
 801657e:	9301      	str	r3, [sp, #4]
 8016580:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016582:	f7ff fde1 	bl	8016148 <uxr_framing_read_transport>
 8016586:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801658a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801658e:	429a      	cmp	r2, r3
 8016590:	f43f ae9d 	beq.w	80162ce <uxr_read_framed_msg+0x82>
 8016594:	e668      	b.n	8016268 <uxr_read_framed_msg+0x1c>
 8016596:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016598:	9300      	str	r3, [sp, #0]
 801659a:	2303      	movs	r3, #3
 801659c:	e7c7      	b.n	801652e <uxr_read_framed_msg+0x2e2>
 801659e:	2305      	movs	r3, #5
 80165a0:	7023      	strb	r3, [r4, #0]
 80165a2:	e664      	b.n	801626e <uxr_read_framed_msg+0x22>
 80165a4:	ee17 8a90 	vmov	r8, s15
 80165a8:	f43f aef2 	beq.w	8016390 <uxr_read_framed_msg+0x144>
 80165ac:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80165b0:	d08e      	beq.n	80164d0 <uxr_read_framed_msg+0x284>
 80165b2:	ebae 0303 	sub.w	r3, lr, r3
 80165b6:	3302      	adds	r3, #2
 80165b8:	9301      	str	r3, [sp, #4]
 80165ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80165bc:	9300      	str	r3, [sp, #0]
 80165be:	e7b7      	b.n	8016530 <uxr_read_framed_msg+0x2e4>
 80165c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80165c2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80165c6:	7013      	strb	r3, [r2, #0]
 80165c8:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80165ca:	b003      	add	sp, #12
 80165cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165d0:	f103 0c01 	add.w	ip, r3, #1
 80165d4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80165d8:	fba5 0202 	umull	r0, r2, r5, r2
 80165dc:	0892      	lsrs	r2, r2, #2
 80165de:	202a      	movs	r0, #42	@ 0x2a
 80165e0:	fb00 c212 	mls	r2, r0, r2, ip
 80165e4:	fa5f fc82 	uxtb.w	ip, r2
 80165e8:	4561      	cmp	r1, ip
 80165ea:	d09d      	beq.n	8016528 <uxr_read_framed_msg+0x2dc>
 80165ec:	3302      	adds	r3, #2
 80165ee:	4422      	add	r2, r4
 80165f0:	0859      	lsrs	r1, r3, #1
 80165f2:	7892      	ldrb	r2, [r2, #2]
 80165f4:	fba5 c101 	umull	ip, r1, r5, r1
 80165f8:	0889      	lsrs	r1, r1, #2
 80165fa:	fb00 3311 	mls	r3, r0, r1, r3
 80165fe:	2a7e      	cmp	r2, #126	@ 0x7e
 8016600:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016604:	f000 80aa 	beq.w	801675c <uxr_read_framed_msg+0x510>
 8016608:	f082 0220 	eor.w	r2, r2, #32
 801660c:	e654      	b.n	80162b8 <uxr_read_framed_msg+0x6c>
 801660e:	1c58      	adds	r0, r3, #1
 8016610:	0842      	lsrs	r2, r0, #1
 8016612:	fba5 c202 	umull	ip, r2, r5, r2
 8016616:	0892      	lsrs	r2, r2, #2
 8016618:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801661c:	fb0c 0212 	mls	r2, ip, r2, r0
 8016620:	b2d0      	uxtb	r0, r2
 8016622:	4281      	cmp	r1, r0
 8016624:	d08f      	beq.n	8016546 <uxr_read_framed_msg+0x2fa>
 8016626:	4422      	add	r2, r4
 8016628:	3302      	adds	r3, #2
 801662a:	7890      	ldrb	r0, [r2, #2]
 801662c:	085a      	lsrs	r2, r3, #1
 801662e:	fba5 1202 	umull	r1, r2, r5, r2
 8016632:	0892      	lsrs	r2, r2, #2
 8016634:	fb0c 3312 	mls	r3, ip, r2, r3
 8016638:	287e      	cmp	r0, #126	@ 0x7e
 801663a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801663e:	d07d      	beq.n	801673c <uxr_read_framed_msg+0x4f0>
 8016640:	f080 0020 	eor.w	r0, r0, #32
 8016644:	e660      	b.n	8016308 <uxr_read_framed_msg+0xbc>
 8016646:	1c59      	adds	r1, r3, #1
 8016648:	084a      	lsrs	r2, r1, #1
 801664a:	fba5 c202 	umull	ip, r2, r5, r2
 801664e:	0892      	lsrs	r2, r2, #2
 8016650:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016654:	fb0c 1212 	mls	r2, ip, r2, r1
 8016658:	b2d1      	uxtb	r1, r2
 801665a:	4288      	cmp	r0, r1
 801665c:	f43f af64 	beq.w	8016528 <uxr_read_framed_msg+0x2dc>
 8016660:	4422      	add	r2, r4
 8016662:	3302      	adds	r3, #2
 8016664:	7891      	ldrb	r1, [r2, #2]
 8016666:	085a      	lsrs	r2, r3, #1
 8016668:	fba5 0202 	umull	r0, r2, r5, r2
 801666c:	0892      	lsrs	r2, r2, #2
 801666e:	fb0c 3312 	mls	r3, ip, r2, r3
 8016672:	297e      	cmp	r1, #126	@ 0x7e
 8016674:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016678:	d070      	beq.n	801675c <uxr_read_framed_msg+0x510>
 801667a:	f081 0120 	eor.w	r1, r1, #32
 801667e:	e6a3      	b.n	80163c8 <uxr_read_framed_msg+0x17c>
 8016680:	f103 0c01 	add.w	ip, r3, #1
 8016684:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016688:	fba5 0202 	umull	r0, r2, r5, r2
 801668c:	0892      	lsrs	r2, r2, #2
 801668e:	202a      	movs	r0, #42	@ 0x2a
 8016690:	fb00 c212 	mls	r2, r0, r2, ip
 8016694:	fa5f fc82 	uxtb.w	ip, r2
 8016698:	4561      	cmp	r1, ip
 801669a:	f43f af58 	beq.w	801654e <uxr_read_framed_msg+0x302>
 801669e:	4422      	add	r2, r4
 80166a0:	3302      	adds	r3, #2
 80166a2:	7891      	ldrb	r1, [r2, #2]
 80166a4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80166a8:	085a      	lsrs	r2, r3, #1
 80166aa:	fba5 c202 	umull	ip, r2, r5, r2
 80166ae:	0892      	lsrs	r2, r2, #2
 80166b0:	fb00 3312 	mls	r3, r0, r2, r3
 80166b4:	297e      	cmp	r1, #126	@ 0x7e
 80166b6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80166ba:	f43f af48 	beq.w	801654e <uxr_read_framed_msg+0x302>
 80166be:	f081 0120 	eor.w	r1, r1, #32
 80166c2:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80166c6:	e6e8      	b.n	801649a <uxr_read_framed_msg+0x24e>
 80166c8:	1c58      	adds	r0, r3, #1
 80166ca:	0842      	lsrs	r2, r0, #1
 80166cc:	fba5 c202 	umull	ip, r2, r5, r2
 80166d0:	0892      	lsrs	r2, r2, #2
 80166d2:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80166d6:	fb0c 0212 	mls	r2, ip, r2, r0
 80166da:	b2d0      	uxtb	r0, r2
 80166dc:	4281      	cmp	r1, r0
 80166de:	f43f af32 	beq.w	8016546 <uxr_read_framed_msg+0x2fa>
 80166e2:	4422      	add	r2, r4
 80166e4:	3302      	adds	r3, #2
 80166e6:	7890      	ldrb	r0, [r2, #2]
 80166e8:	085a      	lsrs	r2, r3, #1
 80166ea:	fba5 1202 	umull	r1, r2, r5, r2
 80166ee:	0892      	lsrs	r2, r2, #2
 80166f0:	fb0c 3312 	mls	r3, ip, r2, r3
 80166f4:	287e      	cmp	r0, #126	@ 0x7e
 80166f6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80166fa:	d01f      	beq.n	801673c <uxr_read_framed_msg+0x4f0>
 80166fc:	f080 0020 	eor.w	r0, r0, #32
 8016700:	e68b      	b.n	801641a <uxr_read_framed_msg+0x1ce>
 8016702:	1c51      	adds	r1, r2, #1
 8016704:	084b      	lsrs	r3, r1, #1
 8016706:	fba5 c303 	umull	ip, r3, r5, r3
 801670a:	089b      	lsrs	r3, r3, #2
 801670c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016710:	fb0c 1313 	mls	r3, ip, r3, r1
 8016714:	b2d9      	uxtb	r1, r3
 8016716:	4288      	cmp	r0, r1
 8016718:	f43f af3d 	beq.w	8016596 <uxr_read_framed_msg+0x34a>
 801671c:	3202      	adds	r2, #2
 801671e:	4423      	add	r3, r4
 8016720:	0850      	lsrs	r0, r2, #1
 8016722:	789b      	ldrb	r3, [r3, #2]
 8016724:	fba5 1000 	umull	r1, r0, r5, r0
 8016728:	0880      	lsrs	r0, r0, #2
 801672a:	fb0c 2210 	mls	r2, ip, r0, r2
 801672e:	2b7e      	cmp	r3, #126	@ 0x7e
 8016730:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016734:	d016      	beq.n	8016764 <uxr_read_framed_msg+0x518>
 8016736:	f083 0120 	eor.w	r1, r3, #32
 801673a:	e68b      	b.n	8016454 <uxr_read_framed_msg+0x208>
 801673c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801673e:	9300      	str	r3, [sp, #0]
 8016740:	2302      	movs	r3, #2
 8016742:	9301      	str	r3, [sp, #4]
 8016744:	464a      	mov	r2, r9
 8016746:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016748:	4641      	mov	r1, r8
 801674a:	4620      	mov	r0, r4
 801674c:	f7ff fcfc 	bl	8016148 <uxr_framing_read_transport>
 8016750:	2800      	cmp	r0, #0
 8016752:	f47f aef6 	bne.w	8016542 <uxr_read_framed_msg+0x2f6>
 8016756:	2301      	movs	r3, #1
 8016758:	7023      	strb	r3, [r4, #0]
 801675a:	e588      	b.n	801626e <uxr_read_framed_msg+0x22>
 801675c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801675e:	9300      	str	r3, [sp, #0]
 8016760:	2301      	movs	r3, #1
 8016762:	e7ee      	b.n	8016742 <uxr_read_framed_msg+0x4f6>
 8016764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016766:	9300      	str	r3, [sp, #0]
 8016768:	2303      	movs	r3, #3
 801676a:	e7ea      	b.n	8016742 <uxr_read_framed_msg+0x4f6>
 801676c:	ee17 8a90 	vmov	r8, s15
 8016770:	e6ae      	b.n	80164d0 <uxr_read_framed_msg+0x284>
 8016772:	bf00      	nop

08016774 <rcl_get_default_domain_id>:
 8016774:	b530      	push	{r4, r5, lr}
 8016776:	b083      	sub	sp, #12
 8016778:	2300      	movs	r3, #0
 801677a:	9300      	str	r3, [sp, #0]
 801677c:	b1d0      	cbz	r0, 80167b4 <rcl_get_default_domain_id+0x40>
 801677e:	4604      	mov	r4, r0
 8016780:	4669      	mov	r1, sp
 8016782:	4815      	ldr	r0, [pc, #84]	@ (80167d8 <rcl_get_default_domain_id+0x64>)
 8016784:	f7fc fc60 	bl	8013048 <rcutils_get_env>
 8016788:	4602      	mov	r2, r0
 801678a:	b110      	cbz	r0, 8016792 <rcl_get_default_domain_id+0x1e>
 801678c:	2001      	movs	r0, #1
 801678e:	b003      	add	sp, #12
 8016790:	bd30      	pop	{r4, r5, pc}
 8016792:	9b00      	ldr	r3, [sp, #0]
 8016794:	b18b      	cbz	r3, 80167ba <rcl_get_default_domain_id+0x46>
 8016796:	7818      	ldrb	r0, [r3, #0]
 8016798:	2800      	cmp	r0, #0
 801679a:	d0f8      	beq.n	801678e <rcl_get_default_domain_id+0x1a>
 801679c:	a901      	add	r1, sp, #4
 801679e:	4618      	mov	r0, r3
 80167a0:	9201      	str	r2, [sp, #4]
 80167a2:	f000 fe6d 	bl	8017480 <strtoul>
 80167a6:	4605      	mov	r5, r0
 80167a8:	b150      	cbz	r0, 80167c0 <rcl_get_default_domain_id+0x4c>
 80167aa:	1c43      	adds	r3, r0, #1
 80167ac:	d00d      	beq.n	80167ca <rcl_get_default_domain_id+0x56>
 80167ae:	6025      	str	r5, [r4, #0]
 80167b0:	2000      	movs	r0, #0
 80167b2:	e7ec      	b.n	801678e <rcl_get_default_domain_id+0x1a>
 80167b4:	200b      	movs	r0, #11
 80167b6:	b003      	add	sp, #12
 80167b8:	bd30      	pop	{r4, r5, pc}
 80167ba:	4618      	mov	r0, r3
 80167bc:	b003      	add	sp, #12
 80167be:	bd30      	pop	{r4, r5, pc}
 80167c0:	9b01      	ldr	r3, [sp, #4]
 80167c2:	781b      	ldrb	r3, [r3, #0]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d0f2      	beq.n	80167ae <rcl_get_default_domain_id+0x3a>
 80167c8:	e7e0      	b.n	801678c <rcl_get_default_domain_id+0x18>
 80167ca:	f001 f8a5 	bl	8017918 <__errno>
 80167ce:	6803      	ldr	r3, [r0, #0]
 80167d0:	2b22      	cmp	r3, #34	@ 0x22
 80167d2:	d1ec      	bne.n	80167ae <rcl_get_default_domain_id+0x3a>
 80167d4:	e7da      	b.n	801678c <rcl_get_default_domain_id+0x18>
 80167d6:	bf00      	nop
 80167d8:	08019518 	.word	0x08019518

080167dc <rcl_expand_topic_name>:
 80167dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e0:	b08b      	sub	sp, #44	@ 0x2c
 80167e2:	9306      	str	r3, [sp, #24]
 80167e4:	2800      	cmp	r0, #0
 80167e6:	f000 80ad 	beq.w	8016944 <rcl_expand_topic_name+0x168>
 80167ea:	460e      	mov	r6, r1
 80167ec:	2900      	cmp	r1, #0
 80167ee:	f000 80a9 	beq.w	8016944 <rcl_expand_topic_name+0x168>
 80167f2:	4617      	mov	r7, r2
 80167f4:	2a00      	cmp	r2, #0
 80167f6:	f000 80a5 	beq.w	8016944 <rcl_expand_topic_name+0x168>
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	f000 80a2 	beq.w	8016944 <rcl_expand_topic_name+0x168>
 8016800:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016802:	2b00      	cmp	r3, #0
 8016804:	f000 809e 	beq.w	8016944 <rcl_expand_topic_name+0x168>
 8016808:	2200      	movs	r2, #0
 801680a:	a909      	add	r1, sp, #36	@ 0x24
 801680c:	4680      	mov	r8, r0
 801680e:	f000 f9fb 	bl	8016c08 <rcl_validate_topic_name>
 8016812:	4604      	mov	r4, r0
 8016814:	2800      	cmp	r0, #0
 8016816:	f040 8096 	bne.w	8016946 <rcl_expand_topic_name+0x16a>
 801681a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801681c:	2b00      	cmp	r3, #0
 801681e:	f040 809a 	bne.w	8016956 <rcl_expand_topic_name+0x17a>
 8016822:	4602      	mov	r2, r0
 8016824:	a909      	add	r1, sp, #36	@ 0x24
 8016826:	4630      	mov	r0, r6
 8016828:	f7fd f86c 	bl	8013904 <rmw_validate_node_name>
 801682c:	2800      	cmp	r0, #0
 801682e:	f040 808e 	bne.w	801694e <rcl_expand_topic_name+0x172>
 8016832:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016834:	2a00      	cmp	r2, #0
 8016836:	f040 8093 	bne.w	8016960 <rcl_expand_topic_name+0x184>
 801683a:	a909      	add	r1, sp, #36	@ 0x24
 801683c:	4638      	mov	r0, r7
 801683e:	f7fd f843 	bl	80138c8 <rmw_validate_namespace>
 8016842:	2800      	cmp	r0, #0
 8016844:	f040 8083 	bne.w	801694e <rcl_expand_topic_name+0x172>
 8016848:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801684a:	2c00      	cmp	r4, #0
 801684c:	f040 80ed 	bne.w	8016a2a <rcl_expand_topic_name+0x24e>
 8016850:	217b      	movs	r1, #123	@ 0x7b
 8016852:	4640      	mov	r0, r8
 8016854:	f000 ffd4 	bl	8017800 <strchr>
 8016858:	f898 3000 	ldrb.w	r3, [r8]
 801685c:	2b2f      	cmp	r3, #47	@ 0x2f
 801685e:	4605      	mov	r5, r0
 8016860:	f000 809e 	beq.w	80169a0 <rcl_expand_topic_name+0x1c4>
 8016864:	2b7e      	cmp	r3, #126	@ 0x7e
 8016866:	f040 80a2 	bne.w	80169ae <rcl_expand_topic_name+0x1d2>
 801686a:	4638      	mov	r0, r7
 801686c:	f7e9 fcc2 	bl	80001f4 <strlen>
 8016870:	4a82      	ldr	r2, [pc, #520]	@ (8016a7c <rcl_expand_topic_name+0x2a0>)
 8016872:	4b83      	ldr	r3, [pc, #524]	@ (8016a80 <rcl_expand_topic_name+0x2a4>)
 8016874:	2801      	cmp	r0, #1
 8016876:	bf18      	it	ne
 8016878:	4613      	movne	r3, r2
 801687a:	9302      	str	r3, [sp, #8]
 801687c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801687e:	9300      	str	r3, [sp, #0]
 8016880:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016884:	f108 0301 	add.w	r3, r8, #1
 8016888:	9305      	str	r3, [sp, #20]
 801688a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801688e:	9301      	str	r3, [sp, #4]
 8016890:	ab14      	add	r3, sp, #80	@ 0x50
 8016892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016894:	f7fc fc00 	bl	8013098 <rcutils_format_string_limit>
 8016898:	4682      	mov	sl, r0
 801689a:	2800      	cmp	r0, #0
 801689c:	f000 80c7 	beq.w	8016a2e <rcl_expand_topic_name+0x252>
 80168a0:	2d00      	cmp	r5, #0
 80168a2:	f000 80a2 	beq.w	80169ea <rcl_expand_topic_name+0x20e>
 80168a6:	217b      	movs	r1, #123	@ 0x7b
 80168a8:	f000 ffaa 	bl	8017800 <strchr>
 80168ac:	46d1      	mov	r9, sl
 80168ae:	4605      	mov	r5, r0
 80168b0:	9407      	str	r4, [sp, #28]
 80168b2:	46d3      	mov	fp, sl
 80168b4:	464c      	mov	r4, r9
 80168b6:	2d00      	cmp	r5, #0
 80168b8:	f000 80be 	beq.w	8016a38 <rcl_expand_topic_name+0x25c>
 80168bc:	217d      	movs	r1, #125	@ 0x7d
 80168be:	4620      	mov	r0, r4
 80168c0:	f000 ff9e 	bl	8017800 <strchr>
 80168c4:	eba0 0905 	sub.w	r9, r0, r5
 80168c8:	f109 0a01 	add.w	sl, r9, #1
 80168cc:	486d      	ldr	r0, [pc, #436]	@ (8016a84 <rcl_expand_topic_name+0x2a8>)
 80168ce:	4652      	mov	r2, sl
 80168d0:	4629      	mov	r1, r5
 80168d2:	f000 ffa2 	bl	801781a <strncmp>
 80168d6:	2800      	cmp	r0, #0
 80168d8:	d067      	beq.n	80169aa <rcl_expand_topic_name+0x1ce>
 80168da:	486b      	ldr	r0, [pc, #428]	@ (8016a88 <rcl_expand_topic_name+0x2ac>)
 80168dc:	4652      	mov	r2, sl
 80168de:	4629      	mov	r1, r5
 80168e0:	f000 ff9b 	bl	801781a <strncmp>
 80168e4:	b130      	cbz	r0, 80168f4 <rcl_expand_topic_name+0x118>
 80168e6:	4869      	ldr	r0, [pc, #420]	@ (8016a8c <rcl_expand_topic_name+0x2b0>)
 80168e8:	4652      	mov	r2, sl
 80168ea:	4629      	mov	r1, r5
 80168ec:	f000 ff95 	bl	801781a <strncmp>
 80168f0:	2800      	cmp	r0, #0
 80168f2:	d137      	bne.n	8016964 <rcl_expand_topic_name+0x188>
 80168f4:	46b9      	mov	r9, r7
 80168f6:	ab16      	add	r3, sp, #88	@ 0x58
 80168f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80168fc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016900:	ab14      	add	r3, sp, #80	@ 0x50
 8016902:	4628      	mov	r0, r5
 8016904:	cb0c      	ldmia	r3, {r2, r3}
 8016906:	4651      	mov	r1, sl
 8016908:	f7fc fd02 	bl	8013310 <rcutils_strndup>
 801690c:	4605      	mov	r5, r0
 801690e:	2800      	cmp	r0, #0
 8016910:	f000 809c 	beq.w	8016a4c <rcl_expand_topic_name+0x270>
 8016914:	464a      	mov	r2, r9
 8016916:	4620      	mov	r0, r4
 8016918:	ab14      	add	r3, sp, #80	@ 0x50
 801691a:	4629      	mov	r1, r5
 801691c:	f7fc fbf6 	bl	801310c <rcutils_repl_str>
 8016920:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016922:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016924:	4604      	mov	r4, r0
 8016926:	4628      	mov	r0, r5
 8016928:	4798      	blx	r3
 801692a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801692c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801692e:	4658      	mov	r0, fp
 8016930:	4798      	blx	r3
 8016932:	2c00      	cmp	r4, #0
 8016934:	d07b      	beq.n	8016a2e <rcl_expand_topic_name+0x252>
 8016936:	217b      	movs	r1, #123	@ 0x7b
 8016938:	4620      	mov	r0, r4
 801693a:	f000 ff61 	bl	8017800 <strchr>
 801693e:	46a3      	mov	fp, r4
 8016940:	4605      	mov	r5, r0
 8016942:	e7b8      	b.n	80168b6 <rcl_expand_topic_name+0xda>
 8016944:	240b      	movs	r4, #11
 8016946:	4620      	mov	r0, r4
 8016948:	b00b      	add	sp, #44	@ 0x2c
 801694a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801694e:	f7f9 fdd9 	bl	8010504 <rcl_convert_rmw_ret_to_rcl_ret>
 8016952:	4604      	mov	r4, r0
 8016954:	e7f7      	b.n	8016946 <rcl_expand_topic_name+0x16a>
 8016956:	2467      	movs	r4, #103	@ 0x67
 8016958:	4620      	mov	r0, r4
 801695a:	b00b      	add	sp, #44	@ 0x2c
 801695c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016960:	24c9      	movs	r4, #201	@ 0xc9
 8016962:	e7f0      	b.n	8016946 <rcl_expand_topic_name+0x16a>
 8016964:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016968:	9806      	ldr	r0, [sp, #24]
 801696a:	1c69      	adds	r1, r5, #1
 801696c:	f7fc fdea 	bl	8013544 <rcutils_string_map_getn>
 8016970:	4681      	mov	r9, r0
 8016972:	2800      	cmp	r0, #0
 8016974:	d1bf      	bne.n	80168f6 <rcl_expand_topic_name+0x11a>
 8016976:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016978:	aa16      	add	r2, sp, #88	@ 0x58
 801697a:	6018      	str	r0, [r3, #0]
 801697c:	ca07      	ldmia	r2, {r0, r1, r2}
 801697e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016982:	ab14      	add	r3, sp, #80	@ 0x50
 8016984:	cb0c      	ldmia	r3, {r2, r3}
 8016986:	4651      	mov	r1, sl
 8016988:	4628      	mov	r0, r5
 801698a:	f7fc fcc1 	bl	8013310 <rcutils_strndup>
 801698e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016990:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016992:	4798      	blx	r3
 8016994:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016996:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016998:	4658      	mov	r0, fp
 801699a:	2469      	movs	r4, #105	@ 0x69
 801699c:	4798      	blx	r3
 801699e:	e7d2      	b.n	8016946 <rcl_expand_topic_name+0x16a>
 80169a0:	2800      	cmp	r0, #0
 80169a2:	d05b      	beq.n	8016a5c <rcl_expand_topic_name+0x280>
 80169a4:	46c1      	mov	r9, r8
 80169a6:	46a2      	mov	sl, r4
 80169a8:	e782      	b.n	80168b0 <rcl_expand_topic_name+0xd4>
 80169aa:	46b1      	mov	r9, r6
 80169ac:	e7a3      	b.n	80168f6 <rcl_expand_topic_name+0x11a>
 80169ae:	2800      	cmp	r0, #0
 80169b0:	d1f8      	bne.n	80169a4 <rcl_expand_topic_name+0x1c8>
 80169b2:	4638      	mov	r0, r7
 80169b4:	f7e9 fc1e 	bl	80001f4 <strlen>
 80169b8:	4a35      	ldr	r2, [pc, #212]	@ (8016a90 <rcl_expand_topic_name+0x2b4>)
 80169ba:	4b36      	ldr	r3, [pc, #216]	@ (8016a94 <rcl_expand_topic_name+0x2b8>)
 80169bc:	f8cd 8010 	str.w	r8, [sp, #16]
 80169c0:	2801      	cmp	r0, #1
 80169c2:	bf18      	it	ne
 80169c4:	4613      	movne	r3, r2
 80169c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80169ca:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80169ce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80169d0:	9703      	str	r7, [sp, #12]
 80169d2:	9200      	str	r2, [sp, #0]
 80169d4:	ab14      	add	r3, sp, #80	@ 0x50
 80169d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80169d8:	f7fc fb5e 	bl	8013098 <rcutils_format_string_limit>
 80169dc:	4682      	mov	sl, r0
 80169de:	4653      	mov	r3, sl
 80169e0:	b32b      	cbz	r3, 8016a2e <rcl_expand_topic_name+0x252>
 80169e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80169e4:	f8c3 a000 	str.w	sl, [r3]
 80169e8:	e7ad      	b.n	8016946 <rcl_expand_topic_name+0x16a>
 80169ea:	f89a 3000 	ldrb.w	r3, [sl]
 80169ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80169f0:	d0f7      	beq.n	80169e2 <rcl_expand_topic_name+0x206>
 80169f2:	4638      	mov	r0, r7
 80169f4:	f7e9 fbfe 	bl	80001f4 <strlen>
 80169f8:	4a25      	ldr	r2, [pc, #148]	@ (8016a90 <rcl_expand_topic_name+0x2b4>)
 80169fa:	4b26      	ldr	r3, [pc, #152]	@ (8016a94 <rcl_expand_topic_name+0x2b8>)
 80169fc:	f8cd a010 	str.w	sl, [sp, #16]
 8016a00:	2801      	cmp	r0, #1
 8016a02:	bf18      	it	ne
 8016a04:	4613      	movne	r3, r2
 8016a06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016a0a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016a0e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016a10:	9703      	str	r7, [sp, #12]
 8016a12:	9200      	str	r2, [sp, #0]
 8016a14:	ab14      	add	r3, sp, #80	@ 0x50
 8016a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016a18:	f7fc fb3e 	bl	8013098 <rcutils_format_string_limit>
 8016a1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016a1e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016a20:	4605      	mov	r5, r0
 8016a22:	4650      	mov	r0, sl
 8016a24:	4798      	blx	r3
 8016a26:	46aa      	mov	sl, r5
 8016a28:	e7d9      	b.n	80169de <rcl_expand_topic_name+0x202>
 8016a2a:	24ca      	movs	r4, #202	@ 0xca
 8016a2c:	e78b      	b.n	8016946 <rcl_expand_topic_name+0x16a>
 8016a2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016a30:	2300      	movs	r3, #0
 8016a32:	6013      	str	r3, [r2, #0]
 8016a34:	240a      	movs	r4, #10
 8016a36:	e786      	b.n	8016946 <rcl_expand_topic_name+0x16a>
 8016a38:	465b      	mov	r3, fp
 8016a3a:	9c07      	ldr	r4, [sp, #28]
 8016a3c:	46da      	mov	sl, fp
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d1d3      	bne.n	80169ea <rcl_expand_topic_name+0x20e>
 8016a42:	f898 3000 	ldrb.w	r3, [r8]
 8016a46:	2b2f      	cmp	r3, #47	@ 0x2f
 8016a48:	d0cb      	beq.n	80169e2 <rcl_expand_topic_name+0x206>
 8016a4a:	e7b2      	b.n	80169b2 <rcl_expand_topic_name+0x1d6>
 8016a4c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016a50:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016a52:	6015      	str	r5, [r2, #0]
 8016a54:	4658      	mov	r0, fp
 8016a56:	4798      	blx	r3
 8016a58:	240a      	movs	r4, #10
 8016a5a:	e774      	b.n	8016946 <rcl_expand_topic_name+0x16a>
 8016a5c:	ab17      	add	r3, sp, #92	@ 0x5c
 8016a5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016a62:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016a66:	ab14      	add	r3, sp, #80	@ 0x50
 8016a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016a6a:	4640      	mov	r0, r8
 8016a6c:	f7fc fc2e 	bl	80132cc <rcutils_strdup>
 8016a70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016a72:	2800      	cmp	r0, #0
 8016a74:	6018      	str	r0, [r3, #0]
 8016a76:	bf08      	it	eq
 8016a78:	240a      	moveq	r4, #10
 8016a7a:	e764      	b.n	8016946 <rcl_expand_topic_name+0x16a>
 8016a7c:	08019528 	.word	0x08019528
 8016a80:	08018bfc 	.word	0x08018bfc
 8016a84:	08019530 	.word	0x08019530
 8016a88:	08019538 	.word	0x08019538
 8016a8c:	08019540 	.word	0x08019540
 8016a90:	08018d84 	.word	0x08018d84
 8016a94:	08018c0c 	.word	0x08018c0c

08016a98 <rcl_get_default_topic_name_substitutions>:
 8016a98:	2800      	cmp	r0, #0
 8016a9a:	bf0c      	ite	eq
 8016a9c:	200b      	moveq	r0, #11
 8016a9e:	2000      	movne	r0, #0
 8016aa0:	4770      	bx	lr
 8016aa2:	bf00      	nop

08016aa4 <rcl_get_zero_initialized_guard_condition>:
 8016aa4:	4a03      	ldr	r2, [pc, #12]	@ (8016ab4 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016aac:	e883 0003 	stmia.w	r3, {r0, r1}
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	4770      	bx	lr
 8016ab4:	0801954c 	.word	0x0801954c

08016ab8 <rcl_guard_condition_init_from_rmw>:
 8016ab8:	b082      	sub	sp, #8
 8016aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016abe:	b086      	sub	sp, #24
 8016ac0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016ac4:	4604      	mov	r4, r0
 8016ac6:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016aca:	460e      	mov	r6, r1
 8016acc:	4617      	mov	r7, r2
 8016ace:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016ad2:	f10d 0e04 	add.w	lr, sp, #4
 8016ad6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016ada:	f8dc 3000 	ldr.w	r3, [ip]
 8016ade:	f8ce 3000 	str.w	r3, [lr]
 8016ae2:	a801      	add	r0, sp, #4
 8016ae4:	f7f5 ff80 	bl	800c9e8 <rcutils_allocator_is_valid>
 8016ae8:	b350      	cbz	r0, 8016b40 <rcl_guard_condition_init_from_rmw+0x88>
 8016aea:	b34c      	cbz	r4, 8016b40 <rcl_guard_condition_init_from_rmw+0x88>
 8016aec:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016af0:	f1b8 0f00 	cmp.w	r8, #0
 8016af4:	d11e      	bne.n	8016b34 <rcl_guard_condition_init_from_rmw+0x7c>
 8016af6:	b31f      	cbz	r7, 8016b40 <rcl_guard_condition_init_from_rmw+0x88>
 8016af8:	4638      	mov	r0, r7
 8016afa:	f7f9 fd21 	bl	8010540 <rcl_context_is_valid>
 8016afe:	b328      	cbz	r0, 8016b4c <rcl_guard_condition_init_from_rmw+0x94>
 8016b00:	9b01      	ldr	r3, [sp, #4]
 8016b02:	9905      	ldr	r1, [sp, #20]
 8016b04:	201c      	movs	r0, #28
 8016b06:	4798      	blx	r3
 8016b08:	4605      	mov	r5, r0
 8016b0a:	6060      	str	r0, [r4, #4]
 8016b0c:	b358      	cbz	r0, 8016b66 <rcl_guard_condition_init_from_rmw+0xae>
 8016b0e:	b1fe      	cbz	r6, 8016b50 <rcl_guard_condition_init_from_rmw+0x98>
 8016b10:	6006      	str	r6, [r0, #0]
 8016b12:	f880 8004 	strb.w	r8, [r0, #4]
 8016b16:	ac01      	add	r4, sp, #4
 8016b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b1a:	f105 0c08 	add.w	ip, r5, #8
 8016b1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b22:	6823      	ldr	r3, [r4, #0]
 8016b24:	f8cc 3000 	str.w	r3, [ip]
 8016b28:	2000      	movs	r0, #0
 8016b2a:	b006      	add	sp, #24
 8016b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b30:	b002      	add	sp, #8
 8016b32:	4770      	bx	lr
 8016b34:	2064      	movs	r0, #100	@ 0x64
 8016b36:	b006      	add	sp, #24
 8016b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b3c:	b002      	add	sp, #8
 8016b3e:	4770      	bx	lr
 8016b40:	200b      	movs	r0, #11
 8016b42:	b006      	add	sp, #24
 8016b44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b48:	b002      	add	sp, #8
 8016b4a:	4770      	bx	lr
 8016b4c:	2065      	movs	r0, #101	@ 0x65
 8016b4e:	e7f2      	b.n	8016b36 <rcl_guard_condition_init_from_rmw+0x7e>
 8016b50:	6838      	ldr	r0, [r7, #0]
 8016b52:	3028      	adds	r0, #40	@ 0x28
 8016b54:	f000 fa3a 	bl	8016fcc <rmw_create_guard_condition>
 8016b58:	6028      	str	r0, [r5, #0]
 8016b5a:	6865      	ldr	r5, [r4, #4]
 8016b5c:	682e      	ldr	r6, [r5, #0]
 8016b5e:	b126      	cbz	r6, 8016b6a <rcl_guard_condition_init_from_rmw+0xb2>
 8016b60:	2301      	movs	r3, #1
 8016b62:	712b      	strb	r3, [r5, #4]
 8016b64:	e7d7      	b.n	8016b16 <rcl_guard_condition_init_from_rmw+0x5e>
 8016b66:	200a      	movs	r0, #10
 8016b68:	e7e5      	b.n	8016b36 <rcl_guard_condition_init_from_rmw+0x7e>
 8016b6a:	4628      	mov	r0, r5
 8016b6c:	9b02      	ldr	r3, [sp, #8]
 8016b6e:	9905      	ldr	r1, [sp, #20]
 8016b70:	4798      	blx	r3
 8016b72:	6066      	str	r6, [r4, #4]
 8016b74:	2001      	movs	r0, #1
 8016b76:	e7de      	b.n	8016b36 <rcl_guard_condition_init_from_rmw+0x7e>

08016b78 <rcl_guard_condition_fini>:
 8016b78:	b570      	push	{r4, r5, r6, lr}
 8016b7a:	b082      	sub	sp, #8
 8016b7c:	b1f0      	cbz	r0, 8016bbc <rcl_guard_condition_fini+0x44>
 8016b7e:	6843      	ldr	r3, [r0, #4]
 8016b80:	4604      	mov	r4, r0
 8016b82:	b163      	cbz	r3, 8016b9e <rcl_guard_condition_fini+0x26>
 8016b84:	6818      	ldr	r0, [r3, #0]
 8016b86:	68de      	ldr	r6, [r3, #12]
 8016b88:	6999      	ldr	r1, [r3, #24]
 8016b8a:	b160      	cbz	r0, 8016ba6 <rcl_guard_condition_fini+0x2e>
 8016b8c:	791d      	ldrb	r5, [r3, #4]
 8016b8e:	b965      	cbnz	r5, 8016baa <rcl_guard_condition_fini+0x32>
 8016b90:	4618      	mov	r0, r3
 8016b92:	47b0      	blx	r6
 8016b94:	2300      	movs	r3, #0
 8016b96:	4628      	mov	r0, r5
 8016b98:	6063      	str	r3, [r4, #4]
 8016b9a:	b002      	add	sp, #8
 8016b9c:	bd70      	pop	{r4, r5, r6, pc}
 8016b9e:	461d      	mov	r5, r3
 8016ba0:	4628      	mov	r0, r5
 8016ba2:	b002      	add	sp, #8
 8016ba4:	bd70      	pop	{r4, r5, r6, pc}
 8016ba6:	4605      	mov	r5, r0
 8016ba8:	e7f2      	b.n	8016b90 <rcl_guard_condition_fini+0x18>
 8016baa:	9101      	str	r1, [sp, #4]
 8016bac:	f000 fa22 	bl	8016ff4 <rmw_destroy_guard_condition>
 8016bb0:	1e05      	subs	r5, r0, #0
 8016bb2:	6863      	ldr	r3, [r4, #4]
 8016bb4:	9901      	ldr	r1, [sp, #4]
 8016bb6:	bf18      	it	ne
 8016bb8:	2501      	movne	r5, #1
 8016bba:	e7e9      	b.n	8016b90 <rcl_guard_condition_fini+0x18>
 8016bbc:	250b      	movs	r5, #11
 8016bbe:	4628      	mov	r0, r5
 8016bc0:	b002      	add	sp, #8
 8016bc2:	bd70      	pop	{r4, r5, r6, pc}

08016bc4 <rcl_guard_condition_get_default_options>:
 8016bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bc6:	b087      	sub	sp, #28
 8016bc8:	4606      	mov	r6, r0
 8016bca:	4668      	mov	r0, sp
 8016bcc:	f7f5 fefe 	bl	800c9cc <rcutils_get_default_allocator>
 8016bd0:	4b09      	ldr	r3, [pc, #36]	@ (8016bf8 <rcl_guard_condition_get_default_options+0x34>)
 8016bd2:	46ee      	mov	lr, sp
 8016bd4:	469c      	mov	ip, r3
 8016bd6:	461d      	mov	r5, r3
 8016bd8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016bdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016be2:	4634      	mov	r4, r6
 8016be4:	f8de 7000 	ldr.w	r7, [lr]
 8016be8:	f8cc 7000 	str.w	r7, [ip]
 8016bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016bee:	4630      	mov	r0, r6
 8016bf0:	6027      	str	r7, [r4, #0]
 8016bf2:	b007      	add	sp, #28
 8016bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bf6:	bf00      	nop
 8016bf8:	2000ded4 	.word	0x2000ded4

08016bfc <rcl_guard_condition_get_rmw_handle>:
 8016bfc:	b110      	cbz	r0, 8016c04 <rcl_guard_condition_get_rmw_handle+0x8>
 8016bfe:	6840      	ldr	r0, [r0, #4]
 8016c00:	b100      	cbz	r0, 8016c04 <rcl_guard_condition_get_rmw_handle+0x8>
 8016c02:	6800      	ldr	r0, [r0, #0]
 8016c04:	4770      	bx	lr
 8016c06:	bf00      	nop

08016c08 <rcl_validate_topic_name>:
 8016c08:	2800      	cmp	r0, #0
 8016c0a:	d07a      	beq.n	8016d02 <rcl_validate_topic_name+0xfa>
 8016c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c10:	460e      	mov	r6, r1
 8016c12:	2900      	cmp	r1, #0
 8016c14:	d07c      	beq.n	8016d10 <rcl_validate_topic_name+0x108>
 8016c16:	4617      	mov	r7, r2
 8016c18:	4605      	mov	r5, r0
 8016c1a:	f7e9 faeb 	bl	80001f4 <strlen>
 8016c1e:	b1b0      	cbz	r0, 8016c4e <rcl_validate_topic_name+0x46>
 8016c20:	f895 9000 	ldrb.w	r9, [r5]
 8016c24:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8016da8 <rcl_validate_topic_name+0x1a0>
 8016c28:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8016c2c:	f013 0304 	ands.w	r3, r3, #4
 8016c30:	d169      	bne.n	8016d06 <rcl_validate_topic_name+0xfe>
 8016c32:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8016c36:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016c3a:	2a2f      	cmp	r2, #47	@ 0x2f
 8016c3c:	d10e      	bne.n	8016c5c <rcl_validate_topic_name+0x54>
 8016c3e:	2202      	movs	r2, #2
 8016c40:	6032      	str	r2, [r6, #0]
 8016c42:	b36f      	cbz	r7, 8016ca0 <rcl_validate_topic_name+0x98>
 8016c44:	f8c7 8000 	str.w	r8, [r7]
 8016c48:	4618      	mov	r0, r3
 8016c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c4e:	2301      	movs	r3, #1
 8016c50:	6033      	str	r3, [r6, #0]
 8016c52:	b32f      	cbz	r7, 8016ca0 <rcl_validate_topic_name+0x98>
 8016c54:	2000      	movs	r0, #0
 8016c56:	6038      	str	r0, [r7, #0]
 8016c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c5c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8016c60:	461c      	mov	r4, r3
 8016c62:	4619      	mov	r1, r3
 8016c64:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016c68:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016c6c:	f1be 0f09 	cmp.w	lr, #9
 8016c70:	d919      	bls.n	8016ca6 <rcl_validate_topic_name+0x9e>
 8016c72:	f022 0e20 	bic.w	lr, r2, #32
 8016c76:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8016c7a:	f1be 0f19 	cmp.w	lr, #25
 8016c7e:	d912      	bls.n	8016ca6 <rcl_validate_topic_name+0x9e>
 8016c80:	2a5f      	cmp	r2, #95	@ 0x5f
 8016c82:	d019      	beq.n	8016cb8 <rcl_validate_topic_name+0xb0>
 8016c84:	2a2f      	cmp	r2, #47	@ 0x2f
 8016c86:	d051      	beq.n	8016d2c <rcl_validate_topic_name+0x124>
 8016c88:	2a7e      	cmp	r2, #126	@ 0x7e
 8016c8a:	d048      	beq.n	8016d1e <rcl_validate_topic_name+0x116>
 8016c8c:	2a7b      	cmp	r2, #123	@ 0x7b
 8016c8e:	d054      	beq.n	8016d3a <rcl_validate_topic_name+0x132>
 8016c90:	2a7d      	cmp	r2, #125	@ 0x7d
 8016c92:	d161      	bne.n	8016d58 <rcl_validate_topic_name+0x150>
 8016c94:	2c00      	cmp	r4, #0
 8016c96:	d155      	bne.n	8016d44 <rcl_validate_topic_name+0x13c>
 8016c98:	2305      	movs	r3, #5
 8016c9a:	6033      	str	r3, [r6, #0]
 8016c9c:	b107      	cbz	r7, 8016ca0 <rcl_validate_topic_name+0x98>
 8016c9e:	6039      	str	r1, [r7, #0]
 8016ca0:	2000      	movs	r0, #0
 8016ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ca6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016caa:	0752      	lsls	r2, r2, #29
 8016cac:	d504      	bpl.n	8016cb8 <rcl_validate_topic_name+0xb0>
 8016cae:	b11c      	cbz	r4, 8016cb8 <rcl_validate_topic_name+0xb0>
 8016cb0:	b111      	cbz	r1, 8016cb8 <rcl_validate_topic_name+0xb0>
 8016cb2:	1e4a      	subs	r2, r1, #1
 8016cb4:	429a      	cmp	r2, r3
 8016cb6:	d02d      	beq.n	8016d14 <rcl_validate_topic_name+0x10c>
 8016cb8:	3101      	adds	r1, #1
 8016cba:	4288      	cmp	r0, r1
 8016cbc:	d1d2      	bne.n	8016c64 <rcl_validate_topic_name+0x5c>
 8016cbe:	2c00      	cmp	r4, #0
 8016cc0:	d145      	bne.n	8016d4e <rcl_validate_topic_name+0x146>
 8016cc2:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8016cc6:	d04f      	beq.n	8016d68 <rcl_validate_topic_name+0x160>
 8016cc8:	4620      	mov	r0, r4
 8016cca:	2301      	movs	r3, #1
 8016ccc:	e006      	b.n	8016cdc <rcl_validate_topic_name+0xd4>
 8016cce:	428b      	cmp	r3, r1
 8016cd0:	f105 0501 	add.w	r5, r5, #1
 8016cd4:	f103 0201 	add.w	r2, r3, #1
 8016cd8:	d236      	bcs.n	8016d48 <rcl_validate_topic_name+0x140>
 8016cda:	4613      	mov	r3, r2
 8016cdc:	4580      	cmp	r8, r0
 8016cde:	f100 0001 	add.w	r0, r0, #1
 8016ce2:	d0f4      	beq.n	8016cce <rcl_validate_topic_name+0xc6>
 8016ce4:	782a      	ldrb	r2, [r5, #0]
 8016ce6:	2a2f      	cmp	r2, #47	@ 0x2f
 8016ce8:	d1f1      	bne.n	8016cce <rcl_validate_topic_name+0xc6>
 8016cea:	786a      	ldrb	r2, [r5, #1]
 8016cec:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016cf0:	0754      	lsls	r4, r2, #29
 8016cf2:	d5ec      	bpl.n	8016cce <rcl_validate_topic_name+0xc6>
 8016cf4:	2204      	movs	r2, #4
 8016cf6:	6032      	str	r2, [r6, #0]
 8016cf8:	2f00      	cmp	r7, #0
 8016cfa:	d0d1      	beq.n	8016ca0 <rcl_validate_topic_name+0x98>
 8016cfc:	603b      	str	r3, [r7, #0]
 8016cfe:	2000      	movs	r0, #0
 8016d00:	e7aa      	b.n	8016c58 <rcl_validate_topic_name+0x50>
 8016d02:	200b      	movs	r0, #11
 8016d04:	4770      	bx	lr
 8016d06:	2304      	movs	r3, #4
 8016d08:	6033      	str	r3, [r6, #0]
 8016d0a:	2f00      	cmp	r7, #0
 8016d0c:	d1a2      	bne.n	8016c54 <rcl_validate_topic_name+0x4c>
 8016d0e:	e7c7      	b.n	8016ca0 <rcl_validate_topic_name+0x98>
 8016d10:	200b      	movs	r0, #11
 8016d12:	e7a1      	b.n	8016c58 <rcl_validate_topic_name+0x50>
 8016d14:	2309      	movs	r3, #9
 8016d16:	6033      	str	r3, [r6, #0]
 8016d18:	2f00      	cmp	r7, #0
 8016d1a:	d1c0      	bne.n	8016c9e <rcl_validate_topic_name+0x96>
 8016d1c:	e7c0      	b.n	8016ca0 <rcl_validate_topic_name+0x98>
 8016d1e:	2900      	cmp	r1, #0
 8016d20:	d0ca      	beq.n	8016cb8 <rcl_validate_topic_name+0xb0>
 8016d22:	2306      	movs	r3, #6
 8016d24:	6033      	str	r3, [r6, #0]
 8016d26:	2f00      	cmp	r7, #0
 8016d28:	d1b9      	bne.n	8016c9e <rcl_validate_topic_name+0x96>
 8016d2a:	e7b9      	b.n	8016ca0 <rcl_validate_topic_name+0x98>
 8016d2c:	2c00      	cmp	r4, #0
 8016d2e:	d0c3      	beq.n	8016cb8 <rcl_validate_topic_name+0xb0>
 8016d30:	2308      	movs	r3, #8
 8016d32:	6033      	str	r3, [r6, #0]
 8016d34:	2f00      	cmp	r7, #0
 8016d36:	d1b2      	bne.n	8016c9e <rcl_validate_topic_name+0x96>
 8016d38:	e7b2      	b.n	8016ca0 <rcl_validate_topic_name+0x98>
 8016d3a:	2c00      	cmp	r4, #0
 8016d3c:	d1f8      	bne.n	8016d30 <rcl_validate_topic_name+0x128>
 8016d3e:	460b      	mov	r3, r1
 8016d40:	2401      	movs	r4, #1
 8016d42:	e7b9      	b.n	8016cb8 <rcl_validate_topic_name+0xb0>
 8016d44:	2400      	movs	r4, #0
 8016d46:	e7b7      	b.n	8016cb8 <rcl_validate_topic_name+0xb0>
 8016d48:	2000      	movs	r0, #0
 8016d4a:	6030      	str	r0, [r6, #0]
 8016d4c:	e784      	b.n	8016c58 <rcl_validate_topic_name+0x50>
 8016d4e:	2205      	movs	r2, #5
 8016d50:	6032      	str	r2, [r6, #0]
 8016d52:	2f00      	cmp	r7, #0
 8016d54:	d1d2      	bne.n	8016cfc <rcl_validate_topic_name+0xf4>
 8016d56:	e7a3      	b.n	8016ca0 <rcl_validate_topic_name+0x98>
 8016d58:	2c00      	cmp	r4, #0
 8016d5a:	bf14      	ite	ne
 8016d5c:	2308      	movne	r3, #8
 8016d5e:	2303      	moveq	r3, #3
 8016d60:	6033      	str	r3, [r6, #0]
 8016d62:	2f00      	cmp	r7, #0
 8016d64:	d19b      	bne.n	8016c9e <rcl_validate_topic_name+0x96>
 8016d66:	e79b      	b.n	8016ca0 <rcl_validate_topic_name+0x98>
 8016d68:	2301      	movs	r3, #1
 8016d6a:	e00a      	b.n	8016d82 <rcl_validate_topic_name+0x17a>
 8016d6c:	2c01      	cmp	r4, #1
 8016d6e:	d013      	beq.n	8016d98 <rcl_validate_topic_name+0x190>
 8016d70:	4299      	cmp	r1, r3
 8016d72:	f104 0401 	add.w	r4, r4, #1
 8016d76:	f105 0501 	add.w	r5, r5, #1
 8016d7a:	f103 0201 	add.w	r2, r3, #1
 8016d7e:	d9e3      	bls.n	8016d48 <rcl_validate_topic_name+0x140>
 8016d80:	4613      	mov	r3, r2
 8016d82:	45a0      	cmp	r8, r4
 8016d84:	d0f4      	beq.n	8016d70 <rcl_validate_topic_name+0x168>
 8016d86:	782a      	ldrb	r2, [r5, #0]
 8016d88:	2a2f      	cmp	r2, #47	@ 0x2f
 8016d8a:	d1ef      	bne.n	8016d6c <rcl_validate_topic_name+0x164>
 8016d8c:	786a      	ldrb	r2, [r5, #1]
 8016d8e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016d92:	0752      	lsls	r2, r2, #29
 8016d94:	d5ec      	bpl.n	8016d70 <rcl_validate_topic_name+0x168>
 8016d96:	e7ad      	b.n	8016cf4 <rcl_validate_topic_name+0xec>
 8016d98:	2307      	movs	r3, #7
 8016d9a:	6033      	str	r3, [r6, #0]
 8016d9c:	2f00      	cmp	r7, #0
 8016d9e:	f43f af7f 	beq.w	8016ca0 <rcl_validate_topic_name+0x98>
 8016da2:	603c      	str	r4, [r7, #0]
 8016da4:	2000      	movs	r0, #0
 8016da6:	e757      	b.n	8016c58 <rcl_validate_topic_name+0x50>
 8016da8:	080195c4 	.word	0x080195c4

08016dac <rcutils_string_array_fini>:
 8016dac:	b320      	cbz	r0, 8016df8 <rcutils_string_array_fini+0x4c>
 8016dae:	b570      	push	{r4, r5, r6, lr}
 8016db0:	4604      	mov	r4, r0
 8016db2:	6840      	ldr	r0, [r0, #4]
 8016db4:	b1d8      	cbz	r0, 8016dee <rcutils_string_array_fini+0x42>
 8016db6:	f104 0008 	add.w	r0, r4, #8
 8016dba:	f7f5 fe15 	bl	800c9e8 <rcutils_allocator_is_valid>
 8016dbe:	b1b8      	cbz	r0, 8016df0 <rcutils_string_array_fini+0x44>
 8016dc0:	6823      	ldr	r3, [r4, #0]
 8016dc2:	b1bb      	cbz	r3, 8016df4 <rcutils_string_array_fini+0x48>
 8016dc4:	2500      	movs	r5, #0
 8016dc6:	6860      	ldr	r0, [r4, #4]
 8016dc8:	462e      	mov	r6, r5
 8016dca:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8016dce:	68e3      	ldr	r3, [r4, #12]
 8016dd0:	69a1      	ldr	r1, [r4, #24]
 8016dd2:	4798      	blx	r3
 8016dd4:	e9d4 3000 	ldrd	r3, r0, [r4]
 8016dd8:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8016ddc:	3501      	adds	r5, #1
 8016dde:	429d      	cmp	r5, r3
 8016de0:	d3f3      	bcc.n	8016dca <rcutils_string_array_fini+0x1e>
 8016de2:	68e3      	ldr	r3, [r4, #12]
 8016de4:	69a1      	ldr	r1, [r4, #24]
 8016de6:	4798      	blx	r3
 8016de8:	2000      	movs	r0, #0
 8016dea:	e9c4 0000 	strd	r0, r0, [r4]
 8016dee:	bd70      	pop	{r4, r5, r6, pc}
 8016df0:	200b      	movs	r0, #11
 8016df2:	bd70      	pop	{r4, r5, r6, pc}
 8016df4:	6860      	ldr	r0, [r4, #4]
 8016df6:	e7f4      	b.n	8016de2 <rcutils_string_array_fini+0x36>
 8016df8:	200b      	movs	r0, #11
 8016dfa:	4770      	bx	lr

08016dfc <on_status>:
 8016dfc:	b082      	sub	sp, #8
 8016dfe:	b002      	add	sp, #8
 8016e00:	4770      	bx	lr
 8016e02:	bf00      	nop

08016e04 <on_topic>:
 8016e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e08:	4a22      	ldr	r2, [pc, #136]	@ (8016e94 <on_topic+0x90>)
 8016e0a:	b094      	sub	sp, #80	@ 0x50
 8016e0c:	6812      	ldr	r2, [r2, #0]
 8016e0e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8016e10:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016e14:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016e18:	b3c2      	cbz	r2, 8016e8c <on_topic+0x88>
 8016e1a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8016e1e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8016e22:	e001      	b.n	8016e28 <on_topic+0x24>
 8016e24:	6852      	ldr	r2, [r2, #4]
 8016e26:	b38a      	cbz	r2, 8016e8c <on_topic+0x88>
 8016e28:	6894      	ldr	r4, [r2, #8]
 8016e2a:	8aa3      	ldrh	r3, [r4, #20]
 8016e2c:	428b      	cmp	r3, r1
 8016e2e:	d1f9      	bne.n	8016e24 <on_topic+0x20>
 8016e30:	7da3      	ldrb	r3, [r4, #22]
 8016e32:	4283      	cmp	r3, r0
 8016e34:	d1f6      	bne.n	8016e24 <on_topic+0x20>
 8016e36:	2248      	movs	r2, #72	@ 0x48
 8016e38:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016e3c:	4668      	mov	r0, sp
 8016e3e:	f000 fda0 	bl	8017982 <memcpy>
 8016e42:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8016e46:	cb0c      	ldmia	r3, {r2, r3}
 8016e48:	4620      	mov	r0, r4
 8016e4a:	f7f6 f9fd 	bl	800d248 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016e4e:	4607      	mov	r7, r0
 8016e50:	b1e0      	cbz	r0, 8016e8c <on_topic+0x88>
 8016e52:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016e56:	4632      	mov	r2, r6
 8016e58:	4628      	mov	r0, r5
 8016e5a:	f108 0110 	add.w	r1, r8, #16
 8016e5e:	f7fd ffc9 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 8016e62:	b930      	cbnz	r0, 8016e72 <on_topic+0x6e>
 8016e64:	480c      	ldr	r0, [pc, #48]	@ (8016e98 <on_topic+0x94>)
 8016e66:	4639      	mov	r1, r7
 8016e68:	b014      	add	sp, #80	@ 0x50
 8016e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e6e:	f7fc bdb7 	b.w	80139e0 <put_memory>
 8016e72:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8016e76:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8016e7a:	f7fd fedf 	bl	8014c3c <rmw_uros_epoch_nanos>
 8016e7e:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8016e82:	2305      	movs	r3, #5
 8016e84:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016e88:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8016e8c:	b014      	add	sp, #80	@ 0x50
 8016e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e92:	bf00      	nop
 8016e94:	2000dd34 	.word	0x2000dd34
 8016e98:	2000dd24 	.word	0x2000dd24

08016e9c <on_request>:
 8016e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ea0:	4823      	ldr	r0, [pc, #140]	@ (8016f30 <on_request+0x94>)
 8016ea2:	b094      	sub	sp, #80	@ 0x50
 8016ea4:	6800      	ldr	r0, [r0, #0]
 8016ea6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016ea8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016eac:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016eae:	2800      	cmp	r0, #0
 8016eb0:	d03b      	beq.n	8016f2a <on_request+0x8e>
 8016eb2:	461d      	mov	r5, r3
 8016eb4:	e001      	b.n	8016eba <on_request+0x1e>
 8016eb6:	6840      	ldr	r0, [r0, #4]
 8016eb8:	b3b8      	cbz	r0, 8016f2a <on_request+0x8e>
 8016eba:	6884      	ldr	r4, [r0, #8]
 8016ebc:	8b21      	ldrh	r1, [r4, #24]
 8016ebe:	4291      	cmp	r1, r2
 8016ec0:	d1f9      	bne.n	8016eb6 <on_request+0x1a>
 8016ec2:	2248      	movs	r2, #72	@ 0x48
 8016ec4:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016ec8:	4668      	mov	r0, sp
 8016eca:	f000 fd5a 	bl	8017982 <memcpy>
 8016ece:	f104 0320 	add.w	r3, r4, #32
 8016ed2:	cb0c      	ldmia	r3, {r2, r3}
 8016ed4:	4620      	mov	r0, r4
 8016ed6:	f7f6 f9b7 	bl	800d248 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016eda:	4680      	mov	r8, r0
 8016edc:	b328      	cbz	r0, 8016f2a <on_request+0x8e>
 8016ede:	4638      	mov	r0, r7
 8016ee0:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016ee4:	4632      	mov	r2, r6
 8016ee6:	f107 0110 	add.w	r1, r7, #16
 8016eea:	f7fd ff83 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 8016eee:	b930      	cbnz	r0, 8016efe <on_request+0x62>
 8016ef0:	4810      	ldr	r0, [pc, #64]	@ (8016f34 <on_request+0x98>)
 8016ef2:	4641      	mov	r1, r8
 8016ef4:	b014      	add	sp, #80	@ 0x50
 8016ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016efa:	f7fc bd71 	b.w	80139e0 <put_memory>
 8016efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f00:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8016f04:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016f08:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016f0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016f14:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016f18:	f7fd fe90 	bl	8014c3c <rmw_uros_epoch_nanos>
 8016f1c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016f20:	2303      	movs	r3, #3
 8016f22:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016f26:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016f2a:	b014      	add	sp, #80	@ 0x50
 8016f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f30:	2000dd04 	.word	0x2000dd04
 8016f34:	2000dd24 	.word	0x2000dd24

08016f38 <on_reply>:
 8016f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f3c:	4821      	ldr	r0, [pc, #132]	@ (8016fc4 <on_reply+0x8c>)
 8016f3e:	b094      	sub	sp, #80	@ 0x50
 8016f40:	6800      	ldr	r0, [r0, #0]
 8016f42:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016f44:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016f48:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016f4a:	b3b8      	cbz	r0, 8016fbc <on_reply+0x84>
 8016f4c:	461d      	mov	r5, r3
 8016f4e:	e001      	b.n	8016f54 <on_reply+0x1c>
 8016f50:	6840      	ldr	r0, [r0, #4]
 8016f52:	b398      	cbz	r0, 8016fbc <on_reply+0x84>
 8016f54:	6884      	ldr	r4, [r0, #8]
 8016f56:	8b21      	ldrh	r1, [r4, #24]
 8016f58:	4291      	cmp	r1, r2
 8016f5a:	d1f9      	bne.n	8016f50 <on_reply+0x18>
 8016f5c:	2248      	movs	r2, #72	@ 0x48
 8016f5e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016f62:	4668      	mov	r0, sp
 8016f64:	f000 fd0d 	bl	8017982 <memcpy>
 8016f68:	f104 0320 	add.w	r3, r4, #32
 8016f6c:	cb0c      	ldmia	r3, {r2, r3}
 8016f6e:	4620      	mov	r0, r4
 8016f70:	f7f6 f96a 	bl	800d248 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016f74:	4680      	mov	r8, r0
 8016f76:	b308      	cbz	r0, 8016fbc <on_reply+0x84>
 8016f78:	4638      	mov	r0, r7
 8016f7a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016f7e:	4632      	mov	r2, r6
 8016f80:	f107 0110 	add.w	r1, r7, #16
 8016f84:	f7fd ff36 	bl	8014df4 <ucdr_deserialize_array_uint8_t>
 8016f88:	b930      	cbnz	r0, 8016f98 <on_reply+0x60>
 8016f8a:	480f      	ldr	r0, [pc, #60]	@ (8016fc8 <on_reply+0x90>)
 8016f8c:	4641      	mov	r1, r8
 8016f8e:	b014      	add	sp, #80	@ 0x50
 8016f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f94:	f7fc bd24 	b.w	80139e0 <put_memory>
 8016f98:	2200      	movs	r2, #0
 8016f9a:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8016f9e:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016fa2:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016fa6:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8016faa:	f7fd fe47 	bl	8014c3c <rmw_uros_epoch_nanos>
 8016fae:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016fb2:	2304      	movs	r3, #4
 8016fb4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016fb8:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016fbc:	b014      	add	sp, #80	@ 0x50
 8016fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fc2:	bf00      	nop
 8016fc4:	20009418 	.word	0x20009418
 8016fc8:	2000dd24 	.word	0x2000dd24

08016fcc <rmw_create_guard_condition>:
 8016fcc:	b538      	push	{r3, r4, r5, lr}
 8016fce:	4605      	mov	r5, r0
 8016fd0:	4807      	ldr	r0, [pc, #28]	@ (8016ff0 <rmw_create_guard_condition+0x24>)
 8016fd2:	f7fc fcf5 	bl	80139c0 <get_memory>
 8016fd6:	b148      	cbz	r0, 8016fec <rmw_create_guard_condition+0x20>
 8016fd8:	6884      	ldr	r4, [r0, #8]
 8016fda:	2300      	movs	r3, #0
 8016fdc:	7423      	strb	r3, [r4, #16]
 8016fde:	61e5      	str	r5, [r4, #28]
 8016fe0:	f7fc fd56 	bl	8013a90 <rmw_get_implementation_identifier>
 8016fe4:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016fe8:	f104 0014 	add.w	r0, r4, #20
 8016fec:	bd38      	pop	{r3, r4, r5, pc}
 8016fee:	bf00      	nop
 8016ff0:	2000dcc4 	.word	0x2000dcc4

08016ff4 <rmw_destroy_guard_condition>:
 8016ff4:	b508      	push	{r3, lr}
 8016ff6:	4b08      	ldr	r3, [pc, #32]	@ (8017018 <rmw_destroy_guard_condition+0x24>)
 8016ff8:	6819      	ldr	r1, [r3, #0]
 8016ffa:	b911      	cbnz	r1, 8017002 <rmw_destroy_guard_condition+0xe>
 8016ffc:	e00a      	b.n	8017014 <rmw_destroy_guard_condition+0x20>
 8016ffe:	6849      	ldr	r1, [r1, #4]
 8017000:	b141      	cbz	r1, 8017014 <rmw_destroy_guard_condition+0x20>
 8017002:	688b      	ldr	r3, [r1, #8]
 8017004:	3314      	adds	r3, #20
 8017006:	4298      	cmp	r0, r3
 8017008:	d1f9      	bne.n	8016ffe <rmw_destroy_guard_condition+0xa>
 801700a:	4803      	ldr	r0, [pc, #12]	@ (8017018 <rmw_destroy_guard_condition+0x24>)
 801700c:	f7fc fce8 	bl	80139e0 <put_memory>
 8017010:	2000      	movs	r0, #0
 8017012:	bd08      	pop	{r3, pc}
 8017014:	2001      	movs	r0, #1
 8017016:	bd08      	pop	{r3, pc}
 8017018:	2000dcc4 	.word	0x2000dcc4

0801701c <calloc>:
 801701c:	4b02      	ldr	r3, [pc, #8]	@ (8017028 <calloc+0xc>)
 801701e:	460a      	mov	r2, r1
 8017020:	4601      	mov	r1, r0
 8017022:	6818      	ldr	r0, [r3, #0]
 8017024:	f000 b802 	b.w	801702c <_calloc_r>
 8017028:	20000268 	.word	0x20000268

0801702c <_calloc_r>:
 801702c:	b570      	push	{r4, r5, r6, lr}
 801702e:	fba1 5402 	umull	r5, r4, r1, r2
 8017032:	b93c      	cbnz	r4, 8017044 <_calloc_r+0x18>
 8017034:	4629      	mov	r1, r5
 8017036:	f000 f887 	bl	8017148 <_malloc_r>
 801703a:	4606      	mov	r6, r0
 801703c:	b928      	cbnz	r0, 801704a <_calloc_r+0x1e>
 801703e:	2600      	movs	r6, #0
 8017040:	4630      	mov	r0, r6
 8017042:	bd70      	pop	{r4, r5, r6, pc}
 8017044:	220c      	movs	r2, #12
 8017046:	6002      	str	r2, [r0, #0]
 8017048:	e7f9      	b.n	801703e <_calloc_r+0x12>
 801704a:	462a      	mov	r2, r5
 801704c:	4621      	mov	r1, r4
 801704e:	f000 fbcf 	bl	80177f0 <memset>
 8017052:	e7f5      	b.n	8017040 <_calloc_r+0x14>

08017054 <getenv>:
 8017054:	b507      	push	{r0, r1, r2, lr}
 8017056:	4b04      	ldr	r3, [pc, #16]	@ (8017068 <getenv+0x14>)
 8017058:	4601      	mov	r1, r0
 801705a:	aa01      	add	r2, sp, #4
 801705c:	6818      	ldr	r0, [r3, #0]
 801705e:	f000 f805 	bl	801706c <_findenv_r>
 8017062:	b003      	add	sp, #12
 8017064:	f85d fb04 	ldr.w	pc, [sp], #4
 8017068:	20000268 	.word	0x20000268

0801706c <_findenv_r>:
 801706c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017070:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80170e0 <_findenv_r+0x74>
 8017074:	4606      	mov	r6, r0
 8017076:	4689      	mov	r9, r1
 8017078:	4617      	mov	r7, r2
 801707a:	f000 fcaf 	bl	80179dc <__env_lock>
 801707e:	f8da 4000 	ldr.w	r4, [sl]
 8017082:	b134      	cbz	r4, 8017092 <_findenv_r+0x26>
 8017084:	464b      	mov	r3, r9
 8017086:	4698      	mov	r8, r3
 8017088:	f813 2b01 	ldrb.w	r2, [r3], #1
 801708c:	b13a      	cbz	r2, 801709e <_findenv_r+0x32>
 801708e:	2a3d      	cmp	r2, #61	@ 0x3d
 8017090:	d1f9      	bne.n	8017086 <_findenv_r+0x1a>
 8017092:	4630      	mov	r0, r6
 8017094:	f000 fca8 	bl	80179e8 <__env_unlock>
 8017098:	2000      	movs	r0, #0
 801709a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801709e:	eba8 0809 	sub.w	r8, r8, r9
 80170a2:	46a3      	mov	fp, r4
 80170a4:	f854 0b04 	ldr.w	r0, [r4], #4
 80170a8:	2800      	cmp	r0, #0
 80170aa:	d0f2      	beq.n	8017092 <_findenv_r+0x26>
 80170ac:	4642      	mov	r2, r8
 80170ae:	4649      	mov	r1, r9
 80170b0:	f000 fbb3 	bl	801781a <strncmp>
 80170b4:	2800      	cmp	r0, #0
 80170b6:	d1f4      	bne.n	80170a2 <_findenv_r+0x36>
 80170b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80170bc:	eb03 0508 	add.w	r5, r3, r8
 80170c0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80170c4:	2b3d      	cmp	r3, #61	@ 0x3d
 80170c6:	d1ec      	bne.n	80170a2 <_findenv_r+0x36>
 80170c8:	f8da 3000 	ldr.w	r3, [sl]
 80170cc:	ebab 0303 	sub.w	r3, fp, r3
 80170d0:	109b      	asrs	r3, r3, #2
 80170d2:	4630      	mov	r0, r6
 80170d4:	603b      	str	r3, [r7, #0]
 80170d6:	f000 fc87 	bl	80179e8 <__env_unlock>
 80170da:	1c68      	adds	r0, r5, #1
 80170dc:	e7dd      	b.n	801709a <_findenv_r+0x2e>
 80170de:	bf00      	nop
 80170e0:	20000000 	.word	0x20000000

080170e4 <malloc>:
 80170e4:	4b02      	ldr	r3, [pc, #8]	@ (80170f0 <malloc+0xc>)
 80170e6:	4601      	mov	r1, r0
 80170e8:	6818      	ldr	r0, [r3, #0]
 80170ea:	f000 b82d 	b.w	8017148 <_malloc_r>
 80170ee:	bf00      	nop
 80170f0:	20000268 	.word	0x20000268

080170f4 <free>:
 80170f4:	4b02      	ldr	r3, [pc, #8]	@ (8017100 <free+0xc>)
 80170f6:	4601      	mov	r1, r0
 80170f8:	6818      	ldr	r0, [r3, #0]
 80170fa:	f000 bc7b 	b.w	80179f4 <_free_r>
 80170fe:	bf00      	nop
 8017100:	20000268 	.word	0x20000268

08017104 <sbrk_aligned>:
 8017104:	b570      	push	{r4, r5, r6, lr}
 8017106:	4e0f      	ldr	r6, [pc, #60]	@ (8017144 <sbrk_aligned+0x40>)
 8017108:	460c      	mov	r4, r1
 801710a:	6831      	ldr	r1, [r6, #0]
 801710c:	4605      	mov	r5, r0
 801710e:	b911      	cbnz	r1, 8017116 <sbrk_aligned+0x12>
 8017110:	f000 fbe0 	bl	80178d4 <_sbrk_r>
 8017114:	6030      	str	r0, [r6, #0]
 8017116:	4621      	mov	r1, r4
 8017118:	4628      	mov	r0, r5
 801711a:	f000 fbdb 	bl	80178d4 <_sbrk_r>
 801711e:	1c43      	adds	r3, r0, #1
 8017120:	d103      	bne.n	801712a <sbrk_aligned+0x26>
 8017122:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017126:	4620      	mov	r0, r4
 8017128:	bd70      	pop	{r4, r5, r6, pc}
 801712a:	1cc4      	adds	r4, r0, #3
 801712c:	f024 0403 	bic.w	r4, r4, #3
 8017130:	42a0      	cmp	r0, r4
 8017132:	d0f8      	beq.n	8017126 <sbrk_aligned+0x22>
 8017134:	1a21      	subs	r1, r4, r0
 8017136:	4628      	mov	r0, r5
 8017138:	f000 fbcc 	bl	80178d4 <_sbrk_r>
 801713c:	3001      	adds	r0, #1
 801713e:	d1f2      	bne.n	8017126 <sbrk_aligned+0x22>
 8017140:	e7ef      	b.n	8017122 <sbrk_aligned+0x1e>
 8017142:	bf00      	nop
 8017144:	2000dee8 	.word	0x2000dee8

08017148 <_malloc_r>:
 8017148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801714c:	1ccd      	adds	r5, r1, #3
 801714e:	f025 0503 	bic.w	r5, r5, #3
 8017152:	3508      	adds	r5, #8
 8017154:	2d0c      	cmp	r5, #12
 8017156:	bf38      	it	cc
 8017158:	250c      	movcc	r5, #12
 801715a:	2d00      	cmp	r5, #0
 801715c:	4606      	mov	r6, r0
 801715e:	db01      	blt.n	8017164 <_malloc_r+0x1c>
 8017160:	42a9      	cmp	r1, r5
 8017162:	d904      	bls.n	801716e <_malloc_r+0x26>
 8017164:	230c      	movs	r3, #12
 8017166:	6033      	str	r3, [r6, #0]
 8017168:	2000      	movs	r0, #0
 801716a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801716e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017244 <_malloc_r+0xfc>
 8017172:	f000 f869 	bl	8017248 <__malloc_lock>
 8017176:	f8d8 3000 	ldr.w	r3, [r8]
 801717a:	461c      	mov	r4, r3
 801717c:	bb44      	cbnz	r4, 80171d0 <_malloc_r+0x88>
 801717e:	4629      	mov	r1, r5
 8017180:	4630      	mov	r0, r6
 8017182:	f7ff ffbf 	bl	8017104 <sbrk_aligned>
 8017186:	1c43      	adds	r3, r0, #1
 8017188:	4604      	mov	r4, r0
 801718a:	d158      	bne.n	801723e <_malloc_r+0xf6>
 801718c:	f8d8 4000 	ldr.w	r4, [r8]
 8017190:	4627      	mov	r7, r4
 8017192:	2f00      	cmp	r7, #0
 8017194:	d143      	bne.n	801721e <_malloc_r+0xd6>
 8017196:	2c00      	cmp	r4, #0
 8017198:	d04b      	beq.n	8017232 <_malloc_r+0xea>
 801719a:	6823      	ldr	r3, [r4, #0]
 801719c:	4639      	mov	r1, r7
 801719e:	4630      	mov	r0, r6
 80171a0:	eb04 0903 	add.w	r9, r4, r3
 80171a4:	f000 fb96 	bl	80178d4 <_sbrk_r>
 80171a8:	4581      	cmp	r9, r0
 80171aa:	d142      	bne.n	8017232 <_malloc_r+0xea>
 80171ac:	6821      	ldr	r1, [r4, #0]
 80171ae:	1a6d      	subs	r5, r5, r1
 80171b0:	4629      	mov	r1, r5
 80171b2:	4630      	mov	r0, r6
 80171b4:	f7ff ffa6 	bl	8017104 <sbrk_aligned>
 80171b8:	3001      	adds	r0, #1
 80171ba:	d03a      	beq.n	8017232 <_malloc_r+0xea>
 80171bc:	6823      	ldr	r3, [r4, #0]
 80171be:	442b      	add	r3, r5
 80171c0:	6023      	str	r3, [r4, #0]
 80171c2:	f8d8 3000 	ldr.w	r3, [r8]
 80171c6:	685a      	ldr	r2, [r3, #4]
 80171c8:	bb62      	cbnz	r2, 8017224 <_malloc_r+0xdc>
 80171ca:	f8c8 7000 	str.w	r7, [r8]
 80171ce:	e00f      	b.n	80171f0 <_malloc_r+0xa8>
 80171d0:	6822      	ldr	r2, [r4, #0]
 80171d2:	1b52      	subs	r2, r2, r5
 80171d4:	d420      	bmi.n	8017218 <_malloc_r+0xd0>
 80171d6:	2a0b      	cmp	r2, #11
 80171d8:	d917      	bls.n	801720a <_malloc_r+0xc2>
 80171da:	1961      	adds	r1, r4, r5
 80171dc:	42a3      	cmp	r3, r4
 80171de:	6025      	str	r5, [r4, #0]
 80171e0:	bf18      	it	ne
 80171e2:	6059      	strne	r1, [r3, #4]
 80171e4:	6863      	ldr	r3, [r4, #4]
 80171e6:	bf08      	it	eq
 80171e8:	f8c8 1000 	streq.w	r1, [r8]
 80171ec:	5162      	str	r2, [r4, r5]
 80171ee:	604b      	str	r3, [r1, #4]
 80171f0:	4630      	mov	r0, r6
 80171f2:	f000 f82f 	bl	8017254 <__malloc_unlock>
 80171f6:	f104 000b 	add.w	r0, r4, #11
 80171fa:	1d23      	adds	r3, r4, #4
 80171fc:	f020 0007 	bic.w	r0, r0, #7
 8017200:	1ac2      	subs	r2, r0, r3
 8017202:	bf1c      	itt	ne
 8017204:	1a1b      	subne	r3, r3, r0
 8017206:	50a3      	strne	r3, [r4, r2]
 8017208:	e7af      	b.n	801716a <_malloc_r+0x22>
 801720a:	6862      	ldr	r2, [r4, #4]
 801720c:	42a3      	cmp	r3, r4
 801720e:	bf0c      	ite	eq
 8017210:	f8c8 2000 	streq.w	r2, [r8]
 8017214:	605a      	strne	r2, [r3, #4]
 8017216:	e7eb      	b.n	80171f0 <_malloc_r+0xa8>
 8017218:	4623      	mov	r3, r4
 801721a:	6864      	ldr	r4, [r4, #4]
 801721c:	e7ae      	b.n	801717c <_malloc_r+0x34>
 801721e:	463c      	mov	r4, r7
 8017220:	687f      	ldr	r7, [r7, #4]
 8017222:	e7b6      	b.n	8017192 <_malloc_r+0x4a>
 8017224:	461a      	mov	r2, r3
 8017226:	685b      	ldr	r3, [r3, #4]
 8017228:	42a3      	cmp	r3, r4
 801722a:	d1fb      	bne.n	8017224 <_malloc_r+0xdc>
 801722c:	2300      	movs	r3, #0
 801722e:	6053      	str	r3, [r2, #4]
 8017230:	e7de      	b.n	80171f0 <_malloc_r+0xa8>
 8017232:	230c      	movs	r3, #12
 8017234:	6033      	str	r3, [r6, #0]
 8017236:	4630      	mov	r0, r6
 8017238:	f000 f80c 	bl	8017254 <__malloc_unlock>
 801723c:	e794      	b.n	8017168 <_malloc_r+0x20>
 801723e:	6005      	str	r5, [r0, #0]
 8017240:	e7d6      	b.n	80171f0 <_malloc_r+0xa8>
 8017242:	bf00      	nop
 8017244:	2000deec 	.word	0x2000deec

08017248 <__malloc_lock>:
 8017248:	4801      	ldr	r0, [pc, #4]	@ (8017250 <__malloc_lock+0x8>)
 801724a:	f000 bb90 	b.w	801796e <__retarget_lock_acquire_recursive>
 801724e:	bf00      	nop
 8017250:	2000e031 	.word	0x2000e031

08017254 <__malloc_unlock>:
 8017254:	4801      	ldr	r0, [pc, #4]	@ (801725c <__malloc_unlock+0x8>)
 8017256:	f000 bb8b 	b.w	8017970 <__retarget_lock_release_recursive>
 801725a:	bf00      	nop
 801725c:	2000e031 	.word	0x2000e031

08017260 <srand>:
 8017260:	b538      	push	{r3, r4, r5, lr}
 8017262:	4b10      	ldr	r3, [pc, #64]	@ (80172a4 <srand+0x44>)
 8017264:	681d      	ldr	r5, [r3, #0]
 8017266:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017268:	4604      	mov	r4, r0
 801726a:	b9b3      	cbnz	r3, 801729a <srand+0x3a>
 801726c:	2018      	movs	r0, #24
 801726e:	f7ff ff39 	bl	80170e4 <malloc>
 8017272:	4602      	mov	r2, r0
 8017274:	6328      	str	r0, [r5, #48]	@ 0x30
 8017276:	b920      	cbnz	r0, 8017282 <srand+0x22>
 8017278:	4b0b      	ldr	r3, [pc, #44]	@ (80172a8 <srand+0x48>)
 801727a:	480c      	ldr	r0, [pc, #48]	@ (80172ac <srand+0x4c>)
 801727c:	2146      	movs	r1, #70	@ 0x46
 801727e:	f000 fb8f 	bl	80179a0 <__assert_func>
 8017282:	490b      	ldr	r1, [pc, #44]	@ (80172b0 <srand+0x50>)
 8017284:	4b0b      	ldr	r3, [pc, #44]	@ (80172b4 <srand+0x54>)
 8017286:	e9c0 1300 	strd	r1, r3, [r0]
 801728a:	4b0b      	ldr	r3, [pc, #44]	@ (80172b8 <srand+0x58>)
 801728c:	6083      	str	r3, [r0, #8]
 801728e:	230b      	movs	r3, #11
 8017290:	8183      	strh	r3, [r0, #12]
 8017292:	2100      	movs	r1, #0
 8017294:	2001      	movs	r0, #1
 8017296:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801729a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801729c:	2200      	movs	r2, #0
 801729e:	611c      	str	r4, [r3, #16]
 80172a0:	615a      	str	r2, [r3, #20]
 80172a2:	bd38      	pop	{r3, r4, r5, pc}
 80172a4:	20000268 	.word	0x20000268
 80172a8:	08019554 	.word	0x08019554
 80172ac:	0801956b 	.word	0x0801956b
 80172b0:	abcd330e 	.word	0xabcd330e
 80172b4:	e66d1234 	.word	0xe66d1234
 80172b8:	0005deec 	.word	0x0005deec

080172bc <rand>:
 80172bc:	4b16      	ldr	r3, [pc, #88]	@ (8017318 <rand+0x5c>)
 80172be:	b510      	push	{r4, lr}
 80172c0:	681c      	ldr	r4, [r3, #0]
 80172c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80172c4:	b9b3      	cbnz	r3, 80172f4 <rand+0x38>
 80172c6:	2018      	movs	r0, #24
 80172c8:	f7ff ff0c 	bl	80170e4 <malloc>
 80172cc:	4602      	mov	r2, r0
 80172ce:	6320      	str	r0, [r4, #48]	@ 0x30
 80172d0:	b920      	cbnz	r0, 80172dc <rand+0x20>
 80172d2:	4b12      	ldr	r3, [pc, #72]	@ (801731c <rand+0x60>)
 80172d4:	4812      	ldr	r0, [pc, #72]	@ (8017320 <rand+0x64>)
 80172d6:	2152      	movs	r1, #82	@ 0x52
 80172d8:	f000 fb62 	bl	80179a0 <__assert_func>
 80172dc:	4911      	ldr	r1, [pc, #68]	@ (8017324 <rand+0x68>)
 80172de:	4b12      	ldr	r3, [pc, #72]	@ (8017328 <rand+0x6c>)
 80172e0:	e9c0 1300 	strd	r1, r3, [r0]
 80172e4:	4b11      	ldr	r3, [pc, #68]	@ (801732c <rand+0x70>)
 80172e6:	6083      	str	r3, [r0, #8]
 80172e8:	230b      	movs	r3, #11
 80172ea:	8183      	strh	r3, [r0, #12]
 80172ec:	2100      	movs	r1, #0
 80172ee:	2001      	movs	r0, #1
 80172f0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80172f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80172f6:	480e      	ldr	r0, [pc, #56]	@ (8017330 <rand+0x74>)
 80172f8:	690b      	ldr	r3, [r1, #16]
 80172fa:	694c      	ldr	r4, [r1, #20]
 80172fc:	4a0d      	ldr	r2, [pc, #52]	@ (8017334 <rand+0x78>)
 80172fe:	4358      	muls	r0, r3
 8017300:	fb02 0004 	mla	r0, r2, r4, r0
 8017304:	fba3 3202 	umull	r3, r2, r3, r2
 8017308:	3301      	adds	r3, #1
 801730a:	eb40 0002 	adc.w	r0, r0, r2
 801730e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017312:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017316:	bd10      	pop	{r4, pc}
 8017318:	20000268 	.word	0x20000268
 801731c:	08019554 	.word	0x08019554
 8017320:	0801956b 	.word	0x0801956b
 8017324:	abcd330e 	.word	0xabcd330e
 8017328:	e66d1234 	.word	0xe66d1234
 801732c:	0005deec 	.word	0x0005deec
 8017330:	5851f42d 	.word	0x5851f42d
 8017334:	4c957f2d 	.word	0x4c957f2d

08017338 <realloc>:
 8017338:	4b02      	ldr	r3, [pc, #8]	@ (8017344 <realloc+0xc>)
 801733a:	460a      	mov	r2, r1
 801733c:	4601      	mov	r1, r0
 801733e:	6818      	ldr	r0, [r3, #0]
 8017340:	f000 b802 	b.w	8017348 <_realloc_r>
 8017344:	20000268 	.word	0x20000268

08017348 <_realloc_r>:
 8017348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801734c:	4680      	mov	r8, r0
 801734e:	4615      	mov	r5, r2
 8017350:	460c      	mov	r4, r1
 8017352:	b921      	cbnz	r1, 801735e <_realloc_r+0x16>
 8017354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017358:	4611      	mov	r1, r2
 801735a:	f7ff bef5 	b.w	8017148 <_malloc_r>
 801735e:	b92a      	cbnz	r2, 801736c <_realloc_r+0x24>
 8017360:	f000 fb48 	bl	80179f4 <_free_r>
 8017364:	2400      	movs	r4, #0
 8017366:	4620      	mov	r0, r4
 8017368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801736c:	f000 fb8c 	bl	8017a88 <_malloc_usable_size_r>
 8017370:	4285      	cmp	r5, r0
 8017372:	4606      	mov	r6, r0
 8017374:	d802      	bhi.n	801737c <_realloc_r+0x34>
 8017376:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801737a:	d8f4      	bhi.n	8017366 <_realloc_r+0x1e>
 801737c:	4629      	mov	r1, r5
 801737e:	4640      	mov	r0, r8
 8017380:	f7ff fee2 	bl	8017148 <_malloc_r>
 8017384:	4607      	mov	r7, r0
 8017386:	2800      	cmp	r0, #0
 8017388:	d0ec      	beq.n	8017364 <_realloc_r+0x1c>
 801738a:	42b5      	cmp	r5, r6
 801738c:	462a      	mov	r2, r5
 801738e:	4621      	mov	r1, r4
 8017390:	bf28      	it	cs
 8017392:	4632      	movcs	r2, r6
 8017394:	f000 faf5 	bl	8017982 <memcpy>
 8017398:	4621      	mov	r1, r4
 801739a:	4640      	mov	r0, r8
 801739c:	f000 fb2a 	bl	80179f4 <_free_r>
 80173a0:	463c      	mov	r4, r7
 80173a2:	e7e0      	b.n	8017366 <_realloc_r+0x1e>

080173a4 <_strtoul_l.constprop.0>:
 80173a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173a8:	4e34      	ldr	r6, [pc, #208]	@ (801747c <_strtoul_l.constprop.0+0xd8>)
 80173aa:	4686      	mov	lr, r0
 80173ac:	460d      	mov	r5, r1
 80173ae:	4628      	mov	r0, r5
 80173b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80173b4:	5d37      	ldrb	r7, [r6, r4]
 80173b6:	f017 0708 	ands.w	r7, r7, #8
 80173ba:	d1f8      	bne.n	80173ae <_strtoul_l.constprop.0+0xa>
 80173bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80173be:	d12f      	bne.n	8017420 <_strtoul_l.constprop.0+0x7c>
 80173c0:	782c      	ldrb	r4, [r5, #0]
 80173c2:	2701      	movs	r7, #1
 80173c4:	1c85      	adds	r5, r0, #2
 80173c6:	f033 0010 	bics.w	r0, r3, #16
 80173ca:	d109      	bne.n	80173e0 <_strtoul_l.constprop.0+0x3c>
 80173cc:	2c30      	cmp	r4, #48	@ 0x30
 80173ce:	d12c      	bne.n	801742a <_strtoul_l.constprop.0+0x86>
 80173d0:	7828      	ldrb	r0, [r5, #0]
 80173d2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80173d6:	2858      	cmp	r0, #88	@ 0x58
 80173d8:	d127      	bne.n	801742a <_strtoul_l.constprop.0+0x86>
 80173da:	786c      	ldrb	r4, [r5, #1]
 80173dc:	2310      	movs	r3, #16
 80173de:	3502      	adds	r5, #2
 80173e0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80173e4:	2600      	movs	r6, #0
 80173e6:	fbb8 f8f3 	udiv	r8, r8, r3
 80173ea:	fb03 f908 	mul.w	r9, r3, r8
 80173ee:	ea6f 0909 	mvn.w	r9, r9
 80173f2:	4630      	mov	r0, r6
 80173f4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80173f8:	f1bc 0f09 	cmp.w	ip, #9
 80173fc:	d81c      	bhi.n	8017438 <_strtoul_l.constprop.0+0x94>
 80173fe:	4664      	mov	r4, ip
 8017400:	42a3      	cmp	r3, r4
 8017402:	dd2a      	ble.n	801745a <_strtoul_l.constprop.0+0xb6>
 8017404:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017408:	d007      	beq.n	801741a <_strtoul_l.constprop.0+0x76>
 801740a:	4580      	cmp	r8, r0
 801740c:	d322      	bcc.n	8017454 <_strtoul_l.constprop.0+0xb0>
 801740e:	d101      	bne.n	8017414 <_strtoul_l.constprop.0+0x70>
 8017410:	45a1      	cmp	r9, r4
 8017412:	db1f      	blt.n	8017454 <_strtoul_l.constprop.0+0xb0>
 8017414:	fb00 4003 	mla	r0, r0, r3, r4
 8017418:	2601      	movs	r6, #1
 801741a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801741e:	e7e9      	b.n	80173f4 <_strtoul_l.constprop.0+0x50>
 8017420:	2c2b      	cmp	r4, #43	@ 0x2b
 8017422:	bf04      	itt	eq
 8017424:	782c      	ldrbeq	r4, [r5, #0]
 8017426:	1c85      	addeq	r5, r0, #2
 8017428:	e7cd      	b.n	80173c6 <_strtoul_l.constprop.0+0x22>
 801742a:	2b00      	cmp	r3, #0
 801742c:	d1d8      	bne.n	80173e0 <_strtoul_l.constprop.0+0x3c>
 801742e:	2c30      	cmp	r4, #48	@ 0x30
 8017430:	bf0c      	ite	eq
 8017432:	2308      	moveq	r3, #8
 8017434:	230a      	movne	r3, #10
 8017436:	e7d3      	b.n	80173e0 <_strtoul_l.constprop.0+0x3c>
 8017438:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801743c:	f1bc 0f19 	cmp.w	ip, #25
 8017440:	d801      	bhi.n	8017446 <_strtoul_l.constprop.0+0xa2>
 8017442:	3c37      	subs	r4, #55	@ 0x37
 8017444:	e7dc      	b.n	8017400 <_strtoul_l.constprop.0+0x5c>
 8017446:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801744a:	f1bc 0f19 	cmp.w	ip, #25
 801744e:	d804      	bhi.n	801745a <_strtoul_l.constprop.0+0xb6>
 8017450:	3c57      	subs	r4, #87	@ 0x57
 8017452:	e7d5      	b.n	8017400 <_strtoul_l.constprop.0+0x5c>
 8017454:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017458:	e7df      	b.n	801741a <_strtoul_l.constprop.0+0x76>
 801745a:	1c73      	adds	r3, r6, #1
 801745c:	d106      	bne.n	801746c <_strtoul_l.constprop.0+0xc8>
 801745e:	2322      	movs	r3, #34	@ 0x22
 8017460:	f8ce 3000 	str.w	r3, [lr]
 8017464:	4630      	mov	r0, r6
 8017466:	b932      	cbnz	r2, 8017476 <_strtoul_l.constprop.0+0xd2>
 8017468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801746c:	b107      	cbz	r7, 8017470 <_strtoul_l.constprop.0+0xcc>
 801746e:	4240      	negs	r0, r0
 8017470:	2a00      	cmp	r2, #0
 8017472:	d0f9      	beq.n	8017468 <_strtoul_l.constprop.0+0xc4>
 8017474:	b106      	cbz	r6, 8017478 <_strtoul_l.constprop.0+0xd4>
 8017476:	1e69      	subs	r1, r5, #1
 8017478:	6011      	str	r1, [r2, #0]
 801747a:	e7f5      	b.n	8017468 <_strtoul_l.constprop.0+0xc4>
 801747c:	080195c4 	.word	0x080195c4

08017480 <strtoul>:
 8017480:	4613      	mov	r3, r2
 8017482:	460a      	mov	r2, r1
 8017484:	4601      	mov	r1, r0
 8017486:	4802      	ldr	r0, [pc, #8]	@ (8017490 <strtoul+0x10>)
 8017488:	6800      	ldr	r0, [r0, #0]
 801748a:	f7ff bf8b 	b.w	80173a4 <_strtoul_l.constprop.0>
 801748e:	bf00      	nop
 8017490:	20000268 	.word	0x20000268

08017494 <std>:
 8017494:	2300      	movs	r3, #0
 8017496:	b510      	push	{r4, lr}
 8017498:	4604      	mov	r4, r0
 801749a:	e9c0 3300 	strd	r3, r3, [r0]
 801749e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80174a2:	6083      	str	r3, [r0, #8]
 80174a4:	8181      	strh	r1, [r0, #12]
 80174a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80174a8:	81c2      	strh	r2, [r0, #14]
 80174aa:	6183      	str	r3, [r0, #24]
 80174ac:	4619      	mov	r1, r3
 80174ae:	2208      	movs	r2, #8
 80174b0:	305c      	adds	r0, #92	@ 0x5c
 80174b2:	f000 f99d 	bl	80177f0 <memset>
 80174b6:	4b0d      	ldr	r3, [pc, #52]	@ (80174ec <std+0x58>)
 80174b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80174ba:	4b0d      	ldr	r3, [pc, #52]	@ (80174f0 <std+0x5c>)
 80174bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80174be:	4b0d      	ldr	r3, [pc, #52]	@ (80174f4 <std+0x60>)
 80174c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80174c2:	4b0d      	ldr	r3, [pc, #52]	@ (80174f8 <std+0x64>)
 80174c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80174c6:	4b0d      	ldr	r3, [pc, #52]	@ (80174fc <std+0x68>)
 80174c8:	6224      	str	r4, [r4, #32]
 80174ca:	429c      	cmp	r4, r3
 80174cc:	d006      	beq.n	80174dc <std+0x48>
 80174ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80174d2:	4294      	cmp	r4, r2
 80174d4:	d002      	beq.n	80174dc <std+0x48>
 80174d6:	33d0      	adds	r3, #208	@ 0xd0
 80174d8:	429c      	cmp	r4, r3
 80174da:	d105      	bne.n	80174e8 <std+0x54>
 80174dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80174e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174e4:	f000 ba42 	b.w	801796c <__retarget_lock_init_recursive>
 80174e8:	bd10      	pop	{r4, pc}
 80174ea:	bf00      	nop
 80174ec:	080176a5 	.word	0x080176a5
 80174f0:	080176c7 	.word	0x080176c7
 80174f4:	080176ff 	.word	0x080176ff
 80174f8:	08017723 	.word	0x08017723
 80174fc:	2000def0 	.word	0x2000def0

08017500 <stdio_exit_handler>:
 8017500:	4a02      	ldr	r2, [pc, #8]	@ (801750c <stdio_exit_handler+0xc>)
 8017502:	4903      	ldr	r1, [pc, #12]	@ (8017510 <stdio_exit_handler+0x10>)
 8017504:	4803      	ldr	r0, [pc, #12]	@ (8017514 <stdio_exit_handler+0x14>)
 8017506:	f000 b869 	b.w	80175dc <_fwalk_sglue>
 801750a:	bf00      	nop
 801750c:	2000025c 	.word	0x2000025c
 8017510:	080183f1 	.word	0x080183f1
 8017514:	2000026c 	.word	0x2000026c

08017518 <cleanup_stdio>:
 8017518:	6841      	ldr	r1, [r0, #4]
 801751a:	4b0c      	ldr	r3, [pc, #48]	@ (801754c <cleanup_stdio+0x34>)
 801751c:	4299      	cmp	r1, r3
 801751e:	b510      	push	{r4, lr}
 8017520:	4604      	mov	r4, r0
 8017522:	d001      	beq.n	8017528 <cleanup_stdio+0x10>
 8017524:	f000 ff64 	bl	80183f0 <_fflush_r>
 8017528:	68a1      	ldr	r1, [r4, #8]
 801752a:	4b09      	ldr	r3, [pc, #36]	@ (8017550 <cleanup_stdio+0x38>)
 801752c:	4299      	cmp	r1, r3
 801752e:	d002      	beq.n	8017536 <cleanup_stdio+0x1e>
 8017530:	4620      	mov	r0, r4
 8017532:	f000 ff5d 	bl	80183f0 <_fflush_r>
 8017536:	68e1      	ldr	r1, [r4, #12]
 8017538:	4b06      	ldr	r3, [pc, #24]	@ (8017554 <cleanup_stdio+0x3c>)
 801753a:	4299      	cmp	r1, r3
 801753c:	d004      	beq.n	8017548 <cleanup_stdio+0x30>
 801753e:	4620      	mov	r0, r4
 8017540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017544:	f000 bf54 	b.w	80183f0 <_fflush_r>
 8017548:	bd10      	pop	{r4, pc}
 801754a:	bf00      	nop
 801754c:	2000def0 	.word	0x2000def0
 8017550:	2000df58 	.word	0x2000df58
 8017554:	2000dfc0 	.word	0x2000dfc0

08017558 <global_stdio_init.part.0>:
 8017558:	b510      	push	{r4, lr}
 801755a:	4b0b      	ldr	r3, [pc, #44]	@ (8017588 <global_stdio_init.part.0+0x30>)
 801755c:	4c0b      	ldr	r4, [pc, #44]	@ (801758c <global_stdio_init.part.0+0x34>)
 801755e:	4a0c      	ldr	r2, [pc, #48]	@ (8017590 <global_stdio_init.part.0+0x38>)
 8017560:	601a      	str	r2, [r3, #0]
 8017562:	4620      	mov	r0, r4
 8017564:	2200      	movs	r2, #0
 8017566:	2104      	movs	r1, #4
 8017568:	f7ff ff94 	bl	8017494 <std>
 801756c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017570:	2201      	movs	r2, #1
 8017572:	2109      	movs	r1, #9
 8017574:	f7ff ff8e 	bl	8017494 <std>
 8017578:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801757c:	2202      	movs	r2, #2
 801757e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017582:	2112      	movs	r1, #18
 8017584:	f7ff bf86 	b.w	8017494 <std>
 8017588:	2000e028 	.word	0x2000e028
 801758c:	2000def0 	.word	0x2000def0
 8017590:	08017501 	.word	0x08017501

08017594 <__sfp_lock_acquire>:
 8017594:	4801      	ldr	r0, [pc, #4]	@ (801759c <__sfp_lock_acquire+0x8>)
 8017596:	f000 b9ea 	b.w	801796e <__retarget_lock_acquire_recursive>
 801759a:	bf00      	nop
 801759c:	2000e032 	.word	0x2000e032

080175a0 <__sfp_lock_release>:
 80175a0:	4801      	ldr	r0, [pc, #4]	@ (80175a8 <__sfp_lock_release+0x8>)
 80175a2:	f000 b9e5 	b.w	8017970 <__retarget_lock_release_recursive>
 80175a6:	bf00      	nop
 80175a8:	2000e032 	.word	0x2000e032

080175ac <__sinit>:
 80175ac:	b510      	push	{r4, lr}
 80175ae:	4604      	mov	r4, r0
 80175b0:	f7ff fff0 	bl	8017594 <__sfp_lock_acquire>
 80175b4:	6a23      	ldr	r3, [r4, #32]
 80175b6:	b11b      	cbz	r3, 80175c0 <__sinit+0x14>
 80175b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175bc:	f7ff bff0 	b.w	80175a0 <__sfp_lock_release>
 80175c0:	4b04      	ldr	r3, [pc, #16]	@ (80175d4 <__sinit+0x28>)
 80175c2:	6223      	str	r3, [r4, #32]
 80175c4:	4b04      	ldr	r3, [pc, #16]	@ (80175d8 <__sinit+0x2c>)
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d1f5      	bne.n	80175b8 <__sinit+0xc>
 80175cc:	f7ff ffc4 	bl	8017558 <global_stdio_init.part.0>
 80175d0:	e7f2      	b.n	80175b8 <__sinit+0xc>
 80175d2:	bf00      	nop
 80175d4:	08017519 	.word	0x08017519
 80175d8:	2000e028 	.word	0x2000e028

080175dc <_fwalk_sglue>:
 80175dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175e0:	4607      	mov	r7, r0
 80175e2:	4688      	mov	r8, r1
 80175e4:	4614      	mov	r4, r2
 80175e6:	2600      	movs	r6, #0
 80175e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80175ec:	f1b9 0901 	subs.w	r9, r9, #1
 80175f0:	d505      	bpl.n	80175fe <_fwalk_sglue+0x22>
 80175f2:	6824      	ldr	r4, [r4, #0]
 80175f4:	2c00      	cmp	r4, #0
 80175f6:	d1f7      	bne.n	80175e8 <_fwalk_sglue+0xc>
 80175f8:	4630      	mov	r0, r6
 80175fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175fe:	89ab      	ldrh	r3, [r5, #12]
 8017600:	2b01      	cmp	r3, #1
 8017602:	d907      	bls.n	8017614 <_fwalk_sglue+0x38>
 8017604:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017608:	3301      	adds	r3, #1
 801760a:	d003      	beq.n	8017614 <_fwalk_sglue+0x38>
 801760c:	4629      	mov	r1, r5
 801760e:	4638      	mov	r0, r7
 8017610:	47c0      	blx	r8
 8017612:	4306      	orrs	r6, r0
 8017614:	3568      	adds	r5, #104	@ 0x68
 8017616:	e7e9      	b.n	80175ec <_fwalk_sglue+0x10>

08017618 <iprintf>:
 8017618:	b40f      	push	{r0, r1, r2, r3}
 801761a:	b507      	push	{r0, r1, r2, lr}
 801761c:	4906      	ldr	r1, [pc, #24]	@ (8017638 <iprintf+0x20>)
 801761e:	ab04      	add	r3, sp, #16
 8017620:	6808      	ldr	r0, [r1, #0]
 8017622:	f853 2b04 	ldr.w	r2, [r3], #4
 8017626:	6881      	ldr	r1, [r0, #8]
 8017628:	9301      	str	r3, [sp, #4]
 801762a:	f000 fbb7 	bl	8017d9c <_vfiprintf_r>
 801762e:	b003      	add	sp, #12
 8017630:	f85d eb04 	ldr.w	lr, [sp], #4
 8017634:	b004      	add	sp, #16
 8017636:	4770      	bx	lr
 8017638:	20000268 	.word	0x20000268

0801763c <sniprintf>:
 801763c:	b40c      	push	{r2, r3}
 801763e:	b530      	push	{r4, r5, lr}
 8017640:	4b17      	ldr	r3, [pc, #92]	@ (80176a0 <sniprintf+0x64>)
 8017642:	1e0c      	subs	r4, r1, #0
 8017644:	681d      	ldr	r5, [r3, #0]
 8017646:	b09d      	sub	sp, #116	@ 0x74
 8017648:	da08      	bge.n	801765c <sniprintf+0x20>
 801764a:	238b      	movs	r3, #139	@ 0x8b
 801764c:	602b      	str	r3, [r5, #0]
 801764e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017652:	b01d      	add	sp, #116	@ 0x74
 8017654:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017658:	b002      	add	sp, #8
 801765a:	4770      	bx	lr
 801765c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017660:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017664:	bf14      	ite	ne
 8017666:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801766a:	4623      	moveq	r3, r4
 801766c:	9304      	str	r3, [sp, #16]
 801766e:	9307      	str	r3, [sp, #28]
 8017670:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017674:	9002      	str	r0, [sp, #8]
 8017676:	9006      	str	r0, [sp, #24]
 8017678:	f8ad 3016 	strh.w	r3, [sp, #22]
 801767c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801767e:	ab21      	add	r3, sp, #132	@ 0x84
 8017680:	a902      	add	r1, sp, #8
 8017682:	4628      	mov	r0, r5
 8017684:	9301      	str	r3, [sp, #4]
 8017686:	f000 fa63 	bl	8017b50 <_svfiprintf_r>
 801768a:	1c43      	adds	r3, r0, #1
 801768c:	bfbc      	itt	lt
 801768e:	238b      	movlt	r3, #139	@ 0x8b
 8017690:	602b      	strlt	r3, [r5, #0]
 8017692:	2c00      	cmp	r4, #0
 8017694:	d0dd      	beq.n	8017652 <sniprintf+0x16>
 8017696:	9b02      	ldr	r3, [sp, #8]
 8017698:	2200      	movs	r2, #0
 801769a:	701a      	strb	r2, [r3, #0]
 801769c:	e7d9      	b.n	8017652 <sniprintf+0x16>
 801769e:	bf00      	nop
 80176a0:	20000268 	.word	0x20000268

080176a4 <__sread>:
 80176a4:	b510      	push	{r4, lr}
 80176a6:	460c      	mov	r4, r1
 80176a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176ac:	f000 f900 	bl	80178b0 <_read_r>
 80176b0:	2800      	cmp	r0, #0
 80176b2:	bfab      	itete	ge
 80176b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80176b6:	89a3      	ldrhlt	r3, [r4, #12]
 80176b8:	181b      	addge	r3, r3, r0
 80176ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80176be:	bfac      	ite	ge
 80176c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80176c2:	81a3      	strhlt	r3, [r4, #12]
 80176c4:	bd10      	pop	{r4, pc}

080176c6 <__swrite>:
 80176c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176ca:	461f      	mov	r7, r3
 80176cc:	898b      	ldrh	r3, [r1, #12]
 80176ce:	05db      	lsls	r3, r3, #23
 80176d0:	4605      	mov	r5, r0
 80176d2:	460c      	mov	r4, r1
 80176d4:	4616      	mov	r6, r2
 80176d6:	d505      	bpl.n	80176e4 <__swrite+0x1e>
 80176d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176dc:	2302      	movs	r3, #2
 80176de:	2200      	movs	r2, #0
 80176e0:	f000 f8d4 	bl	801788c <_lseek_r>
 80176e4:	89a3      	ldrh	r3, [r4, #12]
 80176e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80176ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80176ee:	81a3      	strh	r3, [r4, #12]
 80176f0:	4632      	mov	r2, r6
 80176f2:	463b      	mov	r3, r7
 80176f4:	4628      	mov	r0, r5
 80176f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80176fa:	f000 b8fb 	b.w	80178f4 <_write_r>

080176fe <__sseek>:
 80176fe:	b510      	push	{r4, lr}
 8017700:	460c      	mov	r4, r1
 8017702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017706:	f000 f8c1 	bl	801788c <_lseek_r>
 801770a:	1c43      	adds	r3, r0, #1
 801770c:	89a3      	ldrh	r3, [r4, #12]
 801770e:	bf15      	itete	ne
 8017710:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017712:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017716:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801771a:	81a3      	strheq	r3, [r4, #12]
 801771c:	bf18      	it	ne
 801771e:	81a3      	strhne	r3, [r4, #12]
 8017720:	bd10      	pop	{r4, pc}

08017722 <__sclose>:
 8017722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017726:	f000 b8a1 	b.w	801786c <_close_r>

0801772a <_vsniprintf_r>:
 801772a:	b530      	push	{r4, r5, lr}
 801772c:	4614      	mov	r4, r2
 801772e:	2c00      	cmp	r4, #0
 8017730:	b09b      	sub	sp, #108	@ 0x6c
 8017732:	4605      	mov	r5, r0
 8017734:	461a      	mov	r2, r3
 8017736:	da05      	bge.n	8017744 <_vsniprintf_r+0x1a>
 8017738:	238b      	movs	r3, #139	@ 0x8b
 801773a:	6003      	str	r3, [r0, #0]
 801773c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017740:	b01b      	add	sp, #108	@ 0x6c
 8017742:	bd30      	pop	{r4, r5, pc}
 8017744:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017748:	f8ad 300c 	strh.w	r3, [sp, #12]
 801774c:	bf14      	ite	ne
 801774e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017752:	4623      	moveq	r3, r4
 8017754:	9302      	str	r3, [sp, #8]
 8017756:	9305      	str	r3, [sp, #20]
 8017758:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801775c:	9100      	str	r1, [sp, #0]
 801775e:	9104      	str	r1, [sp, #16]
 8017760:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017764:	4669      	mov	r1, sp
 8017766:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017768:	f000 f9f2 	bl	8017b50 <_svfiprintf_r>
 801776c:	1c43      	adds	r3, r0, #1
 801776e:	bfbc      	itt	lt
 8017770:	238b      	movlt	r3, #139	@ 0x8b
 8017772:	602b      	strlt	r3, [r5, #0]
 8017774:	2c00      	cmp	r4, #0
 8017776:	d0e3      	beq.n	8017740 <_vsniprintf_r+0x16>
 8017778:	9b00      	ldr	r3, [sp, #0]
 801777a:	2200      	movs	r2, #0
 801777c:	701a      	strb	r2, [r3, #0]
 801777e:	e7df      	b.n	8017740 <_vsniprintf_r+0x16>

08017780 <vsniprintf>:
 8017780:	b507      	push	{r0, r1, r2, lr}
 8017782:	9300      	str	r3, [sp, #0]
 8017784:	4613      	mov	r3, r2
 8017786:	460a      	mov	r2, r1
 8017788:	4601      	mov	r1, r0
 801778a:	4803      	ldr	r0, [pc, #12]	@ (8017798 <vsniprintf+0x18>)
 801778c:	6800      	ldr	r0, [r0, #0]
 801778e:	f7ff ffcc 	bl	801772a <_vsniprintf_r>
 8017792:	b003      	add	sp, #12
 8017794:	f85d fb04 	ldr.w	pc, [sp], #4
 8017798:	20000268 	.word	0x20000268

0801779c <memcmp>:
 801779c:	b510      	push	{r4, lr}
 801779e:	3901      	subs	r1, #1
 80177a0:	4402      	add	r2, r0
 80177a2:	4290      	cmp	r0, r2
 80177a4:	d101      	bne.n	80177aa <memcmp+0xe>
 80177a6:	2000      	movs	r0, #0
 80177a8:	e005      	b.n	80177b6 <memcmp+0x1a>
 80177aa:	7803      	ldrb	r3, [r0, #0]
 80177ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80177b0:	42a3      	cmp	r3, r4
 80177b2:	d001      	beq.n	80177b8 <memcmp+0x1c>
 80177b4:	1b18      	subs	r0, r3, r4
 80177b6:	bd10      	pop	{r4, pc}
 80177b8:	3001      	adds	r0, #1
 80177ba:	e7f2      	b.n	80177a2 <memcmp+0x6>

080177bc <memmove>:
 80177bc:	4288      	cmp	r0, r1
 80177be:	b510      	push	{r4, lr}
 80177c0:	eb01 0402 	add.w	r4, r1, r2
 80177c4:	d902      	bls.n	80177cc <memmove+0x10>
 80177c6:	4284      	cmp	r4, r0
 80177c8:	4623      	mov	r3, r4
 80177ca:	d807      	bhi.n	80177dc <memmove+0x20>
 80177cc:	1e43      	subs	r3, r0, #1
 80177ce:	42a1      	cmp	r1, r4
 80177d0:	d008      	beq.n	80177e4 <memmove+0x28>
 80177d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80177d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80177da:	e7f8      	b.n	80177ce <memmove+0x12>
 80177dc:	4402      	add	r2, r0
 80177de:	4601      	mov	r1, r0
 80177e0:	428a      	cmp	r2, r1
 80177e2:	d100      	bne.n	80177e6 <memmove+0x2a>
 80177e4:	bd10      	pop	{r4, pc}
 80177e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80177ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80177ee:	e7f7      	b.n	80177e0 <memmove+0x24>

080177f0 <memset>:
 80177f0:	4402      	add	r2, r0
 80177f2:	4603      	mov	r3, r0
 80177f4:	4293      	cmp	r3, r2
 80177f6:	d100      	bne.n	80177fa <memset+0xa>
 80177f8:	4770      	bx	lr
 80177fa:	f803 1b01 	strb.w	r1, [r3], #1
 80177fe:	e7f9      	b.n	80177f4 <memset+0x4>

08017800 <strchr>:
 8017800:	b2c9      	uxtb	r1, r1
 8017802:	4603      	mov	r3, r0
 8017804:	4618      	mov	r0, r3
 8017806:	f813 2b01 	ldrb.w	r2, [r3], #1
 801780a:	b112      	cbz	r2, 8017812 <strchr+0x12>
 801780c:	428a      	cmp	r2, r1
 801780e:	d1f9      	bne.n	8017804 <strchr+0x4>
 8017810:	4770      	bx	lr
 8017812:	2900      	cmp	r1, #0
 8017814:	bf18      	it	ne
 8017816:	2000      	movne	r0, #0
 8017818:	4770      	bx	lr

0801781a <strncmp>:
 801781a:	b510      	push	{r4, lr}
 801781c:	b16a      	cbz	r2, 801783a <strncmp+0x20>
 801781e:	3901      	subs	r1, #1
 8017820:	1884      	adds	r4, r0, r2
 8017822:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017826:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801782a:	429a      	cmp	r2, r3
 801782c:	d103      	bne.n	8017836 <strncmp+0x1c>
 801782e:	42a0      	cmp	r0, r4
 8017830:	d001      	beq.n	8017836 <strncmp+0x1c>
 8017832:	2a00      	cmp	r2, #0
 8017834:	d1f5      	bne.n	8017822 <strncmp+0x8>
 8017836:	1ad0      	subs	r0, r2, r3
 8017838:	bd10      	pop	{r4, pc}
 801783a:	4610      	mov	r0, r2
 801783c:	e7fc      	b.n	8017838 <strncmp+0x1e>

0801783e <strstr>:
 801783e:	780a      	ldrb	r2, [r1, #0]
 8017840:	b570      	push	{r4, r5, r6, lr}
 8017842:	b96a      	cbnz	r2, 8017860 <strstr+0x22>
 8017844:	bd70      	pop	{r4, r5, r6, pc}
 8017846:	429a      	cmp	r2, r3
 8017848:	d109      	bne.n	801785e <strstr+0x20>
 801784a:	460c      	mov	r4, r1
 801784c:	4605      	mov	r5, r0
 801784e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017852:	2b00      	cmp	r3, #0
 8017854:	d0f6      	beq.n	8017844 <strstr+0x6>
 8017856:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801785a:	429e      	cmp	r6, r3
 801785c:	d0f7      	beq.n	801784e <strstr+0x10>
 801785e:	3001      	adds	r0, #1
 8017860:	7803      	ldrb	r3, [r0, #0]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d1ef      	bne.n	8017846 <strstr+0x8>
 8017866:	4618      	mov	r0, r3
 8017868:	e7ec      	b.n	8017844 <strstr+0x6>
	...

0801786c <_close_r>:
 801786c:	b538      	push	{r3, r4, r5, lr}
 801786e:	4d06      	ldr	r5, [pc, #24]	@ (8017888 <_close_r+0x1c>)
 8017870:	2300      	movs	r3, #0
 8017872:	4604      	mov	r4, r0
 8017874:	4608      	mov	r0, r1
 8017876:	602b      	str	r3, [r5, #0]
 8017878:	f7ea ffe6 	bl	8002848 <_close>
 801787c:	1c43      	adds	r3, r0, #1
 801787e:	d102      	bne.n	8017886 <_close_r+0x1a>
 8017880:	682b      	ldr	r3, [r5, #0]
 8017882:	b103      	cbz	r3, 8017886 <_close_r+0x1a>
 8017884:	6023      	str	r3, [r4, #0]
 8017886:	bd38      	pop	{r3, r4, r5, pc}
 8017888:	2000e02c 	.word	0x2000e02c

0801788c <_lseek_r>:
 801788c:	b538      	push	{r3, r4, r5, lr}
 801788e:	4d07      	ldr	r5, [pc, #28]	@ (80178ac <_lseek_r+0x20>)
 8017890:	4604      	mov	r4, r0
 8017892:	4608      	mov	r0, r1
 8017894:	4611      	mov	r1, r2
 8017896:	2200      	movs	r2, #0
 8017898:	602a      	str	r2, [r5, #0]
 801789a:	461a      	mov	r2, r3
 801789c:	f7ea fffb 	bl	8002896 <_lseek>
 80178a0:	1c43      	adds	r3, r0, #1
 80178a2:	d102      	bne.n	80178aa <_lseek_r+0x1e>
 80178a4:	682b      	ldr	r3, [r5, #0]
 80178a6:	b103      	cbz	r3, 80178aa <_lseek_r+0x1e>
 80178a8:	6023      	str	r3, [r4, #0]
 80178aa:	bd38      	pop	{r3, r4, r5, pc}
 80178ac:	2000e02c 	.word	0x2000e02c

080178b0 <_read_r>:
 80178b0:	b538      	push	{r3, r4, r5, lr}
 80178b2:	4d07      	ldr	r5, [pc, #28]	@ (80178d0 <_read_r+0x20>)
 80178b4:	4604      	mov	r4, r0
 80178b6:	4608      	mov	r0, r1
 80178b8:	4611      	mov	r1, r2
 80178ba:	2200      	movs	r2, #0
 80178bc:	602a      	str	r2, [r5, #0]
 80178be:	461a      	mov	r2, r3
 80178c0:	f7ea ff89 	bl	80027d6 <_read>
 80178c4:	1c43      	adds	r3, r0, #1
 80178c6:	d102      	bne.n	80178ce <_read_r+0x1e>
 80178c8:	682b      	ldr	r3, [r5, #0]
 80178ca:	b103      	cbz	r3, 80178ce <_read_r+0x1e>
 80178cc:	6023      	str	r3, [r4, #0]
 80178ce:	bd38      	pop	{r3, r4, r5, pc}
 80178d0:	2000e02c 	.word	0x2000e02c

080178d4 <_sbrk_r>:
 80178d4:	b538      	push	{r3, r4, r5, lr}
 80178d6:	4d06      	ldr	r5, [pc, #24]	@ (80178f0 <_sbrk_r+0x1c>)
 80178d8:	2300      	movs	r3, #0
 80178da:	4604      	mov	r4, r0
 80178dc:	4608      	mov	r0, r1
 80178de:	602b      	str	r3, [r5, #0]
 80178e0:	f7ea ffe6 	bl	80028b0 <_sbrk>
 80178e4:	1c43      	adds	r3, r0, #1
 80178e6:	d102      	bne.n	80178ee <_sbrk_r+0x1a>
 80178e8:	682b      	ldr	r3, [r5, #0]
 80178ea:	b103      	cbz	r3, 80178ee <_sbrk_r+0x1a>
 80178ec:	6023      	str	r3, [r4, #0]
 80178ee:	bd38      	pop	{r3, r4, r5, pc}
 80178f0:	2000e02c 	.word	0x2000e02c

080178f4 <_write_r>:
 80178f4:	b538      	push	{r3, r4, r5, lr}
 80178f6:	4d07      	ldr	r5, [pc, #28]	@ (8017914 <_write_r+0x20>)
 80178f8:	4604      	mov	r4, r0
 80178fa:	4608      	mov	r0, r1
 80178fc:	4611      	mov	r1, r2
 80178fe:	2200      	movs	r2, #0
 8017900:	602a      	str	r2, [r5, #0]
 8017902:	461a      	mov	r2, r3
 8017904:	f7ea ff84 	bl	8002810 <_write>
 8017908:	1c43      	adds	r3, r0, #1
 801790a:	d102      	bne.n	8017912 <_write_r+0x1e>
 801790c:	682b      	ldr	r3, [r5, #0]
 801790e:	b103      	cbz	r3, 8017912 <_write_r+0x1e>
 8017910:	6023      	str	r3, [r4, #0]
 8017912:	bd38      	pop	{r3, r4, r5, pc}
 8017914:	2000e02c 	.word	0x2000e02c

08017918 <__errno>:
 8017918:	4b01      	ldr	r3, [pc, #4]	@ (8017920 <__errno+0x8>)
 801791a:	6818      	ldr	r0, [r3, #0]
 801791c:	4770      	bx	lr
 801791e:	bf00      	nop
 8017920:	20000268 	.word	0x20000268

08017924 <__libc_init_array>:
 8017924:	b570      	push	{r4, r5, r6, lr}
 8017926:	4d0d      	ldr	r5, [pc, #52]	@ (801795c <__libc_init_array+0x38>)
 8017928:	4c0d      	ldr	r4, [pc, #52]	@ (8017960 <__libc_init_array+0x3c>)
 801792a:	1b64      	subs	r4, r4, r5
 801792c:	10a4      	asrs	r4, r4, #2
 801792e:	2600      	movs	r6, #0
 8017930:	42a6      	cmp	r6, r4
 8017932:	d109      	bne.n	8017948 <__libc_init_array+0x24>
 8017934:	4d0b      	ldr	r5, [pc, #44]	@ (8017964 <__libc_init_array+0x40>)
 8017936:	4c0c      	ldr	r4, [pc, #48]	@ (8017968 <__libc_init_array+0x44>)
 8017938:	f000 fef8 	bl	801872c <_init>
 801793c:	1b64      	subs	r4, r4, r5
 801793e:	10a4      	asrs	r4, r4, #2
 8017940:	2600      	movs	r6, #0
 8017942:	42a6      	cmp	r6, r4
 8017944:	d105      	bne.n	8017952 <__libc_init_array+0x2e>
 8017946:	bd70      	pop	{r4, r5, r6, pc}
 8017948:	f855 3b04 	ldr.w	r3, [r5], #4
 801794c:	4798      	blx	r3
 801794e:	3601      	adds	r6, #1
 8017950:	e7ee      	b.n	8017930 <__libc_init_array+0xc>
 8017952:	f855 3b04 	ldr.w	r3, [r5], #4
 8017956:	4798      	blx	r3
 8017958:	3601      	adds	r6, #1
 801795a:	e7f2      	b.n	8017942 <__libc_init_array+0x1e>
 801795c:	0801973c 	.word	0x0801973c
 8017960:	0801973c 	.word	0x0801973c
 8017964:	0801973c 	.word	0x0801973c
 8017968:	08019748 	.word	0x08019748

0801796c <__retarget_lock_init_recursive>:
 801796c:	4770      	bx	lr

0801796e <__retarget_lock_acquire_recursive>:
 801796e:	4770      	bx	lr

08017970 <__retarget_lock_release_recursive>:
 8017970:	4770      	bx	lr

08017972 <strcpy>:
 8017972:	4603      	mov	r3, r0
 8017974:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017978:	f803 2b01 	strb.w	r2, [r3], #1
 801797c:	2a00      	cmp	r2, #0
 801797e:	d1f9      	bne.n	8017974 <strcpy+0x2>
 8017980:	4770      	bx	lr

08017982 <memcpy>:
 8017982:	440a      	add	r2, r1
 8017984:	4291      	cmp	r1, r2
 8017986:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801798a:	d100      	bne.n	801798e <memcpy+0xc>
 801798c:	4770      	bx	lr
 801798e:	b510      	push	{r4, lr}
 8017990:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017994:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017998:	4291      	cmp	r1, r2
 801799a:	d1f9      	bne.n	8017990 <memcpy+0xe>
 801799c:	bd10      	pop	{r4, pc}
	...

080179a0 <__assert_func>:
 80179a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80179a2:	4614      	mov	r4, r2
 80179a4:	461a      	mov	r2, r3
 80179a6:	4b09      	ldr	r3, [pc, #36]	@ (80179cc <__assert_func+0x2c>)
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	4605      	mov	r5, r0
 80179ac:	68d8      	ldr	r0, [r3, #12]
 80179ae:	b954      	cbnz	r4, 80179c6 <__assert_func+0x26>
 80179b0:	4b07      	ldr	r3, [pc, #28]	@ (80179d0 <__assert_func+0x30>)
 80179b2:	461c      	mov	r4, r3
 80179b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80179b8:	9100      	str	r1, [sp, #0]
 80179ba:	462b      	mov	r3, r5
 80179bc:	4905      	ldr	r1, [pc, #20]	@ (80179d4 <__assert_func+0x34>)
 80179be:	f000 fd3f 	bl	8018440 <fiprintf>
 80179c2:	f000 fde3 	bl	801858c <abort>
 80179c6:	4b04      	ldr	r3, [pc, #16]	@ (80179d8 <__assert_func+0x38>)
 80179c8:	e7f4      	b.n	80179b4 <__assert_func+0x14>
 80179ca:	bf00      	nop
 80179cc:	20000268 	.word	0x20000268
 80179d0:	080196ff 	.word	0x080196ff
 80179d4:	080196d1 	.word	0x080196d1
 80179d8:	080196c4 	.word	0x080196c4

080179dc <__env_lock>:
 80179dc:	4801      	ldr	r0, [pc, #4]	@ (80179e4 <__env_lock+0x8>)
 80179de:	f7ff bfc6 	b.w	801796e <__retarget_lock_acquire_recursive>
 80179e2:	bf00      	nop
 80179e4:	2000e030 	.word	0x2000e030

080179e8 <__env_unlock>:
 80179e8:	4801      	ldr	r0, [pc, #4]	@ (80179f0 <__env_unlock+0x8>)
 80179ea:	f7ff bfc1 	b.w	8017970 <__retarget_lock_release_recursive>
 80179ee:	bf00      	nop
 80179f0:	2000e030 	.word	0x2000e030

080179f4 <_free_r>:
 80179f4:	b538      	push	{r3, r4, r5, lr}
 80179f6:	4605      	mov	r5, r0
 80179f8:	2900      	cmp	r1, #0
 80179fa:	d041      	beq.n	8017a80 <_free_r+0x8c>
 80179fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a00:	1f0c      	subs	r4, r1, #4
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	bfb8      	it	lt
 8017a06:	18e4      	addlt	r4, r4, r3
 8017a08:	f7ff fc1e 	bl	8017248 <__malloc_lock>
 8017a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8017a84 <_free_r+0x90>)
 8017a0e:	6813      	ldr	r3, [r2, #0]
 8017a10:	b933      	cbnz	r3, 8017a20 <_free_r+0x2c>
 8017a12:	6063      	str	r3, [r4, #4]
 8017a14:	6014      	str	r4, [r2, #0]
 8017a16:	4628      	mov	r0, r5
 8017a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a1c:	f7ff bc1a 	b.w	8017254 <__malloc_unlock>
 8017a20:	42a3      	cmp	r3, r4
 8017a22:	d908      	bls.n	8017a36 <_free_r+0x42>
 8017a24:	6820      	ldr	r0, [r4, #0]
 8017a26:	1821      	adds	r1, r4, r0
 8017a28:	428b      	cmp	r3, r1
 8017a2a:	bf01      	itttt	eq
 8017a2c:	6819      	ldreq	r1, [r3, #0]
 8017a2e:	685b      	ldreq	r3, [r3, #4]
 8017a30:	1809      	addeq	r1, r1, r0
 8017a32:	6021      	streq	r1, [r4, #0]
 8017a34:	e7ed      	b.n	8017a12 <_free_r+0x1e>
 8017a36:	461a      	mov	r2, r3
 8017a38:	685b      	ldr	r3, [r3, #4]
 8017a3a:	b10b      	cbz	r3, 8017a40 <_free_r+0x4c>
 8017a3c:	42a3      	cmp	r3, r4
 8017a3e:	d9fa      	bls.n	8017a36 <_free_r+0x42>
 8017a40:	6811      	ldr	r1, [r2, #0]
 8017a42:	1850      	adds	r0, r2, r1
 8017a44:	42a0      	cmp	r0, r4
 8017a46:	d10b      	bne.n	8017a60 <_free_r+0x6c>
 8017a48:	6820      	ldr	r0, [r4, #0]
 8017a4a:	4401      	add	r1, r0
 8017a4c:	1850      	adds	r0, r2, r1
 8017a4e:	4283      	cmp	r3, r0
 8017a50:	6011      	str	r1, [r2, #0]
 8017a52:	d1e0      	bne.n	8017a16 <_free_r+0x22>
 8017a54:	6818      	ldr	r0, [r3, #0]
 8017a56:	685b      	ldr	r3, [r3, #4]
 8017a58:	6053      	str	r3, [r2, #4]
 8017a5a:	4408      	add	r0, r1
 8017a5c:	6010      	str	r0, [r2, #0]
 8017a5e:	e7da      	b.n	8017a16 <_free_r+0x22>
 8017a60:	d902      	bls.n	8017a68 <_free_r+0x74>
 8017a62:	230c      	movs	r3, #12
 8017a64:	602b      	str	r3, [r5, #0]
 8017a66:	e7d6      	b.n	8017a16 <_free_r+0x22>
 8017a68:	6820      	ldr	r0, [r4, #0]
 8017a6a:	1821      	adds	r1, r4, r0
 8017a6c:	428b      	cmp	r3, r1
 8017a6e:	bf04      	itt	eq
 8017a70:	6819      	ldreq	r1, [r3, #0]
 8017a72:	685b      	ldreq	r3, [r3, #4]
 8017a74:	6063      	str	r3, [r4, #4]
 8017a76:	bf04      	itt	eq
 8017a78:	1809      	addeq	r1, r1, r0
 8017a7a:	6021      	streq	r1, [r4, #0]
 8017a7c:	6054      	str	r4, [r2, #4]
 8017a7e:	e7ca      	b.n	8017a16 <_free_r+0x22>
 8017a80:	bd38      	pop	{r3, r4, r5, pc}
 8017a82:	bf00      	nop
 8017a84:	2000deec 	.word	0x2000deec

08017a88 <_malloc_usable_size_r>:
 8017a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a8c:	1f18      	subs	r0, r3, #4
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	bfbc      	itt	lt
 8017a92:	580b      	ldrlt	r3, [r1, r0]
 8017a94:	18c0      	addlt	r0, r0, r3
 8017a96:	4770      	bx	lr

08017a98 <__ssputs_r>:
 8017a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a9c:	688e      	ldr	r6, [r1, #8]
 8017a9e:	461f      	mov	r7, r3
 8017aa0:	42be      	cmp	r6, r7
 8017aa2:	680b      	ldr	r3, [r1, #0]
 8017aa4:	4682      	mov	sl, r0
 8017aa6:	460c      	mov	r4, r1
 8017aa8:	4690      	mov	r8, r2
 8017aaa:	d82d      	bhi.n	8017b08 <__ssputs_r+0x70>
 8017aac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017ab0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017ab4:	d026      	beq.n	8017b04 <__ssputs_r+0x6c>
 8017ab6:	6965      	ldr	r5, [r4, #20]
 8017ab8:	6909      	ldr	r1, [r1, #16]
 8017aba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017abe:	eba3 0901 	sub.w	r9, r3, r1
 8017ac2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017ac6:	1c7b      	adds	r3, r7, #1
 8017ac8:	444b      	add	r3, r9
 8017aca:	106d      	asrs	r5, r5, #1
 8017acc:	429d      	cmp	r5, r3
 8017ace:	bf38      	it	cc
 8017ad0:	461d      	movcc	r5, r3
 8017ad2:	0553      	lsls	r3, r2, #21
 8017ad4:	d527      	bpl.n	8017b26 <__ssputs_r+0x8e>
 8017ad6:	4629      	mov	r1, r5
 8017ad8:	f7ff fb36 	bl	8017148 <_malloc_r>
 8017adc:	4606      	mov	r6, r0
 8017ade:	b360      	cbz	r0, 8017b3a <__ssputs_r+0xa2>
 8017ae0:	6921      	ldr	r1, [r4, #16]
 8017ae2:	464a      	mov	r2, r9
 8017ae4:	f7ff ff4d 	bl	8017982 <memcpy>
 8017ae8:	89a3      	ldrh	r3, [r4, #12]
 8017aea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017af2:	81a3      	strh	r3, [r4, #12]
 8017af4:	6126      	str	r6, [r4, #16]
 8017af6:	6165      	str	r5, [r4, #20]
 8017af8:	444e      	add	r6, r9
 8017afa:	eba5 0509 	sub.w	r5, r5, r9
 8017afe:	6026      	str	r6, [r4, #0]
 8017b00:	60a5      	str	r5, [r4, #8]
 8017b02:	463e      	mov	r6, r7
 8017b04:	42be      	cmp	r6, r7
 8017b06:	d900      	bls.n	8017b0a <__ssputs_r+0x72>
 8017b08:	463e      	mov	r6, r7
 8017b0a:	6820      	ldr	r0, [r4, #0]
 8017b0c:	4632      	mov	r2, r6
 8017b0e:	4641      	mov	r1, r8
 8017b10:	f7ff fe54 	bl	80177bc <memmove>
 8017b14:	68a3      	ldr	r3, [r4, #8]
 8017b16:	1b9b      	subs	r3, r3, r6
 8017b18:	60a3      	str	r3, [r4, #8]
 8017b1a:	6823      	ldr	r3, [r4, #0]
 8017b1c:	4433      	add	r3, r6
 8017b1e:	6023      	str	r3, [r4, #0]
 8017b20:	2000      	movs	r0, #0
 8017b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b26:	462a      	mov	r2, r5
 8017b28:	f7ff fc0e 	bl	8017348 <_realloc_r>
 8017b2c:	4606      	mov	r6, r0
 8017b2e:	2800      	cmp	r0, #0
 8017b30:	d1e0      	bne.n	8017af4 <__ssputs_r+0x5c>
 8017b32:	6921      	ldr	r1, [r4, #16]
 8017b34:	4650      	mov	r0, sl
 8017b36:	f7ff ff5d 	bl	80179f4 <_free_r>
 8017b3a:	230c      	movs	r3, #12
 8017b3c:	f8ca 3000 	str.w	r3, [sl]
 8017b40:	89a3      	ldrh	r3, [r4, #12]
 8017b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b46:	81a3      	strh	r3, [r4, #12]
 8017b48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b4c:	e7e9      	b.n	8017b22 <__ssputs_r+0x8a>
	...

08017b50 <_svfiprintf_r>:
 8017b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b54:	4698      	mov	r8, r3
 8017b56:	898b      	ldrh	r3, [r1, #12]
 8017b58:	061b      	lsls	r3, r3, #24
 8017b5a:	b09d      	sub	sp, #116	@ 0x74
 8017b5c:	4607      	mov	r7, r0
 8017b5e:	460d      	mov	r5, r1
 8017b60:	4614      	mov	r4, r2
 8017b62:	d510      	bpl.n	8017b86 <_svfiprintf_r+0x36>
 8017b64:	690b      	ldr	r3, [r1, #16]
 8017b66:	b973      	cbnz	r3, 8017b86 <_svfiprintf_r+0x36>
 8017b68:	2140      	movs	r1, #64	@ 0x40
 8017b6a:	f7ff faed 	bl	8017148 <_malloc_r>
 8017b6e:	6028      	str	r0, [r5, #0]
 8017b70:	6128      	str	r0, [r5, #16]
 8017b72:	b930      	cbnz	r0, 8017b82 <_svfiprintf_r+0x32>
 8017b74:	230c      	movs	r3, #12
 8017b76:	603b      	str	r3, [r7, #0]
 8017b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b7c:	b01d      	add	sp, #116	@ 0x74
 8017b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b82:	2340      	movs	r3, #64	@ 0x40
 8017b84:	616b      	str	r3, [r5, #20]
 8017b86:	2300      	movs	r3, #0
 8017b88:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b8a:	2320      	movs	r3, #32
 8017b8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b94:	2330      	movs	r3, #48	@ 0x30
 8017b96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017d34 <_svfiprintf_r+0x1e4>
 8017b9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017b9e:	f04f 0901 	mov.w	r9, #1
 8017ba2:	4623      	mov	r3, r4
 8017ba4:	469a      	mov	sl, r3
 8017ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017baa:	b10a      	cbz	r2, 8017bb0 <_svfiprintf_r+0x60>
 8017bac:	2a25      	cmp	r2, #37	@ 0x25
 8017bae:	d1f9      	bne.n	8017ba4 <_svfiprintf_r+0x54>
 8017bb0:	ebba 0b04 	subs.w	fp, sl, r4
 8017bb4:	d00b      	beq.n	8017bce <_svfiprintf_r+0x7e>
 8017bb6:	465b      	mov	r3, fp
 8017bb8:	4622      	mov	r2, r4
 8017bba:	4629      	mov	r1, r5
 8017bbc:	4638      	mov	r0, r7
 8017bbe:	f7ff ff6b 	bl	8017a98 <__ssputs_r>
 8017bc2:	3001      	adds	r0, #1
 8017bc4:	f000 80a7 	beq.w	8017d16 <_svfiprintf_r+0x1c6>
 8017bc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017bca:	445a      	add	r2, fp
 8017bcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8017bce:	f89a 3000 	ldrb.w	r3, [sl]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	f000 809f 	beq.w	8017d16 <_svfiprintf_r+0x1c6>
 8017bd8:	2300      	movs	r3, #0
 8017bda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017be2:	f10a 0a01 	add.w	sl, sl, #1
 8017be6:	9304      	str	r3, [sp, #16]
 8017be8:	9307      	str	r3, [sp, #28]
 8017bea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017bee:	931a      	str	r3, [sp, #104]	@ 0x68
 8017bf0:	4654      	mov	r4, sl
 8017bf2:	2205      	movs	r2, #5
 8017bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bf8:	484e      	ldr	r0, [pc, #312]	@ (8017d34 <_svfiprintf_r+0x1e4>)
 8017bfa:	f7e8 fb09 	bl	8000210 <memchr>
 8017bfe:	9a04      	ldr	r2, [sp, #16]
 8017c00:	b9d8      	cbnz	r0, 8017c3a <_svfiprintf_r+0xea>
 8017c02:	06d0      	lsls	r0, r2, #27
 8017c04:	bf44      	itt	mi
 8017c06:	2320      	movmi	r3, #32
 8017c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c0c:	0711      	lsls	r1, r2, #28
 8017c0e:	bf44      	itt	mi
 8017c10:	232b      	movmi	r3, #43	@ 0x2b
 8017c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c16:	f89a 3000 	ldrb.w	r3, [sl]
 8017c1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c1c:	d015      	beq.n	8017c4a <_svfiprintf_r+0xfa>
 8017c1e:	9a07      	ldr	r2, [sp, #28]
 8017c20:	4654      	mov	r4, sl
 8017c22:	2000      	movs	r0, #0
 8017c24:	f04f 0c0a 	mov.w	ip, #10
 8017c28:	4621      	mov	r1, r4
 8017c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c2e:	3b30      	subs	r3, #48	@ 0x30
 8017c30:	2b09      	cmp	r3, #9
 8017c32:	d94b      	bls.n	8017ccc <_svfiprintf_r+0x17c>
 8017c34:	b1b0      	cbz	r0, 8017c64 <_svfiprintf_r+0x114>
 8017c36:	9207      	str	r2, [sp, #28]
 8017c38:	e014      	b.n	8017c64 <_svfiprintf_r+0x114>
 8017c3a:	eba0 0308 	sub.w	r3, r0, r8
 8017c3e:	fa09 f303 	lsl.w	r3, r9, r3
 8017c42:	4313      	orrs	r3, r2
 8017c44:	9304      	str	r3, [sp, #16]
 8017c46:	46a2      	mov	sl, r4
 8017c48:	e7d2      	b.n	8017bf0 <_svfiprintf_r+0xa0>
 8017c4a:	9b03      	ldr	r3, [sp, #12]
 8017c4c:	1d19      	adds	r1, r3, #4
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	9103      	str	r1, [sp, #12]
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	bfbb      	ittet	lt
 8017c56:	425b      	neglt	r3, r3
 8017c58:	f042 0202 	orrlt.w	r2, r2, #2
 8017c5c:	9307      	strge	r3, [sp, #28]
 8017c5e:	9307      	strlt	r3, [sp, #28]
 8017c60:	bfb8      	it	lt
 8017c62:	9204      	strlt	r2, [sp, #16]
 8017c64:	7823      	ldrb	r3, [r4, #0]
 8017c66:	2b2e      	cmp	r3, #46	@ 0x2e
 8017c68:	d10a      	bne.n	8017c80 <_svfiprintf_r+0x130>
 8017c6a:	7863      	ldrb	r3, [r4, #1]
 8017c6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c6e:	d132      	bne.n	8017cd6 <_svfiprintf_r+0x186>
 8017c70:	9b03      	ldr	r3, [sp, #12]
 8017c72:	1d1a      	adds	r2, r3, #4
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	9203      	str	r2, [sp, #12]
 8017c78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017c7c:	3402      	adds	r4, #2
 8017c7e:	9305      	str	r3, [sp, #20]
 8017c80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017d44 <_svfiprintf_r+0x1f4>
 8017c84:	7821      	ldrb	r1, [r4, #0]
 8017c86:	2203      	movs	r2, #3
 8017c88:	4650      	mov	r0, sl
 8017c8a:	f7e8 fac1 	bl	8000210 <memchr>
 8017c8e:	b138      	cbz	r0, 8017ca0 <_svfiprintf_r+0x150>
 8017c90:	9b04      	ldr	r3, [sp, #16]
 8017c92:	eba0 000a 	sub.w	r0, r0, sl
 8017c96:	2240      	movs	r2, #64	@ 0x40
 8017c98:	4082      	lsls	r2, r0
 8017c9a:	4313      	orrs	r3, r2
 8017c9c:	3401      	adds	r4, #1
 8017c9e:	9304      	str	r3, [sp, #16]
 8017ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ca4:	4824      	ldr	r0, [pc, #144]	@ (8017d38 <_svfiprintf_r+0x1e8>)
 8017ca6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017caa:	2206      	movs	r2, #6
 8017cac:	f7e8 fab0 	bl	8000210 <memchr>
 8017cb0:	2800      	cmp	r0, #0
 8017cb2:	d036      	beq.n	8017d22 <_svfiprintf_r+0x1d2>
 8017cb4:	4b21      	ldr	r3, [pc, #132]	@ (8017d3c <_svfiprintf_r+0x1ec>)
 8017cb6:	bb1b      	cbnz	r3, 8017d00 <_svfiprintf_r+0x1b0>
 8017cb8:	9b03      	ldr	r3, [sp, #12]
 8017cba:	3307      	adds	r3, #7
 8017cbc:	f023 0307 	bic.w	r3, r3, #7
 8017cc0:	3308      	adds	r3, #8
 8017cc2:	9303      	str	r3, [sp, #12]
 8017cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017cc6:	4433      	add	r3, r6
 8017cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8017cca:	e76a      	b.n	8017ba2 <_svfiprintf_r+0x52>
 8017ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8017cd0:	460c      	mov	r4, r1
 8017cd2:	2001      	movs	r0, #1
 8017cd4:	e7a8      	b.n	8017c28 <_svfiprintf_r+0xd8>
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	3401      	adds	r4, #1
 8017cda:	9305      	str	r3, [sp, #20]
 8017cdc:	4619      	mov	r1, r3
 8017cde:	f04f 0c0a 	mov.w	ip, #10
 8017ce2:	4620      	mov	r0, r4
 8017ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ce8:	3a30      	subs	r2, #48	@ 0x30
 8017cea:	2a09      	cmp	r2, #9
 8017cec:	d903      	bls.n	8017cf6 <_svfiprintf_r+0x1a6>
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d0c6      	beq.n	8017c80 <_svfiprintf_r+0x130>
 8017cf2:	9105      	str	r1, [sp, #20]
 8017cf4:	e7c4      	b.n	8017c80 <_svfiprintf_r+0x130>
 8017cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8017cfa:	4604      	mov	r4, r0
 8017cfc:	2301      	movs	r3, #1
 8017cfe:	e7f0      	b.n	8017ce2 <_svfiprintf_r+0x192>
 8017d00:	ab03      	add	r3, sp, #12
 8017d02:	9300      	str	r3, [sp, #0]
 8017d04:	462a      	mov	r2, r5
 8017d06:	4b0e      	ldr	r3, [pc, #56]	@ (8017d40 <_svfiprintf_r+0x1f0>)
 8017d08:	a904      	add	r1, sp, #16
 8017d0a:	4638      	mov	r0, r7
 8017d0c:	f3af 8000 	nop.w
 8017d10:	1c42      	adds	r2, r0, #1
 8017d12:	4606      	mov	r6, r0
 8017d14:	d1d6      	bne.n	8017cc4 <_svfiprintf_r+0x174>
 8017d16:	89ab      	ldrh	r3, [r5, #12]
 8017d18:	065b      	lsls	r3, r3, #25
 8017d1a:	f53f af2d 	bmi.w	8017b78 <_svfiprintf_r+0x28>
 8017d1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d20:	e72c      	b.n	8017b7c <_svfiprintf_r+0x2c>
 8017d22:	ab03      	add	r3, sp, #12
 8017d24:	9300      	str	r3, [sp, #0]
 8017d26:	462a      	mov	r2, r5
 8017d28:	4b05      	ldr	r3, [pc, #20]	@ (8017d40 <_svfiprintf_r+0x1f0>)
 8017d2a:	a904      	add	r1, sp, #16
 8017d2c:	4638      	mov	r0, r7
 8017d2e:	f000 f9bb 	bl	80180a8 <_printf_i>
 8017d32:	e7ed      	b.n	8017d10 <_svfiprintf_r+0x1c0>
 8017d34:	08019700 	.word	0x08019700
 8017d38:	0801970a 	.word	0x0801970a
 8017d3c:	00000000 	.word	0x00000000
 8017d40:	08017a99 	.word	0x08017a99
 8017d44:	08019706 	.word	0x08019706

08017d48 <__sfputc_r>:
 8017d48:	6893      	ldr	r3, [r2, #8]
 8017d4a:	3b01      	subs	r3, #1
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	b410      	push	{r4}
 8017d50:	6093      	str	r3, [r2, #8]
 8017d52:	da08      	bge.n	8017d66 <__sfputc_r+0x1e>
 8017d54:	6994      	ldr	r4, [r2, #24]
 8017d56:	42a3      	cmp	r3, r4
 8017d58:	db01      	blt.n	8017d5e <__sfputc_r+0x16>
 8017d5a:	290a      	cmp	r1, #10
 8017d5c:	d103      	bne.n	8017d66 <__sfputc_r+0x1e>
 8017d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d62:	f000 bb7f 	b.w	8018464 <__swbuf_r>
 8017d66:	6813      	ldr	r3, [r2, #0]
 8017d68:	1c58      	adds	r0, r3, #1
 8017d6a:	6010      	str	r0, [r2, #0]
 8017d6c:	7019      	strb	r1, [r3, #0]
 8017d6e:	4608      	mov	r0, r1
 8017d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d74:	4770      	bx	lr

08017d76 <__sfputs_r>:
 8017d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d78:	4606      	mov	r6, r0
 8017d7a:	460f      	mov	r7, r1
 8017d7c:	4614      	mov	r4, r2
 8017d7e:	18d5      	adds	r5, r2, r3
 8017d80:	42ac      	cmp	r4, r5
 8017d82:	d101      	bne.n	8017d88 <__sfputs_r+0x12>
 8017d84:	2000      	movs	r0, #0
 8017d86:	e007      	b.n	8017d98 <__sfputs_r+0x22>
 8017d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d8c:	463a      	mov	r2, r7
 8017d8e:	4630      	mov	r0, r6
 8017d90:	f7ff ffda 	bl	8017d48 <__sfputc_r>
 8017d94:	1c43      	adds	r3, r0, #1
 8017d96:	d1f3      	bne.n	8017d80 <__sfputs_r+0xa>
 8017d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017d9c <_vfiprintf_r>:
 8017d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017da0:	460d      	mov	r5, r1
 8017da2:	b09d      	sub	sp, #116	@ 0x74
 8017da4:	4614      	mov	r4, r2
 8017da6:	4698      	mov	r8, r3
 8017da8:	4606      	mov	r6, r0
 8017daa:	b118      	cbz	r0, 8017db4 <_vfiprintf_r+0x18>
 8017dac:	6a03      	ldr	r3, [r0, #32]
 8017dae:	b90b      	cbnz	r3, 8017db4 <_vfiprintf_r+0x18>
 8017db0:	f7ff fbfc 	bl	80175ac <__sinit>
 8017db4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017db6:	07d9      	lsls	r1, r3, #31
 8017db8:	d405      	bmi.n	8017dc6 <_vfiprintf_r+0x2a>
 8017dba:	89ab      	ldrh	r3, [r5, #12]
 8017dbc:	059a      	lsls	r2, r3, #22
 8017dbe:	d402      	bmi.n	8017dc6 <_vfiprintf_r+0x2a>
 8017dc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017dc2:	f7ff fdd4 	bl	801796e <__retarget_lock_acquire_recursive>
 8017dc6:	89ab      	ldrh	r3, [r5, #12]
 8017dc8:	071b      	lsls	r3, r3, #28
 8017dca:	d501      	bpl.n	8017dd0 <_vfiprintf_r+0x34>
 8017dcc:	692b      	ldr	r3, [r5, #16]
 8017dce:	b99b      	cbnz	r3, 8017df8 <_vfiprintf_r+0x5c>
 8017dd0:	4629      	mov	r1, r5
 8017dd2:	4630      	mov	r0, r6
 8017dd4:	f000 fb84 	bl	80184e0 <__swsetup_r>
 8017dd8:	b170      	cbz	r0, 8017df8 <_vfiprintf_r+0x5c>
 8017dda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ddc:	07dc      	lsls	r4, r3, #31
 8017dde:	d504      	bpl.n	8017dea <_vfiprintf_r+0x4e>
 8017de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017de4:	b01d      	add	sp, #116	@ 0x74
 8017de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dea:	89ab      	ldrh	r3, [r5, #12]
 8017dec:	0598      	lsls	r0, r3, #22
 8017dee:	d4f7      	bmi.n	8017de0 <_vfiprintf_r+0x44>
 8017df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017df2:	f7ff fdbd 	bl	8017970 <__retarget_lock_release_recursive>
 8017df6:	e7f3      	b.n	8017de0 <_vfiprintf_r+0x44>
 8017df8:	2300      	movs	r3, #0
 8017dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8017dfc:	2320      	movs	r3, #32
 8017dfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017e02:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e06:	2330      	movs	r3, #48	@ 0x30
 8017e08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017fb8 <_vfiprintf_r+0x21c>
 8017e0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017e10:	f04f 0901 	mov.w	r9, #1
 8017e14:	4623      	mov	r3, r4
 8017e16:	469a      	mov	sl, r3
 8017e18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e1c:	b10a      	cbz	r2, 8017e22 <_vfiprintf_r+0x86>
 8017e1e:	2a25      	cmp	r2, #37	@ 0x25
 8017e20:	d1f9      	bne.n	8017e16 <_vfiprintf_r+0x7a>
 8017e22:	ebba 0b04 	subs.w	fp, sl, r4
 8017e26:	d00b      	beq.n	8017e40 <_vfiprintf_r+0xa4>
 8017e28:	465b      	mov	r3, fp
 8017e2a:	4622      	mov	r2, r4
 8017e2c:	4629      	mov	r1, r5
 8017e2e:	4630      	mov	r0, r6
 8017e30:	f7ff ffa1 	bl	8017d76 <__sfputs_r>
 8017e34:	3001      	adds	r0, #1
 8017e36:	f000 80a7 	beq.w	8017f88 <_vfiprintf_r+0x1ec>
 8017e3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e3c:	445a      	add	r2, fp
 8017e3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8017e40:	f89a 3000 	ldrb.w	r3, [sl]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	f000 809f 	beq.w	8017f88 <_vfiprintf_r+0x1ec>
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e54:	f10a 0a01 	add.w	sl, sl, #1
 8017e58:	9304      	str	r3, [sp, #16]
 8017e5a:	9307      	str	r3, [sp, #28]
 8017e5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017e60:	931a      	str	r3, [sp, #104]	@ 0x68
 8017e62:	4654      	mov	r4, sl
 8017e64:	2205      	movs	r2, #5
 8017e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e6a:	4853      	ldr	r0, [pc, #332]	@ (8017fb8 <_vfiprintf_r+0x21c>)
 8017e6c:	f7e8 f9d0 	bl	8000210 <memchr>
 8017e70:	9a04      	ldr	r2, [sp, #16]
 8017e72:	b9d8      	cbnz	r0, 8017eac <_vfiprintf_r+0x110>
 8017e74:	06d1      	lsls	r1, r2, #27
 8017e76:	bf44      	itt	mi
 8017e78:	2320      	movmi	r3, #32
 8017e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e7e:	0713      	lsls	r3, r2, #28
 8017e80:	bf44      	itt	mi
 8017e82:	232b      	movmi	r3, #43	@ 0x2b
 8017e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e88:	f89a 3000 	ldrb.w	r3, [sl]
 8017e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e8e:	d015      	beq.n	8017ebc <_vfiprintf_r+0x120>
 8017e90:	9a07      	ldr	r2, [sp, #28]
 8017e92:	4654      	mov	r4, sl
 8017e94:	2000      	movs	r0, #0
 8017e96:	f04f 0c0a 	mov.w	ip, #10
 8017e9a:	4621      	mov	r1, r4
 8017e9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017ea0:	3b30      	subs	r3, #48	@ 0x30
 8017ea2:	2b09      	cmp	r3, #9
 8017ea4:	d94b      	bls.n	8017f3e <_vfiprintf_r+0x1a2>
 8017ea6:	b1b0      	cbz	r0, 8017ed6 <_vfiprintf_r+0x13a>
 8017ea8:	9207      	str	r2, [sp, #28]
 8017eaa:	e014      	b.n	8017ed6 <_vfiprintf_r+0x13a>
 8017eac:	eba0 0308 	sub.w	r3, r0, r8
 8017eb0:	fa09 f303 	lsl.w	r3, r9, r3
 8017eb4:	4313      	orrs	r3, r2
 8017eb6:	9304      	str	r3, [sp, #16]
 8017eb8:	46a2      	mov	sl, r4
 8017eba:	e7d2      	b.n	8017e62 <_vfiprintf_r+0xc6>
 8017ebc:	9b03      	ldr	r3, [sp, #12]
 8017ebe:	1d19      	adds	r1, r3, #4
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	9103      	str	r1, [sp, #12]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	bfbb      	ittet	lt
 8017ec8:	425b      	neglt	r3, r3
 8017eca:	f042 0202 	orrlt.w	r2, r2, #2
 8017ece:	9307      	strge	r3, [sp, #28]
 8017ed0:	9307      	strlt	r3, [sp, #28]
 8017ed2:	bfb8      	it	lt
 8017ed4:	9204      	strlt	r2, [sp, #16]
 8017ed6:	7823      	ldrb	r3, [r4, #0]
 8017ed8:	2b2e      	cmp	r3, #46	@ 0x2e
 8017eda:	d10a      	bne.n	8017ef2 <_vfiprintf_r+0x156>
 8017edc:	7863      	ldrb	r3, [r4, #1]
 8017ede:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ee0:	d132      	bne.n	8017f48 <_vfiprintf_r+0x1ac>
 8017ee2:	9b03      	ldr	r3, [sp, #12]
 8017ee4:	1d1a      	adds	r2, r3, #4
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	9203      	str	r2, [sp, #12]
 8017eea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017eee:	3402      	adds	r4, #2
 8017ef0:	9305      	str	r3, [sp, #20]
 8017ef2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017fc8 <_vfiprintf_r+0x22c>
 8017ef6:	7821      	ldrb	r1, [r4, #0]
 8017ef8:	2203      	movs	r2, #3
 8017efa:	4650      	mov	r0, sl
 8017efc:	f7e8 f988 	bl	8000210 <memchr>
 8017f00:	b138      	cbz	r0, 8017f12 <_vfiprintf_r+0x176>
 8017f02:	9b04      	ldr	r3, [sp, #16]
 8017f04:	eba0 000a 	sub.w	r0, r0, sl
 8017f08:	2240      	movs	r2, #64	@ 0x40
 8017f0a:	4082      	lsls	r2, r0
 8017f0c:	4313      	orrs	r3, r2
 8017f0e:	3401      	adds	r4, #1
 8017f10:	9304      	str	r3, [sp, #16]
 8017f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f16:	4829      	ldr	r0, [pc, #164]	@ (8017fbc <_vfiprintf_r+0x220>)
 8017f18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017f1c:	2206      	movs	r2, #6
 8017f1e:	f7e8 f977 	bl	8000210 <memchr>
 8017f22:	2800      	cmp	r0, #0
 8017f24:	d03f      	beq.n	8017fa6 <_vfiprintf_r+0x20a>
 8017f26:	4b26      	ldr	r3, [pc, #152]	@ (8017fc0 <_vfiprintf_r+0x224>)
 8017f28:	bb1b      	cbnz	r3, 8017f72 <_vfiprintf_r+0x1d6>
 8017f2a:	9b03      	ldr	r3, [sp, #12]
 8017f2c:	3307      	adds	r3, #7
 8017f2e:	f023 0307 	bic.w	r3, r3, #7
 8017f32:	3308      	adds	r3, #8
 8017f34:	9303      	str	r3, [sp, #12]
 8017f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f38:	443b      	add	r3, r7
 8017f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f3c:	e76a      	b.n	8017e14 <_vfiprintf_r+0x78>
 8017f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f42:	460c      	mov	r4, r1
 8017f44:	2001      	movs	r0, #1
 8017f46:	e7a8      	b.n	8017e9a <_vfiprintf_r+0xfe>
 8017f48:	2300      	movs	r3, #0
 8017f4a:	3401      	adds	r4, #1
 8017f4c:	9305      	str	r3, [sp, #20]
 8017f4e:	4619      	mov	r1, r3
 8017f50:	f04f 0c0a 	mov.w	ip, #10
 8017f54:	4620      	mov	r0, r4
 8017f56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f5a:	3a30      	subs	r2, #48	@ 0x30
 8017f5c:	2a09      	cmp	r2, #9
 8017f5e:	d903      	bls.n	8017f68 <_vfiprintf_r+0x1cc>
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d0c6      	beq.n	8017ef2 <_vfiprintf_r+0x156>
 8017f64:	9105      	str	r1, [sp, #20]
 8017f66:	e7c4      	b.n	8017ef2 <_vfiprintf_r+0x156>
 8017f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f6c:	4604      	mov	r4, r0
 8017f6e:	2301      	movs	r3, #1
 8017f70:	e7f0      	b.n	8017f54 <_vfiprintf_r+0x1b8>
 8017f72:	ab03      	add	r3, sp, #12
 8017f74:	9300      	str	r3, [sp, #0]
 8017f76:	462a      	mov	r2, r5
 8017f78:	4b12      	ldr	r3, [pc, #72]	@ (8017fc4 <_vfiprintf_r+0x228>)
 8017f7a:	a904      	add	r1, sp, #16
 8017f7c:	4630      	mov	r0, r6
 8017f7e:	f3af 8000 	nop.w
 8017f82:	4607      	mov	r7, r0
 8017f84:	1c78      	adds	r0, r7, #1
 8017f86:	d1d6      	bne.n	8017f36 <_vfiprintf_r+0x19a>
 8017f88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017f8a:	07d9      	lsls	r1, r3, #31
 8017f8c:	d405      	bmi.n	8017f9a <_vfiprintf_r+0x1fe>
 8017f8e:	89ab      	ldrh	r3, [r5, #12]
 8017f90:	059a      	lsls	r2, r3, #22
 8017f92:	d402      	bmi.n	8017f9a <_vfiprintf_r+0x1fe>
 8017f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017f96:	f7ff fceb 	bl	8017970 <__retarget_lock_release_recursive>
 8017f9a:	89ab      	ldrh	r3, [r5, #12]
 8017f9c:	065b      	lsls	r3, r3, #25
 8017f9e:	f53f af1f 	bmi.w	8017de0 <_vfiprintf_r+0x44>
 8017fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017fa4:	e71e      	b.n	8017de4 <_vfiprintf_r+0x48>
 8017fa6:	ab03      	add	r3, sp, #12
 8017fa8:	9300      	str	r3, [sp, #0]
 8017faa:	462a      	mov	r2, r5
 8017fac:	4b05      	ldr	r3, [pc, #20]	@ (8017fc4 <_vfiprintf_r+0x228>)
 8017fae:	a904      	add	r1, sp, #16
 8017fb0:	4630      	mov	r0, r6
 8017fb2:	f000 f879 	bl	80180a8 <_printf_i>
 8017fb6:	e7e4      	b.n	8017f82 <_vfiprintf_r+0x1e6>
 8017fb8:	08019700 	.word	0x08019700
 8017fbc:	0801970a 	.word	0x0801970a
 8017fc0:	00000000 	.word	0x00000000
 8017fc4:	08017d77 	.word	0x08017d77
 8017fc8:	08019706 	.word	0x08019706

08017fcc <_printf_common>:
 8017fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fd0:	4616      	mov	r6, r2
 8017fd2:	4698      	mov	r8, r3
 8017fd4:	688a      	ldr	r2, [r1, #8]
 8017fd6:	690b      	ldr	r3, [r1, #16]
 8017fd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017fdc:	4293      	cmp	r3, r2
 8017fde:	bfb8      	it	lt
 8017fe0:	4613      	movlt	r3, r2
 8017fe2:	6033      	str	r3, [r6, #0]
 8017fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017fe8:	4607      	mov	r7, r0
 8017fea:	460c      	mov	r4, r1
 8017fec:	b10a      	cbz	r2, 8017ff2 <_printf_common+0x26>
 8017fee:	3301      	adds	r3, #1
 8017ff0:	6033      	str	r3, [r6, #0]
 8017ff2:	6823      	ldr	r3, [r4, #0]
 8017ff4:	0699      	lsls	r1, r3, #26
 8017ff6:	bf42      	ittt	mi
 8017ff8:	6833      	ldrmi	r3, [r6, #0]
 8017ffa:	3302      	addmi	r3, #2
 8017ffc:	6033      	strmi	r3, [r6, #0]
 8017ffe:	6825      	ldr	r5, [r4, #0]
 8018000:	f015 0506 	ands.w	r5, r5, #6
 8018004:	d106      	bne.n	8018014 <_printf_common+0x48>
 8018006:	f104 0a19 	add.w	sl, r4, #25
 801800a:	68e3      	ldr	r3, [r4, #12]
 801800c:	6832      	ldr	r2, [r6, #0]
 801800e:	1a9b      	subs	r3, r3, r2
 8018010:	42ab      	cmp	r3, r5
 8018012:	dc26      	bgt.n	8018062 <_printf_common+0x96>
 8018014:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018018:	6822      	ldr	r2, [r4, #0]
 801801a:	3b00      	subs	r3, #0
 801801c:	bf18      	it	ne
 801801e:	2301      	movne	r3, #1
 8018020:	0692      	lsls	r2, r2, #26
 8018022:	d42b      	bmi.n	801807c <_printf_common+0xb0>
 8018024:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018028:	4641      	mov	r1, r8
 801802a:	4638      	mov	r0, r7
 801802c:	47c8      	blx	r9
 801802e:	3001      	adds	r0, #1
 8018030:	d01e      	beq.n	8018070 <_printf_common+0xa4>
 8018032:	6823      	ldr	r3, [r4, #0]
 8018034:	6922      	ldr	r2, [r4, #16]
 8018036:	f003 0306 	and.w	r3, r3, #6
 801803a:	2b04      	cmp	r3, #4
 801803c:	bf02      	ittt	eq
 801803e:	68e5      	ldreq	r5, [r4, #12]
 8018040:	6833      	ldreq	r3, [r6, #0]
 8018042:	1aed      	subeq	r5, r5, r3
 8018044:	68a3      	ldr	r3, [r4, #8]
 8018046:	bf0c      	ite	eq
 8018048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801804c:	2500      	movne	r5, #0
 801804e:	4293      	cmp	r3, r2
 8018050:	bfc4      	itt	gt
 8018052:	1a9b      	subgt	r3, r3, r2
 8018054:	18ed      	addgt	r5, r5, r3
 8018056:	2600      	movs	r6, #0
 8018058:	341a      	adds	r4, #26
 801805a:	42b5      	cmp	r5, r6
 801805c:	d11a      	bne.n	8018094 <_printf_common+0xc8>
 801805e:	2000      	movs	r0, #0
 8018060:	e008      	b.n	8018074 <_printf_common+0xa8>
 8018062:	2301      	movs	r3, #1
 8018064:	4652      	mov	r2, sl
 8018066:	4641      	mov	r1, r8
 8018068:	4638      	mov	r0, r7
 801806a:	47c8      	blx	r9
 801806c:	3001      	adds	r0, #1
 801806e:	d103      	bne.n	8018078 <_printf_common+0xac>
 8018070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018078:	3501      	adds	r5, #1
 801807a:	e7c6      	b.n	801800a <_printf_common+0x3e>
 801807c:	18e1      	adds	r1, r4, r3
 801807e:	1c5a      	adds	r2, r3, #1
 8018080:	2030      	movs	r0, #48	@ 0x30
 8018082:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018086:	4422      	add	r2, r4
 8018088:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801808c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018090:	3302      	adds	r3, #2
 8018092:	e7c7      	b.n	8018024 <_printf_common+0x58>
 8018094:	2301      	movs	r3, #1
 8018096:	4622      	mov	r2, r4
 8018098:	4641      	mov	r1, r8
 801809a:	4638      	mov	r0, r7
 801809c:	47c8      	blx	r9
 801809e:	3001      	adds	r0, #1
 80180a0:	d0e6      	beq.n	8018070 <_printf_common+0xa4>
 80180a2:	3601      	adds	r6, #1
 80180a4:	e7d9      	b.n	801805a <_printf_common+0x8e>
	...

080180a8 <_printf_i>:
 80180a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80180ac:	7e0f      	ldrb	r7, [r1, #24]
 80180ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80180b0:	2f78      	cmp	r7, #120	@ 0x78
 80180b2:	4691      	mov	r9, r2
 80180b4:	4680      	mov	r8, r0
 80180b6:	460c      	mov	r4, r1
 80180b8:	469a      	mov	sl, r3
 80180ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80180be:	d807      	bhi.n	80180d0 <_printf_i+0x28>
 80180c0:	2f62      	cmp	r7, #98	@ 0x62
 80180c2:	d80a      	bhi.n	80180da <_printf_i+0x32>
 80180c4:	2f00      	cmp	r7, #0
 80180c6:	f000 80d2 	beq.w	801826e <_printf_i+0x1c6>
 80180ca:	2f58      	cmp	r7, #88	@ 0x58
 80180cc:	f000 80b9 	beq.w	8018242 <_printf_i+0x19a>
 80180d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80180d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80180d8:	e03a      	b.n	8018150 <_printf_i+0xa8>
 80180da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80180de:	2b15      	cmp	r3, #21
 80180e0:	d8f6      	bhi.n	80180d0 <_printf_i+0x28>
 80180e2:	a101      	add	r1, pc, #4	@ (adr r1, 80180e8 <_printf_i+0x40>)
 80180e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80180e8:	08018141 	.word	0x08018141
 80180ec:	08018155 	.word	0x08018155
 80180f0:	080180d1 	.word	0x080180d1
 80180f4:	080180d1 	.word	0x080180d1
 80180f8:	080180d1 	.word	0x080180d1
 80180fc:	080180d1 	.word	0x080180d1
 8018100:	08018155 	.word	0x08018155
 8018104:	080180d1 	.word	0x080180d1
 8018108:	080180d1 	.word	0x080180d1
 801810c:	080180d1 	.word	0x080180d1
 8018110:	080180d1 	.word	0x080180d1
 8018114:	08018255 	.word	0x08018255
 8018118:	0801817f 	.word	0x0801817f
 801811c:	0801820f 	.word	0x0801820f
 8018120:	080180d1 	.word	0x080180d1
 8018124:	080180d1 	.word	0x080180d1
 8018128:	08018277 	.word	0x08018277
 801812c:	080180d1 	.word	0x080180d1
 8018130:	0801817f 	.word	0x0801817f
 8018134:	080180d1 	.word	0x080180d1
 8018138:	080180d1 	.word	0x080180d1
 801813c:	08018217 	.word	0x08018217
 8018140:	6833      	ldr	r3, [r6, #0]
 8018142:	1d1a      	adds	r2, r3, #4
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	6032      	str	r2, [r6, #0]
 8018148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801814c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018150:	2301      	movs	r3, #1
 8018152:	e09d      	b.n	8018290 <_printf_i+0x1e8>
 8018154:	6833      	ldr	r3, [r6, #0]
 8018156:	6820      	ldr	r0, [r4, #0]
 8018158:	1d19      	adds	r1, r3, #4
 801815a:	6031      	str	r1, [r6, #0]
 801815c:	0606      	lsls	r6, r0, #24
 801815e:	d501      	bpl.n	8018164 <_printf_i+0xbc>
 8018160:	681d      	ldr	r5, [r3, #0]
 8018162:	e003      	b.n	801816c <_printf_i+0xc4>
 8018164:	0645      	lsls	r5, r0, #25
 8018166:	d5fb      	bpl.n	8018160 <_printf_i+0xb8>
 8018168:	f9b3 5000 	ldrsh.w	r5, [r3]
 801816c:	2d00      	cmp	r5, #0
 801816e:	da03      	bge.n	8018178 <_printf_i+0xd0>
 8018170:	232d      	movs	r3, #45	@ 0x2d
 8018172:	426d      	negs	r5, r5
 8018174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018178:	4859      	ldr	r0, [pc, #356]	@ (80182e0 <_printf_i+0x238>)
 801817a:	230a      	movs	r3, #10
 801817c:	e011      	b.n	80181a2 <_printf_i+0xfa>
 801817e:	6821      	ldr	r1, [r4, #0]
 8018180:	6833      	ldr	r3, [r6, #0]
 8018182:	0608      	lsls	r0, r1, #24
 8018184:	f853 5b04 	ldr.w	r5, [r3], #4
 8018188:	d402      	bmi.n	8018190 <_printf_i+0xe8>
 801818a:	0649      	lsls	r1, r1, #25
 801818c:	bf48      	it	mi
 801818e:	b2ad      	uxthmi	r5, r5
 8018190:	2f6f      	cmp	r7, #111	@ 0x6f
 8018192:	4853      	ldr	r0, [pc, #332]	@ (80182e0 <_printf_i+0x238>)
 8018194:	6033      	str	r3, [r6, #0]
 8018196:	bf14      	ite	ne
 8018198:	230a      	movne	r3, #10
 801819a:	2308      	moveq	r3, #8
 801819c:	2100      	movs	r1, #0
 801819e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80181a2:	6866      	ldr	r6, [r4, #4]
 80181a4:	60a6      	str	r6, [r4, #8]
 80181a6:	2e00      	cmp	r6, #0
 80181a8:	bfa2      	ittt	ge
 80181aa:	6821      	ldrge	r1, [r4, #0]
 80181ac:	f021 0104 	bicge.w	r1, r1, #4
 80181b0:	6021      	strge	r1, [r4, #0]
 80181b2:	b90d      	cbnz	r5, 80181b8 <_printf_i+0x110>
 80181b4:	2e00      	cmp	r6, #0
 80181b6:	d04b      	beq.n	8018250 <_printf_i+0x1a8>
 80181b8:	4616      	mov	r6, r2
 80181ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80181be:	fb03 5711 	mls	r7, r3, r1, r5
 80181c2:	5dc7      	ldrb	r7, [r0, r7]
 80181c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80181c8:	462f      	mov	r7, r5
 80181ca:	42bb      	cmp	r3, r7
 80181cc:	460d      	mov	r5, r1
 80181ce:	d9f4      	bls.n	80181ba <_printf_i+0x112>
 80181d0:	2b08      	cmp	r3, #8
 80181d2:	d10b      	bne.n	80181ec <_printf_i+0x144>
 80181d4:	6823      	ldr	r3, [r4, #0]
 80181d6:	07df      	lsls	r7, r3, #31
 80181d8:	d508      	bpl.n	80181ec <_printf_i+0x144>
 80181da:	6923      	ldr	r3, [r4, #16]
 80181dc:	6861      	ldr	r1, [r4, #4]
 80181de:	4299      	cmp	r1, r3
 80181e0:	bfde      	ittt	le
 80181e2:	2330      	movle	r3, #48	@ 0x30
 80181e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80181e8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80181ec:	1b92      	subs	r2, r2, r6
 80181ee:	6122      	str	r2, [r4, #16]
 80181f0:	f8cd a000 	str.w	sl, [sp]
 80181f4:	464b      	mov	r3, r9
 80181f6:	aa03      	add	r2, sp, #12
 80181f8:	4621      	mov	r1, r4
 80181fa:	4640      	mov	r0, r8
 80181fc:	f7ff fee6 	bl	8017fcc <_printf_common>
 8018200:	3001      	adds	r0, #1
 8018202:	d14a      	bne.n	801829a <_printf_i+0x1f2>
 8018204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018208:	b004      	add	sp, #16
 801820a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801820e:	6823      	ldr	r3, [r4, #0]
 8018210:	f043 0320 	orr.w	r3, r3, #32
 8018214:	6023      	str	r3, [r4, #0]
 8018216:	4833      	ldr	r0, [pc, #204]	@ (80182e4 <_printf_i+0x23c>)
 8018218:	2778      	movs	r7, #120	@ 0x78
 801821a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801821e:	6823      	ldr	r3, [r4, #0]
 8018220:	6831      	ldr	r1, [r6, #0]
 8018222:	061f      	lsls	r7, r3, #24
 8018224:	f851 5b04 	ldr.w	r5, [r1], #4
 8018228:	d402      	bmi.n	8018230 <_printf_i+0x188>
 801822a:	065f      	lsls	r7, r3, #25
 801822c:	bf48      	it	mi
 801822e:	b2ad      	uxthmi	r5, r5
 8018230:	6031      	str	r1, [r6, #0]
 8018232:	07d9      	lsls	r1, r3, #31
 8018234:	bf44      	itt	mi
 8018236:	f043 0320 	orrmi.w	r3, r3, #32
 801823a:	6023      	strmi	r3, [r4, #0]
 801823c:	b11d      	cbz	r5, 8018246 <_printf_i+0x19e>
 801823e:	2310      	movs	r3, #16
 8018240:	e7ac      	b.n	801819c <_printf_i+0xf4>
 8018242:	4827      	ldr	r0, [pc, #156]	@ (80182e0 <_printf_i+0x238>)
 8018244:	e7e9      	b.n	801821a <_printf_i+0x172>
 8018246:	6823      	ldr	r3, [r4, #0]
 8018248:	f023 0320 	bic.w	r3, r3, #32
 801824c:	6023      	str	r3, [r4, #0]
 801824e:	e7f6      	b.n	801823e <_printf_i+0x196>
 8018250:	4616      	mov	r6, r2
 8018252:	e7bd      	b.n	80181d0 <_printf_i+0x128>
 8018254:	6833      	ldr	r3, [r6, #0]
 8018256:	6825      	ldr	r5, [r4, #0]
 8018258:	6961      	ldr	r1, [r4, #20]
 801825a:	1d18      	adds	r0, r3, #4
 801825c:	6030      	str	r0, [r6, #0]
 801825e:	062e      	lsls	r6, r5, #24
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	d501      	bpl.n	8018268 <_printf_i+0x1c0>
 8018264:	6019      	str	r1, [r3, #0]
 8018266:	e002      	b.n	801826e <_printf_i+0x1c6>
 8018268:	0668      	lsls	r0, r5, #25
 801826a:	d5fb      	bpl.n	8018264 <_printf_i+0x1bc>
 801826c:	8019      	strh	r1, [r3, #0]
 801826e:	2300      	movs	r3, #0
 8018270:	6123      	str	r3, [r4, #16]
 8018272:	4616      	mov	r6, r2
 8018274:	e7bc      	b.n	80181f0 <_printf_i+0x148>
 8018276:	6833      	ldr	r3, [r6, #0]
 8018278:	1d1a      	adds	r2, r3, #4
 801827a:	6032      	str	r2, [r6, #0]
 801827c:	681e      	ldr	r6, [r3, #0]
 801827e:	6862      	ldr	r2, [r4, #4]
 8018280:	2100      	movs	r1, #0
 8018282:	4630      	mov	r0, r6
 8018284:	f7e7 ffc4 	bl	8000210 <memchr>
 8018288:	b108      	cbz	r0, 801828e <_printf_i+0x1e6>
 801828a:	1b80      	subs	r0, r0, r6
 801828c:	6060      	str	r0, [r4, #4]
 801828e:	6863      	ldr	r3, [r4, #4]
 8018290:	6123      	str	r3, [r4, #16]
 8018292:	2300      	movs	r3, #0
 8018294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018298:	e7aa      	b.n	80181f0 <_printf_i+0x148>
 801829a:	6923      	ldr	r3, [r4, #16]
 801829c:	4632      	mov	r2, r6
 801829e:	4649      	mov	r1, r9
 80182a0:	4640      	mov	r0, r8
 80182a2:	47d0      	blx	sl
 80182a4:	3001      	adds	r0, #1
 80182a6:	d0ad      	beq.n	8018204 <_printf_i+0x15c>
 80182a8:	6823      	ldr	r3, [r4, #0]
 80182aa:	079b      	lsls	r3, r3, #30
 80182ac:	d413      	bmi.n	80182d6 <_printf_i+0x22e>
 80182ae:	68e0      	ldr	r0, [r4, #12]
 80182b0:	9b03      	ldr	r3, [sp, #12]
 80182b2:	4298      	cmp	r0, r3
 80182b4:	bfb8      	it	lt
 80182b6:	4618      	movlt	r0, r3
 80182b8:	e7a6      	b.n	8018208 <_printf_i+0x160>
 80182ba:	2301      	movs	r3, #1
 80182bc:	4632      	mov	r2, r6
 80182be:	4649      	mov	r1, r9
 80182c0:	4640      	mov	r0, r8
 80182c2:	47d0      	blx	sl
 80182c4:	3001      	adds	r0, #1
 80182c6:	d09d      	beq.n	8018204 <_printf_i+0x15c>
 80182c8:	3501      	adds	r5, #1
 80182ca:	68e3      	ldr	r3, [r4, #12]
 80182cc:	9903      	ldr	r1, [sp, #12]
 80182ce:	1a5b      	subs	r3, r3, r1
 80182d0:	42ab      	cmp	r3, r5
 80182d2:	dcf2      	bgt.n	80182ba <_printf_i+0x212>
 80182d4:	e7eb      	b.n	80182ae <_printf_i+0x206>
 80182d6:	2500      	movs	r5, #0
 80182d8:	f104 0619 	add.w	r6, r4, #25
 80182dc:	e7f5      	b.n	80182ca <_printf_i+0x222>
 80182de:	bf00      	nop
 80182e0:	08019711 	.word	0x08019711
 80182e4:	08019722 	.word	0x08019722

080182e8 <__sflush_r>:
 80182e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80182ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182f0:	0716      	lsls	r6, r2, #28
 80182f2:	4605      	mov	r5, r0
 80182f4:	460c      	mov	r4, r1
 80182f6:	d454      	bmi.n	80183a2 <__sflush_r+0xba>
 80182f8:	684b      	ldr	r3, [r1, #4]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	dc02      	bgt.n	8018304 <__sflush_r+0x1c>
 80182fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018300:	2b00      	cmp	r3, #0
 8018302:	dd48      	ble.n	8018396 <__sflush_r+0xae>
 8018304:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018306:	2e00      	cmp	r6, #0
 8018308:	d045      	beq.n	8018396 <__sflush_r+0xae>
 801830a:	2300      	movs	r3, #0
 801830c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018310:	682f      	ldr	r7, [r5, #0]
 8018312:	6a21      	ldr	r1, [r4, #32]
 8018314:	602b      	str	r3, [r5, #0]
 8018316:	d030      	beq.n	801837a <__sflush_r+0x92>
 8018318:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801831a:	89a3      	ldrh	r3, [r4, #12]
 801831c:	0759      	lsls	r1, r3, #29
 801831e:	d505      	bpl.n	801832c <__sflush_r+0x44>
 8018320:	6863      	ldr	r3, [r4, #4]
 8018322:	1ad2      	subs	r2, r2, r3
 8018324:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018326:	b10b      	cbz	r3, 801832c <__sflush_r+0x44>
 8018328:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801832a:	1ad2      	subs	r2, r2, r3
 801832c:	2300      	movs	r3, #0
 801832e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018330:	6a21      	ldr	r1, [r4, #32]
 8018332:	4628      	mov	r0, r5
 8018334:	47b0      	blx	r6
 8018336:	1c43      	adds	r3, r0, #1
 8018338:	89a3      	ldrh	r3, [r4, #12]
 801833a:	d106      	bne.n	801834a <__sflush_r+0x62>
 801833c:	6829      	ldr	r1, [r5, #0]
 801833e:	291d      	cmp	r1, #29
 8018340:	d82b      	bhi.n	801839a <__sflush_r+0xb2>
 8018342:	4a2a      	ldr	r2, [pc, #168]	@ (80183ec <__sflush_r+0x104>)
 8018344:	410a      	asrs	r2, r1
 8018346:	07d6      	lsls	r6, r2, #31
 8018348:	d427      	bmi.n	801839a <__sflush_r+0xb2>
 801834a:	2200      	movs	r2, #0
 801834c:	6062      	str	r2, [r4, #4]
 801834e:	04d9      	lsls	r1, r3, #19
 8018350:	6922      	ldr	r2, [r4, #16]
 8018352:	6022      	str	r2, [r4, #0]
 8018354:	d504      	bpl.n	8018360 <__sflush_r+0x78>
 8018356:	1c42      	adds	r2, r0, #1
 8018358:	d101      	bne.n	801835e <__sflush_r+0x76>
 801835a:	682b      	ldr	r3, [r5, #0]
 801835c:	b903      	cbnz	r3, 8018360 <__sflush_r+0x78>
 801835e:	6560      	str	r0, [r4, #84]	@ 0x54
 8018360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018362:	602f      	str	r7, [r5, #0]
 8018364:	b1b9      	cbz	r1, 8018396 <__sflush_r+0xae>
 8018366:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801836a:	4299      	cmp	r1, r3
 801836c:	d002      	beq.n	8018374 <__sflush_r+0x8c>
 801836e:	4628      	mov	r0, r5
 8018370:	f7ff fb40 	bl	80179f4 <_free_r>
 8018374:	2300      	movs	r3, #0
 8018376:	6363      	str	r3, [r4, #52]	@ 0x34
 8018378:	e00d      	b.n	8018396 <__sflush_r+0xae>
 801837a:	2301      	movs	r3, #1
 801837c:	4628      	mov	r0, r5
 801837e:	47b0      	blx	r6
 8018380:	4602      	mov	r2, r0
 8018382:	1c50      	adds	r0, r2, #1
 8018384:	d1c9      	bne.n	801831a <__sflush_r+0x32>
 8018386:	682b      	ldr	r3, [r5, #0]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d0c6      	beq.n	801831a <__sflush_r+0x32>
 801838c:	2b1d      	cmp	r3, #29
 801838e:	d001      	beq.n	8018394 <__sflush_r+0xac>
 8018390:	2b16      	cmp	r3, #22
 8018392:	d11e      	bne.n	80183d2 <__sflush_r+0xea>
 8018394:	602f      	str	r7, [r5, #0]
 8018396:	2000      	movs	r0, #0
 8018398:	e022      	b.n	80183e0 <__sflush_r+0xf8>
 801839a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801839e:	b21b      	sxth	r3, r3
 80183a0:	e01b      	b.n	80183da <__sflush_r+0xf2>
 80183a2:	690f      	ldr	r7, [r1, #16]
 80183a4:	2f00      	cmp	r7, #0
 80183a6:	d0f6      	beq.n	8018396 <__sflush_r+0xae>
 80183a8:	0793      	lsls	r3, r2, #30
 80183aa:	680e      	ldr	r6, [r1, #0]
 80183ac:	bf08      	it	eq
 80183ae:	694b      	ldreq	r3, [r1, #20]
 80183b0:	600f      	str	r7, [r1, #0]
 80183b2:	bf18      	it	ne
 80183b4:	2300      	movne	r3, #0
 80183b6:	eba6 0807 	sub.w	r8, r6, r7
 80183ba:	608b      	str	r3, [r1, #8]
 80183bc:	f1b8 0f00 	cmp.w	r8, #0
 80183c0:	dde9      	ble.n	8018396 <__sflush_r+0xae>
 80183c2:	6a21      	ldr	r1, [r4, #32]
 80183c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80183c6:	4643      	mov	r3, r8
 80183c8:	463a      	mov	r2, r7
 80183ca:	4628      	mov	r0, r5
 80183cc:	47b0      	blx	r6
 80183ce:	2800      	cmp	r0, #0
 80183d0:	dc08      	bgt.n	80183e4 <__sflush_r+0xfc>
 80183d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80183da:	81a3      	strh	r3, [r4, #12]
 80183dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80183e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183e4:	4407      	add	r7, r0
 80183e6:	eba8 0800 	sub.w	r8, r8, r0
 80183ea:	e7e7      	b.n	80183bc <__sflush_r+0xd4>
 80183ec:	dfbffffe 	.word	0xdfbffffe

080183f0 <_fflush_r>:
 80183f0:	b538      	push	{r3, r4, r5, lr}
 80183f2:	690b      	ldr	r3, [r1, #16]
 80183f4:	4605      	mov	r5, r0
 80183f6:	460c      	mov	r4, r1
 80183f8:	b913      	cbnz	r3, 8018400 <_fflush_r+0x10>
 80183fa:	2500      	movs	r5, #0
 80183fc:	4628      	mov	r0, r5
 80183fe:	bd38      	pop	{r3, r4, r5, pc}
 8018400:	b118      	cbz	r0, 801840a <_fflush_r+0x1a>
 8018402:	6a03      	ldr	r3, [r0, #32]
 8018404:	b90b      	cbnz	r3, 801840a <_fflush_r+0x1a>
 8018406:	f7ff f8d1 	bl	80175ac <__sinit>
 801840a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d0f3      	beq.n	80183fa <_fflush_r+0xa>
 8018412:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018414:	07d0      	lsls	r0, r2, #31
 8018416:	d404      	bmi.n	8018422 <_fflush_r+0x32>
 8018418:	0599      	lsls	r1, r3, #22
 801841a:	d402      	bmi.n	8018422 <_fflush_r+0x32>
 801841c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801841e:	f7ff faa6 	bl	801796e <__retarget_lock_acquire_recursive>
 8018422:	4628      	mov	r0, r5
 8018424:	4621      	mov	r1, r4
 8018426:	f7ff ff5f 	bl	80182e8 <__sflush_r>
 801842a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801842c:	07da      	lsls	r2, r3, #31
 801842e:	4605      	mov	r5, r0
 8018430:	d4e4      	bmi.n	80183fc <_fflush_r+0xc>
 8018432:	89a3      	ldrh	r3, [r4, #12]
 8018434:	059b      	lsls	r3, r3, #22
 8018436:	d4e1      	bmi.n	80183fc <_fflush_r+0xc>
 8018438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801843a:	f7ff fa99 	bl	8017970 <__retarget_lock_release_recursive>
 801843e:	e7dd      	b.n	80183fc <_fflush_r+0xc>

08018440 <fiprintf>:
 8018440:	b40e      	push	{r1, r2, r3}
 8018442:	b503      	push	{r0, r1, lr}
 8018444:	4601      	mov	r1, r0
 8018446:	ab03      	add	r3, sp, #12
 8018448:	4805      	ldr	r0, [pc, #20]	@ (8018460 <fiprintf+0x20>)
 801844a:	f853 2b04 	ldr.w	r2, [r3], #4
 801844e:	6800      	ldr	r0, [r0, #0]
 8018450:	9301      	str	r3, [sp, #4]
 8018452:	f7ff fca3 	bl	8017d9c <_vfiprintf_r>
 8018456:	b002      	add	sp, #8
 8018458:	f85d eb04 	ldr.w	lr, [sp], #4
 801845c:	b003      	add	sp, #12
 801845e:	4770      	bx	lr
 8018460:	20000268 	.word	0x20000268

08018464 <__swbuf_r>:
 8018464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018466:	460e      	mov	r6, r1
 8018468:	4614      	mov	r4, r2
 801846a:	4605      	mov	r5, r0
 801846c:	b118      	cbz	r0, 8018476 <__swbuf_r+0x12>
 801846e:	6a03      	ldr	r3, [r0, #32]
 8018470:	b90b      	cbnz	r3, 8018476 <__swbuf_r+0x12>
 8018472:	f7ff f89b 	bl	80175ac <__sinit>
 8018476:	69a3      	ldr	r3, [r4, #24]
 8018478:	60a3      	str	r3, [r4, #8]
 801847a:	89a3      	ldrh	r3, [r4, #12]
 801847c:	071a      	lsls	r2, r3, #28
 801847e:	d501      	bpl.n	8018484 <__swbuf_r+0x20>
 8018480:	6923      	ldr	r3, [r4, #16]
 8018482:	b943      	cbnz	r3, 8018496 <__swbuf_r+0x32>
 8018484:	4621      	mov	r1, r4
 8018486:	4628      	mov	r0, r5
 8018488:	f000 f82a 	bl	80184e0 <__swsetup_r>
 801848c:	b118      	cbz	r0, 8018496 <__swbuf_r+0x32>
 801848e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018492:	4638      	mov	r0, r7
 8018494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018496:	6823      	ldr	r3, [r4, #0]
 8018498:	6922      	ldr	r2, [r4, #16]
 801849a:	1a98      	subs	r0, r3, r2
 801849c:	6963      	ldr	r3, [r4, #20]
 801849e:	b2f6      	uxtb	r6, r6
 80184a0:	4283      	cmp	r3, r0
 80184a2:	4637      	mov	r7, r6
 80184a4:	dc05      	bgt.n	80184b2 <__swbuf_r+0x4e>
 80184a6:	4621      	mov	r1, r4
 80184a8:	4628      	mov	r0, r5
 80184aa:	f7ff ffa1 	bl	80183f0 <_fflush_r>
 80184ae:	2800      	cmp	r0, #0
 80184b0:	d1ed      	bne.n	801848e <__swbuf_r+0x2a>
 80184b2:	68a3      	ldr	r3, [r4, #8]
 80184b4:	3b01      	subs	r3, #1
 80184b6:	60a3      	str	r3, [r4, #8]
 80184b8:	6823      	ldr	r3, [r4, #0]
 80184ba:	1c5a      	adds	r2, r3, #1
 80184bc:	6022      	str	r2, [r4, #0]
 80184be:	701e      	strb	r6, [r3, #0]
 80184c0:	6962      	ldr	r2, [r4, #20]
 80184c2:	1c43      	adds	r3, r0, #1
 80184c4:	429a      	cmp	r2, r3
 80184c6:	d004      	beq.n	80184d2 <__swbuf_r+0x6e>
 80184c8:	89a3      	ldrh	r3, [r4, #12]
 80184ca:	07db      	lsls	r3, r3, #31
 80184cc:	d5e1      	bpl.n	8018492 <__swbuf_r+0x2e>
 80184ce:	2e0a      	cmp	r6, #10
 80184d0:	d1df      	bne.n	8018492 <__swbuf_r+0x2e>
 80184d2:	4621      	mov	r1, r4
 80184d4:	4628      	mov	r0, r5
 80184d6:	f7ff ff8b 	bl	80183f0 <_fflush_r>
 80184da:	2800      	cmp	r0, #0
 80184dc:	d0d9      	beq.n	8018492 <__swbuf_r+0x2e>
 80184de:	e7d6      	b.n	801848e <__swbuf_r+0x2a>

080184e0 <__swsetup_r>:
 80184e0:	b538      	push	{r3, r4, r5, lr}
 80184e2:	4b29      	ldr	r3, [pc, #164]	@ (8018588 <__swsetup_r+0xa8>)
 80184e4:	4605      	mov	r5, r0
 80184e6:	6818      	ldr	r0, [r3, #0]
 80184e8:	460c      	mov	r4, r1
 80184ea:	b118      	cbz	r0, 80184f4 <__swsetup_r+0x14>
 80184ec:	6a03      	ldr	r3, [r0, #32]
 80184ee:	b90b      	cbnz	r3, 80184f4 <__swsetup_r+0x14>
 80184f0:	f7ff f85c 	bl	80175ac <__sinit>
 80184f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184f8:	0719      	lsls	r1, r3, #28
 80184fa:	d422      	bmi.n	8018542 <__swsetup_r+0x62>
 80184fc:	06da      	lsls	r2, r3, #27
 80184fe:	d407      	bmi.n	8018510 <__swsetup_r+0x30>
 8018500:	2209      	movs	r2, #9
 8018502:	602a      	str	r2, [r5, #0]
 8018504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018508:	81a3      	strh	r3, [r4, #12]
 801850a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801850e:	e033      	b.n	8018578 <__swsetup_r+0x98>
 8018510:	0758      	lsls	r0, r3, #29
 8018512:	d512      	bpl.n	801853a <__swsetup_r+0x5a>
 8018514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018516:	b141      	cbz	r1, 801852a <__swsetup_r+0x4a>
 8018518:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801851c:	4299      	cmp	r1, r3
 801851e:	d002      	beq.n	8018526 <__swsetup_r+0x46>
 8018520:	4628      	mov	r0, r5
 8018522:	f7ff fa67 	bl	80179f4 <_free_r>
 8018526:	2300      	movs	r3, #0
 8018528:	6363      	str	r3, [r4, #52]	@ 0x34
 801852a:	89a3      	ldrh	r3, [r4, #12]
 801852c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018530:	81a3      	strh	r3, [r4, #12]
 8018532:	2300      	movs	r3, #0
 8018534:	6063      	str	r3, [r4, #4]
 8018536:	6923      	ldr	r3, [r4, #16]
 8018538:	6023      	str	r3, [r4, #0]
 801853a:	89a3      	ldrh	r3, [r4, #12]
 801853c:	f043 0308 	orr.w	r3, r3, #8
 8018540:	81a3      	strh	r3, [r4, #12]
 8018542:	6923      	ldr	r3, [r4, #16]
 8018544:	b94b      	cbnz	r3, 801855a <__swsetup_r+0x7a>
 8018546:	89a3      	ldrh	r3, [r4, #12]
 8018548:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801854c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018550:	d003      	beq.n	801855a <__swsetup_r+0x7a>
 8018552:	4621      	mov	r1, r4
 8018554:	4628      	mov	r0, r5
 8018556:	f000 f846 	bl	80185e6 <__smakebuf_r>
 801855a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801855e:	f013 0201 	ands.w	r2, r3, #1
 8018562:	d00a      	beq.n	801857a <__swsetup_r+0x9a>
 8018564:	2200      	movs	r2, #0
 8018566:	60a2      	str	r2, [r4, #8]
 8018568:	6962      	ldr	r2, [r4, #20]
 801856a:	4252      	negs	r2, r2
 801856c:	61a2      	str	r2, [r4, #24]
 801856e:	6922      	ldr	r2, [r4, #16]
 8018570:	b942      	cbnz	r2, 8018584 <__swsetup_r+0xa4>
 8018572:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018576:	d1c5      	bne.n	8018504 <__swsetup_r+0x24>
 8018578:	bd38      	pop	{r3, r4, r5, pc}
 801857a:	0799      	lsls	r1, r3, #30
 801857c:	bf58      	it	pl
 801857e:	6962      	ldrpl	r2, [r4, #20]
 8018580:	60a2      	str	r2, [r4, #8]
 8018582:	e7f4      	b.n	801856e <__swsetup_r+0x8e>
 8018584:	2000      	movs	r0, #0
 8018586:	e7f7      	b.n	8018578 <__swsetup_r+0x98>
 8018588:	20000268 	.word	0x20000268

0801858c <abort>:
 801858c:	b508      	push	{r3, lr}
 801858e:	2006      	movs	r0, #6
 8018590:	f000 f88e 	bl	80186b0 <raise>
 8018594:	2001      	movs	r0, #1
 8018596:	f7ea f913 	bl	80027c0 <_exit>

0801859a <__swhatbuf_r>:
 801859a:	b570      	push	{r4, r5, r6, lr}
 801859c:	460c      	mov	r4, r1
 801859e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185a2:	2900      	cmp	r1, #0
 80185a4:	b096      	sub	sp, #88	@ 0x58
 80185a6:	4615      	mov	r5, r2
 80185a8:	461e      	mov	r6, r3
 80185aa:	da0d      	bge.n	80185c8 <__swhatbuf_r+0x2e>
 80185ac:	89a3      	ldrh	r3, [r4, #12]
 80185ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80185b2:	f04f 0100 	mov.w	r1, #0
 80185b6:	bf14      	ite	ne
 80185b8:	2340      	movne	r3, #64	@ 0x40
 80185ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80185be:	2000      	movs	r0, #0
 80185c0:	6031      	str	r1, [r6, #0]
 80185c2:	602b      	str	r3, [r5, #0]
 80185c4:	b016      	add	sp, #88	@ 0x58
 80185c6:	bd70      	pop	{r4, r5, r6, pc}
 80185c8:	466a      	mov	r2, sp
 80185ca:	f000 f879 	bl	80186c0 <_fstat_r>
 80185ce:	2800      	cmp	r0, #0
 80185d0:	dbec      	blt.n	80185ac <__swhatbuf_r+0x12>
 80185d2:	9901      	ldr	r1, [sp, #4]
 80185d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80185d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80185dc:	4259      	negs	r1, r3
 80185de:	4159      	adcs	r1, r3
 80185e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80185e4:	e7eb      	b.n	80185be <__swhatbuf_r+0x24>

080185e6 <__smakebuf_r>:
 80185e6:	898b      	ldrh	r3, [r1, #12]
 80185e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80185ea:	079d      	lsls	r5, r3, #30
 80185ec:	4606      	mov	r6, r0
 80185ee:	460c      	mov	r4, r1
 80185f0:	d507      	bpl.n	8018602 <__smakebuf_r+0x1c>
 80185f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80185f6:	6023      	str	r3, [r4, #0]
 80185f8:	6123      	str	r3, [r4, #16]
 80185fa:	2301      	movs	r3, #1
 80185fc:	6163      	str	r3, [r4, #20]
 80185fe:	b003      	add	sp, #12
 8018600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018602:	ab01      	add	r3, sp, #4
 8018604:	466a      	mov	r2, sp
 8018606:	f7ff ffc8 	bl	801859a <__swhatbuf_r>
 801860a:	9f00      	ldr	r7, [sp, #0]
 801860c:	4605      	mov	r5, r0
 801860e:	4639      	mov	r1, r7
 8018610:	4630      	mov	r0, r6
 8018612:	f7fe fd99 	bl	8017148 <_malloc_r>
 8018616:	b948      	cbnz	r0, 801862c <__smakebuf_r+0x46>
 8018618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801861c:	059a      	lsls	r2, r3, #22
 801861e:	d4ee      	bmi.n	80185fe <__smakebuf_r+0x18>
 8018620:	f023 0303 	bic.w	r3, r3, #3
 8018624:	f043 0302 	orr.w	r3, r3, #2
 8018628:	81a3      	strh	r3, [r4, #12]
 801862a:	e7e2      	b.n	80185f2 <__smakebuf_r+0xc>
 801862c:	89a3      	ldrh	r3, [r4, #12]
 801862e:	6020      	str	r0, [r4, #0]
 8018630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018634:	81a3      	strh	r3, [r4, #12]
 8018636:	9b01      	ldr	r3, [sp, #4]
 8018638:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801863c:	b15b      	cbz	r3, 8018656 <__smakebuf_r+0x70>
 801863e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018642:	4630      	mov	r0, r6
 8018644:	f000 f84e 	bl	80186e4 <_isatty_r>
 8018648:	b128      	cbz	r0, 8018656 <__smakebuf_r+0x70>
 801864a:	89a3      	ldrh	r3, [r4, #12]
 801864c:	f023 0303 	bic.w	r3, r3, #3
 8018650:	f043 0301 	orr.w	r3, r3, #1
 8018654:	81a3      	strh	r3, [r4, #12]
 8018656:	89a3      	ldrh	r3, [r4, #12]
 8018658:	431d      	orrs	r5, r3
 801865a:	81a5      	strh	r5, [r4, #12]
 801865c:	e7cf      	b.n	80185fe <__smakebuf_r+0x18>

0801865e <_raise_r>:
 801865e:	291f      	cmp	r1, #31
 8018660:	b538      	push	{r3, r4, r5, lr}
 8018662:	4605      	mov	r5, r0
 8018664:	460c      	mov	r4, r1
 8018666:	d904      	bls.n	8018672 <_raise_r+0x14>
 8018668:	2316      	movs	r3, #22
 801866a:	6003      	str	r3, [r0, #0]
 801866c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018670:	bd38      	pop	{r3, r4, r5, pc}
 8018672:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018674:	b112      	cbz	r2, 801867c <_raise_r+0x1e>
 8018676:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801867a:	b94b      	cbnz	r3, 8018690 <_raise_r+0x32>
 801867c:	4628      	mov	r0, r5
 801867e:	f000 f853 	bl	8018728 <_getpid_r>
 8018682:	4622      	mov	r2, r4
 8018684:	4601      	mov	r1, r0
 8018686:	4628      	mov	r0, r5
 8018688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801868c:	f000 b83a 	b.w	8018704 <_kill_r>
 8018690:	2b01      	cmp	r3, #1
 8018692:	d00a      	beq.n	80186aa <_raise_r+0x4c>
 8018694:	1c59      	adds	r1, r3, #1
 8018696:	d103      	bne.n	80186a0 <_raise_r+0x42>
 8018698:	2316      	movs	r3, #22
 801869a:	6003      	str	r3, [r0, #0]
 801869c:	2001      	movs	r0, #1
 801869e:	e7e7      	b.n	8018670 <_raise_r+0x12>
 80186a0:	2100      	movs	r1, #0
 80186a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80186a6:	4620      	mov	r0, r4
 80186a8:	4798      	blx	r3
 80186aa:	2000      	movs	r0, #0
 80186ac:	e7e0      	b.n	8018670 <_raise_r+0x12>
	...

080186b0 <raise>:
 80186b0:	4b02      	ldr	r3, [pc, #8]	@ (80186bc <raise+0xc>)
 80186b2:	4601      	mov	r1, r0
 80186b4:	6818      	ldr	r0, [r3, #0]
 80186b6:	f7ff bfd2 	b.w	801865e <_raise_r>
 80186ba:	bf00      	nop
 80186bc:	20000268 	.word	0x20000268

080186c0 <_fstat_r>:
 80186c0:	b538      	push	{r3, r4, r5, lr}
 80186c2:	4d07      	ldr	r5, [pc, #28]	@ (80186e0 <_fstat_r+0x20>)
 80186c4:	2300      	movs	r3, #0
 80186c6:	4604      	mov	r4, r0
 80186c8:	4608      	mov	r0, r1
 80186ca:	4611      	mov	r1, r2
 80186cc:	602b      	str	r3, [r5, #0]
 80186ce:	f7ea f8c7 	bl	8002860 <_fstat>
 80186d2:	1c43      	adds	r3, r0, #1
 80186d4:	d102      	bne.n	80186dc <_fstat_r+0x1c>
 80186d6:	682b      	ldr	r3, [r5, #0]
 80186d8:	b103      	cbz	r3, 80186dc <_fstat_r+0x1c>
 80186da:	6023      	str	r3, [r4, #0]
 80186dc:	bd38      	pop	{r3, r4, r5, pc}
 80186de:	bf00      	nop
 80186e0:	2000e02c 	.word	0x2000e02c

080186e4 <_isatty_r>:
 80186e4:	b538      	push	{r3, r4, r5, lr}
 80186e6:	4d06      	ldr	r5, [pc, #24]	@ (8018700 <_isatty_r+0x1c>)
 80186e8:	2300      	movs	r3, #0
 80186ea:	4604      	mov	r4, r0
 80186ec:	4608      	mov	r0, r1
 80186ee:	602b      	str	r3, [r5, #0]
 80186f0:	f7ea f8c6 	bl	8002880 <_isatty>
 80186f4:	1c43      	adds	r3, r0, #1
 80186f6:	d102      	bne.n	80186fe <_isatty_r+0x1a>
 80186f8:	682b      	ldr	r3, [r5, #0]
 80186fa:	b103      	cbz	r3, 80186fe <_isatty_r+0x1a>
 80186fc:	6023      	str	r3, [r4, #0]
 80186fe:	bd38      	pop	{r3, r4, r5, pc}
 8018700:	2000e02c 	.word	0x2000e02c

08018704 <_kill_r>:
 8018704:	b538      	push	{r3, r4, r5, lr}
 8018706:	4d07      	ldr	r5, [pc, #28]	@ (8018724 <_kill_r+0x20>)
 8018708:	2300      	movs	r3, #0
 801870a:	4604      	mov	r4, r0
 801870c:	4608      	mov	r0, r1
 801870e:	4611      	mov	r1, r2
 8018710:	602b      	str	r3, [r5, #0]
 8018712:	f7ea f845 	bl	80027a0 <_kill>
 8018716:	1c43      	adds	r3, r0, #1
 8018718:	d102      	bne.n	8018720 <_kill_r+0x1c>
 801871a:	682b      	ldr	r3, [r5, #0]
 801871c:	b103      	cbz	r3, 8018720 <_kill_r+0x1c>
 801871e:	6023      	str	r3, [r4, #0]
 8018720:	bd38      	pop	{r3, r4, r5, pc}
 8018722:	bf00      	nop
 8018724:	2000e02c 	.word	0x2000e02c

08018728 <_getpid_r>:
 8018728:	f7ea b832 	b.w	8002790 <_getpid>

0801872c <_init>:
 801872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801872e:	bf00      	nop
 8018730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018732:	bc08      	pop	{r3}
 8018734:	469e      	mov	lr, r3
 8018736:	4770      	bx	lr

08018738 <_fini>:
 8018738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801873a:	bf00      	nop
 801873c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801873e:	bc08      	pop	{r3}
 8018740:	469e      	mov	lr, r3
 8018742:	4770      	bx	lr
